[{"url":"https://api.github.com/repos/coq/coq/issues/comments/337550017","html_url":"https://github.com/coq/coq/issues/5264#issuecomment-337550017","issue_url":"https://api.github.com/repos/coq/coq/issues/5264","id":337550017,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU1MDAxNw==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-12-14T18:04:32Z","updated_at":"2021-07-18T11:38:39Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\r\n\r\nAs in https://coq.inria.fr/cocorico/CoqDevelopment/UnificationProblems#Inverting_tuples_in_instances_of_existential_variables:\r\n```coq\r\nGoal forall T1 (P1 : T1 -> Type), sigT P1 -> sigT P1.\r\n  intros T1 P1 H1.\r\n  eexists ?[x].\r\n  destruct H1 as [x1 H1].\r\n  Fail apply H1. (* Error: In environment\r\nT1 : Type\r\nP1 : T1 -> Type\r\nx1 : T1\r\nH1 : P1 x1\r\nUnable to unify \"?x@ {H1:=existT P1 x1 H1}\" with \"x1\" (cannot instantiate \"?x\" because \"x1\" is not in its scope: available arguments\r\nare \"T1\" \"P1\" \"existT P1 x1 H1\"). *)\r\n  instantiate (x:=projT1 H1).\r\n  apply H1.\r\n```\r\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337550017/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337550020","html_url":"https://github.com/coq/coq/issues/5264#issuecomment-337550020","issue_url":"https://api.github.com/repos/coq/coq/issues/5264","id":337550020,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU1MDAyMA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-12-14T18:15:20Z","updated_at":"2021-07-18T11:38:46Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\r\n\r\nHere is another case I'd like solved:\r\n```coq\r\nGoal forall T1 (ls : list T1), { ls' : _ | ls = nil \\/ List.tl ls = ls' }.\r\n  intros T1 ls.\r\n  eexists ?[x].\r\n  destruct ls as [|x xs]; [ left; reflexivity | right ].\r\n  simpl.\r\n  Fail reflexivity. (* In nested Ltac calls to \"reflexivity\" and \"reflexivity\", last call failed.\r\nError: In environment\r\nT1 : Type\r\nx : T1\r\nxs : list T1\r\nUnable to unify \"?x@ {ls:=(x :: xs)%list}\" with \"xs\" (cannot instantiate \"?x\" because \"xs\" is not in its scope: available arguments\r\nare \"T1\" \"(x :: xs)%list\").\r\n                     *)\r\n  instantiate (x:=match ls with cons x xs => xs | _ => _ end).\r\n  reflexivity.\r\n```\r\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337550020/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337550022","html_url":"https://github.com/coq/coq/issues/5264#issuecomment-337550022","issue_url":"https://api.github.com/repos/coq/coq/issues/5264","id":337550022,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU1MDAyMg==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-12-14T19:43:55Z","updated_at":"2021-07-18T11:38:57Z","author_association":"CONTRIBUTOR","body":"Comment author: @jonleivent\r\n\r\nThis ties into this CEP: https://github.com/coq/ceps/blob/master/text/011-coevolving-evars.md\r\n\r\nHere's how it would pan out with the first example:\r\n```coq\r\nGoal forall T1 (P1 : T1 -> Type), sigT P1 -> sigT P1.\r\n  intros T1 P1 H1.\r\n  eexists ?[x].\r\n  destruct H1 as [x1 H1].\r\n  instantiate (1:=ltac:(destruct H1 as [x1 H1])).\r\n  apply H1.\r\nQed.\r\n```\r\nand in the second example:\r\n```coq\r\nRequire List.\r\nGoal forall T1 (ls : list T1), { ls' : _ | ls = nil \\/ List.tl ls = ls' }.\r\n  intros T1 ls.\r\n  eexists ?[x].\r\n  destruct ls as [|x xs]; [ left; reflexivity | right ].\r\n  simpl.\r\n  instantiate (1:=ltac:(destruct ls as [|x xs])).\r\n  reflexivity.\r\nGrab Existential Variables.\r\n  constructor.\r\nQed.\r\n```\r\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337550022/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/794482302","html_url":"https://github.com/coq/coq/issues/5264#issuecomment-794482302","issue_url":"https://api.github.com/repos/coq/coq/issues/5264","id":794482302,"node_id":"MDEyOklzc3VlQ29tbWVudDc5NDQ4MjMwMg==","user":{"login":"JasonGross","id":396076,"node_id":"MDQ6VXNlcjM5NjA3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/396076?v=4","gravatar_id":"","url":"https://api.github.com/users/JasonGross","html_url":"https://github.com/JasonGross","followers_url":"https://api.github.com/users/JasonGross/followers","following_url":"https://api.github.com/users/JasonGross/following{/other_user}","gists_url":"https://api.github.com/users/JasonGross/gists{/gist_id}","starred_url":"https://api.github.com/users/JasonGross/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JasonGross/subscriptions","organizations_url":"https://api.github.com/users/JasonGross/orgs","repos_url":"https://api.github.com/users/JasonGross/repos","events_url":"https://api.github.com/users/JasonGross/events{/privacy}","received_events_url":"https://api.github.com/users/JasonGross/received_events","type":"User","site_admin":false},"created_at":"2021-03-09T21:30:45Z","updated_at":"2021-03-09T21:30:45Z","author_association":"MEMBER","body":"Note that when the constructor is for a record with judgmental eta, projecting the arguments is never wrong (destructing a record with judgmental eta is a reversible step; we can never learn a later constraint that will forbid a solution obtained by projecting out the fields).\r\n\r\ncc also @herbelin ","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/794482302/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]