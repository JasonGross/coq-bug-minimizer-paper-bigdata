[{"url":"https://api.github.com/repos/coq/coq/issues/comments/337952219","html_url":"https://github.com/coq/coq/issues/5988#issuecomment-337952219","issue_url":"https://api.github.com/repos/coq/coq/issues/5988","id":337952219,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzk1MjIxOQ==","user":{"login":"ejgallego","id":7192257,"node_id":"MDQ6VXNlcjcxOTIyNTc=","avatar_url":"https://avatars.githubusercontent.com/u/7192257?v=4","gravatar_id":"","url":"https://api.github.com/users/ejgallego","html_url":"https://github.com/ejgallego","followers_url":"https://api.github.com/users/ejgallego/followers","following_url":"https://api.github.com/users/ejgallego/following{/other_user}","gists_url":"https://api.github.com/users/ejgallego/gists{/gist_id}","starred_url":"https://api.github.com/users/ejgallego/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ejgallego/subscriptions","organizations_url":"https://api.github.com/users/ejgallego/orgs","repos_url":"https://api.github.com/users/ejgallego/repos","events_url":"https://api.github.com/users/ejgallego/events{/privacy}","received_events_url":"https://api.github.com/users/ejgallego/received_events","type":"User","site_admin":false},"created_at":"2017-10-19T15:52:22Z","updated_at":"2017-10-19T15:52:22Z","author_association":"MEMBER","body":"Is this due to filesystem trashing? How many FS calls does `strace` show?\r\n\r\nIMHO, Coq should not trash the filesystem at every invocation.","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337952219/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337960303","html_url":"https://github.com/coq/coq/issues/5988#issuecomment-337960303","issue_url":"https://api.github.com/repos/coq/coq/issues/5988","id":337960303,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzk2MDMwMw==","user":{"login":"JasonGross","id":396076,"node_id":"MDQ6VXNlcjM5NjA3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/396076?v=4","gravatar_id":"","url":"https://api.github.com/users/JasonGross","html_url":"https://github.com/JasonGross","followers_url":"https://api.github.com/users/JasonGross/followers","following_url":"https://api.github.com/users/JasonGross/following{/other_user}","gists_url":"https://api.github.com/users/JasonGross/gists{/gist_id}","starred_url":"https://api.github.com/users/JasonGross/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JasonGross/subscriptions","organizations_url":"https://api.github.com/users/JasonGross/orgs","repos_url":"https://api.github.com/users/JasonGross/repos","events_url":"https://api.github.com/users/JasonGross/events{/privacy}","received_events_url":"https://api.github.com/users/JasonGross/received_events","type":"User","site_admin":false},"created_at":"2017-10-19T16:19:08Z","updated_at":"2017-10-19T16:19:08Z","author_association":"MEMBER","body":"Which are the filesystem calls?  The calls in `strace` for `xargs coqdep` are:\r\n```\r\naccess\r\narch\r\nbrk\r\nchdir\r\nclose\r\nexecve\r\nexit\r\nfcntl\r\nfstat\r\ngetcwd\r\ngetdents\r\ngetrlimit\r\nlseek\r\nmmap\r\nmprotect\r\nmunmap\r\nopen\r\nread\r\nreadlink\r\nrt\r\nset\r\nsigaltstack\r\nstat\r\nwrite\r\n```\r\nFor `xargs coqdep` with around 3617 files, the counts are:\r\n```\r\n70140   getcwd\r\n70138   chdir\r\n22683   stat\r\n14538   read\r\n8130    open\r\n8130    close\r\n7240    lseek\r\n7234    fcntl\r\n3617    write\r\n1772    getdents\r\n1234    brk\r\n896     fstat\r\n45      mmap\r\n20      mprotect\r\n12      rt\r\n12      access\r\n4       set\r\n2       sigaltstack\r\n2       readlink\r\n2       munmap\r\n2       getrlimit\r\n2       exit\r\n2       execve\r\n2       arch\r\n```\r\n\r\nFor an invocation of coqdep with a single file, the call counts are:\r\n```\r\n14009   getcwd\r\n14008   chdir\r\n9536    stat\r\n886     getdents\r\n450     open\r\n450     close\r\n448     fstat\r\n21      mmap\r\n10      mprotect\r\n9       read\r\n7       brk\r\n6       rt\r\n6       access\r\n5       lseek\r\n2       set\r\n2       fcntl\r\n1       write\r\n1       sigaltstack\r\n1       readlink\r\n1       munmap\r\n1       getrlimit\r\n1       exit\r\n1       execve\r\n1       arch\r\n```\r\nFor two invocations of coqdep with 1 (different) file each, the call counts are:\r\n```\r\n28006   getcwd\r\n28004   chdir\r\n19074   stat\r\n1772    getdents\r\n900     open\r\n900     close\r\n896     fstat\r\n42      mmap\r\n20      mprotect\r\n18      read\r\n14      brk\r\n12      rt\r\n12      access\r\n10      lseek\r\n4       set\r\n4       fcntl\r\n2       write\r\n2       sigaltstack\r\n2       readlink\r\n2       munmap\r\n2       getrlimit\r\n2       exit\r\n2       execve\r\n2       arch\r\n```","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337960303/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337969005","html_url":"https://github.com/coq/coq/issues/5988#issuecomment-337969005","issue_url":"https://api.github.com/repos/coq/coq/issues/5988","id":337969005,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzk2OTAwNQ==","user":{"login":"ejgallego","id":7192257,"node_id":"MDQ6VXNlcjcxOTIyNTc=","avatar_url":"https://avatars.githubusercontent.com/u/7192257?v=4","gravatar_id":"","url":"https://api.github.com/users/ejgallego","html_url":"https://github.com/ejgallego","followers_url":"https://api.github.com/users/ejgallego/followers","following_url":"https://api.github.com/users/ejgallego/following{/other_user}","gists_url":"https://api.github.com/users/ejgallego/gists{/gist_id}","starred_url":"https://api.github.com/users/ejgallego/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ejgallego/subscriptions","organizations_url":"https://api.github.com/users/ejgallego/orgs","repos_url":"https://api.github.com/users/ejgallego/repos","events_url":"https://api.github.com/users/ejgallego/events{/privacy}","received_events_url":"https://api.github.com/users/ejgallego/received_events","type":"User","site_admin":false},"created_at":"2017-10-19T16:50:04Z","updated_at":"2017-10-19T16:50:08Z","author_association":"MEMBER","body":"This looks really bad; we are `stat`ing thousand of entries... for a single file.","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337969005/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337969224","html_url":"https://github.com/coq/coq/issues/5988#issuecomment-337969224","issue_url":"https://api.github.com/repos/coq/coq/issues/5988","id":337969224,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzk2OTIyNA==","user":{"login":"ejgallego","id":7192257,"node_id":"MDQ6VXNlcjcxOTIyNTc=","avatar_url":"https://avatars.githubusercontent.com/u/7192257?v=4","gravatar_id":"","url":"https://api.github.com/users/ejgallego","html_url":"https://github.com/ejgallego","followers_url":"https://api.github.com/users/ejgallego/followers","following_url":"https://api.github.com/users/ejgallego/following{/other_user}","gists_url":"https://api.github.com/users/ejgallego/gists{/gist_id}","starred_url":"https://api.github.com/users/ejgallego/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ejgallego/subscriptions","organizations_url":"https://api.github.com/users/ejgallego/orgs","repos_url":"https://api.github.com/users/ejgallego/repos","events_url":"https://api.github.com/users/ejgallego/events{/privacy}","received_events_url":"https://api.github.com/users/ejgallego/received_events","type":"User","site_admin":false},"created_at":"2017-10-19T16:50:51Z","updated_at":"2017-10-19T16:50:51Z","author_association":"MEMBER","body":"IMHO the first thing to do is to look what is causing so much filesystem load.","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337969224/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337969436","html_url":"https://github.com/coq/coq/issues/5988#issuecomment-337969436","issue_url":"https://api.github.com/repos/coq/coq/issues/5988","id":337969436,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzk2OTQzNg==","user":{"login":"ejgallego","id":7192257,"node_id":"MDQ6VXNlcjcxOTIyNTc=","avatar_url":"https://avatars.githubusercontent.com/u/7192257?v=4","gravatar_id":"","url":"https://api.github.com/users/ejgallego","html_url":"https://github.com/ejgallego","followers_url":"https://api.github.com/users/ejgallego/followers","following_url":"https://api.github.com/users/ejgallego/following{/other_user}","gists_url":"https://api.github.com/users/ejgallego/gists{/gist_id}","starred_url":"https://api.github.com/users/ejgallego/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ejgallego/subscriptions","organizations_url":"https://api.github.com/users/ejgallego/orgs","repos_url":"https://api.github.com/users/ejgallego/repos","events_url":"https://api.github.com/users/ejgallego/events{/privacy}","received_events_url":"https://api.github.com/users/ejgallego/received_events","type":"User","site_admin":false},"created_at":"2017-10-19T16:51:40Z","updated_at":"2017-10-19T16:51:40Z","author_association":"MEMBER","body":"I think the `-o` solution is a valid one BTW, but it could be even better if we could optimize FS access.","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337969436/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/338012541","html_url":"https://github.com/coq/coq/issues/5988#issuecomment-338012541","issue_url":"https://api.github.com/repos/coq/coq/issues/5988","id":338012541,"node_id":"MDEyOklzc3VlQ29tbWVudDMzODAxMjU0MQ==","user":{"login":"JasonGross","id":396076,"node_id":"MDQ6VXNlcjM5NjA3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/396076?v=4","gravatar_id":"","url":"https://api.github.com/users/JasonGross","html_url":"https://github.com/JasonGross","followers_url":"https://api.github.com/users/JasonGross/followers","following_url":"https://api.github.com/users/JasonGross/following{/other_user}","gists_url":"https://api.github.com/users/JasonGross/gists{/gist_id}","starred_url":"https://api.github.com/users/JasonGross/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JasonGross/subscriptions","organizations_url":"https://api.github.com/users/JasonGross/orgs","repos_url":"https://api.github.com/users/JasonGross/repos","events_url":"https://api.github.com/users/JasonGross/events{/privacy}","received_events_url":"https://api.github.com/users/JasonGross/received_events","type":"User","site_admin":false},"created_at":"2017-10-19T19:30:21Z","updated_at":"2017-10-19T19:30:21Z","author_association":"MEMBER","body":"It looks like coqdep first creates a hashtable of every file bound to an identifier by the options, and then only after that looks for the modules in the file.  I think it should instead accumulate all of the requires in files, and build the hash table based on that information, and then compute the dependencies for each file.  In particular, if files contain only fully qualified imports, coqdep should be able to navigate directly to the files to check if they exist.  If files contain partially qualified imports, coqdep should not touch any files which could not possibly match any of the imports.","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/338012541/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/338055868","html_url":"https://github.com/coq/coq/issues/5988#issuecomment-338055868","issue_url":"https://api.github.com/repos/coq/coq/issues/5988","id":338055868,"node_id":"MDEyOklzc3VlQ29tbWVudDMzODA1NTg2OA==","user":{"login":"ejgallego","id":7192257,"node_id":"MDQ6VXNlcjcxOTIyNTc=","avatar_url":"https://avatars.githubusercontent.com/u/7192257?v=4","gravatar_id":"","url":"https://api.github.com/users/ejgallego","html_url":"https://github.com/ejgallego","followers_url":"https://api.github.com/users/ejgallego/followers","following_url":"https://api.github.com/users/ejgallego/following{/other_user}","gists_url":"https://api.github.com/users/ejgallego/gists{/gist_id}","starred_url":"https://api.github.com/users/ejgallego/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ejgallego/subscriptions","organizations_url":"https://api.github.com/users/ejgallego/orgs","repos_url":"https://api.github.com/users/ejgallego/repos","events_url":"https://api.github.com/users/ejgallego/events{/privacy}","received_events_url":"https://api.github.com/users/ejgallego/received_events","type":"User","site_admin":false},"created_at":"2017-10-19T22:29:24Z","updated_at":"2017-10-19T22:29:24Z","author_association":"MEMBER","body":"Correct, that should also be the strategy for Coq too.","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/338055868/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/341555523","html_url":"https://github.com/coq/coq/issues/5988#issuecomment-341555523","issue_url":"https://api.github.com/repos/coq/coq/issues/5988","id":341555523,"node_id":"MDEyOklzc3VlQ29tbWVudDM0MTU1NTUyMw==","user":{"login":"psteckler","id":2244648,"node_id":"MDQ6VXNlcjIyNDQ2NDg=","avatar_url":"https://avatars.githubusercontent.com/u/2244648?v=4","gravatar_id":"","url":"https://api.github.com/users/psteckler","html_url":"https://github.com/psteckler","followers_url":"https://api.github.com/users/psteckler/followers","following_url":"https://api.github.com/users/psteckler/following{/other_user}","gists_url":"https://api.github.com/users/psteckler/gists{/gist_id}","starred_url":"https://api.github.com/users/psteckler/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/psteckler/subscriptions","organizations_url":"https://api.github.com/users/psteckler/orgs","repos_url":"https://api.github.com/users/psteckler/repos","events_url":"https://api.github.com/users/psteckler/events{/privacy}","received_events_url":"https://api.github.com/users/psteckler/received_events","type":"User","site_admin":false},"created_at":"2017-11-02T20:56:26Z","updated_at":"2017-11-02T20:56:26Z","author_association":"CONTRIBUTOR","body":"The behavior today is that `coqdep` can take many files as input, and just prints everything to `stdout`?","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/341555523/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/341562432","html_url":"https://github.com/coq/coq/issues/5988#issuecomment-341562432","issue_url":"https://api.github.com/repos/coq/coq/issues/5988","id":341562432,"node_id":"MDEyOklzc3VlQ29tbWVudDM0MTU2MjQzMg==","user":{"login":"psteckler","id":2244648,"node_id":"MDQ6VXNlcjIyNDQ2NDg=","avatar_url":"https://avatars.githubusercontent.com/u/2244648?v=4","gravatar_id":"","url":"https://api.github.com/users/psteckler","html_url":"https://github.com/psteckler","followers_url":"https://api.github.com/users/psteckler/followers","following_url":"https://api.github.com/users/psteckler/following{/other_user}","gists_url":"https://api.github.com/users/psteckler/gists{/gist_id}","starred_url":"https://api.github.com/users/psteckler/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/psteckler/subscriptions","organizations_url":"https://api.github.com/users/psteckler/orgs","repos_url":"https://api.github.com/users/psteckler/repos","events_url":"https://api.github.com/users/psteckler/events{/privacy}","received_events_url":"https://api.github.com/users/psteckler/received_events","type":"User","site_admin":false},"created_at":"2017-11-02T21:23:22Z","updated_at":"2017-11-02T21:23:22Z","author_association":"CONTRIBUTOR","body":"My understanding of the code is:\r\n- each file on the command line gets added to a queue, paired with its absolute filename (one use of `getcwd` apparently)\r\n- there are two calls to `traite_fichier_Coq` for each queue item, so the file is apparently scanned twice (ugh); the difference is a passed suffix which can appear in the output; checking a set for membership does appear to reduce some duplicate computation, though\r\n- in those duplicated calls, the code is looking for `Require`, `Declare`, and `Load`\r\n- On the first call, the passed suffix is `.vo`, or a user-defined one; on the second call, it's always `.vio`\r\n\r\nWhat's the reason for scanning the file twice? Couldn't the information needed for output be recorded in one pass?\r\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/341562432/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/341579764","html_url":"https://github.com/coq/coq/issues/5988#issuecomment-341579764","issue_url":"https://api.github.com/repos/coq/coq/issues/5988","id":341579764,"node_id":"MDEyOklzc3VlQ29tbWVudDM0MTU3OTc2NA==","user":{"login":"JasonGross","id":396076,"node_id":"MDQ6VXNlcjM5NjA3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/396076?v=4","gravatar_id":"","url":"https://api.github.com/users/JasonGross","html_url":"https://github.com/JasonGross","followers_url":"https://api.github.com/users/JasonGross/followers","following_url":"https://api.github.com/users/JasonGross/following{/other_user}","gists_url":"https://api.github.com/users/JasonGross/gists{/gist_id}","starred_url":"https://api.github.com/users/JasonGross/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JasonGross/subscriptions","organizations_url":"https://api.github.com/users/JasonGross/orgs","repos_url":"https://api.github.com/users/JasonGross/repos","events_url":"https://api.github.com/users/JasonGross/events{/privacy}","received_events_url":"https://api.github.com/users/JasonGross/received_events","type":"User","site_admin":false},"created_at":"2017-11-02T22:43:29Z","updated_at":"2017-11-02T22:43:29Z","author_association":"MEMBER","body":"> The behavior today is that coqdep can take many files as input, and just prints everything to stdout?\r\n\r\nYes\r\n\r\n> What's the reason for scanning the file twice?\r\n\r\nThis is not the bottleneck.  The bottleneck is that `coqdep` walks the entire directory tree (potentially tens of thousands of files) and calls `stat` on each one, even when most of the walking doesn't correspond to anything that it could possibly be looking for.  If you run `coqdep` on\r\n```coq\r\nRequire Import Coq.Init.Datatypes.\r\n```\r\nit should not touch the file tree, at all, unless you pass `-nois -R . Coq` or similar.  Even if you do, it should then walk the folders, but only stat files named `Datatypes.v` in `./Init/` and directories of the form `./**/Coq/Init/`.","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/341579764/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/341733078","html_url":"https://github.com/coq/coq/issues/5988#issuecomment-341733078","issue_url":"https://api.github.com/repos/coq/coq/issues/5988","id":341733078,"node_id":"MDEyOklzc3VlQ29tbWVudDM0MTczMzA3OA==","user":{"login":"psteckler","id":2244648,"node_id":"MDQ6VXNlcjIyNDQ2NDg=","avatar_url":"https://avatars.githubusercontent.com/u/2244648?v=4","gravatar_id":"","url":"https://api.github.com/users/psteckler","html_url":"https://github.com/psteckler","followers_url":"https://api.github.com/users/psteckler/followers","following_url":"https://api.github.com/users/psteckler/following{/other_user}","gists_url":"https://api.github.com/users/psteckler/gists{/gist_id}","starred_url":"https://api.github.com/users/psteckler/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/psteckler/subscriptions","organizations_url":"https://api.github.com/users/psteckler/orgs","repos_url":"https://api.github.com/users/psteckler/repos","events_url":"https://api.github.com/users/psteckler/events{/privacy}","received_events_url":"https://api.github.com/users/psteckler/received_events","type":"User","site_admin":false},"created_at":"2017-11-03T15:16:17Z","updated_at":"2017-11-03T15:29:29Z","author_association":"CONTRIBUTOR","body":"Yes, `treat_file` has this line:\r\n\r\n```Array.iter (treat_file (Some newdirname)) (Sys.readdir complete_name))```\r\n\r\nI'll see what might be changed.\r\n\r\nUpdate: no, this code is only called if you pass a directory on the command-line (I think).\r\n\r\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/341733078/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/341736876","html_url":"https://github.com/coq/coq/issues/5988#issuecomment-341736876","issue_url":"https://api.github.com/repos/coq/coq/issues/5988","id":341736876,"node_id":"MDEyOklzc3VlQ29tbWVudDM0MTczNjg3Ng==","user":{"login":"SkySkimmer","id":2461932,"node_id":"MDQ6VXNlcjI0NjE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/2461932?v=4","gravatar_id":"","url":"https://api.github.com/users/SkySkimmer","html_url":"https://github.com/SkySkimmer","followers_url":"https://api.github.com/users/SkySkimmer/followers","following_url":"https://api.github.com/users/SkySkimmer/following{/other_user}","gists_url":"https://api.github.com/users/SkySkimmer/gists{/gist_id}","starred_url":"https://api.github.com/users/SkySkimmer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/SkySkimmer/subscriptions","organizations_url":"https://api.github.com/users/SkySkimmer/orgs","repos_url":"https://api.github.com/users/SkySkimmer/repos","events_url":"https://api.github.com/users/SkySkimmer/events{/privacy}","received_events_url":"https://api.github.com/users/SkySkimmer/received_events","type":"User","site_admin":false},"created_at":"2017-11-03T15:28:34Z","updated_at":"2017-11-03T15:28:34Z","author_association":"CONTRIBUTOR","body":"Maybe we could use _CoqProject when present, since it already has the list of files?\r\n\r\n>it should not touch the file tree, at all, unless you pass -nois -R . Coq or similar. Even if you do, it should then walk the folders, but only stat files named Datatypes.v in ./Init/ and directories of the form ./**/Coq/Init/.\r\n\r\nDoesn't that force it to stat everything in `.` recursively in order to treat the `**`?\r\nI don't know what happens when you have a directory with a `.` in its name, so maybe that could let us skip .v files and compilation artifacts when looking for a directory.","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/341736876/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/341806960","html_url":"https://github.com/coq/coq/issues/5988#issuecomment-341806960","issue_url":"https://api.github.com/repos/coq/coq/issues/5988","id":341806960,"node_id":"MDEyOklzc3VlQ29tbWVudDM0MTgwNjk2MA==","user":{"login":"psteckler","id":2244648,"node_id":"MDQ6VXNlcjIyNDQ2NDg=","avatar_url":"https://avatars.githubusercontent.com/u/2244648?v=4","gravatar_id":"","url":"https://api.github.com/users/psteckler","html_url":"https://github.com/psteckler","followers_url":"https://api.github.com/users/psteckler/followers","following_url":"https://api.github.com/users/psteckler/following{/other_user}","gists_url":"https://api.github.com/users/psteckler/gists{/gist_id}","starred_url":"https://api.github.com/users/psteckler/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/psteckler/subscriptions","organizations_url":"https://api.github.com/users/psteckler/orgs","repos_url":"https://api.github.com/users/psteckler/repos","events_url":"https://api.github.com/users/psteckler/events{/privacy}","received_events_url":"https://api.github.com/users/psteckler/received_events","type":"User","site_admin":false},"created_at":"2017-11-03T19:42:21Z","updated_at":"2017-11-03T19:42:42Z","author_association":"CONTRIBUTOR","body":"More software archeology. These lines:\r\n\r\n```\r\nadd_rec_dir_import add_coqlib_known (coqlib//\"theories\") [\"Coq\"];\r\nadd_rec_dir_import add_coqlib_known (coqlib//\"plugins\") [\"Coq\"];\r\n```\r\nadd entries to a hash table for `.vo` and `.vio` files, by traversing the theories and plugins directories.\r\n(There's another table for `.v` files that seems to get the file passed on the command line, and then plugin and theory `.v` files if the `-boot` option is passed.)\r\n\r\nIf there's a `Require`, there's a lookup in the `.v` table, which will fail in the non-boot case; then there's a lookup in the `.vo/.vio` table. If that fails, there's a warning printed.\r\n\r\nSo the fix would be: don't create the `.vo/.vio` table, in place of the hash table lookup, look for the `.vo` or `.vio` file in `theories` and `plugins`.\r\n\r\nSound right?","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/341806960/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/341810674","html_url":"https://github.com/coq/coq/issues/5988#issuecomment-341810674","issue_url":"https://api.github.com/repos/coq/coq/issues/5988","id":341810674,"node_id":"MDEyOklzc3VlQ29tbWVudDM0MTgxMDY3NA==","user":{"login":"psteckler","id":2244648,"node_id":"MDQ6VXNlcjIyNDQ2NDg=","avatar_url":"https://avatars.githubusercontent.com/u/2244648?v=4","gravatar_id":"","url":"https://api.github.com/users/psteckler","html_url":"https://github.com/psteckler","followers_url":"https://api.github.com/users/psteckler/followers","following_url":"https://api.github.com/users/psteckler/following{/other_user}","gists_url":"https://api.github.com/users/psteckler/gists{/gist_id}","starred_url":"https://api.github.com/users/psteckler/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/psteckler/subscriptions","organizations_url":"https://api.github.com/users/psteckler/orgs","repos_url":"https://api.github.com/users/psteckler/repos","events_url":"https://api.github.com/users/psteckler/events{/privacy}","received_events_url":"https://api.github.com/users/psteckler/received_events","type":"User","site_admin":false},"created_at":"2017-11-03T19:57:56Z","updated_at":"2017-11-03T19:57:56Z","author_association":"CONTRIBUTOR","body":"I guess the disadvantage would be, if you pass several files to coqdep that `Require` the same files, you'll end up `stat`ing those files several times, instead of lookup them up in the the hash table. \r\n\r\nThe current Coq Makefile passes one file at a time to coqdep, as far as I can see, so that's not an issue there.","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/341810674/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/341817262","html_url":"https://github.com/coq/coq/issues/5988#issuecomment-341817262","issue_url":"https://api.github.com/repos/coq/coq/issues/5988","id":341817262,"node_id":"MDEyOklzc3VlQ29tbWVudDM0MTgxNzI2Mg==","user":{"login":"psteckler","id":2244648,"node_id":"MDQ6VXNlcjIyNDQ2NDg=","avatar_url":"https://avatars.githubusercontent.com/u/2244648?v=4","gravatar_id":"","url":"https://api.github.com/users/psteckler","html_url":"https://github.com/psteckler","followers_url":"https://api.github.com/users/psteckler/followers","following_url":"https://api.github.com/users/psteckler/following{/other_user}","gists_url":"https://api.github.com/users/psteckler/gists{/gist_id}","starred_url":"https://api.github.com/users/psteckler/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/psteckler/subscriptions","organizations_url":"https://api.github.com/users/psteckler/orgs","repos_url":"https://api.github.com/users/psteckler/repos","events_url":"https://api.github.com/users/psteckler/events{/privacy}","received_events_url":"https://api.github.com/users/psteckler/received_events","type":"User","site_admin":false},"created_at":"2017-11-03T20:26:13Z","updated_at":"2017-11-03T20:26:13Z","author_association":"CONTRIBUTOR","body":"Note that Coq itself uses `coqdep_boot`, a separate program from `coqdep`. That one works like `coqdep -boot`, so it builds the table of `.v` files, and not the `.vo/.vio` table.","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/341817262/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/341824038","html_url":"https://github.com/coq/coq/issues/5988#issuecomment-341824038","issue_url":"https://api.github.com/repos/coq/coq/issues/5988","id":341824038,"node_id":"MDEyOklzc3VlQ29tbWVudDM0MTgyNDAzOA==","user":{"login":"psteckler","id":2244648,"node_id":"MDQ6VXNlcjIyNDQ2NDg=","avatar_url":"https://avatars.githubusercontent.com/u/2244648?v=4","gravatar_id":"","url":"https://api.github.com/users/psteckler","html_url":"https://github.com/psteckler","followers_url":"https://api.github.com/users/psteckler/followers","following_url":"https://api.github.com/users/psteckler/following{/other_user}","gists_url":"https://api.github.com/users/psteckler/gists{/gist_id}","starred_url":"https://api.github.com/users/psteckler/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/psteckler/subscriptions","organizations_url":"https://api.github.com/users/psteckler/orgs","repos_url":"https://api.github.com/users/psteckler/repos","events_url":"https://api.github.com/users/psteckler/events{/privacy}","received_events_url":"https://api.github.com/users/psteckler/received_events","type":"User","site_admin":false},"created_at":"2017-11-03T20:52:53Z","updated_at":"2017-11-03T20:55:55Z","author_association":"CONTRIBUTOR","body":"Apparently, `coqc` will accept any of:\r\n```\r\nRequire Import Coq.Init.Datatypes.\r\nRequire Import Init.Datatypes.\r\nRequire Import Datatypes.\r\n```\r\neach with the same meaning. The hash table that `coqdep` creates an entry for all the sub-paths to `.vo` files, making it easy to find the full or partial paths.\r\n\r\nSo if we want to `stat` the `.vo` file, what's the search algorithm here? \r\n\r\nMaybe it's better not to mess with this hash table business, and just add the suggested `-o` feature, suffering the overhead of the directory traversals just once.\r\n\r\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/341824038/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/341848312","html_url":"https://github.com/coq/coq/issues/5988#issuecomment-341848312","issue_url":"https://api.github.com/repos/coq/coq/issues/5988","id":341848312,"node_id":"MDEyOklzc3VlQ29tbWVudDM0MTg0ODMxMg==","user":{"login":"JasonGross","id":396076,"node_id":"MDQ6VXNlcjM5NjA3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/396076?v=4","gravatar_id":"","url":"https://api.github.com/users/JasonGross","html_url":"https://github.com/JasonGross","followers_url":"https://api.github.com/users/JasonGross/followers","following_url":"https://api.github.com/users/JasonGross/following{/other_user}","gists_url":"https://api.github.com/users/JasonGross/gists{/gist_id}","starred_url":"https://api.github.com/users/JasonGross/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JasonGross/subscriptions","organizations_url":"https://api.github.com/users/JasonGross/orgs","repos_url":"https://api.github.com/users/JasonGross/repos","events_url":"https://api.github.com/users/JasonGross/events{/privacy}","received_events_url":"https://api.github.com/users/JasonGross/received_events","type":"User","site_admin":false},"created_at":"2017-11-03T23:04:43Z","updated_at":"2017-11-03T23:04:43Z","author_association":"MEMBER","body":"> Maybe we could use _CoqProject when present, since it already has the list of files?\r\n\r\nI like this idea, but note that it does not contain the names of any installed libraries, or files picked up via COQPATH\r\n\r\n> Doesn't that force it to stat everything in . recursively in order to treat the **?\r\n\r\nUgh, that's right.  I think we can fix this by splitting the two things that coqdep does: currently it warns on ambiguous `Require`s.  I think there should be a mode where you pass it a list of all the .v files, where it does scan the entire directory tree, and warns once for every ambiguity.\r\n\r\nSeparately, it should have a mode where it takes advantage of not needing to warn by picking a deterministic ordering for where it looks for files: it should look for the shortest path that matches the given library name.  This way, each fully qualified `Require` will only incur `(# of entries in COQPATH) + (# of -R bindings to the top-level library)` file-system calls.\r\n\r\n@psteckler \r\n> Maybe it's better not to mess with this hash table business, and just add the suggested -o feature, suffering the overhead of the directory traversals just once.\r\n\r\nCertainly, that's a simpler solution (though it will require some makefile wrangling), and I'd be fine with it.","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/341848312/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/341850878","html_url":"https://github.com/coq/coq/issues/5988#issuecomment-341850878","issue_url":"https://api.github.com/repos/coq/coq/issues/5988","id":341850878,"node_id":"MDEyOklzc3VlQ29tbWVudDM0MTg1MDg3OA==","user":{"login":"SkySkimmer","id":2461932,"node_id":"MDQ6VXNlcjI0NjE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/2461932?v=4","gravatar_id":"","url":"https://api.github.com/users/SkySkimmer","html_url":"https://github.com/SkySkimmer","followers_url":"https://api.github.com/users/SkySkimmer/followers","following_url":"https://api.github.com/users/SkySkimmer/following{/other_user}","gists_url":"https://api.github.com/users/SkySkimmer/gists{/gist_id}","starred_url":"https://api.github.com/users/SkySkimmer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/SkySkimmer/subscriptions","organizations_url":"https://api.github.com/users/SkySkimmer/orgs","repos_url":"https://api.github.com/users/SkySkimmer/repos","events_url":"https://api.github.com/users/SkySkimmer/events{/privacy}","received_events_url":"https://api.github.com/users/SkySkimmer/received_events","type":"User","site_admin":false},"created_at":"2017-11-03T23:24:53Z","updated_at":"2017-11-03T23:24:53Z","author_association":"CONTRIBUTOR","body":"The -o solution means we have to regenerate the dependencies for every .v every time one changes though.\r\n\r\n>I like this idea, but note that it does not contain the names of any installed libraries, or files picked up via COQPATH\r\n\r\nIf we start using _CoqProject when present it could be installed along with vos (sort of like the ocamlfind META files I guess). I don't know how COQPATH works.\r\n\r\n> I think there should be a mode where you pass it a list of all the .v files [...]\r\n\r\nSomething like\r\n- for `coqdep` a `-known-files path` which disables filesystem scanning and instead loads the list of files from the file at `path`\r\n- a command `coqfind` which translates `-Q/-R/-I/$COQPATH` into a `find` invocation (does `coqdep` look for something more complicated than for each `-R foo bar` `find foo -type f -name '*.v'`? Plus I guess it has some rules like skipping `.git` directories.)\r\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/341850878/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/342213890","html_url":"https://github.com/coq/coq/issues/5988#issuecomment-342213890","issue_url":"https://api.github.com/repos/coq/coq/issues/5988","id":342213890,"node_id":"MDEyOklzc3VlQ29tbWVudDM0MjIxMzg5MA==","user":{"login":"psteckler","id":2244648,"node_id":"MDQ6VXNlcjIyNDQ2NDg=","avatar_url":"https://avatars.githubusercontent.com/u/2244648?v=4","gravatar_id":"","url":"https://api.github.com/users/psteckler","html_url":"https://github.com/psteckler","followers_url":"https://api.github.com/users/psteckler/followers","following_url":"https://api.github.com/users/psteckler/following{/other_user}","gists_url":"https://api.github.com/users/psteckler/gists{/gist_id}","starred_url":"https://api.github.com/users/psteckler/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/psteckler/subscriptions","organizations_url":"https://api.github.com/users/psteckler/orgs","repos_url":"https://api.github.com/users/psteckler/repos","events_url":"https://api.github.com/users/psteckler/events{/privacy}","received_events_url":"https://api.github.com/users/psteckler/received_events","type":"User","site_admin":false},"created_at":"2017-11-06T16:59:38Z","updated_at":"2017-11-06T16:59:38Z","author_association":"CONTRIBUTOR","body":"> a command coqfind which translates -Q/-R/-I/$COQPATH into a find invocation (does coqdep look for something more complicated than for each -R foo bar find foo -type f -name '*.v'? \r\n\r\nWill that work on Windows? OS X?\r\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/342213890/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/342215260","html_url":"https://github.com/coq/coq/issues/5988#issuecomment-342215260","issue_url":"https://api.github.com/repos/coq/coq/issues/5988","id":342215260,"node_id":"MDEyOklzc3VlQ29tbWVudDM0MjIxNTI2MA==","user":{"login":"psteckler","id":2244648,"node_id":"MDQ6VXNlcjIyNDQ2NDg=","avatar_url":"https://avatars.githubusercontent.com/u/2244648?v=4","gravatar_id":"","url":"https://api.github.com/users/psteckler","html_url":"https://github.com/psteckler","followers_url":"https://api.github.com/users/psteckler/followers","following_url":"https://api.github.com/users/psteckler/following{/other_user}","gists_url":"https://api.github.com/users/psteckler/gists{/gist_id}","starred_url":"https://api.github.com/users/psteckler/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/psteckler/subscriptions","organizations_url":"https://api.github.com/users/psteckler/orgs","repos_url":"https://api.github.com/users/psteckler/repos","events_url":"https://api.github.com/users/psteckler/events{/privacy}","received_events_url":"https://api.github.com/users/psteckler/received_events","type":"User","site_admin":false},"created_at":"2017-11-06T17:03:48Z","updated_at":"2017-11-06T17:04:10Z","author_association":"CONTRIBUTOR","body":"I can start with the `-o` idea. I think the flag should be something else, since `-o` in UnixLinuxLand is typically used to name a single output file. \r\n\r\nHow about `--with-file-outputs`?","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/342215260/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/342219695","html_url":"https://github.com/coq/coq/issues/5988#issuecomment-342219695","issue_url":"https://api.github.com/repos/coq/coq/issues/5988","id":342219695,"node_id":"MDEyOklzc3VlQ29tbWVudDM0MjIxOTY5NQ==","user":{"login":"JasonGross","id":396076,"node_id":"MDQ6VXNlcjM5NjA3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/396076?v=4","gravatar_id":"","url":"https://api.github.com/users/JasonGross","html_url":"https://github.com/JasonGross","followers_url":"https://api.github.com/users/JasonGross/followers","following_url":"https://api.github.com/users/JasonGross/following{/other_user}","gists_url":"https://api.github.com/users/JasonGross/gists{/gist_id}","starred_url":"https://api.github.com/users/JasonGross/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JasonGross/subscriptions","organizations_url":"https://api.github.com/users/JasonGross/orgs","repos_url":"https://api.github.com/users/JasonGross/repos","events_url":"https://api.github.com/users/JasonGross/events{/privacy}","received_events_url":"https://api.github.com/users/JasonGross/received_events","type":"User","site_admin":false},"created_at":"2017-11-06T17:17:27Z","updated_at":"2017-11-06T17:17:27Z","author_association":"MEMBER","body":"> The -o solution means we have to regenerate the dependencies for every .v every time one changes though.\r\n\r\nThis is not a bottleneck that I have ever seen.  I don't know of any recipe that depends on one `.v.d` without depending on all of them.  \r\n\r\n> a command coqfind which translates -Q/-R/-I/$COQPATH into a find invocation (does coqdep look for something more complicated than for each -R foo bar find foo -type f -name '*.v'? Plus I guess it has some rules like skipping .git directories.)\r\n\r\nYeah, that should work.\r\n\r\n> Will that work on Windows? OS X?\r\n\r\nOh, you mean, do we have to ship a version of `find`... hmm...  We could just take the directory-walking logic from coqdep and have our own version of `coqfind` in ocaml...\r\n\r\n> I can start with the -o idea. ... How about --with-file-ouputs?\r\n\r\nSounds good to me","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/342219695/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/342321848","html_url":"https://github.com/coq/coq/issues/5988#issuecomment-342321848","issue_url":"https://api.github.com/repos/coq/coq/issues/5988","id":342321848,"node_id":"MDEyOklzc3VlQ29tbWVudDM0MjMyMTg0OA==","user":{"login":"psteckler","id":2244648,"node_id":"MDQ6VXNlcjIyNDQ2NDg=","avatar_url":"https://avatars.githubusercontent.com/u/2244648?v=4","gravatar_id":"","url":"https://api.github.com/users/psteckler","html_url":"https://github.com/psteckler","followers_url":"https://api.github.com/users/psteckler/followers","following_url":"https://api.github.com/users/psteckler/following{/other_user}","gists_url":"https://api.github.com/users/psteckler/gists{/gist_id}","starred_url":"https://api.github.com/users/psteckler/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/psteckler/subscriptions","organizations_url":"https://api.github.com/users/psteckler/orgs","repos_url":"https://api.github.com/users/psteckler/repos","events_url":"https://api.github.com/users/psteckler/events{/privacy}","received_events_url":"https://api.github.com/users/psteckler/received_events","type":"User","site_admin":false},"created_at":"2017-11-06T23:22:15Z","updated_at":"2017-11-06T23:22:15Z","author_association":"CONTRIBUTOR","body":"Created #6099.","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/342321848/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]