[{"url":"https://api.github.com/repos/coq/coq/issues/comments/337520044","html_url":"https://github.com/coq/coq/issues/3367#issuecomment-337520044","issue_url":"https://api.github.com/repos/coq/coq/issues/3367","id":337520044,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyMDA0NA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-06-10T00:07:22Z","updated_at":"2017-10-18T09:19:49Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nI would like a variant of [abstract] (or a flag to pass to [abstract]) that results in a transparent definition rather than an opaque one.  Ideally, it would also take an integer argument specifying the opacity of the constant.\n\nThis would be useful in conjunction with tactics in terms.  For example, I could define\n\nNotation \"'hide' x 'as' y\" := $(transparent_abstract (exact x) as y)$.\n\nand you'd be able to use [hide <gigantic term> as foo] as a notation, and the resulting term would mention [foo] rather than the gigantic term.  This would be especially useful for hiding strings (even more so if there's a way to go between strings and names).  For example, it might be nice to be able to define:\n\nNotation \"'s'_ x\" := $(transparent_abstract (exact (string_of_name x)) as x)$.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337520044/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337520045","html_url":"https://github.com/coq/coq/issues/3367#issuecomment-337520045","issue_url":"https://api.github.com/repos/coq/coq/issues/3367","id":337520045,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyMDA0NQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-06-10T00:10:19Z","updated_at":"2017-10-18T09:19:49Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nWhere by [abstract ... as ...] I actually mean [abstract ... using ...]\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337520045/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337520046","html_url":"https://github.com/coq/coq/issues/3367#issuecomment-337520046","issue_url":"https://api.github.com/repos/coq/coq/issues/3367","id":337520046,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyMDA0Ng==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-06-10T00:12:44Z","updated_at":"2017-10-18T09:19:49Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nAnd I guess I actually mean\n\nNotation \"'hide' x 'as' y\" := $(first [ exact y\n                                      | transparent_abstract (exact x) using y])$.\n\nand\n\nNotation \"'s'_ x\" := $(first [ exact x\n                             | transparent_abstract (exact (string_of_name x)) using x ])$.\n\nso that we don't duplicate definitions.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337520046/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337520048","html_url":"https://github.com/coq/coq/issues/3367#issuecomment-337520048","issue_url":"https://api.github.com/repos/coq/coq/issues/3367","id":337520048,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyMDA0OA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-06-10T08:28:51Z","updated_at":"2017-10-18T09:19:49Z","author_association":"CONTRIBUTOR","body":"Comment author: @gares\n\nAbstract is an abomination, I guess I've been clear enough about that.\n\nThis is a \"wontfix in the way you say\" of course.\n\nWould you consider using the [: bla] patterns of ssreflect 1.5 as a solution \nfor that?\nThey generate a normal abstraction, not a let-in, but is seems pretty much what you are looking for.  Having them generate a let-in is clearly doable.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337520048/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337520049","html_url":"https://github.com/coq/coq/issues/3367#issuecomment-337520049","issue_url":"https://api.github.com/repos/coq/coq/issues/3367","id":337520049,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyMDA0OQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-06-10T18:57:12Z","updated_at":"2017-10-18T09:19:49Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nWhat are the [: bla] patterns of ssreflect?\n\nWhat makes abstract an abomination?  Side effects?  If that's the case, is there any hope of getting macros at the vernacular level?\n\nThe particular issue I want to solve is that, by hiding strings in definitions, you can get a factor of four speedup.  (I can make you a rather long example file, if you'd like.)  In this particular example, [Defined] goes down from 2 minutes to 14 seconds.  I'm looking for a nice way to not need to do a bunch of [Definition FOO := \"foo\".] at the top, and can instead either do something like [Intern Strings \"foo\" \"bar\" \"baz\".] and get the definitions via a vernacular-level macro, or construct the definitions on the fly inside of, e.g., records.  (I don't think either let ... in ...s nor normal abstractions (you mean function abstractions, right?) will give me this.)\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337520049/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337520053","html_url":"https://github.com/coq/coq/issues/3367#issuecomment-337520053","issue_url":"https://api.github.com/repos/coq/coq/issues/3367","id":337520053,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyMDA1Mw==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-06-10T19:17:24Z","updated_at":"2017-10-18T09:19:50Z","author_association":"CONTRIBUTOR","body":"Comment author: @gares\n\nYes, you are in middle of a theorem and you inject in the global environment a new name.  What if the side effect is optional \"first [ bla | abstract bla ]\"?\nWhat if the code is run in a worker process (another address space)?\n\nScriptable vernacular is way more interesting, and I know power users that would love it.  And nobody is working on it, as far as I can tell.\n\nYou can put let-in in records, just use :=, but I don't know which algorithmic complexity you are trying to work around.  Finding that out is probably a good start to get it fixed.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337520053/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337520054","html_url":"https://github.com/coq/coq/issues/3367#issuecomment-337520054","issue_url":"https://api.github.com/repos/coq/coq/issues/3367","id":337520054,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyMDA1NA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-06-10T19:49:29Z","updated_at":"2017-10-18T09:19:50Z","author_association":"CONTRIBUTOR","body":"Comment author: @herbelin\n\nSide questions:\n\nHow necessary it is that abstract do a side effect?\n\nI mean: a Qed is a side effect. Can it be done that the effect of abstract is attached to the effect of the corresponding Qed, rather than an autonomous side-effect?\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337520054/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337520059","html_url":"https://github.com/coq/coq/issues/3367#issuecomment-337520059","issue_url":"https://api.github.com/repos/coq/coq/issues/3367","id":337520059,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyMDA1OQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-06-10T20:50:04Z","updated_at":"2017-10-18T09:19:50Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nIsn't (repeated) term size the only algorithmic complexity satisfying the following properties?\n* it can have an effect on [Defined]\n* it is mitigated by replacing large terms (such as \"InitBookstore\") with definitions which are defined to be the same thing\n\nHugo: For [abstract], I don't think it matters so much (but I haven't thought too deeply about the implementation details).  But for [abstract ... using ...], Coq needs to know whether or not the name is already used.  Having this in a proof means it can't be done in parallel (which is fine for me; I only care about [abstract ... using ...] in [Definition foo := bar] and when I end things with [Defined]).\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337520059/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337520061","html_url":"https://github.com/coq/coq/issues/3367#issuecomment-337520061","issue_url":"https://api.github.com/repos/coq/coq/issues/3367","id":337520061,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyMDA2MQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-06-10T21:35:47Z","updated_at":"2017-10-18T09:19:50Z","author_association":"CONTRIBUTOR","body":"Comment author: @gares\n\nThis is how it is done today: side effects produced by tactics *must* be declared (I think PMP made a new monadic tactic for that, but in practice side effects are just put into the evar map).  At Qed time side effects are tuned into beta redexes or let-ins, hence made \"local\" to the proof term.\n\nDuring proof constructions side effects are actually regular side effects, but the final step, the Qed, is performed on top of the initial state, the one just after the Lemma statement.  Actually, intermediate states may not even be known to the master process (the one that actually does the Qed, and it has to be able to do that before the tactic \"abstract\" is executed).\n\nI can elaborate more if you want.\n\nIf the proof ends with Defined, the system behaves as before.  Since transparent proofs cannot be delayed, to make the life of Adam simpler, I made the system behave as before.\n\nNote that also on-the-fly generated eliminator-like lemmas are inlined at Qed time (partially defeating the point of on-the-fly generation, I know, but I've no choice).\n\nEven if I've coded a machinery to transform side effects into local modifications to the proof terms, I want to discourage the use of tactics that alter the global environment, since they are inherently hard to make parallel.  Also the abstracted term is going to Qed twice (at abstract time and also at Qed time).  You may recall the patch in which I was trying to avoid that, that at the end I did not commit for various reasons, one above all that comparing the environments by pointers does not work across different processes, hence I've no efficient way to test for the \"weakening\" rule without resorting to hash functions, and there were some arguments against that (hash functions a cool, but not \"correct\" all the times).\n\nTo me the rule of thumb is that I must be able to know, statically, who alters the environment and how.  This is impossible for \"foo || abstract bar\", you can't know if it will happen and which type the aux lemma will actually have.   \n\nMore in general the system state is imperative, but it should not be.  We can barely live with it thanks to the summary, but at the cost of having an almost opaque chaotic system state one cannot even traverse, not to talk about the fact that nobody knows which part of the code uses what.  For example some tactics use some bits of the libstack, this is why I send to the workers a stripped version of it (containing the section/module open/close markers).  I see no reason for a tactic to have access to the libstack, but the fact that it is there makes it easy to use it, so people did use it.\n\nFinally, the type of tactics does not return an updated environment.  Especially now that tactics do have a nice type, we should try to respect its semantics in my opinion.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337520061/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337520062","html_url":"https://github.com/coq/coq/issues/3367#issuecomment-337520062","issue_url":"https://api.github.com/repos/coq/coq/issues/3367","id":337520062,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyMDA2Mg==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-06-10T21:43:33Z","updated_at":"2017-10-18T09:19:50Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nHow do you feel about tactics which fail if run in a proof that ends in [Qed], but have side-effects when used in [Defined] proofs?  (Again, my primary use-case is caching terms in global identifiers (or at least section-wide identifiers), when the terms are mentioned in transparent contexts.)\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337520062/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337520065","html_url":"https://github.com/coq/coq/issues/3367#issuecomment-337520065","issue_url":"https://api.github.com/repos/coq/coq/issues/3367","id":337520065,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyMDA2NQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-06-10T21:45:47Z","updated_at":"2017-10-18T09:19:50Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\n(Alternatively, if you can \"fix\" hashconsing (or whatever) so that unfolding things doesn't slow down [Defined], I'll be happier and not care about this.)\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337520065/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337520066","html_url":"https://github.com/coq/coq/issues/3367#issuecomment-337520066","issue_url":"https://api.github.com/repos/coq/coq/issues/3367","id":337520066,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyMDA2Ng==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-06-11T05:33:00Z","updated_at":"2017-10-18T09:19:51Z","author_association":"CONTRIBUTOR","body":"Comment author: @aspiwack\n\n\n> Finally, the type of tactics does not return an updated environment. \n> Especially now that tactics do have a nice type, we should try to respect\n> its semantics in my opinion.\n\nThe semantics of tactics is open-ended. There is no obstacle in making tactics return an environment if someone needs it.\n\n\nI think the arguments about parallelisation are more convincing. Though I must shamefully admit that I don't grasp the full breadth of them. I would like to try and understand by what mechanism you would like (ideally) to see the libstack replaced with so that it is easier to parallelise. Is weakening inherently problematic, or does it simply expose limitation of the current architecture (or maybe of Ocaml)?\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337520066/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337520069","html_url":"https://github.com/coq/coq/issues/3367#issuecomment-337520069","issue_url":"https://api.github.com/repos/coq/coq/issues/3367","id":337520069,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyMDA2OQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-06-11T08:18:50Z","updated_at":"2017-10-18T09:19:51Z","author_association":"CONTRIBUTOR","body":"Comment author: @gares\n\nI know the type of tactics can be made larger, but that's not my point.  My point is that the current type of tactics states what a tactic does, or better should do.\nIf a tactic starts to leak open file descriptor we should fix it, not declare it does stupid things in its type ;-)\n\nW.r.t. the architecture, I will probably write a paper at some point but for now you should see it as a simple manipulation of the logical environment.  The env is (ideally) an associative list of (name,(term,type)) components.  The only change I've made is make the (proof) term lazy.  In this way Qed can insert an item without having computed the proof term.  Its name and type, given by the execution of the Lemma vernac, is sufficient.  The computation produces the term and type checks it.  Finally an env is sound only if all lazy computations are forced (as in join_safe_environment).\n\nThis makes sense only if the lazy computation is pure.  Actually I'm not using the lazy OCaml type, but my own Future.computation that enforces purity by using the summary (the undo machinery) to enforce that.  Purity it what makes the order in which the lazy computations are forced irrelevant.  If a lazy computation makes a side effect I have to know it statically.  The stm, and the vernac_classifier, can deal with that.  Abstract fails to meet this requirement hence I have to make its side effect local to the output of the lazy function, that is a proof term.  For example if you stick an Opacity option in the middle of a proof, I can statically recognize it and \"propagate\" the side effect on the main branch.  E.g.\n  \n  Lemma a : Ty. tac1. Opaque foo. tac2. Qed.\n\nis elaborated into two branches\n\n 1. Lemma a : Ty. Opaque foo. (*) Qed.\n 2. tac1. Opaque foo. tac2.\n\nwhere the Qed in 1. puts into the env a lazy computation running 2. and type checking the resulting term on the system state at position (*).  Now 2. is pure, I can run it, keep its output, and throw aways it final global state as if it was a pure computation not altering it.\n\nOf course for abstract this is not an option since I don't even know if the command is going to be run, and I don't have (in the branch 1.) all the data that is necessary to run it.  Note that the side effect of abstract is really visible: some contribs were actually using the lemma generated by abstract in other proofs (following the one doing the abstract).  This makes it impossible to reorder the execution of proofs without incurring in race conditions (if the computations are run in the same address space) and totally fails in the multi process model, where the side effect would just happen in the wrong address space (the one of the wrong worker).  Hence my enforcement of purity (and my fixes to these contribs).\n\nAt the light of that I became allergic to tactics tampering with the global state.  If Jason has inefficiencies due to a missing type checking cache or a deficiency of the proof language I think we should identify and fix these issue, not work around them with yet another portion of spaghetti.\n\nW.r.t. the libstack.  The libstack is the data structure that is dumped into the vo file.  My point is that tactics should not even know it exists, but some (ring IIRC) does not work if you empty it, because it uses it to know in which module we are, or something like that.  If the system state was not imperative, tactics would be force to use only their input, and one could truly read in their type which part of the system state they need, and I could send just that data to the worker processes that run the tactics.\n\nI find it funny that an argument in favor of (purely) functional programming is not just endorsed.\nCome on, I know you all love the complicated theory of accumulators™ (aka monads ;-) ).\n\nBest,\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337520069/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337520074","html_url":"https://github.com/coq/coq/issues/3367#issuecomment-337520074","issue_url":"https://api.github.com/repos/coq/coq/issues/3367","id":337520074,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyMDA3NA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-06-11T08:55:49Z","updated_at":"2017-10-18T09:19:51Z","author_association":"CONTRIBUTOR","body":"Comment author: @aspiwack\n\nNo one is arguing against pure programming of course. I'm just trying to understand what your vision of what a Coq document should be is.\n\nIt seems pretty established, at this point, that the asynchronous proof checking is a very important feature. But it's also fairly novel and I haven't yet managed to make a good mental model of it.\n\nThat said, I certainly find it distasteful that tactics make calls to Coq's global environment (most often via Global.env), this is the reason why the type of tactics takes an environment as input. One current big offender is Termops.is_section_variable which I don't know how to get rid of…\n\nFor abstract, it was a reasonable thing to have in a linear model of Coq documents (though the implementation was not the most desirable one). It may be that it conflicts fundamentally with the asynchronous model. I'm just not clear on what the asynchronous model is, hence the probing.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337520074/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337520075","html_url":"https://github.com/coq/coq/issues/3367#issuecomment-337520075","issue_url":"https://api.github.com/repos/coq/coq/issues/3367","id":337520075,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyMDA3NQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-06-17T10:16:23Z","updated_at":"2017-10-18T09:19:51Z","author_association":"CONTRIBUTOR","body":"Comment author: @herbelin\n\nHi Enrico,\n\nMy view was that \"abstract\" should be seen as having no other side-effect than the one done by Qed.\n\nIn \"Lemma foo. ... tac || abstract tac' ... Qed\", the only visible external effect is the declaration of foo and in no way the possible declaration of a sublemma by abstract.\n\nIn particular, I agree to discontinue the possibility to use the lemma generated in an opaque proof by \"abstract\" in the sequel of a development. If someone needs that, he/she can open a proper explicit lemma.\n\nIf in a transparent proof, then using \"abstract using\" can be ok to me (there is no parallelism anyway in this case, as far as I understood). But maybe I don't see neither all the stakes of an \"abstract using\" in a transparent proof, nor also why writing an explicit definition in advance would be a problem.\n\nThe rest is for me question of efficiency, but I unfortunately lost an overview of the issues here. If for an abstract in an Opaque proof, it is as efficient to use a let-in than to declare (at Qed time) a constant to which the user cannot refer, then a let-in is ok for me. And if implementing a type checking cache or doing some related improvements of the proof language can help, why not.\n\nSo, is there an efficiency issue with implementing abstract with let-ins or not?\nIf yes, I'd like to insist that I don't see any real difference in having \"Lemma foo... Qed\" opening a new constant foo with lazy body, and having it opening a new constant foo with both a lazy body and a possible effect on the global env which is visible only from the body of foo. Since visible only from the constant, this side-effect could be explicitly attached to the constant.\n\nOtherwise said, to be even more explicit, I don't see any problem in the idea that the body of a kernel definition is just a term, or if the body of a definition is the explicit pair of a local context and of a term.\n\nHugo\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337520075/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337520077","html_url":"https://github.com/coq/coq/issues/3367#issuecomment-337520077","issue_url":"https://api.github.com/repos/coq/coq/issues/3367","id":337520077,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyMDA3Nw==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-06-17T10:48:39Z","updated_at":"2017-10-18T09:19:51Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\n> If in a transparent proof, then using \"abstract using\" can be ok to me (there is no parallelism anyway in this case, as far as I understood). But maybe I don't see neither all the stakes of an \"abstract using\" in a transparent proof, nor also why writing an explicit definition in advance would be a problem.\n\nThe idea would be to be able to automate the definition of a lemma, so that if I need 30 or so lemmas that look the same (maybe I want to use 32, 33, ..., 64, and I want to hide them behind definitions so they don't blow up the time it takes to run [Defined]), I don't have to define them all manually, but can do it on the fly using tactics in notations.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337520077/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337520078","html_url":"https://github.com/coq/coq/issues/3367#issuecomment-337520078","issue_url":"https://api.github.com/repos/coq/coq/issues/3367","id":337520078,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyMDA3OA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-06-17T12:14:57Z","updated_at":"2017-10-18T09:19:52Z","author_association":"CONTRIBUTOR","body":"Comment author: @gares\n\n> My view was that \"abstract\" should be seen as having no other\n> side-effect than the one done by Qed.  In \"Lemma foo. ... tac ||\n> abstract tac' ... Qed\", the only visible external effect is the\n> declaration of foo and in no way the possible declaration of a\n> sublemma by abstract.  In particular, I agree to discontinue the\n> possibility to use the lemma generated in an opaque proof by\n> \"abstract\" in the sequel of a development. If someone needs that,\n> he/she can open a proper explicit lemma.\n\nWe totally agree then\n\n> If in a transparent proof, then using \"abstract using\" can be ok to me\n> (there is no parallelism anyway in this case, as far as I understood).\n> But maybe I don't see neither all the stakes of an \"abstract using\" in\n> a transparent proof, nor also why writing an explicit definition in\n> advance would be a problem.\n\nWell, Adam defines programs via tactics.  These programs have to run\n(hence they end with Defined) but some subterms are just proofs, hence\nhe wants to abstract these irrelevant terms out (without having to\nstate them manually).\n\n> So, is there an efficiency issue with implementing abstract with\n> let-ins or not?\n\nIt is already like that, I do generate let-ins at Qed time.\nBut during proof construction, when one calls abstract, the kernel\nkicks in and typechecks the proof term.  Hence the abstracted proof\ngets type checked twice, once during proof construction, and another\none when typing the body of the let-in in the main proof.\n\nMy concerns are for the Guillame's trick: abstract vm_cast_no_check\nbla.  If you do so in 8.4, the abstracted tactic does nothing at proof\nconstruction time, then the kernel type checks the resulting proof\nrunning the vm once, but the qhen the enclosing proof is typechecked\nthe vm_compute is not run again, because the proof refers to an\nalready type checked constant that hides the computation.  In trunk,\nunless the enclosing proof ends with Defined, the abstracted proof\nterm is inlined (with a let-in or a beta redex, id does not matter)\nand hence type checked again.\nThis specific case is just a caching issue... But not do easy to\nsolve.\n\nLong story short, I believe you got it right, and things are already\ncoded as you expect: side effects are made local to Qed ended lemmas\nby generating let-ins or beta redexes (beta for opque side effects,\nlet-in for transparent stuff, like eliminators).\n\nCiao\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337520078/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337520079","html_url":"https://github.com/coq/coq/issues/3367#issuecomment-337520079","issue_url":"https://api.github.com/repos/coq/coq/issues/3367","id":337520079,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyMDA3OQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2015-04-29T21:40:41Z","updated_at":"2017-10-18T09:19:52Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nThis issue is not solved in 8.5.  Here is an example where it would be very useful to have a transparent abstract tactic (usable only in proofs ending in [Defined]).  It's a bit contrived, but similar examples show up in Fiat involving lists of strings and other large definitions.\n\nBecause we're working on developing a library, we don't want to require users to write a few dozen [Definition foo_id := \"foo\".], etc, for each structure they're defining.  But there's a significant cost in time and memory to inlining the identifiers, which would be fixed with a [transparent abstract].  Here is an example:\n\n\nAxiom pro : Set -> Set -> Set.\nFixpoint tree (x : Set) (n : nat) : Set\n:= match n with\n     | 0 => x\n     | S n' => tree (pro x x) n'\n   end.\nNotation pro' := (pro _ _).\nDefinition foo : Set.\nProof.\n  let xv := (eval hnf in (tree nat 17)) in\n  assert (x : Set) by exact xv.\n  pose x as x'.\n  exact (x' * x' * x' * x')%type.\nDefined.\n\nAxiom helper : forall x, x -> True -> x * x * x * x.\n\nGoal True -> foo.\n  cbv beta delta [foo].\n  Time apply helper. (* Finished transaction in 1.753 secs (1.716u,0.04s) (successful) *)\nAdmitted.\n\nDefinition foo' : Set.\nProof.\n  let xv := (eval hnf in (tree nat 17)) in\n  assert (x : Set) by abstract (exact xv) using foo_x.\n  pose x as x'.\n  exact (x' * x' * x' * x')%type.\nDefined.\n\nGoal True -> foo'.\n  cbv beta delta [foo'].\n  Time apply helper. (* Finished transaction in 0. secs (0.u,0.s) (successful) *)\nAdmitted.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337520079/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337520080","html_url":"https://github.com/coq/coq/issues/3367#issuecomment-337520080","issue_url":"https://api.github.com/repos/coq/coq/issues/3367","id":337520080,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyMDA4MA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2015-05-04T08:21:55Z","updated_at":"2017-10-18T09:19:52Z","author_association":"CONTRIBUTOR","body":"Comment author: @gares\n\nJason, if you want me to do something on this bug, you need to tell me what you\nare trying to do.  I'm not going to code the solution you are proposing, for the long list of reasons collected here.\n\nMy best guessing is the following one.\nDo you need a language to script the vernacular?  Like having the possibility\nto iterate \"template\" commands like in \"Definition $foo := $bar\" with $foo\nranging over some list?\n\nW.r.t. the performance problems, wouldn't thy be solved by the above feature?\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337520080/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337520081","html_url":"https://github.com/coq/coq/issues/3367#issuecomment-337520081","issue_url":"https://api.github.com/repos/coq/coq/issues/3367","id":337520081,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyMDA4MQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2015-05-04T17:53:08Z","updated_at":"2017-10-18T09:19:52Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nI think vernacular scripting (combined with tactics in terms to implement bodies when necessary) should be sufficient to solve the performance problems, which is the main issue.  Is vernacular scripting easy to implement?  (Are there plans to implement it?)\n\nLet me see if I can put together a more realistic example.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337520081/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337520082","html_url":"https://github.com/coq/coq/issues/3367#issuecomment-337520082","issue_url":"https://api.github.com/repos/coq/coq/issues/3367","id":337520082,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyMDA4Mg==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2015-05-04T21:14:54Z","updated_at":"2017-10-18T09:19:52Z","author_association":"CONTRIBUTOR","body":"Comment author: @gares\n\nNo plans, and I've not thought about it enough to say \"this is what we need\" but there are several instances out there that would be less hackish if Coq allowed a form of vernacular scripting.\n\nI don't think I need a precise code example, but I'm rather interested in understanding what you are trying to do.  Really a bird eye view.\nWhat the user is expected to write, what your library is supposed to do, ...\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337520082/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337520085","html_url":"https://github.com/coq/coq/issues/3367#issuecomment-337520085","issue_url":"https://api.github.com/repos/coq/coq/issues/3367","id":337520085,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyMDA4NQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2017-06-02T15:17:16Z","updated_at":"2017-10-18T09:19:53Z","author_association":"CONTRIBUTOR","body":"Comment author: @ejgallego\n\nFixed by https://github.com/coq/coq/pull/201\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337520085/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]