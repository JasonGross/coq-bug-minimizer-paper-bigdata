Comment author: @JasonGross

Ltac do_sk1 t :=
  lazymatch t with
    | (fun (x:?T) => ?f ?g) =>
      idtac "app, no @ ?" f g
  end.

Ltac do_sk2 t :=
  lazymatch t with
    | (fun (x:?T) => ?f ?g) =>
      idtac "app, no @ ?" f g;
    match goal with
      | [ |- appcontext G[?f' (fun _ => _)] ] => let G' := context G[f] in idtac G'
    end
  end.

Ltac do_sk3 t :=
  lazymatch t with
    | (fun (x:?T) => (@ ?f x) ?g) =>
      idtac "app" f g;
    match goal with
      | [ |- appcontext G[?f' (fun _ => _)] ] => let G' := context G[f] in idtac G'
    end
  end.

Definition asdf (f:nat -> nat) := True.

Goal (asdf (fun w => plus (plus 10 w) 10)).
lazymatch goal with [ |- asdf ?t ] => do_sk1 t end.
(* app, no @ ? (plus (10 + x)) 10 *)
(* There should be no x!  idtac shouldn't be able to expose internal bindings. *)
Fail lazymatch goal with [ |- asdf ?t ] => do_sk2 t end.
(* Toplevel input, characters 53-61:
In nested Ltac calls to "do_sk2", last call failed.
Error: in Tacinterp.apply_match_goal:
No matching clauses for match goal
(use "Set Ltac Debug" for more info). *)
(* Really?  It matched fine the first time.  Why does the failure of pose make this fail? Set Ltac Debug gives me 'Ltac variable f depends on pattern variable name x which is not bound in current context.'*)
Fail lazymatch goal with [ |- asdf ?t ] => do_sk3 t end.
(* Toplevel input, characters 20-71:
Error: in Tacinterp.apply_match_goal:
No matching clauses for match goal
(use "Set Ltac Debug" for more info). *)
(* I think this one should match.  'Set Ltac Debug' says 'Only bound indices allowed in second order pattern matching.' *)


Comment author: @ppedrot

Well, most of this is the intended semantics.

1. [do_sk1]. Actually, as you can witness Ltac can expose internal bindings through matching, and has a dedicated dynamic type to handle such open terms, called [constr_under_binders]. Such a term is a normal term together with the list of open variables. I suspect deactivating that sort of matchings will indeed break quite a lot of scripts in the wild, so it is urgent not to fix it.

2. [do_sk2]. The issue does not lie in the match, but in the [context G[f]] instead. The fact is, you can't do much of a [constr_under_binders] if it has open variables, and most tactics will simply refuse manipulating it. Likewise, [context] does not handle it at all.

3. [do_sk3]. This one is strange indeed, and looks like a real bug.

The problem you point out is essentially the lack of Ltac primitives to manipulate open terms. I believe that having a substitution [t {x := u}] would be enough, but I am not quite confident about it.


