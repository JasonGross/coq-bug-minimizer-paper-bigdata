[{"url":"https://api.github.com/repos/coq/coq/issues/comments/337533320","html_url":"https://github.com/coq/coq/issues/4144#issuecomment-337533320","issue_url":"https://api.github.com/repos/coq/coq/issues/4144","id":337533320,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUzMzMyMA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2015-03-22T04:36:41Z","updated_at":"2017-10-18T09:58:13Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nHere is code that works in 8.4, but fails in 8.5; [try] no longer catches \"Error: Ltac variable tac is bound to a tactic which cannot be coerced to an integer.\":\n\nLtac foo :=\n  let tac := idtac in\n  fail tac.\nGoal True.\n  try foo.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337533320/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337533322","html_url":"https://github.com/coq/coq/issues/4144#issuecomment-337533322","issue_url":"https://api.github.com/repos/coq/coq/issues/4144","id":337533322,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUzMzMyMg==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-04-14T12:01:15Z","updated_at":"2017-10-18T09:58:13Z","author_association":"CONTRIBUTOR","body":"Comment author: @ppedrot\n\nI'm actually quite sure that this is a good thing. I am still dreaming of a statically typed Ltac, and being able to discriminate between various types at runtime would lead people to depend too much on dynamic typing. An unrecoverable error on type mismatch would prevent this...\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337533322/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337533324","html_url":"https://github.com/coq/coq/issues/4144#issuecomment-337533324","issue_url":"https://api.github.com/repos/coq/coq/issues/4144","id":337533324,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUzMzMyNA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-04-14T13:38:49Z","updated_at":"2017-10-18T09:58:13Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nStatic types are good because they catch errors at compile-time, and force you to fix them.  Uncatchable errors, such as this one, and anomalies, are a pain, because they mean you have to jump through hoops to use tactics.  In practice, this will just mean that poorly written tactics are guarded by pattern matches to make sure they apply (there are a number of places where I do a manual occurrence check before a setoid_rewrite to work around uncatchable anomalies is 8.4).  I would be perfectly happy for [foo] to fail to compile.  But if it compiles, wrapping it in [try] should catch it's errors.\n\nWhat do you think of having a flag that makes [try] catch this error?\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337533324/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]