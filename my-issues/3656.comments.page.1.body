Comment author: @JasonGross

Here is some code that should not loop:
```
Set Primitive Projections.
Record hSet : Type := BuildhSet { setT : Type;  iss : True }.
Ltac head_hnf_under_binders x :=
  match eval hnf in x with
    | ?f _ => head_hnf_under_binders f
    | (fun y => ?f y) => head_hnf_under_binders f
    | ?y => y
  end.
Goal True.
  let x := head_hnf_under_binders setT in pose x.
```
But it does.

This also behaves wrongly:
```
Set Primitive Projections.
Record hSet : Type := BuildhSet { setT : Type;  iss : True }.
Ltac head_hnf_under_binders x :=
  match eval hnf in x with
    | ?f _ => head_hnf_under_binders f
    | (fun y => ?f y) => head_hnf_under_binders f
    | ?y => y
  end.
Goal setT = setT.
  progress unfold setT. (* should not succeed *)
  match goal with
    | |- (fun h => setT h) = (fun h => setT h) => fail 1 "should not eta-expand"
    | _ => idtac
  end. (* should not fail *)
```

Comment author: @mattam82

Fixed in trunk, by not letting unfold work on primitive projections (maintains the illusion that the constant and primitive application versions are the same). Similarly hnf/simpl do not ever produce the eta expansion, only unfolding when enough arguments are given.


Comment author: @mattam82

In the new version with unfolded versions of primitive projections, the unfold is accepted (gives you an expanded version), but the syntactic match fails because unfolded and folded versions of the same projection are not syntactically equal.
Patches to come once I check the test-suite.


