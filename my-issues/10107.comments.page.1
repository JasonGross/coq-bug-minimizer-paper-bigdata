[{"url":"https://api.github.com/repos/coq/coq/issues/comments/354143202","html_url":"https://github.com/coq/coq/issues/10107#issuecomment-354143202","issue_url":"https://api.github.com/repos/coq/coq/issues/10107","id":354143202,"node_id":"MDEyOklzc3VlQ29tbWVudDM1NDE0MzIwMg==","user":{"login":"ppedrot","id":1202327,"node_id":"MDQ6VXNlcjEyMDIzMjc=","avatar_url":"https://avatars.githubusercontent.com/u/1202327?v=4","gravatar_id":"","url":"https://api.github.com/users/ppedrot","html_url":"https://github.com/ppedrot","followers_url":"https://api.github.com/users/ppedrot/followers","following_url":"https://api.github.com/users/ppedrot/following{/other_user}","gists_url":"https://api.github.com/users/ppedrot/gists{/gist_id}","starred_url":"https://api.github.com/users/ppedrot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ppedrot/subscriptions","organizations_url":"https://api.github.com/users/ppedrot/orgs","repos_url":"https://api.github.com/users/ppedrot/repos","events_url":"https://api.github.com/users/ppedrot/events{/privacy}","received_events_url":"https://api.github.com/users/ppedrot/received_events","type":"User","site_admin":false},"created_at":"2017-12-27T17:01:09Z","updated_at":"2017-12-27T17:01:09Z","author_association":"MEMBER","body":"FTR, this is part of my long-term todo list.","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/354143202/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/488157198","html_url":"https://github.com/coq/coq/issues/10107#issuecomment-488157198","issue_url":"https://api.github.com/repos/coq/coq/issues/10107","id":488157198,"node_id":"MDEyOklzc3VlQ29tbWVudDQ4ODE1NzE5OA==","user":{"login":"JasonGross","id":396076,"node_id":"MDQ6VXNlcjM5NjA3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/396076?v=4","gravatar_id":"","url":"https://api.github.com/users/JasonGross","html_url":"https://github.com/JasonGross","followers_url":"https://api.github.com/users/JasonGross/followers","following_url":"https://api.github.com/users/JasonGross/following{/other_user}","gists_url":"https://api.github.com/users/JasonGross/gists{/gist_id}","starred_url":"https://api.github.com/users/JasonGross/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JasonGross/subscriptions","organizations_url":"https://api.github.com/users/JasonGross/orgs","repos_url":"https://api.github.com/users/JasonGross/repos","events_url":"https://api.github.com/users/JasonGross/events{/privacy}","received_events_url":"https://api.github.com/users/JasonGross/received_events","type":"User","site_admin":false},"created_at":"2019-05-01T00:02:01Z","updated_at":"2019-05-01T00:02:01Z","author_association":"MEMBER","body":"Here is another test-case, where I have a(n I think) reasonably hand-written version of something like `context` that is 800x-1600x slower in Ltac2 than the built-in version:\r\n```coq\r\nFixpoint fact (n : nat) :=\r\n  match n with\r\n  | O => 1\r\n  | S n' => fact n' * S n'\r\n  end.\r\nRequire Import Ltac2.Ltac2.\r\nRequire Import Ltac2.Constr.\r\nRequire Import Ltac2.Control.\r\nRequire Import Ltac2.Notations.\r\nLtac2 rec fold_right f init ls :=\r\n  match ls with\r\n  | [] => init\r\n  | x :: xs => f x (fold_right f init xs)\r\n  end.\r\nLtac2 rec app ls1 ls2 :=\r\n  match ls1 with\r\n  | [] => ls2\r\n  | x :: xs => x :: app xs ls2\r\n  end.\r\nLtac2 rec rev ls :=\r\n  match ls with\r\n  | [] => []\r\n  | x :: xs => app (rev xs) [x]\r\n  end.\r\nLtac2 rec fold_left f ls init :=\r\n  match ls with\r\n  | [] => init\r\n  | x :: xs => fold_left f xs (f init x)\r\n  end.\r\nLtac2 rec map f ls :=\r\n  match ls with\r\n  | [] => []\r\n  | x :: xs => f x :: map f xs\r\n  end.\r\nLtac2 rec concat_list sep ls :=\r\n  match ls with\r\n  | [] => Message.of_string \"\"\r\n  | x :: xs\r\n    => match xs with\r\n       | [] => x\r\n       | _ => Message.concat x (Message.concat sep (concat_list sep xs))\r\n       end\r\n  end.\r\nLtac2 rec iter tac ls :=\r\n  match ls with\r\n  | [] => ()\r\n  | x :: xs => tac x; iter tac xs\r\n  end.\r\nLtac2 rec seq' start endv :=\r\n  match Int.equal start endv with\r\n  | true => []\r\n  | false => start :: seq' (Int.add start 1) endv\r\n  end.\r\nLtac2 rec seq start len := seq' start (Int.add start len).\r\nLtac2 rec array_iter f ls :=\r\n  iter (fun i => f (Array.get ls i)) (seq 0 (Array.length ls)).\r\nLtac2 rec find (id : ident) (term : constr) :=\r\n  match Constr.Unsafe.kind term with\r\n  | Constr.Unsafe.Rel _ => ()\r\n  | Constr.Unsafe.Var id' => () (* ... *)\r\n  | Constr.Unsafe.Meta _ => ()\r\n  | Constr.Unsafe.Evar _ _ => ()\r\n  | Constr.Unsafe.Sort _ => ()\r\n  | Constr.Unsafe.Cast c cst ty => find id c; find id ty\r\n  | Constr.Unsafe.Prod id' a b => () (* ... *); find id a; find id b\r\n  | Constr.Unsafe.Lambda id' a b => () (* ... *); find id a; find id b\r\n  | Constr.Unsafe.LetIn id' a b c => () (* ... *); find id a; find id b; find id c\r\n  | Constr.Unsafe.App f xs => find id f; array_iter (find id) xs\r\n  | Constr.Unsafe.Constant _ _ => ()\r\n  | Constr.Unsafe.Ind _ _ => ()\r\n  | Constr.Unsafe.Constructor _ _ => ()\r\n  | Constr.Unsafe.Case _ c r body => find id c; find id r; array_iter (find id) body\r\n  | Constr.Unsafe.Fix _ _ _ ts vs => array_iter (find id) ts; array_iter (find id) vs\r\n  | Constr.Unsafe.CoFix _ _ ts vs => array_iter (find id) ts; array_iter (find id) vs\r\n  | Constr.Unsafe.Proj _ v => find id v\r\n  end.\r\nGoal True.\r\n  ltac1:(pose proof True as x;\r\n         let n := constr:(8) in\r\n         let v := (eval cbv in (fact n)) in\r\n         let c := constr:(eq_refl : fact n = v) in\r\n         do 5 pose c).\r\n  Time let v := Control.hyps () in\r\n       let i := @x in\r\n       iter (fun (h, body, ty) => find i ty; match body with Some b => find i b | None => () end) v.\r\n  (* Finished transaction in 17.031 secs (16.539u,0.008s) (successful) *)\r\n  Time ltac1:(try let x := match goal with x : Prop |- _ => x end in match goal with H : context[x] |- _ => idtac end). (* Finished transaction in 0.229 secs (0.156u,0.s) (successful) *)\r\n```","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/488157198/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]