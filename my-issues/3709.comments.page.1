[{"url":"https://api.github.com/repos/coq/coq/issues/comments/337525573","html_url":"https://github.com/coq/coq/issues/3709#issuecomment-337525573","issue_url":"https://api.github.com/repos/coq/coq/issues/3709","id":337525573,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyNTU3Mw==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-10-09T01:59:17Z","updated_at":"2017-10-18T09:35:44Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\n(* File reduced by coq-bug-finder from original input, then from 10759 lines to 120 lines, then from 119 lines to 38 lines *)\n(* coqc version trunk (October 2014) compiled on Oct 8 2014 13:38:17 with OCaml 4.01.0\n   coqtop version cagnode16:/afs/csail.mit.edu/u/j/jgross/coq-trunk,trunk (335cf2860bfd9e714d14228d75a52fd2c88db386) *)\nDefinition relation (A : Type) := A -> A -> Type.\nAxiom concat : forall {A : Type} {x y z : A} (p : x = y) (q : y = z), x = z.\nAxiom transport : forall {A : Type} (P : A -> Type) {x y : A} (p : x = y) (u : P x), P y.\nAxiom transport_const : forall {A B : Type} {x1 x2 : A} (p : x1 = x2) (y : B), transport (fun x => B) p y = y.\nInductive quotient {A} (R : relation A) : Type := class_of : A -> quotient R.\nAxiom related_classes_eq : forall {A R} {x y : A}, R x y -> class_of R x = class_of R y.\nModule NonPrim.\n  Unset Keyed Unification.\n  Unset Primitive Projections.\n  Record hProp := hp { hproptype :> Type }.\n  Goal forall (A : Type) (R : relation A)\n              (x y : A) (H0 : R x y),\n         transport (fun _ : quotient R => A -> hProp) (@ related_classes_eq A R _ _ H0)\n                   (fun b : A => {| hproptype := R x b |}) =\n         (fun b : A => {| hproptype := R y b |}).\n    intros.\n    eapply concat.\n    apply transport_const.\n    admit.\n  Defined.\nEnd NonPrim.\nModule Prim.\n  Set Primitive Projections.\n  Record hProp := hp { hproptype :> Type }.\n  Goal forall (A : Type) (R : relation A)\n              (x y : A) (H0 : R x y),\n         transport (fun _ : quotient R => A -> hProp) (@ related_classes_eq A R _ _ H0)\n                   (fun b : A => {| hproptype := R x b |}) =\n         (fun b : A => {| hproptype := R y b |}).\n    intros.\n    eapply concat.\n    apply transport_const.\n(* Toplevel input, characters 21-36:\nError:\nIn environment\nA : Type\nR : relation A\nx : A\ny : A\nH0 : R x y\nb : A\nUnable to unify \"?y b\" with \"{| hproptype := R x b |}\".\n *)\n    admit.\n  Defined.\nEnd Prim.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337525573/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337525575","html_url":"https://github.com/coq/coq/issues/3709#issuecomment-337525575","issue_url":"https://api.github.com/repos/coq/coq/issues/3709","id":337525575,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyNTU3NQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-10-28T20:55:24Z","updated_at":"2017-10-18T09:35:44Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nHere's a shorter version:\n\n(* File reduced by coq-bug-finder from original input, then from 10759 lines to 120 lines, then from 119 lines to 38 lines *)\n(* coqc version trunk (October 2014) compiled on Oct 28 2014 14:33:38 with OCaml 4.01.0\n   coqtop version cagnode16:/afs/csail.mit.edu/u/j/jgross/coq-trunk,trunk (53bfe9cf58a3c40e6eb7120d25c1633a9cea3126) *)\nModule NonPrim.\n  Unset Primitive Projections.\n  Record hProp := hp { hproptype :> Type }.\n  Goal forall (h : (Type -> hProp) -> (Type -> hProp)) k f,\n         (forall y, h y = y) ->\n         h (fun b : Type => {| hproptype := f b |}) = k.\n  Proof.\n    intros h k f H.\n    etransitivity.\n    apply H.\n    admit.\n  Defined.\nEnd NonPrim.\nModule Prim.\n  Set Primitive Projections.\n  Record hProp := hp { hproptype :> Type }.\n  Goal forall (h : (Type -> hProp) -> (Type -> hProp)) k f,\n         (forall y, h y = y) ->\n         h (fun b : Type => {| hproptype := f b |}) = k.\n  Proof.\n    intros h k f H.\n    etransitivity.\n    apply H. (* Toplevel input, characters 21-22:\nError:\nIn environment\nh : (Type -> hProp) -> Type -> hProp\nk : Type -> hProp\nf : Type -> Type\nH : forall y : Type -> hProp, h y = y\nb : Type\nUnable to unify \"?y b\" with \"{| hproptype := f b |}\". *)\n    admit.\n  Defined.\nEnd Prim.\n\nIf I remove the [f], the unification goes through.  If I [Set Debug Tactic Unification], I get \n\nDebug:\nh ?M196 = ?M196 ~= h (fun b : Type => {| hproptype := f b |}) =\n                   ?X15@ {A:=h; A:=k; A:=f; A:=H}\nDebug: @ eq ~= @ eq\nDebug: Type -> hProp ~= Type -> hProp\nDebug: Type ~= Type\nDebug: hProp ~= hProp\nDebug: h ?M196 ~= h (fun b : Type => {| hproptype := f b |})\nDebug: h ~= h\nDebug: ?M196 ~= fun b : Type => {| hproptype := f b |}\nDebug: ?M196 ~= ?X15@ {A:=h; A:=k; A:=f; A:=H}\nDebug: ?X15@ {A:=h; A:=k; A:=f; A:=H} b ~= {| hproptype := f b |}\nDebug: hproptype (?X15@ {A:=h; A:=k; A:=f; A:=H} b) ~= f b\nDebug: hproptype ~= f\nDebug: hproptype (?X15@ {A:=h; A:=k; A:=f; A:=H} b) ~= f b\nDebug: ?X15@ {A:=h; A:=k; A:=f; A:=H} ~= hp\nDebug: b ~= f b\n\n\n\nThe debug log for non-primitive projections is\nDebug:\nh ?M196 = ?M196 ~= h (fun b : Type => {| hproptype := f b |}) =\n                   ?X15@ {A:=h; A:=k; A:=f; A:=H}\nDebug: @ eq ~= @ eq\nDebug: Type -> hProp ~= Type -> hProp\nDebug: Type ~= Type\nDebug: hProp ~= hProp\nDebug: h ?M196 ~= h (fun b : Type => {| hproptype := f b |})\nDebug: h ~= h\nDebug: ?M196 ~= fun b : Type => {| hproptype := f b |}\nDebug: ?M196 ~= ?X15@ {A:=h; A:=k; A:=f; A:=H}\nDebug: ?X15@ {A:=h; A:=k; A:=f; A:=H} b ~= {| hproptype := f b |}\n\n\nDo you have a diagnosis of what's going on here?  Any chance this can be fixed before 8.5?  (This is one of the bugs blocking HoTT from turning on [Set Primitive Projections] everywhere, once we have Keyed Unification.)\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337525575/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337525579","html_url":"https://github.com/coq/coq/issues/3709#issuecomment-337525579","issue_url":"https://api.github.com/repos/coq/coq/issues/3709","id":337525579,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyNTU3OQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-12-12T10:43:28Z","updated_at":"2017-10-18T09:35:45Z","author_association":"CONTRIBUTOR","body":"Comment author: @mattam82\n\nClearly it's trying eta in the primitive case while the other one succeeds, using pattern-unification I suppose.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337525579/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337525581","html_url":"https://github.com/coq/coq/issues/3709#issuecomment-337525581","issue_url":"https://api.github.com/repos/coq/coq/issues/3709","id":337525581,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyNTU4MQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-12-12T12:53:29Z","updated_at":"2017-10-18T09:35:45Z","author_association":"CONTRIBUTOR","body":"Comment author: @mattam82\n\nYes, it was eta failing but not backtracking on pattern-unification in tactic unification. Fixed, pushing asap.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337525581/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]