[{"url":"https://api.github.com/repos/coq/coq/issues/comments/337533333","html_url":"https://github.com/coq/coq/issues/4145#issuecomment-337533333","issue_url":"https://api.github.com/repos/coq/coq/issues/4145","id":337533333,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUzMzMzMw==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2015-03-22T16:04:38Z","updated_at":"2017-12-23T00:56:28Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\r\n\r\nThis seems to have something to do with something using [Exc] in 8.5 where it used [option] in 8.4?\r\n\r\n(* File reduced by coq-bug-finder from original input, then from 2964 lines to 112 lines, then from 112 lines to 90 lines *)\r\n(* coqc version 8.5beta1 (March 2015) compiled on Mar 15 2015 16:24:54 with OCaml 4.01.0\r\n   coqtop version cagnode15:/afs/csail.mit.edu/u/j/jgross/coq-8.5,v8.5 (1b3759e78f227eb85a128c58b8ce8c11509dd8c3) *)\r\n```coq\r\nRequire Coq.Lists.List.\r\nGlobal Set Implicit Arguments.\r\nImport Coq.Lists.List.\r\nClass IndexBound {A : Set} (a : A) (Bound : list A) :=\r\n  { ibound :> nat;\r\n    boundi : nth_error Bound ibound = Some a}.\r\nGlobal Arguments ibound {A} [a Bound] _ .\r\nGlobal Arguments boundi {A} [a Bound] _.\r\nRecord BoundedIndex {A : Set} (Bound : list A) :=\r\n  { bindex : A;\r\n    indexb :> IndexBound bindex Bound }.\r\n\r\nContext {A : Type} {C : Set}.\r\nVariable (projAC : A -> C).\r\nAxiom None_neq_Some : forall (AnyT AnyT' : Type) (a : AnyT), None = Some a -> AnyT'.\r\n\r\nDefinition nth_Bounded'\r\n           (Bound : list A)\r\n           (c : C)\r\n           (a_opt : option A)\r\n           (nth_n : option_map projAC a_opt = Some c)\r\n: A := match a_opt as x\r\n             return (option_map projAC x = Some c) -> A with\r\n         | Some a => fun _ => a\r\n         | None => fun f => None_neq_Some _ f\r\n       end nth_n.\r\n\r\nAxiom nth_error_map : forall n As c_opt, nth_error (map projAC As) n = c_opt -> option_map projAC (nth_error As n) = c_opt.\r\n\r\nDefinition nth_Bounded\r\n           (Bound : list A)\r\n           (idx : BoundedIndex (map projAC Bound))\r\n: A := nth_Bounded' Bound (nth_error Bound (ibound idx))\r\n                    (nth_error_map _ _ (boundi idx)).\r\n\r\nProgram Definition nth_Bounded_ind2\r\n        (P : forall As, BoundedIndex (map projAC As)\r\n                        -> BoundedIndex (map projAC As)\r\n                        -> A -> A -> Prop)\r\n: forall (Bound : list A)\r\n         (idx : BoundedIndex (map projAC Bound))\r\n         (idx' : BoundedIndex (map projAC Bound)),\r\n    match nth_error Bound (ibound idx), nth_error Bound (ibound idx') with\r\n      | Some a, Some a' => P Bound idx idx' a a'\r\n      | _, _ => True\r\n    end\r\n    -> P Bound idx idx' (nth_Bounded _ idx) (nth_Bounded _ idx'):=\r\n  fun Bound idx idx' =>\r\n    match (nth_error Bound (ibound idx)) as e, (nth_error Bound (ibound idx')) as e'\r\n          return\r\n          (forall (f : option_map _ e = Some (bindex idx))\r\n                  (f' : option_map _ e' = Some (bindex idx')),\r\n             (match e, e' with\r\n                | Some a, Some a' => P Bound idx idx' a a'\r\n                | _, _ => True\r\n              end)\r\n             -> P Bound idx idx'\r\n                  (match e as e'' return\r\n                         option_map _ e'' = Some (bindex idx)\r\n                         -> A\r\n                   with\r\n                     | Some a => fun _ => a\r\n                     | _ => fun f => _\r\n                   end f)\r\n                  (match e' as e'' return\r\n                         option_map _ e'' = Some (bindex idx')\r\n                         -> A\r\n                   with\r\n                     | Some a => fun _ => a\r\n                     | _ => fun f => _\r\n                   end f')) with\r\n      | Some a, Some a' => fun _ _ H => _\r\n      | _, _ => fun f => _\r\n    end (nth_error_map _ _ (boundi idx))\r\n        (nth_error_map _ _ (boundi idx')).\r\n\r\nLemma nth_Bounded_eq\r\n: forall (Bound : list A)\r\n         (idx idx' : BoundedIndex (map projAC Bound)),\r\n    ibound idx = ibound idx'\r\n    -> nth_Bounded Bound idx = nth_Bounded Bound idx'.\r\nProof.\r\n  intros.\r\n  eapply nth_Bounded_ind2 with (idx := idx) (idx' := idx').\r\n  simpl.\r\n  pattern (nth_error Bound (ibound idx')); case_eq (nth_error Bound (ibound idx')) || fail \"too early\".\r\n  Undo.\r\n  unfold Exc; case_eq (nth_error Bound (ibound idx')) || fail \"too early\".\r\n  Undo.\r\n  case_eq (nth_error Bound (ibound idx')). (* Toplevel input, characters 15-54:\r\nIn nested Ltac calls to \"case_eq\" and \"pattern x at - 1\", last call failed.\r\nError: The abstracted term\r\n\"fun e : Exc A =>\r\n forall e0 : nth_error Bound (ibound idx') = e,\r\n match\r\n   nth_error Bound (ibound idx) as anonymous'0\r\n   return (anonymous'0 = nth_error Bound (ibound idx) -> e = e -> Prop)\r\n with\r\n | Some a =>\r\n     match\r\n       e as anonymous'\r\n       return\r\n         (Some a = nth_error Bound (ibound idx) -> anonymous' = e -> Prop)\r\n     with\r\n     | Some a' =>\r\n         fun (_ : Some a = nth_error Bound (ibound idx)) (_ : Some a' = e) =>\r\n         a = a'\r\n     | None =>\r\n         fun (_ : Some a = nth_error Bound (ibound idx)) (_ : None = e) =>\r\n         True\r\n     end\r\n | None => fun (_ : None = nth_error Bound (ibound idx)) (_ : e = e) => True\r\n end eq_refl e0\" is not well typed.\r\nIllegal application:\r\nThe term\r\n \"match\r\n    nth_error Bound (ibound idx) as anonymous'0\r\n    return (anonymous'0 = nth_error Bound (ibound idx) -> e = e -> Prop)\r\n  with\r\n  | Some a =>\r\n      match\r\n        e as anonymous'\r\n        return\r\n          (Some a = nth_error Bound (ibound idx) -> anonymous' = e -> Prop)\r\n      with\r\n      | Some a' =>\r\n          fun (_ : Some a = nth_error Bound (ibound idx)) (_ : Some a' = e)\r\n          => a = a'\r\n      | None =>\r\n          fun (_ : Some a = nth_error Bound (ibound idx)) (_ : None = e) =>\r\n          True\r\n      end\r\n  | None => fun (_ : None = nth_error Bound (ibound idx)) (_ : e = e) => True\r\n  end\" of type\r\n \"nth_error Bound (ibound idx) = nth_error Bound (ibound idx) ->\r\n  e = e -> Prop\"\r\ncannot be applied to the terms\r\n \"eq_refl\" : \"nth_error Bound (ibound idx) = nth_error Bound (ibound idx)\"\r\n \"e0\" : \"nth_error Bound (ibound idx') = e\"\r\nThe 2nd term has type \"nth_error Bound (ibound idx') = e\"\r\nwhich should be coercible to \"e = e\".\r\n *)\r\n```\r\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337533333/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337533337","html_url":"https://github.com/coq/coq/issues/4145#issuecomment-337533337","issue_url":"https://api.github.com/repos/coq/coq/issues/4145","id":337533337,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUzMzMzNw==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2015-09-05T18:23:54Z","updated_at":"2017-10-18T09:58:15Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nThis now fails with a different error message (b338af912c32ab87d6668923add72a56408bddf8 got rid of Exc in nth_error); apparently [pattern (nth_error Bound (ibound idx')) at -1] no longer works (why at -1?), complaining that:\n\nToplevel input, characters 20-66:\nError: The abstracted term\n\"fun o : option A =>\n match\n   nth_error Bound (ibound idx) as anonymous'0\n   return\n     (anonymous'0 = nth_error Bound (ibound idx) ->\n      nth_error Bound (ibound idx') = o -> Prop)\n with\n | Some a =>\n     match\n       o as anonymous'\n       return\n         (Some a = nth_error Bound (ibound idx) -> anonymous' = o -> Prop)\n     with\n     | Some a' =>\n         fun (_ : Some a = nth_error Bound (ibound idx)) (_ : Some a' = o) =>\n         a = a'\n     | None =>\n         fun (_ : Some a = nth_error Bound (ibound idx)) (_ : None = o) =>\n         True\n     end\n | None => fun (_ : None = nth_error Bound (ibound idx)) (_ : o = o) => True\n end eq_refl eq_refl\" is not well typed.\nIn pattern-matching on term \"nth_error Bound (ibound idx)\" the branch for\nconstructor \"Some\" has type\n \"forall a : A, Some a = nth_error Bound (ibound idx) -> o = o -> Prop\"\nwhich should be\n \"forall H : A,\n  Some H = nth_error Bound (ibound idx) ->\n  nth_error Bound (ibound idx') = o -> Prop\".\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337533337/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/353596711","html_url":"https://github.com/coq/coq/issues/4145#issuecomment-353596711","issue_url":"https://api.github.com/repos/coq/coq/issues/4145","id":353596711,"node_id":"MDEyOklzc3VlQ29tbWVudDM1MzU5NjcxMQ==","user":{"login":"ppedrot","id":1202327,"node_id":"MDQ6VXNlcjEyMDIzMjc=","avatar_url":"https://avatars.githubusercontent.com/u/1202327?v=4","gravatar_id":"","url":"https://api.github.com/users/ppedrot","html_url":"https://github.com/ppedrot","followers_url":"https://api.github.com/users/ppedrot/followers","following_url":"https://api.github.com/users/ppedrot/following{/other_user}","gists_url":"https://api.github.com/users/ppedrot/gists{/gist_id}","starred_url":"https://api.github.com/users/ppedrot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ppedrot/subscriptions","organizations_url":"https://api.github.com/users/ppedrot/orgs","repos_url":"https://api.github.com/users/ppedrot/repos","events_url":"https://api.github.com/users/ppedrot/events{/privacy}","received_events_url":"https://api.github.com/users/ppedrot/received_events","type":"User","site_admin":false},"created_at":"2017-12-22T13:17:46Z","updated_at":"2017-12-22T13:17:46Z","author_association":"MEMBER","body":"This is a bug affecting an already old version, and it is unlikely both that we fix it and that it would help you. Therefore I'll close it as WONTFIX.","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/353596711/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]