[{"url":"https://api.github.com/repos/coq/coq/issues/comments/337524929","html_url":"https://github.com/coq/coq/issues/3668#issuecomment-337524929","issue_url":"https://api.github.com/repos/coq/coq/issues/3668","id":337524929,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyNDkyOQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-09-26T12:55:48Z","updated_at":"2017-10-18T09:33:55Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\n(* File reduced by coq-bug-finder from original input, then from 6329 lines to 110 lines, then from 115 lines to 88 lines, then from 93 lines to 72 lines *)\n(* coqc version trunk (September 2014) compiled on Sep 25 2014 2:53:46 with OCaml 4.01.0\n   coqtop version cagnode16:/afs/csail.mit.edu/u/j/jgross/coq-trunk,trunk (bec7e0914f4a7144cd4efa8ffaccc9f72dbdb790) *)\n\nNotation \"( x ; y )\" := (existT _ x y).\nNotation \"x .1\" := (projT1 x) (at level 3, format \"x '.1'\").\nClass IsEquiv {A B : Type} (f : A -> B) := { equiv_inv : B -> A }.\nRecord Equiv A B := { equiv_fun :> A -> B ; equiv_isequiv :> IsEquiv equiv_fun }.\nNotation \"A <~> B\" := (Equiv A B) (at level 85).\nAxiom IsHProp : Type -> Type.\nInductive Bool := true | false.\nDefinition negb (b : Bool) := if b then false else true.\nHypothesis LEM : forall A : Type, IsHProp A -> A + (A -> False).\nModule NonPrim.\n  Class Contr (A : Type) := { center : A ; contr : (forall y : A, center = y) }.\n  Definition Book_6_9 : forall X, X -> X.\n  Proof.\n    intro X.\n    pose proof (@ LEM (Contr { f : X <~> X & ~(forall x, f x = x) }) $(admit)$) as contrXEquiv.\n    destruct contrXEquiv as [[f H]|H]; [ exact (f.1) | exact (fun x => x) ].\n  Defined.\n  Lemma Book_6_9_not_id b : Book_6_9 Bool b = negb b.\n  Proof.\n    unfold Book_6_9.\n    destruct (@ LEM (Contr { f : Bool <~> Bool & ~(forall x, f x = x) }) _) as [[f H']|H'].\n    match goal with\n      | [ |- equiv_fun Bool Bool f.1 b  = negb b ] => idtac\n      | [ |- equiv_fun Bool Bool center.1 b = negb b ] => fail 1 \"bad\"\n    end.\n    all:admit.\n  Defined.\nEnd NonPrim.\nModule Prim.\n  Set Primitive Projections.\n  Class Contr (A : Type) := { center : A ; contr : (forall y : A, center = y) }.\n  Definition Book_6_9 : forall X, X -> X.\n  Proof.\n    intro X.\n    pose proof (@ LEM (Contr { f : X <~> X & ~(forall x, f x = x) }) $(admit)$) as contrXEquiv.\n    destruct contrXEquiv as [[f H]|H]; [ exact (f.1) | exact (fun x => x) ].\n  Defined.\n  Lemma Book_6_9_not_id b : Book_6_9 Bool b = negb b.\n  Proof.\n    unfold Book_6_9.\n    destruct (@ LEM (Contr { f : Bool <~> Bool & ~(forall x, f x = x) }) _) as [[f H']|H'].\n    match goal with\n      | [ |- equiv_fun Bool Bool f.1 b  = negb b ] => idtac\n      | [ |- equiv_fun Bool Bool center.1 b = negb b ] => fail 1 \"bad\"\n    end. (* Tactic failure: bad *)\n    all:admit.\n  Defined.\nEnd NonPrim.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337524929/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337524930","html_url":"https://github.com/coq/coq/issues/3668#issuecomment-337524930","issue_url":"https://api.github.com/repos/coq/coq/issues/3668","id":337524930,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyNDkzMA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-09-27T19:17:05Z","updated_at":"2017-10-18T09:33:55Z","author_association":"CONTRIBUTOR","body":"Comment author: @mattam82\n\nThis was linked to the fact that projections needed delta to reduce, while destruct simply does a betaiotazeta on the resulting goal. Now that the primitive projections elimination principles are implemented with \"unfolded\" primitive projections betaiota suffices to reduce the goal as before.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337524930/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]