[{"url":"https://api.github.com/repos/coq/coq/issues/comments/719910028","html_url":"https://github.com/coq/coq/issues/13281#issuecomment-719910028","issue_url":"https://api.github.com/repos/coq/coq/issues/13281","id":719910028,"node_id":"MDEyOklzc3VlQ29tbWVudDcxOTkxMDAyOA==","user":{"login":"herbelin","id":460771,"node_id":"MDQ6VXNlcjQ2MDc3MQ==","avatar_url":"https://avatars.githubusercontent.com/u/460771?v=4","gravatar_id":"","url":"https://api.github.com/users/herbelin","html_url":"https://github.com/herbelin","followers_url":"https://api.github.com/users/herbelin/followers","following_url":"https://api.github.com/users/herbelin/following{/other_user}","gists_url":"https://api.github.com/users/herbelin/gists{/gist_id}","starred_url":"https://api.github.com/users/herbelin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/herbelin/subscriptions","organizations_url":"https://api.github.com/users/herbelin/orgs","repos_url":"https://api.github.com/users/herbelin/repos","events_url":"https://api.github.com/users/herbelin/events{/privacy}","received_events_url":"https://api.github.com/users/herbelin/received_events","type":"User","site_admin":false},"created_at":"2020-10-31T09:39:04Z","updated_at":"2020-10-31T09:39:04Z","author_association":"MEMBER","body":">  Is there any way to make these factor?\r\n\r\nIsn't the third ok?\r\n\r\nOtherwise, I would not know how to make it possible without a change of Coq rules.\r\n\r\nFirst, we would need to inline `atomic_constr` into level `0` (in `g_constr.mlg`), which would be good anyway to improve opportunities of factorization. But then, we would also need to inline `identref`  so that the Camlp5 knows that `IDENT` should come before `operconstr` in term of priority. Doing the second inlining would lose in term of factorization of entries (since `identref` does small job worth to be factorized), however we could imagine adding a primitive to Camlp5 to tell that some rules are not extensible (such as `identref`) and to inline (or automatically traverse) them if they are one-liner (as `identref` is)  so that it is clear that `? [ identref ]` takes precedence over `? [ operconstr ]`. I see that as possible future work.\r\n ","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/719910028/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/719966066","html_url":"https://github.com/coq/coq/issues/13281#issuecomment-719966066","issue_url":"https://api.github.com/repos/coq/coq/issues/13281","id":719966066,"node_id":"MDEyOklzc3VlQ29tbWVudDcxOTk2NjA2Ng==","user":{"login":"JasonGross","id":396076,"node_id":"MDQ6VXNlcjM5NjA3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/396076?v=4","gravatar_id":"","url":"https://api.github.com/users/JasonGross","html_url":"https://github.com/JasonGross","followers_url":"https://api.github.com/users/JasonGross/followers","following_url":"https://api.github.com/users/JasonGross/following{/other_user}","gists_url":"https://api.github.com/users/JasonGross/gists{/gist_id}","starred_url":"https://api.github.com/users/JasonGross/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JasonGross/subscriptions","organizations_url":"https://api.github.com/users/JasonGross/orgs","repos_url":"https://api.github.com/users/JasonGross/repos","events_url":"https://api.github.com/users/JasonGross/events{/privacy}","received_events_url":"https://api.github.com/users/JasonGross/received_events","type":"User","site_admin":false},"created_at":"2020-10-31T17:50:39Z","updated_at":"2020-10-31T17:50:39Z","author_association":"MEMBER","body":"Ah, sorry, the issue is that `uconstr:(?[name])` works, but `uconstr:(f ?[name])` fails.  I suppose the issue is just that I have to place the notation at level 11 or higher.","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/719966066/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]