[{"url":"https://api.github.com/repos/coq/coq/issues/comments/337526069","html_url":"https://github.com/coq/coq/issues/3734#issuecomment-337526069","issue_url":"https://api.github.com/repos/coq/coq/issues/3734","id":337526069,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyNjA2OQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-10-14T17:03:34Z","updated_at":"2017-10-18T09:37:00Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\n(* -*- mode: coq; coq-prog-args: (\"-emacs\" \"-indices-matter\") -*- *)\n(* File reduced by coq-bug-finder from original input, then from 25856 lines to 19986 lines, then from 19167 lines to 15037 lines, then from 15051 lines to 14789 lines, then from 14803 lines to 12005 lines, then from 12019 lines to 12009 lines, then from 12023 lines to 924 lines, then from 918 lines to 448 lines, then from 435 lines to 364 lines, then from 261 lines to 198 lines *)\n(* coqc version trunk (October 2014) compiled on Oct 11 2014 1:13:41 with OCaml 4.01.0\n   coqtop version cagnode16:/afs/csail.mit.edu/u/j/jgross/coq-trunk,trunk (d65496f09c4b68fa318783e53f9cd6d5c18e1eb7) *)\n\nSet Universe Polymorphism.\nSet Primitive Projections.\nReserved Infix \"o\" (at level 40, left associativity).\nSet Implicit Arguments.\nDelimit Scope morphism_scope with morphism.\nDelimit Scope category_scope with category.\nDelimit Scope object_scope with object.\nRecord PreCategory :=\n  { object :> Type;\n    morphism : object -> object -> Type;\n    identity : forall x, morphism x x;\n    compose : forall s d d', morphism d d' -> morphism s d -> morphism s d' }.\nBind Scope category_scope with PreCategory.\nArguments identity {!C%category} / x%object : rename.\nInfix \"o\" := (@ compose _ _ _ _) : morphism_scope.\nDelimit Scope functor_scope with functor.\nLocal Open Scope morphism_scope.\nRecord Functor (C D : PreCategory) :=\n  { object_of :> C -> D;\n    morphism_of : forall s d, morphism C s d -> morphism D (object_of s) (object_of d) }.\nBind Scope functor_scope with Functor.\nArguments morphism_of [C%category] [D%category] F%functor [s%object d%object] m%morphism : rename, simpl nomatch.\nClass IsIsomorphism {C : PreCategory} {s d} (m : morphism C s d) := {}.\nDefinition oppositeC (C : PreCategory) : PreCategory.\n  exact (@ Build_PreCategory\n           C\n           (fun s d => morphism C d s)\n           (identity (C := C))\n           (fun _ _ _ m1 m2 => m2 o m1)).\nDefined.\nNotation \"C ^op\" := (oppositeC C) (at level 3, format \"C '^op'\") : category_scope.\nDefinition composeF C D E (G : Functor D E) (F : Functor C D) : Functor C E.\n  exact (Build_Functor\n           C E\n           (fun c => G (F c))\n           (fun _ _ m => morphism_of G (morphism_of F m))).\nDefined.\nInfix \"o\" := composeF : functor_scope.\nRecord NaturalTransformation C D (F G : Functor C D)\n  := { components_of :> forall c, morphism D (F c) (G c) ; commutes : components_of = components_of }.\nDefinition composeT C D (F F' F'' : Functor C D) (T' : NaturalTransformation F' F'') (T : NaturalTransformation F F')\n: NaturalTransformation F F''.\n  exact (@ Build_NaturalTransformation _ _ F F'' (fun c => T' c o T c) $(admit)$).\nDefined.\nDefinition whisker_r C D E (F F' : Functor D E) (T : NaturalTransformation F F') (G : Functor C D)\n  := @ Build_NaturalTransformation\n       _ _\n       (F o G) (F' o G)\n       (fun c => T (G c))\n       $(admit)$.\nInfix \"oR\" := whisker_r (at level 40, left associativity) : natural_transformation_scope.\nDefinition identityF C : Functor C C.\n  exact (Build_Functor C C\n                       (fun x => x)\n                       (fun _ _ x => x)).\nDefined.\nNotation \"1\" := (identityF _) : functor_scope.\nAxiom identityT : forall C D (F : Functor C D), NaturalTransformation F F.\nDefinition functor_category (C D : PreCategory) : PreCategory.\n  exact (@ Build_PreCategory (Functor C D)\n                            (@ NaturalTransformation C D)\n                            (@ identityT C D)\n                            (@ composeT C D)).\nDefined.\nNotation \"C -> D\" := (functor_category C D) : category_scope.\nAxiom oppositeF : forall C D (F : Functor C D), Functor C^op D^op.\nNotation \"F ^op\" := (oppositeF F) (at level 3, format \"F ^op\") : functor_scope.\nDefinition set_cat : PreCategory.\n  exact (@ Build_PreCategory Type\n                            (fun x y => x -> y)\n                            (fun _ x => x)\n                            (fun _ _ _ f g x => f (g x))).\nDefined.\nLocal Open Scope natural_transformation_scope.\nDefinition whiskerR_functor (C D E : PreCategory) (G : (C -> D)%category)\n: ((D -> E) -> (C -> E))%category.\n  exact (Build_Functor\n           (D -> E) (C -> E)\n           (fun F => F o G)%functor\n           (fun _ _ T => T oR G)).\nDefined.\nDefinition compose_functor (C D E : PreCategory) : object ((C -> D) -> ((D -> E) -> (C -> E))).\nProof.\n  refine (Build_Functor\n            (C -> D) ((D -> E) -> (C -> E))\n            (@ whiskerR_functor _ _ _)\n            $(admit)$).\nDefined.\nDefinition isisomorphism_natural_transformation\n           C D F G (T : NaturalTransformation F G)\n           `{forall x, IsIsomorphism (T x)}\n: @ IsIsomorphism (C -> D) F G T.\n  admit.\nDefined.\nLocal Open Scope functor_scope.\nAxiom coyoneda : forall A, Functor A^op (A -> set_cat).\nAxiom yoneda : forall A, Functor A (A^op -> set_cat).\nDefinition coyoneda_functor (A : PreCategory)\n: Functor (A -> set_cat) (A -> set_cat).\n  exact ((compose_functor _ _ set_cat (coyoneda A)^op) o (yoneda (A -> set_cat))).\nDefined.\nSection nt.\n  Variable A : PreCategory.\n  Axiom coyoneda_natural_transformation_helper : forall F, morphism (_ -> _) (coyoneda_functor A F) F.\n  Definition coyoneda_natural_transformation\n  : morphism (_ -> _)\n             (coyoneda_functor A)\n             1.\n  Proof.\n    hnf.\n    simpl.\n    let F := match goal with |- NaturalTransformation ?F ?G => constr:(F) end in\n    let G := match goal with |- NaturalTransformation ?F ?G => constr:(G) end in\n    refine (@ Build_NaturalTransformation\n              _ _\n              F G\n              coyoneda_natural_transformation_helper\n              _).\n    simpl.\n    admit.\n  Defined.\nEnd nt.\n\nDefinition coyoneda_lemma A\n: IsIsomorphism (coyoneda_natural_transformation A).\nProof.\n  eapply isisomorphism_natural_transformation.\n  simpl.\n(* Toplevel input, characters 15-20:\nError:\nIn environment\nA : PreCategory\nThe term \"?X112\" has type\n \"forall x : Functor A set_cat,\n  IsIsomorphism (coyoneda_natural_transformation_helper x)\"\nwhile it is expected to have type\n \"forall x : (A -> set_cat)%category,\n  IsIsomorphism ((coyoneda_natural_transformation A) x)\".\n *)\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337526069/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337526070","html_url":"https://github.com/coq/coq/issues/3734#issuecomment-337526070","issue_url":"https://api.github.com/repos/coq/coq/issues/3734","id":337526070,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyNjA3MA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2015-03-03T22:46:25Z","updated_at":"2017-10-18T09:37:00Z","author_association":"CONTRIBUTOR","body":"Comment author: @mattam82\n\nFixed in 8.5\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337526070/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]