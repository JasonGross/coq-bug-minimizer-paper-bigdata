Comment author: @JasonGross

Stealing from Bug [BZ#3263](https://github.com/coq/coq/issues?q=is%3Aissue%20%22Original%20bug%20ID%3A%20BZ%233263%22):

```coq
(* File reduced by coq-bug-finder from originally 10918 lines, then 3649 lines to 3177 lines, then from 3189 lines to 3164 lines, then from 2653 lines to 2496 lines,  2653 lines, then from 1642 lines to 651 lines, then from 736 lines to 473 lines, then from 433 lines to 275 lines, then from 258 lines to 235 lines. *)
Generalizable All Variables.
Set Implicit Arguments.

Arguments fst {_ _} _.
Arguments snd {_ _} _.

Axiom cheat : forall {T}, T.

Reserved Notation "g 'o' f" (at level 40, left associativity).

Inductive paths {A : Type} (a : A) : A -> Type := idpath : paths a a.
Arguments idpath {A a} , [A] a.
Notation "x = y" := (paths x y) : type_scope.

Definition symmetry {A : Type} {x y : A} (p : x = y) : y = x
  := match p with idpath => idpath end.

Delimit Scope morphism_scope with morphism.
Delimit Scope category_scope with category.
Delimit Scope object_scope with object.
Record PreCategory (object : Type) :=
  Build_PreCategory' {
      object :> Type := object;
      morphism : object -> object -> Type;
      identity : forall x, morphism x x;
      compose : forall s d d',
                  morphism d d'
                  -> morphism s d
                  -> morphism s d'
                              where "f 'o' g" := (compose f g);
      associativity : forall x1 x2 x3 x4
                             (m1 : morphism x1 x2)
                             (m2 : morphism x2 x3)
                             (m3 : morphism x3 x4),
                        (m3 o m2) o m1 = m3 o (m2 o m1);
      associativity_sym : forall x1 x2 x3 x4
                                 (m1 : morphism x1 x2)
                                 (m2 : morphism x2 x3)
                                 (m3 : morphism x3 x4),
                            m3 o (m2 o m1) = (m3 o m2) o m1;
      left_identity : forall a b (f : morphism a b), identity b o f = f;
      right_identity : forall a b (f : morphism a b), f o identity a = f;
      identity_identity : forall x, identity x o identity x = identity x
    }.
Bind Scope category_scope with PreCategory.
Arguments PreCategory {_}.
Arguments identity {_} [!C%category] x%object : rename.

Arguments compose {_} [!C%category s%object d%object d'%object] m1%morphism m2%morphism : rename.

Infix "o" := compose : morphism_scope.

Delimit Scope functor_scope with functor.
Local Open Scope morphism_scope.
Record Functor `(C : @ PreCategory objC, D : @ PreCategory objD) :=
  {
    object_of :> C -> D;
    morphism_of : forall s d, morphism C s d
                              -> morphism D (object_of s) (object_of d);
    composition_of : forall s d d'
                            (m1 : morphism C s d) (m2: morphism C d d'),
                       morphism_of _ _ (m2 o m1)
                       = (morphism_of _ _ m2) o (morphism_of _ _ m1);
    identity_of : forall x, morphism_of _ _ (identity x)
                            = identity (object_of x)
  }.
Bind Scope functor_scope with Functor.

Arguments morphism_of {_} [C%category] {_} [D%category] F%functor [s%object d%object] m%morphism : rename, simpl nomatch.

Notation "F '_1' m" := (morphism_of F m) (at level 10, no associativity) : morphism_scope.

Class IsIsomorphism `{C : @ PreCategory objC} {s d} (m : morphism C s d) :=
  {
    morphism_inverse : morphism C d s;
    left_inverse : morphism_inverse o m = identity _;
    right_inverse : m o morphism_inverse = identity _
  }.

Definition opposite `(C : @ PreCategory objC) : PreCategory
  := @ Build_PreCategory'
       C
       (fun s d => morphism C d s)
       (identity (C := C))
       (fun _ _ _ m1 m2 => m2 o m1)
       (fun _ _ _ _ _ _ _ => @ associativity_sym _ _ _ _ _ _ _ _ _)
       (fun _ _ _ _ _ _ _ => @ associativity _ _ _ _ _ _ _ _ _)
       (fun _ _ => @ right_identity _ _ _ _)
       (fun _ _ => @ left_identity _ _ _ _)
       (@ identity_identity _ C).

Notation "C ^op" := (opposite C) (at level 3) : category_scope.

Definition prod `(C : @ PreCategory objC, D : @ PreCategory objD) : @ PreCategory (objC * objD).
  refine (@ Build_PreCategory'
            (C * D)%type
            (fun s d => (morphism C (fst s) (fst d)
                         * morphism D (snd s) (snd d))%type)
            (fun x => (identity (fst x), identity (snd x)))
            (fun s d d' m2 m1 => (fst m2 o fst m1, snd m2 o snd m1))
            _
            _
            _
            _
            _); admit.
Defined.
Infix "*" := prod : category_scope.

Definition compose_functor `(C : @ PreCategory objC, D : @ PreCategory objD, E : @ PreCategory objE) (G : Functor D E) (F : Functor C D) : Functor C E
  := Build_Functor
       C E
       (fun c => G (F c))
       (fun _ _ m => morphism_of G (morphism_of F m))
       cheat
       cheat.

Infix "o" := compose_functor : functor_scope.

Record NaturalTransformation `(C : @ PreCategory objC, D : @ PreCategory objD) (F G : Functor C D) :=
  Build_NaturalTransformation' {
      components_of :> forall c, morphism D (F c) (G c);
      commutes : forall s d (m : morphism C s d),
                   components_of d o F _1 m = G _1 m o components_of s;

      commutes_sym : forall s d (m : C.(morphism) s d),
                       G _1 m o components_of s = components_of d o F _1 m
    }.
Definition functor_category `(C : @ PreCategory objC, D : @ PreCategory objD) : PreCategory
  := @ Build_PreCategory' (Functor C D)
                         (@ NaturalTransformation _ C _ D)
                         cheat
                         cheat
                         cheat
                         cheat
                         cheat
                         cheat
                         cheat.

Definition opposite_functor `(F : @ Functor objC C objD D) : Functor C^op D^op
  := Build_Functor (C^op) (D^op)
                   (object_of F)
                   (fun s d => morphism_of F (s := d) (d := s))
                   (fun d' d s m1 m2 => composition_of F s d d' m2 m1)
                   (identity_of F).

Definition opposite_invL `(F : @ Functor objC C^op objD D) : Functor C D^op
  := Build_Functor C (D^op)
                   (object_of F)
                   (fun s d => morphism_of F (s := d) (d := s))
                   (fun d' d s m1 m2 => composition_of F s d d' m2 m1)
                   (identity_of F).
Notation "F ^op" := (opposite_functor F) : functor_scope.

Notation "F ^op'L" := (opposite_invL F) (at level 3) : functor_scope.
Definition fst `{C : @ PreCategory objC, D : @ PreCategory objD} : Functor (C * D) C
  := Build_Functor (C * D) C
                   (@ fst _ _)
                   (fun _ _ => @ fst _ _)
                   (fun _ _ _ _ _ => idpath)
                   (fun _ => idpath).

Definition snd `{C : @ PreCategory objC, D : @ PreCategory objD} : Functor (C * D) D
  := Build_Functor (C * D) D
                   (@ snd _ _)
                   (fun _ _ => @ snd _ _)
                   (fun _ _ _ _ _ => idpath)
                   (fun _ => idpath).
Definition prod_functor `(F : @ Functor objC C objD D, F' : @ Functor objC C objD' D')
: Functor C (D * D')
  := Build_Functor
       C (D * D')
       (fun c => (F c, F' c))
       (fun s d m => (F _1 m, F' _1 m))%morphism
       cheat
       cheat.
Definition pair `(F : @ Functor objC C objD D, F' : @ Functor objC' C' objD' D') : Functor (C * C') (D * D')
  := (prod_functor (F o fst) (F' o snd))%functor.
Notation cat_of obj :=
  (@ Build_PreCategory' obj
                       (fun x y => forall _ : x, y)
                       (fun _ x => x)
                       (fun _ _ _ f g x => f (g x))%core
                       (fun _ _ _ _ _ _ _ => idpath)
                       (fun _ _ _ _ _ _ _ => idpath)
                       (fun _ _ _ => idpath)
                       (fun _ _ _ => idpath)
                       (fun _ => idpath)).

Definition hom_functor `(C : @ PreCategory objC) : Functor (C^op * C) (cat_of Type)
  := Build_Functor _ _ cheat cheat cheat cheat.

Definition induced_hom_natural_transformation `(F : @ Functor objC C objD D)
: NaturalTransformation (hom_functor C) (hom_functor D o pair F^op F)
  := Build_NaturalTransformation' _ _ cheat cheat cheat.

Class IsFullyFaithful `(F : @ Functor objC C objD D)
  := is_fully_faithful
     : forall x y : C,
         IsIsomorphism (induced_hom_natural_transformation F (x, y)).

Definition coyoneda `(A : @ PreCategory objA) : Functor A^op (@ functor_category _ A _ (cat_of Type))
  := cheat.

Definition yoneda `(A : @ PreCategory objA) : Functor A (@ functor_category _ A^op _ (cat_of Type))
  := (((coyoneda A^op)^op'L)^op'L)%functor.
Definition coyoneda_embedding `(A : @ PreCategory objA) : @ IsFullyFaithful _ _ _ _ (@ coyoneda _ A).
Admitted.

Definition yoneda_embedding_fast `(A : @ PreCategory objA) : @ IsFullyFaithful _ _ _ _ (@ yoneda _ A).
Proof.
  intros a b.
  pose proof (coyoneda_embedding A^op a b) as CYE.
  unfold yoneda.
  Time let t := (type of CYE) in
  let t' := (eval simpl in t) in pose proof ((fun (x : t) => (x : t')) CYE) as CYE'. (* Finished transaction in 0. secs (0.216013u,0.004s) *)
  Time let t := match goal with |- ?G => constr:(G) end in
  let t' := (eval simpl in t) in exact ((fun (x : t') => (x : t)) CYE'). (* Finished transaction in 0. secs (0.248016u,0.s) in 8.4, but 11-12s in trunk *)
Time Defined. (* Finished transaction in 1. secs (0.432027u,0.s) in 8.4, but takes ~11-12s in trunk  *)

Definition yoneda_embedding `(A : @ PreCategory objA) : @ IsFullyFaithful _ _ _ _ (@ yoneda _ A).
Proof.
  intros a b.
  pose proof (coyoneda_embedding A^op a b) as CYE.
  unfold yoneda; simpl in *.
  Time exact CYE. (* Finished transaction in 0. secs (0.012001u,0.s) in 8.4, but ~11-12s in trunk *)
```

Comment author: @JasonGross

Created attachment 491
Script to run with git bisect

I tried to trace this to a commit (script attached), but found, very mysteriously, that if I compile Coq myself (v8.4 or trunk), I get the slow timings, but if I use the precompiled version of Coq for Windows, I get the fast times.

> Attached file: [test.sh](https://coq.inria.fr/bugfiles/attachment.cgi?id=491) (text/plain, 13644 bytes)
> Description:   Script to run with git bisect


Comment author: @mattam82

This is simply due the the fact that admit doesn't make an opaque subdefinition in trunk, resulting in very slow failures of the conversion. Using abstract admit instead results in the same behavior as 8.4. I'm not sure about the different behaviors you encounter with different 8.4 versions though. Not marking it resolved yet.


Comment author: @JasonGross

Fascinating.  There was a script with this behavior with no admits in it, I think, though.

In any case, here's another example where there's a factor of 100 slowdown in the slow direction of unification, only in trunk, and I've already replaced [admit] with [abstract admit]:

```coq
(* File reduced by coq-bug-finder from original input, then from 8772 lines to 758 lines, then from 727 lines to 589 lines, then from 593 lines to 579 lines *)
Axiom ADMIT : False. Ltac admit := destruct ADMIT.
Set Universe Polymorphism.
Definition relation (A : Type) := A -> A -> Type.

Class Reflexive {A} (R : relation A) :=
  reflexivity : forall x : A, R x x.

Class Symmetric {A} (R : relation A) :=
  symmetry : forall x y, R x y -> R y x.

Class Transitive {A} (R : relation A) :=
  transitivity : forall x y z, R x y -> R y z -> R x z.

Tactic Notation "etransitivity" open_constr(y) :=
  let R := match goal with |- ?R ?x ?z => constr:(R) end in
  let x := match goal with |- ?R ?x ?z => constr:(x) end in
  let z := match goal with |- ?R ?x ?z => constr:(z) end in
  refine (@ transitivity _ R _ x y z _ _).

Tactic Notation "etransitivity" := etransitivity _.
Reserved Infix "o" (at level 40, left associativity).

Inductive paths {A : Type} (a : A) : A -> Type := idpath : paths a a where "x = y" := (@ paths _ x y) : type_scope.
Arguments idpath {A a} , [A] a.

Delimit Scope path_scope with path.
Local Open Scope path_scope.

Definition concat {A : Type} {x y z : A} (p : x = y) (q : y = z) : x = z :=
  match p, q with idpath, idpath => idpath end.

Instance transitive_paths {A} : Transitive (@ paths A) | 0 := @ concat A.

Definition inverse {A : Type} {x y : A} (p : x = y) : y = x
  := match p with idpath => idpath end.

Instance symmetric_paths {A} : Symmetric (@ paths A) | 0 := @ inverse A.

Notation "1" := idpath : path_scope.

Notation "p @  q" := (concat p q) (at level 20) : path_scope.

Notation "p ^" := (inverse p) (at level 3) : path_scope.

Definition transport {A : Type} (P : A -> Type) {x y : A} (p : x = y) (u : P x) : P y :=
  match p with idpath => u end.

Definition ap {A B:Type} (f:A -> B) {x y:A} (p:x = y) : f x = f y
  := match p with idpath => idpath end.

Definition Sect {A B : Type} (s : A -> B) (r : B -> A) :=
  forall x : A, r (s x) = x.

Class IsEquiv {A B : Type} (f : A -> B) := BuildIsEquiv {
                                               equiv_inv : B -> A ;
                                               eisretr : Sect equiv_inv f;
                                               eissect : Sect f equiv_inv;
                                               eisadj : forall x : A, eisretr (f x) = ap f (eissect x)
                                             }.

Notation "f ^-1" := (@ equiv_inv _ _ f _) (at level 3) : equiv_scope.
Set Implicit Arguments.

Delimit Scope morphism_scope with morphism.
Delimit Scope category_scope with category.
Delimit Scope object_scope with object.

Record PreCategory :=
  Build_PreCategory {
      object :> Type;
      morphism : object -> object -> Type;

      identity : forall x, morphism x x;
      compose : forall s d d',
                  morphism d d'
                  -> morphism s d
                  -> morphism s d'
                              where "f 'o' g" := (compose f g);

      associativity : forall x1 x2 x3 x4
                             (m1 : morphism x1 x2)
                             (m2 : morphism x2 x3)
                             (m3 : morphism x3 x4),
                        (m3 o m2) o m1 = m3 o (m2 o m1);
      left_identity : forall a b (f : morphism a b), identity b o f = f;
      right_identity : forall a b (f : morphism a b), f o identity a = f
    }.
Bind Scope morphism_scope with morphism.
Arguments identity [!C%category] x%object : rename.
Arguments compose [!C%category s%object d%object d'%object] m1%morphism m2%morphism : rename.

Hint Resolve @ left_identity @ right_identity @ associativity : category morphism.
Infix "o" := compose : morphism_scope.
Notation "1" := (identity _) : morphism_scope.

Delimit Scope functor_scope with functor.

Local Open Scope morphism_scope.

Section Functor.
  Variable C : PreCategory.
  Variable D : PreCategory.

  Record Functor :=
    {
      object_of :> C -> D;
      morphism_of : forall s d, morphism C s d
                                -> morphism D (object_of s) (object_of d);
      composition_of : forall s d d'
                              (m1 : morphism C s d) (m2: morphism C d d'),
                         morphism_of _ _ (m2 o m1)
                         = (morphism_of _ _ m2) o (morphism_of _ _ m1);
      identity_of : forall x, morphism_of _ _ (identity x)
                              = identity (object_of x)
    }.
End Functor.

Bind Scope functor_scope with Functor.
Arguments morphism_of [C%category] [D%category] F%functor [s%object d%object] m%morphism : rename, simpl nomatch.
Notation "F '_1' m" := (morphism_of F m) (at level 10, no associativity) : morphism_scope.
Generalizable All Variables.

Local Open Scope category_scope.

Class IsIsomorphism {C : PreCategory} {s d} (m : morphism C s d) :=
  {
    morphism_inverse : morphism C d s;
    left_inverse : morphism_inverse o m = identity _;
    right_inverse : m o morphism_inverse = identity _
  }.

Local Notation "m ^-1" := (morphism_inverse (m := m)) : morphism_scope.

Class Isomorphic {C : PreCategory} s d :=
  {
    morphism_isomorphic :> morphism C s d;
    isisomorphism_isomorphic :> IsIsomorphism morphism_isomorphic
  }.

Coercion morphism_isomorphic : Isomorphic >-> morphism.
Coercion isisomorphism_isomorphic : Isomorphic >-> IsIsomorphism.

Local Infix "<~=~>" := Isomorphic (at level 70, no associativity) : category_scope.

Section iso_equiv_relation.
  Variable C : PreCategory.

  Global Instance isisomorphism_identity (x : C) : IsIsomorphism (identity x)
    := {| morphism_inverse := identity x;
          left_inverse := left_identity C x x (identity x);
          right_inverse := right_identity C x x (identity x) |}.

  Definition isisomorphism_inverse `(@ IsIsomorphism C x y m) : IsIsomorphism m^-1
    := {| morphism_inverse := m;
          left_inverse := right_inverse;
          right_inverse := left_inverse |}.

  Local Ltac iso_comp_t inv_lemma :=
    etransitivity; [ | apply inv_lemma ];
    instantiate;
    first [ rewrite -> ?associativity; apply ap
          | rewrite <- ?associativity; apply ap ];
    first [ rewrite -> ?associativity; rewrite inv_lemma
          | rewrite <- ?associativity; rewrite inv_lemma ];
    auto with morphism.

  Global Instance isisomorphism_compose `(@ IsIsomorphism C y z m0) `(@ IsIsomorphism C x y m1)
  : IsIsomorphism (m0 o m1).
  Proof.
    exists (m1^-1 o m0^-1);
    [ abstract iso_comp_t @ left_inverse
    | abstract iso_comp_t @ right_inverse ].
  Defined.

  Global Instance isomorphic_refl : Reflexive (@ Isomorphic C)
    := fun x : C => {| morphism_isomorphic := identity x |}.

  Definition idtoiso (x y : C) (H : x = y) : Isomorphic x y
    := match H in (_ = y0) return (x <~=~> y0) with
         | 1%path => reflexivity x
       end.
End iso_equiv_relation.

Section composition.
  Variable C : PreCategory.
  Variable D : PreCategory.
  Variable E : PreCategory.
  Variable G : Functor D E.
  Variable F : Functor C D.

  Local Notation c_object_of c := (G (F c)) (only parsing).
  Local Notation c_morphism_of m := (morphism_of G (morphism_of F m)) (only parsing).
  Definition compose_composition_of s d d'
             (m1 : morphism C s d) (m2 : morphism C d d')
  : c_morphism_of (m2 o m1) = c_morphism_of m2 o c_morphism_of m1
    := transport (@ paths _ (c_morphism_of (m2 o m1)))
                 (composition_of G _ _ _ _ _)
                 (ap (@ morphism_of _ _ G _ _) (composition_of F _ _ _ m1 m2)).

  Definition compose_identity_of x
  : c_morphism_of (identity x) = identity (c_object_of x)
    := transport (@ paths _ _)
                 (identity_of G _)
                 (ap (@ morphism_of _ _ G _ _) (identity_of F x)).

  Definition composeF : Functor C E
    := Build_Functor
         C E
         (fun c => G (F c))
         (fun _ _ m => morphism_of G (morphism_of F m))
         compose_composition_of
         compose_identity_of.
End composition.
Infix "o" := composeF : functor_scope.

Definition identityF C : Functor C C
  := Build_Functor C C
                   (fun x => x)
                   (fun _ _ x => x)
                   (fun _ _ _ _ _ => idpath)
                   (fun _ => idpath).
Notation "1" := (identityF _) : functor_scope.

Delimit Scope natural_transformation_scope with natural_transformation.

Section NaturalTransformation.
  Variable C : PreCategory.
  Variable D : PreCategory.
  Variables F G : Functor C D.

  Record NaturalTransformation :=
    Build_NaturalTransformation' {
        components_of :> forall c, morphism D (F c) (G c);
        commutes : forall s d (m : morphism C s d),
                     components_of d o F _1 m = G _1 m o components_of s;

        commutes_sym : forall s d (m : C.(morphism) s d),
                         G _1 m o components_of s = components_of d o F _1 m
      }.

  Definition Build_NaturalTransformation CO COM
    := Build_NaturalTransformation'
         CO
         COM
         (fun _ _ _ => symmetry _ _ (COM _ _ _)).
End NaturalTransformation.

Section compose.
  Variable C : PreCategory.
  Variable D : PreCategory.
  Variables F F' F'' : Functor C D.

  Variable T' : NaturalTransformation F' F''.
  Variable T : NaturalTransformation F F'.

  Local Notation CO c := (T' c o T c).

  Definition compose_commutes s d (m : morphism C s d)
  : CO d o morphism_of F m = morphism_of F'' m o CO s
    := (associativity _ _ _ _ _ _ _ _)
         @  ap (fun x => _ o x) (commutes T _ _ m)
         @  (associativity _ _ _ _ _ _ _ _)^
       @  ap (fun x => x o _) (commutes T' _ _ m)
         @  (associativity _ _ _ _ _ _ _ _).

  Definition compose_commutes_sym s d (m : morphism C s d)
  : morphism_of F'' m o CO s = CO d o morphism_of F m
    := (associativity _ _ _ _ _ _ _ _)^
       @  ap (fun x => x o _) (commutes_sym T' _ _ m)
         @  (associativity _ _ _ _ _ _ _ _)
         @  ap (fun x => _ o x) (commutes_sym T _ _ m)
         @  (associativity _ _ _ _ _ _ _ _)^.

         Definition composeT
       : NaturalTransformation F F''
           := Build_NaturalTransformation' F F''
                                           (fun c => CO c)
                                           compose_commutes
                                           compose_commutes_sym.
End compose.

Section whisker.
  Variable C : PreCategory.
  Variable D : PreCategory.
  Variable E : PreCategory.

  Section L.
    Variable F : Functor D E.
    Variables G G' : Functor C D.
    Variable T : NaturalTransformation G G'.

    Local Notation CO c := (morphism_of F (T c)).

    Definition whisker_l_commutes s d (m : morphism C s d)
    : F _1 (T d) o (F o G) _1 m = (F o G') _1 m o F _1 (T s).
      abstract admit.
    Defined.

    Definition whisker_l
      := Build_NaturalTransformation
           (F o G) (F o G')
           (fun c => CO c)
           whisker_l_commutes.
  End L.

  Section R.
    Variables F F' : Functor D E.
    Variable T : NaturalTransformation F F'.
    Variable G : Functor C D.

    Local Notation CO c := (T (G c)).

    Definition whisker_r_commutes s d (m : morphism C s d)
    : T (G d) o (F o G) _1 m = (F' o G) _1 m o T (G s).
      abstract admit.
    Defined.

    Definition whisker_r
      := Build_NaturalTransformation
           (F o G) (F' o G)
           (fun c => CO c)
           whisker_r_commutes.
  End R.
End whisker.
Infix "o" := composeT : natural_transformation_scope.
Infix "oL" := whisker_l (at level 40, left associativity) : natural_transformation_scope.
Infix "oR" := whisker_r (at level 40, left associativity) : natural_transformation_scope.

Section identity'.
  Variable C : PreCategory.
  Variable D : PreCategory.

  Section generalized.
    Variables F G : Functor C D.
    Hypothesis HO : object_of F = object_of G.
    Hypothesis HM : transport (fun GO => forall s d,
                                           morphism C s d
                                           -> morphism D (GO s) (GO d))
                              HO
                              (morphism_of F)
                    = morphism_of G.

    Local Notation CO c := (transport (fun GO => morphism D (F c) (GO c))
                                      HO
                                      (identity (F c))).

    Definition generalized_identity_commutes s d (m : morphism C s d)
    : CO d o morphism_of F m = morphism_of G m o CO s.
    Proof.
      case HM.
      case HO.
      exact (left_identity _ _ _ _ @  (right_identity _ _ _ _)^).
    Defined.

    Definition generalized_identity_commutes_sym s d (m : morphism C s d)
    : morphism_of G m o CO s = CO d o morphism_of F m.
      abstract admit.
    Defined.

    Definition generalized_identity
    : NaturalTransformation F G
      := Build_NaturalTransformation'
           F G
           (fun c => CO c)
           generalized_identity_commutes
           generalized_identity_commutes_sym.
  End generalized.

  Definition identityT (F : Functor C D)
  : NaturalTransformation F F
    := Build_NaturalTransformation
         F F (fun _ => 1%morphism) (fun _ _ _ => left_identity _ _ _ _ @  (right_identity _ _ _ _)^).
End identity'.
Notation "1" := (identityT _) : natural_transformation_scope.
Local Open Scope natural_transformation_scope.

Section natural_transformation_identity.
  Variable C : PreCategory.
  Variable D : PreCategory.

  Lemma left_identityT (F F' : Functor C D)
        (T : NaturalTransformation F F')
  : 1 o T = T.
    abstract admit.
  Defined.

  Lemma right_identityT (F F' : Functor C D)
        (T : NaturalTransformation F F')
  : T o 1 = T.
    abstract admit.
  Defined.
End natural_transformation_identity.

Section functors.
  Variable B : PreCategory.
  Variable C : PreCategory.
  Variable D : PreCategory.
  Variable E : PreCategory.
  Variable F : Functor D E.
  Variable G : Functor C D.
  Variable H : Functor B C.

  Local Notation F0 := ((F o G) o H)%functor.
  Local Notation F1 := (F o (G o H))%functor.

  Definition associator_1 : NaturalTransformation F0 F1
    := Eval simpl in
        generalized_identity F0 F1 idpath idpath.
End functors.
Definition associativityT
           C D F G H I
           (V : @ NaturalTransformation C D F G)
           (U : @ NaturalTransformation C D G H)
           (T : @ NaturalTransformation C D H I)
: (T o U) o V = T o (U o V).
  abstract admit.
Defined.

Section functor_identity.

  Variable C : PreCategory.
  Variable D : PreCategory.

  Section left.
    Variable F : Functor D C.
    Definition left_identity_natural_transformation_2
    : NaturalTransformation F (1 o F)
      := Eval simpl in generalized_identity F (1 o F) idpath idpath.
  End left.

  Section right.
    Variable F : Functor C D.
    Definition right_identity_natural_transformation_2 : NaturalTransformation F (F o 1)
      := Eval simpl in generalized_identity F (F o 1) idpath idpath.
  End right.
End functor_identity.

Section functor_category.

  Variable C : PreCategory.
  Variable D : PreCategory.

  Definition functor_category : PreCategory
    := @ Build_PreCategory (Functor C D)
                          (@ NaturalTransformation C D)
                          (@ identityT C D)
                          (@ composeT C D)
                          (@ associativityT C D)
                          (@ left_identityT C D)
                          (@ right_identityT C D).

End functor_category.

Local Notation "[ C , D ]" := (functor_category C D) : category_scope.

Definition NaturalIsomorphism (C D : PreCategory) F G :=
  @ Isomorphic [ C , D ] F G.

Coercion natural_transformation_of_natural_isomorphism C D F G
         (T : @ NaturalIsomorphism C D F G)
: NaturalTransformation F G
  := T : morphism _ _ _.

Local Infix "<~=~>" := NaturalIsomorphism : natural_transformation_scope.

Definition isisomorphism_natural_transformation
           C D F G (T : NaturalTransformation F G)
           `{forall x, IsIsomorphism (T x)}
: @ IsIsomorphism [C, D] F G T.
  abstract admit.
Defined.

Hint Immediate isisomorphism_natural_transformation : typeclass_instances.
Global Instance isisomorphism_compose2
       `(T' : @ NaturalTransformation C D F' F'')
       `(T : @ NaturalTransformation C D F F')
       `{@ IsIsomorphism [C, D] F' F'' T'}
       `{@ IsIsomorphism [C, D] F F' T}
: @ IsIsomorphism [C, D] F F'' (T' o T)%natural_transformation
  := @ isisomorphism_compose [C, D] _ _ T' _ _ T _.

Global Instance iso_whisker_l C D E
       (F : Functor D E)
       (G G' : Functor C D)
       (T : NaturalTransformation G G')
       `{@ IsIsomorphism [C, D] G G' T}
: @ IsIsomorphism [C, E] (F o G)%functor (F o G')%functor (whisker_l F T).
abstract admit.
Defined.

Global Instance iso_whisker_r C D E
       (F F' : Functor D E)
       (T : NaturalTransformation F F')
       (G : Functor C D)
       `{@ IsIsomorphism [D, E] F F' T}
: @ IsIsomorphism [C, E] (F o G)%functor (F' o G)%functor (whisker_r T G).
abstract admit.
Defined.

Section pseudofunctor.
  Variable C : PreCategory.

  Record Pseudofunctor :=
    {
      p_object_of :> C -> PreCategory;
      p_morphism_of : forall s d, morphism C s d
                                  -> Functor (p_object_of s) (p_object_of d);
      p_composition_of : forall s d d'
                                (m1 : morphism C d d') (m2 : morphism C s d),
                           (p_morphism_of _ _ (m1 o m2))
                             <~=~> (p_morphism_of _ _ m1 o p_morphism_of _ _ m2)%functor;
      p_identity_of : forall x, p_morphism_of x x 1 <~=~> 1%functor;
      p_composition_of_coherent
      : forall w x y z
               (f : morphism C w x) (g : morphism C x y) (h : morphism C y z),
          ((associator_1 (p_morphism_of y z h) (p_morphism_of x y g) (p_morphism_of w x f))
             o ((p_composition_of x y z h g oR p_morphism_of w x f)
                  o (p_composition_of w x z (h o g) f)))
          = ((p_morphism_of y z h oL p_composition_of w x y g f)
               o ((p_composition_of w y z h (g o f))
                    o (idtoiso [_, _] (ap (p_morphism_of w z) (associativity C w x y z f g h)) : morphism _ _ _)));
      p_left_identity_of_coherent
      : forall x y (f : morphism C x y),
          ((p_identity_of y oR p_morphism_of x y f)
             o p_composition_of x y y 1 f)
          = ((left_identity_natural_transformation_2 (p_morphism_of x y f))
               o (idtoiso [_, _] (ap (p_morphism_of x y) (left_identity C x y f)) : morphism _ _ _));
      p_right_identity_of_coherent
      : forall x y (f : morphism C x y),
          ((p_morphism_of x y f oL p_identity_of x)
             o p_composition_of x x y f 1)
          = ((right_identity_natural_transformation_2 (p_morphism_of x y f))
               o (idtoiso [_, _] (ap (p_morphism_of x y) (right_identity C x y f)) : morphism _ _ _))
    }.
End pseudofunctor.

Section lemmas.
  Variable C : PreCategory.
  Variable F : Pseudofunctor C.
  Context
    {w x y z}
    {f : Functor (F w) (F z)} {f0 : Functor (F w) (F y)}
    {f1 : Functor (F x) (F y)} {f2 : Functor (F y) (F z)}
    {f3 : Functor (F w) (F x)} {f4 : Functor (F x) (F z)}
    {f5 : Functor (F w) (F z)} {n : f5 <~=~> (f4 o f3)%functor}
    {n0 : f4 <~=~> (f2 o f1)%functor} {n1 : f0 <~=~> (f1 o f3)%functor}
    {n2 : f <~=~> (f2 o f0)%functor}.

  Lemma p_composition_of_coherent_iso_for_rewrite__isisomorphism_helper'
  : @ IsIsomorphism
      [_, _] _ _
      (n2 ^-1 o (f2 oL n1 ^-1 o (associator_1 f2 f1 f3 o (n0 oR f3 o n))))%natural_transformation.
  Proof.
    unshelve eapply isisomorphism_compose2.
    - unshelve eapply isisomorphism_inverse.
    - unshelve eapply isisomorphism_compose2.
      eapply iso_whisker_l; eapply isisomorphism_inverse.
  Defined.

  Definition p_composition_of_coherent_iso_for_rewrite__isisomorphism_helper
    := Eval hnf in p_composition_of_coherent_iso_for_rewrite__isisomorphism_helper'.
  Let inv := Eval simpl in @ morphism_inverse _ _ _ _ p_composition_of_coherent_iso_for_rewrite__isisomorphism_helper.

  Definition p_composition_of_coherent_iso_for_rewrite__isisomorphism_helper__to_inverse
             X
             (H' : X = @ Build_Isomorphic [_, _] _ _ _ p_composition_of_coherent_iso_for_rewrite__isisomorphism_helper)
  : @ morphism_inverse _ _ _ _ X = inv.
  Proof.
    pose (ap (fun i => @ morphism_inverse _ _ _ _ (@ isisomorphism_isomorphic _ _ _ i)) H') as k.
    Time etransitivity; [ exact k | ]; reflexivity. (* 0.071 in trunk, 0.206 s in HoTT/coq, 0.024 in 8.4pl3 *)
    Undo.
    Time etransitivity; [ exact k | ]; match goal with |- ?a = ?b => exact (@ idpath _ b) end. (* 0.994 s in trunk, 0.25s in HoTT/coq, 0.024 in 8.4pl3 *)
    Undo.
    Time etransitivity; [ exact k | ]; match goal with |- ?a = ?b => exact (@ idpath _ a) end. (* 13.224 s in trunk, 2.071 s in HoTT/coq, 0.136 in 8.4pl3,  *)
```

Comment author: @gares

Admit used to make an (opaque) axiom, now it create a "match a_hidden_proof_of_false with end" that does not seem to be that
bigger (yes you have a copy of the type in the return clause, but
that should not cause a slow conversion problem).


Comment author: @Zimmi48

What is the current status of this?


If this is a performance bug, I am not sure it really makes sense to have a corresponding test in `test-suite/bugs/opened`. This made my (unrelated, I think) PR fail on AppVeyor: https://ci.appveyor.com/project/coq/coq/build/master~897.
@JasonGross Should we close this bug?
I believe this should be closed.
