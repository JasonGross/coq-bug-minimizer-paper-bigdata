[{"url":"https://api.github.com/repos/coq/coq/issues/comments/337557853","html_url":"https://github.com/coq/coq/issues/5738#issuecomment-337557853","issue_url":"https://api.github.com/repos/coq/coq/issues/5738","id":337557853,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU1Nzg1Mw==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2017-09-18T18:02:55Z","updated_at":"2020-08-31T19:13:51Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\r\n\r\n```\r\nDelimit Scope a_scope with a.\r\nDelimit Scope b_scope with b.\r\nNotation \"({ x })\" := x%a (only printing) : b_scope.\r\nNotation \"--\" := plus (only printing) : a_scope.\r\nNotation \"---\" := minus (only printing) : a_scope.\r\nOpen Scope b_scope.\r\nCheck plus. (* --%a *)\r\n```\r\nI'd like to see instead `({ -- })`.\r\n\r\nThe rule for this would be that, if you would print <expr>%A_scope, look to see \r\nif you can find a chain of single-identifier notations from A_scope to any of \r\nthe scopes open in the present scope stack (starting with the one on top/most \r\nrecently opened/innermost), and if you can, use those notations to print things.\r\n\r\nThis would be for handling things like \r\nhttps://github.com/PrincetonUniversity/VST/blob/e96282d6bdb2e0fe874b10bb96e8fc008e03b21e/compcert/cfrontend/PrintClight.ml#L235-L236\r\n\r\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337557853/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337557854","html_url":"https://github.com/coq/coq/issues/5738#issuecomment-337557854","issue_url":"https://api.github.com/repos/coq/coq/issues/5738","id":337557854,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU1Nzg1NA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2017-09-18T18:23:01Z","updated_at":"2017-10-18T11:16:55Z","author_association":"CONTRIBUTOR","body":"Comment author: @herbelin\n\nSomehow, PR#982 (https://github.com/coq/coq/pull/982) adds something similar for subentries. There is a new notion of \"entry_coercion\" which are used to switch from an entry to another when the right-hand side is a simple variable.\n\nProbably you could do what you'd like with this new mechanism, putting \"--\" in a subentry so that using the \"--\" notation forces the insertion of the \"({ })\" coercion (see example at https://github.com/coq/coq/pull/982#issuecomment-325397431).\n\nMaybe it could be done also for scopes. The relevant code is between \"constrextern.ml\" and \"notation.ml\", around the function \"availability_of_entry_coercion\", which could be aware not only of subentries but also of scopes...\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337557854/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]