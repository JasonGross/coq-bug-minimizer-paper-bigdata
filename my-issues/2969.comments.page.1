[{"url":"https://api.github.com/repos/coq/coq/issues/comments/337513432","html_url":"https://github.com/coq/coq/issues/2969#issuecomment-337513432","issue_url":"https://api.github.com/repos/coq/coq/issues/2969","id":337513432,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxMzQzMg==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2013-01-29T04:51:08Z","updated_at":"2017-10-18T09:00:44Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nThe following code produces \"Toplevel input, characters 0-5: Anomaly: type_of: variable x unbound. Please report.\" on the last [admit]\n\n    Set Implicit Arguments.\n    Local Close Scope nat_scope.\n    Local Open Scope type_scope.\n\n    Local Ltac inst_1 :=\n      match goal with | [ |- appcontext[?E] ] => is_evar E;\n                                                let H := fresh in\n                                                first [ assert (H : E = (fun xyz => (fst (fst xyz), (snd (fst xyz), snd xyz)))) by reflexivity\n                                                      | assert (H : E = (fun xyz => ((fst xyz, fst (snd xyz)), snd (snd xyz)))) by reflexivity ];\n                                                  clear H\n      end.\n\n    Local Ltac inst_2 :=\n      try ((instantiate (1 := (fun _ xyz => (fst (fst xyz), (snd (fst xyz), snd xyz)))))\n             || (instantiate (1 := (fun _ xyz => ((fst xyz, fst (snd xyz)), snd (snd xyz)))))).\n\n    Ltac evar_evar_Type t :=\n      let T := fresh in evar (T : Type); evar (t : T); subst T.\n\n    Goal  {NaturalIsomorphism_Transformation\n           : {ComponentsOf'\n              : forall c : Type * Type * Type,\n                  fst (fst c) * snd (fst c) * snd c ->\n                  fst (fst c) * (snd (fst c) * snd c) &\n                                                      forall (s d : Type * Type * Type)\n                                                             (m : (fst (fst s) -> fst (fst d)) * (snd (fst s) -> snd (fst d)) *\n                                                                  (snd s -> snd d)),\n                                                        (fun x : fst (fst s) * snd (fst s) * snd s =>\n                                                           ComponentsOf' d\n                                                                         (fst (fst m) (fst (fst x)), snd (fst m) (snd (fst x)),\n                                                                          snd m (snd x))) =\n                                                        (fun x : fst (fst s) * snd (fst s) * snd s =>\n                                                           (fst (fst m) (fst (ComponentsOf' s x)),\n                                                            (snd (fst m) (fst (snd (ComponentsOf' s x))),\n                                                             snd m (snd (snd (ComponentsOf' s x))))))} &\n                                                                                                       forall x : Type * Type * Type,\n                                                                                                         {Inverse\n                                                                                                          : fst (fst x) * (snd (fst x) * snd x) ->\n                                                                                                            fst (fst x) * snd (fst x) * snd x |\n                                                                                                          (fun x0 : fst (fst x) * snd (fst x) * snd x =>\n                                                                                                             Inverse (projT1 NaturalIsomorphism_Transformation x x0)) =\n                                                                                                          (fun x0 : fst (fst x) * snd (fst x) * snd x => x0) /\\\n                                                                                                          (fun x0 : fst (fst x) * (snd (fst x) * snd x) =>\n                                                                                                             projT1 NaturalIsomorphism_Transformation x (Inverse x0)) =\n                                                                                                          (fun x0 : fst (fst x) * (snd (fst x) * snd x) => x0)}}.\n    repeat esplit; try\n                     match goal with | [ |- appcontext[?E] ] => is_evar E;\n                                                               match type of E with\n                                                                 | sigT ?P =>\n                                                                   let A := fresh in\n                                                                   let B := fresh in\n                                                                   let H := fresh in\n                                                                   evar_evar_Type A;\n                                                                     evar_evar_Type B;\n                                                                     assert (H : E = existT P A B) by reflexivity;\n                                                                     clear H\n                                                               end\n                     end;\n    simpl in *;\n    repeat (inst_2 || inst_1); instantiate; simpl;\n    repeat match goal with | [ H := _ |- _ ] => subst H end;\n    repeat match goal with | [ H : prod _ _ |- _ ] => destruct H; simpl in * end.\n    admit.\n    admit.\n    Grab Existential Variables.\n    admit.\n\n\nSorry that it's a bit long.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337513432/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337513433","html_url":"https://github.com/coq/coq/issues/2969#issuecomment-337513433","issue_url":"https://api.github.com/repos/coq/coq/issues/2969","id":337513433,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxMzQzMw==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2013-01-29T18:21:55Z","updated_at":"2017-10-18T09:00:44Z","author_association":"CONTRIBUTOR","body":"Comment author: @herbelin\n\nBug was related to the new proof engine. It is fixed in trunk and v8.4. Thanks for reporting.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337513433/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]