[{"url":"https://api.github.com/repos/coq/coq/issues/comments/337526944","html_url":"https://github.com/coq/coq/issues/3783#issuecomment-337526944","issue_url":"https://api.github.com/repos/coq/coq/issues/3783","id":337526944,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyNjk0NA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-10-28T22:49:50Z","updated_at":"2017-10-18T09:39:45Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nFixpoint exp (n : nat) (T : Set)\n  := match n with\n       | 0 => T\n       | S n' => exp n' (T * T)\n     end.\nDefinition big := Eval compute in exp 19 nat.\nModule NonPrim.\n  Unset Primitive Projections.\n  Record sigT {A} (P : A -> Type) := existT { projT1 : A ; projT2 : P projT1 }.\n  Definition x : sigT (fun x => x).\n  Proof.\n    exists big; admit.\n  Defined.\n  Goal True.\n    pose ((fun y => y = y) (projT1 _ x)) as y.\n    Time cbv beta in y. (* 0s *)\n    admit.\n  Defined.\nEnd NonPrim.\nModule Prim.\n  Set Primitive Projections.\n  Record sigT {A} (P : A -> Type) := existT { projT1 : A ; projT2 : P projT1 }.\n  Definition x : sigT (fun x => x).\n  Proof.\n    exists big; admit.\n  Defined.\n  Goal True.\n    pose ((fun y => y = y) (projT1 _ x)) as y.\n    Timeout 1 cbv beta in y. (* takes around 2s.  Grows with the value passed to [exp] above *)\n    admit.\n  Defined.\nEnd Prim.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337526944/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337526945","html_url":"https://github.com/coq/coq/issues/3783#issuecomment-337526945","issue_url":"https://api.github.com/repos/coq/coq/issues/3783","id":337526945,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyNjk0NQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-11-01T13:51:49Z","updated_at":"2017-10-18T09:39:45Z","author_association":"CONTRIBUTOR","body":"Comment author: @mattam82\n\nIt's not exactly cbv beta, it's the fact that results of cbv etc... are checked using kernel conversion (with full reduction/unfolding) which currently uses a strategy where constants are always unfolded before projections in projection vs constant problems. That's a quite deep problem, and it seems to become even worse with eta-conversion. For example, if I change the strategy to do more \"first-order\" unification of p.c1 and p.c2, starting with the comparison of c1 and c2 instead of reducing one or the other projection application (which in this example results in x appearing at the head and being expanded) then we get a different explosion in Comma/Dual.v. Even if we avoided the check at each cbv/simpl etc, no doubt we would still get the same problem at Qed time. I'll write up what the current strategy exactly is w.r.t. projections and eta so we can see if we could modify it/parameterize it. Of course, reduction is confluent so in the end it is just the time and space behavior of conversion that can change.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337526945/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337526946","html_url":"https://github.com/coq/coq/issues/3783#issuecomment-337526946","issue_url":"https://api.github.com/repos/coq/coq/issues/3783","id":337526946,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyNjk0Ng==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-11-02T07:09:38Z","updated_at":"2017-10-18T09:39:45Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nWhy aren't beta-redexes checked before unfolding?  (How does doing first-order unification help here?)\n\nAlso, both Comma/Dual.v and hit/V.v were reasonably fast with trunk from a month ago (and now V.v takes > 20 hours if I turn on primitive projections).\n\nI'll bisect the following script with https://github.com/JasonGross/coq-bisect to see if I can figure out what changed things:\n\n(* -*- coq-prog-args: (\"-emacs\" \"-nois\" \"-boot\") -*- *)\nAxiom admit : forall {T}, T.\nInductive nat := O | S (_ : nat).\nRecord prod A B := pair { fst : A ; snd : B }.\nFixpoint exp (n : nat) (T : Set) := match n with O => T | S n' => exp n' (prod T T) end.\nReserved Notation \"x = y\" (at level 70, no associativity).\nInductive eq {A} (x : A) : forall _ : A, Prop := eq_refl : x = x where \"x = y\" := (@ eq _ x y).\nDefinition plus_nine n := S (S (S (S (S (S (S (S (S n)))))))).\nDefinition big := Eval compute in exp (plus_nine (plus_nine (S O))) nat.\nModule NonPrim.\n  Unset Primitive Projections.\n  Record sigT {A} (P : forall _ : A, Type) := existT { projT1 : A ; projT2 : P projT1 }.\n  Definition x : sigT (fun x => x) := existT _ _ big admit.\n  Goal Set.\n    pose ((fun y => y = y) (projT1 _ x)) as y.\n    Time cbv beta in y. (* 0s *)\n    exact admit.\n  Defined.\nEnd NonPrim.\nModule Prim.\n  Set Primitive Projections.\n  Record sigT {A} (P : forall _ : A, Type) := existT { projT1 : A ; projT2 : P projT1 }.\n  Definition x : sigT (fun x => x) := existT _ _ big admit.\n  Goal Set.\n    pose ((fun y => y = y) (projT1 _ x)) as y.\n    Timeout 1 cbv beta in y. (* takes around 2s.  Grows with the value passed to [exp] above *)\n    exact admit.\n  Defined.\nEnd Prim.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337526946/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337526947","html_url":"https://github.com/coq/coq/issues/3783#issuecomment-337526947","issue_url":"https://api.github.com/repos/coq/coq/issues/3783","id":337526947,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyNjk0Nw==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-11-02T09:20:45Z","updated_at":"2017-10-18T09:39:45Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\ngit bisect says:\n\n1556c6b8f77d16814ff1c53fb14fc9b06574ec4b is the first bad commit\ncommit 1556c6b8f77d16814ff1c53fb14fc9b06574ec4b\nAuthor: Matthieu Sozeau <matthieu.sozeau@ inria.fr>\nDate:   Fri Oct 24 17:35:05 2014 +0200\n\n    Remove an ununsed pattern and commented code in the kernel.\n    Reestablish completeness in conversion when Opaque primitive\n    projections are used.\n\n:040000 040000 47a8ece84bcde7124180137c527451f7db0f4658 ab7e9a5fa57c5613f6fe0213b2402e2da0a82234 M      kernel\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337526947/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337526948","html_url":"https://github.com/coq/coq/issues/3783#issuecomment-337526948","issue_url":"https://api.github.com/repos/coq/coq/issues/3783","id":337526948,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyNjk0OA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-11-04T20:42:19Z","updated_at":"2017-10-18T09:39:45Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nI'm confused by 1556c6b8f77d16814ff1c53fb14fc9b06574ec4b being the cause, and have a few questions:\n(1) The code you added should never be triggered in this case, right, because first both terms are put in whnf, at which point they should both be syntactically equal, and a constant should never be compared against a projection\n\n(2) What is FFlex?\n\n(3) Is there a way to get a debug trace on the unification algorithm when [cbv beta] is called?\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337526948/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337526950","html_url":"https://github.com/coq/coq/issues/3783#issuecomment-337526950","issue_url":"https://api.github.com/repos/coq/coq/issues/3783","id":337526950,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyNjk1MA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-11-04T20:46:39Z","updated_at":"2017-10-18T09:39:45Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nI've checked manually, and it's definitely 1556c6b8f77d16814ff1c53fb14fc9b06574ec4b.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337526950/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337526951","html_url":"https://github.com/coq/coq/issues/3783#issuecomment-337526951","issue_url":"https://api.github.com/repos/coq/coq/issues/3783","id":337526951,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyNjk1MQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2015-01-13T01:51:27Z","updated_at":"2017-10-18T09:39:46Z","author_association":"CONTRIBUTOR","body":"Comment author: @mattam82\n\nThis particular behavior is fixed, avoiding unfolding of constants as much as possible, still a documentation of the reduction rules with their priority is in order.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337526951/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]