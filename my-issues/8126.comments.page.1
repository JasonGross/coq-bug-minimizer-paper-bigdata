[{"url":"https://api.github.com/repos/coq/coq/issues/comments/407357344","html_url":"https://github.com/coq/coq/issues/8126#issuecomment-407357344","issue_url":"https://api.github.com/repos/coq/coq/issues/8126","id":407357344,"node_id":"MDEyOklzc3VlQ29tbWVudDQwNzM1NzM0NA==","user":{"login":"herbelin","id":460771,"node_id":"MDQ6VXNlcjQ2MDc3MQ==","avatar_url":"https://avatars.githubusercontent.com/u/460771?v=4","gravatar_id":"","url":"https://api.github.com/users/herbelin","html_url":"https://github.com/herbelin","followers_url":"https://api.github.com/users/herbelin/followers","following_url":"https://api.github.com/users/herbelin/following{/other_user}","gists_url":"https://api.github.com/users/herbelin/gists{/gist_id}","starred_url":"https://api.github.com/users/herbelin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/herbelin/subscriptions","organizations_url":"https://api.github.com/users/herbelin/orgs","repos_url":"https://api.github.com/users/herbelin/repos","events_url":"https://api.github.com/users/herbelin/events{/privacy}","received_events_url":"https://api.github.com/users/herbelin/received_events","type":"User","site_admin":false},"created_at":"2018-07-24T10:21:10Z","updated_at":"2018-07-24T10:21:10Z","author_association":"MEMBER","body":"Fixed in #8133.\r\n\r\nFor the record, note that there is a special treatment of toplevel `@` in notations. Assume that `f` has implicit arguments `x`, `y` and an other argument `z`. If I do `Notation g := @f`, then `g t` shall be interpreted as `(@f) t` (*), i.e. with the implicit arguments `x` of `f` deactivated. If I do `Notation g := (@f t)`, then `g u` shall be interpreted instead as `f (x:=t) u` (**) with `u` taking the place of `z`, not as `(@f t) u` where `u` would have taken the place of `y`. The empirical reason for (*) is that this allows notations hiding the need for a `@`. The empirical reason for (**) is that this allows to have notations providing part of the implicit arguments and keep taking into account the other implicit arguments and scopes of `f`.\r\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/407357344/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/407467295","html_url":"https://github.com/coq/coq/issues/8126#issuecomment-407467295","issue_url":"https://api.github.com/repos/coq/coq/issues/8126","id":407467295,"node_id":"MDEyOklzc3VlQ29tbWVudDQwNzQ2NzI5NQ==","user":{"login":"JasonGross","id":396076,"node_id":"MDQ6VXNlcjM5NjA3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/396076?v=4","gravatar_id":"","url":"https://api.github.com/users/JasonGross","html_url":"https://github.com/JasonGross","followers_url":"https://api.github.com/users/JasonGross/followers","following_url":"https://api.github.com/users/JasonGross/following{/other_user}","gists_url":"https://api.github.com/users/JasonGross/gists{/gist_id}","starred_url":"https://api.github.com/users/JasonGross/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JasonGross/subscriptions","organizations_url":"https://api.github.com/users/JasonGross/orgs","repos_url":"https://api.github.com/users/JasonGross/repos","events_url":"https://api.github.com/users/JasonGross/events{/privacy}","received_events_url":"https://api.github.com/users/JasonGross/received_events","type":"User","site_admin":false},"created_at":"2018-07-24T16:23:55Z","updated_at":"2018-07-24T16:24:32Z","author_association":"MEMBER","body":"Thanks!\r\n\r\nAnd huh, I had noticed both of those behaviors before, and even made use of (\\*\\*).  I think I also assumed (\\*\\*) extended to nested notations, i.e., that if I have\r\n```coq\r\nAxiom f : forall {x y z w : nat}, nat.\r\nNotation g := (@f 0).\r\nNotation h := (@g 1).\r\nNotation i := (@h 2).\r\nNotation j := (@f 0 1 2).\r\n```\r\nThen `i` and `j` would be the same.  I think my model is that notations can have implicit argument status separate from the underlying definition.","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/407467295/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]