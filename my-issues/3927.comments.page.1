[{"url":"https://api.github.com/repos/coq/coq/issues/comments/337529324","html_url":"https://github.com/coq/coq/issues/3927#issuecomment-337529324","issue_url":"https://api.github.com/repos/coq/coq/issues/3927","id":337529324,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyOTMyNA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2015-01-17T07:03:10Z","updated_at":"2017-11-01T06:31:45Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\r\n\r\nI would like a variant or extension of `Axiom` that allows me to take advantage of the fact that definitional equality is decidable in Coq's internals, to extend an axiom with judgmental reduction rules.\r\n\r\nFor example, I'd like to say\r\n```coq\r\nAxiom functional_extensionality_dep\r\n  : forall {A P} (f g : forall x : A, P x), (forall x, f x = g x) -> f = g.\r\n\r\nDeclare Reduction forall A P f, @functional_extensionality_dep A P f f (fun x => eq_refl)\r\n   := eq_refl.\r\n```\r\nThese rules would presumably be subject to the restriction that they require no higher-order unification, that they are well-typed (i.e., the axiom application and the term have the same type), that the axiom be in the head position after binders/quantification, and, perhaps, some kind of syntactic non-overlapping condition (e.g., they must differ by constructors in one of the arguments, or they must have different constructors-or-non-reducing-axioms) or some kind of unification condition.  (Use case: axiomatize and alternative path elimination principle that reduces on both refl and univalence.)  Alternatively, the reduction declaration could come with a warning that typechecking might diverge in the presence of these, and then these restrictions could be lifted.\r\n\r\nPresumably, these would be forbidden in `Module Type`s, or checked, or something.\r\n\r\nUse cases involve functional extensionality, univalence, and higher inductive types with better computation properties, proof irrelevance that computes in more cases, etc.\r\n\r\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337529324/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/863308741","html_url":"https://github.com/coq/coq/issues/3927#issuecomment-863308741","issue_url":"https://api.github.com/repos/coq/coq/issues/3927","id":863308741,"node_id":"MDEyOklzc3VlQ29tbWVudDg2MzMwODc0MQ==","user":{"login":"JasonGross","id":396076,"node_id":"MDQ6VXNlcjM5NjA3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/396076?v=4","gravatar_id":"","url":"https://api.github.com/users/JasonGross","html_url":"https://github.com/JasonGross","followers_url":"https://api.github.com/users/JasonGross/followers","following_url":"https://api.github.com/users/JasonGross/following{/other_user}","gists_url":"https://api.github.com/users/JasonGross/gists{/gist_id}","starred_url":"https://api.github.com/users/JasonGross/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JasonGross/subscriptions","organizations_url":"https://api.github.com/users/JasonGross/orgs","repos_url":"https://api.github.com/users/JasonGross/repos","events_url":"https://api.github.com/users/JasonGross/events{/privacy}","received_events_url":"https://api.github.com/users/JasonGross/received_events","type":"User","site_admin":false},"created_at":"2021-06-17T14:53:13Z","updated_at":"2021-06-17T14:53:13Z","author_association":"MEMBER","body":"See also https://github.com/coq/ceps/pull/50","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/863308741/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]