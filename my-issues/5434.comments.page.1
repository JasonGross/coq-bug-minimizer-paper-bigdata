[{"url":"https://api.github.com/repos/coq/coq/issues/comments/337552547","html_url":"https://github.com/coq/coq/issues/5434#issuecomment-337552547","issue_url":"https://api.github.com/repos/coq/coq/issues/5434","id":337552547,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU1MjU0Nw==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2017-04-01T21:45:23Z","updated_at":"2017-10-18T10:58:27Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nDefinition mul (a b : nat * nat) : nat * nat\n:= Eval vm_compute in\n    let (x, y) := a in\n    let (z, w) := b in\n    (x, w).\nGoal forall a (x : nat * nat * (nat * nat)),\n    a = mul (fst x) (snd x).\n  clear.\n  intros a x.\n  cbv beta iota delta [mul].\n  let e := lazymatch goal with\n           | |- ?R ?LHS ?RHS => RHS\n           | |- forall x, ?R (@ ?LHS x) (@ ?RHS x) => RHS\n           end in\n  let e := lazymatch e with\n           | match ?ev with pair a b => @ ?e a b end\n             => e\n           end in\n  pose e as E.\n  lazymatch eval cbv [E] in E with\n  | (fun x : ?T => ?C) => idtac\n  end. (* Anomaly: File \"pretyping/constr_matching.ml\", line 115, characters \n15-21: Assertion failed. Please\nreport at http://coq.inria.fr/bugs/. *)\n\n  \n\nLine 115 is the assert in:\n\nlet rec extract_bound_aux k accu frels ctx = match ctx with\n| [] -> accu\n| (na1, na2, _) :: ctx ->\n  if Int.Set.mem k frels then\n    begin match na1 with\n    | Name id ->\n      let () = assert (match na2 with Anonymous -> false | Name _ -> true) in\n      let () = if Id.Set.mem id accu then raise PatternMatchingFailure in\n      extract_bound_aux (k + 1) (Id.Set.add id accu) frels ctx\n    | Anonymous -> raise PatternMatchingFailure\n    end\n  else extract_bound_aux (k + 1) accu frels ctx\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337552547/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337552550","html_url":"https://github.com/coq/coq/issues/5434#issuecomment-337552550","issue_url":"https://api.github.com/repos/coq/coq/issues/5434","id":337552550,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU1MjU1MA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2017-04-01T21:48:41Z","updated_at":"2017-10-18T10:58:27Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nNote that replacing [vm_compute] with [compute] makes it go through.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337552550/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337552551","html_url":"https://github.com/coq/coq/issues/5434#issuecomment-337552551","issue_url":"https://api.github.com/repos/coq/coq/issues/5434","id":337552551,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU1MjU1MQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2017-04-03T17:03:07Z","updated_at":"2017-10-18T10:58:27Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nI can also trigger this with only [refine]/[apply], without [vm_compute], so I \nthink the assertion is just bogus.  See \nhttps://github.com/JasonGross/fiat-crypto/commit/af8c7f89ec794b687f04de1b023e7777b2b3c034.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337552551/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337552553","html_url":"https://github.com/coq/coq/issues/5434#issuecomment-337552553","issue_url":"https://api.github.com/repos/coq/coq/issues/5434","id":337552553,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU1MjU1Mw==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2017-06-15T17:40:22Z","updated_at":"2017-10-18T10:58:27Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nHere's a much smaller, more self-contained example.  I think it almost-clearly \ndemonstrates what the issue is: when the name of a particular binder is chosen \nby Coq, the assertion fails.\n\n(* File reduced by coq-bug-finder from original input, then from 402 lines to \n11 lines, then from 319 lines to 12 lines, then from 62 lines to 14 lines, then \nfrom 30 lines to 14 lines *)\n(* coqc version 8.6 (June 2017) compiled on Jun 15 2017 12:8:43 with OCaml \n4.02.3\n   coqtop version jgross-Leopard-WS:/home/jgross/Downloads/coq/coq-v8.6,(HEAD \ndetached from 7e992fa) (ce1e1dba837ad6e2c79ff7e531b5e3adea3cd327) *)\n\nGlobal Set Asymmetric Patterns.\n\nDefinition proj2_sig_map {A} {P Q : A -> Prop} (f : forall a, P a -> Q a) (x : \n@ sig A P) : @ sig A Q\n  := let 'exist a p := x in exist Q a (f a p).\nGoal forall (feBW' : Type) (g : Prop -> Prop) (f' : feBW' -> Prop), {a0 : feBW' \n| g True = g (f' a0)}.\n  clear; intros.\n  apply (fun f => proj2_sig_map (fun _ p => f_equal f p)).\n  lazymatch goal with\n  | [ |- sig (fun a : ?A => ?P) ]\n    => idtac\n  end. (* Anomaly: File \"pretyping/constr_matching.ml\", line 154, characters \n15-21: Assertion failed. Please report at\nhttp://coq.inria.fr/bugs/. *)\n\nHere's an even more clear version:\nGlobal Set Asymmetric Patterns.\n\nDefinition proj2_sig_map {A} {P Q : A -> Prop} (f : forall a, P a -> Q a) (x : \n@ sig A P) : @ sig A Q\n  := let 'exist a p := x in exist Q a (f a p).\nAxioms (feBW' : Type) (g : Prop -> Prop) (f' : feBW' -> Prop).\nDefinition foo := @ proj2_sig_map feBW' (fun _ (* H *) => True = f' _) (fun H => \ng True = g (f' H))\n                                 (fun (a : feBW') (p : (fun H : feBW' => True = \nf' H) a) => @ f_equal Prop Prop g True (f' a) p).\nGoal True.\n  lazymatch type of foo with\n  | sig (fun a : ?A => ?P) -> _\n    => idtac\n  end.\n\nIf \"_ (* H *)\" is replaced with \"H\", then the anomaly goes away.\n\nIs there an easy fix for this?\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337552553/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337552555","html_url":"https://github.com/coq/coq/issues/5434#issuecomment-337552555","issue_url":"https://api.github.com/repos/coq/coq/issues/5434","id":337552555,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU1MjU1NQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2017-06-15T19:48:26Z","updated_at":"2017-10-18T10:58:28Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nNote that this assertion failure was original an anomaly (Unnamed bound \nvariable) until PMP changed it into an assertion failure at \nhttps://github.com/coq/coq/commit/4659847d5fbe2ec119d224dbc68939249d1d6c30 \n(\"Code cleaning in Matching\", from May 2013).  The anomaly dates back to the \noriginal support for open terms that Hugo added in \nhttps://github.com/coq/coq/commit/c3d45696c271df086c39488d8a86fd2b60ec8132 \n(\"Added support for Ltac-matching terms with variables bound in the pattern\", \nJun 2010).  From Paul's investigations, removing the assert allows my example \nto go through, but doesn't fix this example (\"Variable P should be bound to a \nterm but is bound to a constr_under_binders\")\n\nGlobal Set Asymmetric Patterns.\n\nDefinition proj2_sig_map {A} {P Q : A -> Prop} (f : forall a, P a -> Q a) (x :  \n@ sig A P) : @ sig A Q\n  := let 'exist a p := x in exist Q a (f a p).\nAxioms (feBW' : Type) (g : Prop -> Prop) (f' : feBW' -> Prop).\nDefinition foo := @ proj2_sig_map feBW' (fun _ (* H *) => True = f' _) (fun H => \n g True = g (f' H))\n                                 (fun (a : feBW') (p : (fun H : feBW' => True = \n f' H) a) => @ f_equal Prop Prop g True (f' a) p).\nGoal True.\n  lazymatch type of foo with\n  | sig (fun a : ?A => ?P) -> _\n    => pose (fun a : A => a = a /\\ P = P)\n  end.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337552555/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337552556","html_url":"https://github.com/coq/coq/issues/5434#issuecomment-337552556","issue_url":"https://api.github.com/repos/coq/coq/issues/5434","id":337552556,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU1MjU1Ng==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2017-06-19T06:14:34Z","updated_at":"2017-10-18T10:58:28Z","author_association":"CONTRIBUTOR","body":"Comment author: @herbelin\n\nI introduced this warning to track anonymous dependent variables, and, one source  of such anonymous dependent variables is unification, as an evar is allowed to be dependent on an anonymous variable (see e.g. Jason's example).\n\nI see three possible solutions:\n\n- We forbid existential variables to be dependent on variables explicitly written as anonymous.\n  Advantages:\n  - This gives a way to control which variables are allowed to occur in the instance of an evar.\n  Disadvantages:\n  - Not necessarily natural to write explicitly a name for a variable which occurs only invisibly in inferred arguments.\n  - Break of compatibility.\n\n- We name a posteriori dependent variables which the user did not name. For that, we need to do it late, after evars are resolved. The cost is a priori one pass through the whole term.\n\n- We accept dependent anonymous variables in terms (as we actually do de facto). Removing the assert in ltac pattern-matching is indeed not enough: we also need to rename such anonymous dependent variables on the fly. A possible fix in this direction is available as PR [BZ#811](https://github.com/coq/coq/issues?q=is%3Aissue%20%22Original%20bug%20ID%3A%20BZ%23811%22).\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337552556/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337552557","html_url":"https://github.com/coq/coq/issues/5434#issuecomment-337552557","issue_url":"https://api.github.com/repos/coq/coq/issues/5434","id":337552557,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU1MjU1Nw==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2017-09-15T08:27:06Z","updated_at":"2017-10-18T10:58:28Z","author_association":"CONTRIBUTOR","body":"Comment author: @Zimmi48\n\nPR [BZ#811](https://github.com/coq/coq/issues?q=is%3Aissue%20%22Original%20bug%20ID%3A%20BZ%23811%22) merged.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337552557/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]