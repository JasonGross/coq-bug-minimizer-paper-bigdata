[{"url":"https://api.github.com/repos/coq/coq/issues/comments/337513575","html_url":"https://github.com/coq/coq/issues/2980#issuecomment-337513575","issue_url":"https://api.github.com/repos/coq/coq/issues/2980","id":337513575,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxMzU3NQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2013-02-04T15:45:59Z","updated_at":"2017-10-18T09:01:11Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nThe code\n\nDefinition Foo (obj : Type) (Morphism' : obj -> obj -> Type)\n           (Identity' : forall o : obj, Morphism' o o)\n           (Compose' : forall s d d' : obj,\n                         Morphism' d d' -> Morphism' s d -> Morphism' s d') :\n  (forall (a b : obj) (f : Morphism' a b),\n     Compose' a b b (Identity' b) f = f)\n  -> True := fun _ => I.\n\nSet Printing All.\nCheck (@ Foo Type\n            (fun s d => s -> d)\n            (fun _ => (fun x => x))\n            (fun _ _ _ f g => (fun x => f (g x)))\n            (fun _ _ f => eq_refl)).\n\ninforms me that \n\nError: In environment\nT : Type\nT0 : Type\nf : T -> T0\nThe term \"@ eq_refl ?21 ?22\" has type \"@ eq ?21 ?22 ?22\"\n while it is expected to have type \"@ eq (T -> T0) (fun x : T => f x) f\".\n\nHowever, if the following [Check] goes through fine:\n\nCheck (@ Foo Type\n            (fun s d => s -> d)\n            (fun _ => (fun x => x))\n            (fun _ _ _ f g => (fun x => f (g x)))\n            (fun _ _ f => eq_refl : (fun x => f x) = f)).\n\n\nIt would be nice if, before giving an \"the term $foo has type $bar while it is expected to have type $baz\" error message, Coq first did the equivalent of trying to replace [$foo] with [$foo : $baz] (possibly only if [$baz] has no existentials, but preferably in all cases).  There might need to be a check to make sure that doing this didn't result in loops.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337513575/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337513577","html_url":"https://github.com/coq/coq/issues/2980#issuecomment-337513577","issue_url":"https://api.github.com/repos/coq/coq/issues/2980","id":337513577,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxMzU3Nw==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2013-02-07T22:31:14Z","updated_at":"2017-10-18T09:01:11Z","author_association":"CONTRIBUTOR","body":"Comment author: @pirbo\n\nUnification has been made much more eta compatible in trunk. Your example works there. But sorry, it won't be backport in v8.4.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337513577/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]