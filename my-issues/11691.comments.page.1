[{"url":"https://api.github.com/repos/coq/coq/issues/comments/598855074","html_url":"https://github.com/coq/coq/issues/11691#issuecomment-598855074","issue_url":"https://api.github.com/repos/coq/coq/issues/11691","id":598855074,"node_id":"MDEyOklzc3VlQ29tbWVudDU5ODg1NTA3NA==","user":{"login":"JasonGross","id":396076,"node_id":"MDQ6VXNlcjM5NjA3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/396076?v=4","gravatar_id":"","url":"https://api.github.com/users/JasonGross","html_url":"https://github.com/JasonGross","followers_url":"https://api.github.com/users/JasonGross/followers","following_url":"https://api.github.com/users/JasonGross/following{/other_user}","gists_url":"https://api.github.com/users/JasonGross/gists{/gist_id}","starred_url":"https://api.github.com/users/JasonGross/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JasonGross/subscriptions","organizations_url":"https://api.github.com/users/JasonGross/orgs","repos_url":"https://api.github.com/users/JasonGross/repos","events_url":"https://api.github.com/users/JasonGross/events{/privacy}","received_events_url":"https://api.github.com/users/JasonGross/received_events","type":"User","site_admin":false},"created_at":"2020-03-13T18:23:11Z","updated_at":"2020-03-13T18:23:22Z","author_association":"MEMBER","body":"I suggest the more verbose but more accurate error message \"hypothesis to clear is used in the conclusion (maybe indirectly) or is a section variable contained in the body of a definition which is used in a hypothesis (maybe indirectly)\"","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/598855074/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/598863282","html_url":"https://github.com/coq/coq/issues/11691#issuecomment-598863282","issue_url":"https://api.github.com/repos/coq/coq/issues/11691","id":598863282,"node_id":"MDEyOklzc3VlQ29tbWVudDU5ODg2MzI4Mg==","user":{"login":"JasonGross","id":396076,"node_id":"MDQ6VXNlcjM5NjA3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/396076?v=4","gravatar_id":"","url":"https://api.github.com/users/JasonGross","html_url":"https://github.com/JasonGross","followers_url":"https://api.github.com/users/JasonGross/followers","following_url":"https://api.github.com/users/JasonGross/following{/other_user}","gists_url":"https://api.github.com/users/JasonGross/gists{/gist_id}","starred_url":"https://api.github.com/users/JasonGross/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JasonGross/subscriptions","organizations_url":"https://api.github.com/users/JasonGross/orgs","repos_url":"https://api.github.com/users/JasonGross/repos","events_url":"https://api.github.com/users/JasonGross/events{/privacy}","received_events_url":"https://api.github.com/users/JasonGross/received_events","type":"User","site_admin":false},"created_at":"2020-03-13T18:44:37Z","updated_at":"2020-03-13T18:44:37Z","author_association":"MEMBER","body":"Note that this is a version of `clear dependent` that does not suffer from this issue.  It's significantly more complicated to understand, though, and probably harder to maintain.  Not sure if it's worth having this rather than exposing a primitive from OCaml of `depends_on x y`.\r\n\r\n```coq\r\nTactic Notation \"clear\" \"dependent\" hyp(h) :=\r\n  let clear_all :=\r\n      clear; (* clear fails to clear section variables *)\r\n      repeat match goal with H : _ |- _ => clear H end in\r\n  let needs_clearing H :=\r\n      let v :=\r\n          constr:(ltac:(clear_all;\r\n                        (* assert that [h] still exists *)\r\n                        match goal with\r\n                        | [ H' : _ |- _ ] => constr_eq H' h\r\n                        end;\r\n                        exact eq_refl)\r\n                  : H = H) in\r\n      idtac in\r\n  clear h ||\r\n  (repeat match goal with\r\n          | [ H : _ |- _ ] => needs_clearing H; clear H\r\n          end) ||\r\n  fail \"hypothesis to clear is used in the conclusion (maybe indirectly)\".\r\n```\r\n\r\nNote that this version suffers from neither #11689 nor #11692.","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/598863282/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/598921038","html_url":"https://github.com/coq/coq/issues/11691#issuecomment-598921038","issue_url":"https://api.github.com/repos/coq/coq/issues/11691","id":598921038,"node_id":"MDEyOklzc3VlQ29tbWVudDU5ODkyMTAzOA==","user":{"login":"herbelin","id":460771,"node_id":"MDQ6VXNlcjQ2MDc3MQ==","avatar_url":"https://avatars.githubusercontent.com/u/460771?v=4","gravatar_id":"","url":"https://api.github.com/users/herbelin","html_url":"https://github.com/herbelin","followers_url":"https://api.github.com/users/herbelin/followers","following_url":"https://api.github.com/users/herbelin/following{/other_user}","gists_url":"https://api.github.com/users/herbelin/gists{/gist_id}","starred_url":"https://api.github.com/users/herbelin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/herbelin/subscriptions","organizations_url":"https://api.github.com/users/herbelin/orgs","repos_url":"https://api.github.com/users/herbelin/repos","events_url":"https://api.github.com/users/herbelin/events{/privacy}","received_events_url":"https://api.github.com/users/herbelin/received_events","type":"User","site_admin":false},"created_at":"2020-03-13T21:33:13Z","updated_at":"2020-03-13T21:33:13Z","author_association":"MEMBER","body":"It is indeed not-easy-to-understand code.\r\n\r\nMorally, in pseudo-code, wouldn't we like something like that:\r\n```\r\nTactic Notation \"clear\" \"dependent\" hyp(h) :=\r\n  let l := map_hyps_from_left (fun decl l =>\r\n    let H := name decl in\r\n    if eq_constr H h || exists_list (dependent_of_restricting_evar decl) l then H::l\r\n    else l) nil in\r\n  clear l.\r\n```\r\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/598921038/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/598926663","html_url":"https://github.com/coq/coq/issues/11691#issuecomment-598926663","issue_url":"https://api.github.com/repos/coq/coq/issues/11691","id":598926663,"node_id":"MDEyOklzc3VlQ29tbWVudDU5ODkyNjY2Mw==","user":{"login":"JasonGross","id":396076,"node_id":"MDQ6VXNlcjM5NjA3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/396076?v=4","gravatar_id":"","url":"https://api.github.com/users/JasonGross","html_url":"https://github.com/JasonGross","followers_url":"https://api.github.com/users/JasonGross/followers","following_url":"https://api.github.com/users/JasonGross/following{/other_user}","gists_url":"https://api.github.com/users/JasonGross/gists{/gist_id}","starred_url":"https://api.github.com/users/JasonGross/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JasonGross/subscriptions","organizations_url":"https://api.github.com/users/JasonGross/orgs","repos_url":"https://api.github.com/users/JasonGross/repos","events_url":"https://api.github.com/users/JasonGross/events{/privacy}","received_events_url":"https://api.github.com/users/JasonGross/received_events","type":"User","site_admin":false},"created_at":"2020-03-13T21:50:25Z","updated_at":"2020-03-13T21:50:25Z","author_association":"MEMBER","body":"Yes, that looks roughly right to me.  But mapping hypotheses like that is only accessible in Ltac2, and AFAIK, `dependent_of_restricting_evar` can only be defined in OCaml (unless you want to pull a hack like my `needs_clearing` tactic).  (I'm not sure exactly what `exists_list` is supposed to do, but the right thing to do there is something like \"does this decl depend on anything in this list\".)","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/598926663/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/598946676","html_url":"https://github.com/coq/coq/issues/11691#issuecomment-598946676","issue_url":"https://api.github.com/repos/coq/coq/issues/11691","id":598946676,"node_id":"MDEyOklzc3VlQ29tbWVudDU5ODk0NjY3Ng==","user":{"login":"herbelin","id":460771,"node_id":"MDQ6VXNlcjQ2MDc3MQ==","avatar_url":"https://avatars.githubusercontent.com/u/460771?v=4","gravatar_id":"","url":"https://api.github.com/users/herbelin","html_url":"https://github.com/herbelin","followers_url":"https://api.github.com/users/herbelin/followers","following_url":"https://api.github.com/users/herbelin/following{/other_user}","gists_url":"https://api.github.com/users/herbelin/gists{/gist_id}","starred_url":"https://api.github.com/users/herbelin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/herbelin/subscriptions","organizations_url":"https://api.github.com/users/herbelin/orgs","repos_url":"https://api.github.com/users/herbelin/repos","events_url":"https://api.github.com/users/herbelin/events{/privacy}","received_events_url":"https://api.github.com/users/herbelin/received_events","type":"User","site_admin":false},"created_at":"2020-03-13T22:10:13Z","updated_at":"2020-03-13T22:10:13Z","author_association":"MEMBER","body":"Actually, this is also a question for @ppedrot: how to write an intelligible and efficient Ltac2 code for such a definition.\r\n\r\nBy `dependent_of_restricting_evar`, I meant a function with two arguments `H` and `decl`, with a side-effect, which answers true if `H` occurs in the body or type of `decl` excepting evar arguments, and false otherwise, restricting on the fly the evars so that they do not depend on `H` (this is what `clear dependent` does). As for `exists_list`, I mean the equivalent of OCaml's `List.exists`","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/598946676/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/598968610","html_url":"https://github.com/coq/coq/issues/11691#issuecomment-598968610","issue_url":"https://api.github.com/repos/coq/coq/issues/11691","id":598968610,"node_id":"MDEyOklzc3VlQ29tbWVudDU5ODk2ODYxMA==","user":{"login":"JasonGross","id":396076,"node_id":"MDQ6VXNlcjM5NjA3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/396076?v=4","gravatar_id":"","url":"https://api.github.com/users/JasonGross","html_url":"https://github.com/JasonGross","followers_url":"https://api.github.com/users/JasonGross/followers","following_url":"https://api.github.com/users/JasonGross/following{/other_user}","gists_url":"https://api.github.com/users/JasonGross/gists{/gist_id}","starred_url":"https://api.github.com/users/JasonGross/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JasonGross/subscriptions","organizations_url":"https://api.github.com/users/JasonGross/orgs","repos_url":"https://api.github.com/users/JasonGross/repos","events_url":"https://api.github.com/users/JasonGross/events{/privacy}","received_events_url":"https://api.github.com/users/JasonGross/received_events","type":"User","site_admin":false},"created_at":"2020-03-13T23:13:55Z","updated_at":"2020-03-13T23:13:55Z","author_association":"MEMBER","body":"In that case, yes, I think that is the efficient version of the current tactic in Ltac2.  Does `dependent_of_restricting_evar` compute transitive dependencies, looking inside of section definitions?  If not, then it is not sufficient to handle the example I gave in the initial comment of this issue.","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/598968610/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]