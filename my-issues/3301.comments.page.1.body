Comment author: @ppedrot

That may be a bit violent. Matthieu, any thoughts?


Comment author: @JasonGross

I agree that it would be a bit violent.  Getting rid of the "projection is not applied to enough arguments" (and instead eta-expanding on the fly when needed) on [apply proj] would help.


Comment author: @mattam82

This won't happen for 8.5 as we're aiming at compatibility. The test-suite file for this bug now correctly fails to define a projection allowing to derive Hurkens paradox.


Comment author: @JasonGross

That test suite file should be for 3300, I think.  I have an outstanding pull request that, among other things, renames the file.


I'd like to reopen this issue moving forward.  Is it a possibility for 8.8 or 8.9? (@mattam82 @ppedrot )
I tried that at some point, and IIRC there was a lot of issues related to the naming of hypotheses generated by tactics like destruct. Can we fix this by providing some compatibility layer, I don't really know...
Perhaps we should first merge Hugo's patch to warn about autogenerated names, fix the warnings, and then fix this.  Alternatively, we can do something stupid like
```
Module Prod.
  Record prod A B := pair { a : A ; b : B }.
End Prod.
Notation prod := Prod.prod.
Notation fst := Prod.a.
Notation snd := Prod.b.
```
...
About names generated by `destruct`, I have a branch somewhere giving more control on names, but I was waiting for unifall first since @mattam82 had anyway some changes to do on destruct for unifall. But maybe, I can resuscitate this branch anf think at it independently of unifall.

If I remember correctly, one of the incompatibilities was also with `intros`, which facing a `let '(x,y) := c in ...` stops to be blocked since the latter expands to `let  x := fst c in let y := snd c in ...` with primitive projections.
