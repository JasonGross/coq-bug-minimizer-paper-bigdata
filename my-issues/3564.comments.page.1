[{"url":"https://api.github.com/repos/coq/coq/issues/comments/337523212","html_url":"https://github.com/coq/coq/issues/3564#issuecomment-337523212","issue_url":"https://api.github.com/repos/coq/coq/issues/3564","id":337523212,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyMzIxMg==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-09-01T23:27:03Z","updated_at":"2017-10-18T09:29:08Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nAxiom T : forall {A : Type} (B : Type -> Type), Type.\nCheck forall (x : @ T Set (fun a => a -> a)) (y : @ T nat (fun b => b -> b)), x = y.\n(* The term \"y\" has type \"T (fun b : Type => b -> b)\" while it is expected to have type \"T (fun a : Type => a -> a)\". *)\n\nIt should print the implicit parameter to [T] automatically, as it does in \n\nCheck forall (x : @ T Set (fun a => a -> a)) (y : @ T nat (fun a => a -> a)), x = y. (* The term \"y\" has type \"@ T nat (fun a : Type => a -> a)\" while it is expected to have type \"@ T Type0 (fun a : Type => a -> a)\". *)\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337523212/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337523215","html_url":"https://github.com/coq/coq/issues/3564#issuecomment-337523215","issue_url":"https://api.github.com/repos/coq/coq/issues/3564","id":337523215,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyMzIxNQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-09-02T08:44:18Z","updated_at":"2017-10-18T09:29:08Z","author_association":"CONTRIBUTOR","body":"Comment author: @aspiwack\n\nThis is a good idea, but a bit involved (because the relevant type [constr_expr] is pretty large). I will try and think of a way to deal with this with minimum fuss.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337523215/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337523216","html_url":"https://github.com/coq/coq/issues/3564#issuecomment-337523216","issue_url":"https://api.github.com/repos/coq/coq/issues/3564","id":337523216,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyMzIxNg==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-09-02T12:17:10Z","updated_at":"2017-10-18T09:29:08Z","author_association":"CONTRIBUTOR","body":"Comment author: @ppedrot\n\nI think this is not that difficult. The one thing to do is to adapt the [constr_expr_eq] function to handle alpha-conversion. An easy way to do so is to introduce a map relating bound variables at each side. I'll have a look.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337523216/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337523218","html_url":"https://github.com/coq/coq/issues/3564#issuecomment-337523218","issue_url":"https://api.github.com/repos/coq/coq/issues/3564","id":337523218,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyMzIxOA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-09-02T14:07:09Z","updated_at":"2017-10-18T09:29:09Z","author_association":"CONTRIBUTOR","body":"Comment author: @aspiwack\n\nActually, this is a bit simplistic (you would actually need two permutations (as in the nominal thingies) and some freshness information). Also, I've discussed with Hugo earlier, and just chaning constr_expr_eq would actually change the semantics of intuition (!!) a little (though probably not something which would actually appear anywhere in the known universe, but you never know).\n\nSince I wrote the above I've actually come up with a way to have two such function, one syntactic and the other up to alpha with minimum fuss. Don't beat me though: it involves monads (internally). If you are not on it, I'll have it done in a few hours.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337523218/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337523221","html_url":"https://github.com/coq/coq/issues/3564#issuecomment-337523221","issue_url":"https://api.github.com/repos/coq/coq/issues/3564","id":337523221,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyMzIyMQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-09-02T15:01:00Z","updated_at":"2017-10-18T09:29:09Z","author_association":"CONTRIBUTOR","body":"Comment author: @ppedrot\n\nNo, please proceed then.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337523221/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337523222","html_url":"https://github.com/coq/coq/issues/3564#issuecomment-337523222","issue_url":"https://api.github.com/repos/coq/coq/issues/3564","id":337523222,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyMzIyMg==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-09-02T15:04:37Z","updated_at":"2017-10-18T09:29:09Z","author_association":"CONTRIBUTOR","body":"Comment author: @ppedrot\n\nHow would that change the semantics of intuition by the way? I had a quick look at the code, and the constr_expr_eq would only possibly change the externalization of constrs; but I don't see where this would matter for tauto/intuition...\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337523222/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337523225","html_url":"https://github.com/coq/coq/issues/3564#issuecomment-337523225","issue_url":"https://api.github.com/repos/coq/coq/issues/3564","id":337523225,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyMzIyNQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-09-02T15:28:59Z","updated_at":"2017-10-18T09:29:09Z","author_association":"CONTRIBUTOR","body":"Comment author: @aspiwack\n\nActually, it would probably not cause a problem because of a bug :p .\n\nThe trick is that externalisation is used by the \"with\" bindings. When you say \"u with (A:=x)\", [u] is externalised and the name \"A\" is taken from the externalisation (it's important for hypotheses in a goal, in particular, so that the binders name are indeed those you see).\n\nSo take the following script (which does not work, but I would call this a bug).\n\nDefinition F (X:Type) : Type := X+nat.\nParameter P : forall (x y:forall A, F A), Prop.\n\nGoal forall (x:forall A, F A) (y:forall B,F B), P x y.\nProof.\n  intros x y.\n  induction y with (B:=bool).\n\nIn externalisation, [constr_expr_eq] is used to decide when binders are to be printed independently or as a sequence of identifier of the same type. If [constr_expr_eq] was up to alpha, then the goal would be printed [forall (x y:forall A, F A), P x y]. Then you should have to use [induction y with (A:=bool) instead].\n\nTricky!\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337523225/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337523226","html_url":"https://github.com/coq/coq/issues/3564#issuecomment-337523226","issue_url":"https://api.github.com/repos/coq/coq/issues/3564","id":337523226,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyMzIyNg==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-09-02T15:32:43Z","updated_at":"2017-10-18T09:29:09Z","author_association":"CONTRIBUTOR","body":"Comment author: @ppedrot\n\nLord have mercy.\n\nWe are we to fix the whole with_bindings mess? This code is utterly false and buggy, from the awkward manipulation of metas to the trick you describe... It should be ported to evars somehow, and with a sketch of semantics...\n\nAnd I never liked this bug^W feature anyway!\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337523226/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337523227","html_url":"https://github.com/coq/coq/issues/3564#issuecomment-337523227","issue_url":"https://api.github.com/repos/coq/coq/issues/3564","id":337523227,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyMzIyNw==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-09-02T15:37:33Z","updated_at":"2017-10-18T09:29:09Z","author_association":"CONTRIBUTOR","body":"Comment author: @aspiwack\n\nActually, the semantics is quite simple (and a priori unrelated to metas, though I still had one issue when using it in my constructor experiment). Maybe the documentation is lacking, though.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337523227/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337523228","html_url":"https://github.com/coq/coq/issues/3564#issuecomment-337523228","issue_url":"https://api.github.com/repos/coq/coq/issues/3564","id":337523228,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyMzIyOA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-09-02T15:40:27Z","updated_at":"2017-10-18T09:29:10Z","author_association":"CONTRIBUTOR","body":"Comment author: @ppedrot\n\nHum, quite sure that is is buggy, for I had looked at this some time ago. The way binder names are retrieved is peculiar to say the least: it browse through the evarmap looking for metas whose optional associated name corresponds to the binder. This results in a somewhat unpredictable (or at least unspecified) behaviour when a term has two binders with the same name...\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337523228/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337523229","html_url":"https://github.com/coq/coq/issues/3564#issuecomment-337523229","issue_url":"https://api.github.com/repos/coq/coq/issues/3564","id":337523229,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyMzIyOQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-09-02T16:18:56Z","updated_at":"2017-10-18T09:29:10Z","author_association":"CONTRIBUTOR","body":"Comment author: @herbelin\n\nBinder names are precisely produced by the printer so that they are all different. The use of Meta is not critical. As Arnaud said, Evar's could be used instead without changes from the user point of view.\n\nThe \"with\" bindings is I think a natural way of phrasing things in mathematical writing.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337523229/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337523230","html_url":"https://github.com/coq/coq/issues/3564#issuecomment-337523230","issue_url":"https://api.github.com/repos/coq/coq/issues/3564","id":337523230,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyMzIzMA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-09-03T15:52:41Z","updated_at":"2017-10-18T09:29:10Z","author_association":"CONTRIBUTOR","body":"Comment author: @aspiwack\n\nAs it happens, my idea was not that good. Because [constr_expr] are really awful.\n\nIf someone is interested the patch is here [ https://github.com/aspiwack/coq/commits/alphaconstrexpr ]. It passes the relation between binders as an effect (no need for monad, contrary to previous statement, as only the identity monad and the state monad are necessary for this implementation, and they both are native to ml. Showing once more, if it was necessary, that effects-and-handler are a largely superior solution than monad).\n\nThe problem is that because the scoping in constr_expr is not easy, I kinda put everything in a state monad, and scopes leak, such that, for instance [(fun a=>a) a] is considered equal to [(fun b=>b) b]. Not ideal.\n\nHugo had a *much* better idea: just erase all name information on the constr before externalisation comparison. I implemented it in 5min top. And it works. And we may want to add more prior manipulations (we could β-reduce too, if that is useful).\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337523230/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]