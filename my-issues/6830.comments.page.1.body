The "critical" label is only for proofs of False :D
I've another question: why does your project have so many files? Last time I've checked, it seemed to me these files are automatically generated.  Can't you aggregate some of them?
WG discussion: @SkySkimmer is going to try to fix, but we don't consider it a blocker.
I was going to look at this today, but won't since I've been unassigned.
@gares  I want to be able to take advantage of parallelism in computing transparent definitions even among subsets of the build.  Fusing the files so that we only have around 500 rather than 6000 would result in a 5x slowdown when building specific curves.
How many CPUs/nodes do you have?
6, or 12 with hyperthreading.  For some curves, each operation takes about an hour to synthesize; it is nice to only have to wait 1 hour for that curve rather than 5-6.
What I don't get is how so many independent filed ended up in the same _CoqProject. I understand that they may share a common set of prerequisites, but still...

In math-comp we have 1 root project file, but also 6 sub projects. They can be compiled as opam packages, and that defines a proper order between them. This splitting was motivated by the question: how do we distribute these files? The all in one option seemed a bit overkill, very few users would need it all, hence the split.
Wouldn't a setup like that work better for you? (I'm still fine to fix the issue in the associated PR)
Of the 6598 .v files tracked by git, 6074 of them are autogenerated files associated to 772 total configurations of 82 different curves.  Note that the autogenerated files have 56640 non-whitespace lines total (4527 unique lines), which amounts to an average of just under 10 lines per file.  The maximum dependency-chain length among the autogenerated files is 4; every curve has a `Synthesis.v` file which depends on a `CurveParameters.v` file which depends on only non-autogenerated files.  Each curve has a number of operation synthesis files (`femul.v`, `feadd.v`, `feopp.v`, `fesub.v`, etc) which depend only on `Synthesis.v`, and each of these has a corresponding `fe*Display.v` file which depends only on the corresponding `fe*.v` file and one additional non-autogenerated file.  Each directory of autogenerated files is completely independent from all other autogenerated directories.

It would be reasonable to split off the 524 non-autogenerated files into a separate project, and have one project of autogenerated files.  But this will still exceed the command line argument limit, most likely.  It seems a bit of a burden to maintain 82 different subprojects, but perhaps you have a notion of project that is lighter-weight than ours?
If these sub-projects are auto-generated too, where is the burden? I mean, you can generate a _CoqProject for each curve, or I'm missing something? And the root makefile can dispatch to the specific curve makefile one (after having built the common part).
At some point you might get into recursive make hell.
No, the depth is 2
