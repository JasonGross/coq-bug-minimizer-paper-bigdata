[{"url":"https://api.github.com/repos/coq/coq/issues/comments/753382597","html_url":"https://github.com/coq/coq/issues/13708#issuecomment-753382597","issue_url":"https://api.github.com/repos/coq/coq/issues/13708","id":753382597,"node_id":"MDEyOklzc3VlQ29tbWVudDc1MzM4MjU5Nw==","user":{"login":"JasonGross","id":396076,"node_id":"MDQ6VXNlcjM5NjA3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/396076?v=4","gravatar_id":"","url":"https://api.github.com/users/JasonGross","html_url":"https://github.com/JasonGross","followers_url":"https://api.github.com/users/JasonGross/followers","following_url":"https://api.github.com/users/JasonGross/following{/other_user}","gists_url":"https://api.github.com/users/JasonGross/gists{/gist_id}","starred_url":"https://api.github.com/users/JasonGross/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JasonGross/subscriptions","organizations_url":"https://api.github.com/users/JasonGross/orgs","repos_url":"https://api.github.com/users/JasonGross/repos","events_url":"https://api.github.com/users/JasonGross/events{/privacy}","received_events_url":"https://api.github.com/users/JasonGross/received_events","type":"User","site_admin":false},"created_at":"2021-01-01T21:08:09Z","updated_at":"2021-01-01T21:08:09Z","author_association":"MEMBER","body":"cc @jfehrle @mattam82 ","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/753382597/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/753382622","html_url":"https://github.com/coq/coq/issues/13708#issuecomment-753382622","issue_url":"https://api.github.com/repos/coq/coq/issues/13708","id":753382622,"node_id":"MDEyOklzc3VlQ29tbWVudDc1MzM4MjYyMg==","user":{"login":"JasonGross","id":396076,"node_id":"MDQ6VXNlcjM5NjA3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/396076?v=4","gravatar_id":"","url":"https://api.github.com/users/JasonGross","html_url":"https://github.com/JasonGross","followers_url":"https://api.github.com/users/JasonGross/followers","following_url":"https://api.github.com/users/JasonGross/following{/other_user}","gists_url":"https://api.github.com/users/JasonGross/gists{/gist_id}","starred_url":"https://api.github.com/users/JasonGross/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JasonGross/subscriptions","organizations_url":"https://api.github.com/users/JasonGross/orgs","repos_url":"https://api.github.com/users/JasonGross/repos","events_url":"https://api.github.com/users/JasonGross/events{/privacy}","received_events_url":"https://api.github.com/users/JasonGross/received_events","type":"User","site_admin":false},"created_at":"2021-01-01T21:08:29Z","updated_at":"2021-01-01T21:08:29Z","author_association":"MEMBER","body":"cc @ppedrot ","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/753382622/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/753383596","html_url":"https://github.com/coq/coq/issues/13708#issuecomment-753383596","issue_url":"https://api.github.com/repos/coq/coq/issues/13708","id":753383596,"node_id":"MDEyOklzc3VlQ29tbWVudDc1MzM4MzU5Ng==","user":{"login":"ppedrot","id":1202327,"node_id":"MDQ6VXNlcjEyMDIzMjc=","avatar_url":"https://avatars.githubusercontent.com/u/1202327?v=4","gravatar_id":"","url":"https://api.github.com/users/ppedrot","html_url":"https://github.com/ppedrot","followers_url":"https://api.github.com/users/ppedrot/followers","following_url":"https://api.github.com/users/ppedrot/following{/other_user}","gists_url":"https://api.github.com/users/ppedrot/gists{/gist_id}","starred_url":"https://api.github.com/users/ppedrot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ppedrot/subscriptions","organizations_url":"https://api.github.com/users/ppedrot/orgs","repos_url":"https://api.github.com/users/ppedrot/repos","events_url":"https://api.github.com/users/ppedrot/events{/privacy}","received_events_url":"https://api.github.com/users/ppedrot/received_events","type":"User","site_admin":false},"created_at":"2021-01-01T21:19:15Z","updated_at":"2021-01-01T21:19:15Z","author_association":"MEMBER","body":"I had a look already at that example, and most of the time is passed in typeclass resolution. To be more precise, the slowdown can be attributed to this line in Class_tactics:\r\n```\r\n    let dep = dep || Proofview.unifiable sigma (Goal.goal gl) gls in\r\n```\r\nDespite a cache, this keeps recomputing evars appearing in the list of hypotheses of the `gls` goals, which ends up costing a lot. The `dep` boolean is used to decide whether the tactic can backtrack. It's a fairly common source of slowness, but your examples are quite extreme in that respect.\r\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/753383596/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/753397443","html_url":"https://github.com/coq/coq/issues/13708#issuecomment-753397443","issue_url":"https://api.github.com/repos/coq/coq/issues/13708","id":753397443,"node_id":"MDEyOklzc3VlQ29tbWVudDc1MzM5NzQ0Mw==","user":{"login":"JasonGross","id":396076,"node_id":"MDQ6VXNlcjM5NjA3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/396076?v=4","gravatar_id":"","url":"https://api.github.com/users/JasonGross","html_url":"https://github.com/JasonGross","followers_url":"https://api.github.com/users/JasonGross/followers","following_url":"https://api.github.com/users/JasonGross/following{/other_user}","gists_url":"https://api.github.com/users/JasonGross/gists{/gist_id}","starred_url":"https://api.github.com/users/JasonGross/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JasonGross/subscriptions","organizations_url":"https://api.github.com/users/JasonGross/orgs","repos_url":"https://api.github.com/users/JasonGross/repos","events_url":"https://api.github.com/users/JasonGross/events{/privacy}","received_events_url":"https://api.github.com/users/JasonGross/received_events","type":"User","site_admin":false},"created_at":"2021-01-01T22:33:22Z","updated_at":"2021-01-01T22:33:22Z","author_association":"MEMBER","body":"@ppedrot Are you sure?  I buy that for `goal_of_size 1` and maybe even `goal_of_size 2`, but I don't see how that can possibly be the dominating factor in exponential growth.  What's the asymptotic you estimate for this factor?\r\n\r\nIn any case, this should not be a bottleneck in these examples because I've set up the typeclass instances so that in fact resolution never backtracks (and should also not exceed a depth of 2 or 3).  Can you make `dep` lazy so that it is only computed at the point where backtracking would actually occur?  Something like (pseudocode)\r\n```ocaml\r\nlet tclLAZY_CONDITIONAL_PLUS (cond : unit -> bool) (tac : tactic) =\r\n  match <split successes of tactic> with\r\n  | nil -> nil\r\n  | success :: rest -> plus success (fun exn -> if cond () then rest exn else tclZERO exn)\r\n```\r\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/753397443/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/753398112","html_url":"https://github.com/coq/coq/issues/13708#issuecomment-753398112","issue_url":"https://api.github.com/repos/coq/coq/issues/13708","id":753398112,"node_id":"MDEyOklzc3VlQ29tbWVudDc1MzM5ODExMg==","user":{"login":"JasonGross","id":396076,"node_id":"MDQ6VXNlcjM5NjA3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/396076?v=4","gravatar_id":"","url":"https://api.github.com/users/JasonGross","html_url":"https://github.com/JasonGross","followers_url":"https://api.github.com/users/JasonGross/followers","following_url":"https://api.github.com/users/JasonGross/following{/other_user}","gists_url":"https://api.github.com/users/JasonGross/gists{/gist_id}","starred_url":"https://api.github.com/users/JasonGross/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JasonGross/subscriptions","organizations_url":"https://api.github.com/users/JasonGross/orgs","repos_url":"https://api.github.com/users/JasonGross/repos","events_url":"https://api.github.com/users/JasonGross/events{/privacy}","received_events_url":"https://api.github.com/users/JasonGross/received_events","type":"User","site_admin":false},"created_at":"2021-01-01T22:35:57Z","updated_at":"2021-01-01T22:35:57Z","author_association":"MEMBER","body":"Actually, hm, maybe what you're saying checks out.  On the example of size 5, it takes about 10 minutes before the code even gets to typeclass search, but then there's about a half-second pause between the success of one TC problem and the \"looking for\" of the next one in a log filled with entries like\r\n```\r\n<infomsg>Debug: 513: looking for (Transitive eq) without backtracking</infomsg>\r\n<infomsg>Debug: 513.1: simple apply @eq_Transitive on (Transitive eq), 0 subgoal(s)</infomsg>\r\n<infomsg>Debug: 514: looking for (Proper (eq ==> eq ==> ?r) Z.mul) with backtracking</infomsg>\r\n<infomsg>Debug: 514.1: simple apply @Proper_instance_12 on (Proper (eq ==> eq ==> ?r) Z.mul), 0 subgoal(s)</infomsg>\r\n```","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/753398112/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/753399312","html_url":"https://github.com/coq/coq/issues/13708#issuecomment-753399312","issue_url":"https://api.github.com/repos/coq/coq/issues/13708","id":753399312,"node_id":"MDEyOklzc3VlQ29tbWVudDc1MzM5OTMxMg==","user":{"login":"JasonGross","id":396076,"node_id":"MDQ6VXNlcjM5NjA3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/396076?v=4","gravatar_id":"","url":"https://api.github.com/users/JasonGross","html_url":"https://github.com/JasonGross","followers_url":"https://api.github.com/users/JasonGross/followers","following_url":"https://api.github.com/users/JasonGross/following{/other_user}","gists_url":"https://api.github.com/users/JasonGross/gists{/gist_id}","starred_url":"https://api.github.com/users/JasonGross/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JasonGross/subscriptions","organizations_url":"https://api.github.com/users/JasonGross/orgs","repos_url":"https://api.github.com/users/JasonGross/repos","events_url":"https://api.github.com/users/JasonGross/events{/privacy}","received_events_url":"https://api.github.com/users/JasonGross/received_events","type":"User","site_admin":false},"created_at":"2021-01-01T22:41:58Z","updated_at":"2021-01-01T22:41:58Z","author_association":"MEMBER","body":"Btw, when looking for `Proper (@eq A ==> @eq B ==> ?r) f` for `f`, `A`, and `B` evar-free, is it ever possible for `?r` to be usefully resolved with a relation mentioning a local variable which does not appear in the terms `f`, `A`, nor `B` and also is not in scope at the time of `setoid_rewrite`?","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/753399312/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/753428185","html_url":"https://github.com/coq/coq/issues/13708#issuecomment-753428185","issue_url":"https://api.github.com/repos/coq/coq/issues/13708","id":753428185,"node_id":"MDEyOklzc3VlQ29tbWVudDc1MzQyODE4NQ==","user":{"login":"jfehrle","id":1253341,"node_id":"MDQ6VXNlcjEyNTMzNDE=","avatar_url":"https://avatars.githubusercontent.com/u/1253341?v=4","gravatar_id":"","url":"https://api.github.com/users/jfehrle","html_url":"https://github.com/jfehrle","followers_url":"https://api.github.com/users/jfehrle/followers","following_url":"https://api.github.com/users/jfehrle/following{/other_user}","gists_url":"https://api.github.com/users/jfehrle/gists{/gist_id}","starred_url":"https://api.github.com/users/jfehrle/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jfehrle/subscriptions","organizations_url":"https://api.github.com/users/jfehrle/orgs","repos_url":"https://api.github.com/users/jfehrle/repos","events_url":"https://api.github.com/users/jfehrle/events{/privacy}","received_events_url":"https://api.github.com/users/jfehrle/received_events","type":"User","site_admin":false},"created_at":"2021-01-02T04:06:06Z","updated_at":"2021-01-02T04:06:06Z","author_association":"CONTRIBUTOR","body":"Jason, how much memory is being used for your test cases?  I.e., after a GC compaction and before Qed.  If memory use is an issue, perhaps it'sthe same issue seen for setoid_rewrite.\r\n\r\n> the slowdown can be attributed to this line in Class_tactics\r\n\r\nHow would that produce exponential behavior?\r\n\r\nI'm interested in helping to fix the various performance problems affecting large automated proofs.  @ppedrot perhaps you would suggest some things for me to look at that would benefit from more tooling/custom analysis routines.  I'm also game to try and figure out possible fixes (e.g. the evar issues in #13576 and #13577).  Of course, I'm a beginner on this part of the code, indeed I don't even know where to find the important algorithms in the source.\r\n\r\nAlso, perhaps it would be helpful to add tactics or commands to display additional performance-related info, such as the number of evars, their total memory use, the total number of evars that are backtracked, the average number of hypotheses in local context, the number of calls/time spent in a few critical algorithms, etc. which might give Jason or others quicker insight into the cause of performance issues.\r\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/753428185/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]