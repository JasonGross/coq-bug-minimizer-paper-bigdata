[{"url":"https://api.github.com/repos/coq/coq/issues/comments/337550278","html_url":"https://github.com/coq/coq/issues/5283#issuecomment-337550278","issue_url":"https://api.github.com/repos/coq/coq/issues/5283","id":337550278,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU1MDI3OA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-12-21T22:59:24Z","updated_at":"2017-10-18T10:50:59Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nDefinition UNIT := unit.\nOpaque UNIT.\nInductive A := B (_ : UNIT).\nScheme Equality for A.\n(* Error:\nUnexpected error during scheme creation: Error:\n                                         Attempt to save an incomplete proof \n(in proof temporary_proof2) *)\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337550278/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337550280","html_url":"https://github.com/coq/coq/issues/5283#issuecomment-337550280","issue_url":"https://api.github.com/repos/coq/coq/issues/5283","id":337550280,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU1MDI4MA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-12-22T20:59:29Z","updated_at":"2017-10-18T10:50:59Z","author_association":"CONTRIBUTOR","body":"Comment author: @herbelin\n\nScheme Equality works for a limited number of types and it is not robust wrt errors. I'm not aware of projects to improve Scheme Equality, so I would be tempted to change the error message into something like:\n\n\"Algorithm to build equality scheme not powerful enough to treat this case.\"\n\nso that it is clear that (at the current time) there is no support for improving the algorithm. Would that be ok?\n\nNote that twice \"decide equality\" as well as \"dde\" in Jonathan Leivent's deptacs do the job for decidability of the equality in this example.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337550280/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337550281","html_url":"https://github.com/coq/coq/issues/5283#issuecomment-337550281","issue_url":"https://api.github.com/repos/coq/coq/issues/5283","id":337550281,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU1MDI4MQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-12-22T21:37:10Z","updated_at":"2017-10-18T10:50:59Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nSure, that seems fine.  It'd be nice to have some indication of what about the case makes it unsupported, though, and I think then these issues should be renamed and recategorized as feature requests rather than being closed (or there should be a new feature request that aggregates all of the cases that Scheme Equality doesn't support, so if someone decides to improve it, they have a helpful list).\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337550281/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337550282","html_url":"https://github.com/coq/coq/issues/5283#issuecomment-337550282","issue_url":"https://api.github.com/repos/coq/coq/issues/5283","id":337550282,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU1MDI4Mg==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-12-23T11:56:34Z","updated_at":"2017-10-18T10:50:59Z","author_association":"CONTRIBUTOR","body":"Comment author: @herbelin\n\nHi Jason,\n\nI quickly took some time yesterday to review the code for _beq schemes. Basically, the current algorithm expects inductive types with parameters of the form\n\nInductive I (A1 ... An : Type) := ...\n\nwhich is very limitating, while we know that _beq schemes can be built by induction on the structure of types (a bit like we can build logical relations by induction on the structure of terms), thus handling, say parameters of types such as \"Type->Type\", or \"nat -> Type\", or dependent parameters, etc., etc.\n\nTo my opinion, the Scheme Equality layout could be reused, but the exact algorithms to build the type of equality schemes and proofs of them should be redone from scratch (in either ocaml with de Bruijn indices, or ocaml with names, or eventually Ltac2 or MetaCoq - but Ltac would probably be too weak for the fine manipulation of terms needed).\n\nSo, if I fully agree that Scheme Equality should be improved, I'm unsure that incremental improvements are possible. To give another example, the beq scheme for prod has type \n\nforall A B : Type, (A -> A -> bool) -> (B -> B -> bool) -> A * B -> A * B -> bool\n\nbut for a correct scalable treatment of dependencies, it should be\n\nforall A, (A -> A -> bool) -> forall B : Type, (B -> B -> bool) -> A * B -> A * B -> bool\n\nin the same way as the scheme for sigT, because of dependencies, can only be of type\n\nforall A, (A -> A -> bool) -> forall B : A -> Type, (forall x1 x2:A, B x1 -> B x2 -> bool) -> {x:A & B x} -> {x:A & B x} -> bool\n\nSimilarly, Scheme Equality would be unable to generate without being rebuilt from scratch the (structural form of the) beq scheme for vector:\n\nRequire Import Bool Vector.\nScheme Equality for nat.\nSection S.\nVariables (A:Type) (eq_A:A->A->bool).\nFixpoint f n1 n2 (v1:Vector.t A n1) (v2:Vector.t A n2) : bool :=\n  nat_beq n1 n2 && \n  match v1, v2 with\n  | nil _, nil _ => true\n  | cons _ a1 n1 v1, cons _ a2 n2 v2 => nat_beq n1 n2 && eq_A a1 a2 && f n1 n2 v1 v2\n  | _, _ => false\n  end.\nEnd S.\n\n\nHugo\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337550282/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337550284","html_url":"https://github.com/coq/coq/issues/5283#issuecomment-337550284","issue_url":"https://api.github.com/repos/coq/coq/issues/5283","id":337550284,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU1MDI4NA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-12-23T14:55:06Z","updated_at":"2017-10-18T10:51:00Z","author_association":"CONTRIBUTOR","body":"Comment author: @silene\n\nI don't understand your point about dependencies. In your example about sigT, one can certainly exchange the arguments B and eq_A. More generally, I cannot imagine a single example where putting all the types first, then all the equality functions, and finally the two arguments to compare, would fail to typecheck.\n\nAlso I am a bit surprised by your function for comparing two vectors. At each call of f, you are performing two calls to nat_beq. Even if one of them is a typo, there is still one left, which causes your vector comparison to have quadratic complexity while it should be linear in the size of vectors. That said, when I tried to implement the comparison function, I had to use inversion to preserve linear complexity. So you might be right that comparing two dependently-typed objects cannot generally be done with linear complexity, but that feels wrong to me.\n\nDefinition f n1 n2 (v1 : Vector.t A n1) : Vector.t A n2 -> bool.\nProof.\ngeneralize (internal_nat_dec_bl n1 n2).\ncase (nat_beq n1 n2) ; [|intros; exact false].\nintros H.\nrewrite <- (H eq_refl).\nclear n2 H.\ninduction v1 as [|h1 n1 v1].\nintros ; exact true.\nintros v2.\ninversion_clear v2 as [|h2 n2 v2'].\nexact (IHv1 v2').\nQed.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337550284/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337550286","html_url":"https://github.com/coq/coq/issues/5283#issuecomment-337550286","issue_url":"https://api.github.com/repos/coq/coq/issues/5283","id":337550286,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU1MDI4Ng==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-12-23T17:44:34Z","updated_at":"2017-10-18T10:51:00Z","author_association":"CONTRIBUTOR","body":"Comment author: @herbelin\n\n(In reply to Guillaume Melquiond from comment [BZ#4](https://github.com/coq/coq/issues?q=is%3Aissue%20%22Original%20bug%20ID%3A%20BZ%234%22))\n> I don't understand your point about dependencies. In your example about\n> sigT, one can certainly exchange the arguments B and eq_A. More generally, I\n> cannot imagine a single example where putting all the types first, then all\n> the equality functions, and finally the two arguments to compare, would fail\n> to typecheck.\n\nYou are right. I don't see examples where the eq_A might be dependent in the interpretation of an argument coming next (on the contrary of the logical relation - or parametricity - translation). Thanks for correcting, the eq_A's can then all come in a second step.\n\n> Also I am a bit surprised by your function for comparing two vectors. At\n> each call of f, you are performing two calls to nat_beq.\n\nI knew I was repeating and even uselessly using calls to nat_beq, since they are implied by the equality of the vectors themselves. I just wanted to write what would a canonical translation give.\n\nTo tell the truth, it is also that I'm not able to clearly say what would be the good criterion to remove these useless calls. It is obviously related to the dependency of a vector in its length. So to able to remove them, one would need an analysis of the unerasable dependencies, which I don't know how to clearly do in a general setting.\n\n> Even if one of them\n> is a typo, there is still one left, which causes your vector comparison to\n> have quadratic complexity while it should be linear in the size of vectors.\n> That said, when I tried to implement the comparison function, I had to use\n> inversion to preserve linear complexity. So you might be right that\n> comparing two dependently-typed objects cannot generally be done with linear\n> complexity, but that feels wrong to me.\n> \n> Definition f n1 n2 (v1 : Vector.t A n1) : Vector.t A n2 -> bool.\n> Proof.\n> generalize (internal_nat_dec_bl n1 n2).\n> case (nat_beq n1 n2) ; [|intros; exact false].\n> intros H.\n> rewrite <- (H eq_refl).\n> clear n2 H.\n> induction v1 as [|h1 n1 v1].\n> intros ; exact true.\n> intros v2.\n> inversion_clear v2 as [|h2 n2 v2'].\n> exact (IHv1 v2').\n> Qed.\n\nI don't think you need so complicated, i.e., I don't think you need to make a detour by internal_nat_dec_bl. Just removing the two calls to nat_beq in what I gave should be enough to get an observationally equivalent comparison function with optimal complexity, no?\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337550286/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337550288","html_url":"https://github.com/coq/coq/issues/5283#issuecomment-337550288","issue_url":"https://api.github.com/repos/coq/coq/issues/5283","id":337550288,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU1MDI4OA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-12-23T18:44:59Z","updated_at":"2017-10-18T10:51:00Z","author_association":"CONTRIBUTOR","body":"Comment author: @silene\n\n> Just removing the two calls to nat_beq in what I gave should be enough to get an observationally equivalent comparison function with optimal complexity, no?\n\nActually, do we even want to have a heterogeneous comparison function? This would give an awful statement for correctness. So if the comparison is homogeneous instead, its definition becomes straightforward. But I still need to use an inversion (or at least an injection) in order to get the proper types for the recursive call, so it is not completely satisfactory.\n\nDefinition f n (v1:Vector.t A n) : Vector.t A n -> bool.\nProof.\ninduction v1 as [|h1 n v1].\nintros _ ; exact true.\nintros v2.\ninversion_clear v2 as [|h2 a v2'].\nexact (IHv1 v2').\nQed.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337550288/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337550289","html_url":"https://github.com/coq/coq/issues/5283#issuecomment-337550289","issue_url":"https://api.github.com/repos/coq/coq/issues/5283","id":337550289,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU1MDI4OQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-12-23T22:14:15Z","updated_at":"2017-10-18T10:51:00Z","author_association":"CONTRIBUTOR","body":"Comment author: @herbelin\n\n(In reply to Guillaume Melquiond from comment [BZ#6](https://github.com/coq/coq/issues?q=is%3Aissue%20%22Original%20bug%20ID%3A%20BZ%236%22))\n> > Just removing the two calls to nat_beq in what I gave should be enough to get an observationally equivalent comparison function with optimal complexity, no?\n> \n> Actually, do we even want to have a heterogeneous comparison function? This\n> would give an awful statement for correctness. So if the comparison is\n> homogeneous instead, its definition becomes straightforward.\n\nOne might want a homogeneous comparison, but I don't know how to get it as part of a general algorithm. In the case of sigT for instance, to compare the pairs (t1,u1) and (t2,u2) where u1:P(t1) and u2:P(t2), the result of the comparison function on t1 and t2 is not informative enough in itself to ensure that t1=t2 and that u1 can be coerced in P(t2) [I'm using the pair notation for existT]. So, I don't see how to avoid having to consider in general heterogeneous comparison functions. I thus inferred by this generality argument that for vectors also, a canonically-generated comparison function would have to be heterogeneous. But maybe some smarter algorithm can be imagined which is able to see that a homogeneous function is possible for vectors. (And on the other side, the homogeneous function derives straighforwardly from the heterogeneous one.)\n\nOtherwise said, inversion is possible below but it might not be available in a more general framework.\n\n> But I still\n> need to use an inversion (or at least an injection) in order to get the\n> proper types for the recursive call, so it is not completely satisfactory.\n> \n> Definition f n (v1:Vector.t A n) : Vector.t A n -> bool.\n> Proof.\n> induction v1 as [|h1 n v1].\n> intros _ ; exact true.\n> intros v2.\n> inversion_clear v2 as [|h2 a v2'].\n> exact (IHv1 v2').\n> Qed.\n\n[PS wrt previous comments: the first \"nat_beq n1 n2\" in my comment 3 does not seem justifiable even from the point of view of a \"canonical\" translation I was claiming to have. So, let's really consider it as a mistake.]\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337550289/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337550291","html_url":"https://github.com/coq/coq/issues/5283#issuecomment-337550291","issue_url":"https://api.github.com/repos/coq/coq/issues/5283","id":337550291,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU1MDI5MQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-12-24T01:57:26Z","updated_at":"2017-10-18T10:51:00Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nIf you do homogenous comparison functions, then, in general, you'll need the correctness lemma for the argument types in the boolean computation function.  (Note that this means that the correctness lemmas will have to be transparent, and that this makes the functions slower in vm_compute.  I'm strongly against this.)\n\nConsider the following type:\nInductive vtree (A : Type) : nat -> Type :=\n| leaf : vtree A 0\n| node : A -> forall x y, vtree A x -> vtree A y -> vtree A (S (x + y)).\n\nIf you get two [vtree A 3], there's no way to know just by types whether they're both make of 0, 2; of 1, 1; or of 2, 0 subtrees.\n\n(I might have said what you said in a different way.  If so, I apologize for the duplication.)\n\nThe only reason a homogenous comparison works for [Vector.t], I think, is that [S] is injective.  Since constructors are injective, you could probably special-case the class of inductives where all type indices are instantiated by a series of constructors, possibly eventually applied to a variable.  Note that you will still need to take in heterogenous comparison functions for any dependently typed non-recursive arguments, as evidenced by your sigT example.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337550291/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337550292","html_url":"https://github.com/coq/coq/issues/5283#issuecomment-337550292","issue_url":"https://api.github.com/repos/coq/coq/issues/5283","id":337550292,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU1MDI5Mg==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-12-24T06:38:12Z","updated_at":"2017-10-18T10:51:00Z","author_association":"CONTRIBUTOR","body":"Comment author: @silene\n\n> One might want a homogeneous comparison, but I don't know how to get it as part of a general algorithm. In the case of sigT for instance, to compare the pairs (t1,u1) and (t2,u2) where u1:P(t1) and u2:P(t2), the result of the comparison function on t1 and t2 is not informative enough in itself to ensure that t1=t2 and that u1 can be coerced in P(t2) [I'm using the pair notation for existT].\n\n> If you do homogenous comparison functions, then, in general, you'll need the correctness lemma for the argument types in the boolean computation function.  (Note that this means that the correctness lemmas will have to be transparent, and that this makes the functions slower in vm_compute.  I'm strongly against this.)\n\nI am wondering whether this issue is just a consequence of the type of the boolean computation function not being rich enough. For instance, with almost the same body as the comparison function, instead of returning a boolean, we could return the following option:\n\n  forall (P : nat -> nat -> Type) n1 n2, P n1 n2 -> option (P n1 n1)\n\nThat said, performing the induction requires creating a closure encapsulating P, so it might well be possible that the cost of the correctness lemma is still there, just interleaved along the other computations. So it seems a good argument for having heterogeneous comparison functions.\n\n> The only reason a homogenous comparison works for [Vector.t], I think, is that [S] is injective.\n\nRegarding injectivity, I have arrived to the same conclusion as you. And since injectivity is not decidable in general (is it?), it means that a general scheme would necessarily need to perform one nat_beq per recursive call for Vector.t (so quadratic complexity). But in fact, I don't really care about it anymore, since it just goes to show once again that Vector.t is the worse way of representing a vector. If one uses instead { l : list A | length l = n }, then one gets linear complexity for the comparison function even with the general scheme.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337550292/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337550293","html_url":"https://github.com/coq/coq/issues/5283#issuecomment-337550293","issue_url":"https://api.github.com/repos/coq/coq/issues/5283","id":337550293,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU1MDI5Mw==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-12-24T07:20:16Z","updated_at":"2017-10-18T10:51:01Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\n> And since injectivity is not decidable in general (is it?)\n\nIn general, no (there's a trivial encoding of the halting problem as injectivity of a function [bool -> bool]), but constructors are always injective.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337550293/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/813044681","html_url":"https://github.com/coq/coq/issues/5283#issuecomment-813044681","issue_url":"https://api.github.com/repos/coq/coq/issues/5283","id":813044681,"node_id":"MDEyOklzc3VlQ29tbWVudDgxMzA0NDY4MQ==","user":{"login":"ejgallego","id":7192257,"node_id":"MDQ6VXNlcjcxOTIyNTc=","avatar_url":"https://avatars.githubusercontent.com/u/7192257?v=4","gravatar_id":"","url":"https://api.github.com/users/ejgallego","html_url":"https://github.com/ejgallego","followers_url":"https://api.github.com/users/ejgallego/followers","following_url":"https://api.github.com/users/ejgallego/following{/other_user}","gists_url":"https://api.github.com/users/ejgallego/gists{/gist_id}","starred_url":"https://api.github.com/users/ejgallego/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ejgallego/subscriptions","organizations_url":"https://api.github.com/users/ejgallego/orgs","repos_url":"https://api.github.com/users/ejgallego/repos","events_url":"https://api.github.com/users/ejgallego/events{/privacy}","received_events_url":"https://api.github.com/users/ejgallego/received_events","type":"User","site_admin":false},"created_at":"2021-04-04T14:40:25Z","updated_at":"2021-04-04T14:40:25Z","author_association":"MEMBER","body":"Original example works now.","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/813044681/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]