[{"url":"https://api.github.com/repos/coq/coq/issues/comments/337521250","html_url":"https://github.com/coq/coq/issues/3447#issuecomment-337521250","issue_url":"https://api.github.com/repos/coq/coq/issues/3447","id":337521250,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyMTI1MA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-07-21T10:06:08Z","updated_at":"2017-10-18T09:23:30Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\n(* -*- mode: coq; coq-prog-args: (\"-emacs\" \"-indices-matter\") -*- *)\n(* File reduced by coq-bug-finder from original input, then from 7372 lines to 539 lines, then from 532 lines to 505 lines *)\nGeneralizable All Variables.\nSet Asymmetric Patterns.\nSet Universe Polymorphism.\nAxiom admit : forall {T}, T.\nArguments projT1 {_ _} _.\nDefinition relation (A : Type) := A -> A -> Type.\nClass Reflexive {A} (R : relation A) := reflexivity : forall x : A, R x x.\nClass Symmetric {A} (R : relation A) := symmetry : forall x y, R x y -> R y x.\nNotation \"( x ; y )\" := (existT _ x y) : fibration_scope.\nOpen Scope fibration_scope.\nNotation pr1 := projT1.\nNotation \"x .1\" := (projT1 x) (at level 3) : fibration_scope.\nNotation \"x .2\" := (projT2 x) (at level 3) : fibration_scope.\nDefinition compose' {A B C : Type} (g : B -> C) (f : A -> B) := fun x => g (f x).\nNotation \"g 'o' f\" := (compose' g f) (at level 40, left associativity) : function_scope.\nOpen Scope function_scope.\nInductive paths {A : Type} (a : A) : A -> Type := idpath : paths a a where \"x = y\" := (@ paths _ x y) : type_scope.\nArguments idpath {A a} , [A] a.\nInstance reflexive_paths {A} : Reflexive (@ paths A) | 0 := @ idpath A.\nDelimit Scope path_scope with path.\nLocal Open Scope path_scope.\nDefinition concat {A : Type} {x y z : A} (p : x = y) (q : y = z) : x = z := match p, q with idpath, idpath => idpath end.\nDefinition inverse {A : Type} {x y : A} (p : x = y) : y = x := match p with idpath => idpath end.\nInstance symmetric_paths {A} : Symmetric (@ paths A) | 0 := @ inverse A.\nNotation \"1\" := idpath : path_scope.\nNotation \"p @  q\" := (concat p q) (at level 20) : path_scope.\nNotation \"p ^\" := (inverse p) (at level 3) : path_scope.\nDefinition transport {A : Type} (P : A -> Type) {x y : A} (p : x = y) (u : P x) : P y := match p with idpath => u end.\nNotation \"p # x\" := (transport _ p x) (right associativity, at level 65, only parsing) : path_scope.\nDefinition ap {A B:Type} (f:A -> B) {x y:A} (p:x = y) : f x = f y := match p with idpath => idpath end.\nDefinition pointwise_paths {A} {P:A->Type} (f g:forall x:A, P x) := forall x:A, f x = g x.\nHint Unfold pointwise_paths : typeclass_instances.\nDefinition apD {A:Type} {B:A->Type} (f:forall a:A, B a) {x y:A} (p:x=y): p # (f x) = f y\n  := match p with idpath => idpath end.\nDefinition Sect {A B : Type} (s : A -> B) (r : B -> A) := forall x : A, r (s x) = x.\nClass IsEquiv {A B : Type} (f : A -> B) := BuildIsEquiv {\n                                               equiv_inv : B -> A ;\n                                               eisretr : Sect equiv_inv f;\n                                               eissect : Sect f equiv_inv;\n                                               eisadj : forall x : A, eisretr (f x) = ap f (eissect x)\n                                             }.\nArguments eisretr {A B} f {_} _.\nArguments eissect {A B} f {_} _.\nArguments eisadj {A B} f {_} _.\nRecord Equiv A B := BuildEquiv { equiv_fun :> A -> B ; equiv_isequiv :> IsEquiv equiv_fun }.\nExisting Instance equiv_isequiv.\nNotation \"A <~> B\" := (Equiv A B) (at level 85) : equiv_scope.\nNotation \"f ^-1\" := (@ equiv_inv _ _ f _) (at level 3) : equiv_scope.\nClass Contr_internal (A : Type) := BuildContr { center : A ; contr : (forall y : A, center = y) }.\nInductive trunc_index : Type :=\n| minus_two : trunc_index\n| trunc_S : trunc_index -> trunc_index.\nFixpoint nat_to_trunc_index (n : nat) : trunc_index\n  := match n with\n       | 0 => trunc_S (trunc_S minus_two)\n       | S n' => trunc_S (nat_to_trunc_index n')\n     end.\nCoercion nat_to_trunc_index : nat >-> trunc_index.\nFixpoint IsTrunc_internal (n : trunc_index) (A : Type) : Type :=\n  match n with\n    | minus_two => Contr_internal A\n    | trunc_S n' => forall (x y : A), IsTrunc_internal n' (x = y)\n  end.\nNotation minus_one:=(trunc_S minus_two).\nClass IsTrunc (n : trunc_index) (A : Type) : Type := Trunc_is_trunc : IsTrunc_internal n A.\nInstance istrunc_paths (A : Type) n `{H : IsTrunc (trunc_S n) A} (x y : A) : IsTrunc n (x = y) := H x y.\nNotation Contr := (IsTrunc minus_two).\nNotation IsHProp := (IsTrunc minus_one).\nNotation IsHSet := (IsTrunc 0).\nDefinition concat_p1 {A : Type} {x y : A} (p : x = y) : p @  1 = p\n  := match p with idpath => idpath end.\n\nDefinition concat_1p {A : Type} {x y : A} (p : x = y) :\n  1 @  p = p\n  :=\n    match p with idpath => 1 end.\n\nDefinition ap_pp {A B : Type} (f : A -> B) {x y z : A} (p : x = y) (q : y = z) :\n  ap f (p @  q) = (ap f p) @  (ap f q)\n  :=\n    match q with\n        idpath =>\n        match p with idpath => 1 end\n    end.\n\nDefinition ap_compose {A B C : Type} (f : A -> B) (g : B -> C) {x y : A} (p : x = y) :\n  ap (g o f) p = ap g (ap f p)\n  :=\n    match p with idpath => 1 end.\n\nDefinition concat_A1p {A : Type} {f : A -> A} (p : forall x, f x = x) {x y : A} (q : x = y) :\n  (ap f q) @  (p y) = (p x) @  q\n  :=\n    match q with\n      | idpath => concat_1p _ @  ((concat_p1 _) ^)\n    end.\n\nAxiom transport_compose : forall {A B} {x y : A} (P : B -> Type) (f : A -> B)\n                                 (p : x = y) (z : P (f x)),\n                            transport (fun x => P (f x)) p z  =  transport P (ap f p) z.\n\nDefinition concat2 {A} {x y z : A} {p p' : x = y} {q q' : y = z} (h : p = p') (h' : q = q')\n: p @  q = p' @  q'\n  := match h, h' with idpath, idpath => 1 end.\n\nNotation \"p @ @  q\" := (concat2 p q)%path (at level 20) : path_scope.\n\nDefinition whiskerL {A : Type} {x y z : A} (p : x = y)\n           {q r : y = z} (h : q = r) : p @  q = p @  r\n  := 1 @ @  h.\n\nDefinition ap02 {A B : Type} (f:A->B) {x y:A} {p q:x=y} (r:p=q) : ap f p = ap f q\n  := match r with idpath => 1 end.\nLocal Open Scope equiv_scope.\n\nInstance isequiv_compose `{IsEquiv A B f} `{IsEquiv B C g}\n: IsEquiv (compose' g f) | 1000\n  := BuildIsEquiv A C (compose' g f)\n                  (compose' f^-1 g^-1)\n                  (fun c => ap g (eisretr f (g^-1 c)) @  eisretr g c)\n                  (fun a => ap (f^-1) (eissect g (f a)) @  eissect f a)\n                  (fun a =>\n                     (whiskerL _ (eisadj g (f a))) @ \n                                                   (ap_pp g _ _)^ @ \n                                                                    ap02 g\n                                                                    ( (concat_A1p (eisretr f) (eissect g (f a)))^ @ \n                                                                                                                    (ap_compose f^-1 f _ @ @  eisadj f a) @ \n                                                                                                                    (ap_pp f _ _)^\n                                                                    ) @ \n                                                                    (ap_compose f g _)^\n                  ).\n\nSection EquivInverse.\n\n  Context `{IsEquiv A B f}.\n\n  Global Instance isequiv_inverse : IsEquiv f^-1 | 10000\n    := BuildIsEquiv B A f^-1 f (eissect f) (eisretr f) admit.\nEnd EquivInverse.\n\nAxiom trunc_equiv : forall `(f : A -> B)\n                           `{IsTrunc n A} `{IsEquiv A B f},\n                      IsTrunc n B.\n\nDefinition trunc_equiv' `(f : A <~> B) {n}\n: IsTrunc n B := admit.\nDefinition path_sigma_uncurried {A : Type} (P : A -> Type) (u v : sigT P)\n           (pq : {p : u.1 = v.1 &  p # u.2 = v.2})\n: u = v\n  := match pq with\n       | existT p q =>\n         match u, v return (forall p0 : (u.1 = v.1), (p0 # u.2 = v.2) -> (u=v)) with\n           | (x;y), (x';y') => fun p1 q1 =>\n                                 match p1 in (_ = x'') return (forall y'', (p1 # y = y'') -> (x;y)=(x'';y'')) with\n                                   | idpath => fun y' q2 =>\n                                                 match q2 in (_ = y'') return (x;y) = (x;y'') with\n                                                   | idpath => 1\n                                                 end\n                                 end y' q1\n         end p q\n     end.\n\nDefinition projT1_path `{P : A -> Type} {u v : sigT P} (p : u = v)\n: u.1 = v.1\n  :=\n    ap (@ projT1 _ _) p.\n\nNotation \"p ..1\" := (projT1_path p) (at level 3) : fibration_scope.\n\nDefinition projT2_path `{P : A -> Type} {u v : sigT P} (p : u = v)\n: p..1 # u.2 = v.2\n  := (transport_compose P (@ projT1 _ _) p u.2)^\n     @  (@ apD {x:A & P x} _ (@ projT2 _ _) _ _ p).\n\nNotation \"p ..2\" := (projT2_path p) (at level 3) : fibration_scope.\n\nAxiom eta_path_sigma_uncurried : forall `{P : A -> Type} {u v : sigT P}\n                                        (p : u = v),\n                                   path_sigma_uncurried _ _ _ (p..1; p..2) = p.\n\nInstance isequiv_path_sigma `{P : A -> Type} {u v : sigT P}\n: IsEquiv (path_sigma_uncurried P u v) | 0.\nAdmitted.\n\nInstance isequiv_pr1_contr {A} {P : A -> Type}\n         `{forall a, Contr (P a)}\n: IsEquiv (@ pr1 A P) | 100.\nAdmitted.\n\nDefinition path_sigma_hprop {A : Type} {P : A -> Type}\n           `{forall x, IsHProp (P x)}\n           (u v : sigT P)\n: u.1 = v.1 -> u = v\n  := path_sigma_uncurried P u v o pr1^-1.\n\nDefinition equiv_path_sigma_hprop {A : Type} {P : A -> Type}\n           {HP : forall a, IsHProp (P a)} (u v : sigT P)\n: (u.1 = v.1) <~> (u = v)\n  := BuildEquiv _ _ (path_sigma_hprop _ _) _.\nSet Implicit Arguments.\n\nDelimit Scope morphism_scope with morphism.\nDelimit Scope category_scope with category.\nDelimit Scope object_scope with object.\n\nRecord PreCategory :=\n  Build_PreCategory' {\n      object :> Type;\n      morphism : object -> object -> Type;\n\n      identity : forall x, morphism x x;\n      compose : forall s d d',\n                  morphism d d'\n                  -> morphism s d\n                  -> morphism s d'\n                              where \"f 'o' g\" := (compose f g);\n\n      associativity : forall x1 x2 x3 x4\n                             (m1 : morphism x1 x2)\n                             (m2 : morphism x2 x3)\n                             (m3 : morphism x3 x4),\n                        (m3 o m2) o m1 = m3 o (m2 o m1);\n\n      associativity_sym : forall x1 x2 x3 x4\n                                 (m1 : morphism x1 x2)\n                                 (m2 : morphism x2 x3)\n                                 (m3 : morphism x3 x4),\n                            m3 o (m2 o m1) = (m3 o m2) o m1;\n\n      left_identity : forall a b (f : morphism a b), identity b o f = f;\n      right_identity : forall a b (f : morphism a b), f o identity a = f;\n\n      identity_identity : forall x, identity x o identity x = identity x;\n\n      trunc_morphism : forall s d, IsHSet (morphism s d)\n    }.\nBind Scope object_scope with object.\nArguments identity [!C%category] x%object : rename.\nArguments compose [!C%category s%object d%object d'%object] m1%morphism m2%morphism : rename.\n\nLocal Infix \"o\" := compose : morphism_scope.\n\nDefinition Build_PreCategory\n           object morphism compose identity\n           associativity left_identity right_identity\n  := @ Build_PreCategory'\n       object\n       morphism\n       compose\n       identity\n       associativity\n       (fun _ _ _ _ _ _ _ => symmetry _ _ (associativity _ _ _ _ _ _ _))\n       left_identity\n       right_identity\n       (fun _ => left_identity _ _ _).\n\nLocal Open Scope category_scope.\nLocal Open Scope morphism_scope.\n\nClass IsIsomorphism {C : PreCategory} {s d} (m : morphism C s d) :=\n  {\n    morphism_inverse : morphism C d s;\n    left_inverse : morphism_inverse o m = identity _;\n    right_inverse : m o morphism_inverse = identity _\n  }.\n\nLocal Notation \"m ^-1\" := (morphism_inverse (m := m)) : morphism_scope.\n\nClass Isomorphic {C : PreCategory} s d :=\n  {\n    morphism_isomorphic :> morphism C s d;\n    isisomorphism_isomorphic :> IsIsomorphism morphism_isomorphic\n  }.\n\nCoercion morphism_isomorphic : Isomorphic >-> morphism.\nCoercion isisomorphism_isomorphic : Isomorphic >-> IsIsomorphism.\n\nLocal Infix \"<~=~>\" := Isomorphic (at level 70, no associativity) : category_scope.\n\nSection iso_equiv_relation.\n  Variable C : PreCategory.\n\n  Global Instance isisomorphism_identity (x : C) : IsIsomorphism (identity x)\n    := {| morphism_inverse := identity x;\n          left_inverse := left_identity C x x (identity x);\n          right_inverse := right_identity C x x (identity x) |}.\n\n  Global Instance isomorphic_refl : Reflexive (@ Isomorphic C)\n    := fun x : C => {| morphism_isomorphic := identity x |}.\n\n  Definition idtoiso (x y : C) (H : x = y) : Isomorphic x y\n    := match H in (_ = y0) return (x <~=~> y0) with\n         | 1%path => reflexivity x\n       end.\nEnd iso_equiv_relation.\n\nNotation IsCategory C := (forall s d : object C, IsEquiv (@ idtoiso C s d)).\n\nNotation isotoid C s d := (@ equiv_inv _ _ (@ idtoiso C s d) _).\n\nDelimit Scope structure_scope with structure.\nDelimit Scope long_structure_scope with long_structure.\nLocal Open Scope structure_scope.\n\nRecord NotionOfStructure (X : PreCategory) :=\n  {\n    structure :> X -> Type;\n    is_structure_homomorphism : forall x y\n                                       (f : morphism X x y)\n                                       (a : structure x) (b : structure y),\n                                  Type;\n    istrunc_is_structure_homomorphism : forall x y a b f,\n                                          IsHProp (@ is_structure_homomorphism x y a b f);\n    is_structure_homomorphism_identity : forall x (a : structure x),\n                                           is_structure_homomorphism (identity x) a a;\n    is_structure_homomorphism_composition : forall x y z\n                                                   (a : structure x)\n                                                   (b : structure y)\n                                                   (c : structure z)\n                                                   (f : morphism X x y)\n                                                   (g : morphism X y z),\n                                              is_structure_homomorphism f a b\n                                              -> is_structure_homomorphism g b c\n                                              -> is_structure_homomorphism (g o f) a c\n  }.\n\nLocal Notation \"a <=_{ x } b\" := (is_structure_homomorphism _ x x (identity x) a b) (at level 70, no associativity) : long_structure_scope.\nLocal Notation \"a <= b\" := (a <=_{ _ } b)%long_structure : structure_scope.\n\nClass IsStandardNotionOfStructure X (P : NotionOfStructure X) :=\n  antisymmetry_structure : forall x (a b : P x),\n                             a <= b -> b <= a -> a = b.\n\nGlobal Instance istrunc_homomorphism_standard_notion_of_structure\n       X P `{@ IsStandardNotionOfStructure X P} x\n: IsHSet (P x).\nAdmitted.\n\nSection precategory.\n\n  Variable X : PreCategory.\n  Variable P : NotionOfStructure X.\n\n  Local Notation object := { x : X & P x }.\n\n  Record morphism_s (xa yb : object) :=\n    { PS_f : morphism X xa.1 yb.1;\n      PS_h : is_structure_homomorphism _ _ _ PS_f xa.2 yb.2 }.\n\n  Axiom issig_morphism : forall (xa yb : object),\n                           { f : morphism X xa.1 yb.1\n                                          & is_structure_homomorphism _ _ _ f xa.2 yb.2 }\n                             <~> morphism_s xa yb.\nEnd precategory.\n\nDefinition precategory_of_structures X (P : NotionOfStructure X) : PreCategory.\nProof.\n  refine (@ Build_PreCategory\n            _\n            (@ morphism_s _ P)\n            (fun xa => {| PS_f := identity xa.1;\n                          PS_h := is_structure_homomorphism_identity _ _ xa.2 |})\n            (fun xa yb zc gi fh => {| PS_f := (PS_f gi) o (PS_f fh);\n                                      PS_h := is_structure_homomorphism_composition _ _ _ _ _ _ _ _ _ (PS_h fh) (PS_h gi) |})\n            _\n            _\n            _\n            (fun s d => trunc_equiv' (issig_morphism P s d)));\n  simpl; admit.\nDefined.\n\nSection sip.\n  Context `{IsCategory X}.\n  Context `{@ IsStandardNotionOfStructure X P}.\n\n  Let StrX := @ precategory_of_structures X P.\n\n  Definition sip_isotoid_helper (xa yb : StrX)\n             (f : xa <~=~> yb)\n  : xa.1 <~=~> yb.1.\n  Proof.\n    exists (PS_f (f : morphism _ _ _)).\n    exists (PS_f f^-1).\n    -\n      exact (ap (@ PS_f _ _ _ _) (@ left_inverse _ _ _ _ f)).\n    -\n      exact (ap (@ PS_f _ _ _ _) (@ right_inverse _ _ _ _ f)).\n  Defined.\n\n  Axiom sip_isotoid_helper_refl : forall (xa : StrX),\n                                    @ sip_isotoid_helper xa xa (reflexivity _) = reflexivity _.\n  Notation \"A <--> B\" := (prod (A -> B) (B -> A)) (at level 90).\n  Axiom sip_helper : forall x y (p : x = y) (a : P x) (b : P y),\n                       transport P p a = b\n                                           <--> (is_structure_homomorphism P _ _ (idtoiso X p) a b *\n                                                 is_structure_homomorphism P _ _ (idtoiso X p)^-1 b a).\n\n  Definition sip_isotoid (xa yb : StrX)\n             (f : xa <~=~> yb)\n  : xa = yb.\n  Proof.\n    refine (path_sigma_uncurried\n              _ _ _\n              (isotoid\n                 X\n                 xa.1\n                 yb.1\n                 (sip_isotoid_helper f);\n               _)).\n    apply sip_helper; simpl.\n    split;\n      lazymatch goal with\n    | [ |- appcontext[idtoiso ?X ((isotoid ?X ?x ?y) ?m)] ]\n      => pose proof (eisretr (@ idtoiso X x y) m) as H';\n        pattern (idtoiso X ((isotoid X x y) m))\n    end;\n    refine (transport _ H'^ _); clear H'; simpl;\n    apply PS_h.\n  Defined.\n\n  Lemma sip_isotoid_refl xa\n  : @ sip_isotoid xa xa (reflexivity _) = reflexivity _.\n  Proof.\n    refine (_ @  eta_path_sigma_uncurried _).\n    refine (ap (path_sigma_uncurried _ _ _) _).\n    apply equiv_path_sigma_hprop.\n    simpl.\n    refine (_ @  eisretr (isotoid X xa.1 xa.1) 1%path).\n    apply ap.\n    solve [ apply sip_isotoid_helper_refl ].\n  Timeout 5 Defined. (* Timeout!; 6.095 s in trunk, 0.6 s in HoTT/coq, 0.2 s in 8.4pl3 *)\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337521250/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337521251","html_url":"https://github.com/coq/coq/issues/3447#issuecomment-337521251","issue_url":"https://api.github.com/repos/coq/coq/issues/3447","id":337521251,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyMTI1MQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-07-21T10:11:05Z","updated_at":"2017-10-18T09:23:30Z","author_association":"CONTRIBUTOR","body":"Comment author: @aspiwack\n\nI gather the problem won't show up with a [Qed] instead in the last line? Such a difference is be quite curious.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337521251/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337521252","html_url":"https://github.com/coq/coq/issues/3447#issuecomment-337521252","issue_url":"https://api.github.com/repos/coq/coq/issues/3447","id":337521252,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyMTI1Mg==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-07-21T10:40:38Z","updated_at":"2017-10-18T09:23:30Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nNo, [Qed] is also slow, about the same speed as [Defined], in both interactive and non-interactive mode.  (My example file simply had [Defined] there.)  This is not the only place that Coq has gotten slower at proof-checking, but I figured it would be easier to minimize a file that went from 6s to 30s than to minimize a file that went from 30s to 2m.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337521252/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337521253","html_url":"https://github.com/coq/coq/issues/3447#issuecomment-337521253","issue_url":"https://api.github.com/repos/coq/coq/issues/3447","id":337521253,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyMTI1Mw==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-07-21T11:34:31Z","updated_at":"2017-10-18T09:23:30Z","author_association":"CONTRIBUTOR","body":"Comment author: @ppedrot\n\nIt does not compile on my machine with the current trunk. I get the following error:\n\nError: Unsatisfied constraints:\nbug.552 <= bug.571\nbug.552 <= Coq.Init.Specif.23\nbug.572 <= bug.571\nbug.572 <= Coq.Init.Specif.22\n (maybe a bugged tactic).\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337521253/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337521256","html_url":"https://github.com/coq/coq/issues/3447#issuecomment-337521256","issue_url":"https://api.github.com/repos/coq/coq/issues/3447","id":337521256,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyMTI1Ng==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-07-21T12:27:38Z","updated_at":"2017-10-18T09:23:30Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nThat is https://coq.inria.fr/bugs/show_bug.cgi?id=3446.  You need to pass -indices-matter to get this to give the error I mentioned.  (Sorry for not saying that explicitly, and only noting it via \"(* -*- mode: coq; coq-prog-args: (\"-emacs\" \"-indices-matter\") -*- *)\".)\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337521256/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337521259","html_url":"https://github.com/coq/coq/issues/3447#issuecomment-337521259","issue_url":"https://api.github.com/repos/coq/coq/issues/3447","id":337521259,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyMTI1OQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-07-21T12:31:01Z","updated_at":"2017-10-18T09:23:31Z","author_association":"CONTRIBUTOR","body":"Comment author: @ppedrot\n\nA bit of profiling indicates that most of the time is due to the hashconsing of terms.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337521259/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337521260","html_url":"https://github.com/coq/coq/issues/3447#issuecomment-337521260","issue_url":"https://api.github.com/repos/coq/coq/issues/3447","id":337521260,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyMTI2MA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-07-21T12:49:36Z","updated_at":"2017-10-18T09:23:31Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nWould it be useful to have another 2-3 examples of what might be the same slowness, to see if they come from ~the same place?  (I can give you ~10,000 line-long examples almost immediately, or ~500-2000 line examples if you give me a few days.)\n\nDo you have any ideas for improving this, or working around it?\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337521260/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337521263","html_url":"https://github.com/coq/coq/issues/3447#issuecomment-337521263","issue_url":"https://api.github.com/repos/coq/coq/issues/3447","id":337521263,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyMTI2Mw==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-07-21T12:52:18Z","updated_at":"2017-10-18T09:23:31Z","author_association":"CONTRIBUTOR","body":"Comment author: @ppedrot\n\nI can at least check that this comes from the same place, but providing you with a patch, or even an explication is something else!\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337521263/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337521265","html_url":"https://github.com/coq/coq/issues/3447#issuecomment-337521265","issue_url":"https://api.github.com/repos/coq/coq/issues/3447","id":337521265,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyMTI2NQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-07-21T13:29:12Z","updated_at":"2017-10-18T09:23:31Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nCreated attachment 492\nFile that also has slow defineds\n\nIs hashconsing slower when the original hashes come from multiple files?  For the next example I'm working, it takes half as much time to compile the file with all of its dependencies inlined than it does to compile when it's dependencies are all pre-compiled as separate files.\n\nAnyway, I've attached the example.  It's a bit long, at 7300 lines, and I doubt it'll compile with 8.4.  It needs -indices-matter for trunk.  I've annotated the lines that got slower (between HoTT/coq and trunk) with \"(* FIXME: Got Slower: <HoTT/coq time> -> <trunk time> *)\".  Though the times might not match with what you see, because things sped up by a factor of ~5 when I inlined the file-dependencies into the same file.\n\n> Attached file: [bug_exp_laws_4_functors_01.v](https://coq.inria.fr/bugfiles/attachment.cgi?id=492) (application/octet-stream, 288539 bytes)\n> Description:   File that also has slow defineds\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337521265/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337521267","html_url":"https://github.com/coq/coq/issues/3447#issuecomment-337521267","issue_url":"https://api.github.com/repos/coq/coq/issues/3447","id":337521267,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyMTI2Nw==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-07-21T13:36:43Z","updated_at":"2017-10-18T09:23:31Z","author_association":"CONTRIBUTOR","body":"Comment author: @ppedrot\n\nSeems like most of the hashconsing is due to Vars.subst_univs_level_constr. I don't know if this is the real culprit though.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337521267/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337521270","html_url":"https://github.com/coq/coq/issues/3447#issuecomment-337521270","issue_url":"https://api.github.com/repos/coq/coq/issues/3447","id":337521270,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyMTI3MA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-07-21T15:57:55Z","updated_at":"2017-10-18T09:23:32Z","author_association":"CONTRIBUTOR","body":"Comment author: @mattam82\n\nA main part of the problem was due to a bug in eauto fixing some universe variables as globals when they should be local, making some lemmas in Structure/Core monomorphic when they ought to be polymorphic, and resulting in a more complex unification problem in the non-inlined code. Fixing this gives a factor of 2 improvement (fix is in trunk now). Another problem I spotted is that [refine] is doing something different in trunk, in particular applying a reduction tactic to the subgoals resulting from refinement (in hyps and concl), resulting in another slowdown because of additional conversions. That doesn't account for the whole blowup though. Profiling also indicates a huge allocation rate in conversion, probably due to hash-consing so I guess this might be the main culprit.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337521270/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337521273","html_url":"https://github.com/coq/coq/issues/3447#issuecomment-337521273","issue_url":"https://api.github.com/repos/coq/coq/issues/3447","id":337521273,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyMTI3Mw==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-07-21T16:35:12Z","updated_at":"2017-10-18T09:23:32Z","author_association":"CONTRIBUTOR","body":"Comment author: @ppedrot\n\nI insist on the fact that the cost is due to a heck of a lot of hashconsing triggered by kernel's reduction: Closure.ref_value_cache seems to call Vars.subst_univs_level_constr many times, in turn calling Univ.subst_fn which hashconses its result when the substitution actually did something.\n\nHashconsing & related account for more than 40% of the time spent...\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337521273/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337521274","html_url":"https://github.com/coq/coq/issues/3447#issuecomment-337521274","issue_url":"https://api.github.com/repos/coq/coq/issues/3447","id":337521274,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyMTI3NA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-07-21T16:43:14Z","updated_at":"2017-10-18T09:23:32Z","author_association":"CONTRIBUTOR","body":"Comment author: @mattam82\n\nOkay, that's it indeed, all the time is spent hconsing universe instances. The timings when we don't do that at substitution time but only when putting constrs in envs are, well, amazing. The patch is in trunk now. In HoTT, ProjectionFunctors becomes the slowest file at 20secs here.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337521274/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]