[{"url":"https://api.github.com/repos/coq/coq/issues/comments/337533566","html_url":"https://github.com/coq/coq/issues/4160#issuecomment-337533566","issue_url":"https://api.github.com/repos/coq/coq/issues/4160","id":337533566,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUzMzU2Ng==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2015-03-25T21:12:38Z","updated_at":"2021-03-13T14:37:26Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\r\n```coq\r\n(* -*- mode: coq; coq-prog-args: (\"-emacs\" \"-indices-matter\" \"-R\" \".\" \"Top\") -*- *)\r\n(* File reduced by coq-bug-finder from original input, then from 58 lines to 47 lines, then from 40 lines to 30 lines *)\r\n(* coqc version 8.5beta1 (March 2015) compiled on Mar 15 2015 16:24:54 with OCaml 4.01.0\r\n   coqtop version cagnode15:/afs/csail.mit.edu/u/j/jgross/coq-8.5,v8.5 (1b3759e78f227eb85a128c58b8ce8c11509dd8c3) *)\r\nAxiom proof_admitted : False.\r\nTactic Notation \"admit\" := case proof_admitted.\r\nInductive paths {A : Type} (a : A) : A -> Type := idpath : paths a a where \"x = y\" := (@ paths _ x y) : type_scope.\r\nInductive String : Set :=\r\n| empty : String\r\n| string (c : bool) (cs : String) : String.\r\nDefinition head_type (s : String) : Set :=\r\n  match s with\r\n  | empty => unit\r\n  | string _ _ => bool\r\n  end.\r\nDefinition head (s : String) : head_type s :=\r\n  match s return head_type s with\r\n  | empty => tt\r\n  | string c _ => c\r\n  end.\r\nDefinition ne_head (x y : bool) (xs ys: String)\r\n: string x xs = string y ys -> head (string x xs) = head (string y ys).\r\nProof.\r\n  intro H.\r\n  destruct H.\r\n  admit.\r\nDefined.\r\n(* Toplevel input, characters 15-23:\r\nError:\r\nThe term\r\n \"fun (x y : bool) (xs ys : String) (H : string x xs = string y ys) =>\r\n  let s := string y ys in\r\n  match H with\r\n  | idpath _ =>\r\n      match\r\n        proof_admitted return (head (string x xs) = head (string x xs))\r\n      with\r\n      end\r\n  end\" has type\r\n \"forall (x y : bool) (xs ys : String),\r\n  string x xs = string y ys -> head (string x xs) = head (string x xs)\"\r\nwhile it is expected to have type\r\n \"forall (x y : bool) (xs ys : String),\r\n  string x xs = string y ys -> head (string x xs) = head (string y ys)\".\r\n *)\r\n```","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337533566/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337533568","html_url":"https://github.com/coq/coq/issues/4160#issuecomment-337533568","issue_url":"https://api.github.com/repos/coq/coq/issues/4160","id":337533568,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUzMzU2OA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2015-10-28T13:48:16Z","updated_at":"2017-10-18T09:58:54Z","author_association":"CONTRIBUTOR","body":"Comment author: @silene\n\nThis does not seem related to -indices-matter, since the following testcase fails whether the option is present or not.\n\nInductive paths {A : Set} (a : A) : forall _ : A, Set := idpath : paths a a.\nInductive bool := B.\nInductive String : Set := string (c : bool) : String.\nDefinition head_type (s : String) : Set :=\n  match s with string _ => bool end.\nAxiom head : forall s : String, head_type s.\nDefinition ne_head (x y : bool) (H : paths (string x) (string y)) :\n  paths (head (string x)) (head (string y)).\nProof.\n  case H.\n  apply idpath.\nDefined.\n\nNote that plain pattern-matching\n\n  refine (match H with idpath _ => _ end)\n\nsucceeds. I say plain, but the inferred return type for the match construct is quite convoluted, in fact. Anyway, if \"refine\" can infer the correct return type, so should \"case\".\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337533568/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]