[{"url":"https://api.github.com/repos/coq/coq/issues/comments/337534208","html_url":"https://github.com/coq/coq/issues/4200#issuecomment-337534208","issue_url":"https://api.github.com/repos/coq/coq/issues/4200","id":337534208,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUzNDIwOA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2015-04-21T14:16:23Z","updated_at":"2017-10-18T10:00:42Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nI requested in bug [BZ#4199](https://github.com/coq/coq/issues?q=is%3Aissue%20%22Original%20bug%20ID%3A%20BZ%234199%22) a mode that could be set to forbid [dependent destruction] from using axioms.  More generally, it should be possible to develop tactics in user-land with such modes.  (Justification: The excellent talk \"Growing a Language\", by Guy Steele, https://www.youtube.com/watch?v=_ahvzDzKdB0; primitives should not be special.)\n\nI propose that there be a syntax [Declare Option \"Foo Bar Baz\".] (maybe without quotes) which permits one to later [Set Foo Bar Baz.] and [Unset Foo Bar Baz.], and an ltac primitive [ensure_option \"Foo Bar Baz\"] (again, maybe without quotes, maybe with a space instead of underscore, etc.) which fails if the option is unset, and succeeds if it is set, so that code like [tryif ensure_option \"Foo Bar Baz\" then ... else ...] behaves nicely.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337534208/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337534211","html_url":"https://github.com/coq/coq/issues/4200#issuecomment-337534211","issue_url":"https://api.github.com/repos/coq/coq/issues/4200","id":337534211,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUzNDIxMQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-10-03T21:03:17Z","updated_at":"2017-10-18T10:00:42Z","author_association":"CONTRIBUTOR","body":"Comment author: @jonleivent\n\nI think Ltac should have something like Lisp special variables - some way to bind and access dynamically scoped variables.  Then, Jason's suggested enhancement can be based on this mechanism.  The additional capabilities of special variables would be that they can have values like normal Ltac variables, not just booleans, and that they can be set from within Ltac, not just accessed.\n\nJason's [Declare Option \"Foo Bar Baz\"] would then declare a special variable, while [Set Foo Bar Baz] and [Unset Foo Bar Baz] would set it globally to boolean true/false respectively.   One could then have [Set Foo Bar Baz := Bleep] to give the special variable a value other than just a boolean.\n\nOne specific use case for special variables would be extern hints that operate differently by conditionalizing on one or more special variables - so that tactics that call (e)auto can control these hints.  Currently, this is possible by posing and testing for the presence of dummy hypotheses, but using hypotheses for such controls is certainly a hack.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337534211/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]