[{"url":"https://api.github.com/repos/coq/coq/issues/comments/671030096","html_url":"https://github.com/coq/coq/issues/12805#issuecomment-671030096","issue_url":"https://api.github.com/repos/coq/coq/issues/12805","id":671030096,"node_id":"MDEyOklzc3VlQ29tbWVudDY3MTAzMDA5Ng==","user":{"login":"ppedrot","id":1202327,"node_id":"MDQ6VXNlcjEyMDIzMjc=","avatar_url":"https://avatars.githubusercontent.com/u/1202327?v=4","gravatar_id":"","url":"https://api.github.com/users/ppedrot","html_url":"https://github.com/ppedrot","followers_url":"https://api.github.com/users/ppedrot/followers","following_url":"https://api.github.com/users/ppedrot/following{/other_user}","gists_url":"https://api.github.com/users/ppedrot/gists{/gist_id}","starred_url":"https://api.github.com/users/ppedrot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ppedrot/subscriptions","organizations_url":"https://api.github.com/users/ppedrot/orgs","repos_url":"https://api.github.com/users/ppedrot/repos","events_url":"https://api.github.com/users/ppedrot/events{/privacy}","received_events_url":"https://api.github.com/users/ppedrot/received_events","type":"User","site_admin":false},"created_at":"2020-08-09T09:35:56Z","updated_at":"2020-08-09T09:35:56Z","author_association":"MEMBER","body":"What's the point to introduce parsing rules, which are non-modular, when you can use directly the `tactic` scope?","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/671030096/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/671067990","html_url":"https://github.com/coq/coq/issues/12805#issuecomment-671067990","issue_url":"https://api.github.com/repos/coq/coq/issues/12805","id":671067990,"node_id":"MDEyOklzc3VlQ29tbWVudDY3MTA2Nzk5MA==","user":{"login":"JasonGross","id":396076,"node_id":"MDQ6VXNlcjM5NjA3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/396076?v=4","gravatar_id":"","url":"https://api.github.com/users/JasonGross","html_url":"https://github.com/JasonGross","followers_url":"https://api.github.com/users/JasonGross/followers","following_url":"https://api.github.com/users/JasonGross/following{/other_user}","gists_url":"https://api.github.com/users/JasonGross/gists{/gist_id}","starred_url":"https://api.github.com/users/JasonGross/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JasonGross/subscriptions","organizations_url":"https://api.github.com/users/JasonGross/orgs","repos_url":"https://api.github.com/users/JasonGross/repos","events_url":"https://api.github.com/users/JasonGross/events{/privacy}","received_events_url":"https://api.github.com/users/JasonGross/received_events","type":"User","site_admin":false},"created_at":"2020-08-09T15:49:27Z","updated_at":"2020-08-09T15:49:27Z","author_association":"MEMBER","body":"Ah, if int and string can be obtained with `tactic` scope (which I guess it makes sense that they can, along with tuple and Ltac2 list, and hopefully array literals someday), this should be documented if it's not already.  cc @jfehrle ","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/671067990/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/671606944","html_url":"https://github.com/coq/coq/issues/12805#issuecomment-671606944","issue_url":"https://api.github.com/repos/coq/coq/issues/12805","id":671606944,"node_id":"MDEyOklzc3VlQ29tbWVudDY3MTYwNjk0NA==","user":{"login":"jfehrle","id":1253341,"node_id":"MDQ6VXNlcjEyNTMzNDE=","avatar_url":"https://avatars.githubusercontent.com/u/1253341?v=4","gravatar_id":"","url":"https://api.github.com/users/jfehrle","html_url":"https://github.com/jfehrle","followers_url":"https://api.github.com/users/jfehrle/followers","following_url":"https://api.github.com/users/jfehrle/following{/other_user}","gists_url":"https://api.github.com/users/jfehrle/gists{/gist_id}","starred_url":"https://api.github.com/users/jfehrle/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jfehrle/subscriptions","organizations_url":"https://api.github.com/users/jfehrle/orgs","repos_url":"https://api.github.com/users/jfehrle/repos","events_url":"https://api.github.com/users/jfehrle/events{/privacy}","received_events_url":"https://api.github.com/users/jfehrle/received_events","type":"User","site_admin":false},"created_at":"2020-08-10T21:48:39Z","updated_at":"2020-08-10T21:48:39Z","author_association":"CONTRIBUTOR","body":"> What's the point to introduce parsing rules, which are non-modular, when you can use directly the tactic scope?\r\n\r\nWell, it would be a misleading to see\r\n\r\n```\r\nLtac2 Notation \"bar\" c(tactic) := print (of_string c).\r\n```\r\n\r\nwhen you really mean\r\n\r\n```\r\nLtac2 Notation \"bar\" c(string) := print (of_string c).\r\n```\r\n\r\nThe examples are contrived since the type can be inferred from the RHS.\r\n\r\nBut this raises another issue: `ltac2_expr` is not always a `tactic`, so that syntactic class name is misleading.  Maybe it should be `ltac2_expr`.","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/671606944/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/671612902","html_url":"https://github.com/coq/coq/issues/12805#issuecomment-671612902","issue_url":"https://api.github.com/repos/coq/coq/issues/12805","id":671612902,"node_id":"MDEyOklzc3VlQ29tbWVudDY3MTYxMjkwMg==","user":{"login":"jfehrle","id":1253341,"node_id":"MDQ6VXNlcjEyNTMzNDE=","avatar_url":"https://avatars.githubusercontent.com/u/1253341?v=4","gravatar_id":"","url":"https://api.github.com/users/jfehrle","html_url":"https://github.com/jfehrle","followers_url":"https://api.github.com/users/jfehrle/followers","following_url":"https://api.github.com/users/jfehrle/following{/other_user}","gists_url":"https://api.github.com/users/jfehrle/gists{/gist_id}","starred_url":"https://api.github.com/users/jfehrle/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jfehrle/subscriptions","organizations_url":"https://api.github.com/users/jfehrle/orgs","repos_url":"https://api.github.com/users/jfehrle/repos","events_url":"https://api.github.com/users/jfehrle/events{/privacy}","received_events_url":"https://api.github.com/users/jfehrle/received_events","type":"User","site_admin":false},"created_at":"2020-08-10T22:04:24Z","updated_at":"2020-08-10T22:04:24Z","author_association":"CONTRIBUTOR","body":"Also, this looks like a bug:\r\n\r\n```\r\nLtac2 Notation \"bar\" c(\"match\") := print (of_string c).\r\nGoal True.\r\nbar \"abc\".\r\n\r\n(* Unbound value bar *)\r\n```","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/671612902/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/671650244","html_url":"https://github.com/coq/coq/issues/12805#issuecomment-671650244","issue_url":"https://api.github.com/repos/coq/coq/issues/12805","id":671650244,"node_id":"MDEyOklzc3VlQ29tbWVudDY3MTY1MDI0NA==","user":{"login":"JasonGross","id":396076,"node_id":"MDQ6VXNlcjM5NjA3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/396076?v=4","gravatar_id":"","url":"https://api.github.com/users/JasonGross","html_url":"https://github.com/JasonGross","followers_url":"https://api.github.com/users/JasonGross/followers","following_url":"https://api.github.com/users/JasonGross/following{/other_user}","gists_url":"https://api.github.com/users/JasonGross/gists{/gist_id}","starred_url":"https://api.github.com/users/JasonGross/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JasonGross/subscriptions","organizations_url":"https://api.github.com/users/JasonGross/orgs","repos_url":"https://api.github.com/users/JasonGross/repos","events_url":"https://api.github.com/users/JasonGross/events{/privacy}","received_events_url":"https://api.github.com/users/JasonGross/received_events","type":"User","site_admin":false},"created_at":"2020-08-11T00:07:31Z","updated_at":"2020-08-11T00:07:31Z","author_association":"MEMBER","body":"Were you expecting a syntax error of \"expected match after bar\" or something?","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/671650244/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/671672353","html_url":"https://github.com/coq/coq/issues/12805#issuecomment-671672353","issue_url":"https://api.github.com/repos/coq/coq/issues/12805","id":671672353,"node_id":"MDEyOklzc3VlQ29tbWVudDY3MTY3MjM1Mw==","user":{"login":"jfehrle","id":1253341,"node_id":"MDQ6VXNlcjEyNTMzNDE=","avatar_url":"https://avatars.githubusercontent.com/u/1253341?v=4","gravatar_id":"","url":"https://api.github.com/users/jfehrle","html_url":"https://github.com/jfehrle","followers_url":"https://api.github.com/users/jfehrle/followers","following_url":"https://api.github.com/users/jfehrle/following{/other_user}","gists_url":"https://api.github.com/users/jfehrle/gists{/gist_id}","starred_url":"https://api.github.com/users/jfehrle/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jfehrle/subscriptions","organizations_url":"https://api.github.com/users/jfehrle/orgs","repos_url":"https://api.github.com/users/jfehrle/repos","events_url":"https://api.github.com/users/jfehrle/events{/privacy}","received_events_url":"https://api.github.com/users/jfehrle/received_events","type":"User","site_admin":false},"created_at":"2020-08-11T01:31:30Z","updated_at":"2020-08-11T01:35:14Z","author_association":"CONTRIBUTOR","body":"I'll leave that to @ppedrot to specify.  I don't know if this construct is meant to handle, say \"A /\\ B\" as the regular notations do or if you have to break it up somehow.  Would be useful to have that in the doc.  I didn't even consider this earlier.  (Not sure if these are independent features.)","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/671672353/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/671886480","html_url":"https://github.com/coq/coq/issues/12805#issuecomment-671886480","issue_url":"https://api.github.com/repos/coq/coq/issues/12805","id":671886480,"node_id":"MDEyOklzc3VlQ29tbWVudDY3MTg4NjQ4MA==","user":{"login":"ppedrot","id":1202327,"node_id":"MDQ6VXNlcjEyMDIzMjc=","avatar_url":"https://avatars.githubusercontent.com/u/1202327?v=4","gravatar_id":"","url":"https://api.github.com/users/ppedrot","html_url":"https://github.com/ppedrot","followers_url":"https://api.github.com/users/ppedrot/followers","following_url":"https://api.github.com/users/ppedrot/following{/other_user}","gists_url":"https://api.github.com/users/ppedrot/gists{/gist_id}","starred_url":"https://api.github.com/users/ppedrot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ppedrot/subscriptions","organizations_url":"https://api.github.com/users/ppedrot/orgs","repos_url":"https://api.github.com/users/ppedrot/repos","events_url":"https://api.github.com/users/ppedrot/events{/privacy}","received_events_url":"https://api.github.com/users/ppedrot/received_events","type":"User","site_admin":false},"created_at":"2020-08-11T11:19:46Z","updated_at":"2020-08-11T11:19:46Z","author_association":"MEMBER","body":"> Also, this looks like a bug:\r\n\r\nDoesn't look like one to me. You notation parses `bar match`, and you wrote something that doesn't match, so you get the default Ltac2 parsing rules.","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/671886480/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/672346016","html_url":"https://github.com/coq/coq/issues/12805#issuecomment-672346016","issue_url":"https://api.github.com/repos/coq/coq/issues/12805","id":672346016,"node_id":"MDEyOklzc3VlQ29tbWVudDY3MjM0NjAxNg==","user":{"login":"jfehrle","id":1253341,"node_id":"MDQ6VXNlcjEyNTMzNDE=","avatar_url":"https://avatars.githubusercontent.com/u/1253341?v=4","gravatar_id":"","url":"https://api.github.com/users/jfehrle","html_url":"https://github.com/jfehrle","followers_url":"https://api.github.com/users/jfehrle/followers","following_url":"https://api.github.com/users/jfehrle/following{/other_user}","gists_url":"https://api.github.com/users/jfehrle/gists{/gist_id}","starred_url":"https://api.github.com/users/jfehrle/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jfehrle/subscriptions","organizations_url":"https://api.github.com/users/jfehrle/orgs","repos_url":"https://api.github.com/users/jfehrle/repos","events_url":"https://api.github.com/users/jfehrle/events{/privacy}","received_events_url":"https://api.github.com/users/jfehrle/received_events","type":"User","site_admin":false},"created_at":"2020-08-11T23:12:10Z","updated_at":"2020-08-11T23:12:10Z","author_association":"CONTRIBUTOR","body":"Fair enough, although `c(\"match\")` is a rather odd construction.  `c` looks like a formal parameter, but the `(\"match\")` seems to negate that. `foo match` gives `This expression has type unit but an expression was expected of type string`.  Would be user-friendly to flag this but not strictly necessary.\r\n\r\nLooks like I mis-edited the grammar for `Ltac2 Notation`, BTW, which I'll fix.\r\n\r\n`Ltac2 Notation` seems to overlap with `Notation`.  Are they equivalent or are there guidelines for when to use each?","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/672346016/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/672375546","html_url":"https://github.com/coq/coq/issues/12805#issuecomment-672375546","issue_url":"https://api.github.com/repos/coq/coq/issues/12805","id":672375546,"node_id":"MDEyOklzc3VlQ29tbWVudDY3MjM3NTU0Ng==","user":{"login":"JasonGross","id":396076,"node_id":"MDQ6VXNlcjM5NjA3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/396076?v=4","gravatar_id":"","url":"https://api.github.com/users/JasonGross","html_url":"https://github.com/JasonGross","followers_url":"https://api.github.com/users/JasonGross/followers","following_url":"https://api.github.com/users/JasonGross/following{/other_user}","gists_url":"https://api.github.com/users/JasonGross/gists{/gist_id}","starred_url":"https://api.github.com/users/JasonGross/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JasonGross/subscriptions","organizations_url":"https://api.github.com/users/JasonGross/orgs","repos_url":"https://api.github.com/users/JasonGross/repos","events_url":"https://api.github.com/users/JasonGross/events{/privacy}","received_events_url":"https://api.github.com/users/JasonGross/received_events","type":"User","site_admin":false},"created_at":"2020-08-12T00:02:18Z","updated_at":"2020-08-12T00:02:18Z","author_association":"MEMBER","body":"> Would be user-friendly to flag this but not strictly necessary.\r\n\r\nWhat do you mean?  And note that `c` is a parameter, it's type is unit, and the error message is that you're passing a thing of type unit to a thing that expects a string.\r\n\r\n> `Ltac2 Notation` seems to overlap with `Notation`. Are they equivalent or are there guidelines for when to use each?\r\n\r\n`Ltac2 Notation` creates a(n Ltac2) tactic notation which can be used in tactic-land, and the replacement expression is an Ltac2 expression.  `Notation` creates a notation which is used in Gallina-land, and the replacement expression is Gallina.","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/672375546/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/672403411","html_url":"https://github.com/coq/coq/issues/12805#issuecomment-672403411","issue_url":"https://api.github.com/repos/coq/coq/issues/12805","id":672403411,"node_id":"MDEyOklzc3VlQ29tbWVudDY3MjQwMzQxMQ==","user":{"login":"jfehrle","id":1253341,"node_id":"MDQ6VXNlcjEyNTMzNDE=","avatar_url":"https://avatars.githubusercontent.com/u/1253341?v=4","gravatar_id":"","url":"https://api.github.com/users/jfehrle","html_url":"https://github.com/jfehrle","followers_url":"https://api.github.com/users/jfehrle/followers","following_url":"https://api.github.com/users/jfehrle/following{/other_user}","gists_url":"https://api.github.com/users/jfehrle/gists{/gist_id}","starred_url":"https://api.github.com/users/jfehrle/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jfehrle/subscriptions","organizations_url":"https://api.github.com/users/jfehrle/orgs","repos_url":"https://api.github.com/users/jfehrle/repos","events_url":"https://api.github.com/users/jfehrle/events{/privacy}","received_events_url":"https://api.github.com/users/jfehrle/received_events","type":"User","site_admin":false},"created_at":"2020-08-12T00:42:36Z","updated_at":"2020-08-12T00:42:36Z","author_association":"CONTRIBUTOR","body":"It's easy to get confused.  So much guesswork, so many details.\r\n\r\n> `Ltac2 Notation` creates a(n Ltac2) tactic notation which can be used in tactic-land, and the replacement expression is an Ltac2 expression.  `Notation` creates a notation which is used in Gallina-land, and the replacement expression is Gallina.\r\n\r\nAh, `Notation` extends `term` and `Ltac2 Notation` extends `ltac2_expr`?\r\n\r\nBut `ltac2_expr` can have `term`\\s within them, so tactic-land and Gallina-land are not so separate, right?","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/672403411/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/672546588","html_url":"https://github.com/coq/coq/issues/12805#issuecomment-672546588","issue_url":"https://api.github.com/repos/coq/coq/issues/12805","id":672546588,"node_id":"MDEyOklzc3VlQ29tbWVudDY3MjU0NjU4OA==","user":{"login":"JasonGross","id":396076,"node_id":"MDQ6VXNlcjM5NjA3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/396076?v=4","gravatar_id":"","url":"https://api.github.com/users/JasonGross","html_url":"https://github.com/JasonGross","followers_url":"https://api.github.com/users/JasonGross/followers","following_url":"https://api.github.com/users/JasonGross/following{/other_user}","gists_url":"https://api.github.com/users/JasonGross/gists{/gist_id}","starred_url":"https://api.github.com/users/JasonGross/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JasonGross/subscriptions","organizations_url":"https://api.github.com/users/JasonGross/orgs","repos_url":"https://api.github.com/users/JasonGross/repos","events_url":"https://api.github.com/users/JasonGross/events{/privacy}","received_events_url":"https://api.github.com/users/JasonGross/received_events","type":"User","site_admin":false},"created_at":"2020-08-12T03:19:17Z","updated_at":"2020-08-12T03:19:17Z","author_association":"MEMBER","body":"> But `ltac2_expr` can have `term`\\s within them, so tactic-land and Gallina-land are not so separate, right?\r\n\r\nSure, but `Notation` is also used for printing, while `Ltac2 Notation` is not.  And `Notation` is more flexible with respect to inference of holes in its arguments (there's no way to delay the typechecking of constr arguments passed to `Ltac2 Notation` until they are inserted into a larger expression.).  And I don't think you'd want to have to write `ltac2:(let v := x + y in exact v)` every time you wanted to use addition in Gallina.","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/672546588/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/672557886","html_url":"https://github.com/coq/coq/issues/12805#issuecomment-672557886","issue_url":"https://api.github.com/repos/coq/coq/issues/12805","id":672557886,"node_id":"MDEyOklzc3VlQ29tbWVudDY3MjU1Nzg4Ng==","user":{"login":"jfehrle","id":1253341,"node_id":"MDQ6VXNlcjEyNTMzNDE=","avatar_url":"https://avatars.githubusercontent.com/u/1253341?v=4","gravatar_id":"","url":"https://api.github.com/users/jfehrle","html_url":"https://github.com/jfehrle","followers_url":"https://api.github.com/users/jfehrle/followers","following_url":"https://api.github.com/users/jfehrle/following{/other_user}","gists_url":"https://api.github.com/users/jfehrle/gists{/gist_id}","starred_url":"https://api.github.com/users/jfehrle/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jfehrle/subscriptions","organizations_url":"https://api.github.com/users/jfehrle/orgs","repos_url":"https://api.github.com/users/jfehrle/repos","events_url":"https://api.github.com/users/jfehrle/events{/privacy}","received_events_url":"https://api.github.com/users/jfehrle/received_events","type":"User","site_admin":false},"created_at":"2020-08-12T03:56:40Z","updated_at":"2020-08-12T03:56:40Z","author_association":"CONTRIBUTOR","body":"I was thinking more about mentioning in the doc that `Notation` extends `term`, `Tactic Notation` extends `ltac_expr` and `Ltac2 Notation` extends `ltac2_expr`.  Sometimes it helps to state the obvious for basic orientation.","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/672557886/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/672558083","html_url":"https://github.com/coq/coq/issues/12805#issuecomment-672558083","issue_url":"https://api.github.com/repos/coq/coq/issues/12805","id":672558083,"node_id":"MDEyOklzc3VlQ29tbWVudDY3MjU1ODA4Mw==","user":{"login":"jfehrle","id":1253341,"node_id":"MDQ6VXNlcjEyNTMzNDE=","avatar_url":"https://avatars.githubusercontent.com/u/1253341?v=4","gravatar_id":"","url":"https://api.github.com/users/jfehrle","html_url":"https://github.com/jfehrle","followers_url":"https://api.github.com/users/jfehrle/followers","following_url":"https://api.github.com/users/jfehrle/following{/other_user}","gists_url":"https://api.github.com/users/jfehrle/gists{/gist_id}","starred_url":"https://api.github.com/users/jfehrle/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jfehrle/subscriptions","organizations_url":"https://api.github.com/users/jfehrle/orgs","repos_url":"https://api.github.com/users/jfehrle/repos","events_url":"https://api.github.com/users/jfehrle/events{/privacy}","received_events_url":"https://api.github.com/users/jfehrle/received_events","type":"User","site_admin":false},"created_at":"2020-08-12T03:57:31Z","updated_at":"2020-08-12T03:57:31Z","author_association":"CONTRIBUTOR","body":"You are quick-draw on the emojis!","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/672558083/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]