[{"url":"https://api.github.com/repos/coq/coq/issues/comments/337529180","html_url":"https://github.com/coq/coq/issues/3915#issuecomment-337529180","issue_url":"https://api.github.com/repos/coq/coq/issues/3915","id":337529180,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyOTE4MA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2015-01-12T19:42:25Z","updated_at":"2022-01-04T19:22:29Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\r\n\r\nThis occurs in 8.4 and trunk, though with slightly different characteristics.\r\n```coq\r\n(* File reduced by coq-bug-finder from original input, then from 2352 lines to 162 lines, then from 138 lines to 50 lines *)\r\n(* coqc version trunk (January 2015) compiled on Jan 10 2015 10:54:47 with OCaml 4.01.0\r\n   coqtop version cagnode15:/afs/csail.mit.edu/u/j/jgross/coq-trunk,trunk (b858f939f33dc4bc4c8e470ed62310ef15c59a99) *)\r\n\r\nNotation compose g f := (fun x => g (f x)).\r\nNotation \"g 'o' f\" := (compose g f) (at level 40, left associativity) : function_scope.\r\nOpen Scope function_scope.\r\nInductive paths {A : Type} (a : A) : A -> Type := idpath : paths a a.\r\nArguments idpath {A a} , [A] a.\r\nNotation \"x = y :> A\" := (@ paths A x y) : type_scope.\r\nNotation \"x = y\" := (x = y :>_) : type_scope.\r\nDefinition ap {A B:Type} (f:A -> B) {x y:A} (p:x = y) : f x = f y := match p with idpath => idpath end.\r\nClass IsEquiv {A B : Type} (f : A -> B) := { equiv_inv : B -> A }.\r\nNotation \"f ^-1\" := (@ equiv_inv _ _ f _) (at level 3, format \"f '^-1'\") : equiv_scope.\r\nLocal Open Scope equiv_scope.\r\nGeneralizable Variables A B C f g.\r\nGlobal Instance isequiv_compose `{IsEquiv A B f} `{IsEquiv B C g}\r\n: IsEquiv (compose g f) | 1000\r\n  := Build_IsEquiv A C (compose g f) (compose f^-1 g^-1).\r\nDefinition isequiv_homotopic {A B} (f : A -> B) {g : A -> B} `{IsEquiv A B f} (h : forall x, f x = g x) : IsEquiv g\r\n  := Build_IsEquiv _ _ g (f ^-1).\r\nGlobal Instance isequiv_inverse {A B} (f : A -> B) `{IsEquiv A B f} : IsEquiv f^-1 | 10000\r\n  := Build_IsEquiv B A f^-1 f.\r\nAxiom eisretr : forall {A B} (f : A -> B) `{IsEquiv A B f} x, f (f^-1 x) = x.\r\nDefinition cancelR_isequiv {A B C} (f : A -> B) {g : B -> C}\r\n           `{IsEquiv A B f} `{IsEquiv A C (g o f)}\r\n: IsEquiv g.\r\nProof.\r\n  assert (IsEquiv g) by admit.\r\n  solve [ refine (isequiv_homotopic (compose (compose g f) f^-1)\r\n                            (fun b => ap g (eisretr f b)));\r\n    repeat exact _; repeat exact _ ]. (* success *)\r\n  solve [ refine (isequiv_homotopic (compose (compose g f) f^-1)\r\n                            (fun b => ap g (eisretr f b))) ]. (* failure *)\r\n```\r\n\r\nI don't think this should be the case; when [refine] can solve typeclass goals, it should solve all of them.  The underlying confusing behavior here is explained in Arnaud's comment (https://coq.inria.fr/bugs/show_bug.cgi?id=3910#c1) to bug [BZ#3910](https://github.com/coq/coq/issues?q=is%3Aissue%20%22Original%20bug%20ID%3A%20BZ%233910%22).\r\n\r\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337529180/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337529182","html_url":"https://github.com/coq/coq/issues/3915#issuecomment-337529182","issue_url":"https://api.github.com/repos/coq/coq/issues/3915","id":337529182,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyOTE4Mg==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2015-01-13T09:09:15Z","updated_at":"2017-10-18T09:46:09Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nNote: It should be possible to solve this without solving the underlying confusing behavior, by making typeclass resolution run on all goals repeatedly after solving any dependent evar.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337529182/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]