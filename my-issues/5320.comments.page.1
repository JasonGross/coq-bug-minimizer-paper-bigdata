[{"url":"https://api.github.com/repos/coq/coq/issues/comments/337550857","html_url":"https://github.com/coq/coq/issues/5320#issuecomment-337550857","issue_url":"https://api.github.com/repos/coq/coq/issues/5320","id":337550857,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU1MDg1Nw==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2017-01-20T05:21:00Z","updated_at":"2017-11-19T19:36:40Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\r\n```coq\r\n\r\n(* What's going on? *)\r\n(* -*- mode: coq; coq-prog-args: (\"-emacs\" \"-R\" \"src\" \"Crypto\" \"-R\" \"Bedrock\" \r\n\"Bedrock\" \"-R\" \"coqprime/Coqprime\" \"Coqprime\" \"-top\" \"NewBaseSystemLetInMonad\") \r\n-*- *)\r\n(* File reduced by coq-bug-finder from original input, then from 619 lines to \r\n61 lines, then from 210 lines to 101 lines, then from 203 lines to 103 lines, \r\nthen from 217 lines to 107 lines, then from 299 lines to 121 lines, then from \r\n170 lines to 121 lines, then from 135 lines to 121 lines *)\r\n(* coqc version 8.6rc1 (December 2016) compiled on Dec 8 2016 13:43:59 with \r\nOCaml 4.02.3\r\n   coqtop version 8.6rc1 (December 2016) *)\r\nAxiom proof_admitted : False.\r\nTactic Notation \"admit\" := abstract case proof_admitted.\r\nRequire Coq.ZArith.ZArith.\r\n\r\nGlobal Set Asymmetric Patterns.\r\nImport Coq.ZArith.BinInt.\r\n\r\nClass Decidable (P : Prop) := dec : {P} + {~P}.\r\nArguments dec _%type_scope {_}.\r\n\r\nNotation DecidableRel R := (forall x y, Decidable (R x y)).\r\nGlobal Instance dec_eq_prod {A B} `{DecidableRel (@ eq A), DecidableRel (@ eq B)} \r\n: DecidableRel (@ eq (A * B)) | 10.\r\nadmit.\r\nDefined.\r\n\r\nGlobal Instance dec_eq_Z : DecidableRel (@ eq Z) | 10 := Z.eq_dec.\r\nGlobal Instance dec_le_Z : DecidableRel BinInt.Z.le := ZArith_dec.Z_le_dec.\r\nGlobal Instance dec_ge_Z : DecidableRel BinInt.Z.ge := ZArith_dec.Z_ge_dec.\r\n\r\nReserved Notation \"A <- X ; B\" (at level 70, right associativity, format \"'[v' \r\nA  <-  X ; '/' B ']'\").\r\nReserved Notation \"'mlet' x := A 'in' b\"\r\n         (at level 200, b at level 200, format \"'mlet'  x  :=  A  'in' '//' b\").\r\n\r\nReserved Notation \"'dlet' x := y 'in' f\"\r\n         (at level 200, f at level 200, format \"'dlet'  x  :=  y  'in' '//' f\").\r\n\r\nDefinition Let_In {A P} (x : A) (f : forall a : A, P a) : P x := let y := x in \r\nf y.\r\nNotation \"'dlet' x := y 'in' f\" := (Let_In y (fun x => f)).\r\nLocal Set Universe Polymorphism.\r\n\r\nInductive LetInM : Type -> Type :=\r\n| ret {T} (v : T) : LetInM T\r\n| let_in {A B} (v : A) (f : A -> LetInM B) : LetInM B.\r\nDelimit Scope letinm_scope with letinm.\r\nNotation \"'mlet' x := y 'in' f\" := (let_in y (fun x => f%letinm)) : \r\nletinm_scope.\r\n\r\nFixpoint denote {A} (x : LetInM A) : A :=\r\n  match x with\r\n  | ret _ v => v\r\n  | let_in T A v f => dlet x := v in @ denote A (f x)\r\n  end.\r\n\r\nFixpoint bind {A B} (v : LetInM A) : forall (f : A -> LetInM B), LetInM B\r\n  := match v in LetInM A return (A -> _) -> _ with\r\n     | ret T v => fun f => f v\r\n     | let_in A B v g => fun f => let_in v (fun x => bind (g x) f)\r\n     end.\r\nNotation \"x <- y ; z\" := (bind y%letinm (fun x => z%letinm)) : letinm_scope.\r\n\r\nFixpoint under_lets {A B} (v : LetInM A) : forall (f : A -> LetInM B), LetInM B\r\n  := match v in LetInM A return (A -> _) -> _ with\r\n     | ret T v => fun f => f v\r\n     | let_in A B v g => fun f => let_in v (fun x => bind (g x) f)\r\n     end.\r\n\r\nDefinition lift {A B} (f : A -> B) : LetInM A -> LetInM B\r\n  := fun x => under_lets x (fun y => ret (f y)).\r\n\r\nModule Import List.\r\n  Definition cons {A} x := lift (@ cons A x).\r\nInfix \"::\" := List.cons : letinm_scope.\r\n\r\nDefinition pull_prod {A B} : LetInM (A * B) -> LetInM A * LetInM B\r\n  := fun x => (lift fst x, lift snd x).\r\nDefinition pull_prod2 {A B C} : LetInM (A * B * C) -> LetInM A * LetInM B * \r\nLetInM C\r\n  := Eval simpl in fun x => let x := pull_prod x in (pull_prod (fst x), snd x).\r\nLocal Open Scope Z_scope.\r\nLocal Notation llist A := (LetInM (list A)).\r\n\r\n    Fixpoint remove_first {A} (dec:forall x y:A, {x = y} + {x<>y}) (x:A) \r\n(ls:list A)\r\n      := match ls with\r\n         | nil => nil\r\n         | (a :: ls')%list =>\r\n           if (dec x a) then ls' else (a :: remove_first dec x ls')%list\r\n         end.\r\n\r\n    Definition find_remove_first {A dec} (f:A -> bool) ls : (option A) * list A\r\n      := match List.find (fun a => f a) ls with\r\n         | None => (None, ls)\r\n         | Some a => (Some a, remove_first dec a ls)\r\n         end.\r\n  Let limb := (Z*Z)%type.\r\n\r\n    Section Saturated.\r\n      Context {word_max : Z} {word_max_pos : 1 < word_max}\r\n              {add : Z -> Z -> Z * Z}\r\n              {add_correct : forall x y, fst (add x y) + word_max * snd (add x \r\ny) = x + y}\r\n              {end_wt:Z} {end_wt_pos : 0 < end_wt}\r\n      .\r\n\r\n      Definition has_same_wt (cx:limb) := fun a:limb => if dec (fst cx = fst a) \r\nthen true else false.\r\n\r\n      Function add_and_carry (cx:limb) (acc p:llist limb)\r\n               {measure (fun cx => Z.to_nat (end_wt - fst cx)) cx}\r\n        : llist limb * llist limb * limb :=\r\n        if dec (fst cx <= 0) then (acc,p,cx) else\r\n        if dec (fst cx >= end_wt) then (acc, p, cx) else\r\n          let '(acc, p, cx) :=\r\n              pull_prod2\r\n            (under_lets\r\n               p\r\n               (fun p =>\r\n          match (@ find_remove_first limb dec_eq_prod (has_same_wt cx) p) with\r\n          | (None,_) => mlet cx' := cx in\r\n                        let '(acc, p, cx) := add_and_carry (fst cx * word_max, \r\n0) (cx :: acc)%letinm (ret p) in\r\n                        acc <- acc;\r\n                        p <- p;\r\n                       ret (acc, p, cx)\r\n          | (Some cx',p') =>\r\n            let '(sum, carry) := add (snd cx) (snd cx') in\r\n            mlet fst_cx := fst cx in\r\n            let new_list := ((fst_cx, sum) :: ret p')%letinm in\r\n            let new_limb := (fst_cx * word_max, carry) in\r\n            let '(acc, p, cx) := add_and_carry new_limb acc new_list in\r\n            acc <- acc;\r\n            p <- p;\r\n            ret (acc, p, cx)\r\n          end)%letinm) in\r\n      (acc, p, denote cx).\r\n\r\n(* Error: Undeclared universe: Set *)\r\n\r\n\r\n```","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337550857/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337550858","html_url":"https://github.com/coq/coq/issues/5320#issuecomment-337550858","issue_url":"https://api.github.com/repos/coq/coq/issues/5320","id":337550858,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU1MDg1OA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2017-01-20T05:37:13Z","updated_at":"2017-11-19T19:37:09Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\r\n\r\nSmaller example:\r\n```coq\r\n\r\n(* -*- mode: coq; coq-prog-args: (\"-emacs\" \"-R\" \"src\" \"Crypto\" \"-R\" \"Bedrock\" \r\n\"Bedrock\" \"-R\" \"coqprime/Coqprime\" \"Coqprime\" \"-top\" \"NewBaseSystemLetInMonad\") \r\n-*- *)\r\n(* File reduced by coq-bug-finder from original input, then from 619 lines to \r\n61 lines, then from 210 lines to 101 lines, then from 203 lines to 103 lines, \r\nthen from 217 lines to 107 lines, then from 299 lines to 121 lines, then from \r\n170 lines to 121 lines, then from 135 lines to 121 lines, then from 118 lines \r\nto 57 lines, then from 71 lines to 57 lines *)\r\n(* coqc version 8.6rc1 (December 2016) compiled on Dec 8 2016 13:43:59 with \r\nOCaml 4.02.3\r\n   coqtop version 8.6rc1 (December 2016) *)\r\nRequire Coq.ZArith.ZArith.\r\n\r\nGlobal Set Asymmetric Patterns.\r\nImport Coq.ZArith.BinInt.\r\n\r\nReserved Notation \"A <- X ; B\" (at level 70, right associativity, format \"'[v' \r\nA  <-  X ; '/' B ']'\").\r\n\r\nReserved Notation \"'dlet' x := y 'in' f\"\r\n         (at level 200, f at level 200, format \"'dlet'  x  :=  y  'in' '//' f\").\r\n\r\nDefinition Let_In {A P} (x : A) (f : forall a : A, P a) : P x := let y := x in \r\nf y.\r\nNotation \"'dlet' x := y 'in' f\" := (Let_In y (fun x => f)).\r\nLocal Set Universe Polymorphism.\r\n\r\nInductive LetInM : Type -> Type :=\r\n| ret {T} (v : T) : LetInM T\r\n| let_in {A B} (v : A) (f : A -> LetInM B) : LetInM B.\r\nDelimit Scope letinm_scope with letinm.\r\n\r\nFixpoint denote {A} (x : LetInM A) : A :=\r\n  match x with\r\n  | ret _ v => v\r\n  | let_in T A v f => dlet x := v in @ denote A (f x)\r\n  end.\r\n\r\nFixpoint bind {A B} (v : LetInM A) : forall (f : A -> LetInM B), LetInM B\r\n  := match v in LetInM A return (A -> _) -> _ with\r\n     | ret T v => fun f => f v\r\n     | let_in A B v g => fun f => let_in v (fun x => bind (g x) f)\r\n     end.\r\nNotation \"x <- y ; z\" := (bind y%letinm (fun x => z%letinm)) : letinm_scope.\r\n\r\nFixpoint under_lets {A B} (v : LetInM A) : forall (f : A -> LetInM B), LetInM B\r\n  := match v in LetInM A return (A -> _) -> _ with\r\n     | ret T v => fun f => f v\r\n     | let_in A B v g => fun f => let_in v (fun x => bind (g x) f)\r\n     end.\r\n\r\nDefinition lift {A B} (f : A -> B) : LetInM A -> LetInM B\r\n  := fun x => under_lets x (fun y => ret (f y)).\r\nDefinition pull_prod {A B} : LetInM (A * B) -> LetInM A * LetInM B\r\n  := fun x => (lift fst x, lift snd x).\r\nLocal Notation llist A := (LetInM (list A)).\r\nAxiom admit : forall {T}, T.\r\nFunction add_and_carry (cx : Z*Z)\r\n         {measure (fun cx => Z.to_nat (end_wt - fst cx)) cx}\r\n  : llist (Z*Z)%type * (Z*Z) :=\r\n  let '(p, cx) :=\r\n      pull_prod\r\n        ((let '(p, cx) := add_and_carry admit in\r\n          p <- p;\r\n            ret (p, cx)\r\n         )%letinm) in\r\n  (p, denote cx).\r\n```\r\n\r\n\r\n(Note that the [Function] declarion shouldn't go through.  But the error \r\nmessage is the wrong one.)\r\n\r\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337550858/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337550859","html_url":"https://github.com/coq/coq/issues/5320#issuecomment-337550859","issue_url":"https://api.github.com/repos/coq/coq/issues/5320","id":337550859,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU1MDg1OQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2017-01-20T05:37:55Z","updated_at":"2017-10-18T10:53:01Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nMaking [pull_prod] monomorphic fixes the unexpected error message\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337550859/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/345546020","html_url":"https://github.com/coq/coq/issues/5320#issuecomment-345546020","issue_url":"https://api.github.com/repos/coq/coq/issues/5320","id":345546020,"node_id":"MDEyOklzc3VlQ29tbWVudDM0NTU0NjAyMA==","user":{"login":"SkySkimmer","id":2461932,"node_id":"MDQ6VXNlcjI0NjE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/2461932?v=4","gravatar_id":"","url":"https://api.github.com/users/SkySkimmer","html_url":"https://github.com/SkySkimmer","followers_url":"https://api.github.com/users/SkySkimmer/followers","following_url":"https://api.github.com/users/SkySkimmer/following{/other_user}","gists_url":"https://api.github.com/users/SkySkimmer/gists{/gist_id}","starred_url":"https://api.github.com/users/SkySkimmer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/SkySkimmer/subscriptions","organizations_url":"https://api.github.com/users/SkySkimmer/orgs","repos_url":"https://api.github.com/users/SkySkimmer/repos","events_url":"https://api.github.com/users/SkySkimmer/events{/privacy}","received_events_url":"https://api.github.com/users/SkySkimmer/received_events","type":"User","site_admin":false},"created_at":"2017-11-19T20:16:52Z","updated_at":"2017-11-19T20:16:52Z","author_association":"CONTRIBUTOR","body":"Looks like detyping transforms Set into `GType (Name \"Set\")` in instances.","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/345546020/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/930263145","html_url":"https://github.com/coq/coq/issues/5320#issuecomment-930263145","issue_url":"https://api.github.com/repos/coq/coq/issues/5320","id":930263145,"node_id":"IC_kwDOABUDh843crBp","user":{"login":"SkySkimmer","id":2461932,"node_id":"MDQ6VXNlcjI0NjE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/2461932?v=4","gravatar_id":"","url":"https://api.github.com/users/SkySkimmer","html_url":"https://github.com/SkySkimmer","followers_url":"https://api.github.com/users/SkySkimmer/followers","following_url":"https://api.github.com/users/SkySkimmer/following{/other_user}","gists_url":"https://api.github.com/users/SkySkimmer/gists{/gist_id}","starred_url":"https://api.github.com/users/SkySkimmer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/SkySkimmer/subscriptions","organizations_url":"https://api.github.com/users/SkySkimmer/orgs","repos_url":"https://api.github.com/users/SkySkimmer/repos","events_url":"https://api.github.com/users/SkySkimmer/events{/privacy}","received_events_url":"https://api.github.com/users/SkySkimmer/received_events","type":"User","site_admin":false},"created_at":"2021-09-29T15:03:36Z","updated_at":"2021-09-29T15:03:36Z","author_association":"CONTRIBUTOR","body":"No more universe errors in the given examples (we get other errors instead).","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/930263145/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]