Comment author: @JasonGross

I think the following code should work:

Goal forall A (x y : A) P f (e : x = y)
            (H : match e as e' in (_ = y) return P y e' with
                   | eq_refl => f
                 end =
                 match e as e' in (_ = y) return P y e' with
                   | eq_refl => f
                 end),
       True.
intros.
compute in *.
match goal with
  | [ H : appcontext[match ?E as e' in (_ = y) return (@ ?P y e') with eq_refl => ?f end] |- _ ]
    => idtac
end.

It tells me that there is no match.   Replacing [@ ?P] with [P] does not help.  Replacing [@ ?P y e'] with [_] allows a match.


Comment author: @ppedrot

Fixed in r16649. I hope I did it correctly though (in particular for the order of bound variables). If you have more test cases, you're welcome.


Comment author: @JasonGross

Here are some other test cases that I think should work (I haven't tested them, sorry).

Goal forall A (x y : A) P f (e : x = y)
            (H : match e as e' in (_ = y) return P y e' with
                   | eq_refl => f
                 end =
                 match e as e' in (_ = y) return P y e' with
                   | eq_refl => f
                 end),
       True.
  intros.
  compute in *.
  match goal with
    | [ H : appcontext[match ?E as e' in (_ = y) return (@ ?P y e') with eq_refl => ?f end] |- _ ]
      => idtac
  end.
  match goal with
    | [ H : appcontext[match ?E as e' in (_ = y) return (P y e') with eq_refl => ?f end] |- _ ]
      => idtac
  end.
  match goal with
    | [ H : appcontext[match ?E as e' in (_ = y) return _ with eq_refl => ?f end] |- _ ]
      => idtac
  end.
  match goal with
    | [ H : appcontext[match ?E as e' return _ with eq_refl => ?f end] |- _ ]
      => idtac
  end.
  match goal with
    | [ H : appcontext[match ?E as _ return _ with eq_refl => ?f end] |- _ ]
      => idtac
  end.
  match goal with
    | [ H : appcontext[match ?E as e' with eq_refl => ?f end] |- _ ]
      => idtac
  end.
  match goal with
    | [ H : appcontext[match ?E as _ with eq_refl => ?f end] |- _ ]
      => idtac
  end.
  match goal with
    | [ H : appcontext[match ?E with eq_refl => ?f end] |- _ ]
      => idtac
  end.
Abort.

Goal forall A (x y : A) P f (e : x = y)
            (H : match e as e' in (_ = y) return P with
                   | eq_refl => f
                 end =
                 match e as e' in (_ = y) return P with
                   | eq_refl => f
                 end),
       True.
  intros.
  compute in *.
  match goal with
    | [ H : appcontext[match ?E as e' in (_ = y) return (@ ?P y e') with eq_refl => ?f end] |- _ ]
      => idtac
  end.
  match goal with
    | [ H : appcontext[match ?E as e' in (_ = y) return (@ ?P y) with eq_refl => ?f end] |- _ ]
      => idtac
  end.
  match goal with
    | [ H : appcontext[match ?E as e' in (_ = y) return (?P) with eq_refl => ?f end] |- _ ]
      => idtac
  end.
  match goal with
    | [ H : appcontext[match ?E as e' in (_ = y) return _ with eq_refl => ?f end] |- _ ]
      => idtac
  end.
Abort.

I'll add some more later.


Comment author: @JasonGross

Here are some more:

Goal forall A (x y : A) P f (e : x = y)
            (H : match e in (_ = y) return P with
                   | eq_refl => f
                 end =
                 match e in (_ = y) return P with
                   | eq_refl => f
                 end),
       True.
  intros.
  compute in *.
  match goal with
    | [ H : appcontext[match ?E in (_ = y) return (@ ?P y) with eq_refl => ?f end] |- _ ]
      => idtac
  end.
  match goal with
    | [ H : appcontext[match ?E in (_ = y) return ?P with eq_refl => ?f end] |- _ ]
      => idtac
  end.
  match goal with
    | [ H : appcontext[match ?E in (_ = y) return _ with eq_refl => ?f end] |- _ ]
      => idtac
  end.
Abort.

Goal forall A (x y : A) P f (e : x = y)
            (H : match e as e' in (_ = y) return P y e' with
                   | eq_refl => f
                 end =
                 match e as e' in (_ = y) return P y e' with
                   | eq_refl => f
                 end),
       True.
  intros.
  compute in *.
  match goal with
    | [ H : appcontext[match ?E as e' in (_ = y) return (@ ?P y e') with eq_refl => ?f end] |- _ ]
      => change (match E as e' in (_ = y) return (P y e') with eq_refl => f end = match E as e' in (_ = y) return (P y e') with eq_refl => f end) in H
  end.
Abort.

Goal forall A (x y : A) f (e : x = y)
            (H : match e as e' in (_ = y) return (y = y /\ e' = e') with
                   | eq_refl => f
                 end =
                 match e as e' in (_ = y) return (y = y /\ e' = e') with
                   | eq_refl => f
                 end),
       True.
  intros.
  compute in *.
  match goal with
    | [ H : appcontext[match ?E as e' in (_ = y) return (@ ?P y e') with eq_refl => ?f end] |- _ ]
      => idtac
  end.
Abort.


