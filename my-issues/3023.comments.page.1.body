Comment author: @JasonGross

The second [revert] should not give a type error.   I suspect it has something to do with the type annotation on the [eq_refl] getting lost on [simpl].

Set Implicit Arguments.
Generalizable All Variables.

Record Category {obj : Type} :=
  {
    Morphism : obj -> obj -> Type;

    Identity : forall x, Morphism x x;
    Compose : forall s d d', Morphism d d' -> Morphism s d -> Morphism s d';
    LeftIdentity : forall a b (f : Morphism a b), Compose (Identity b) f = f
  }.


Section DiscreteAdjoints.
  Let C := {|
            Morphism := (fun X Y : Type => X -> Y);
            Identity := (fun X : Type => (fun x : X => x));
            Compose := (fun _ _ _ f g => (fun x => f (g x)));
            LeftIdentity := (fun X Y p => @ eq_refl _ p : (fun x : X => p x) = p)
          |}.
  Variable ObjectFunctor : C = C.

  Goal True.
  Proof.
    subst C.
    revert ObjectFunctor.
    intro ObjectFunctor.
    simpl in ObjectFunctor.
    revert ObjectFunctor. (* Toplevel input, characters 15-35:
Error: Illegal application (Type Error): 
The term "Build_Category" of type
 "forall (obj : Type) (Morphism : obj -> obj -> Type)
    (Identity : forall x : obj, Morphism x x)
    (Compose : forall s d d' : obj,
               Morphism d d' -> Morphism s d -> Morphism s d'),
  (forall (a b : obj) (f : Morphism a b), Compose a b b (Identity b) f = f) ->
  Category"
cannot be applied to the terms
 "Type" : "Type"
 "fun X Y : Type => X -> Y" : "Type -> Type -> Type"
 "fun (X : Type) (x : X) => x" : "forall X : Type, X -> X"
 "fun (s d d' : Type) (f : d -> d') (g : s -> d) (x : s) => f (g x)"
   : "forall s d d' : Type, (d -> d') -> (s -> d) -> s -> d'"
 "fun (X Y : Type) (p : X -> Y) => eq_refl"
   : "forall (X Y : Type) (p : X -> Y), p = p"
The 5th term has type "forall (X Y : Type) (p : X -> Y), p = p"
which should be coercible to
 "forall (a b : Type) (f : (fun X Y : Type => X -> Y) a b),
  (fun (s d d' : Type) (f0 : d -> d') (g : s -> d) (x : s) => f0 (g x)) a b b
    ((fun (X : Type) (x : X) => x) b) f = f". *)


Comment author: @ppedrot

This works in trunk, FWIW.


Comment author: @JasonGross

That's good to know.  I'm running 8.4pl2 on Windows, and it doesn't work there.  Perhaps someone should bisect to figure out what broke it, and backport to the 8.4 branch (assuming there will be an 8.4pl3).  I might set up a script to do this over some time during the next week, if no one does this before me.


Comment author: @JasonGross

git bisect* tells me that it was the following commit which fixed things.  I haven't checked this manually (i.e., making sure that it was this particular error), because coq takes so long to compile.

commit e88df65bbc64b18da34a4233f680829025ca76d9
Author: msozeau <msozeau@ 85f007b7-540e-0410-9357-904b9bb8a0f7>
Date:   Tue Jan 22 13:13:34 2013 +0000

    - Fix evarconv so that we have complete eta-conversion:
      - In the maybeflex/rigid (lambda) case, try eta if the maybeflex doesn't
    actually unfold (e.g. vars, or the transparent state says it's opaque).
      - In the flexible/rigid(lambda) case, try eta if miller-pfenning fails
    (as the stack might not be a purely applicative one). This will zip the
    flexible term (a case construct most likely) and try eta expansion on it.


    git-svn-id: svn+ssh://scm.gforge.inria.fr/svn/coq/trunk@ 16134 85f007b7-540e-0410-9357-904b9bb8a0f7

I'll probably come back with a comment on a manual check soon.



*the script I used was
#!/bin/bash
git clean -xfd
./configure -local -with-doc no -coqide no -nomacintegration -without-geoproof
if [ $? -ne 0 ]; then
    exit 125; # we failed to configure, so we can't test this commit
fi
make -k "$@ "
make -k "$@ "
make -k
make
make install -k "$@ "
make install -k

cat > bug.v <<'__EOF'
Set Implicit Arguments.
Generalizable All Variables.

Record Category {obj : Type} :=
  {
    Morphism : obj -> obj -> Type;

    Identity : forall x, Morphism x x;
    Compose : forall s d d', Morphism d d' -> Morphism s d -> Morphism s d';
    LeftIdentity : forall a b (f : Morphism a b), Compose (Identity b) f = f
  }.


Section DiscreteAdjoints.
  Let C := {|
            Morphism := (fun X Y : Type => X -> Y);
            Identity := (fun X : Type => (fun x : X => x));
            Compose := (fun _ _ _ f g => (fun x => f (g x)));
            LeftIdentity := (fun X Y p => @ eq_refl _ p : (fun x : X => p x) = p)
          |}.
  Variable ObjectFunctor : C = C.

  Goal True.
  Proof.
    subst C.
    revert ObjectFunctor.
    intro ObjectFunctor.
    simpl in ObjectFunctor.
    revert ObjectFunctor.

__EOF

if [ ! -e ./bin/coqtop ]; then
    exit 125 # coqtop does not exist, despite our best efforts, so we can't test for the bug; 125 means "git bisect skip"
fi

ERRSTRING="$(./bin/coqtop < bug.v 2>&1 | grep 'Error')"
if [ ! -z "$ERRSTRING" ]; then
    exit 0; # this is a bad commit, but we must label it "good", because we're looking for the first commit where the bug went away
fi

exit 1; # no error, but we must label it "bad", because we are looking for a commit no later than this one


Comment author: @JasonGross

Manual testing indicates that it does seem to be that commit which fixed the issue.


Comment author: @ppedrot

Should we consider it fixed then?


Comment author: @JasonGross

Unless you want to backport it to 8.4, yes, probably fixed.  I'd suggest adding it as a test-case that should succeed, though.


