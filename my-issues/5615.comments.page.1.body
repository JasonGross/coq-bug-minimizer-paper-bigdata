Comment author: @JasonGross

Consider the following code:

Goal forall x : { x : Set * Set | True }, proj1_sig x = proj1_sig x.
  clear.
  intro.
  let G := match goal with |- ?G => G end in
  do 2 match G with
       | context[proj1_sig ?k]
         => is_var k; destruct k
       end;
    cbv beta iota delta [proj1_sig].

Note that replacing "intro" with "intro x" does not change the behavior, but 
replacing "intro" with "intro X" causes the second run of the [match] to fail.  
I don't think Hugo's autogenerated-name-warning patch has a hope of catching 
this one, because both the context variable and the name passed to [destruct] 
are considered autogenerated.


Comment author: @herbelin

Tricky example but I'm not sure Coq is to blame. A term, G, is used in a context which is not its defining context, so, isn't it expected that strange things happen?

About the x/X naming, it is the user who decided to use x for "x:{x:Set*Set|True}" and for "x:Set*Set", isn't it expected that x works twice (each time in a different context) and X only once?

Shouldn't the function first collect in a fixed typing context all such distinct variables "k" on which a destruct is applicable, then do the "do" on this list?


Comment author: @JasonGross

If by "strange things" you mean proofs of False that [refine] accepts but [Defined] does not, as in bug [BZ#5616](https://github.com/coq/coq/issues?q=is%3Aissue%20%22Original%20bug%20ID%3A%20BZ%235616%22), then, uh, maybe, but probably not?  Anyway, I expect Ltac2 should be able to fix this (or, at least, it will be a proper bug in Ltac2 and not just an insanity in semantics), when I can bind a pointer to a variable in the context, rather than just binding its name.

And, yes, using a list to collect the variables is the right way to do this, but that doesn't mean that I like these semantics.


