[{"url":"https://api.github.com/repos/coq/coq/issues/comments/581005220","html_url":"https://github.com/coq/coq/issues/11502#issuecomment-581005220","issue_url":"https://api.github.com/repos/coq/coq/issues/11502","id":581005220,"node_id":"MDEyOklzc3VlQ29tbWVudDU4MTAwNTIyMA==","user":{"login":"ppedrot","id":1202327,"node_id":"MDQ6VXNlcjEyMDIzMjc=","avatar_url":"https://avatars.githubusercontent.com/u/1202327?v=4","gravatar_id":"","url":"https://api.github.com/users/ppedrot","html_url":"https://github.com/ppedrot","followers_url":"https://api.github.com/users/ppedrot/followers","following_url":"https://api.github.com/users/ppedrot/following{/other_user}","gists_url":"https://api.github.com/users/ppedrot/gists{/gist_id}","starred_url":"https://api.github.com/users/ppedrot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ppedrot/subscriptions","organizations_url":"https://api.github.com/users/ppedrot/orgs","repos_url":"https://api.github.com/users/ppedrot/repos","events_url":"https://api.github.com/users/ppedrot/events{/privacy}","received_events_url":"https://api.github.com/users/ppedrot/received_events","type":"User","site_admin":false},"created_at":"2020-02-01T07:49:02Z","updated_at":"2020-02-01T07:49:02Z","author_association":"MEMBER","body":"AFAICT, the eauto code only takes into account the opacity flag from the hint base, which is consistent with what you observe. Nothing is visible in the log because when unifying two ground terms, the conversion is performed by the kernel rather than the RAKAM.","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/581005220/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/581006013","html_url":"https://github.com/coq/coq/issues/11502#issuecomment-581006013","issue_url":"https://api.github.com/repos/coq/coq/issues/11502","id":581006013,"node_id":"MDEyOklzc3VlQ29tbWVudDU4MTAwNjAxMw==","user":{"login":"ppedrot","id":1202327,"node_id":"MDQ6VXNlcjEyMDIzMjc=","avatar_url":"https://avatars.githubusercontent.com/u/1202327?v=4","gravatar_id":"","url":"https://api.github.com/users/ppedrot","html_url":"https://github.com/ppedrot","followers_url":"https://api.github.com/users/ppedrot/followers","following_url":"https://api.github.com/users/ppedrot/following{/other_user}","gists_url":"https://api.github.com/users/ppedrot/gists{/gist_id}","starred_url":"https://api.github.com/users/ppedrot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ppedrot/subscriptions","organizations_url":"https://api.github.com/users/ppedrot/orgs","repos_url":"https://api.github.com/users/ppedrot/repos","events_url":"https://api.github.com/users/ppedrot/events{/privacy}","received_events_url":"https://api.github.com/users/ppedrot/received_events","type":"User","site_admin":false},"created_at":"2020-02-01T08:02:05Z","updated_at":"2020-02-01T08:02:05Z","author_association":"MEMBER","body":"Furthermore, `eauto` uses `Auto.auto_flags_of_state` to extract its transparent state for full-blown ground conversion, and this means expand everything. So, this is one of the many places where we break the opacity abstraction.","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/581006013/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/581006219","html_url":"https://github.com/coq/coq/issues/11502#issuecomment-581006219","issue_url":"https://api.github.com/repos/coq/coq/issues/11502","id":581006219,"node_id":"MDEyOklzc3VlQ29tbWVudDU4MTAwNjIxOQ==","user":{"login":"ppedrot","id":1202327,"node_id":"MDQ6VXNlcjEyMDIzMjc=","avatar_url":"https://avatars.githubusercontent.com/u/1202327?v=4","gravatar_id":"","url":"https://api.github.com/users/ppedrot","html_url":"https://github.com/ppedrot","followers_url":"https://api.github.com/users/ppedrot/followers","following_url":"https://api.github.com/users/ppedrot/following{/other_user}","gists_url":"https://api.github.com/users/ppedrot/gists{/gist_id}","starred_url":"https://api.github.com/users/ppedrot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ppedrot/subscriptions","organizations_url":"https://api.github.com/users/ppedrot/orgs","repos_url":"https://api.github.com/users/ppedrot/repos","events_url":"https://api.github.com/users/ppedrot/events{/privacy}","received_events_url":"https://api.github.com/users/ppedrot/received_events","type":"User","site_admin":false},"created_at":"2020-02-01T08:05:42Z","updated_at":"2020-02-01T08:05:42Z","author_association":"MEMBER","body":"The following patch is 3-line long and solves the issue:\r\n```diff\r\ndiff --git a/tactics/auto.mli b/tactics/auto.mli\r\nindex 5ae63be539..8224d33716 100644\r\n--- a/tactics/auto.mli\r\n+++ b/tactics/auto.mli\r\n@@ -21,6 +21,7 @@ val compute_secvars : Proofview.Goal.t -> Id.Pred.t\r\n \r\n val default_search_depth : int ref\r\n \r\n+val flags_of_state : TransparentState.t -> Unification.unify_flags\r\n val auto_flags_of_state : TransparentState.t -> Unification.unify_flags\r\n \r\n val connect_hint_clenv\r\ndiff --git a/tactics/eauto.ml b/tactics/eauto.ml\r\nindex 361215bf38..74f883ffde 100644\r\n--- a/tactics/eauto.ml\r\n+++ b/tactics/eauto.ml\r\n@@ -28,7 +28,7 @@ open Locusops\r\n open Hints\r\n open Proofview.Notations\r\n \r\n-let eauto_unif_flags = auto_flags_of_state TransparentState.full\r\n+let eauto_unif_flags = flags_of_state TransparentState.full\r\n \r\n let e_give_exact ?(flags=eauto_unif_flags) c =\r\n   Proofview.Goal.enter begin fun gl ->\r\n@@ -154,7 +154,7 @@ and e_my_find_search env sigma db_list local_db secvars hdc concl =\r\n   let hint_of_db = hintmap_of sigma secvars hdc concl in\r\n   let hintl =\r\n       List.map_append (fun db ->\r\n-        let flags = auto_flags_of_state (Hint_db.transparent_state db) in\r\n+        let flags = flags_of_state (Hint_db.transparent_state db) in\r\n           List.map (fun x -> flags, x) (hint_of_db db)) (local_db::db_list)\r\n   in\r\n   let tac_of_hint =\r\n```\r\nI am afraid nonetheless that this will break any single development using both `Opaque` and `eauto`...","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/581006219/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/581039656","html_url":"https://github.com/coq/coq/issues/11502#issuecomment-581039656","issue_url":"https://api.github.com/repos/coq/coq/issues/11502","id":581039656,"node_id":"MDEyOklzc3VlQ29tbWVudDU4MTAzOTY1Ng==","user":{"login":"JasonGross","id":396076,"node_id":"MDQ6VXNlcjM5NjA3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/396076?v=4","gravatar_id":"","url":"https://api.github.com/users/JasonGross","html_url":"https://github.com/JasonGross","followers_url":"https://api.github.com/users/JasonGross/followers","following_url":"https://api.github.com/users/JasonGross/following{/other_user}","gists_url":"https://api.github.com/users/JasonGross/gists{/gist_id}","starred_url":"https://api.github.com/users/JasonGross/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JasonGross/subscriptions","organizations_url":"https://api.github.com/users/JasonGross/orgs","repos_url":"https://api.github.com/users/JasonGross/repos","events_url":"https://api.github.com/users/JasonGross/events{/privacy}","received_events_url":"https://api.github.com/users/JasonGross/received_events","type":"User","site_admin":false},"created_at":"2020-02-01T15:19:09Z","updated_at":"2020-02-01T15:19:09Z","author_association":"MEMBER","body":"> AFAICT, the eauto code only takes into account the opacity flag from the hint base, which is consistent with what you observe.\r\n\r\nI am still confused why it is unfolding `guard` even though I've marked it as `Hint Opaque`.\r\n\r\n> I am afraid nonetheless that this will break any single development using both Opaque and eauto...\r\n\r\nI'd very much like to see `Set Auto Respects Opaque` or similar.  If the impact is not too large, you can mark it as deprecated.  Or if you can provide a debug setting that allows debugging kernel unification, users could use that + diff to find what behavior changed, and I think it will be not too tricky to fix any given instance. (Famous last words, though.)\r\n\r\nDoesn't this have to happen anyway, though, if `eauto` and `typeclasses eauto with core` are to be unified?","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/581039656/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/581083340","html_url":"https://github.com/coq/coq/issues/11502#issuecomment-581083340","issue_url":"https://api.github.com/repos/coq/coq/issues/11502","id":581083340,"node_id":"MDEyOklzc3VlQ29tbWVudDU4MTA4MzM0MA==","user":{"login":"ppedrot","id":1202327,"node_id":"MDQ6VXNlcjEyMDIzMjc=","avatar_url":"https://avatars.githubusercontent.com/u/1202327?v=4","gravatar_id":"","url":"https://api.github.com/users/ppedrot","html_url":"https://github.com/ppedrot","followers_url":"https://api.github.com/users/ppedrot/followers","following_url":"https://api.github.com/users/ppedrot/following{/other_user}","gists_url":"https://api.github.com/users/ppedrot/gists{/gist_id}","starred_url":"https://api.github.com/users/ppedrot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ppedrot/subscriptions","organizations_url":"https://api.github.com/users/ppedrot/orgs","repos_url":"https://api.github.com/users/ppedrot/repos","events_url":"https://api.github.com/users/ppedrot/events{/privacy}","received_events_url":"https://api.github.com/users/ppedrot/received_events","type":"User","site_admin":false},"created_at":"2020-02-02T00:12:52Z","updated_at":"2020-02-02T00:12:52Z","author_association":"MEMBER","body":"`eauto` has so many quirks that it doesn't seem feasible to me to have a compatibility flag for each of those, even assuming this is possible without virtually reimplementing it...","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/581083340/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]