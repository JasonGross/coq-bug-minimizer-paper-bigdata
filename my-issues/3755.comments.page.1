[{"url":"https://api.github.com/repos/coq/coq/issues/comments/337526386","html_url":"https://github.com/coq/coq/issues/3755#issuecomment-337526386","issue_url":"https://api.github.com/repos/coq/coq/issues/3755","id":337526386,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyNjM4Ng==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-10-20T16:11:31Z","updated_at":"2017-10-18T09:37:56Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\n(* File reduced by coq-bug-finder from original input, then from 6729 lines to 411 lines, then from 148 lines to 115 lines *)\n(* coqc version trunk (October 2014) compiled on Oct 16 2014 13:27:5 with OCaml 4.01.0\n   coqtop version cagnode16:/afs/csail.mit.edu/u/j/jgross/coq-trunk,trunk (d0da8a75cd1d600afa68da5e995d39a415234c2d) *)\nRequire Import Coq.Lists.List.\nSet Printing Universes.\nAxiom smem : Type.\nRecord settings := { }.\nSet Implicit Arguments.\nSection machine.\n  Variables pc state : Type.\n  Inductive propX (i := pc) (j := state) : list Type -> Type :=\n  | Imply : forall G, propX G -> propX G -> propX G\n  | Exists : forall G A, (A -> propX G) -> propX G.\n  Definition PropX := propX nil.\n  Definition spec := state -> PropX.\n  Definition codeSpec := pc -> option spec.\n  Section specs.\n    Variable specs : codeSpec.\n    Inductive valid (i := specs) (G : list PropX) : PropX -> Prop :=.\n    Inductive normal (G : list PropX) : PropX -> Prop :=    with neutral (G : list PropX) : PropX -> Prop := .\n    Lemma normal_neutral_weaken : forall G,\n                                    (forall Q, normal G Q\n                                               -> (forall G', incl G G'\n                                                              -> normal G' Q))\n                                    /\\ (forall Q, neutral G Q\n                                                  -> (forall G', incl G G'\n                                                                 -> neutral G' Q)).\n      admit.\n    Defined.\n    Definition interp := valid nil.\n  End specs.\nEnd machine.\nInfix \"--->\" := Imply (at level 86, right associativity).\nModule Type SepTheoryX.\n  Parameter hprop : forall (pcType stateType : Type), list Type -> Type.\n  Section Env.\n    Variable pcType : Type.\n    Variable stateType : Type.\n    Parameter settings : Type.\n    Parameter heq : forall (cs : codeSpec pcType stateType),\n                      hprop pcType stateType nil -> hprop pcType stateType nil -> Prop.\n    Parameter ex : forall {sos} (T : Type) (p : T -> hprop pcType stateType sos),\n                     hprop pcType stateType sos.\n  End Env.\nEnd SepTheoryX.\nModule SepTheoryX_Ext (ST : SepTheoryX).\n  Section param.\n    Variables pcT stT : Type.\n\n    Variable type : Type.\n    Variable typeD : type -> Type.\n    Definition existsEach (sos : list Type) (ts : list type) (f : list (@ sigT _ typeD) -> ST.hprop pcT stT sos)\n    : ST.hprop pcT stT sos.\n      admit.\n    Defined.\n    Lemma existsEach_cons : forall cs v vs P,\n                              ST.heq cs (existsEach (v :: vs) P)\n                                     (ST.ex (fun x => existsEach vs (fun env => P (@ existT _ _ v x :: env)))).\n      admit.\n    Defined.\n  End param.\n  Module Make <: SepTheoryX.\n    Section env.\n      Variable pcType : Type.\n      Variable stateType : Type.\n      Definition settings := settings.\n      Definition hprop (sos : list Type) : Type := settings -> propX pcType stateType sos.\n      Variable cs : codeSpec pcType stateType.\n      Definition himp (gl gr : hprop nil) : Prop.\n        exact (forall s, interp cs (gl s ---> gr s)).\n      Defined.\n      Definition heq (gl gr : hprop nil) : Prop.\n        exact (himp gl gr /\\ himp gr gl).\n      Defined.\n      Definition ex sos (T : Type) (p : T -> hprop sos) : hprop sos.\n        exact (fun s => Exists (fun t => p t s)).\n      Defined.\n    End env.\n  End Make. (* Toplevel input, characters 15-24:\nError: Universe inconsistency. Cannot enforce Top.302 = Top.320 because\nTop.320 <= Top.284 < Coq.Lists.List.252 <= Coq.Lists.List.15\n<= Coq.Init.Specif.8 <= Top.302). *)\n\n\nNote 1: removing the \"<: SepTheoryX\" removes the universe inconsistency.\n\nNote 2: This is from bedrock.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337526386/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337526389","html_url":"https://github.com/coq/coq/issues/3755#issuecomment-337526389","issue_url":"https://api.github.com/repos/coq/coq/issues/3755","id":337526389,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyNjM4OQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2015-01-18T05:04:07Z","updated_at":"2017-10-18T09:37:56Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nShorter version:\n\n(* File reduced by coq-bug-finder from original input, then from 6729 lines to \n411 lines, then from 148 lines to 115 lines, then from 99 lines to 70 lines, \nthen from 85 lines to 63 lines, then from 76 lines to 55 lines *)\n(* coqc version trunk (January 2015) compiled on Jan 17 2015 21:58:5 with OCaml \n4.01.0\n   coqtop version cagnode15:/afs/csail.mit.edu/u/j/jgross/coq-trunk,trunk \n(9e6b28c04ad98369a012faf3bd4d630cf123a473) *)\nRequire Import Coq.Lists.List.\nSet Printing Universes.\nRecord settings := { }.\nSet Implicit Arguments.\nSection machine.\n  Variables pc state : Type.\n  Inductive propX (i := pc) (j := state) : list Type -> Type :=\n  | Exists : forall G A, (A -> propX G) -> propX G.\n  Definition PropX := propX nil.\n  Section specs.\n    Inductive normal (G : list PropX) : PropX -> Prop :=    with neutral (G : \nlist PropX) : PropX -> Prop := .\n    Lemma normal_neutral_weaken : forall G,\n                                    (forall Q, normal G Q\n                                               -> (forall G', incl G G'\n                                                              -> normal G' Q)).\n      admit.\n    Defined.\n  End specs.\nEnd machine.\nModule Type SepTheoryX.\n  Parameter hprop : forall (pcType stateType : Type), Type.\n  Section Env.\n    Variable pcType : Type.\n    Variable stateType : Type.\n    Parameter ex : forall (T : Type) (p : T -> hprop pcType stateType),\n                     hprop pcType stateType.\n  End Env.\nEnd SepTheoryX.\nDeclare Module ST : SepTheoryX.\nSection param.\n  Variables pcT stT : Type.\n\n  Variable type : Type.\n  Variable typeD : type -> Type.\n  Variable STheq :  ST.hprop pcT stT -> Prop.\n  Lemma existsEach_cons : forall v (P : list (@ sigT _ typeD) -> ST.hprop pcT \nstT),\n                            STheq\n                              (ST.ex (fun x => P (@ existT _ _ v x :: nil))).\n    admit.\n  Defined.\nEnd param.\nModule Make <: SepTheoryX.\n  Section env.\n    Variable pcType : Type.\n    Variable stateType : Type.\n    Definition hprop : Type := settings -> PropX pcType stateType.\n    Definition ex (T : Type) (p : T -> hprop) : hprop.\n      exact (fun s => Exists (fun t => p t s)).\n    Defined.\n  End env.\nEnd Make.\n\n(* Toplevel input, characters 15-24:\nError: Universe inconsistency. Cannot enforce Top.19 = Top.29 because Top.29\n<= Top.7 < Coq.Lists.List.301 <= Coq.Lists.List.13 <= Coq.Init.Specif.8\n<= Top.19). *)\n\n(* Toplevel input, characters 15-24:\nError: Universe inconsistency. Cannot enforce Top.19 = Top.29 because\nTop.29 <= (ex)\nTop.7 < (normal_neutral_weaken)\nCoq.Lists.List.301 <= (incl_tl)\nCoq.Lists.List.13 <=  (nil_cons)\nCoq.Init.Specif.8 <= (existsEach_cons)\nTop.19). *)\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337526389/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337526393","html_url":"https://github.com/coq/coq/issues/3755#issuecomment-337526393","issue_url":"https://api.github.com/repos/coq/coq/issues/3755","id":337526393,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyNjM5Mw==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2015-01-18T05:48:50Z","updated_at":"2017-10-18T09:37:56Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nHere's an even shorter version.  (Thanks for the pointer, Mattheiu!)  I'm not \nsure you'll get much shorter than this:\n\n(* File reduced by coq-bug-finder from original input, then from 6729 lines to \n411 lines, then from 148 lines to 115 lines, then from 99 lines to 70 lines, \nthen from 85 lines to 63 lines, then from 76 lines to 55 lines, then from 61 \nlines to 17 lines *)\n(* coqc version trunk (January 2015) compiled on Jan 17 2015 21:58:5 with OCaml \n4.01.0\n   coqtop version cagnode15:/afs/csail.mit.edu/u/j/jgross/coq-trunk,trunk \n(9e6b28c04ad98369a012faf3bd4d630cf123a473) *)\nSet Printing Universes.\nSection param.\n  Variable typeD : Set -> Set.\n  Variable STex : forall (T : Type) (p : T -> Set), Set.\n  Definition existsEach_cons' v (P : @ sigT _ typeD -> Set) :=\n    @ STex _ (fun x => P (@ existT _ _ v x)).\n  Check @ existT _ _ STex STex.\n(* Toplevel input, characters 15-43:\nError: Universe inconsistency. Cannot enforce Top.1 <\nCoq.Init.Specif.8 because Coq.Init.Specif.8 <= Top.1). *)\n\nA workaround is to replace [@ STex _ (fun x => P (@ existT _ _ v x))] with [@ STex \n_ (fun x : typeD v => P (@ existT _ _ v x))]; this is sufficient to get rid of \nthe universe inconsistency.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337526393/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337526395","html_url":"https://github.com/coq/coq/issues/3755#issuecomment-337526395","issue_url":"https://api.github.com/repos/coq/coq/issues/3755","id":337526395,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyNjM5NQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2015-02-14T12:34:29Z","updated_at":"2017-10-18T09:37:56Z","author_association":"CONTRIBUTOR","body":"Comment author: @mattam82\n\nNice job tracking this down, the fix became obvious! It's fixed in 8.5 now, and I think no such errors can happen again.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337526395/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]