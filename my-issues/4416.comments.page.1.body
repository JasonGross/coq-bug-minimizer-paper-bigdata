Comment author: @JasonGross

Goal forall y : sumbool True True, exists x, x = sumbool_rect (fun _ => bool) (fun _ => true) (fun _ => true) y.
  eexists.
  match goal with
    | [ |- _ = sumbool_rect ?T (fun b => _) (fun c => _) ?v ]
      => refine (_ : sumbool_rect T (fun b => _) (fun c => _) v = _)
  end;
    match goal with
      | [ |- _ = sumbool_rect ?T (fun b => _) (fun c => _) ?v ]
        => refine (sumbool_rect
                     (fun sb => sumbool_rect T _ _ sb = sumbool_rect T _ _ sb)
                     _
                     _
                     v)
      | [ |- bool ] => idtac
      | [ |- ?G ] => idtac G
    end. (* Error: Incorrect number of goals (expected 4 tactics). *)


This works in 8.4, but is broken in 8.5 (95a4fcf8cd36e29034e886682ed3a6e2914ce04f).


Comment author: @silene

Here is a smaller testcase:

Goal exists x, x.
refine (ex_intro _ _ _).
all: match goal with _ => refine (_ _) end.
(* Error: Incorrect number of goals (expected 8 tactics). *)


Comment author: @herbelin

A version of Guillaume's example, adapted to new "shelving" refine, and not using all:

Goal exists x, x.
unshelve refine (ex_intro _ _ _); match goal with _ => refine (_ _) end.
(* Error: Incorrect number of goals (expected 2 tactics). *)

Jason's example is somehow not significant in 8.4 in the sense that the first refine generates only 1 goal, while the problem is apparently with refine generating more than 1 goal. In particular, it works equally in 8.5 with the new shelving default of refine.


Comment author: @silene

*** Bug [BZ#5027](https://github.com/coq/coq/issues?q=is%3Aissue%20%22Original%20bug%20ID%3A%20BZ%235027%22) has been marked as a duplicate of this bug. ***


Comment author: @mattam82

It looks not so easy to fix, and seems to be due to the way Ftactic is implemented.
I can fix it by forcing a focusing ftactic to run its continuation on only a part of the "Depends" results. This seem to be due to the fact that in the refine (_ _) case, the call on the second subgoal produces 3 goals but also shelves the 2 goals produced by the first refine (_ _) which were recorded as Depends. Ftactic should maybe keep the goal -> return value associations.

let run m k = m >>= function
| Uniform v -> k v
| Depends l ->
  Proofview.numgoals >>= fun ngls ->
  let tacs = List.map k (CList.firstn ngls l) in
  Proofview.tclDISPATCH tacs

I'm a bit surprised because I don't see how Ftactic.run gets called here. Arnaud can certainly explain all this. My fix only works for the all:refine (_ _) variants, not the two above with [match goal with ...].


Comment author: @aspiwack

Even simpler example

    Goal exists x, x.
      unshelve refine (ex_intro _ _ _).
      all:simple refine (_ _) end.

It doesn't look like it's related to shelving (since there is no shelving in `simple refine`), rather it is due to the fact that refining the first goal gives a partial solution to the second one. The semantic of dispatch, in that case, is to drop the tactic application on the goals which received a partial solution.

I haven't been able to figure out where this exception comes from yet. Maybe it's Ftactic as Mathieu proposes. Which would probably mean digging in the code of TACTIC EXTEND, because I don't see it called in the code path above. It's interesting that this behaviour is preserved by `match goal`, though, but that the following doesn't fail:

    Goal exists x, x.
      unshelve refine (ex_intro _ _ _).
      all:[> simple refine (_ _) end ..].


Comment author: @jonleivent

This variation on Arnaud's example:

Goal exists x, x.
      simple refine (ex_intro _ _ _); [..|simple refine (_ _)].
      simple refine (_ _).

in 8.6, produces the error:
Anomaly: cannot define an evar twice. Please report.

I hope that's a clue...


Comment author: @aspiwack

I think IÂ understand the bug now. Though I have no way yet to prove that it's what happens in the case at hand (it's probably not the cause of Jonathan's above example, however, so we may have to file another issue about that).

So the issue is with `tclDISPATCHL`: `tclDISPATCHL` collects return value per goal, which are aggregated into a list, _then_ it removes goals which have been solved by side-effect with `advance`. So at this point, the size of the return list and the number of goals have desynced.

There is also a minor issue in `Ftactics.bind` in the case Depends/Uniform where a `tclUNIT (List.map (fun _ -> a) l)` should be replaced by `tclDISPATCHL (List.map (fun _ -> tclUNIT a))` when `tclDISPATCHL` is fixed.

I will need to sleep on it to come up with a not-too-hacky solution. But if I'm right, it shouldn't be too hard to fix (though `tclDISPATCHL` may end up being more verbose).


Comment author: @jonleivent

I have another case of strange behavior following unshelve (but not Unshelve).  In this case, typeclass resolution is running when it shouldn't following unshelve, but not following Unshelve all else being equal.  I will work to find a simple test case - but the question is, should I file it here or start another bug report?  I'm still hoping all of these strange behaviors following unshelve or simple refine are related, despite what Arnaud said.


Comment author: @jonleivent

Here's that case where unshelve causes typeclass resolution when it shouldn't happen, but Unshelve doesn't - just in case it is a clue to this bug.  The problem occurs in both 8.5pl2 and 8.6:

(*Pose an open constr to prevent immediate typeclass resolution in holes:*)
Tactic Notation "opose" open_constr(x) "as" ident(H) := pose x as H.

Inductive vect A : nat -> Type :=
| vnil : vect A 0
| vcons : forall (h:A) (n:nat), vect A n -> vect A (S n).

Class Eqdec A := eqdec : forall a b : A, {a=b}+{a<>b}.

Require Bool.

Instance Bool_eqdec : Eqdec bool := Bool.bool_dec.

Context `{vect_sigT_eqdec : forall A : Type, Eqdec A -> Eqdec {a : nat & vect A a}}.

Typeclasses eauto := debug.

Goal True.
  unshelve opose (@ vect_sigT_eqdec _ _ _ _) as H.
  all:cycle 2.
  eapply existT. (*BUG: Why does this do typeclass resolution in the evar?*)
Abort.

Goal True.
  opose (@ vect_sigT_eqdec _ _ _ _) as H.
  Unshelve.
  all:cycle 3.
  eapply existT. (*This does no typeclass resultion, which is correct.*)
Abort.


Comment author: @aspiwack

I was wrong: the code is in `Ftactic` after all (`tclDISPATCH` has the correct behaviour: it returns one result per _original_ goal (except those which were skipped)).

I had to add some filtering in `Ftactic.bind` in order to preserve the invariant (number of results = number of goals). The last two example from Jonathan are not solved by this. They should probably be moved in separate issues.

Fixed as https://github.com/coq/coq/pull/308 .


Comment author: @jonleivent

Solving part of this is good news.  But, I was hoping that "things go bonkers after unshelve" would be one bug.

I will move my examples, and wait for Arnaud's fix before filing any others I hit.


Comment author: @jonleivent

other examples moved to:
https://coq.inria.fr/bugs/show_bug.cgi?id=5122
https://coq.inria.fr/bugs/show_bug.cgi?id=5123


Comment author: @maximedenes

Fixed by Arnaud's PR#308 in 8.5, will be merged to 8.6.


