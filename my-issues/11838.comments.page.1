[{"url":"https://api.github.com/repos/coq/coq/issues/comments/600099142","html_url":"https://github.com/coq/coq/issues/11838#issuecomment-600099142","issue_url":"https://api.github.com/repos/coq/coq/issues/11838","id":600099142,"node_id":"MDEyOklzc3VlQ29tbWVudDYwMDA5OTE0Mg==","user":{"login":"ppedrot","id":1202327,"node_id":"MDQ6VXNlcjEyMDIzMjc=","avatar_url":"https://avatars.githubusercontent.com/u/1202327?v=4","gravatar_id":"","url":"https://api.github.com/users/ppedrot","html_url":"https://github.com/ppedrot","followers_url":"https://api.github.com/users/ppedrot/followers","following_url":"https://api.github.com/users/ppedrot/following{/other_user}","gists_url":"https://api.github.com/users/ppedrot/gists{/gist_id}","starred_url":"https://api.github.com/users/ppedrot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ppedrot/subscriptions","organizations_url":"https://api.github.com/users/ppedrot/orgs","repos_url":"https://api.github.com/users/ppedrot/repos","events_url":"https://api.github.com/users/ppedrot/events{/privacy}","received_events_url":"https://api.github.com/users/ppedrot/received_events","type":"User","site_admin":false},"created_at":"2020-03-17T14:23:34Z","updated_at":"2020-03-17T14:44:18Z","author_association":"MEMBER","body":"The typing rule for let-ins in the kernel suffers from the same defect as the one from the pretyper (#10206), namely that `let x : T := M in N` is given type `U{x := M}` provided `M : T` and `x : T ⊢ N : U`. That is, it eagerly substitutes the let-bound variable in the type. Substitution is linear, and in your example, you have a linear chain of let-bindings, thus resulting in a quadratic behaviour.\r\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/600099142/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/600099625","html_url":"https://github.com/coq/coq/issues/11838#issuecomment-600099625","issue_url":"https://api.github.com/repos/coq/coq/issues/11838","id":600099625,"node_id":"MDEyOklzc3VlQ29tbWVudDYwMDA5OTYyNQ==","user":{"login":"ppedrot","id":1202327,"node_id":"MDQ6VXNlcjEyMDIzMjc=","avatar_url":"https://avatars.githubusercontent.com/u/1202327?v=4","gravatar_id":"","url":"https://api.github.com/users/ppedrot","html_url":"https://github.com/ppedrot","followers_url":"https://api.github.com/users/ppedrot/followers","following_url":"https://api.github.com/users/ppedrot/following{/other_user}","gists_url":"https://api.github.com/users/ppedrot/gists{/gist_id}","starred_url":"https://api.github.com/users/ppedrot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ppedrot/subscriptions","organizations_url":"https://api.github.com/users/ppedrot/orgs","repos_url":"https://api.github.com/users/ppedrot/repos","events_url":"https://api.github.com/users/ppedrot/events{/privacy}","received_events_url":"https://api.github.com/users/ppedrot/received_events","type":"User","site_admin":false},"created_at":"2020-03-17T14:24:28Z","updated_at":"2020-03-17T14:24:28Z","author_association":"MEMBER","body":"(I think I remember trying to fix this some time ago, to discover that it was breaking everything.)","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/600099625/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/600113046","html_url":"https://github.com/coq/coq/issues/11838#issuecomment-600113046","issue_url":"https://api.github.com/repos/coq/coq/issues/11838","id":600113046,"node_id":"MDEyOklzc3VlQ29tbWVudDYwMDExMzA0Ng==","user":{"login":"ppedrot","id":1202327,"node_id":"MDQ6VXNlcjEyMDIzMjc=","avatar_url":"https://avatars.githubusercontent.com/u/1202327?v=4","gravatar_id":"","url":"https://api.github.com/users/ppedrot","html_url":"https://github.com/ppedrot","followers_url":"https://api.github.com/users/ppedrot/followers","following_url":"https://api.github.com/users/ppedrot/following{/other_user}","gists_url":"https://api.github.com/users/ppedrot/gists{/gist_id}","starred_url":"https://api.github.com/users/ppedrot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ppedrot/subscriptions","organizations_url":"https://api.github.com/users/ppedrot/orgs","repos_url":"https://api.github.com/users/ppedrot/repos","events_url":"https://api.github.com/users/ppedrot/events{/privacy}","received_events_url":"https://api.github.com/users/ppedrot/received_events","type":"User","site_admin":false},"created_at":"2020-03-17T14:49:55Z","updated_at":"2020-03-17T14:49:55Z","author_association":"MEMBER","body":"Small report: the situation is not *so* bad after tweaking the rule. It breaks one file in the stdlib due to Funind not being able to generate an induction principle for a term containing lets, and 16 tests from the test-suite. Some of them are expected, but some are more worrying.\r\n\r\nNonetheless, this doesn't fix the quadratic Qed, since the native compiler features a similar behaviour which is essentially the Coq equivalent of [an OCaml bug](https://github.com/ocaml/ocaml/issues/7826).","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/600113046/reactions","total_count":1,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":1,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/600159286","html_url":"https://github.com/coq/coq/issues/11838#issuecomment-600159286","issue_url":"https://api.github.com/repos/coq/coq/issues/11838","id":600159286,"node_id":"MDEyOklzc3VlQ29tbWVudDYwMDE1OTI4Ng==","user":{"login":"JasonGross","id":396076,"node_id":"MDQ6VXNlcjM5NjA3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/396076?v=4","gravatar_id":"","url":"https://api.github.com/users/JasonGross","html_url":"https://github.com/JasonGross","followers_url":"https://api.github.com/users/JasonGross/followers","following_url":"https://api.github.com/users/JasonGross/following{/other_user}","gists_url":"https://api.github.com/users/JasonGross/gists{/gist_id}","starred_url":"https://api.github.com/users/JasonGross/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JasonGross/subscriptions","organizations_url":"https://api.github.com/users/JasonGross/orgs","repos_url":"https://api.github.com/users/JasonGross/repos","events_url":"https://api.github.com/users/JasonGross/events{/privacy}","received_events_url":"https://api.github.com/users/JasonGross/received_events","type":"User","site_admin":false},"created_at":"2020-03-17T16:14:19Z","updated_at":"2020-03-17T16:14:19Z","author_association":"MEMBER","body":"It seems to me that the problem here is that substitution is linear.  This seems like the same kind of issue as https://github.com/coq/coq/issues/11151 (cbv is quadratic), where rather than eagerly substituting we want to have some sort of pending substitutions/liftings structure that is linear to execute and constant to update.  Is something like this possible?","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/600159286/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/600160722","html_url":"https://github.com/coq/coq/issues/11838#issuecomment-600160722","issue_url":"https://api.github.com/repos/coq/coq/issues/11838","id":600160722,"node_id":"MDEyOklzc3VlQ29tbWVudDYwMDE2MDcyMg==","user":{"login":"JasonGross","id":396076,"node_id":"MDQ6VXNlcjM5NjA3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/396076?v=4","gravatar_id":"","url":"https://api.github.com/users/JasonGross","html_url":"https://github.com/JasonGross","followers_url":"https://api.github.com/users/JasonGross/followers","following_url":"https://api.github.com/users/JasonGross/following{/other_user}","gists_url":"https://api.github.com/users/JasonGross/gists{/gist_id}","starred_url":"https://api.github.com/users/JasonGross/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JasonGross/subscriptions","organizations_url":"https://api.github.com/users/JasonGross/orgs","repos_url":"https://api.github.com/users/JasonGross/repos","events_url":"https://api.github.com/users/JasonGross/events{/privacy}","received_events_url":"https://api.github.com/users/JasonGross/received_events","type":"User","site_admin":false},"created_at":"2020-03-17T16:16:53Z","updated_at":"2020-03-17T16:16:53Z","author_association":"MEMBER","body":"Taking a step back: is there any way to build a proof of `fnd n` for some `n`, without needing to build a term of type `forall n, fnd n` (i.e., without reflection), which does not incur quadratic cost?","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/600160722/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/600160775","html_url":"https://github.com/coq/coq/issues/11838#issuecomment-600160775","issue_url":"https://api.github.com/repos/coq/coq/issues/11838","id":600160775,"node_id":"MDEyOklzc3VlQ29tbWVudDYwMDE2MDc3NQ==","user":{"login":"ppedrot","id":1202327,"node_id":"MDQ6VXNlcjEyMDIzMjc=","avatar_url":"https://avatars.githubusercontent.com/u/1202327?v=4","gravatar_id":"","url":"https://api.github.com/users/ppedrot","html_url":"https://github.com/ppedrot","followers_url":"https://api.github.com/users/ppedrot/followers","following_url":"https://api.github.com/users/ppedrot/following{/other_user}","gists_url":"https://api.github.com/users/ppedrot/gists{/gist_id}","starred_url":"https://api.github.com/users/ppedrot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ppedrot/subscriptions","organizations_url":"https://api.github.com/users/ppedrot/orgs","repos_url":"https://api.github.com/users/ppedrot/repos","events_url":"https://api.github.com/users/ppedrot/events{/privacy}","received_events_url":"https://api.github.com/users/ppedrot/received_events","type":"User","site_admin":false},"created_at":"2020-03-17T16:16:58Z","updated_at":"2020-03-17T16:16:58Z","author_association":"MEMBER","body":"The type-checker needs to return a type, so it has to perform the substitution somehow. Introducing a let-binding is the only way I know to do that at the level of kernel terms. Note that #11151 is quite distinct, because it has to do with the reduction machine(s) which are using a different representation, since they're acting on closures.","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/600160775/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/600162887","html_url":"https://github.com/coq/coq/issues/11838#issuecomment-600162887","issue_url":"https://api.github.com/repos/coq/coq/issues/11838","id":600162887,"node_id":"MDEyOklzc3VlQ29tbWVudDYwMDE2Mjg4Nw==","user":{"login":"ppedrot","id":1202327,"node_id":"MDQ6VXNlcjEyMDIzMjc=","avatar_url":"https://avatars.githubusercontent.com/u/1202327?v=4","gravatar_id":"","url":"https://api.github.com/users/ppedrot","html_url":"https://github.com/ppedrot","followers_url":"https://api.github.com/users/ppedrot/followers","following_url":"https://api.github.com/users/ppedrot/following{/other_user}","gists_url":"https://api.github.com/users/ppedrot/gists{/gist_id}","starred_url":"https://api.github.com/users/ppedrot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ppedrot/subscriptions","organizations_url":"https://api.github.com/users/ppedrot/orgs","repos_url":"https://api.github.com/users/ppedrot/repos","events_url":"https://api.github.com/users/ppedrot/events{/privacy}","received_events_url":"https://api.github.com/users/ppedrot/received_events","type":"User","site_admin":false},"created_at":"2020-03-17T16:20:38Z","updated_at":"2020-03-17T16:20:38Z","author_association":"MEMBER","body":"> Taking a step back: is there any way to build a proof of fnd n for some n, without needing to build a term of type forall n, fnd n (i.e., without reflection), which does not incur quadratic cost?\r\n\r\nThe size of the proof term is linear, you could generate it directly in Ltac2 using the Unsafe API, or maybe using `uconstr` in Ltac1. Essentially, the point it to lift the let-binding at the meta-level.","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/600162887/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/600163942","html_url":"https://github.com/coq/coq/issues/11838#issuecomment-600163942","issue_url":"https://api.github.com/repos/coq/coq/issues/11838","id":600163942,"node_id":"MDEyOklzc3VlQ29tbWVudDYwMDE2Mzk0Mg==","user":{"login":"JasonGross","id":396076,"node_id":"MDQ6VXNlcjM5NjA3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/396076?v=4","gravatar_id":"","url":"https://api.github.com/users/JasonGross","html_url":"https://github.com/JasonGross","followers_url":"https://api.github.com/users/JasonGross/followers","following_url":"https://api.github.com/users/JasonGross/following{/other_user}","gists_url":"https://api.github.com/users/JasonGross/gists{/gist_id}","starred_url":"https://api.github.com/users/JasonGross/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JasonGross/subscriptions","organizations_url":"https://api.github.com/users/JasonGross/orgs","repos_url":"https://api.github.com/users/JasonGross/repos","events_url":"https://api.github.com/users/JasonGross/events{/privacy}","received_events_url":"https://api.github.com/users/JasonGross/received_events","type":"User","site_admin":false},"created_at":"2020-03-17T16:22:30Z","updated_at":"2020-03-17T16:22:30Z","author_association":"MEMBER","body":"Ah, I see, the change you made to the typing rule is to type `let x : T := M in N : U` as `let x : T := M in U`.  This is an interesting proposal.  I think @andres-erbsen might have interesting ideas here.","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/600163942/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/600164722","html_url":"https://github.com/coq/coq/issues/11838#issuecomment-600164722","issue_url":"https://api.github.com/repos/coq/coq/issues/11838","id":600164722,"node_id":"MDEyOklzc3VlQ29tbWVudDYwMDE2NDcyMg==","user":{"login":"ppedrot","id":1202327,"node_id":"MDQ6VXNlcjEyMDIzMjc=","avatar_url":"https://avatars.githubusercontent.com/u/1202327?v=4","gravatar_id":"","url":"https://api.github.com/users/ppedrot","html_url":"https://github.com/ppedrot","followers_url":"https://api.github.com/users/ppedrot/followers","following_url":"https://api.github.com/users/ppedrot/following{/other_user}","gists_url":"https://api.github.com/users/ppedrot/gists{/gist_id}","starred_url":"https://api.github.com/users/ppedrot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ppedrot/subscriptions","organizations_url":"https://api.github.com/users/ppedrot/orgs","repos_url":"https://api.github.com/users/ppedrot/repos","events_url":"https://api.github.com/users/ppedrot/events{/privacy}","received_events_url":"https://api.github.com/users/ppedrot/received_events","type":"User","site_admin":false},"created_at":"2020-03-17T16:23:46Z","updated_at":"2020-03-17T16:23:46Z","author_association":"MEMBER","body":"The change in the kernel is much more innocuous than in the pretyper, I might try to submit a PR if I manage to understand how to fix funind and friends.","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/600164722/reactions","total_count":1,"+1":0,"-1":0,"laugh":0,"hooray":1,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/600167331","html_url":"https://github.com/coq/coq/issues/11838#issuecomment-600167331","issue_url":"https://api.github.com/repos/coq/coq/issues/11838","id":600167331,"node_id":"MDEyOklzc3VlQ29tbWVudDYwMDE2NzMzMQ==","user":{"login":"JasonGross","id":396076,"node_id":"MDQ6VXNlcjM5NjA3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/396076?v=4","gravatar_id":"","url":"https://api.github.com/users/JasonGross","html_url":"https://github.com/JasonGross","followers_url":"https://api.github.com/users/JasonGross/followers","following_url":"https://api.github.com/users/JasonGross/following{/other_user}","gists_url":"https://api.github.com/users/JasonGross/gists{/gist_id}","starred_url":"https://api.github.com/users/JasonGross/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JasonGross/subscriptions","organizations_url":"https://api.github.com/users/JasonGross/orgs","repos_url":"https://api.github.com/users/JasonGross/repos","events_url":"https://api.github.com/users/JasonGross/events{/privacy}","received_events_url":"https://api.github.com/users/JasonGross/received_events","type":"User","site_admin":false},"created_at":"2020-03-17T16:27:24Z","updated_at":"2020-03-17T16:27:24Z","author_association":"MEMBER","body":"> The size of the proof term is linear, you could generate it directly in Ltac2 using the Unsafe API, or maybe using uconstr in Ltac1. Essentially, the point it to lift the let-binding at the meta-level.\r\n\r\nThe let-bound one cannot be generated with uconstr, because there's no way to make an open uconstr term, and uconstr doesn't evaluate Ltac under binders.  I can make a version that uses lambdas rather than let's with uconstr.  This is besides the point, though, as I already generate the proof term in linear time using Ltac2 in the initial comment of this issue.  The problem is that checking it still incurs quadratic overhead.  The question I intended to ask was not how to build the linear proof term, but how to both build and check it in linear time.  I've managed the first in a variety of ways, but not the second.","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/600167331/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/600171158","html_url":"https://github.com/coq/coq/issues/11838#issuecomment-600171158","issue_url":"https://api.github.com/repos/coq/coq/issues/11838","id":600171158,"node_id":"MDEyOklzc3VlQ29tbWVudDYwMDE3MTE1OA==","user":{"login":"JasonGross","id":396076,"node_id":"MDQ6VXNlcjM5NjA3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/396076?v=4","gravatar_id":"","url":"https://api.github.com/users/JasonGross","html_url":"https://github.com/JasonGross","followers_url":"https://api.github.com/users/JasonGross/followers","following_url":"https://api.github.com/users/JasonGross/following{/other_user}","gists_url":"https://api.github.com/users/JasonGross/gists{/gist_id}","starred_url":"https://api.github.com/users/JasonGross/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JasonGross/subscriptions","organizations_url":"https://api.github.com/users/JasonGross/orgs","repos_url":"https://api.github.com/users/JasonGross/repos","events_url":"https://api.github.com/users/JasonGross/events{/privacy}","received_events_url":"https://api.github.com/users/JasonGross/received_events","type":"User","site_admin":false},"created_at":"2020-03-17T16:34:49Z","updated_at":"2020-03-17T16:34:49Z","author_association":"MEMBER","body":"> The change in the kernel is much more innocuous than in the pretyper, I might try to submit a PR if I manage to understand how to fix funind and friends\r\n\r\nAh, neat!  I'd be a big fan of this.  I'm very curious for a diagnosis of what's going wrong here (also curious about the test-suite cases that are expected to fail)","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/600171158/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/600179449","html_url":"https://github.com/coq/coq/issues/11838#issuecomment-600179449","issue_url":"https://api.github.com/repos/coq/coq/issues/11838","id":600179449,"node_id":"MDEyOklzc3VlQ29tbWVudDYwMDE3OTQ0OQ==","user":{"login":"JasonGross","id":396076,"node_id":"MDQ6VXNlcjM5NjA3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/396076?v=4","gravatar_id":"","url":"https://api.github.com/users/JasonGross","html_url":"https://github.com/JasonGross","followers_url":"https://api.github.com/users/JasonGross/followers","following_url":"https://api.github.com/users/JasonGross/following{/other_user}","gists_url":"https://api.github.com/users/JasonGross/gists{/gist_id}","starred_url":"https://api.github.com/users/JasonGross/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JasonGross/subscriptions","organizations_url":"https://api.github.com/users/JasonGross/orgs","repos_url":"https://api.github.com/users/JasonGross/repos","events_url":"https://api.github.com/users/JasonGross/events{/privacy}","received_events_url":"https://api.github.com/users/JasonGross/received_events","type":"User","site_admin":false},"created_at":"2020-03-17T16:49:21Z","updated_at":"2020-03-17T16:49:21Z","author_association":"MEMBER","body":"@ppedrot I also wonder if function application could benefit from a similar typing rule, introducing let binders rather than eagerly substituting.  (I think @andres-erbsen has a unified theory of how to build a proof engineering API that is performant at scale which mandates certain decisions for questions like this, and that's what I'm using to guide my thoughts and proposals here.)","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/600179449/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]