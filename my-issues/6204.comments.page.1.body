The time is spent in `Proofview.partition_unifiable` which is I guess called by `Proofview.shelve_unifiable`. The algorithm looks more cubic w.r.t. to the number of let-bindings in your program than exponential, but that's the idea.
Also, for the record this particular example shows an interesting consequence of the fix we settled on for bug #4547. Namely, dynamic evar name-picking is linear in the number of undefined evars. This causes an important slowdown when printing the goal generated by the refine, which is quite annoying. I wonder whether this occurs in practice, but it's still kind of annoying.
I will note that, contrary to what this example might look like, this is literally code that I was writing for fiat-crypto, not at all changed or simplified.
@psteckler had a branch where evar dependencies were cached that could maybe avoid this blowup.
@JasonGross I've got a fix at ppedrot/coq@9eaeb46 but I'm afraid it doesn't fully solve the issue on your example. We would need some kind of memoizing on hypotheses to work around this. Still, I'm wondering how you come up with real-world examples that are exactly this.

@mattam82 We should have a try, but I don't think it'll help a lot here, at least not more than my patch.
@ppedrot Isn't the kind of memoizing of dependencies you ask for exactly what the patch by Paul provides?
@mattam82 No, the granularity is not the same. AFAIR, Paul's patch memoizes the free evars of a goal, which is essentially what my patch does internally to the `shelve_unifiable` function. As the latter is only called once, there would be no difference between Paul's patch and mine.

The problem rather stems from the fact that prefixes of the hypotheses get repeated again and again, so that one keeps recomputing the free variables of terms that recursively mention evars because of let-bindings. What we would need to do instead is to realize that two hypotheses are the same across calls to `Evd.evars_of_named_context`, which is much more fine-grained.
@JasonGross Could you try your actual example on [this branch](https://github.com/ppedrot/coq/tree/share-evar-unifiable)? It makes the provided example compile in about 90s by performing the memoization I mentioned. The pendulum machine seems to be down currently so that I can't test it on other developments, but at least let's check it's OK for you.
@ppedrot sure, I'll try that, though I think I'll eventually give this up as a failed experiment.  The issue is that I have a record whose fields are records whose fields are records, etc, and many of the fields depend on other ones.  I want to create a lemma that constructs the nested record and flattens all the recursive structure, mainly because Coq is slow at large goals and so I don't want any of the constructor arguments to mention previous ones that don't need to be mentioned.  I also want to do a few simplifications at this time, like breaking apart a few cases. Since there are a few hundred fields, all told, and I didn't want to write out all the types by hand, I tried to build the constructor interactively in proof mode.  This monstrosity is part of is what resulted.
FTR, here is the timings for my branch:
```
┌──────────────────────────┬─────────────────────────┬───────────────────────────────────────┬───────────────────────────────────────┬─────────────────────────┬─────────────────┐
│                          │      user time [s]      │              CPU cycles               │           CPU instructions            │  max resident mem [KB]  │   mem faults    │
│                          │                         │                                       │                                       │                         │                 │
│             package_name │     NEW     OLD PDIFF   │            NEW            OLD PDIFF   │            NEW            OLD PDIFF   │     NEW     OLD PDIFF   │ NEW OLD PDIFF   │
├──────────────────────────┼─────────────────────────┼───────────────────────────────────────┼───────────────────────────────────────┼─────────────────────────┼─────────────────┤
│      coq-formal-topology │   33.58   34.30 -2.10 % │    93246267703    94478356665 -1.30 % │   124832893991   126880155898 -1.61 % │  482580  482548 +0.01 % │   0   0  +nan % │
├──────────────────────────┼─────────────────────────┼───────────────────────────────────────┼───────────────────────────────────────┼─────────────────────────┼─────────────────┤
│              coq-bignums │   73.70   75.06 -1.81 % │   205510611830   209035082815 -1.69 % │   280215398949   285221267175 -1.76 % │  535068  535148 -0.01 % │   0   0  +nan % │
├──────────────────────────┼─────────────────────────┼───────────────────────────────────────┼───────────────────────────────────────┼─────────────────────────┼─────────────────┤
│          coq-fiat-crypto │ 3680.19 3720.19 -1.08 % │ 10241944397715 10337753790047 -0.93 % │ 17431799446724 17539744646553 -0.62 % │ 3282612 3282520 +0.00 % │   0   0  +nan % │
├──────────────────────────┼─────────────────────────┼───────────────────────────────────────┼───────────────────────────────────────┼─────────────────────────┼─────────────────┤
│               coq-sf-vfa │   18.72   18.90 -0.95 % │    51882958596    52211120443 -0.63 % │    71169145950    71216492183 -0.07 % │  537228  537148 +0.01 % │   0   0  +nan % │
├──────────────────────────┼─────────────────────────┼───────────────────────────────────────┼───────────────────────────────────────┼─────────────────────────┼─────────────────┤
│                coq-color │  566.30  571.60 -0.93 % │  1584704591184  1596002600694 -0.71 % │  1998749010946  2016130464660 -0.86 % │ 1489884 1488072 +0.12 % │   0   0  +nan % │
├──────────────────────────┼─────────────────────────┼───────────────────────────────────────┼───────────────────────────────────────┼─────────────────────────┼─────────────────┤
│                  coq-vst │ 2169.00 2186.97 -0.82 % │  6051048959451  6097585071404 -0.76 % │  8827184102157  8891482299291 -0.72 % │ 1952268 1951684 +0.03 % │   0   0  +nan % │
├──────────────────────────┼─────────────────────────┼───────────────────────────────────────┼───────────────────────────────────────┼─────────────────────────┼─────────────────┤
│    coq-mathcomp-fingroup │   59.21   59.45 -0.40 % │   163858814786   164133415094 -0.17 % │   229519875997   229611133215 -0.04 % │  530996  531180 -0.03 % │   0   0  +nan % │
├──────────────────────────┼─────────────────────────┼───────────────────────────────────────┼───────────────────────────────────────┼─────────────────────────┼─────────────────┤
│            coq-fiat-core │  119.11  119.54 -0.36 % │   315798247451   315598750895 +0.06 % │   424340026648   424138908723 +0.05 % │  503100  502628 +0.09 % │   0   0  +nan % │
├──────────────────────────┼─────────────────────────┼───────────────────────────────────────┼───────────────────────────────────────┼─────────────────────────┼─────────────────┤
│     coq-mathcomp-algebra │  169.24  169.70 -0.27 % │   470393699404   471604030723 -0.26 % │   668826488555   668745662230 +0.01 % │  590344  590216 +0.02 % │   0   0  +nan % │
├──────────────────────────┼─────────────────────────┼───────────────────────────────────────┼───────────────────────────────────────┼─────────────────────────┼─────────────────┤
│         coq-fiat-parsers │  673.45  675.22 -0.26 % │  1862771918468  1868387722845 -0.30 % │  3032828820777  3029658716335 +0.10 % │ 3524160 3535120 -0.31 % │   0   0  +nan % │
├──────────────────────────┼─────────────────────────┼───────────────────────────────────────┼───────────────────────────────────────┼─────────────────────────┼─────────────────┤
│   coq-mathcomp-character │  268.66  269.18 -0.19 % │   747271780839   748850878279 -0.21 % │  1101133084899  1101052595773 +0.01 % │  981820  981676 +0.01 % │   0   0  +nan % │
├──────────────────────────┼─────────────────────────┼───────────────────────────────────────┼───────────────────────────────────────┼─────────────────────────┼─────────────────┤
│              coq-unimath │ 1278.32 1280.63 -0.18 % │  3562154428554  3570299526878 -0.23 % │  6134403787248  6134243602011 +0.00 % │ 1151236 1151152 +0.01 % │   0   0  +nan % │
├──────────────────────────┼─────────────────────────┼───────────────────────────────────────┼───────────────────────────────────────┼─────────────────────────┼─────────────────┤
│   coq-mathcomp-odd_order │ 1380.20 1382.25 -0.15 % │  3846840237495  3852530906433 -0.15 % │  6710695470685  6704025062598 +0.10 % │ 1121760 1110212 +1.04 % │   0   0  +nan % │
├──────────────────────────┼─────────────────────────┼───────────────────────────────────────┼───────────────────────────────────────┼─────────────────────────┼─────────────────┤
│       coq-mathcomp-field │  452.14  452.67 -0.12 % │  1259505964509  1259765078067 -0.02 % │  2096522398007  2096334576336 +0.01 % │  727632  728424 -0.11 % │   0   0  +nan % │
├──────────────────────────┼─────────────────────────┼───────────────────────────────────────┼───────────────────────────────────────┼─────────────────────────┼─────────────────┤
│               coq-geocoq │ 3107.60 3105.96 +0.05 % │  8657731118044  8656660556570 +0.01 % │ 14332118546796 14317413368033 +0.10 % │ 1251244 1250240 +0.08 % │   0   0  +nan % │
├──────────────────────────┼─────────────────────────┼───────────────────────────────────────┼───────────────────────────────────────┼─────────────────────────┼─────────────────┤
│ coq-mathcomp-real_closed │  167.05  166.86 +0.11 % │   464238277524   463607571775 +0.14 % │   712364776837   712386438149 -0.00 % │  731992  732108 -0.02 % │   0   0  +nan % │
├──────────────────────────┼─────────────────────────┼───────────────────────────────────────┼───────────────────────────────────────┼─────────────────────────┼─────────────────┤
│    coq-mathcomp-solvable │  190.32  190.03 +0.15 % │   528727395357   528737457800 -0.00 % │   769362720651   768374423724 +0.13 % │  716384  714844 +0.22 % │   0   0  +nan % │
├──────────────────────────┼─────────────────────────┼───────────────────────────────────────┼───────────────────────────────────────┼─────────────────────────┼─────────────────┤
│                coq-sf-lf │   15.44   15.41 +0.19 % │    42662576777    42777256049 -0.27 % │    59965377449    59976406958 -0.02 % │  418932  419092 -0.04 % │   0   0  +nan % │
├──────────────────────────┼─────────────────────────┼───────────────────────────────────────┼───────────────────────────────────────┼─────────────────────────┼─────────────────┤
│           coq-coquelicot │   74.90   74.73 +0.23 % │   206378236491   205876623977 +0.24 % │   259532610271   259542304648 -0.00 % │  661864  662160 -0.04 % │   0   0  +nan % │
├──────────────────────────┼─────────────────────────┼───────────────────────────────────────┼───────────────────────────────────────┼─────────────────────────┼─────────────────┤
│               coq-sf-plf │   42.06   41.86 +0.48 % │   116927037906   116756645807 +0.15 % │   153653982349   153499797858 +0.10 % │  518396  518388 +0.00 % │   0   0  +nan % │
├──────────────────────────┼─────────────────────────┼───────────────────────────────────────┼───────────────────────────────────────┼─────────────────────────┼─────────────────┤
│             coq-compcert │  806.21  801.24 +0.62 % │  2245998306164  2233678892282 +0.55 % │  3409160091269  3415189691290 -0.18 % │ 1387916 1387936 -0.00 % │   0   0  +nan % │
├──────────────────────────┼─────────────────────────┼───────────────────────────────────────┼───────────────────────────────────────┼─────────────────────────┼─────────────────┤
│   coq-mathcomp-ssreflect │   38.52   38.14 +1.00 % │   105852136086   105708894129 +0.14 % │   131473780154   131427378753 +0.04 % │  477720  477768 -0.01 % │   0   0  +nan % │
├──────────────────────────┼─────────────────────────┼───────────────────────────────────────┼───────────────────────────────────────┼─────────────────────────┼─────────────────┤
│                coq-flocq │   58.22   57.58 +1.11 % │   159298617117   158842008925 +0.29 % │   205528222266   205369189844 +0.08 % │  644024  643952 +0.01 % │   0   0  +nan % │
└──────────────────────────┴─────────────────────────┴───────────────────────────────────────┴───────────────────────────────────────┴─────────────────────────┴─────────────────┘


PDIFF = proportional difference between measurements done for the NEW and the OLD Coq version
      = (NEW_measurement - OLD_measurement) / OLD_measurement * 100%

NEW = 8eea5a5ecdd33d85e4e7d42408360fff68e04f5d
OLD = d0c42fea9edfef645a822e9f12d475c205f93932
```
Not sure if worth a PR. It definitely helps in corner-cases, but it's unclear if this will be observable in the wild.
There's also undefined_evars_of_evar_info that could benefit from this and is heavily used in typeclass resolution. In @psteckler's cache we could make it persist a little more than this if I remember correctly, why not do the same here?
I'm concerned about storing cache data in evar maps. It can lead to unexpected memory issues as in #4547. I'd rather go for caches that are scoped to a given operation and thus short-lived.
I understand your concern but in this case I think having it global would be very helpful and avoid a lot of repeated computations, but I might be wrong. The memory hog issue was due to a poor implementation mainly, no?
> I think having it global would be very helpful and avoid a lot of repeated computations, but I might be wrong

That's not clear, because it is often needed to recompute the free evars, as this is changed at every evar instantiation.

> The memory hog issue was due to a poor implementation mainly, no?

Not quite. Storing data for every undefined evar can be incredibly costly, as there is no way to garbage collect it when the evar is defined. We should enrich the Evd API for that, but even so, it may result counter-productive.
@ppedrot The file that I encountered this in is https://github.com/JasonGross/fiat-crypto/blob/zzz-no-reification-big-evars/src/Specific/Framework/OptimizedPipeline.v, specifically https://github.com/JasonGross/fiat-crypto/blob/cc6175f/src/Specific/Framework/OptimizedPipeline.v#L454-L553

I'm working on rerunning it with that branch, now
@ppedrot On my example: If I `clear` things manually, it takes 2.24s to run the statement.  If I don't clear, and don't use this branch, it takes an estimated 2^99 s.  If I don't clear, and do use this branch, it takes 80 s.  So it looks like a pretty good speedup.
