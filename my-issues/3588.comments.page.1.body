Comment author: @JasonGross

(* File reduced by coq-bug-finder from original input, then from 6764 lines to 263 lines, then from 263 lines to 115 lines, then from 90 lines to 71 lines *)
(* coqc version trunk (September 2014) compiled on Sep 6 2014 6:15:6 with OCaml 4.01.0
   coqtop version cagnode17:/afs/csail.mit.edu/u/j/jgross/coq-trunk,trunk (3ea6d6888105edd5139ae0a4d8f8ecdb586aff6c) *)

Generalizable All Variables.
Definition compose {A B C : Type} (g : B -> C) (f : A -> B) := fun x => g (f x).
Inductive paths {A : Type} (a : A) : A -> Type := idpath : paths a a.
Arguments idpath {A a} , [A] a.
Notation "x = y :> A" := (@ paths A x y) : type_scope.
Notation "x = y" := (x = y :>_) : type_scope.
Delimit Scope path_scope with path.
Local Open Scope path_scope.
Definition concat {A : Type} {x y z : A} (p : x = y) (q : y = z) : x = z := match p, q with idpath, idpath => idpath end.
Definition inverse {A : Type} {x y : A} (p : x = y) : y = x := match p with idpath => idpath end.
Notation "1" := idpath : path_scope.
Notation "p @  q" := (concat p q) (at level 20) : path_scope.
Notation "p ^" := (inverse p) (at level 3, format "p '^'") : path_scope.
Definition transport {A : Type} (P : A -> Type) {x y : A} (p : x = y) (u : P x) : P y := match p with idpath => u end.
Notation "p # x" := (transport _ p x) (right associativity, at level 65, only parsing) : path_scope.
Class IsEquiv {A B : Type} (f : A -> B) := { equiv_inv : B -> A }.
Axiom isequiv_compose : forall `{IsEquiv A B f} `{IsEquiv B C g}, IsEquiv (compose g f).
Module NonPrim.
  Record sigT {A} (P : A -> Type) := existT { projT1 : A ; projT2 : P projT1 }.
  Notation "{ x : A & B }" := (sigT (A := A) (fun x : A => B)) : type_scope.
  Arguments projT1 {_ _} _.
  Arguments projT2 {_ _} _.
  Arguments existT {_} _ _ _.
  Notation "( x ; y )" := (existT _ x y) : fibration_scope.
  Open Scope fibration_scope.
  Notation pr1 := projT1.
  Notation pr2 := projT2.
  Notation "x .1" := (pr1 x) (at level 3, format "x '.1'") : fibration_scope.
  Notation "x .2" := (pr2 x) (at level 3, format "x '.2'") : fibration_scope.
  Axiom path_sigma_uncurried : forall {A : Type} (P : A -> Type) (u v : sigT P)
                                      (pq : {p : u.1 = v.1 &  p # u.2 = v.2}),
                                 u = v.
  Axiom isequiv_path_sigma : forall `{P : A -> Type} {u v : sigT P}, IsEquiv (path_sigma_uncurried P u v).

  Definition ExtensionAlong {A B : Type} (f : A -> B)
             (P : B -> Type) (d : forall x:A, P (f x))
    := { s : forall y:B, P y & forall x:A, s (f x) = d x }.

  Definition path_extension {A B : Type} {f : A -> B}
             {P : B -> Type} {d : forall x:A, P (f x)}
             (ext ext' : ExtensionAlong f P d)
  : (ExtensionAlong f
                    (fun y => pr1 ext y = pr1 ext' y)
                    (fun x => pr2 ext x @  (pr2 ext' x)^))
    -> ext = ext'.
  Proof.
    apply (compose (path_sigma_uncurried _ _ _)).
    admit.
  Defined.

  Global Instance isequiv_path_extension {A B : Type} {f : A -> B}
         {P : B -> Type} {d : forall x:A, P (f x)}
         (ext ext' : ExtensionAlong f P d)
  : IsEquiv (path_extension ext ext') | 0.
  Proof.
    apply @ isequiv_compose.
    2: refine (@ isequiv_path_sigma _ _ _ _) || fail "sanity check".
    Undo.
    2: apply @ isequiv_path_sigma || fail "actual test". (* succeeds *)
  Admitted.
End NonPrim.

Module Prim.
  Set Primitive Projections.
  Record sigT {A} (P : A -> Type) := existT { projT1 : A ; projT2 : P projT1 }.
  Notation "{ x : A & B }" := (sigT (A := A) (fun x : A => B)) : type_scope.
  Arguments projT1 {_ _} _.
  Arguments projT2 {_ _} _.
  Arguments existT {_} _ _ _.
  Notation "( x ; y )" := (existT _ x y) : fibration_scope.
  Open Scope fibration_scope.
  Notation pr1 := projT1.
  Notation pr2 := projT2.
  Notation "x .1" := (pr1 x) (at level 3, format "x '.1'") : fibration_scope.
  Notation "x .2" := (pr2 x) (at level 3, format "x '.2'") : fibration_scope.
  Axiom path_sigma_uncurried : forall {A : Type} (P : A -> Type) (u v : sigT P)
                                      (pq : {p : u.1 = v.1 &  p # u.2 = v.2}),
                                 u = v.
  Axiom isequiv_path_sigma : forall `{P : A -> Type} {u v : sigT P}, IsEquiv (path_sigma_uncurried P u v).

  Definition ExtensionAlong {A B : Type} (f : A -> B)
             (P : B -> Type) (d : forall x:A, P (f x))
    := { s : forall y:B, P y & forall x:A, s (f x) = d x }.

  Definition path_extension {A B : Type} {f : A -> B}
             {P : B -> Type} {d : forall x:A, P (f x)}
             (ext ext' : ExtensionAlong f P d)
  : (ExtensionAlong f
                    (fun y => pr1 ext y = pr1 ext' y)
                    (fun x => pr2 ext x @  (pr2 ext' x)^))
    -> ext = ext'.
  Proof.
    apply (compose (path_sigma_uncurried _ _ _)).    admit.
  Defined.

  Global Instance isequiv_path_extension {A B : Type} {f : A -> B}
         {P : B -> Type} {d : forall x:A, P (f x)}
         (ext ext' : ExtensionAlong f P d)
  : IsEquiv (path_extension ext ext') | 0.
  Proof.
    apply @ isequiv_compose.
    2: refine (@ isequiv_path_sigma _ _ _ _) || fail "sanity check".
    Undo.
    2: apply @ isequiv_path_sigma || fail "actual test". (* fails *)
  Admitted.
End Prim.


Comment author: @mattam82

Fixed too, because I forced type unifications for projections.

*** This bug has been marked as a duplicate of bug [BZ#3504](https://github.com/coq/coq/issues?q=is%3Aissue%20%22Original%20bug%20ID%3A%20BZ%233504%22) ***


