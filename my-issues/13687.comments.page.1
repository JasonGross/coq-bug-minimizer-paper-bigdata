[{"url":"https://api.github.com/repos/coq/coq/issues/comments/752217135","html_url":"https://github.com/coq/coq/issues/13687#issuecomment-752217135","issue_url":"https://api.github.com/repos/coq/coq/issues/13687","id":752217135,"node_id":"MDEyOklzc3VlQ29tbWVudDc1MjIxNzEzNQ==","user":{"login":"ppedrot","id":1202327,"node_id":"MDQ6VXNlcjEyMDIzMjc=","avatar_url":"https://avatars.githubusercontent.com/u/1202327?v=4","gravatar_id":"","url":"https://api.github.com/users/ppedrot","html_url":"https://github.com/ppedrot","followers_url":"https://api.github.com/users/ppedrot/followers","following_url":"https://api.github.com/users/ppedrot/following{/other_user}","gists_url":"https://api.github.com/users/ppedrot/gists{/gist_id}","starred_url":"https://api.github.com/users/ppedrot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ppedrot/subscriptions","organizations_url":"https://api.github.com/users/ppedrot/orgs","repos_url":"https://api.github.com/users/ppedrot/repos","events_url":"https://api.github.com/users/ppedrot/events{/privacy}","received_events_url":"https://api.github.com/users/ppedrot/received_events","type":"User","site_admin":false},"created_at":"2020-12-29T19:37:59Z","updated_at":"2020-12-29T19:38:19Z","author_association":"MEMBER","body":"Unfortunately, it's fairly typical of Ltac1 runtime distinction of tactics vs everything else. The match goal trick is standard to force the evaluation of its arguments.\r\n\r\nWe may make it the default behaviour but I am not sure that doing that is as expressive as the current situation. In that case you'd have to wrap the Ltac2 closure in an `idtac; ...` block, but then the interpreter might start doing weird things when you want to force it further. The documentation states that you shouldn't use the return value of the thunk, so with the right point of view, the current semantics forces you to rely on undefined behaviour *somehow*...\r\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/752217135/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/752286531","html_url":"https://github.com/coq/coq/issues/13687#issuecomment-752286531","issue_url":"https://api.github.com/repos/coq/coq/issues/13687","id":752286531,"node_id":"MDEyOklzc3VlQ29tbWVudDc1MjI4NjUzMQ==","user":{"login":"JasonGross","id":396076,"node_id":"MDQ6VXNlcjM5NjA3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/396076?v=4","gravatar_id":"","url":"https://api.github.com/users/JasonGross","html_url":"https://github.com/JasonGross","followers_url":"https://api.github.com/users/JasonGross/followers","following_url":"https://api.github.com/users/JasonGross/following{/other_user}","gists_url":"https://api.github.com/users/JasonGross/gists{/gist_id}","starred_url":"https://api.github.com/users/JasonGross/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JasonGross/subscriptions","organizations_url":"https://api.github.com/users/JasonGross/orgs","repos_url":"https://api.github.com/users/JasonGross/repos","events_url":"https://api.github.com/users/JasonGross/events{/privacy}","received_events_url":"https://api.github.com/users/JasonGross/received_events","type":"User","site_admin":false},"created_at":"2020-12-30T00:33:47Z","updated_at":"2020-12-30T00:33:47Z","author_association":"MEMBER","body":"Hm, I guess we already see the same problem with `Tactic Notation` in just Ltac1:\r\n```coq\r\nTactic Notation \"tac3\" constr(x) := idtac \"run 3\".\r\nGoal True.\r\n  let _ := tac3 I in idtac.\r\n```\r\nemits no output.\r\n\r\nI don't *think* evaluating things early is any less expressive, since I think you can always add an `idtac; ` in front as you say.  What weird things are you imagining the interpreter might do?","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/752286531/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]