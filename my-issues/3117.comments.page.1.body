Comment author: @JasonGross

I would like support for writing things like

Record Foo := Eval simpl in { foo := 1 + 1; bar : 1 + 1 = 2 }.
Inductive Bar := Eval simpl in
| bar1 : 1 + 1 = 2 -> Bar
| bar2 : let x := 1 in x = x -> Bar.
Notation Baz := (Eval simpl in 1 + 1).

and have it be equivalent to

Record Foo := { foo := 2; bar : 2 = 2 }.
Inductive Bar := Eval simpl in
| bar1 : 2 = 2 -> Bar
| bar2 : 1 = 1 -> Bar.
Notation Baz := 2.


That is, I would like [Eval <strategy> in ...] to be usable as an only parsing notation, which gets run at type inference time.

This is useful, for example, when notations or type inference give me a complicated type signature which is simplifiable in my particular case, if not in the general case, and I don't want to have to simplify the type of the projection every time I want to rewrite with it.


Comment author: @ppedrot

The record case is essentially solved in trunk now that you can have tactics in terms. You can indeed write something like:

Ltac ev t :=
  let t := eval simpl in t in
  exact t.

Record Foo := { foo := $(ev (1 + 1))$; bar : $(ev (1 + 1 = 2))$ }.
Inductive Bar :=
| bar1 : $(ev (1 + 1 = 2))$ -> Bar
| bar2 : $(ev (let x := 1 in x = x))$ -> Bar.

It is slightly more verbose than what you propose, but this is also a bit more fine-grained, and more general.

The notation feature is not fixable easily, because it is not defined at a semantic level, but rather as a purely syntactic artifact. I doubt that we will provide you with such a feature one day, so I assume marking this bug as solved is OK.


Comment author: @JasonGross

Great!  Thanks!  Can I have notations that evaluate to such a tactic, which is then run at notation substitution time?  Something like

Notation "a s+ b" := ($(let t := constr:(a + b) in let t' := eval simpl in t in exact t')).

And then have

Check 1 s+ 2.

give me 3?


Comment author: @JasonGross

Or is that what you meant by "because it is not defined at a semantic level, but rather as a purely syntactic artifact"?  If so, why would substituting in the $() syntax at the appropriate place not work?  (That is, I can't think of an example that requires notations to work at a semantic level rather than at a syntactic level, though I can see how it might require substituting notations earlier in the process.)


Comment author: @ppedrot

I mean that the interpretation of notations is made at a much earlier stage than something being able to compute. It is a mere syntactic substitution done before interpretation. For the recall, there are three levels of terms in Coq.

1. The constr_expr, which is what the user sees and writes.
2. The glob_constr, which is an intermediary stage where things get disambiguated (absolute names, etc.).
3. The constr, which is kernel-level terms.

Computation is typically made at level 3, while notations are lost on the translation stage from 1 to 2.

In addition, there is some purple magic involved to write recursive notations like the one of lists, where computation is unlikely to have any meaning at all.


Comment author: @JasonGross

Ltac splus a b := let t := constr:(a + b) in let t' := eval simpl in t in exact t'.
Notation "a 's+' b" := ($(splus a b)$) (at level 70).

Toplevel input, characters 0-53:
> Notation "a 's+' b" := ($(splus a b)$) (at level 70).
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Error: a is unbound in the right-hand side.


I'd expect the notation to go through fine, and then when I do

Check 1 s+ 2.

I expect it to first become "Check $(splus 1 2)$." and then evaluate that.  Is this doable?  (Should I open a new issue for this?)


