[{"url":"https://api.github.com/repos/coq/coq/issues/comments/337520980","html_url":"https://github.com/coq/coq/issues/3427#issuecomment-337520980","issue_url":"https://api.github.com/repos/coq/coq/issues/3427","id":337520980,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyMDk4MA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-07-16T08:30:55Z","updated_at":"2017-10-18T09:22:33Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nThis was broken at one point, but is now fixed in trunk, so I'm just making this bug report to have a number for a regression test.\n\n(* -*- mode: coq; coq-prog-args: (\"-emacs\" \"-indices-matter\") -*- *)\n(* File reduced by coq-bug-finder from original input, then from 0 lines to 7171 lines, then from 7184 lines to 558 lines, then from 556 lines to 209 lines *)\nGeneralizable All Variables.\nSet Universe Polymorphism.\nNotation Type0 := Set.\nNotation idmap := (fun x => x).\nDefinition compose {A B C : Type} (g : B -> C) (f : A -> B) := fun x => g (f x).\nNotation \"g 'o' f\" := (compose g f) (at level 40, left associativity) : function_scope.\nOpen Scope function_scope.\nInductive paths {A : Type} (a : A) : A -> Type := idpath : paths a a where \"x = y\" := (@ paths _ x y) : type_scope.\nArguments idpath {A a} , [A] a.\nDelimit Scope path_scope with path.\nLocal Open Scope path_scope.\nDefinition concat {A : Type} {x y z : A} (p : x = y) (q : y = z) : x = z := match p, q with idpath, idpath => idpath end.\nDefinition inverse {A : Type} {x y : A} (p : x = y) : y = x := match p with idpath => idpath end.\nNotation \"1\" := idpath : path_scope.\nNotation \"p @  q\" := (concat p q) (at level 20) : path_scope.\nNotation \"p ^\" := (inverse p) (at level 3) : path_scope.\nDefinition transport {A : Type} (P : A -> Type) {x y : A} (p : x = y) (u : P x) : P y := match p with idpath => u end.\nNotation \"p # x\" := (transport _ p x) (right associativity, at level 65, only parsing) : path_scope.\nDefinition ap {A B:Type} (f:A -> B) {x y:A} (p:x = y) : f x = f y := match p with idpath => idpath end.\nDefinition pointwise_paths {A} {P:A->Type} (f g:forall x:A, P x) := forall x:A, f x = g x.\nNotation \"f == g\" := (pointwise_paths f g) (at level 70, no associativity) : type_scope.\nDefinition apD10 {A} {B:A->Type} {f g : forall x, B x} (h:f=g) : forall x, f x = g x := fun x => match h with idpath => idpath end.\nDefinition Sect {A B : Type} (s : A -> B) (r : B -> A) := forall x : A, r (s x) = x.\nClass IsEquiv {A B : Type} (f : A -> B) := BuildIsEquiv {\n                                               equiv_inv : B -> A ;\n                                               eisretr : Sect equiv_inv f;\n                                               eissect : Sect f equiv_inv;\n                                               eisadj : forall x : A, eisretr (f x) = ap f (eissect x)\n                                             }.\nRecord Equiv A B := BuildEquiv {\n                        equiv_fun :> A -> B ;\n                        equiv_isequiv :> IsEquiv equiv_fun\n                      }.\n\nDelimit Scope equiv_scope with equiv.\n\nNotation \"A <~> B\" := (Equiv A B) (at level 85) : equiv_scope.\n\nNotation \"f ^-1\" := (@ equiv_inv _ _ f _) (at level 3) : equiv_scope.\n\nClass Contr_internal (A : Type) := BuildContr {\n                                       center : A ;\n                                       contr : (forall y : A, center = y)\n                                     }.\n\nInductive trunc_index : Type :=\n| minus_two : trunc_index\n| trunc_S : trunc_index -> trunc_index.\n\nFixpoint nat_to_trunc_index (n : nat) : trunc_index\n  := match n with\n       | 0 => trunc_S (trunc_S minus_two)\n       | S n' => trunc_S (nat_to_trunc_index n')\n     end.\n\nCoercion nat_to_trunc_index : nat >-> trunc_index.\n\nFixpoint IsTrunc_internal (n : trunc_index) (A : Type) : Type :=\n  match n with\n    | minus_two => Contr_internal A\n    | trunc_S n' => forall (x y : A), IsTrunc_internal n' (x = y)\n  end.\n\nNotation minus_one:=(trunc_S minus_two).\n\nClass IsTrunc (n : trunc_index) (A : Type) : Type :=\n  Trunc_is_trunc : IsTrunc_internal n A.\n\nNotation Contr := (IsTrunc minus_two).\nNotation IsHProp := (IsTrunc minus_one).\nNotation IsHSet := (IsTrunc 0).\n\nClass Funext :=\n  { isequiv_apD10 :> forall (A : Type) (P : A -> Type) f g, IsEquiv (@ apD10 A P f g) }.\n\nDefinition concat_pV {A : Type} {x y : A} (p : x = y) :\n  p @  p^ = 1\n  :=\n    match p with idpath => 1 end.\n\nDefinition concat_Vp {A : Type} {x y : A} (p : x = y) :\n  p^ @  p = 1\n  :=\n    match p with idpath => 1 end.\n\nDefinition transport_pp {A : Type} (P : A -> Type) {x y z : A} (p : x = y) (q : y = z) (u : P x) :\n  p @  q # u = q # p # u :=\n  match q with idpath =>\n               match p with idpath => 1 end\n  end.\n\nDefinition transport2 {A : Type} (P : A -> Type) {x y : A} {p q : x = y}\n           (r : p = q) (z : P x)\n: p # z = q # z\n  := ap (fun p' => p' # z) r.\n\nInductive Unit : Type0 :=\n  tt : Unit.\n\nInstance contr_unit : Contr Unit | 0 := let x := {|\n                                              center := tt;\n                                              contr := fun t : Unit => match t with tt => 1 end\n                                            |} in x.\n\nInstance trunc_succ `{IsTrunc n A} : IsTrunc (trunc_S n) A | 1000.\nadmit.\nDefined.\n\nRecord hProp := hp { hproptype :> Type ; isp : IsHProp hproptype}.\nDefinition Unit_hp:hProp:=(hp Unit _).\n\nGlobal Instance isequiv_ap_hproptype `{Funext} X Y : IsEquiv (@ ap _ _ hproptype X Y).\nadmit.\nDefined.\n\nDefinition path_hprop `{Funext} X Y := (@ ap _ _ hproptype X Y)^-1%equiv.\n\nRecord hSet := BuildhSet {setT:> Type; iss :> IsHSet setT}.\nLocal Open Scope equiv_scope.\n\nInstance isequiv_path {A B : Type} (p : A = B)\n: IsEquiv (transport (fun X:Type => X) p) | 0\n  := BuildIsEquiv _ _ _ (transport (fun X:Type => X) p^)\n                  (fun b => ((transport_pp idmap p^ p b)^ @  transport2 idmap (concat_Vp p) b))\n                  (fun a => ((transport_pp idmap p p^ a)^ @  transport2 idmap (concat_pV p) a))\n                  (fun a => match p in _ = C return\n                                  (transport_pp idmap p^ p (transport idmap p a))^ @ \n                                                                                     transport2 idmap (concat_Vp p) (transport idmap p a) =\n                                  ap (transport idmap p) ((transport_pp idmap p p^ a) ^ @ \n                                                                                          transport2 idmap (concat_pV p) a) with idpath => 1 end).\n\nDefinition equiv_path (A B : Type) (p : A = B) : A <~> B\n  := BuildEquiv _ _ (transport (fun X:Type => X) p) _.\n\nClass Univalence := {\n                     isequiv_equiv_path :> forall (A B : Type), IsEquiv (equiv_path A B)\n                   }.\n\nSection Univalence.\n  Context `{Univalence}.\n\n  Definition path_universe_uncurried {A B : Type} (f : A <~> B) : A = B\n    := (equiv_path A B)^-1 f.\nEnd Univalence.\n\nLocal Inductive minus1Trunc (A :Type) : Type :=\n  min1 : A -> minus1Trunc A.\n\nInstance minus1Trunc_is_prop {A : Type} : IsHProp (minus1Trunc A) | 0.\nadmit.\nDefined.\n\nDefinition hexists {X} (P:X->Type):Type:= minus1Trunc (sigT  P).\n\nSection AssumingUA.\n\n  Definition isepi {X Y} `(f:X->Y) := forall Z: hSet,\n                                      forall g h: Y -> Z, g o f = h o f -> g = h.\n  Context {X Y : hSet} (f : X -> Y) (Hisepi : isepi f).\n\n  Goal forall (X Y : hSet) (f : forall _ : setT X, setT Y),\n         let fib :=\n             fun y : setT Y =>\n               hp (@ hexists (setT X) (fun x : setT X => @ paths (setT Y) (f x) y))\n                  (@ minus1Trunc_is_prop\n                     (@ sigT (setT X) (fun x : setT X => @ paths (setT Y) (f x) y))) in\n         forall (x : setT X) (_ : Univalence) (_ : Funext),\n           @ paths hProp (fib (f x)) Unit_hp.\n  intros.\n\n  apply path_hprop.\n  simpl.\n  Set Printing Universes.\n  Set Printing All.\n  refine (path_universe_uncurried _).\n  Undo.\n  apply path_universe_uncurried. (* Toplevel input, characters 21-44:\nError: Refiner was given an argument\n \"@ path_universe_uncurried (* Top.425 Top.426 Top.427 Top.428 Top.429 *) X1\n    (@ hexists (* Top.405 Top.404 Set Set *) (setT (* Top.405 *) X0)\n       (fun x0 : setT (* Top.405 *) X0 =>\n        @ paths (* Top.404 *) (setT (* Top.404 *) Y0) (f0 x0) (f0 x))) Unit\n    ?63\" of type\n \"@ paths (* Top.428 *) Type (* Top.425 *)\n    (@ hexists (* Top.405 Top.404 Set Set *) (setT (* Top.405 *) X0)\n       (fun x0 : setT (* Top.405 *) X0 =>\n        @ paths (* Top.404 *) (setT (* Top.404 *) Y0) (f0 x0) (f0 x))) Unit\"\ninstead of\n \"@ paths (* Top.413 *) Type (* Set *)\n    (@ hexists (* Top.405 Top.404 Set Set *) (setT (* Top.405 *) X0)\n       (fun x0 : setT (* Top.405 *) X0 =>\n        @ paths (* Top.404 *) (setT (* Top.404 *) Y0) (f0 x0) (f0 x))) Unit\".\n *)\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337520980/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]