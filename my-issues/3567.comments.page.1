[{"url":"https://api.github.com/repos/coq/coq/issues/comments/337523292","html_url":"https://github.com/coq/coq/issues/3567#issuecomment-337523292","issue_url":"https://api.github.com/repos/coq/coq/issues/3567","id":337523292,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyMzI5Mg==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-09-02T07:27:52Z","updated_at":"2017-10-18T09:29:20Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nThis error message should never show up, if the tactics are working properly, righty?\n\n(* File reduced by coq-bug-finder from original input, then from 2901 lines to 69 lines, then from 80 lines to 63 lines *)\n(* coqc version trunk (September 2014) compiled on Sep 2 2014 2:7:1 with OCaml 4.01.0\n   coqtop version cagnode17:/afs/csail.mit.edu/u/j/jgross/coq-trunk,trunk (3c5daf4e23ee20f0788c0deab688af452e83ccf0) *)\n\nSet Primitive Projections.\nSet Implicit Arguments.\nRecord prod (A B : Type) := pair { fst : A ; snd : B }.\nArguments fst {A B} _ / .\nArguments snd {A B} _ / .\nAdd Printing Let prod.\nNotation \"x * y\" := (prod x y) : type_scope.\nNotation \"( x , y , .. , z )\" := (pair .. (pair x y) .. z) : core_scope.\nUnset Implicit Arguments.\nInductive paths {A : Type} (a : A) : A -> Type := idpath : paths a a where \"x = y\" := (@ paths _ x y) : type_scope.\nArguments idpath {A a} , [A] a.\nDefinition ap {A B:Type} (f:A -> B) {x y:A} (p:x = y) : f x = f y := match p with idpath => idpath end.\nDefinition Sect {A B : Type} (s : A -> B) (r : B -> A) := forall x : A, r (s x) = x.\nClass IsEquiv {A B : Type} (f : A -> B) :=\n  { equiv_inv : B -> A ;\n    eisretr : Sect equiv_inv f;\n    eissect : Sect f equiv_inv;\n    eisadj : forall x : A, eisretr (f x) = ap f (eissect x) }.\nDefinition path_prod_uncurried {A B : Type} (z z' : A * B) (pq : (fst z = fst z') * (snd z = snd z'))\n: (z = z')\n  := match fst pq in (_ = z'1), snd pq in (_ = z'2) return z = (z'1, z'2) with\n       | idpath, idpath => idpath\n     end.\nDefinition path_prod {A B : Type} (z z' : A * B) :\n  (fst z = fst z') -> (snd z = snd z') -> (z = z')\n  := fun p q => path_prod_uncurried z z' (p,q).\nDefinition path_prod' {A B : Type} {x x' : A} {y y' : B}\n: (x = x') -> (y = y') -> ((x,y) = (x',y'))\n  := fun p q => path_prod (x,y) (x',y') p q.\nAxiom ap_fst_path_prod : forall {A B : Type} {z z' : A * B}\n                                (p : fst z = fst z') (q : snd z = snd z'),\n                           ap fst (path_prod _ _ p q) = p.\nAxiom ap_snd_path_prod : forall {A B : Type} {z z' : A * B}\n                                (p : fst z = fst z') (q : snd z = snd z'),\n                           ap snd (path_prod _ _ p q) = q.\nAxiom eta_path_prod : forall {A B : Type} {z z' : A * B} (p : z = z'),\n                        path_prod _ _(ap fst p) (ap snd p) = p.\nDefinition isequiv_path_prod {A B : Type} {z z' : A * B} : IsEquiv (path_prod_uncurried z z').\nProof.\n  refine (Build_IsEquiv\n            _ _ _\n            (fun r => (ap fst r, ap snd r))\n            eta_path_prod\n            (fun pq => match pq with\n                         | (p,q) => path_prod'\n                                      (ap_fst_path_prod p q) (ap_snd_path_prod p q)\n                       end) _).\n  destruct z as [x y], z' as [x' y'].\n(* Toplevel input, characters 15-50:\nError: Abstracting over the term \"z\" leads to a term\nfun z0 : A * B =>\nforall x : (fst z0 = fst z') * (snd z0 = snd z'),\neta_path_prod (path_prod_uncurried z0 z' x) =\nap (path_prod_uncurried z0 z')\n  (let (p, q) as pq\n       return\n         ((ap (fst) (path_prod_uncurried z0 z' pq),\n          ap (snd) (path_prod_uncurried z0 z' pq)) = pq) := x in\n   path_prod' (ap_fst_path_prod p q) (ap_snd_path_prod p q))\nwhich is ill-typed.\nReason is: Pattern-matching expression on an object of inductive type prod\nhas invalid information.\n *)\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337523292/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337523295","html_url":"https://github.com/coq/coq/issues/3567#issuecomment-337523295","issue_url":"https://api.github.com/repos/coq/coq/issues/3567","id":337523295,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyMzI5NQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-09-02T07:56:46Z","updated_at":"2017-10-18T09:29:20Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\ngit bisect says:\n\n32c83676c96ae4a218de0bec75d2f3353381dfb3 is the first bad commit\ncommit 32c83676c96ae4a218de0bec75d2f3353381dfb3\nAuthor: Matthieu Sozeau <matthieu.sozeau@ inria.fr>\nDate:   Thu Aug 28 19:49:16 2014 +0200\n\n    Change the way primitive projections are declared to the kernel.\n\n    Now kernel/indtypes builds the corresponding terms (has to be trusted)\n    while translate_constant just binds a constant name to the\n    already entered projection body, avoiding the dubious \"check\"\n    of user given terms. \"case\" Pattern-matching on primitive records is\n    now disallowed, and the default scheme is implemented using\n    projections and eta (all elimination tactics now use projections\n    as well). Elaborate \"let (x, y) := p in t\" using let bindings\n    for the projections of p too.\n\n:040000 040000 1b20d8af8dc9d9920b9208aaf0658b3c3f2a0b79 6c6d589c42c67b5ae5155ff493828238aa262c9a M      kernel\n:040000 040000 f213a6a233c367d9ab8a4fb68ffa4cec234b6930 bc4e5786c26d3f2ab1222a01e6346a30268425b0 M      library\n:040000 040000 eb75c7415b45125dcae9ac30d432bc74d0e2200a d2d3a2f09cfcb9bae93ae42003d006617f5351a8 M      plugins\n:040000 040000 22a4e6de82e0239ca9fc4c7d34f6d031eb11608c b3022d0ddaa7a4170f067a0d01464f63375f8ef4 M      pretyping\n:040000 040000 5504ab50ab61a1a401972befba8c054acabc917d ed120e01787f532a6b565e3419578569816e4265 M      proofs\n:040000 040000 56290a471b5da148ab2e76ced175e905e9ab3bc1 3c1cac8932afdb421d022085a9346d5d91040f9a M      toplevel\nbisect run success\n\n\n\n\n#!/bin/bash\n\nSCRIPT=\"$(readlink -f \"${BASH_SOURCE[0]}\")\"\nCOQ_DIR=\"$HOME/coq\"\n\n# exit immediately and abort the bisect if killed\ntrap \"exit 128\" SIGHUP SIGINT SIGTERM\n\nif [ \"$1\" = \"--init\" ]\nthen\n    shift\n    cd \"$COQ_DIR\"\n    PS4='$ '\n    set -x\n    # git bisect start [--no-checkout] [<bad> [<good>...]] [--] [<paths>...]\n    git bisect start 3c5daf4e23ee20f0788c0deab688af452e83ccf0 c4ecec191130a51975bf97d067472e0e5bd744f5\n    git bisect run \"$SCRIPT\" \"$@ \"\n    exit 128 # if git bisect run gets --init, abort immediately\nfi\n\ncd \"$COQ_DIR\"\n\nARGS=\"-local\"\nfor arg in \"-nodoc\" \"-no-native-compiler\"; do\n    if [ ! -z \"$(./configure -h 2>&1 | grep -- \"$arg\")\" ]; then\n        ARGS=\"$ARGS $arg\"\n    fi\ndone\nfor arg in \"-coqide\" \"-with-doc\"; do\n    if [ ! -z \"$(./configure -h 2>&1 | grep -- \"$arg\")\" ]; then\n        ARGS=\"$ARGS $arg no\"\n    fi\ndone\nif [ \"$1\" == \"--no-build\" ]; then\n    shift\nelse\n    git clean -xfd 2>&1 >/dev/null\n    echo \"./configure $ARGS\"\n    ./configure $ARGS\n    make coqbinaries \"$@ \" || exit 125\nfi\nls ./bin\n\n\nFILE=`mktemp --suffix=.v --tmpdir tmpXXXXXXXXXX`\n\ncat > \"$FILE\" <<'EOF'\n(* -*- mode: coq; coq-prog-args: (\"-emacs\" \"-nois\") -*- *)\n\n(* File reduced by coq-bug-finder from original input, then from 2901 lines to 69 lines, then from 80 lines to 63 lines *)\n(* coqc version trunk (September 2014) compiled on Sep 2 2014 2:7:1 with OCaml 4.01.0\n   coqtop version cagnode17:/afs/csail.mit.edu/u/j/jgross/coq-trunk,trunk (3c5daf4e23ee20f0788c0deab688af452e83ccf0) *)\n\nSet Primitive Projections.\nSet Implicit Arguments.\nRecord prod (A B : Type) := pair { fst : A ; snd : B }.\nArguments fst {A B} _ / .\nArguments snd {A B} _ / .\nAdd Printing Let prod.\nReserved Notation \"x * y\" (at level 40, left associativity).\nNotation \"x * y\" := (prod x y) : type_scope.\nNotation \"( x , y , .. , z )\" := (pair .. (pair x y) .. z) : core_scope.\nUnset Implicit Arguments.\nReserved Notation \"x -> y\" (at level 99, right associativity, y at level 200).\nReserved Notation \"x = y\" (at level 70, no associativity).\nNotation \"A -> B\" := (forall (_ : A), B) : type_scope.\n\nInductive paths {A : Type} (a : A) : A -> Type := idpath : paths a a where \"x = y\" := (@ paths _ x y) : type_scope.\nOpen Scope type_scope.\nOpen Scope core_scope.\nArguments idpath {A a} , [A] a.\nDefinition ap {A B:Type} (f:A -> B) {x y:A} (p:x = y) : f x = f y := match p with idpath => idpath end.\nDefinition Sect {A B : Type} (s : A -> B) (r : B -> A) := forall x : A, r (s x) = x.\nClass IsEquiv {A B : Type} (f : A -> B) :=\n  { equiv_inv : B -> A ;\n    eisretr : Sect equiv_inv f;\n    eissect : Sect f equiv_inv;\n    eisadj : forall x : A, eisretr (f x) = ap f (eissect x) }.\nDefinition path_prod_uncurried {A B : Type} (z z' : A * B) (pq : (fst z = fst z') * (snd z = snd z'))\n: (z = z')\n  := match fst pq in (_ = z'1), snd pq in (_ = z'2) return z = (z'1, z'2) with\n       | idpath, idpath => idpath\n     end.\nDefinition path_prod {A B : Type} (z z' : A * B) :\n  (fst z = fst z') -> (snd z = snd z') -> (z = z')\n  := fun p q => path_prod_uncurried z z' (p,q).\nDefinition path_prod' {A B : Type} {x x' : A} {y y' : B}\n: (x = x') -> (y = y') -> ((x,y) = (x',y'))\n  := fun p q => path_prod (x,y) (x',y') p q.\nAxiom ap_fst_path_prod : forall {A B : Type} {z z' : A * B}\n                                (p : fst z = fst z') (q : snd z = snd z'),\n                           ap fst (path_prod _ _ p q) = p.\nAxiom ap_snd_path_prod : forall {A B : Type} {z z' : A * B}\n                                (p : fst z = fst z') (q : snd z = snd z'),\n                           ap snd (path_prod _ _ p q) = q.\nAxiom eta_path_prod : forall {A B : Type} {z z' : A * B} (p : z = z'),\n                        path_prod _ _(ap fst p) (ap snd p) = p.\nInstance isequiv_path_prod {A B : Type} {z z' : A * B} : IsEquiv (path_prod_uncurried z z')\n  := Build_IsEquiv\n       _ _ _\n       (fun r => (ap fst r, ap snd r))\n       eta_path_prod\n       (fun pq => match pq with\n                    | (p,q) => path_prod'\n                                 (ap_fst_path_prod p q) (ap_snd_path_prod p q)\n                  end) _.\ndestruct z as [x y], z' as [x' y'].\nAdmitted.\nEOF\n\nrm -f \"${FILE%.v}.vo\"\nOUTPUT=\"$(timeout 30 ./bin/coqtop -nois -boot -compile \"${FILE%.v}\" 2>&1)\"\nls \"${FILE%.v}\"*\nERR=$?\necho \"$OUTPUT\"\necho \"$ERR\"\n#echo \"$FILE\"\nrm -f \"$FILE\" \"${FILE%.v}.vo\" \"${FILE%.v}.glob\"\n\nif [ ! -z \"$(echo \"$OUTPUT\" | grep -o 'Pattern-matching expression on an object of inductive type')\" ]; then\n    echo 'exit 1'\n    exit 1 # bad\nelif [ $ERR = 0 ]; then\n    echo 'exit 0'\n    exit 0 # good\nelse\n    echo 'exit 125'\n    exit 125 # failed for other reason\nfi\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337523295/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337523300","html_url":"https://github.com/coq/coq/issues/3567#issuecomment-337523300","issue_url":"https://api.github.com/repos/coq/coq/issues/3567","id":337523300,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyMzMwMA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-09-12T12:42:03Z","updated_at":"2017-10-18T09:29:20Z","author_association":"CONTRIBUTOR","body":"Comment author: @mattam82\n\nFixed in trunk.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337523300/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]