Comment author: @JasonGross

```
Delimit Scope a_scope with a.
Delimit Scope b_scope with b.
Notation "({ x })" := x%a (only printing) : b_scope.
Notation "--" := plus (only printing) : a_scope.
Notation "---" := minus (only printing) : a_scope.
Open Scope b_scope.
Check plus. (* --%a *)
```
I'd like to see instead `({ -- })`.

The rule for this would be that, if you would print <expr>%A_scope, look to see 
if you can find a chain of single-identifier notations from A_scope to any of 
the scopes open in the present scope stack (starting with the one on top/most 
recently opened/innermost), and if you can, use those notations to print things.

This would be for handling things like 
https://github.com/PrincetonUniversity/VST/blob/e96282d6bdb2e0fe874b10bb96e8fc008e03b21e/compcert/cfrontend/PrintClight.ml#L235-L236


Comment author: @herbelin

Somehow, PR#982 (https://github.com/coq/coq/pull/982) adds something similar for subentries. There is a new notion of "entry_coercion" which are used to switch from an entry to another when the right-hand side is a simple variable.

Probably you could do what you'd like with this new mechanism, putting "--" in a subentry so that using the "--" notation forces the insertion of the "({ })" coercion (see example at https://github.com/coq/coq/pull/982#issuecomment-325397431).

Maybe it could be done also for scopes. The relevant code is between "constrextern.ml" and "notation.ml", around the function "availability_of_entry_coercion", which could be aware not only of subentries but also of scopes...


