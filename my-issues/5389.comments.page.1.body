Comment author: @JasonGross

(* -*- mode: coq; coq-prog-args: ("-emacs" "-R" "." "Top" "-top" 
"bug_unif_not_repeat_02") -*- *)
(* File reduced by coq-bug-finder from original input, then from 282 lines to 
108 lines, then from 324 lines to 147 lines, then from 342 lines to 172 lines, 
then from 226 lines to 187 lines, then from 246 lines to 195 lines, then from 
273 lines to 211 lines, then from 251 lines to 216 lines, then from 265 lines 
to 217 lines, then from 231 lines to 217 lines, then from 233 lines to 109 
lines, then from 123 lines to 109 lines *)
(* coqc version 8.6 (February 2017) compiled on Feb 16 2017 14:36:53 with OCaml 
4.02.3
   coqtop version jgross-Leopard-WS:/home/jgross/Downloads/coq/coq-v8.6,(HEAD 
detached from 7e992fa) (29d7872c0159d2aab7264c0577a2f5a\
9dc7c90c9) *)

Global Set Asymmetric Patterns.
Section language.
  Context (base_type_code : Type).

  Inductive flat_type := Tbase (T : base_type_code) | Unit | Prod (A B : 
flat_type).

  Section interp.
    Section flat_type.
      Context (interp_base_type : base_type_code -> Type).
      Fixpoint interp_flat_type (t : flat_type) :=
        match t with
        | Tbase t => interp_base_type t
        | Unit => unit
        | Prod x y => prod (interp_flat_type x) (interp_flat_type y)
        end.
    End flat_type.
  End interp.

End language.
Global Arguments interp_flat_type {_} _ _.

Goal forall (base_type_code Name : Type) (var : base_type_code -> Type) 
(Context : Type)
            (T1 T2 : flat_type base_type_code)
            (N : interp_flat_type (fun _ : base_type_code => Name) T1 * 
interp_flat_type (fun _ : base_type_code => Name) T2)
            (t : base_type_code) (n : Name) (v : interp_flat_type var T1 * 
interp_flat_type var T2)
            (lookupb : Context -> Name -> forall t0 : base_type_code, option 
(var t0))
            (extend : Context ->
                      forall t0 : flat_type base_type_code,
                        interp_flat_type (fun _ : base_type_code => Name) t0 -> 
interp_flat_type var t0 -> Context),
    exists ctx' y,
      @ lookupb
        (@ extend ctx' T2
                 (@ snd
                    ((fix interp_flat_type (t0 : flat_type base_type_code) : 
Type :=
                        match t0 with
                        | @ Tbase _ _ => Name
                        | @ Unit _ => unit
                        | @ Prod _ x y => (interp_flat_type x * interp_flat_type 
y)%type
                        end) T1)
                    ((fix interp_flat_type (t0 : flat_type base_type_code) : 
Type :=
                        match t0 with
                        | @ Tbase _ _ => Name
                        | @ Unit _ => unit
                        | @ Prod _ x y => (interp_flat_type x * interp_flat_type 
y)%type
                        end) T2) N)
                 (@ snd
                    ((fix interp_flat_type (t0 : flat_type base_type_code) : 
Type :=
                        match t0 with
                        | @ Tbase _ t1 => var t1
                        | @ Unit _ => unit
                        | @ Prod _ x y => (interp_flat_type x * interp_flat_type 
y)%type
                        end) T1)
                    ((fix interp_flat_type (t0 : flat_type base_type_code) : 
Type :=
                        match t0 with
                        | @ Tbase _ t1 => var t1
                        | @ Unit _ => unit
                        | @ Prod _ x y => (interp_flat_type x * interp_flat_type 
y)%type
                        end) T2) v)) n t = y.
Proof.
  clear; intros.
  do 2 eexists.
  try tauto. (* Error:
In environment
base_type_code : Type
Name : Type
var : base_type_code -> Type
Context : Type
T1, T2 : flat_type base_type_code
t : base_type_code
n : Name
lookupb : Context -> Name -> forall t0 : base_type_code, option (var t0)
extend : Context ->
         forall t0 : flat_type base_type_code,
         interp_flat_type (fun _ : base_type_code => Name) t0 -> 
interp_flat_type var t0 -> Context
a : interp_flat_type (fun _ : base_type_code => Name) T1
b : interp_flat_type (fun _ : base_type_code => Name) T2
a0 : interp_flat_type var T1
b0 : interp_flat_type var T2
Unable to unify "?c@ {N:=(a, b); v:=(a0, b0)}" with "?ctx'@ {N:=(a, b); v:=(a0, 
b0)}". *)


Comment author: @Zimmi48

FTR this is a regression since 8.5.


