[{"url":"https://api.github.com/repos/coq/coq/issues/comments/337531115","html_url":"https://github.com/coq/coq/issues/4034#issuecomment-337531115","issue_url":"https://api.github.com/repos/coq/coq/issues/4034","id":337531115,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUzMTExNQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2015-02-11T19:20:46Z","updated_at":"2017-10-18T09:51:44Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nRecord Foo := {}.\nRecord Bar := {}.\n\nBind Scope foo_scope with Foo.\nBind Scope bar_scope with Bar.\nDelimit Scope foo_scope with foo.\nDelimit Scope bar_scope with bar.\n\nNotation \"!\" := Build_Foo : foo_scope.\nNotation \"!\" := Build_Bar : bar_scope.\nNotation \"!\" := 1 : core_scope.\nOpen Scope foo_scope.\nOpen Scope bar_scope.\nOpen Scope core_scope.\n\nGoal Foo.\n  exact !.\nDefined.\n\nGoal Bar.\n  exact !.\nDefined.\n\nGoal Foo.\n  refine !. (* Error: The term \"1\" has type \"nat\" while it is expected to have type \"Foo\". *)\nDefined.\n\nGoal Bar.\n  refine !. (* Error: The term \"1\" has type \"nat\" while it is expected to have type \"Bar\". *)\nDefined.\n\n(Note: This will have to be mentioned as a potential source of incompatibilities, but I believe it is worth it.)\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337531115/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337531117","html_url":"https://github.com/coq/coq/issues/4034#issuecomment-337531117","issue_url":"https://api.github.com/repos/coq/coq/issues/4034","id":337531117,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUzMTExNw==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2015-02-27T15:40:14Z","updated_at":"2017-10-18T09:51:44Z","author_association":"CONTRIBUTOR","body":"Comment author: @maximedenes\n\nWhy do exact and refine interpret notations differently, in the first place?\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337531117/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337531119","html_url":"https://github.com/coq/coq/issues/4034#issuecomment-337531119","issue_url":"https://api.github.com/repos/coq/coq/issues/4034","id":337531119,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUzMTExOQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2015-02-27T15:59:01Z","updated_at":"2017-10-18T09:51:44Z","author_association":"CONTRIBUTOR","body":"Comment author: @aspiwack\n\nI honestly don't know. It's probably because there is something I missed. I doubt it can be considered a featureâ€¦\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337531119/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337531121","html_url":"https://github.com/coq/coq/issues/4034#issuecomment-337531121","issue_url":"https://api.github.com/repos/coq/coq/issues/4034","id":337531121,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUzMTEyMQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2015-10-21T14:41:32Z","updated_at":"2017-10-18T09:51:44Z","author_association":"CONTRIBUTOR","body":"Comment author: @silene\n\nI looked at this issue and I am quite confused.\n\n\"refine\" internalizes the term using Constrintern.intern_gen WithoutTypeConstraint, so it is not surprising that the notation is being interpreted in the last opened scope. It should have been internalized using Constrintern.intern_gen (OfType FooBar) for the correct scope to be temporarily open.\n\nWhat troubles me is that \"exact\" also ends up calling Constrintern.intern_gen WithoutTypeConstraint. So I do not understand how \"exact\" magically succeeds.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337531121/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337531125","html_url":"https://github.com/coq/coq/issues/4034#issuecomment-337531125","issue_url":"https://api.github.com/repos/coq/coq/issues/4034","id":337531125,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUzMTEyNQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2015-10-22T08:09:37Z","updated_at":"2017-10-18T09:51:44Z","author_association":"CONTRIBUTOR","body":"Comment author: @silene\n\nI understand the code a bit better now.\n\n\"exact\" receives a \"glob_constr_and_expr\" value, with the \"glob_constr\" part having been computed by \"intern_gen WithoutTypeConstraint\". But the tactic calls \"interp_gen\", which discards this \"glob_constr\" part and internalizes the \"constr_expr\" part again, this time using \"intern_gen (OfType FooBar)\", so that the scopes are correctly computed.\n\n\"refine\", however, receives just a \"glob_constr\". So it cannot discard it, obviously; it has to use it, even if the scopes were incorrectly computed.\n\nBut the situation is a bit more subtile than that. \"refine\" receives a \"glob_constr\" produced by \"interp_uconstr\", which behaves similarly to \"exact\". It takes a \"glob_constr_and_expr\" value, discards the \"glob_constr\" part, and internalizes the \"constr_expr\" part again, but using \"intern_gen WithoutTypeConstraint\" anew (because it does not know better).\n\nShort version: As long as \"refine\" is an extension, it will never support bound scopes. Worse, if we ever were to unhardcode \"exact\", it would lose this feature. So I am closing this report, because it seems like the bug is impossible to fix without hardcoding \"refine\" (or without rewriting large chunks of Coq).\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337531125/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337531127","html_url":"https://github.com/coq/coq/issues/4034#issuecomment-337531127","issue_url":"https://api.github.com/repos/coq/coq/issues/4034","id":337531127,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUzMTEyNw==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2015-10-22T08:13:15Z","updated_at":"2017-10-18T09:51:45Z","author_association":"CONTRIBUTOR","body":"Comment author: @aspiwack\n\nUnless, maybe, a \"casted_uconstr\" entry is made to do globalisation in the scope of the goal's conclusion. I don't know whether that is possible, though.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337531127/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337531129","html_url":"https://github.com/coq/coq/issues/4034#issuecomment-337531129","issue_url":"https://api.github.com/repos/coq/coq/issues/4034","id":337531129,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUzMTEyOQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2015-10-22T08:21:01Z","updated_at":"2017-10-18T09:51:45Z","author_association":"CONTRIBUTOR","body":"Comment author: @silene\n\nYes, that is possible, and the code would be quite simple to write. But it is not much different from hardcoding refine, since it amounts to defining a new type of tactic argument just for the sake of refine.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337531129/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337531130","html_url":"https://github.com/coq/coq/issues/4034#issuecomment-337531130","issue_url":"https://api.github.com/repos/coq/coq/issues/4034","id":337531130,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUzMTEzMA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2015-10-24T07:54:21Z","updated_at":"2017-10-18T09:51:45Z","author_association":"CONTRIBUTOR","body":"Comment author: @herbelin\n\nThis behavior of exact is actually new from 8.5 (so it is regression only from 8.5beta). Moreover, it is not preserved by Ltac definitions (as hinted by Guillaume when he says that the first intern_constr is discarded, since in ltac code, intern_constr is done only once due to flag strict_check). Indeed\n\nLtac myexact e := exact e.\n\nGoal Foo.\n  myexact !.\nDefined.\n\ndoes not work.\n\nSo, the most reasonable would probably be to withdraw this half-implemented feature of mine, until a more robust mechanism for propagation of contextual interpretation information is possibly implemented.\n\nNot that 8.4 was however able to apply an ad hoc interpretation in scope type_scope for tactics expecting a type. So the following could be observed in 8.4 and it is still observable in 8.5:\n\nNotation \"!\" := True : type_scope.\nNotation \"!\" := 1 : core_scope.\nOpen Scope core_scope.\nGoal False.\nassert !. (* success *)\nAbort.\nLtac myassert x := assert x.\nGoal False.\nmyassert !. (* failure *)\n\nThis is maybe not so nice... and eventually we would like to tag ltac variables with a scope so that the last line works, but this would be tricky, with the question of what to do when a variable occurs more than once, etc. (though this kind of business is already what is done in notations).\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337531130/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337531132","html_url":"https://github.com/coq/coq/issues/4034#issuecomment-337531132","issue_url":"https://api.github.com/repos/coq/coq/issues/4034","id":337531132,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUzMTEzMg==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2015-10-24T08:31:42Z","updated_at":"2017-10-18T09:51:45Z","author_association":"CONTRIBUTOR","body":"Comment author: @herbelin\n\nThat may actually be a pretty interesting challenge to develop a system of types (and in particular of interpretation scopes) for ltac (or a cleaner version of it), propagating constraints coming from how variables are used upwards...\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337531132/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337531133","html_url":"https://github.com/coq/coq/issues/4034#issuecomment-337531133","issue_url":"https://api.github.com/repos/coq/coq/issues/4034","id":337531133,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUzMTEzMw==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2015-10-26T09:02:13Z","updated_at":"2017-10-18T09:51:45Z","author_association":"CONTRIBUTOR","body":"Comment author: @silene\n\nI am not sure it would be a good idea to automatically infer scopes depending on how some tactic argument is later used. It might require the user to dwell in the implementation to find out which is the actual scope of the argument. I prefer that the scopes be made explicit at the tactic definition/notation level, as suggested by Jason in bug [BZ#4381](https://github.com/coq/coq/issues?q=is%3Aissue%20%22Original%20bug%20ID%3A%20BZ%234381%22).\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337531133/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337531135","html_url":"https://github.com/coq/coq/issues/4034#issuecomment-337531135","issue_url":"https://api.github.com/repos/coq/coq/issues/4034","id":337531135,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUzMTEzNQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2015-10-26T09:07:03Z","updated_at":"2017-10-18T09:51:45Z","author_association":"CONTRIBUTOR","body":"Comment author: @herbelin\n\n\n> I am not sure it would be a good idea to automatically infer scopes\n> depending on how some tactic argument is later used. It might require the\n> user to dwell in the implementation to find out which is the actual scope of\n> the argument. I prefer that the scopes be made explicit at the tactic\n> definition/notation level, as suggested by Jason in bug [BZ#4381](https://github.com/coq/coq/issues?q=is%3Aissue%20%22Original%20bug%20ID%3A%20BZ%234381%22).\n\nLooks indeed like an intuitive and simple approach.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337531135/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]