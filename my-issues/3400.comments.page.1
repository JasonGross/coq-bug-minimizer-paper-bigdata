[{"url":"https://api.github.com/repos/coq/coq/issues/comments/337520618","html_url":"https://github.com/coq/coq/issues/3400#issuecomment-337520618","issue_url":"https://api.github.com/repos/coq/coq/issues/3400","id":337520618,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyMDYxOA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-06-26T16:34:45Z","updated_at":"2020-08-24T16:25:00Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\r\n\r\n```coq\r\nAxiom A : Type.\r\nAxiom B : Type.\r\nAxiom C : Type.\r\n\r\nGoal A = A.\r\nmatch goal with\r\n  | [ |- context G[$(exact B)$] ] => let G' := context G[C] in pose G'\r\nend. (* success, I get [T := C : Type] as a hypothesis *)\r\nmatch goal with\r\n  | [ |- context G[B] ] => let G' := context G[C] in pose G'\r\nend. (* No matching clauses for match *)\r\n```\r\n\r\nI expect both of them to fail similarly.\r\n\r\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337520618/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337520620","html_url":"https://github.com/coq/coq/issues/3400#issuecomment-337520620","issue_url":"https://api.github.com/repos/coq/coq/issues/3400","id":337520620,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyMDYyMA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2015-03-02T10:31:39Z","updated_at":"2020-08-24T16:25:34Z","author_association":"CONTRIBUTOR","body":"Comment author: @ppedrot\r\n\r\nI think this one is difficult to solve without wreaking havoc in the semantics of patterns. Currently, patterns in Ltac are treated as essentially syntactic objects, i.e. they live at the \"glob\" level. Interpretation of tactics in terms is done at the later \"typed\" level, i.e. they go through the pretyper. We want patterns to stay syntactic, otherwise strange things may happen (think of all the implicit stuff just popping out in front of you).\r\n\r\nTherefore, I think the best answer to this bug is to prohibit tactics-in-terms in tactic patterns. You can still work around this by writing:\r\n\r\n```coq\r\nlet t := constr:($(exact B)$) in\r\nmatch goal with\r\n  | [ |- context G[t] ] => let G' := context G[C] in pose G'\r\nend.\r\n```\r\n\r\nwhich also fails with the \"no matching clause\" error.\r\n\r\nAre you happy with that?\r\n\r\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337520620/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/1012044760","html_url":"https://github.com/coq/coq/issues/3400#issuecomment-1012044760","issue_url":"https://api.github.com/repos/coq/coq/issues/3400","id":1012044760,"node_id":"IC_kwDOABUDh848UpPY","user":{"login":"ppedrot","id":1202327,"node_id":"MDQ6VXNlcjEyMDIzMjc=","avatar_url":"https://avatars.githubusercontent.com/u/1202327?v=4","gravatar_id":"","url":"https://api.github.com/users/ppedrot","html_url":"https://github.com/ppedrot","followers_url":"https://api.github.com/users/ppedrot/followers","following_url":"https://api.github.com/users/ppedrot/following{/other_user}","gists_url":"https://api.github.com/users/ppedrot/gists{/gist_id}","starred_url":"https://api.github.com/users/ppedrot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ppedrot/subscriptions","organizations_url":"https://api.github.com/users/ppedrot/orgs","repos_url":"https://api.github.com/users/ppedrot/repos","events_url":"https://api.github.com/users/ppedrot/events{/privacy}","received_events_url":"https://api.github.com/users/ppedrot/received_events","type":"User","site_admin":false},"created_at":"2022-01-13T11:22:22Z","updated_at":"2022-01-13T11:22:22Z","author_association":"MEMBER","body":"There is a workaround and this would be messing with the Ltac un-semantics, so it's a WONTFIX.","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/1012044760/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]