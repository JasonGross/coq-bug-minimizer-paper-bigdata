[{"url":"https://api.github.com/repos/coq/coq/issues/comments/337515931","html_url":"https://github.com/coq/coq/issues/3130#issuecomment-337515931","issue_url":"https://api.github.com/repos/coq/coq/issues/3130","id":337515931,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxNTkzMQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2013-09-18T04:14:42Z","updated_at":"2017-10-18T09:08:02Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nLtac do_sk1 t :=\n  lazymatch t with\n    | (fun (x:?T) => ?f ?g) =>\n      idtac \"app, no @ ?\" f g\n  end.\n\nLtac do_sk2 t :=\n  lazymatch t with\n    | (fun (x:?T) => ?f ?g) =>\n      idtac \"app, no @ ?\" f g;\n    match goal with\n      | [ |- appcontext G[?f' (fun _ => _)] ] => let G' := context G[f] in idtac G'\n    end\n  end.\n\nLtac do_sk3 t :=\n  lazymatch t with\n    | (fun (x:?T) => (@ ?f x) ?g) =>\n      idtac \"app\" f g;\n    match goal with\n      | [ |- appcontext G[?f' (fun _ => _)] ] => let G' := context G[f] in idtac G'\n    end\n  end.\n\nDefinition asdf (f:nat -> nat) := True.\n\nGoal (asdf (fun w => plus (plus 10 w) 10)).\nlazymatch goal with [ |- asdf ?t ] => do_sk1 t end.\n(* app, no @ ? (plus (10 + x)) 10 *)\n(* There should be no x!  idtac shouldn't be able to expose internal bindings. *)\nFail lazymatch goal with [ |- asdf ?t ] => do_sk2 t end.\n(* Toplevel input, characters 53-61:\nIn nested Ltac calls to \"do_sk2\", last call failed.\nError: in Tacinterp.apply_match_goal:\nNo matching clauses for match goal\n(use \"Set Ltac Debug\" for more info). *)\n(* Really?  It matched fine the first time.  Why does the failure of pose make this fail? Set Ltac Debug gives me 'Ltac variable f depends on pattern variable name x which is not bound in current context.'*)\nFail lazymatch goal with [ |- asdf ?t ] => do_sk3 t end.\n(* Toplevel input, characters 20-71:\nError: in Tacinterp.apply_match_goal:\nNo matching clauses for match goal\n(use \"Set Ltac Debug\" for more info). *)\n(* I think this one should match.  'Set Ltac Debug' says 'Only bound indices allowed in second order pattern matching.' *)\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337515931/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337515933","html_url":"https://github.com/coq/coq/issues/3130#issuecomment-337515933","issue_url":"https://api.github.com/repos/coq/coq/issues/3130","id":337515933,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxNTkzMw==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2013-09-26T21:33:59Z","updated_at":"2017-10-18T09:08:02Z","author_association":"CONTRIBUTOR","body":"Comment author: @ppedrot\n\nWell, most of this is the intended semantics.\n\n1. [do_sk1]. Actually, as you can witness Ltac can expose internal bindings through matching, and has a dedicated dynamic type to handle such open terms, called [constr_under_binders]. Such a term is a normal term together with the list of open variables. I suspect deactivating that sort of matchings will indeed break quite a lot of scripts in the wild, so it is urgent not to fix it.\n\n2. [do_sk2]. The issue does not lie in the match, but in the [context G[f]] instead. The fact is, you can't do much of a [constr_under_binders] if it has open variables, and most tactics will simply refuse manipulating it. Likewise, [context] does not handle it at all.\n\n3. [do_sk3]. This one is strange indeed, and looks like a real bug.\n\nThe problem you point out is essentially the lack of Ltac primitives to manipulate open terms. I believe that having a substitution [t {x := u}] would be enough, but I am not quite confident about it.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337515933/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]