[{"url":"https://api.github.com/repos/coq/coq/issues/comments/337537706","html_url":"https://github.com/coq/coq/issues/4425#issuecomment-337537706","issue_url":"https://api.github.com/repos/coq/coq/issues/4425","id":337537706,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUzNzcwNg==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2015-11-12T23:03:57Z","updated_at":"2017-10-18T10:11:04Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nI expect this code to work, and for [head v], when [v] is a uconstr, to return a uconstr:\n\nLtac head x :=\n  match x with\n    | ?f _ => head f\n    | _ => x\n  end.\n\nTactic Notation \"pose\" \"head\" uconstr(v) := let v' := head v in pose v'.\n\nGoal True.\n  pose head eq_refl.\n  (* Toplevel input, characters 0-18:\nError: Must evaluate to a closed term\noffending expression:\nx\nthis is an object of type uconstr *)\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337537706/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337537708","html_url":"https://github.com/coq/coq/issues/4425#issuecomment-337537708","issue_url":"https://api.github.com/repos/coq/coq/issues/4425","id":337537708,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUzNzcwOA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-10-26T06:38:59Z","updated_at":"2017-10-18T10:11:04Z","author_association":"CONTRIBUTOR","body":"Comment author: @silene\n\n*** Bug [BZ#5157](https://github.com/coq/coq/issues?q=is%3Aissue%20%22Original%20bug%20ID%3A%20BZ%235157%22) has been marked as a duplicate of this bug. ***\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337537708/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337537710","html_url":"https://github.com/coq/coq/issues/4425#issuecomment-337537710","issue_url":"https://api.github.com/repos/coq/coq/issues/4425","id":337537710,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUzNzcxMA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-11-28T20:46:49Z","updated_at":"2017-10-18T10:11:04Z","author_association":"CONTRIBUTOR","body":"Comment author: @psteckler\n\nSame behavior in 8.6beta1.\n\nIn 8.5/8.6 tacinterp.ml, the procedure `interp_match` calls `interp_ltac_constr`, when in fact there's a uconstr. There's an available call `interp_uconstr` with a different signature:\n\nval interp_ltac_constr : \n  interp_sign -> glob_tactic_expr -> \n   (constr -> unit Proofview.tactic) -> \n   unit Proofview.tactic\n                                      \nval interp_uconstr : interp_sign -> Environ.env -> \n  Glob_term.glob_constr * Constrexpr.constr_expr option -> \n  Glob_term.closed_glob_constr         \n\nSo the 2nd one is not a drop-in replacement for the 1st, where we might dispatch to one or the other (assuming the 2nd one does the needed job). And the 2nd one produces a record with a term and \"closure\" (maybe meaning an environment), unclear to me whether the output can be chained to the first one.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337537710/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337537712","html_url":"https://github.com/coq/coq/issues/4425#issuecomment-337537712","issue_url":"https://api.github.com/repos/coq/coq/issues/4425","id":337537712,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUzNzcxMg==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-11-29T20:39:22Z","updated_at":"2017-10-18T10:11:04Z","author_association":"CONTRIBUTOR","body":"Comment author: @ppedrot\n\nIt is not impossible to implement this feature, although it would amount to precomposing the match with the \"type_term\" function. I can't see another way, because you need to construct the constr to match against it. I would personally refrain from implementing such a feature though, because it introduces yet more dynamic typing behaviour into Ltac for an unclear gain. What prevents you from writing the typing beforehand yourself?\n\nNote that, more generally, I would refrain from adding any kind of non-trivial feature to Ltac so that this eases Ltac1 freeze (and future maintenance) and gives arguments in favour of the switch to Ltac2. I know Ltac2 is still essentially a vapourware, but as soon as I have a bit of time I will implement it more thoroughly. (For now, I already implemented a mini-ML with the monad primitive, but there is still no facility for constr manipulation and the like.)\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337537712/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337537713","html_url":"https://github.com/coq/coq/issues/4425#issuecomment-337537713","issue_url":"https://api.github.com/repos/coq/coq/issues/4425","id":337537713,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUzNzcxMw==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-11-29T20:43:31Z","updated_at":"2017-10-18T10:11:04Z","author_association":"CONTRIBUTOR","body":"Comment author: @psteckler\n\nWhen I talked with Jason, I think his concern was that the \"type_term\" function would slow things down a lot.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337537713/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337537714","html_url":"https://github.com/coq/coq/issues/4425#issuecomment-337537714","issue_url":"https://api.github.com/repos/coq/coq/issues/4425","id":337537714,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUzNzcxNA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-11-29T20:50:48Z","updated_at":"2017-10-18T10:11:05Z","author_association":"CONTRIBUTOR","body":"Comment author: @ppedrot\n\nI would have foreseen this indeed... Still, because of the way uconstrs are implemented, there is unluckily no other way than pretyping it to match against it.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337537714/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337537715","html_url":"https://github.com/coq/coq/issues/4425#issuecomment-337537715","issue_url":"https://api.github.com/repos/coq/coq/issues/4425","id":337537715,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUzNzcxNQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-11-29T21:03:19Z","updated_at":"2017-10-18T10:11:05Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\n> Still, because of the way uconstrs are implemented, there is unluckily no other \n> way than pretyping it to match against it.\n\nIs this going to be fixed for Ltac 2.0?  (Or will the slowness of constr be fixed?)  Having to represent uconstrs as Ltac thunks which do the matching for you is ... annoying.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337537715/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337537716","html_url":"https://github.com/coq/coq/issues/4425#issuecomment-337537716","issue_url":"https://api.github.com/repos/coq/coq/issues/4425","id":337537716,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUzNzcxNg==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-11-29T21:22:16Z","updated_at":"2017-10-18T10:11:05Z","author_association":"CONTRIBUTOR","body":"Comment author: @ppedrot\n\nThis particular issue is orthogonal to the underlying Ltac language. Rather, it is all about the semantics of the datastructure you're considering. I believe that it is easy to export the internal constr API from Ltac2 side so that you can mess with kernel terms without ever having to incur typechecking, but this is going to be a dangerous way paved with unexpected anomalies if you're not careful enough...\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337537716/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]