[{"url":"https://api.github.com/repos/coq/coq/issues/comments/337526693","html_url":"https://github.com/coq/coq/issues/3768#issuecomment-337526693","issue_url":"https://api.github.com/repos/coq/coq/issues/3768","id":337526693,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyNjY5Mw==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-10-25T22:58:04Z","updated_at":"2017-11-19T11:10:11Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\r\n\r\nThis code works in trunk e8726550e01e51ef3ccf8602f2ecbe2b3737cca3, but fails in trunk 9973cd2ca529076388710e90f2c46180581397cf.\r\n```coq\r\n\r\n(* File reduced by coq-bug-finder from original input, then from 7916 lines to 292 lines, then from 476 lines to 306 lines *)\r\nSet Primitive Projections.\r\nSet Implicit Arguments.\r\nRecord sigT {A} (P : A -> Type) := existT { projT1 : A ; projT2 : P projT1 }.\r\nNotation \"{ x : A  & P }\" := (sigT (fun x:A => P)) : type_scope.\r\nUnset Implicit Arguments.\r\nNotation \"( x ; y )\" := (existT _ x y).\r\nInductive paths {A : Type} (a : A) : A -> Type := idpath : paths a a where \"x = y\" := (@ paths _ x y) : type_scope.\r\nArguments idpath {A a} , [A] a.\r\nDelimit Scope path_scope with path.\r\nNotation \"1\" := idpath : path_scope.\r\nAxiom ap : forall {A B:Type} (f:A -> B) {x y:A} (p:x = y), f x = f y.\r\nAxiom dummy_funext_type : Set.\r\nClass Funext := { dummy_funext_value : dummy_funext_type }.\r\nRecord Functor := { object_of :> Type -> Type ; identity_of : Type }.\r\nAxiom path_functor'_sig : forall `{Funext} (F G : Functor), { HO : object_of F = object_of G & Set = Set } -> F = G.\r\nAxiom path_functor'_sig_fst : forall `{Funext} F G HO HM, ap object_of (@ path_functor'_sig _ F G (HO; HM)) = HO.\r\nGoal forall (H : Funext) (objof : Type -> Type) io1 io2 k,\r\n       (ap object_of\r\n           (path_functor'_sig (Build_Functor objof io1)\r\n                              (Build_Functor objof io2)\r\n                              (1%path; 1%path))) = k.\r\n  intros.\r\n  match goal with\r\n    | [ |- context [path_functor'_sig ?F ?G (?x; ?y)] ]\r\n      => rewrite (@ path_functor'_sig_fst _ F G x y)\r\n  end || fail.\r\n  Undo.\r\n  rewrite path_functor'_sig_fst.\r\n```\r\n\r\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337526693/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]