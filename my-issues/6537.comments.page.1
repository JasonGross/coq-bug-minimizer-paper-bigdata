[{"url":"https://api.github.com/repos/coq/coq/issues/comments/354922104","html_url":"https://github.com/coq/coq/issues/6537#issuecomment-354922104","issue_url":"https://api.github.com/repos/coq/coq/issues/6537","id":354922104,"node_id":"MDEyOklzc3VlQ29tbWVudDM1NDkyMjEwNA==","user":{"login":"ppedrot","id":1202327,"node_id":"MDQ6VXNlcjEyMDIzMjc=","avatar_url":"https://avatars.githubusercontent.com/u/1202327?v=4","gravatar_id":"","url":"https://api.github.com/users/ppedrot","html_url":"https://github.com/ppedrot","followers_url":"https://api.github.com/users/ppedrot/followers","following_url":"https://api.github.com/users/ppedrot/following{/other_user}","gists_url":"https://api.github.com/users/ppedrot/gists{/gist_id}","starred_url":"https://api.github.com/users/ppedrot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ppedrot/subscriptions","organizations_url":"https://api.github.com/users/ppedrot/orgs","repos_url":"https://api.github.com/users/ppedrot/repos","events_url":"https://api.github.com/users/ppedrot/events{/privacy}","received_events_url":"https://api.github.com/users/ppedrot/received_events","type":"User","site_admin":false},"created_at":"2018-01-03T01:51:32Z","updated_at":"2018-01-03T01:51:32Z","author_association":"MEMBER","body":"See #6538 for why `constr_eq` is fast. We can probably add the fast path to unify, it wouldn't harm, but I don't believe it'll have any effect at all in more general instances.","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/354922104/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/355125246","html_url":"https://github.com/coq/coq/issues/6537#issuecomment-355125246","issue_url":"https://api.github.com/repos/coq/coq/issues/6537","id":355125246,"node_id":"MDEyOklzc3VlQ29tbWVudDM1NTEyNTI0Ng==","user":{"login":"JasonGross","id":396076,"node_id":"MDQ6VXNlcjM5NjA3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/396076?v=4","gravatar_id":"","url":"https://api.github.com/users/JasonGross","html_url":"https://github.com/JasonGross","followers_url":"https://api.github.com/users/JasonGross/followers","following_url":"https://api.github.com/users/JasonGross/following{/other_user}","gists_url":"https://api.github.com/users/JasonGross/gists{/gist_id}","starred_url":"https://api.github.com/users/JasonGross/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JasonGross/subscriptions","organizations_url":"https://api.github.com/users/JasonGross/orgs","repos_url":"https://api.github.com/users/JasonGross/repos","events_url":"https://api.github.com/users/JasonGross/events{/privacy}","received_events_url":"https://api.github.com/users/JasonGross/received_events","type":"User","site_admin":false},"created_at":"2018-01-03T20:58:21Z","updated_at":"2018-01-03T20:58:35Z","author_association":"MEMBER","body":"Really?  It seems like it ought to speed up `unify` in the following, slightly less contrived case, and I imagine it ought to speed up `simple refine` here, too, no?  (What is `simple refine` spending its time doing, anyway?)\r\n```coq\r\nAxiom prod : Set -> Set -> Set.\r\nFixpoint twos (n : nat) (A : Set) :=\r\n  match n with\r\n  | 0 => A\r\n  | S n' => twos n' (prod A A)\r\n  end.\r\n\r\nTactic Notation \"display\" string(tacname) tactic3(tac) :=\r\n  match goal with |- let n := ?k in _ => idtac k \"Time\" tacname end;\r\n  lazy [twos];\r\n  time tac ().\r\n\r\nNotation \"'hide'\" := (_ = _) : type_scope.\r\n\r\nAxiom fg_equal : forall {A B} {f g : A -> B} {x y : A}, f = g -> x = y -> f x = g y.\r\n\r\nGoal let n := 21 in twos n nat = twos n nat.\r\n  display \"\"\r\n          (fun _ => lazymatch goal with\r\n                    | [ |- ?G ]\r\n                      => lazymatch G with\r\n                         | ?f ?x = ?g ?y :> Set\r\n                           => let c := time_constr ltac:(fun _ => open_constr:(@fg_equal Set Set f g x y _ _)) in (* 1.567 *)\r\n                              let ty := time_constr ltac:(fun _ => type of c) in (* 13.739 *)\r\n                              time \"constr_eq\" constr_eq ty G; (* 0.127 *)\r\n                              time \"unify\" unify ty G; (* 0.921 *)\r\n                              time \"simple refine\" simple refine _; (* 0 *)\r\n                              time \"simple refine c\" simple refine c (* 1.938 *)\r\n                         end\r\n                    end). Undo.\r\n```\r\n  ","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/355125246/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/355128852","html_url":"https://github.com/coq/coq/issues/6537#issuecomment-355128852","issue_url":"https://api.github.com/repos/coq/coq/issues/6537","id":355128852,"node_id":"MDEyOklzc3VlQ29tbWVudDM1NTEyODg1Mg==","user":{"login":"ppedrot","id":1202327,"node_id":"MDQ6VXNlcjEyMDIzMjc=","avatar_url":"https://avatars.githubusercontent.com/u/1202327?v=4","gravatar_id":"","url":"https://api.github.com/users/ppedrot","html_url":"https://github.com/ppedrot","followers_url":"https://api.github.com/users/ppedrot/followers","following_url":"https://api.github.com/users/ppedrot/following{/other_user}","gists_url":"https://api.github.com/users/ppedrot/gists{/gist_id}","starred_url":"https://api.github.com/users/ppedrot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ppedrot/subscriptions","organizations_url":"https://api.github.com/users/ppedrot/orgs","repos_url":"https://api.github.com/users/ppedrot/repos","events_url":"https://api.github.com/users/ppedrot/events{/privacy}","received_events_url":"https://api.github.com/users/ppedrot/received_events","type":"User","site_admin":false},"created_at":"2018-01-03T21:13:44Z","updated_at":"2018-01-03T21:13:44Z","author_association":"MEMBER","body":"Refine is slow because Ltac is dumb: AFAIU, for compatibility reasons variable expansion in terms is evar-normalized. Here, Ltac recognizes dynamically thay `c` is a variable pointing to a term, so that it is expanded and thus normalized.","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/355128852/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]