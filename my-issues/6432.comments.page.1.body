**edit** well, your theory about processes seems right. Not gonna be easy to fix.
Regarding your initial comment "Umm, what is the problem here? Couldn't be the case that par: is actually slower?": yes, that's fine (also note that I'm comparing `1:tac` against `par:tac`, so it's expected to be at least a bit slower in real time); the issue is that it's twice as fast in user time when it does 3x as much stuff, which makes no sense.  (I didn't get an email about the first edit, so maybe you already realized this.  But if it confused you, I figure it's worth explaining for others.)
I think is actually quite easy to fix (though I haven't tested).  If I understand correctly, then we can take
https://github.com/coq/coq/blob/6a6a2575c10d05cd0151a83c133825d43bd3cb28/lib/system.ml#L279-L281
and make the change
```diff
let get_time () =
  let t = Unix.times ()  in
-  (Unix.gettimeofday(), t.Unix.tms_utime, t.Unix.tms_stime)
+  (Unix.gettimeofday(), t.Unix.tms_utime + t.Unix.tms_cutime, t.Unix.tms_stime + t.Unix.tms_cstime)
```
to include the time spent in child processes.

By the way, here is a more clear test-case:
```coq
Fixpoint walk (n : nat) :=
  match n with
  | O => tt
  | S n => fst (walk n, walk n)
  end.

Goal True /\ True.
  split.
  Time par: let v := eval native_compute in (walk 30) in exact I.
  (* Finished transaction in 7.657 secs (0.027u,0.02s) (successful) *)
```

Note that `Time` also does not currently report time spent in the OCaml compiler under user time, and, if I understand correctly, this change would also fix this problem.
