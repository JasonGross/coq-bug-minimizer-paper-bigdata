Comment author: @JasonGross

I can get [admit] to produce:
Ltac call to "admit" failed.
Illegal application:
The term "@ fst" of type "forall (A B : Type) (_ : prod A B), A"
cannot be applied to the terms
 "interp_base_type TZ" : "Type"
 "interp_base_type TZ" : "Type"
 "tt" : "unit"
The 3rd term has type "unit" which should be coercible to
 "prod (interp_base_type TZ) (interp_base_type TZ)".
and I can get [simpl] to produce
Anomaly: Uncaught exception Failure("List.skipn"). Please report at 
http://coq.inria.fr/bugs/.

Example file coming up momentarily


Comment author: @JasonGross

Created attachment 844
example file

> Attached file: [bug_bad_refine_simpl_anom_01.v](https://coq.inria.fr/bugfiles/attachment.cgi?id=844) (text/plain, 16119 bytes)
> Description:   example file


Comment author: @JasonGross

Here's a smaller example:
```coq
(* -*- mode: coq; coq-prog-args: ("-emacs" "-R" "." "Top" "-top" 
"bug_bad_refine_simpl_anom_01") -*- *)
(* File reduced by coq-bug-finder from original input, then from 557 lines to 
63 lines, then from 225 lines to 136 lines, then from 247 lines to 162 lines, 
then from 325 lines to 230 lines, then from 390 lines to 264 lines, then from 
378 lines to 304 lines, then from 537 lines to 318 lines, then from 425 lines 
to 364 lines, then from 549 lines to 380 lines, then from 469 lines to 396 
lines, then from 533 lines to 415 lines, then from 464 lines to 429 lines, then 
from 443 lines to 430 lines, then from 405 lines to 380 lines, then from 374 
lines to 301 lines, then from 307 lines to 301 lines, then from 251 lines to 
151 lines, then from 157 lines to 151 lines, then from 114 lines to 86 lines, 
then from 93 lines to 87 lines, then from 78 lines to 46 lines, then from 52 
lines to 46 lines *)
(* coqc version 8.6 (May 2017) compiled on May 11 2017 12:23:39 with OCaml 
4.02.3
   coqtop version jgross-Leopard-WS:/home/jgross/Downloads/coq/coq-v8.6,(HEAD 
detached from 7e992fa) (3b6d89acf4f233d0ed33f89c4e60bcd68e0e2820) *)
Module Import LocalFalse.
  Inductive False := .
End LocalFalse.
Axiom proof_admitted : False.
Tactic Notation "admit" := abstract case proof_admitted.

Inductive base_type := TZ | TWord (logsz : nat).
Inductive flat_type := Tbase (T : base_type) | Prod (A B : flat_type).
Section language.
  Context (interp_base_type : base_type -> Type).
  Fixpoint interp_flat_type (t : flat_type) :=
    match t with
    | Tbase t => interp_base_type t
    | Prod x y => prod (interp_flat_type x) (interp_flat_type y)
    end.
End language.
Context (Name : Type).
Inductive exprf : flat_type -> Type :=
| LetIn : forall {tx}, interp_flat_type (fun _ => Name) tx -> exprf tx -> 
forall {tC}, exprf tC -> exprf tC.
Global Arguments LetIn _ _ _ {_} _.
Lemma interpf_do_rewrite {t} (e : exprf t) : e = e.
Proof.
  refine match e return e = e with
         | LetIn (Prod _ _) (a2, c1) _ _ => _
         | _ => _
         end%core;
    admit.
(* In nested Ltac calls to "admit" and "case proof_admitted", last call failed.
Error: Abstracting over the term "proof_admitted" leads to a term
fun _ : False => LetIn (Tbase b) i0 e0 e1 = LetIn (Tbase b) i0 e0 e1
which is ill-typed.
Reason is: Illegal application: 
The term "LetIn" of type
 "forall tx : flat_type,
  interp_flat_type (fun _ : base_type => Name) tx ->
  exprf tx -> forall tC : flat_type, exprf tC -> exprf tC"
cannot be applied to the terms
 "Tbase b" : "flat_type"
 "i0" : "interp_flat_type (fun _ : base_type => Name) (Tbase b)"
 "e0" : "exprf f"
 "f0" : "flat_type"
 "e1" : "exprf f0"
The 3rd term has type "exprf f" which should be coercible to "exprf (Tbase b)".
 *)

```
