[{"url":"https://api.github.com/repos/coq/coq/issues/comments/337552607","html_url":"https://github.com/coq/coq/issues/5437#issuecomment-337552607","issue_url":"https://api.github.com/repos/coq/coq/issues/5437","id":337552607,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU1MjYwNw==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2017-04-03T00:26:51Z","updated_at":"2017-10-18T10:58:38Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nSomething seems wrong with the way [Defined] is checking things.  I have this \ncode in fiat-crypto:\n\n       (** Now we rely on the behavior of Coq's unifier to transform\n           the goal for us; we a goal like [let f' : A := ?f_evar in\n           B], and we want a goal like [A /\\ B].  So we refine with a\n           hole named [pf] which is proof of [A /\\ B], and then assert\n           that the second projection of the proof (which has type\n           [B]) actually has type [let f' : A := proj1 pf in B].  If\n           done naïvely, this would give a circlular type, which Coq\n           disallows.  However, Coq is happy to zeta-reduce away the\n           circlularity; happily, this is done after Coq unifies [let\n           f' : A := proj1 pf in B] with [let f' : A := ?f_evar in B],\n           hence filling [?f_evar] with the first projection of the\n           proof.  Since Coq instantiates the two existing evars\n           ([?f_evar] and the current goal, which is represented by an\n           evar under the hood) with projections of the new evar\n           (which becomes the new goal)---and let us hope that Coq\n           devs never decide both to turn on judgmental η (currently\n           controlled by primitive projections) for [and], and to\n           prefer η-expansion of evars before dropping context\n           variables (we might also be in trouble if someone adds a\n           [Canonical Structure] for [and])---we get the desired\n           behavior--for now. *)\n       lazymatch goal with\n       | [ |- let f' := _ in ?B ]\n         => refine (let pf := _ in (proj2 pf : let f' := proj1 pf in B))\n       end\n\n\nIn the repo I will attach, in src/Specific/IntegrationTest.v, the [Defined] \ndoes not finish in reasonable time with this [refine], but if it's replaced by \n[idtac], then [Defined] is relatively fast.  What's going on?\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337552607/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337552609","html_url":"https://github.com/coq/coq/issues/5437#issuecomment-337552609","issue_url":"https://api.github.com/repos/coq/coq/issues/5437","id":337552609,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU1MjYwOQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2017-04-03T00:29:17Z","updated_at":"2017-10-18T10:58:38Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nCreated attachment 828\narchive of fiat-crypto\n\n> Attached file: [slow_fiat_crypto_defined.zip](https://coq.inria.fr/bugfiles/attachment.cgi?id=828) (application/zip, 369360 bytes)\n> Description:   archive of fiat-crypto\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337552609/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337552610","html_url":"https://github.com/coq/coq/issues/5437#issuecomment-337552610","issue_url":"https://api.github.com/repos/coq/coq/issues/5437","id":337552610,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU1MjYxMA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2017-04-03T15:29:50Z","updated_at":"2017-10-18T10:58:38Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nI think this is related somehow to how [cbv in H] doesn't insert a cast node in \nthe proof tree.  Not sure how this interacts with evar unification, though.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337552610/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]