[{"url":"https://api.github.com/repos/coq/coq/issues/comments/649790129","html_url":"https://github.com/coq/coq/issues/10108#issuecomment-649790129","issue_url":"https://api.github.com/repos/coq/coq/issues/10108","id":649790129,"node_id":"MDEyOklzc3VlQ29tbWVudDY0OTc5MDEyOQ==","user":{"login":"jfehrle","id":1253341,"node_id":"MDQ6VXNlcjEyNTMzNDE=","avatar_url":"https://avatars.githubusercontent.com/u/1253341?v=4","gravatar_id":"","url":"https://api.github.com/users/jfehrle","html_url":"https://github.com/jfehrle","followers_url":"https://api.github.com/users/jfehrle/followers","following_url":"https://api.github.com/users/jfehrle/following{/other_user}","gists_url":"https://api.github.com/users/jfehrle/gists{/gist_id}","starred_url":"https://api.github.com/users/jfehrle/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jfehrle/subscriptions","organizations_url":"https://api.github.com/users/jfehrle/orgs","repos_url":"https://api.github.com/users/jfehrle/repos","events_url":"https://api.github.com/users/jfehrle/events{/privacy}","received_events_url":"https://api.github.com/users/jfehrle/received_events","type":"User","site_admin":false},"created_at":"2020-06-25T20:05:48Z","updated_at":"2020-06-25T20:44:29Z","author_association":"CONTRIBUTOR","body":"IIUC some useful simpler steps would be:\r\n- ability to print any type of variable (e.g. \"intropattern\")\r\n- ability to print with simpler syntax (e.g. `print x` vs `Message.print (Message.of_ident x)`\r\n- ability to print multiple values on a single line.\r\n\r\nprint statements are quite useful for debugging, particularly since IIUC the current debugging capabilities are limited.","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/649790129/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/649825271","html_url":"https://github.com/coq/coq/issues/10108#issuecomment-649825271","issue_url":"https://api.github.com/repos/coq/coq/issues/10108","id":649825271,"node_id":"MDEyOklzc3VlQ29tbWVudDY0OTgyNTI3MQ==","user":{"login":"ppedrot","id":1202327,"node_id":"MDQ6VXNlcjEyMDIzMjc=","avatar_url":"https://avatars.githubusercontent.com/u/1202327?v=4","gravatar_id":"","url":"https://api.github.com/users/ppedrot","html_url":"https://github.com/ppedrot","followers_url":"https://api.github.com/users/ppedrot/followers","following_url":"https://api.github.com/users/ppedrot/following{/other_user}","gists_url":"https://api.github.com/users/ppedrot/gists{/gist_id}","starred_url":"https://api.github.com/users/ppedrot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ppedrot/subscriptions","organizations_url":"https://api.github.com/users/ppedrot/orgs","repos_url":"https://api.github.com/users/ppedrot/repos","events_url":"https://api.github.com/users/ppedrot/events{/privacy}","received_events_url":"https://api.github.com/users/ppedrot/received_events","type":"User","site_admin":false},"created_at":"2020-06-25T21:24:14Z","updated_at":"2020-06-25T21:24:14Z","author_association":"MEMBER","body":"The solution is fairly easy: export a scope that macro-expands to a type-safe format construction as in OCaml. We don't need to deconstruct these format instructions in Ltac2 so no need for GADTs, they can be given as abstract definitions with phantom types.","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/649825271/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/649908086","html_url":"https://github.com/coq/coq/issues/10108#issuecomment-649908086","issue_url":"https://api.github.com/repos/coq/coq/issues/10108","id":649908086,"node_id":"MDEyOklzc3VlQ29tbWVudDY0OTkwODA4Ng==","user":{"login":"jfehrle","id":1253341,"node_id":"MDQ6VXNlcjEyNTMzNDE=","avatar_url":"https://avatars.githubusercontent.com/u/1253341?v=4","gravatar_id":"","url":"https://api.github.com/users/jfehrle","html_url":"https://github.com/jfehrle","followers_url":"https://api.github.com/users/jfehrle/followers","following_url":"https://api.github.com/users/jfehrle/following{/other_user}","gists_url":"https://api.github.com/users/jfehrle/gists{/gist_id}","starred_url":"https://api.github.com/users/jfehrle/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jfehrle/subscriptions","organizations_url":"https://api.github.com/users/jfehrle/orgs","repos_url":"https://api.github.com/users/jfehrle/repos","events_url":"https://api.github.com/users/jfehrle/events{/privacy}","received_events_url":"https://api.github.com/users/jfehrle/received_events","type":"User","site_admin":false},"created_at":"2020-06-26T02:06:42Z","updated_at":"2020-06-26T02:06:42Z","author_association":"CONTRIBUTOR","body":"Ah, that would address the printf with a format string case?  What format string do you use for something of type `intropattern`?\r\n\r\nSupporting a print without a format string would often be simpler and good enough for users provided that Ltac2 knows the type of each item.  Jason's suggestion of supporting `%a` seems like it would require having the appropriate formatter exported from OCaml code.","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/649908086/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]