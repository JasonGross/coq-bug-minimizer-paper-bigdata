Comment author: @JasonGross

I expect this code to work, not to fail at [Check]/[Definition]
```
Class A := a : True.
Check _ : A. (* succeeds, leaves an evar *)
Hint Extern 1 A => abstract exact I : typeclass_instances.
Check _ : A. (* failure with error in 8.4, anomaly in 8.5rc1 *)
Definition x := _ : NoDupR (fun _ _ => true) nil. (* failure with error in 8.4, anomaly in 8.5rc1 *)


```
Comment author: @silene

I don't expect this code to work. "abstract" inside a typeclass hint should most certainly fail, since it causes commands that are not allowed to have side-effects to have some.


Comment author: @JasonGross

I think the [Definition] command, at least, should succeed; if
  Definition foo : bar.
  Proof.
    refine x.
  Defined.
works, then
  Definition foo : bar := x.
should also work.

I think the [abstract] should fail early, rather than late, when not in a proof; this means the [Check] should give an unresolved evar, rather than an error.

I rely on the ability to use [abstract] inside typeclass hints to cache the proof term generated by [vm_compute; reflexivity] so that it's not retypechecked by every constr manipulation in Ltac, and so that I can avoid a spurious [let ... in  ...] in the generated proof term.  I'd prefer if this functionality not disappear unless there's a sane replacement for [abstract] that faithfully caches terms and prevents retypechecking.


