Comment author: @JasonGross

(* File reduced by coq-bug-finder from original input, then from 2809 lines to 39 lines *)
Set Primitive Projections.
Module Export foo.
  Record prod (A B : Type) := pair { fst : A ; snd : B }.
End foo.
Inductive paths {A : Type} (a : A) : A -> Type := idpath : paths a a where "x = y" := (@ paths _ x y) : type_scope.
Arguments idpath {A a} , [A] a.
Definition ap {A B:Type} (f:A -> B) {x y:A} (p:x = y) : f x = f y := match p with idpath => idpath end.
Axiom path_prod : forall {A B : Type} (z z' : prod A B), (fst z = fst z') -> (snd z = snd z') -> (z = z').
Notation fst := (@ fst _ _).
Notation snd := (@ snd _ _).
Set Printing All.
Timeout 2 Definition ap_fst_path_prod {A B : Type} {z z' : prod A B} (p : @ paths _ (fst z) (fst z')) (q : snd z = snd z')
: ap fst (path_prod _ _ p q) = p.
(* Timeout! *)


Comment author: @mattam82

It no longer does in trunk.


