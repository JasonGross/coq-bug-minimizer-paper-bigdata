[{"url":"https://api.github.com/repos/coq/coq/issues/comments/337550924","html_url":"https://github.com/coq/coq/issues/5327#issuecomment-337550924","issue_url":"https://api.github.com/repos/coq/coq/issues/5327","id":337550924,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU1MDkyNA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2017-01-27T21:55:04Z","updated_at":"2017-10-18T10:53:16Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nI would like a variant of cbv (or flags to pass to cbv) that has the following \nbehavior:\n- should play well with beta iota delta\n- should not unfold let-binders under delta (like cbv, lazy, unlike cbn)\n- should transform applications\n    f (let x := v in g)\ninto the one-step-beta-reduction of\n    (fun f => let x := v in f g) f\n(i.e., into \"let x := v in f g\", but without capturing any \"x\" that occurs in \n\"f\")\n(It's okay if it transforms \"f (let x := v in g)\" into \"(fun f => let x := v in \nf g) f\", and you also need beta to reduce that.\n\nHow hard would this be to implement?  I get the impression that adding an extra \nreduction strategy is easy (cbn was introduced in 14 lines in \ne9428d3127ca159451437c2abbc6306e0c31f513 and \n0eda7a25209b2ced8fb50ca0c12ed1f53e5eedae), and the tricky part is expressing \nthis in terms of the reduction stack machine?\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337550924/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]