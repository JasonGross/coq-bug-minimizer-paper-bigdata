[{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518617","html_url":"https://github.com/coq/coq/issues/3280#issuecomment-337518617","issue_url":"https://api.github.com/repos/coq/coq/issues/3280","id":337518617,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxODYxNw==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-04-12T20:14:11Z","updated_at":"2018-01-05T15:03:04Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\r\n\r\nCreated attachment 457\r\nPlot of timings\r\n\r\nHere is a file that stress-tests dependence of [apply f_equal] on term size:\r\n\r\nFixpoint twos (n : nat) (A : Type) :=\r\n  match n with\r\n    | 0 => A\r\n    | S n' => twos n' (prod A A)\r\n  end.\r\n\r\nLtac display := match goal with |- let n := ?k in _ => idtac k \"Time apply f_equal.\" end; hnf; unfold twos; cbv beta.\r\n\r\nGoal let n := 1 in twos n Set = twos n Set. display. Time apply f_equal. Abort.\r\nGoal let n := 2 in twos n Set = twos n Set. display. Time apply f_equal. Abort.\r\nGoal let n := 3 in twos n Set = twos n Set. display. Time apply f_equal. Abort.\r\nGoal let n := 4 in twos n Set = twos n Set. display. Time apply f_equal. Abort.\r\nGoal let n := 5 in twos n Set = twos n Set. display. Time apply f_equal. Abort.\r\nGoal let n := 6 in twos n Set = twos n Set. display. Time apply f_equal. Abort.\r\nGoal let n := 7 in twos n Set = twos n Set. display. Time apply f_equal. Abort.\r\nGoal let n := 8 in twos n Set = twos n Set. display. Time apply f_equal. Abort.\r\nGoal let n := 9 in twos n Set = twos n Set. display. Time apply f_equal. Abort.\r\nGoal let n := 10 in twos n Set = twos n Set. display. Time apply f_equal. Abort.\r\nGoal let n := 11 in twos n Set = twos n Set. display. Time apply f_equal. Abort.\r\n=>al let n := 12 in twos n Set = twos n Set. display. Time apply f_equal. Abort.\r\nGoal let n := 13 in twos n Set = twos n Set. display. Time apply f_equal. Abort.\r\nGoal let n := 15 in twos n Set = twos n Set. display. Time apply f_equal. Abort.\r\nGoal let n := 16 in twos n Set = twos n Set. display. Time apply f_equal. Abort.\r\nGoal let n := 17 in twos n Set = twos n Set. display. Time apply f_equal. Abort.\r\nGoal let n := 18 in twos n Set = twos n Set. display. Time apply f_equal. Abort.\r\nGoal let n := 19 in twos n Set = twos n Set. display. Time apply f_equal. Abort.\r\nGoal let n := 20 in twos n Set = twos n Set. display. Time apply f_equal. Abort.\r\n\r\nThe timings for 8.4pl3 are:\r\n1 Time apply f_equal. Finished transaction in 0. secs (0.u,0.s)\r\n2 Time apply f_equal. Finished transaction in 0. secs (0.u,0.s)\r\n3 Time apply f_equal. Finished transaction in 0. secs (0.u,0.s)\r\n4 Time apply f_equal. Finished transaction in 0. secs (0.u,0.s)\r\n5 Time apply f_equal. Finished transaction in 0. secs (0.u,0.s)\r\n6 Time apply f_equal. Finished transaction in 0. secs (0.u,0.s)\r\n7 Time apply f_equal. Finished transaction in 0. secs (0.u,0.s)\r\n8 Time apply f_equal. Finished transaction in 0. secs (0.004001u,0.s)\r\n9 Time apply f_equal. Finished transaction in 0. secs (0.004u,0.004001s)\r\n10 Time apply f_equal. Finished transaction in 0. secs (0.020002u,0.s)\r\n11 Time apply f_equal. Finished transaction in 0. secs (0.048003u,0.004s)\r\n12 Time apply f_equal. Finished transaction in 0. secs (0.104006u,0.s)\r\n13 Time apply f_equal. Finished transaction in 1. secs (0.188011u,0.012001s)\r\n15 Time apply f_equal. Finished transaction in 1. secs (0.80805u,0.012s)\r\n16 Time apply f_equal. Finished transaction in 2. secs (1.620101u,0.016001s)\r\n17 Time apply f_equal. Finished transaction in 3. secs (3.280205u,0.024002s)\r\n18 Time apply f_equal. Finished transaction in 6. secs (6.55641u,0.068004s)\r\n19 Time apply f_equal. Finished transaction in 13. secs (13.236827u,0.112007s)\r\n20 Time apply f_equal. Finished transaction in 30. secs (29.897869u,0.304019s)\r\n\r\n\r\nFor coq trunk (eb15c59bb2f79f0154a0c37e43cdf4e90235c053) are:\r\n1 Time apply f_equal. Finished transaction in 0. secs (0.u,0.s)\r\n2 Time apply f_equal. Finished transaction in 0. secs (0.u,0.s)\r\n3 Time apply f_equal. Finished transaction in 0. secs (0.u,0.s)\r\n4 Time apply f_equal. Finished transaction in 0. secs (0.u,0.s)\r\n5 Time apply f_equal. Finished transaction in 0. secs (0.u,0.s)\r\n6 Time apply f_equal. Finished transaction in 0.001 secs (0.u,0.s)\r\n7 Time apply f_equal. Finished transaction in 0.003 secs (0.u,0.s)\r\n8 Time apply f_equal. Finished transaction in 0.006 secs (0.u,0.004s)\r\n9 Time apply f_equal. Finished transaction in 0.012 secs (0.004u,0.008s)\r\n10 Time apply f_equal. Finished transaction in 0.026 secs (0.011u,0.016s)\r\n11 Time apply f_equal. Finished transaction in 0.054 secs (0.032u,0.024s)\r\n12 Time apply f_equal. Finished transaction in 0.112 secs (0.06u,0.052s)\r\n13 Time apply f_equal. Finished transaction in 0.19 secs (0.156u,0.032s)\r\n15 Time apply f_equal. Finished transaction in 0.704 secs (0.688u,0.016s)\r\n16 Time apply f_equal. Finished transaction in 1.614 secs (1.604u,0.008s)\r\n17 Time apply f_equal. Finished transaction in 2.728 secs (2.708u,0.024s)\r\n18 Time apply f_equal. Finished transaction in 6.7 secs (6.64u,0.06s)\r\n19 Time apply f_equal. Finished transaction in 11.352 secs (11.352u,0.s)\r\n20 Time apply f_equal. Finished transaction in 23.091 secs (22.977u,0.116s)\r\n\r\nFor label n, there are 4 * 2^n words in the goal (for example, for 1, the goal is (@ eq Type (prod Set Set) (prod Set Set))).\r\n\r\n\r\nA plot of timings is attached; I'll also attach the Mathematica notebook that generated it.\r\n\r\nHere is a script that generates a Coq file for stress-testing on things other than binary trees:\r\n\r\n```bash\r\n#!/bin/bash\r\n\r\nif [ -z \"$3\" ]; then\r\n    echo \"Usage: $0 FILENAME TOTAL-ITERATIONS MAX-DUP\"\r\n    exit 1\r\nfi\r\n\r\nif [ -z \"$COQC\" ]; then\r\n    COQC=coqc\r\nfi\r\n\r\nOUT=\"$1\"\r\nFILENAME=\"$1.v\"\r\nTOTAL=\"$2\"\r\nMAX_DUP=\"$3\"\r\n\r\n#echo \"$FILENAME\"\r\n\r\ncat > \"$FILENAME\" <<EOF\r\nGoal True. idtac \"{'base', 'exponent', 'time'}\". idtac \"{\". Admitted.\r\nEOF\r\n\r\nfor i in $(seq 1 $MAX_DUP)\r\ndo\r\n    echo -n \"Inductive iter$i \" >> \"$FILENAME\"\r\n    for j in $(seq 1 $i)\r\n    do\r\n        echo -n \"A$j \" >> \"$FILENAME\"\r\n    done\r\n    echo \" :=\" >> \"$FILENAME\"\r\n    echo -n \"  build$i : \" >> \"$FILENAME\"\r\n    for j in $(seq 1 $i)\r\n    do\r\n        echo -n \"A$j -> \">> \"$FILENAME\"\r\n    done\r\n    echo -n \"iter$i\" >> \"$FILENAME\"\r\n    for j in $(seq 1 $i)\r\n    do\r\n        echo -n \" A$j\" >> \"$FILENAME\"\r\n    done\r\n    echo \".\" >> \"$FILENAME\"\r\n    cat >> \"$FILENAME\" <<EOF\r\nFixpoint do$i (n : nat) (A : Type) :=\r\n  match n with\r\n    | 0 => A\r\nEOF\r\n    echo -n \"    | S n' => do$i n' (iter$i\" >> \"$FILENAME\"\r\n    for j in $(seq 1 $i)\r\n    do\r\n        echo -n \" A\" >> \"$FILENAME\"\r\n    done\r\n    echo \")\" >> \"$FILENAME\"\r\n    echo \"  end.\" >> \"$FILENAME\"\r\n\r\n    echo \"Ltac display$i := match goal with |- let n := ?k in _ => \"'idtac \"{ '\"$i\"' ,\" k \",\"'\" end; hnf; unfold do$i; cbv beta.\" >> \"$FILENAME\"\r\ndone\r\n\r\nfor i in $(seq 1 $MAX_DUP)\r\ndo\r\n    for k in $(seq 1 $TOTAL)\r\n    do\r\n        echo \"Goal let n := $k in do$i n Set = do$i n Set. display$i. Time apply f_equal. Admitted.\" >> \"$FILENAME\"\r\n    done\r\ndone\r\n\r\necho 'Goal True. idtac \"}\". Admitted.' >> \"$FILENAME\"\r\n\r\n#echo \"$COQC $FILENAME > $OUT\"\r\n\r\n$COQC \"$FILENAME\" | sed s'/Finished transaction in \\([0-9\\.]\\+\\) secs.*/\\1},/g'\r\n```\r\n> Attached file: [Coq Timings.png](https://coq.inria.fr/bugfiles/attachment.cgi?id=457) (image/png, 8049 bytes)\r\n> Description:   Plot of timings\r\n\r\n\r\n  ","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518617/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518618","html_url":"https://github.com/coq/coq/issues/3280#issuecomment-337518618","issue_url":"https://api.github.com/repos/coq/coq/issues/3280","id":337518618,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxODYxOA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-04-12T20:15:21Z","updated_at":"2017-10-18T09:15:45Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nCreated attachment 458\nMathematica file generating the timings plot\n\n> Attached file: [Coq Timings.nb](https://coq.inria.fr/bugfiles/attachment.cgi?id=458) (text/plain, 27024 bytes)\n> Description:   Mathematica file generating the timings plot\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518618/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518620","html_url":"https://github.com/coq/coq/issues/3280#issuecomment-337518620","issue_url":"https://api.github.com/repos/coq/coq/issues/3280","id":337518620,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxODYyMA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-04-21T10:41:06Z","updated_at":"2017-10-18T09:15:45Z","author_association":"CONTRIBUTOR","body":"Comment author: @ppedrot\n\nThe [apply] tactic does unification. Why do you expect it to be constant-time?\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518620/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518622","html_url":"https://github.com/coq/coq/issues/3280#issuecomment-337518622","issue_url":"https://api.github.com/repos/coq/coq/issues/3280","id":337518622,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxODYyMg==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-04-21T17:34:24Z","updated_at":"2017-10-18T09:15:46Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nIdeally (in a world with perfect hash-consing, or something), it would find that the terms it's trying to unify are identical because they have the same cached hashes, and wouldn't have to explore the entire term.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518622/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518623","html_url":"https://github.com/coq/coq/issues/3280#issuecomment-337518623","issue_url":"https://api.github.com/repos/coq/coq/issues/3280","id":337518623,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxODYyMw==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-05-05T12:50:38Z","updated_at":"2017-10-18T09:15:46Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nNote that this does not seem to have anything to do with universes, and that [refine] is slower than [apply].  Here is a script (using [apply]) that does things with [nat] rather than sets, and the timings for this script, and the same script with [apply f_equal] replaced with [refine (f_equal _ _)].\n\n\nAxiom nat_prod : nat -> nat -> nat.\nFixpoint twos (n : nat) (A : nat) :=\n  match n with\n    | 0 => A\n    | S n' => twos n' (nat_prod A A)\n  end.\nLtac display := match goal with |- let n := ?k in _ => idtac k \"Time apply f_equal.\" end; hnf; unfold twos; cbv beta.\nAxiom k : nat.\nGoal let n := 1 in twos n k = twos n k. display. Time apply f_equal. Abort.\nGoal let n := 2 in twos n k = twos n k. display. Time apply f_equal. Abort.\nGoal let n := 3 in twos n k = twos n k. display. Time apply f_equal. Abort.\nGoal let n := 4 in twos n k = twos n k. display. Time apply f_equal. Abort.\nGoal let n := 5 in twos n k = twos n k. display. Time apply f_equal. Abort.\nGoal let n := 6 in twos n k = twos n k. display. Time apply f_equal. Abort.\nGoal let n := 7 in twos n k = twos n k. display. Time apply f_equal. Abort.\nGoal let n := 8 in twos n k = twos n k. display. Time apply f_equal. Abort.\nGoal let n := 9 in twos n k = twos n k. display. Time apply f_equal. Abort.\nGoal let n := 10 in twos n k = twos n k. display. Time apply f_equal. Abort.\nGoal let n := 11 in twos n k = twos n k. display. Time apply f_equal. Abort.\nGoal let n := 12 in twos n k = twos n k. display. Time apply f_equal. Abort.\nGoal let n := 13 in twos n k = twos n k. display. Time apply f_equal. Abort.\nGoal let n := 14 in twos n k = twos n k. display. Time apply f_equal. Abort.\nGoal let n := 15 in twos n k = twos n k. display. Time apply f_equal. Abort.\nGoal let n := 16 in twos n k = twos n k. display. Time apply f_equal. Abort.\nGoal let n := 17 in twos n k = twos n k. display. Time apply f_equal. Abort.\nGoal let n := 18 in twos n k = twos n k. display. Time apply f_equal. Abort.\nGoal let n := 19 in twos n k = twos n k. display. Time apply f_equal. Abort.\nGoal let n := 20 in twos n k = twos n k. display. Time apply f_equal. Abort.\n\n\n\n\n\n\n\n1 Time apply f_equal. Finished transaction in 0. secs (0.u,0.s)\n2 Time apply f_equal. Finished transaction in 0. secs (0.u,0.s)\n3 Time apply f_equal. Finished transaction in 0. secs (0.004001u,0.s)\n4 Time apply f_equal. Finished transaction in 0. secs (0.u,0.s)\n5 Time apply f_equal. Finished transaction in 0. secs (0.004u,0.s)\n6 Time apply f_equal. Finished transaction in 0. secs (0.u,0.s)\n7 Time apply f_equal. Finished transaction in 0. secs (0.004u,0.s)\n8 Time apply f_equal. Finished transaction in 0. secs (0.004001u,0.s)\n9 Time apply f_equal. Finished transaction in 0. secs (0.012001u,0.s)\n10 Time apply f_equal. Finished transaction in 0. secs (0.020001u,0.s)\n11 Time apply f_equal. Finished transaction in 0. secs (0.040002u,0.s)\n12 Time apply f_equal. Finished transaction in 0. secs (0.104007u,0.s)\n13 Time apply f_equal. Finished transaction in 1. secs (0.216014u,0.s)\n14 Time apply f_equal. Finished transaction in 0. secs (0.440028u,0.004s)\n15 Time apply f_equal. Finished transaction in 1. secs (0.876055u,0.012001s)\n16 Time apply f_equal. Finished transaction in 2. secs (1.872117u,0.024001s)\n17 Time apply f_equal. Finished transaction in 4. secs (4.024252u,0.040003s)\n18 Time apply f_equal. Finished transaction in 8. secs (8.624539u,0.060004s)\n19 Time apply f_equal. Finished transaction in 17. secs (16.565035u,0.116007s)\n20 Time apply f_equal. Finished transaction in 38. secs (38.178386u,0.272017s)\n\n\n1 Time refine (f_equal _ _). Finished transaction in 0. secs (0.u,0.s)\n2 Time refine (f_equal _ _). Finished transaction in 0. secs (0.u,0.s)\n3 Time refine (f_equal _ _). Finished transaction in 0. secs (0.004u,0.s)\n4 Time refine (f_equal _ _). Finished transaction in 0. secs (0.u,0.s)\n5 Time refine (f_equal _ _). Finished transaction in 0. secs (0.u,0.s)\n6 Time refine (f_equal _ _). Finished transaction in 0. secs (0.u,0.s)\n7 Time refine (f_equal _ _). Finished transaction in 0. secs (0.004001u,0.s)\n8 Time refine (f_equal _ _). Finished transaction in 0. secs (0.004u,0.s)\n9 Time refine (f_equal _ _). Finished transaction in 0. secs (0.008001u,0.s)\n10 Time refine (f_equal _ _). Finished transaction in 0. secs (0.024002u,0.s)\n11 Time refine (f_equal _ _). Finished transaction in 0. secs (0.044002u,0.004001s)\n12 Time refine (f_equal _ _). Finished transaction in 0. secs (0.104006u,0.s)\n13 Time refine (f_equal _ _). Finished transaction in 0. secs (0.272017u,0.s)\n14 Time refine (f_equal _ _). Finished transaction in 1. secs (0.47603u,0.004s)\n15 Time refine (f_equal _ _). Finished transaction in 1. secs (1.068067u,0.004s)\n16 Time refine (f_equal _ _). Finished transaction in 2. secs (2.120133u,0.024001s)\n17 Time refine (f_equal _ _). Finished transaction in 5. secs (4.668292u,0.036002s)\n18 Time refine (f_equal _ _). Finished transaction in 11. secs (10.764672u,0.132008s)\n19 Time refine (f_equal _ _). Finished transaction in 26. secs (25.705607u,0.180011s)\n20 Time refine (f_equal _ _). Finished transaction in 101. secs (100.546284u,0.64004s)\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518623/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518625","html_url":"https://github.com/coq/coq/issues/3280#issuecomment-337518625","issue_url":"https://api.github.com/repos/coq/coq/issues/3280","id":337518625,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxODYyNQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-05-05T12:53:53Z","updated_at":"2017-10-18T09:15:46Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nThis doesn't seem to be quite linear, though I'm not sure what kind of function it is.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518625/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518627","html_url":"https://github.com/coq/coq/issues/3280#issuecomment-337518627","issue_url":"https://api.github.com/repos/coq/coq/issues/3280","id":337518627,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxODYyNw==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-05-06T09:43:00Z","updated_at":"2018-01-05T15:03:44Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\r\n\r\nAfter some debugging with Hugo yesterday at IHP (I'm in Paris until next Thursday), we discovered that this ~linear dependence on term size shows up in many tactics, e.g., destruct, revert, case, exact, ...  This creates a wall of term size beyond which interactive theorem proving is impossible, or at least very frustrating and time-consuming.  After a few hours looking at the problem with me yesterday, Hugo found that the time in the case of [revert] is ~entirely due to unification, and can be fixed by replacing \"refine\" with \"refine_no_check\" (I think he'll be making a commit soon).  (Perhaps a test-case should be added to the complexity test-suite.)\r\n\r\nHere is an example displaying the dependence of various tactics on the size of the goal:\r\n\r\n```coq\r\nRequire Import String.\r\nOpen Scope string_scope.\r\nAxiom nat_prod : nat -> nat -> nat.\r\nFixpoint twos (n : nat) (A : nat) :=\r\n  match n with\r\n    | 0 => A\r\n    | S n' => twos n' (nat_prod A A)\r\n  end.\r\nLtac display label := match goal with |- let n := ?k in _ => idtac k label end; hnf; unfold twos; cbv beta.\r\nAxiom k : nat.\r\n\r\nNotation hide := (_ = _).\r\n\r\nGoal forall p : nat * nat, let n := 16 in twos n k = twos n k. intro p. display \"revert\". Time revert p. (* 2.23 secs *) Admitted.\r\nGoal forall p : nat * nat, let n := 16 in twos n k = twos n k. intro p. display \"generalize goal; intro; revert\". Time match goal with |- ?G => generalize G end. (* 2.48 secs *) Time intro. (* 0.06 secs *) Time revert p. (* 0.056 secs *) Admitted.\r\nGoal forall p : nat * nat, let n := 11 in twos n k = twos n k. intro p. display \"set goal; revert\". Time match goal with |- ?G => set (x := G) end. (* 2.35 secs (* notice the 11, not 16 *) *) Time revert p. (* 0.02 secs *) Admitted.\r\nGoal forall p : nat * nat, let n := 16 in twos n k = twos n k. intro p. display \"destruct\". Time destruct p. (* 5.13 secs *) Admitted.\r\nGoal forall p : nat * nat, let n := 16 in twos n k = twos n k. intro p. display \"case\". Time case p. (* 4.35 secs *) Admitted.\r\nGoal forall p : nat * nat, let n := 14 in twos n (nat_prod (fst p) (snd p)) = twos n (nat_prod (fst p) (snd p)). intro p. display \"revert dep\". Time revert p. (* 3.77 secs *) Admitted.\r\nGoal forall p : nat * nat, let n := 14 in twos n (nat_prod (fst p) (snd p)) = twos n (nat_prod (fst p) (snd p)). intro p. display \"destruct dep\". Time destruct p. (* 6.44 secs *) Admitted.\r\nGoal forall p : nat * nat, let n := 14 in twos n (nat_prod (fst p) (snd p)) = twos n (nat_prod (fst p) (snd p)). intro p. display \"case dep\". Time case p. (* 6.92 secs *) Admitted.\r\n```\r\n\r\n  ","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518627/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518630","html_url":"https://github.com/coq/coq/issues/3280#issuecomment-337518630","issue_url":"https://api.github.com/repos/coq/coq/issues/3280","id":337518630,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxODYzMA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-05-06T09:55:07Z","updated_at":"2017-10-18T09:15:46Z","author_association":"CONTRIBUTOR","body":"Comment author: @ppedrot\n\n> After some debugging with Hugo yesterday at IHP (I'm in Paris until next\n> Thursday), we discovered that this ~linear dependence on term size shows up\n> in many tactics, e.g., destruct, revert, case, exact, ...  This creates a\n> wall of term size beyond which interactive theorem proving is impossible, or\n> at least very frustrating and time-consuming.\n\nWell well, linear complexity is not what I would call Gonthier's famous « wall of complexity ». I would be pleased to be able to decide intuitionistic propositional logic in linear time!\n\nBut yep, I understand your frustration.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518630/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518631","html_url":"https://github.com/coq/coq/issues/3280#issuecomment-337518631","issue_url":"https://api.github.com/repos/coq/coq/issues/3280","id":337518631,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxODYzMQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-05-06T10:11:37Z","updated_at":"2017-10-18T09:15:47Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nI would not complain (or, at least, not as much :-) ) if tactics doing interesting things were linear in term size.  For example, rewrite does magic (maybe apply does too), so I'm mostly fine with having to jump through hoops to get the type-checker to not type-check things too many time.  But I expect [generalize] to depend on the goal size after generalization, not on the size of the term I'm generalizing, at least in cases where there are no terms which almost match but don't.  (So, e.g., [match goal with |- ?G => generalize G end] is something I expect to be instantaneous.  Generalizing a deep tree with leaves of [nat] in a goal which is a deep tree with many leaves of [nat + nat], but one subtree that matches what I'm generalizing---I'm fine with that taking a long time.)\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518631/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518633","html_url":"https://github.com/coq/coq/issues/3280#issuecomment-337518633","issue_url":"https://api.github.com/repos/coq/coq/issues/3280","id":337518633,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxODYzMw==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-05-09T01:19:59Z","updated_at":"2017-10-18T09:15:47Z","author_association":"CONTRIBUTOR","body":"Comment author: @mattam82\n\nOn my machine and with the current trunk, refine is faster than apply, and this all seems pretty linear to me (measurements are fishy though): \n\n1 Time apply f_equal.\nFinished transaction in 0. secs (0.u,0.s)\n2 Time apply f_equal.\nFinished transaction in 0. secs (0.u,0.s)\n3 Time apply f_equal.\nFinished transaction in 0. secs (0.u,0.s)\n4 Time apply f_equal.\nFinished transaction in 0. secs (0.u,0.s)\n5 Time apply f_equal.\nFinished transaction in 0. secs (0.u,0.s)\n6 Time apply f_equal.\nFinished transaction in 0. secs (0.u,0.s)\n7 Time apply f_equal.\nFinished transaction in 0. secs (0.u,0.s)\n8 Time apply f_equal.\nFinished transaction in 0.001 secs (0.001u,0.s)\n9 Time apply f_equal.\nFinished transaction in 0.002 secs (0.001u,0.s)\n10 Time apply f_equal.\nFinished transaction in 0.005 secs (0.003u,0.001s)\n11 Time apply f_equal.\nFinished transaction in 0.014 secs (0.01u,0.003s)\n12 Time apply f_equal.\nFinished transaction in 0.028 secs (0.02u,0.007s)\n13 Time apply f_equal.\nFinished transaction in 0.051 secs (0.039u,0.012s)\n14 Time apply f_equal.\nFinished transaction in 0.114 secs (0.088u,0.025s)\n15 Time apply f_equal.\nFinished transaction in 0.153 secs (0.152u,0.s)\n16 Time apply f_equal.\nFinished transaction in 0.428 secs (0.42u,0.007s)\n17 Time apply f_equal.\nFinished transaction in 0.485 secs (0.48u,0.005s)\n18 Time apply f_equal.\nFinished transaction in 1.05 secs (1.032u,0.018s)\n19 Time apply f_equal.\nFinished transaction in 2.474 secs (2.414u,0.058s)\n20 Time apply f_equal.\nFinished transaction in 5.948 secs (5.629u,0.292s)\n\n\nThe next batch is actually refines:\n\n1 Time apply f_equal.\nFinished transaction in 0. secs (0.u,0.s)\n2 Time apply f_equal.\nFinished transaction in 0. secs (0.u,0.s)\n3 Time apply f_equal.\nFinished transaction in 0. secs (0.u,0.s)\n4 Time apply f_equal.\nFinished transaction in 0. secs (0.u,0.s)\n5 Time apply f_equal.\nFinished transaction in 0. secs (0.u,0.s)\n6 Time apply f_equal.\nFinished transaction in 0. secs (0.u,0.s)\n7 Time apply f_equal.\nFinished transaction in 0. secs (0.u,0.s)\n8 Time apply f_equal.\nFinished transaction in 0. secs (0.u,0.s)\n9 Time apply f_equal.\nFinished transaction in 0. secs (0.u,0.s)\n10 Time apply f_equal.\nFinished transaction in 0. secs (0.u,0.s)\n11 Time apply f_equal.\nFinished transaction in 0.001 secs (0.001u,0.s)\n12 Time apply f_equal.\nFinished transaction in 0.005 secs (0.005u,0.s)\n13 Time apply f_equal.\nFinished transaction in 0.011 secs (0.011u,0.s)\n14 Time apply f_equal.\nFinished transaction in 0.026 secs (0.026u,0.s)\n15 Time apply f_equal.\nFinished transaction in 0.06 secs (0.059u,0.s)\n16 Time apply f_equal.\nFinished transaction in 0.112 secs (0.112u,0.s)\n17 Time apply f_equal.\nFinished transaction in 0.212 secs (0.212u,0.s)\n18 Time apply f_equal.\nFinished transaction in 0.858 secs (0.841u,0.002s)\n19 Time apply f_equal.\nFinished transaction in 0.916 secs (0.882u,0.033s)\n20 Time apply f_equal.\nFinished transaction in 1.894 secs (1.796u,0.097s)\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518633/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518635","html_url":"https://github.com/coq/coq/issues/3280#issuecomment-337518635","issue_url":"https://api.github.com/repos/coq/coq/issues/3280","id":337518635,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxODYzNQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-05-09T14:38:49Z","updated_at":"2017-10-18T09:15:47Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nMy timings on trunk () are only 2x slower, which might just be a difference in machine:\n\n10 Time apply f_equal.\nFinished transaction in 0.007 secs (0.004u,0.004s)\n11 Time apply f_equal.\nFinished transaction in 0.015 secs (0.008u,0.008s)\n12 Time apply f_equal.\nFinished transaction in 0.038 secs (0.032u,0.004s)\n13 Time apply f_equal.\nFinished transaction in 0.097 secs (0.072u,0.024s)\n14 Time apply f_equal.\nFinished transaction in 0.222 secs (0.176u,0.048s)\n15 Time apply f_equal.\nFinished transaction in 0.398 secs (0.4u,0.s)\n16 Time apply f_equal.\nFinished transaction in 0.999 secs (0.984u,0.016s)\n17 Time apply f_equal.\nFinished transaction in 1.209 secs (1.204u,0.004s)\n18 Time apply f_equal.\nFinished transaction in 2.422 secs (2.392u,0.028s)\n19 Time apply f_equal.\nFinished transaction in 6.12 secs (6.016u,0.104s)\n20 Time apply f_equal.\nFinished transaction in 13.045 secs (12.688u,0.356s)\n\nAnd refine is marginally faster (though the time for 20 is very, very fishy)\n10 Time refine (f_equal _ _).\nFinished transaction in 0.002 secs (0.u,0.s)\n11 Time refine (f_equal _ _).\nFinished transaction in 0.004 secs (0.003u,0.s)\n12 Time refine (f_equal _ _).\nFinished transaction in 0.01 secs (0.008u,0.004s)\n13 Time refine (f_equal _ _).\nFinished transaction in 0.029 secs (0.024u,0.004s)\n14 Time refine (f_equal _ _).\nFinished transaction in 0.07 secs (0.056u,0.012s)\n15 Time refine (f_equal _ _).\nFinished transaction in 0.175 secs (0.16u,0.016s)\n16 Time refine (f_equal _ _).\nFinished transaction in 0.311 secs (0.312u,0.s)\n17 Time refine (f_equal _ _).\nFinished transaction in 0.554 secs (0.552u,0.s)\n18 Time refine (f_equal _ _).\nFinished transaction in 1.579 secs (1.524u,0.056s)\n19 Time refine (f_equal _ _).\nFinished transaction in 5.285 secs (5.228u,0.06s)\n20 Time refine (f_equal _ _).\nFinished transaction in 4.806 secs (4.644u,0.164s)\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518635/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518636","html_url":"https://github.com/coq/coq/issues/3280#issuecomment-337518636","issue_url":"https://api.github.com/repos/coq/coq/issues/3280","id":337518636,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxODYzNg==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-05-09T14:41:52Z","updated_at":"2017-10-18T09:15:47Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nNote that [rewrite] seems to be a particularly bad offender, being about twice as slow as [apply f_equal]:\n\n$ cat ~/tmp/slow_rewrite.v\nAxiom nat_prod : nat -> nat -> nat.\nFixpoint twos (n : nat) (A : nat) :=\n  match n with\n    | O => A\n    | S n' => twos n' (nat_prod A A)\n  end.\nLtac display := match goal with |- let n := ?k in _ => idtac (*k \"Time apply f_equal.\"*) end; hnf; unfold twos; cbv beta.\nAxiom k : nat.\nAxiom x y : nat.\nAxiom H : x = y.\nNotation foo := (nat_prod _ _).\nGoal twos 0 x = twos 0 x. lazy. idtac \"trivial rewrite\". Time rewrite H. Admitted.\nGoal let n := 16 in prod (twos 0 x = twos 0 x) (twos n k = twos n k). display. idtac \"rewrite H\". Time rewrite H. Admitted.\nGoal let n := 16 in prod (twos 0 x = twos 0 x) (twos n k = twos n k). display. idtac \"rewrite !H (2)\". Time rewrite !H. Admitted.\nGoal let n := 16 in prod (twos 0 x = twos 0 x) (twos n k = twos n k). display. idtac \"repeat rewrite H (2)\". Time repeat rewrite H. Admitted.\nGoal let n := 16 in prod (twos 0 x = twos 0 x) (twos n k = twos n k). display. idtac \"split; [ rewrite H | apply f_equal ]\". Time split. Time rewrite H. admit. Time apply f_equal. Admitted.\nGoal let n := 16 in prod (twos 0 x = twos 0 x) (twos n k = twos n k). display. idtac \"split; [ rewrite !H (2) | apply f_equal ]\". Time split. Time rewrite !H. admit. Time apply f_equal. Admitted.\nGoal let n := 16 in prod (twos 0 x = twos 0 x) (twos n k = twos n k). display. idtac \"split; [ repeat rewrite H (2) | apply f_equal ]\". Time split. Time repeat rewrite H. admit. Time apply f_equal. Admitted.\n\nGoal let n := 16 in prod (twos 1 x = twos 1 x) (twos n k = twos n k). display. idtac \"rewrite H\". Time rewrite H. Admitted.\nGoal let n := 16 in prod (twos 1 x = twos 1 x) (twos n k = twos n k). display. idtac \"rewrite !H (4)\". Time rewrite !H. Admitted.\nGoal let n := 16 in prod (twos 1 x = twos 1 x) (twos n k = twos n k). display. idtac \"repeat rewrite H (4)\". Time repeat rewrite H. Admitted.\nGoal let n := 16 in prod (twos 1 x = twos 1 x) (twos n k = twos n k). display. idtac \"split; [ rewrite H | apply f_equal ]\". Time split. Time rewrite H. admit. Time apply f_equal. Admitted.\nGoal let n := 16 in prod (twos 1 x = twos 1 x) (twos n k = twos n k). display. idtac \"split; [ rewrite !H (4) | apply f_equal ]\". Time split. Time rewrite !H. admit. Time apply f_equal. Admitted.\nGoal let n := 16 in prod (twos 1 x = twos 1 x) (twos n k = twos n k). display. idtac \"split; [ repeat rewrite H (4) | apply f_equal ]\". Time split. Time repeat rewrite H. admit. Time apply f_equal. Admitted.\n\n$ ~/.local64/coq/coq-trunk/bin/coqc ~/tmp/slow_rewrite.v | tee ~/tmp/slow_rewrite-trunk.timings\n...\n$ cat ~/tmp/slow_rewrite-trunk.timings | tr '\\n' '%' | sed s'/%Finished transaction in//g' | tr '%' '\\n'\n\ntrivial rewrite 0. secs (0.004u,0.s)\nrewrite H 1.816 secs (1.74u,0.076s)\nrewrite !H (2) 2.15 secs (2.12u,0.028s)\nrepeat rewrite H (2) 1.85 secs (1.852u,0.s)\nsplit; [ rewrite H | apply f_equal ] 1.532 secs (1.528u,0.004s) 0. secs (0.u,0.s) 0.732 secs (0.732u,0.s)\nsplit; [ rewrite !H (2) | apply f_equal ] 1.064 secs (1.056u,0.012s) 0. secs (0.u,0.s) 1.348 secs (1.34u,0.008s)\nsplit; [ repeat rewrite H (2) | apply f_equal ] 1.227 secs (1.224u,0.s) 0. secs (0.u,0.s) 1.227 secs (1.228u,0.s)\nrewrite H 1.64 secs (1.64u,0.s)\nrewrite !H (4) 1.921 secs (1.92u,0.s)\nrepeat rewrite H (4) 1.967 secs (1.968u,0.s)\nsplit; [ rewrite H | apply f_equal ] 1.059 secs (1.06u,0.s) 0. secs (0.u,0.s) 0.745 secs (0.744u,0.s)\nsplit; [ rewrite !H (4) | apply f_equal ] 1.256 secs (1.244u,0.012s) 0. secs (0.u,0.s) 0.738 secs (0.74u,0.s)\nsplit; [ repeat rewrite H (4) | apply f_equal ] 1.515 secs (1.504u,0.012s) 0. secs (0.u,0.s) 0.861 secs (0.852u,0.012s)\nsplit; [ repeat rewrite H (4) | apply f_equal ] 1.249 secs (1.208u,0.04s) 0. secs (0.u,0.s) 0.723 secs (0.716u,0.008s)\nsplit; [ rewrite !H (4) | apply f_equal ] 1.317 secs (1.288u,0.032s) 0. secs (0.u,0.s) 0.72 secs (0.696u,0.024s)\nsplit; [ rewrite H | apply f_equal ] 1.624 secs (1.612u,0.012s) 0. secs (0.u,0.s) 0.712 secs (0.712u,0.s)\nrepeat rewrite H (4) 2.053 secs (2.052u,0.004s)\nrewrite !H (4) 1.938 secs (1.912u,0.024s)\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518636/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518639","html_url":"https://github.com/coq/coq/issues/3280#issuecomment-337518639","issue_url":"https://api.github.com/repos/coq/coq/issues/3280","id":337518639,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxODYzOQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-05-09T14:48:13Z","updated_at":"2017-10-18T09:15:48Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nAlso, the timings in interactive mode are misleading; there seems to be a constant ~0.1s overhead associated with all full tactics (e.g., Time idtac. and Time do 1000 idtac. both tell me 0.1-0.2 seconds) when I am operating on a small goal and there is another large goal.)\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518639/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518641","html_url":"https://github.com/coq/coq/issues/3280#issuecomment-337518641","issue_url":"https://api.github.com/repos/coq/coq/issues/3280","id":337518641,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxODY0MQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-03-07T21:03:44Z","updated_at":"2017-12-23T00:51:38Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\r\n\r\nIn 8.4, `set` is a particularly bad offender:\r\n```coq\r\nFixpoint twos (n : nat) (A : Type) :=\r\n  match n with\r\n    | 0 => A\r\n    | S n' => twos n' (prod A A)\r\n  end.\r\n\r\nLtac display := match goal with |- let n := ?k in _ => idtac k \"Time apply f_equal.\" end; hnf; unfold twos; cbv beta.\r\n\r\nNotation hide := (_ = _).\r\n\r\nLtac myset x y := pose y as x; change y with x.\r\n\r\nGoal let n := 11 in twos n Set = twos n Set. display. Time match goal with |- ?G => set (G' := G) end. Abort. (* Finished transaction in 4. secs (3.668u,0.032s) *)\r\nGoal let n := 11 in twos n Set = twos n Set. display. Time match goal with |- ?G => myset G' G end. Abort. (* Finished transaction in 0. secs (0.064u,0.s) *)\r\n```\r\nBut in 8.5, `set` is much, much faster, and ends up being 4x faster than `myset` (when n = 20), rather than 50x slower (when n = 11).\r\n\r\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518641/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/353600604","html_url":"https://github.com/coq/coq/issues/3280#issuecomment-353600604","issue_url":"https://api.github.com/repos/coq/coq/issues/3280","id":353600604,"node_id":"MDEyOklzc3VlQ29tbWVudDM1MzYwMDYwNA==","user":{"login":"ppedrot","id":1202327,"node_id":"MDQ6VXNlcjEyMDIzMjc=","avatar_url":"https://avatars.githubusercontent.com/u/1202327?v=4","gravatar_id":"","url":"https://api.github.com/users/ppedrot","html_url":"https://github.com/ppedrot","followers_url":"https://api.github.com/users/ppedrot/followers","following_url":"https://api.github.com/users/ppedrot/following{/other_user}","gists_url":"https://api.github.com/users/ppedrot/gists{/gist_id}","starred_url":"https://api.github.com/users/ppedrot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ppedrot/subscriptions","organizations_url":"https://api.github.com/users/ppedrot/orgs","repos_url":"https://api.github.com/users/ppedrot/repos","events_url":"https://api.github.com/users/ppedrot/events{/privacy}","received_events_url":"https://api.github.com/users/ppedrot/received_events","type":"User","site_admin":false},"created_at":"2017-12-22T13:41:52Z","updated_at":"2017-12-22T13:41:52Z","author_association":"MEMBER","body":"So, I think this bug is invalid. Unification is expected to be at least linear in the size of the terms it manipulates.","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/353600604/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/354902544","html_url":"https://github.com/coq/coq/issues/3280#issuecomment-354902544","issue_url":"https://api.github.com/repos/coq/coq/issues/3280","id":354902544,"node_id":"MDEyOklzc3VlQ29tbWVudDM1NDkwMjU0NA==","user":{"login":"JasonGross","id":396076,"node_id":"MDQ6VXNlcjM5NjA3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/396076?v=4","gravatar_id":"","url":"https://api.github.com/users/JasonGross","html_url":"https://github.com/JasonGross","followers_url":"https://api.github.com/users/JasonGross/followers","following_url":"https://api.github.com/users/JasonGross/following{/other_user}","gists_url":"https://api.github.com/users/JasonGross/gists{/gist_id}","starred_url":"https://api.github.com/users/JasonGross/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JasonGross/subscriptions","organizations_url":"https://api.github.com/users/JasonGross/orgs","repos_url":"https://api.github.com/users/JasonGross/repos","events_url":"https://api.github.com/users/JasonGross/events{/privacy}","received_events_url":"https://api.github.com/users/JasonGross/received_events","type":"User","site_admin":false},"created_at":"2018-01-02T23:25:35Z","updated_at":"2018-01-02T23:25:35Z","author_association":"MEMBER","body":"I will split this up into various issues that I believe still exist","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/354902544/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]