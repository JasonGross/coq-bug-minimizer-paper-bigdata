Comment author: @JasonGross

Ltac bar x := pose x.
Tactic Notation "foo" open_constr(x) := bar x.
Class baz := { baz' : Type }.
Goal True.
  foo baz'.


Comment author: @herbelin

Cannot reproduce with trunk >= 22 September 2014. Has been fixed some time before I guess.


Comment author: @herbelin

Actually, there is still an inconsistency between "pose baz'" which fails because of an unresolved evar and "foo baz'" which does not fail and leave an open term. I guess this inconsistent behavior should be considered a bug. So I reopen it.


Comment author: @ppedrot

I think this is the expected behaviour actually. The fact we put open_constr in the notation changes the interpretation, as experimentally witnessed. If we were to fix this bug, we would rather radically change the semantics of tactic notation (which I would be in favour of, although this is not the current topic).

Should we close this bug, thus?


Comment author: @JasonGross

I am fine with closing it.  The difference between [pose baz'] and [foo baz'] is expected because of [open_constr].  It would be nice to have a better way of systematically specifying where typeclass resolution should happen, and where it should leave open terms vs. failing, but that would be a much bigger change.


Comment author: @herbelin

PMP: I believe it is a matter of taste... One day, we should definitively clarify when and whether unresolved evars are a cause of failure, and when and whether type classes have to be looked for.

In the current case, my internal model is that "pose" checks for unresolved evars, and, if one wants a version of pose which does not check, it has to be called "epose". Independently of who is calling "pose".


Comment author: @JasonGross

> "pose" checks for unresolved evars, and, if one wants a version of pose
> which does not check, it has to be called "epose". Independently of who is
> calling "pose".

Hugo, how do you describe the following (working) code?

Goal True.
  evar (e : True).
  let x := (eval unfold e in e) in
  subst e;
  pose (x = x).


Comment author: @herbelin

My point is to try to have some regularity in the design, or at least not too much irregularity.

When a tactic referring to a term has an e- and a non e-variant, the non e-variant informally means "fails if some dependent evar is unresolved" in the term.

As explained somewhere else, this is an historical design: at the beginning, there were no evars, no e-variants, and the e-variant arrived progressively as a way for working beyond the border of the at-the-time well-marked-out evar-free territory, starting with eapply which was a subproduct of eauto.

Maybe, the distinction between e- and non e-variant lost meaning, now that evars are receiving a higher status.

Moreover, implementing the non e-variant is a pain. At the current time, I capitulated in having a check which is fully correct. For instance on goals such as "?m = ?n", if one applies a lemma such as eq_sym, i.e. if one tries to find ?x and ?y such that the type "?y = ?x" of "eq_sym ?x ?y _" unifies with "?m = ?n", one might by bad luck get the result ?m:=?y and ?n:=?x, leaving ?x and ?y apparently unresolved, which is not the case.

Coming back to "pose" and to my concern for regularity of the design, what I'm saying is just that having

<< pose _. >> fails
<< Tactic Notation "foo" open_constr(x) := pose x. pose _. >> succeeds
or you last example succeeding too

is inconsistent, and this is why I reopened the bug.

Facing this inconsistency, I see two possibilities:
1. providing "pose" and "epose" (and "set" and "eset") following the established distinction between e- and non e-variants of tactics, and having all examples failing if not using "epose".
2. having "pose _" not failing.

Both are ok to me. More precisely, if we want to maintain the e- vs non e- model, I think solution 1 is the most consistent design choice (but maybe also the most tricky to implement). But I'm ok with doing an exception for pose and set. Conversely, if we adopt 2, then maybe this is a sign that we should think about progressively renouncing to the e- vs non e- model.


Comment author: @ejgallego

What is the status of this, has the situation improved with the e-tactics PR?


