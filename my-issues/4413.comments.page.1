[{"url":"https://api.github.com/repos/coq/coq/issues/comments/337537470","html_url":"https://github.com/coq/coq/issues/4413#issuecomment-337537470","issue_url":"https://api.github.com/repos/coq/coq/issues/4413","id":337537470,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUzNzQ3MA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2015-11-08T22:58:31Z","updated_at":"2019-02-22T16:56:14Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\r\n```coq\r\nAxiom proof_admitted : False.\r\nLtac admit := abstract case proof_admitted.\r\nGoal True.\r\n  evar (x : nat).\r\n  assert (H : x = 1) by (exfalso; clear; admit).\r\n  pose proof (f_equal (fun k => k) H).\r\n  subst x.\r\n  pose proof (f_equal (fun k => k) H). (* Error: Cannot infer the implicit parameter x of f_equal whose type is \"nat\". *)\r\n\r\n\r\n```","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337537470/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337537471","html_url":"https://github.com/coq/coq/issues/4413#issuecomment-337537471","issue_url":"https://api.github.com/repos/coq/coq/issues/4413","id":337537471,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUzNzQ3MQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-11-21T21:59:43Z","updated_at":"2017-10-18T10:10:25Z","author_association":"CONTRIBUTOR","body":"Comment author: @herbelin\n\nHi, the regression comes from the change in the order in which evar-evar problems are solved by default in 8.5: when type-checking \"(f_equal (fun k => k) (x:=?y) H)\", the instantiation is ?x:=?y in 8.5 and 8.6 which it was ?y:=?x, misguiding the test that all evars, ?y included, should be resolved.\n\nIn this example, I feel that the intended behavior is indeed that ?x is treated as opaque and ?y be instantiate to it. I tried a quick fix (PR [BZ#370](https://github.com/coq/coq/issues?q=is%3Aissue%20%22Original%20bug%20ID%3A%20BZ%23370%22)), which I hope is not breaking other things which would benefit from another instantiation order, but the question is more generally about the expected status of pre-existing evars.\n\nFor instance, in:\n\nGoal exists x, x = 1 -> (1 = 1 -> False) -> False.\neexists. intros H H'. pose proof (H' H).\n\nDo we expect the ?x to be intanstiated by default (as it now), or to be considered as frozen.\n\n[Technically, for devs, the proposal is to use the future_goal field as a heuristic for deciding whether ?x:=?y is to be preferred or the reverse.]\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337537471/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337537475","html_url":"https://github.com/coq/coq/issues/4413#issuecomment-337537475","issue_url":"https://api.github.com/repos/coq/coq/issues/4413","id":337537475,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUzNzQ3NQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-11-22T03:19:35Z","updated_at":"2017-10-18T10:10:25Z","author_association":"CONTRIBUTOR","body":"Comment author: @jonleivent\n\nJust curious, but why does the first pose here fail, but the second one work?:\n\nGoal True.\n  refine (let H := _ : (_:nat) = _ in _).\n  Fail pose (f_equal S H).\n  pose (@ f_equal _ _ S _ _ H).\n\nI would have thought them to be identical except for syntactic sugar...\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337537475/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337537476","html_url":"https://github.com/coq/coq/issues/4413#issuecomment-337537476","issue_url":"https://api.github.com/repos/coq/coq/issues/4413","id":337537476,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUzNzQ3Ng==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-11-22T11:05:04Z","updated_at":"2017-10-18T10:10:25Z","author_association":"CONTRIBUTOR","body":"Comment author: @herbelin\n\nTo Jonathan: Technically because the heuristic used for evar-evar unification in 8.5 is dependent on the \"kind\" of evar: a \"_\" is not of the same internal kind as an implicit argument (function \"preferred_orientation\" in evarsolve.ml).\n\nI'm unfortunately unsure that the criterion I had implemented there is robust enough, and I suppose it would be needed to collect further representative examples to find a better criterion.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337537476/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]