[{"url":"https://api.github.com/repos/coq/coq/issues/comments/337547236","html_url":"https://github.com/coq/coq/issues/5085#issuecomment-337547236","issue_url":"https://api.github.com/repos/coq/coq/issues/5085","id":337547236,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0NzIzNg==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-09-14T20:01:08Z","updated_at":"2017-10-18T10:41:25Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nIn the attached files, [nsatz_compute] stack overflows.  ([nsatz] seems to be \nstuck on [reify_goal].  The reification of equations ([list_reifyl]) takes \nabout 900 seconds.  The nsatz_compute stack overflow example starts out by \ngiving the relevant reified term.)  See also \nhttps://github.com/mit-plv/fiat-crypto/issues/59.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337547236/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337547239","html_url":"https://github.com/coq/coq/issues/5085#issuecomment-337547239","issue_url":"https://api.github.com/repos/coq/coq/issues/5085","id":337547239,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0NzIzOQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-09-14T20:01:15Z","updated_at":"2017-10-18T10:41:25Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nCreated attachment 763\n[nsatz] being slow\n\n> Attached file: [nsatz_slow.v](https://coq.inria.fr/bugfiles/attachment.cgi?id=763) (text/plain, 63255 bytes)\n> Description:   [nsatz] being slow\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337547239/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337547241","html_url":"https://github.com/coq/coq/issues/5085#issuecomment-337547241","issue_url":"https://api.github.com/repos/coq/coq/issues/5085","id":337547241,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0NzI0MQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-09-14T20:01:19Z","updated_at":"2017-10-18T10:41:25Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nCreated attachment 764\nstack overflow in [nsatz_compute]\n\n> Attached file: [nsatz_compute_stack_overflow.v](https://coq.inria.fr/bugfiles/attachment.cgi?id=764) (text/plain, 89355 bytes)\n> Description:   stack overflow in [nsatz_compute]\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337547241/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337547242","html_url":"https://github.com/coq/coq/issues/5085#issuecomment-337547242","issue_url":"https://api.github.com/repos/coq/coq/issues/5085","id":337547242,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0NzI0Mg==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-09-26T14:25:23Z","updated_at":"2017-10-18T10:41:25Z","author_association":"CONTRIBUTOR","body":"Comment author: @ppedrot\n\nThe stack overflow issue has been fixed by 3d9a137. Note that the computation still takes ages, because it computes a HUGE polynomial (e.g. it notably involves a multiplication between polynomials made out of about 30k and 400k monomials). Why do you need the exponentiation by 3 of the whole polynomial? It is responsible for the size of the whole expression.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337547242/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337547243","html_url":"https://github.com/coq/coq/issues/5085#issuecomment-337547243","issue_url":"https://api.github.com/repos/coq/coq/issues/5085","id":337547243,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0NzI0Mw==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-09-27T04:15:08Z","updated_at":"2017-10-18T10:41:25Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nWhere do we cube it?\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337547243/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337547244","html_url":"https://github.com/coq/coq/issues/5085#issuecomment-337547244","issue_url":"https://api.github.com/repos/coq/coq/issues/5085","id":337547244,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0NzI0NA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-09-27T05:34:52Z","updated_at":"2017-10-18T10:41:25Z","author_association":"CONTRIBUTOR","body":"Comment author: @ppedrot\n\n(In reply to Jason Gross from comment [BZ#4](https://github.com/coq/coq/issues?q=is%3Aissue%20%22Original%20bug%20ID%3A%20BZ%234%22))\n> Where do we cube it?\n\nIn your expanded Ltac definition there is a PEpow:\n\nLtac nsatz_compute_to_goal sugar nparams reified_goal power reified_givens :=\n  nsatz_compute (PEc sugar :: PEc nparams :: PEpow reified_goal power :: reified_givens).\n\nyou later call this function with power := 3%Z.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337547244/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337547246","html_url":"https://github.com/coq/coq/issues/5085#issuecomment-337547246","issue_url":"https://api.github.com/repos/coq/coq/issues/5085","id":337547246,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0NzI0Ng==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-09-28T14:14:55Z","updated_at":"2017-10-18T10:41:25Z","author_association":"CONTRIBUTOR","body":"Comment author: @ppedrot\n\nAh, my mistake, this is indeed the nsatz algorithm that requires this exponentiation operation. So there is no way around. Note that there is still a huge inefficiency here when using standard nsatz, because the tactic keeps recomputing the exponentiations of the polynom through the try_n tactic instead of keeping them to apply fast exponentation...\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337547246/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337547247","html_url":"https://github.com/coq/coq/issues/5085#issuecomment-337547247","issue_url":"https://api.github.com/repos/coq/coq/issues/5085","id":337547247,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0NzI0Nw==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-09-28T16:08:49Z","updated_at":"2017-10-18T10:41:26Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nIt seems like there might be a separate bug here, in that, since we are in a field, if it works with any power, it'll work with power 1, and while sage's implementation can find a solution, nsatz cannot.  But that probably deserves a separate bug report.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337547247/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337547248","html_url":"https://github.com/coq/coq/issues/5085#issuecomment-337547248","issue_url":"https://api.github.com/repos/coq/coq/issues/5085","id":337547248,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0NzI0OA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-10-03T15:09:29Z","updated_at":"2017-10-18T10:41:26Z","author_association":"CONTRIBUTOR","body":"Comment author: @thery\n\nSorry, I had a quick look at this bug and I can't grasp it: it is too big for my small brain. I need help.\n\nWhat is the bug about?\n\n1) There is a bug in the reification : it is too slow\n\n2) the Grobner computation is uncapable to prove something that a computer algebra system does.\n\n3) nsatz finds the witness but can convert it back to a proof term.\n\n\n--\nLaurent\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337547248/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337547250","html_url":"https://github.com/coq/coq/issues/5085#issuecomment-337547250","issue_url":"https://api.github.com/repos/coq/coq/issues/5085","id":337547250,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0NzI1MA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-10-03T15:17:08Z","updated_at":"2017-10-18T10:41:26Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\n2 is the one I most want to see fixed.\n\nThe issue as reported (stack overflow) has been fixed, but there remain two issues (which I should perhaps report as separate bugs): 1 and 2\n\nThe first attachment demonstrates both issues.  The second attached file starts from the reified term, and demonstrates only issue 2.  (Both files demonstrated the stack overflow before PMP made the methods tail-recursive.)\n\nIssue 2 is more pressing.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337547250/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337547251","html_url":"https://github.com/coq/coq/issues/5085#issuecomment-337547251","issue_url":"https://api.github.com/repos/coq/coq/issues/5085","id":337547251,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0NzI1MQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-10-03T15:47:57Z","updated_at":"2017-10-18T10:41:26Z","author_association":"CONTRIBUTOR","body":"Comment author: @thery\n\nJust to complement I can address 2.\n\nnsatz does not understand power\n\n\nGoal forall x : Q , x == 1 -> (x - 1) ^ 2 == 0.\nintros; nsatz.\nfails \nwhile\nintros; simpl; nsatz.\nsucceeds\n\n\nFor the kind of problem you are dealing with, grobner basis is a bit an overkilled. Grobner depends heavily on variable ordering. This could explain why it takes forever.\n\nWhy don't you use ring to perform your computation that needs only simple rewriting (note I have rephrase the assumption)?\n\nGoal forall\n  x1 y1 x2 y2 x3 y3 a b : Q,\n  y1^2 == x1^3 +a*x1 + b ->\n  y2^2 == x2^3 + a*x2 + b ->\n  y3^2 == x3^3 + a*x3 + b ->\n  ((2 * x2 + x3) * (y3 - y2)) ^ 2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x2 * x2 * (x2 - x1) *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) +\n  2 * ((2 * x2 + x3) * (y3 - y2)) * ((2 * x2 + x3) * (y3 - y2)) * (x3 - x2) * (x3 - x2) * (x3 - x2) *\n  (x3 - x2) * x2 * x3 * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * \n  (x2 - x1) +\n  2 * ((2 * x2 + x3) * (y3 - y2)) * ((2 * x2 + x3) * (y3 - y2)) * (x3 - x2) * (x3 - x2) * (x3 - x2) *\n  (x3 - x2) * x2 * x1 * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * \n  (x2 - x1) -\n  2 * ((2 * x2 + x3) * (y3 - y2)) * ((2 * x2 + x3) * (y3 - y2)) * (x3 - x2) * (x3 - x2) * (x3 - x2) *\n  (x3 - x2) * x2 * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (y2 - y1) * \n  (y2 - y1) +\n  ((2 * x2 + x3) * (y3 - y2)) ^ 2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x3 * x3 * (x2 - x1) *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) +\n  2 * ((2 * x2 + x3) * (y3 - y2)) * ((2 * x2 + x3) * (y3 - y2)) * (x3 - x2) * (x3 - x2) * (x3 - x2) *\n  (x3 - x2) * x3 * x1 * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * \n  (x2 - x1) -\n  2 * ((2 * x2 + x3) * (y3 - y2)) * ((2 * x2 + x3) * (y3 - y2)) * (x3 - x2) * (x3 - x2) * (x3 - x2) *\n  (x3 - x2) * x3 * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (y2 - y1) * \n  (y2 - y1) +\n  ((2 * x2 + x3) * (y3 - y2)) ^ 2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x1 * x1 * (x2 - x1) *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) -\n  2 * ((2 * x2 + x3) * (y3 - y2)) * ((2 * x2 + x3) * (y3 - y2)) * (x3 - x2) * (x3 - x2) * (x3 - x2) *\n  (x3 - x2) * x1 * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (y2 - y1) * \n  (y2 - y1) +\n  ((2 * x2 + x3) * (y3 - y2)) ^ 2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x2 - x1) *\n  (x2 - x1) * (y2 - y1) * (y2 - y1) * (y2 - y1) * (y2 - y1) -\n  2 * ((2 * x2 + x3) * (y3 - y2)) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * y2 * x2 *\n  x2 * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) -\n  2 ^ 2 * ((2 * x2 + x3) * (y3 - y2)) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * y2 *\n  x2 * x3 * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) -\n  2 ^ 2 * ((2 * x2 + x3) * (y3 - y2)) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * y2 *\n  x2 * x1 * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) +\n  2 ^ 2 * ((2 * x2 + x3) * (y3 - y2)) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * y2 *\n  x2 * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) -\n  2 * ((2 * x2 + x3) * (y3 - y2)) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * y2 * x3 *\n  x3 * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) -\n  2 ^ 2 * ((2 * x2 + x3) * (y3 - y2)) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * y2 *\n  x3 * x1 * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) +\n  2 ^ 2 * ((2 * x2 + x3) * (y3 - y2)) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * y2 *\n  x3 * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) -\n  2 * ((2 * x2 + x3) * (y3 - y2)) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * y2 * x1 *\n  x1 * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) +\n  2 ^ 2 * ((2 * x2 + x3) * (y3 - y2)) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * y2 *\n  x1 * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) -\n  2 * ((2 * x2 + x3) * (y3 - y2)) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * y2 *\n  (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) * (y2 - y1) * (y2 - y1) -\n  2 * ((2 * x2 + x3) * (y3 - y2)) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * y1 * x2 *\n  x2 * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) -\n  2 ^ 2 * ((2 * x2 + x3) * (y3 - y2)) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * y1 *\n  x2 * x3 * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) -\n  2 ^ 2 * ((2 * x2 + x3) * (y3 - y2)) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * y1 *\n  x2 * x1 * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) +\n  2 ^ 2 * ((2 * x2 + x3) * (y3 - y2)) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * y1 *\n  x2 * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) -\n  2 * ((2 * x2 + x3) * (y3 - y2)) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * y1 * x3 *\n  x3 * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) -\n  2 ^ 2 * ((2 * x2 + x3) * (y3 - y2)) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * y1 *\n  x3 * x1 * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) +\n  2 ^ 2 * ((2 * x2 + x3) * (y3 - y2)) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * y1 *\n  x3 * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) -\n  2 * ((2 * x2 + x3) * (y3 - y2)) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * y1 * x1 *\n  x1 * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) +\n  2 ^ 2 * ((2 * x2 + x3) * (y3 - y2)) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * y1 *\n  x1 * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) -\n  2 * ((2 * x2 + x3) * (y3 - y2)) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * y1 *\n  (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) * (y2 - y1) * (y2 - y1) -\n  2 * ((2 * x2 + x3) * (y3 - y2)) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * x2 * x2 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) -\n  2 ^ 2 * ((2 * x2 + x3) * (y3 - y2)) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * x2 *\n  x3 * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) -\n  2 ^ 2 * ((2 * x2 + x3) * (y3 - y2)) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * x2 *\n  x1 * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) +\n  2 ^ 2 * ((2 * x2 + x3) * (y3 - y2)) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * x2 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) -\n  2 * ((2 * x2 + x3) * (y3 - y2)) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * x3 * x3 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) -\n  2 ^ 2 * ((2 * x2 + x3) * (y3 - y2)) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * x3 *\n  x1 * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) +\n  2 ^ 2 * ((2 * x2 + x3) * (y3 - y2)) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * x3 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) -\n  2 * ((2 * x2 + x3) * (y3 - y2)) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * x1 * x1 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) +\n  2 ^ 2 * ((2 * x2 + x3) * (y3 - y2)) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * x1 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) -\n  2 * ((2 * x2 + x3) * (y3 - y2)) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * (y3 - y2) *\n  (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) * (y2 - y1) * (y2 - y1) +\n  (x3 - x2) ^ 2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * y2 * y2 * x2 * x2 * (x2 - x1) *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) +\n  2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * y2 * y2 * x2 * x3 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) +\n  2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * y2 * y2 * x2 * x1 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) -\n  2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * y2 * y2 * x2 * (x2 - x1) *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) +\n  (x3 - x2) ^ 2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * y2 * y2 * x3 * x3 * (x2 - x1) *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) +\n  2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * y2 * y2 * x3 * x1 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) -\n  2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * y2 * y2 * x3 * (x2 - x1) *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) +\n  (x3 - x2) ^ 2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * y2 * y2 * x1 * x1 * (x2 - x1) *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) -\n  2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * y2 * y2 * x1 * (x2 - x1) *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) +\n  (x3 - x2) ^ 2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * y2 * y2 * (x2 - x1) * (x2 - x1) *\n  (y2 - y1) * (y2 - y1) * (y2 - y1) * (y2 - y1) +\n  2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * y2 * y1 * x2 * x2 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) +\n  2 ^ 2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * y2 * y1 * x2 * x3 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) +\n  2 ^ 2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * y2 * y1 * x2 * x1 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) -\n  2 ^ 2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * y2 * y1 * x2 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) +\n  2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * y2 * y1 * x3 * x3 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) +\n  2 ^ 2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * y2 * y1 * x3 * x1 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) -\n  2 ^ 2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * y2 * y1 * x3 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) +\n  2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * y2 * y1 * x1 * x1 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) -\n  2 ^ 2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * y2 * y1 * x1 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) +\n  2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * y2 * y1 * (x2 - x1) *\n  (x2 - x1) * (y2 - y1) * (y2 - y1) * (y2 - y1) * (y2 - y1) +\n  (x3 - x2) ^ 2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * y1 * y1 * x2 * x2 * (x2 - x1) *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) +\n  2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * y1 * y1 * x2 * x3 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) +\n  2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * y1 * y1 * x2 * x1 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) -\n  2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * y1 * y1 * x2 * (x2 - x1) *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) +\n  (x3 - x2) ^ 2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * y1 * y1 * x3 * x3 * (x2 - x1) *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) +\n  2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * y1 * y1 * x3 * x1 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) -\n  2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * y1 * y1 * x3 * (x2 - x1) *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) +\n  (x3 - x2) ^ 2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * y1 * y1 * x1 * x1 * (x2 - x1) *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) -\n  2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * y1 * y1 * x1 * (x2 - x1) *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) +\n  (x3 - x2) ^ 2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * y1 * y1 * (x2 - x1) * (x2 - x1) *\n  (y2 - y1) * (y2 - y1) * (y2 - y1) * (y2 - y1) +\n  (x3 - x2) ^ 2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x2 * x2 * x2 * x2 * x2 * (x2 - x1) *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) +\n  (1 + 2 ^ 2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x2 * x2 * x2 *\n  x2 * x3 * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) +\n  3 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x2 * x2 * x2 * x2 * x1 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) -\n  2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x2 * x2 * x2 * x2 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) +\n  2 * (1 + 2 ^ 2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x2 * x2 * x2 *\n  x3 * x3 * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) +\n  2 * (2 * 3) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x2 * x2 * x2 *\n  x3 * x1 * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) -\n  2 ^ 3 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x2 * x2 * x2 * x3 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) +\n  2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x2 * x2 * x2 * x1 * x1 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) -\n  2 ^ 2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x2 * x2 * x2 * x1 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) +\n  (x3 - x2) ^ 2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x2 * x2 * x2 * (x2 - x1) * (x2 - x1) *\n  (y2 - y1) * (y2 - y1) * (y2 - y1) * (y2 - y1) +\n  2 * (1 + 2 ^ 2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x2 * x2 * x3 *\n  x3 * x3 * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) +\n  2 * (1 + 2 ^ 3) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x2 * x2 * x3 *\n  x3 * x1 * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) -\n  2 * (2 * 3) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x2 * x2 * x3 *\n  x3 * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) +\n  2 * 3 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x2 * x2 * x3 * x1 * x1 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) -\n  2 * (2 * 3) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x2 * x2 * x3 *\n  x1 * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) +\n  3 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x2 * x2 * x3 * (x2 - x1) *\n  (x2 - x1) * (y2 - y1) * (y2 - y1) * (y2 - y1) * (y2 - y1) -\n  2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x2 * x2 * x1 * x1 * x1 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) +\n  (x3 - x2) ^ 2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x2 * x2 * x1 * (x2 - x1) * (x2 - x1) *\n  (y2 - y1) * (y2 - y1) * (y2 - y1) * (y2 - y1) +\n  (1 + 2 ^ 2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x2 * x3 * x3 *\n  x3 * x3 * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) +\n  2 * (2 * 3) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x2 * x3 * x3 *\n  x3 * x1 * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) -\n  2 ^ 3 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x2 * x3 * x3 * x3 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) +\n  2 * 3 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x2 * x3 * x3 * x1 * x1 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) -\n  2 * (2 * 3) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x2 * x3 * x3 *\n  x1 * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) +\n  3 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x2 * x3 * x3 * (x2 - x1) *\n  (x2 - x1) * (y2 - y1) * (y2 - y1) * (y2 - y1) * (y2 - y1) -\n  2 ^ 2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x2 * x3 * x1 * x1 * x1 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) +\n  2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x2 * x3 * x1 * (x2 - x1) *\n  (x2 - x1) * (y2 - y1) * (y2 - y1) * (y2 - y1) * (y2 - y1) -\n  3 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x2 * x1 * x1 * x1 * x1 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) +\n  2 ^ 2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x2 * x1 * x1 * x1 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) -\n  (x3 - x2) ^ 2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x2 * x1 * x1 * (x2 - x1) * (x2 - x1) *\n  (y2 - y1) * (y2 - y1) * (y2 - y1) * (y2 - y1) +\n  (x3 - x2) ^ 2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x3 * x3 * x3 * x3 * x3 * (x2 - x1) *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) +\n  3 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x3 * x3 * x3 * x3 * x1 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) -\n  2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x3 * x3 * x3 * x3 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) +\n  2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x3 * x3 * x3 * x1 * x1 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) -\n  2 ^ 2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x3 * x3 * x3 * x1 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) +\n  (x3 - x2) ^ 2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x3 * x3 * x3 * (x2 - x1) * (x2 - x1) *\n  (y2 - y1) * (y2 - y1) * (y2 - y1) * (y2 - y1) -\n  2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x3 * x3 * x1 * x1 * x1 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) +\n  (x3 - x2) ^ 2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x3 * x3 * x1 * (x2 - x1) * (x2 - x1) *\n  (y2 - y1) * (y2 - y1) * (y2 - y1) * (y2 - y1) -\n  3 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x3 * x1 * x1 * x1 * x1 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) +\n  2 ^ 2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x3 * x1 * x1 * x1 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) -\n  (x3 - x2) ^ 2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x3 * x1 * x1 * (x2 - x1) * (x2 - x1) *\n  (y2 - y1) * (y2 - y1) * (y2 - y1) * (y2 - y1) -\n  (x3 - x2) ^ 2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x1 * x1 * x1 * x1 * x1 * (x2 - x1) *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) +\n  2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x1 * x1 * x1 * x1 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) -\n  (x3 - x2) ^ 2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x1 * x1 * x1 * (x2 - x1) * (x2 - x1) *\n  (y2 - y1) * (y2 - y1) * (y2 - y1) * (y2 - y1) -\n  3 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * x2 * x2 * x2 * x2 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) -\n  2 * (2 * 3) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * x2 * x2 * x2 *\n  x3 * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) -\n  2 ^ 3 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * x2 * x2 * x2 * x1 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) +\n  2 * 3 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * x2 * x2 * x2 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) -\n  2 * (1 + 2 ^ 3) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * x2 * x2 * x3 *\n  x3 * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) -\n  2 * (2 * (2 * 3)) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * x2 * x2 *\n  x3 * x1 * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) +\n  2 * (1 + 2 ^ 3) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * x2 * x2 * x3 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) -\n  2 * 3 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * x2 * x2 * x1 * x1 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) +\n  2 * (1 + 2 ^ 2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * x2 * x2 * x1 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) -\n  3 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * x2 * x2 * (x2 - x1) *\n  (x2 - x1) * (y2 - y1) * (y2 - y1) * (y2 - y1) * (y2 - y1) -\n  2 * (2 * 3) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * x2 * x3 * x3 *\n  x3 * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) -\n  2 * (2 * (2 * 3)) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * x2 * x3 *\n  x3 * x1 * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) +\n  2 * (1 + 2 ^ 3) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * x2 * x3 * x3 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) -\n  2 * (2 * 3) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * x2 * x3 * x1 *\n  x1 * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) +\n  2 * (2 * (1 + 2 ^ 2)) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * x2 *\n  x3 * x1 * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) -\n  2 * 3 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * x2 * x3 * (x2 - x1) *\n  (x2 - x1) * (y2 - y1) * (y2 - y1) * (y2 - y1) * (y2 - y1) +\n  2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * x2 * x1 * x1 * (x2 - x1) *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) -\n  2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * x2 * x1 * (x2 - x1) *\n  (x2 - x1) * (y2 - y1) * (y2 - y1) * (y2 - y1) * (y2 - y1) -\n  3 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * x3 * x3 * x3 * x3 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) -\n  2 ^ 3 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * x3 * x3 * x3 * x1 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) +\n  2 * 3 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * x3 * x3 * x3 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) -\n  2 * 3 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * x3 * x3 * x1 * x1 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) +\n  2 * (1 + 2 ^ 2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * x3 * x3 * x1 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) -\n  3 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * x3 * x3 * (x2 - x1) *\n  (x2 - x1) * (y2 - y1) * (y2 - y1) * (y2 - y1) * (y2 - y1) +\n  2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * x3 * x1 * x1 * (x2 - x1) *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) -\n  2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * x3 * x1 * (x2 - x1) *\n  (x2 - x1) * (y2 - y1) * (y2 - y1) * (y2 - y1) * (y2 - y1) +\n  (x3 - x2) ^ 2 * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * x1 * x1 * x1 * x1 * (x2 - x1) *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) -\n  2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * x1 * x1 * x1 * (x2 - x1) *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) +\n  (x3 - x2) ^ 2 * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * x1 * x1 * (x2 - x1) * (x2 - x1) *\n  (y2 - y1) * (y2 - y1) * (y2 - y1) * (y2 - y1) +\n  2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * y2 * x2 * x2 * (x2 - x1) *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) +\n  2 ^ 2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * y2 * x2 * x3 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) +\n  2 ^ 2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * y2 * x2 * x1 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) -\n  2 ^ 2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * y2 * x2 * (x2 - x1) *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) +\n  2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * y2 * x3 * x3 * (x2 - x1) *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) +\n  2 ^ 2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * y2 * x3 * x1 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) -\n  2 ^ 2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * y2 * x3 * (x2 - x1) *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) +\n  2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * y2 * x1 * x1 * (x2 - x1) *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) -\n  2 ^ 2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * y2 * x1 * (x2 - x1) *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) +\n  2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * y2 * (x2 - x1) * (x2 - x1) *\n  (y2 - y1) * (y2 - y1) * (y2 - y1) * (y2 - y1) +\n  2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * y1 * x2 * x2 * (x2 - x1) *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) +\n  2 ^ 2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * y1 * x2 * x3 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) +\n  2 ^ 2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * y1 * x2 * x1 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) -\n  2 ^ 2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * y1 * x2 * (x2 - x1) *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) +\n  2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * y1 * x3 * x3 * (x2 - x1) *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) +\n  2 ^ 2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * y1 * x3 * x1 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) -\n  2 ^ 2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * y1 * x3 * (x2 - x1) *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) +\n  2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * y1 * x1 * x1 * (x2 - x1) *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) -\n  2 ^ 2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * y1 * x1 * (x2 - x1) *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) +\n  2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * y1 * (x2 - x1) * (x2 - x1) *\n  (y2 - y1) * (y2 - y1) * (y2 - y1) * (y2 - y1) +\n  3 * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * x2 * x2 * x2 * (x2 - x1) *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) +\n  (1 + 2 ^ 3) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * x2 * x2 * x3 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) +\n  (1 + 2 * 3) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * x2 * x2 * x1 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) -\n  2 * 3 * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * x2 * x2 * (x2 - x1) *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) +\n  (1 + 2 ^ 3) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * x2 * x3 * x3 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) +\n  2 * (1 + 2 * 3) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * x2 * x3 * x1 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) -\n  2 * (2 * 3) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * x2 * x3 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) +\n  (1 + 2 ^ 2) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * x2 * x1 * x1 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) -\n  2 ^ 3 * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * x2 * x1 * (x2 - x1) *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) +\n  3 * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * x2 * (x2 - x1) * (x2 - x1) *\n  (y2 - y1) * (y2 - y1) * (y2 - y1) * (y2 - y1) +\n  3 * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * x3 * x3 * x3 * (x2 - x1) *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) +\n  (1 + 2 * 3) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * x3 * x3 * x1 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) -\n  2 * 3 * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * x3 * x3 * (x2 - x1) *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) +\n  (1 + 2 ^ 2) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * x3 * x1 * x1 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) -\n  2 ^ 3 * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * x3 * x1 * (x2 - x1) *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) +\n  3 * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * x3 * (x2 - x1) * (x2 - x1) *\n  (y2 - y1) * (y2 - y1) * (y2 - y1) * (y2 - y1) +\n  (x3 - x2) ^ 2 * (y3 - y2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * x1 * x1 * x1 * (x2 - x1) * (x2 - x1) *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) -\n  2 * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * x1 * x1 * (x2 - x1) *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) +\n  (x3 - x2) ^ 2 * (y3 - y2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * x1 * (x2 - x1) * (x2 - x1) * (y2 - y1) *\n  (y2 - y1) * (y2 - y1) * (y2 - y1)\n  ==\n  (x3 - x2) ^ 2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * y1 * y1 * x2 * x2 * (x2 - x1) *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) +\n  2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * y1 * y1 * x2 * x3 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) +\n  2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * y1 * y1 * x2 * x1 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) +\n  (x3 - x2) ^ 2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * y1 * y1 * x3 * x3 * (x2 - x1) *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) +\n  2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * y1 * y1 * x3 * x1 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) +\n  (x3 - x2) ^ 2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * y1 * y1 * x1 * x1 * (x2 - x1) *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) +\n  2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * y1 * x2 * x2 * y3 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) -\n  2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * y1 * x2 * x2 *\n  ((2 * x1 + x2) * (y2 - y1)) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * \n  (x2 - x1) +\n  2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * y1 * x2 * x2 * (x2 - x1) *\n  (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) * (y2 - y1) +\n  2 ^ 2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * y1 * x2 * x3 * y3 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) -\n  2 ^ 2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * y1 * x2 * x3 *\n  ((2 * x1 + x2) * (y2 - y1)) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * \n  (x2 - x1) +\n  2 ^ 2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * y1 * x2 * x3 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) * (y2 - y1) +\n  2 ^ 2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * y1 * x2 * x1 * y3 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) -\n  2 ^ 2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * y1 * x2 * x1 *\n  ((2 * x1 + x2) * (y2 - y1)) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * \n  (x2 - x1) +\n  2 ^ 2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * y1 * x2 * x1 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) * (y2 - y1) +\n  2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * y1 * x3 * x3 * y3 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) -\n  2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * y1 * x3 * x3 *\n  ((2 * x1 + x2) * (y2 - y1)) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * \n  (x2 - x1) +\n  2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * y1 * x3 * x3 * (x2 - x1) *\n  (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) * (y2 - y1) +\n  2 ^ 2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * y1 * x3 * x1 * y3 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) -\n  2 ^ 2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * y1 * x3 * x1 *\n  ((2 * x1 + x2) * (y2 - y1)) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * \n  (x2 - x1) +\n  2 ^ 2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * y1 * x3 * x1 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) * (y2 - y1) +\n  2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * y1 * x1 * x1 * y3 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) -\n  2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * y1 * x1 * x1 *\n  ((2 * x1 + x2) * (y2 - y1)) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * \n  (x2 - x1) +\n  2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * y1 * x1 * x1 * (x2 - x1) *\n  (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) * (y2 - y1) +\n  (x3 - x2) ^ 2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x2 * x2 * x2 * x2 * x2 * (x2 - x1) *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) +\n  3 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x2 * x2 * x2 * x2 * x3 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) +\n  (1 + 2 ^ 2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x2 * x2 * x2 *\n  x2 * x1 * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) -\n  3 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x2 * x2 * x2 * x2 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) +\n  2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x2 * x2 * x2 * x3 * x3 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) +\n  2 * (2 * 3) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x2 * x2 * x2 *\n  x3 * x1 * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) -\n  2 ^ 3 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x2 * x2 * x2 * x3 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) +\n  2 * (1 + 2 ^ 2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x2 * x2 * x2 *\n  x1 * x1 * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) -\n  2 * (2 * 3) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x2 * x2 * x2 *\n  x1 * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) +\n  3 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x2 * x2 * x2 * (x2 - x1) *\n  (x2 - x1) * (y2 - y1) * (y2 - y1) * (y2 - y1) * (y2 - y1) -\n  2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x2 * x2 * x3 * x3 * x3 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) +\n  2 * 3 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x2 * x2 * x3 * x3 * x1 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) -\n  2 * 3 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x2 * x2 * x3 * x3 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) +\n  2 * (1 + 2 ^ 3) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x2 * x2 * x3 *\n  x1 * x1 * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) -\n  2 * (2 * (2 * 3)) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x2 * x2 *\n  x3 * x1 * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) +\n  (1 + 2 * 3) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x2 * x2 * x3 *\n  (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) * (y2 - y1) * (y2 - y1) +\n  2 * (1 + 2 ^ 2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x2 * x2 * x1 *\n  x1 * x1 * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) -\n  2 * (1 + 2 ^ 3) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x2 * x2 * x1 *\n  x1 * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) +\n  (1 + 2 ^ 3) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x2 * x2 * x1 *\n  (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) * (y2 - y1) * (y2 - y1) +\n  (x3 - x2) ^ 2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x2 * x2 * y3 * y3 * (x2 - x1) *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) -\n  2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x2 * x2 * y3 *\n  ((2 * x1 + x2) * (y2 - y1)) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * \n  (x2 - x1) +\n  2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x2 * x2 * y3 * (x2 - x1) *\n  (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) * (y2 - y1) +\n  (x3 - x2) ^ 2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x2 * x2 * ((2 * x1 + x2) * (y2 - y1)) *\n  ((2 * x1 + x2) * (y2 - y1)) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) -\n  2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x2 * x2 *\n  ((2 * x1 + x2) * (y2 - y1)) * (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) * \n  (y2 - y1) -\n  3 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x2 * x3 * x3 * x3 * x3 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) -\n  2 ^ 2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x2 * x3 * x3 * x3 * x1 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) +\n  2 * 3 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x2 * x3 * x3 * x1 * x1 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) -\n  2 * (2 * 3) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x2 * x3 * x3 *\n  x1 * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) +\n  (1 + 2 ^ 2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x2 * x3 * x3 *\n  (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) * (y2 - y1) * (y2 - y1) +\n  2 * (2 * 3) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x2 * x3 * x1 *\n  x1 * x1 * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) -\n  2 * (2 * (2 * 3)) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x2 * x3 *\n  x1 * x1 * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) +\n  2 * (1 + 2 * 3) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x2 * x3 * x1 *\n  (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) * (y2 - y1) * (y2 - y1) +\n  2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x2 * x3 * y3 * y3 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) -\n  2 ^ 2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x2 * x3 * y3 *\n  ((2 * x1 + x2) * (y2 - y1)) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * \n  (x2 - x1) +\n  2 ^ 2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x2 * x3 * y3 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) * (y2 - y1) +\n  2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x2 * x3 *\n  ((2 * x1 + x2) * (y2 - y1)) * ((2 * x1 + x2) * (y2 - y1)) * (x2 - x1) * (x2 - x1) * \n  (x2 - x1) * (x2 - x1) -\n  2 ^ 2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x2 * x3 *\n  ((2 * x1 + x2) * (y2 - y1)) * (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) * \n  (y2 - y1) +\n  (1 + 2 ^ 2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x2 * x1 * x1 *\n  x1 * x1 * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) -\n  2 * (2 * 3) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x2 * x1 * x1 *\n  x1 * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) +\n  (1 + 2 ^ 3) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x2 * x1 * x1 *\n  (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) * (y2 - y1) * (y2 - y1) +\n  2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x2 * x1 * y3 * y3 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) -\n  2 ^ 2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x2 * x1 * y3 *\n  ((2 * x1 + x2) * (y2 - y1)) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * \n  (x2 - x1) +\n  2 ^ 2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x2 * x1 * y3 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) * (y2 - y1) +\n  2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x2 * x1 *\n  ((2 * x1 + x2) * (y2 - y1)) * ((2 * x1 + x2) * (y2 - y1)) * (x2 - x1) * (x2 - x1) * \n  (x2 - x1) * (x2 - x1) -\n  2 ^ 2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x2 * x1 *\n  ((2 * x1 + x2) * (y2 - y1)) * (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) * \n  (y2 - y1) -\n  (x3 - x2) ^ 2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x3 * x3 * x3 * x3 * x3 * (x2 - x1) *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) -\n  3 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x3 * x3 * x3 * x3 * x1 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) +\n  (x3 - x2) ^ 2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x3 * x3 * x3 * x3 * (x2 - x1) *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) -\n  2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x3 * x3 * x3 * x1 * x1 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) +\n  (x3 - x2) ^ 2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x3 * x3 * x3 * (x2 - x1) * (x2 - x1) *\n  (y2 - y1) * (y2 - y1) * (y2 - y1) * (y2 - y1) +\n  2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x3 * x3 * x1 * x1 * x1 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) -\n  2 * 3 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x3 * x3 * x1 * x1 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) +\n  (1 + 2 ^ 2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x3 * x3 * x1 *\n  (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) * (y2 - y1) * (y2 - y1) +\n  (x3 - x2) ^ 2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x3 * x3 * y3 * y3 * (x2 - x1) *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) -\n  2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x3 * x3 * y3 *\n  ((2 * x1 + x2) * (y2 - y1)) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * \n  (x2 - x1) +\n  2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x3 * x3 * y3 * (x2 - x1) *\n  (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) * (y2 - y1) +\n  (x3 - x2) ^ 2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x3 * x3 * ((2 * x1 + x2) * (y2 - y1)) *\n  ((2 * x1 + x2) * (y2 - y1)) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) -\n  2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x3 * x3 *\n  ((2 * x1 + x2) * (y2 - y1)) * (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) * \n  (y2 - y1) +\n  3 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x3 * x1 * x1 * x1 * x1 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) -\n  2 ^ 3 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x3 * x1 * x1 * x1 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) +\n  (1 + 2 * 3) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x3 * x1 * x1 *\n  (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) * (y2 - y1) * (y2 - y1) +\n  2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x3 * x1 * y3 * y3 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) -\n  2 ^ 2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x3 * x1 * y3 *\n  ((2 * x1 + x2) * (y2 - y1)) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * \n  (x2 - x1) +\n  2 ^ 2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x3 * x1 * y3 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) * (y2 - y1) +\n  2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x3 * x1 *\n  ((2 * x1 + x2) * (y2 - y1)) * ((2 * x1 + x2) * (y2 - y1)) * (x2 - x1) * (x2 - x1) * \n  (x2 - x1) * (x2 - x1) -\n  2 ^ 2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x3 * x1 *\n  ((2 * x1 + x2) * (y2 - y1)) * (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) * \n  (y2 - y1) +\n  (x3 - x2) ^ 2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x1 * x1 * x1 * x1 * x1 * (x2 - x1) *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) -\n  3 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x1 * x1 * x1 * x1 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) +\n  3 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x1 * x1 * x1 * (x2 - x1) *\n  (x2 - x1) * (y2 - y1) * (y2 - y1) * (y2 - y1) * (y2 - y1) +\n  (x3 - x2) ^ 2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x1 * x1 * y3 * y3 * (x2 - x1) *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) -\n  2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x1 * x1 * y3 *\n  ((2 * x1 + x2) * (y2 - y1)) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * \n  (x2 - x1) +\n  2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x1 * x1 * y3 * (x2 - x1) *\n  (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) * (y2 - y1) +\n  (x3 - x2) ^ 2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x1 * x1 * ((2 * x1 + x2) * (y2 - y1)) *\n  ((2 * x1 + x2) * (y2 - y1)) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) -\n  2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * x1 * x1 *\n  ((2 * x1 + x2) * (y2 - y1)) * (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) * \n  (y2 - y1) -\n  2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * y1 * y1 * x2 * (x2 - x1) *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) -\n  2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * y1 * y1 * x3 * (x2 - x1) *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) -\n  2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * y1 * y1 * x1 * (x2 - x1) *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) -\n  2 ^ 2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * y1 * x2 * y3 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) +\n  2 ^ 2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * y1 * x2 *\n  ((2 * x1 + x2) * (y2 - y1)) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * \n  (x2 - x1) -\n  2 ^ 2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * y1 * x2 * (x2 - x1) *\n  (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) * (y2 - y1) -\n  2 ^ 2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * y1 * x3 * y3 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) +\n  2 ^ 2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * y1 * x3 *\n  ((2 * x1 + x2) * (y2 - y1)) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * \n  (x2 - x1) -\n  2 ^ 2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * y1 * x3 * (x2 - x1) *\n  (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) * (y2 - y1) -\n  2 ^ 2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * y1 * x1 * y3 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) +\n  2 ^ 2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * y1 * x1 *\n  ((2 * x1 + x2) * (y2 - y1)) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * \n  (x2 - x1) -\n  2 ^ 2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * y1 * x1 * (x2 - x1) *\n  (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) * (y2 - y1) -\n  2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * x2 * x2 * x2 * x2 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) -\n  2 ^ 2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * x2 * x2 * x2 * x3 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) -\n  2 ^ 3 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * x2 * x2 * x2 * x1 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) +\n  2 * 3 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * x2 * x2 * x2 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) -\n  2 * (2 * 3) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * x2 * x2 * x3 *\n  x1 * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) +\n  2 * (1 + 2 ^ 2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * x2 * x2 * x3 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) -\n  2 * (2 * 3) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * x2 * x2 * x1 *\n  x1 * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) +\n  2 * (1 + 2 ^ 3) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * x2 * x2 * x1 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) -\n  2 * 3 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * x2 * x2 * (x2 - x1) *\n  (x2 - x1) * (y2 - y1) * (y2 - y1) * (y2 - y1) * (y2 - y1) +\n  2 ^ 2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * x2 * x3 * x3 * x3 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) +\n  2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * x2 * x3 * x3 * (x2 - x1) *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) -\n  2 * (2 * 3) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * x2 * x3 * x1 *\n  x1 * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) +\n  2 * (2 * (1 + 2 ^ 2)) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * x2 *\n  x3 * x1 * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) -\n  2 ^ 3 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * x2 * x3 * (x2 - x1) *\n  (x2 - x1) * (y2 - y1) * (y2 - y1) * (y2 - y1) * (y2 - y1) -\n  2 ^ 3 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * x2 * x1 * x1 * x1 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) +\n  2 * (1 + 2 ^ 3) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * x2 * x1 * x1 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) -\n  2 * (2 * 3) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * x2 * x1 *\n  (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) * (y2 - y1) * (y2 - y1) -\n  2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * x2 * y3 * y3 * (x2 - x1) *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) +\n  2 ^ 2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * x2 * y3 *\n  ((2 * x1 + x2) * (y2 - y1)) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * \n  (x2 - x1) -\n  2 ^ 2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * x2 * y3 * (x2 - x1) *\n  (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) * (y2 - y1) -\n  2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * x2 *\n  ((2 * x1 + x2) * (y2 - y1)) * ((2 * x1 + x2) * (y2 - y1)) * (x2 - x1) * (x2 - x1) * \n  (x2 - x1) * (x2 - x1) +\n  2 ^ 2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * x2 *\n  ((2 * x1 + x2) * (y2 - y1)) * (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) * \n  (y2 - y1) +\n  2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * x3 * x3 * x3 * x3 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) +\n  2 ^ 2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * x3 * x3 * x3 * x1 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) -\n  2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * x3 * x3 * x3 * (x2 - x1) *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) +\n  2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * x3 * x3 * x1 * (x2 - x1) *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) -\n  2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * x3 * x3 * (x2 - x1) *\n  (x2 - x1) * (y2 - y1) * (y2 - y1) * (y2 - y1) * (y2 - y1) -\n  2 ^ 2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * x3 * x1 * x1 * x1 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) +\n  2 * (1 + 2 ^ 2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * x3 * x1 * x1 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) -\n  2 ^ 3 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * x3 * x1 * (x2 - x1) *\n  (x2 - x1) * (y2 - y1) * (y2 - y1) * (y2 - y1) * (y2 - y1) -\n  2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * x3 * y3 * y3 * (x2 - x1) *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) +\n  2 ^ 2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * x3 * y3 *\n  ((2 * x1 + x2) * (y2 - y1)) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * \n  (x2 - x1) -\n  2 ^ 2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * x3 * y3 * (x2 - x1) *\n  (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) * (y2 - y1) -\n  2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * x3 *\n  ((2 * x1 + x2) * (y2 - y1)) * ((2 * x1 + x2) * (y2 - y1)) * (x2 - x1) * (x2 - x1) * \n  (x2 - x1) * (x2 - x1) +\n  2 ^ 2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * x3 *\n  ((2 * x1 + x2) * (y2 - y1)) * (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) * \n  (y2 - y1) -\n  2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * x1 * x1 * x1 * x1 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) +\n  2 * 3 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * x1 * x1 * x1 *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) -\n  2 * 3 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * x1 * x1 * (x2 - x1) *\n  (x2 - x1) * (y2 - y1) * (y2 - y1) * (y2 - y1) * (y2 - y1) -\n  2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * x1 * y3 * y3 * (x2 - x1) *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) +\n  2 ^ 2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * x1 * y3 *\n  ((2 * x1 + x2) * (y2 - y1)) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * \n  (x2 - x1) -\n  2 ^ 2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * x1 * y3 * (x2 - x1) *\n  (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) * (y2 - y1) -\n  2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * x1 *\n  ((2 * x1 + x2) * (y2 - y1)) * ((2 * x1 + x2) * (y2 - y1)) * (x2 - x1) * (x2 - x1) * \n  (x2 - x1) * (x2 - x1) +\n  2 ^ 2 * (x3 - x2) * (x3 - x2) * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * x1 *\n  ((2 * x1 + x2) * (y2 - y1)) * (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) * \n  (y2 - y1) +\n  (x3 - x2) ^ 2 * (y3 - y2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * y1 * y1 * (x2 - x1) * (x2 - x1) *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) +\n  2 * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * y1 * y3 * (x2 - x1) *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) -\n  2 * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * y1 *\n  ((2 * x1 + x2) * (y2 - y1)) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * \n  (x2 - x1) +\n  2 * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * y1 * (x2 - x1) * (x2 - x1) *\n  (x2 - x1) * (y2 - y1) * (y2 - y1) * (y2 - y1) +\n  (x3 - x2) ^ 2 * (y3 - y2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * x2 * x2 * x2 * (x2 - x1) * (x2 - x1) *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) +\n  (x3 - x2) ^ 2 * (y3 - y2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * x2 * x2 * x3 * (x2 - x1) * (x2 - x1) *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) +\n  3 * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * x2 * x2 * x1 * (x2 - x1) *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) -\n  3 * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * x2 * x2 * (x2 - x1) *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) -\n  (x3 - x2) ^ 2 * (y3 - y2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * x2 * x3 * x3 * (x2 - x1) * (x2 - x1) *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) +\n  2 * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * x2 * x3 * x1 * (x2 - x1) *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) -\n  2 * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * x2 * x3 * (x2 - x1) *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) +\n  3 * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * x2 * x1 * x1 * (x2 - x1) *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) -\n  2 * 3 * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * x2 * x1 * (x2 - x1) *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) +\n  3 * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * x2 * (x2 - x1) * (x2 - x1) *\n  (y2 - y1) * (y2 - y1) * (y2 - y1) * (y2 - y1) -\n  (x3 - x2) ^ 2 * (y3 - y2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * x3 * x3 * x3 * (x2 - x1) * (x2 - x1) *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) -\n  (x3 - x2) ^ 2 * (y3 - y2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * x3 * x3 * x1 * (x2 - x1) * (x2 - x1) *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) +\n  (x3 - x2) ^ 2 * (y3 - y2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * x3 * x3 * (x2 - x1) * (x2 - x1) *\n  (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) +\n  (x3 - x2) ^ 2 * (y3 - y2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * x3 * x1 * x1 * (x2 - x1) * (x2 - x1) *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) -\n  2 * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * x3 * x1 * (x2 - x1) *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) +\n  (x3 - x2) ^ 2 * (y3 - y2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * x3 * (x2 - x1) * (x2 - x1) * (y2 - y1) *\n  (y2 - y1) * (y2 - y1) * (y2 - y1) +\n  (x3 - x2) ^ 2 * (y3 - y2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * x1 * x1 * x1 * (x2 - x1) * (x2 - x1) *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) -\n  3 * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * x1 * x1 * (x2 - x1) *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) +\n  3 * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * x1 * (x2 - x1) * (x2 - x1) *\n  (y2 - y1) * (y2 - y1) * (y2 - y1) * (y2 - y1) +\n  (x3 - x2) ^ 2 * (y3 - y2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * y3 * y3 * (x2 - x1) * (x2 - x1) *\n  (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) -\n  2 * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * y3 *\n  ((2 * x1 + x2) * (y2 - y1)) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) * \n  (x2 - x1) +\n  2 * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * y3 * (x2 - x1) * (x2 - x1) *\n  (x2 - x1) * (y2 - y1) * (y2 - y1) * (y2 - y1) +\n  (x3 - x2) ^ 2 * (y3 - y2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * ((2 * x1 + x2) * (y2 - y1)) *\n  ((2 * x1 + x2) * (y2 - y1)) * (x2 - x1) * (x2 - x1) * (x2 - x1) * (x2 - x1) -\n  2 * (x3 - x2) * (x3 - x2) * (y3 - y2) * (y3 - y2) * (y3 - y2) * (y3 - y2) *\n  ((2 * x1 + x2) * (y2 - y1)) * (x2 - x1) * (x2 - x1) * (y2 - y1) * (y2 - y1) * \n  (y2 - y1).\nProof.\nintros x1 y1 x2 y2 x3 y3 a b H H0 H1.\nring [H H0 H1].\nQed.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337547251/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337547254","html_url":"https://github.com/coq/coq/issues/5085#issuecomment-337547254","issue_url":"https://api.github.com/repos/coq/coq/issues/5085","id":337547254,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0NzI1NA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-10-03T16:02:20Z","updated_at":"2017-10-18T10:41:26Z","author_association":"CONTRIBUTOR","body":"Comment author: @thery\n\nSeems like bugzilla does not like big message.\nJust to complement I can address 2.\n\nnsatz does not understand power\n\n\nGoal forall x : Q , x == 1 -> (x - 1) ^ 2 == 0.\nintros; nsatz.\nfails \nwhile\nintros; simpl; nsatz.\nsucceeds\n\n\nFor the kind of problem you are dealing with, grobner basis is a bit an overkilled. Grobner depends heavily on variable ordering. This could explain why it takes forever.\n\nWhy don't you use ring to perform your computation that needs only simple rewriting (note I have rephrase the assumption)?\n\nGoal forall\n  x1 y1 x2 y2 x3 y3 a b : Q,\n  y1^2 == x1^3 +a*x1 + b ->\n  y2^2 == x2^3 + a*x2 + b ->\n  y3^2 == x3^3 + a*x3 + b ->\n  ((2 * x2 + x3) * ...) == ...\nProof.\nintros x1 y1 x2 y2 x3 y3 a b H H0 H1.\nring [H H0 H1].\nQed.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337547254/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337547255","html_url":"https://github.com/coq/coq/issues/5085#issuecomment-337547255","issue_url":"https://api.github.com/repos/coq/coq/issues/5085","id":337547255,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0NzI1NQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-10-04T12:49:42Z","updated_at":"2017-10-18T10:41:26Z","author_association":"CONTRIBUTOR","body":"Comment author: @thery\n\nIn my last comment I was wrong, nsatz do understand some notion of powers. \nI was just mislead by the notation mechanism.\n\nRequire Import Nsatz QArith.\n\nLemma foo : forall x : Q, x == 0 -> x ^ 2%Z == 0.\nnsatz.\n\nfails\n\nbut\n\nRequire Import  QArith Nsatz.\n\nLemma foo : forall x : Q, x == 0 -> x ^ 2%Z == 0.\nnsatz.\n\nsucceeds\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337547255/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337547256","html_url":"https://github.com/coq/coq/issues/5085#issuecomment-337547256","issue_url":"https://api.github.com/repos/coq/coq/issues/5085","id":337547256,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0NzI1Ng==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-11-04T12:36:57Z","updated_at":"2017-10-18T10:41:26Z","author_association":"CONTRIBUTOR","body":"Comment author: @maximedenes\n\nIt seems that the declaration of structures used by nsatz in the stdlib would deserve a clean-up. Leaving that for after 8.6, though.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337547256/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]