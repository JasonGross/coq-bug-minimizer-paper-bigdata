[{"url":"https://api.github.com/repos/coq/coq/issues/comments/337546828","html_url":"https://github.com/coq/coq/issues/5054#issuecomment-337546828","issue_url":"https://api.github.com/repos/coq/coq/issues/5054","id":337546828,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0NjgyOA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-08-30T23:34:23Z","updated_at":"2021-03-31T23:39:49Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\r\n```coq\r\nInductive type := TW | TZ | Tbool.\r\nFixpoint tuple' T n : Type :=\r\n  match n with\r\n  | O => T\r\n  | S n' => (tuple' T n' * T)%type\r\n  end.\r\nDefinition tuple T n : Type :=\r\n  match n with\r\n  | O => unit\r\n  | S n' => tuple' T n'\r\n  end.\r\nInductive nop : forall (narg nret : nat), tuple type narg -> tuple type nret -> \r\nType :=\r\n| OPldi     : nop 1 1 TZ TW\r\n| OPadc     : nop 3 2 (TW, TW, Tbool) (Tbool, TW).\r\nInductive expr : type -> Type :=\r\n| LetUnop : forall {t1 tC}, nop 1 1 t1 TW -> expr t1 -> expr tC\r\n| Const : nat -> expr TZ.\r\nGoal forall t, expr t -> expr t.\r\n  intros ? v.\r\n  Fail refine (match v in expr t return expr t with\r\n          | @ LetUnop t1 tC (OPldi as op) x0\r\n            => @ LetUnop t1 tC op x0\r\n          | _ => _\r\n          end). (* Error:\r\nIn environment\r\nt : type\r\nv : expr t\r\nt1 : tuple type 1\r\ntC : type\r\nop : nop 1 1 t1 TW\r\nx0 : expr t1\r\nop0 := OPldi : nop 1 1 TZ TW\r\nx1 : expr TZ\r\nThe term \"op0\" has type \"nop 1 1 TZ TW\" while it is expected to have type \"nop \r\n1 1 t1 TW\".\r\n *)\r\n  Fail refine (match v in expr t return expr t with\r\n               | @ LetUnop t1 tC (OPldi as op) x0\r\n                 => @ LetUnop _ _ op x0\r\n               | _ => _\r\n               end). (* Ltac call to \"refine\" failed.\r\nIllegal application: \r\nThe term \"expr\" of type \"type -> Type\"\r\ncannot be applied to the term\r\n \"(TW, TW, Tbool)\" : \"(type * type * type)%type\"\r\nThis term has type \"(type * type * type)%type\" which should be coercible to \r\n\"type\". *)\r\n```\r\nIt seems like not enough things are being unified early enough?\r\n\r\nNote that the following works fine:\r\n```coq\r\nInductive expr : type -> Type :=\r\n| LetUnop : forall {t1 tC}, nop 1 1 t1 TW (*-> expr t1*) -> expr tC\r\n| Const : nat -> expr TZ.\r\nGoal forall t, expr t -> expr t.\r\n  intros ? v.\r\n  refine (match v in expr t return expr t with\r\n          | @ LetUnop t1 tC (OPldi as op) (*x0*)\r\n            => @ LetUnop t1 tC op (*x0*)\r\n          | _ => _\r\n          end).\r\n\r\n```","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337546828/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337546829","html_url":"https://github.com/coq/coq/issues/5054#issuecomment-337546829","issue_url":"https://api.github.com/repos/coq/coq/issues/5054","id":337546829,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0NjgyOQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-08-31T00:03:34Z","updated_at":"2021-03-31T23:39:31Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\r\n\r\nInterestingly, you can get Illegal Application errors that mention constants \r\nthat are not given anywhere in the term; this shows that it is Coq's \r\nunification algorithm that is building ill-typed terms:\r\n```coq\r\nInductive type := TW | TZ | Tbool.\r\nFixpoint tuple' T n : Type :=\r\n  match n with\r\n  | O => T\r\n  | S n' => (tuple' T n' * T)%type\r\n  end.\r\nDefinition tuple T n : Type :=\r\n  match n with\r\n  | O => unit\r\n  | S n' => tuple' T n'\r\n  end.\r\nInductive nop : forall (narg nret : nat), tuple type narg -> tuple type nret -> \r\n Type :=\r\n| OPldi     : nop 1 1 TZ TW\r\n| OPadc     : nop 3 2 (TW, TW, Tbool) (Tbool, TW).\r\nInductive expr : type -> Type :=\r\n| LetUnop : forall {t1 tC}, nop 1 1 t1 TW -> expr t1 -> expr tC\r\n| Const : nat -> expr TZ.\r\nGoal forall t, expr t -> expr t.\r\n  intros ? v.\r\n  refine (match v in expr t return expr t with\r\n          | @ LetUnop t1 tC (OPldi as op) x0 as expr\r\n            => _\r\n          | expr => expr\r\n          end). (* Ltac call to \"refine\" failed.\r\nError: Illegal application: \r\nThe term \"@ LetUnop\" of type\r\n \"forall (t1 : tuple type 1) (tC : type), nop 1 1 t1 TW -> expr t1 -> expr tC\"\r\ncannot be applied to the terms\r\n \"(TW, TW, Tbool)\" : \"(type * type * type)%type\"\r\n \"tC\" : \"type\"\r\n \"OPadc\" : \"nop 3 2 (TW, TW, Tbool) (Tbool, TW)\"\r\n \"x0\" : \"expr t1\"\r\nThe 1st term has type \"(type * type * type)%type\" which should be coercible to \r\n\"tuple type 1\".\r\n *)\r\n\r\n```","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337546829/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337546831","html_url":"https://github.com/coq/coq/issues/5054#issuecomment-337546831","issue_url":"https://api.github.com/repos/coq/coq/issues/5054","id":337546831,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0NjgzMQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-08-31T11:18:38Z","updated_at":"2017-10-18T10:40:01Z","author_association":"CONTRIBUTOR","body":"Comment author: @herbelin\n\nThanks for these case studies. There will probably soon be a new phase at working at the pattern-matching algorithm and these are interesting \"real-world\" examples.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337546831/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]