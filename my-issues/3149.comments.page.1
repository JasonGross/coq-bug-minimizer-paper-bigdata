[{"url":"https://api.github.com/repos/coq/coq/issues/comments/337516265","html_url":"https://github.com/coq/coq/issues/3149#issuecomment-337516265","issue_url":"https://api.github.com/repos/coq/coq/issues/3149","id":337516265,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxNjI2NQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2013-11-03T17:54:49Z","updated_at":"2017-10-18T09:09:07Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nI think of [refine] as _the_ basic building block tactic.  I discovered from a recent commit (\"Refine now does iota reduction in addition to beta.\") that [refine] does both iota and beta reduction.  It would be nice to have a variant that doesn't do any reduction, when I really want to see what's going on under the hood.  (It would also be nice to have a variant of refine that doesn't trigger typeclass resolution (or a way to block typeclass resolution on some holes), and maybe even one that doesn't trigger canonical structures (or a way to block that on some holes).)\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337516265/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337516267","html_url":"https://github.com/coq/coq/issues/3149#issuecomment-337516267","issue_url":"https://api.github.com/repos/coq/coq/issues/3149","id":337516267,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxNjI2Nw==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2013-11-04T08:48:19Z","updated_at":"2017-10-18T09:09:07Z","author_association":"CONTRIBUTOR","body":"Comment author: @aspiwack\n\nNot doing beta-iota is easy.\n\nNot doing typeclass should be easy too, I think. Blocking typeclass resolution for some holes: I remember having discussed such a feature quite a few years ago (I wanted to have two new kind of holes: holes that the pretyper would never try to solve, and holes that the pretyper would have to solve, and would raise an error otherwise, even with refine). I never got to the point where I knew how to give an interface to those.\n\nI have no idea about canonical projection though. Is there a way to deactivate them in a pretyper call?\n\n\nThe more important in all this: what syntax do you suggest for this flurry of options?\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337516267/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337516269","html_url":"https://github.com/coq/coq/issues/3149#issuecomment-337516269","issue_url":"https://api.github.com/repos/coq/coq/issues/3149","id":337516269,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxNjI2OQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2013-11-04T10:09:06Z","updated_at":"2017-10-18T09:09:07Z","author_association":"CONTRIBUTOR","body":"Comment author: @gares\n\nNo, canonical structures cannot be \"stopped\".  The point is that a term with an unresolved type class is still well typed, while a term with an unresolved CS is not.  This is one of the features of CS in my opinion.\n\nStill one can craft a CS that just eta expands the missing record, obtaining the behavior you like (i.e. infer nothing, still show something).\nSee the last page of http://hal.inria.fr/hal-00816703\n\nTo me what Jason is asking falls in the category of \"tracing utilities\" that Coq almost completely misses.  Something that would let a regular user see what a developer is able to see using coqtop.byte, Drop. and a good set of printers.\n\nI'd love to ship a coqtop.debug that delivers decent performances but can be\ninstrumented to print the trace of type inference / unification.  But to do that without affecting the performances of standard coqtop, I'm afraid we have to find a way to put proper #ifdefs in the sources.  And there was resistance against compiling Coq with a preprocessor if I recall correctly.\n\nCheers\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337516269/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337516272","html_url":"https://github.com/coq/coq/issues/3149#issuecomment-337516272","issue_url":"https://api.github.com/repos/coq/coq/issues/3149","id":337516272,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxNjI3Mg==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2013-11-04T12:19:10Z","updated_at":"2017-10-18T09:09:07Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nTypeclass resolution blocking can be hacked using [Notation]s, e.g.,\n\nClass A.\nInstance: A.\n\nDefinition typeclass_blocker : forall {X}, id X -> X := id.\n\nNotation \"'__'\" := (typeclass_blocker _).\n\nGoal A.\nrefine __.\n\n\nSo I'm not sure how important it is to have it as a built-in option for [refine], and I'm not sure what syntax to use for holes which don't trigger typeclasses.  (I was just mentioning things as I thought of them, and thought of this solution afterwards.)\n\n\n\nI think Enrico is right about unification traces being what I'm interested in, because the few times I remember actually being really bothered by the current behavior is when I'd declare a typeclass, and I'd have a hole that typeclass resolution didn't pick up automatically, but [typeclasses eauto] would solve.\n\nAs for the syntax of reduction after refine, I'd be fine with having [refine_no_red] or [resolve] or [eexact] or something other alternate tactic for [refine] without reduction.  I'd also be fine with having something like [Set Refine Strategy := lazy iota beta.], [Clear Refine Strategy.] (or [Set Refine Strategy := idtac.] or [Set Refine Strategy := lazy delta [].] (if that means the same thing), and [Reset Refine Strategy.] (for the default).\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337516272/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337516273","html_url":"https://github.com/coq/coq/issues/3149#issuecomment-337516273","issue_url":"https://api.github.com/repos/coq/coq/issues/3149","id":337516273,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxNjI3Mw==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2015-06-12T21:25:44Z","updated_at":"2017-10-18T09:09:08Z","author_association":"CONTRIBUTOR","body":"Comment author: Stiv &lt;<erochat@ukr.net>&gt;\n\nCreated attachment 593\n7656\n\n> Attached file: [012k](https://coq.inria.fr/bugfiles/attachment.cgi?id=593) (text/html, 5425 bytes)\n> Description:   7656\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337516273/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337516274","html_url":"https://github.com/coq/coq/issues/3149#issuecomment-337516274","issue_url":"https://api.github.com/repos/coq/coq/issues/3149","id":337516274,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxNjI3NA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2015-12-18T10:26:50Z","updated_at":"2017-10-18T09:09:08Z","author_association":"CONTRIBUTOR","body":"Comment author: @silene\n\nThe \"simple refine\" tactic does not perform any reduction, so marking the bug as closed.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337516274/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]