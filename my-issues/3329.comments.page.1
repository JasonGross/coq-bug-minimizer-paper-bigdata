[{"url":"https://api.github.com/repos/coq/coq/issues/comments/337519470","html_url":"https://github.com/coq/coq/issues/3329#issuecomment-337519470","issue_url":"https://api.github.com/repos/coq/coq/issues/3329","id":337519470,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxOTQ3MA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-05-16T13:00:48Z","updated_at":"2017-10-18T09:18:09Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\n(* File reduced by coq-bug-finder from original input, then from 12095 lines to 869 lines, then from 792 lines to 504 lines, then from 487 lines to 353 lines, then from 258 lines to 174 lines, then from 164 lines to 132 lines, then from 129 lines to 99 lines *)\nSet Universe Polymorphism.\nGeneralizable All Variables.\nAxiom admit : forall {T}, T.\nReserved Notation \"g 'o' f\" (at level 40, left associativity).\nDefinition compose {A B C : Type} (g : B -> C) (f : A -> B) := fun x => g (f x).\nNotation \"g 'o' f\" := (compose g f).\nInductive paths {A : Type} (a : A) : A -> Type := idpath : paths a a where \"x = y\" := (@ paths _ x y) : type_scope.\nArguments idpath {A a} , [A] a.\nDefinition pointwise_paths {A} {P:A->Type} (f g:forall x:A, P x) : Type := forall x:A, f x = g x.\nHint Unfold pointwise_paths : typeclass_instances.\nDefinition apD10 {A} {B:A->Type} {f g : forall x, B x} (h:f=g)\n: forall x, f x = g x\n  := fun x => match h with idpath => idpath end.\nClass IsEquiv {A B : Type} (f : A -> B) := BuildIsEquiv { equiv_inv : B -> A }.\nClass IsHSet (A : Type) := { _ : False }.\nClass Funext := { isequiv_apD10 :> forall (A : Type) (P : A -> Type) f g, IsEquiv (@ apD10 A P f g) }.\nRecord PreCategory :=\n  { object :> Type;\n    morphism : object -> object -> Type;\n    trunc_morphism : forall s d, IsHSet (morphism s d) }.\n\nDefinition trunc_equiv `(f : A -> B) `{IsHSet A} `{IsEquiv A B f} : IsHSet B := admit.\nGlobal Instance trunc_forall `{Funext} `{P : A -> Type} `{forall a, IsHSet (P a)}\n: IsHSet (forall a, P a) | 100.\nProof.\n  generalize dependent P.\n  intro P.\n  assert (f : forall a, P a) by admit.\n  assert (g : forall a, P a) by admit.\n  pose (@ trunc_equiv (forall x : A, @ paths (P x) (f x) (g x))\n                     (@ paths (forall x : A, P x) f g)\n                     (@ equiv_inv (@ paths (forall x : A, P x) f g)\n                                 (forall x : A, @ paths (P x) (f x) (g x))\n                                 (@ apD10 A P f g) (@ isequiv_apD10 H A P f g))).\n  admit.\nDefined.\nRecord Functor (C D : PreCategory) := { object_of :> C -> D }.\nDefinition identity C : Functor C C := Build_Functor C C admit.\nNotation \"1\" := (identity _) : functor_scope.\nDefinition functor_category (C D : PreCategory) : PreCategory\n  := @ Build_PreCategory (Functor C D) admit admit.\nNotation \"C -> D\" := (functor_category C D) : category_scope.\nRecord hSet := BuildhSet {setT:> Type; iss :> IsHSet setT}.\nGlobal Existing Instance iss.\nDefinition set_cat `{Funext} : PreCategory :=\n  @ Build_PreCategory hSet\n                     (fun x y => x -> y)\n                     _.\n\nSection hom_functor.\n  Context `{Funext}.\n  Variable C : PreCategory.\n\n  Local Notation obj_of c'c :=\n    (BuildhSet\n       (morphism\n          C\n          c'c\n          c'c)\n       admit).\n  Let hom_functor_morphism_of s's d'd (hf : morphism C s's d'd)\n  : morphism set_cat (obj_of s's) (obj_of d'd)\n    := admit.\n\n  Definition hom_functor : Functor C set_cat := admit.\nEnd hom_functor.\nLocal Open Scope category_scope.\nLocal Open Scope functor_scope.\nContext `{Funext}.\nVariable D : PreCategory.\nCheck hom_functor D o 1.\n(* Toplevel input, characters 20-44:\nError: Illegal application:\nThe term \"@ set_cat\" of type \"(Funext -> PreCategory)%type\"\ncannot be applied to the term\n \"H\" : \"Funext\"\nThis term has type \"Funext\" which should be coercible to\n\"Funext\". *)\n\nI don't think this is a universe inconsistency, especially given that the set_cat term was already built.  (If it is, though, then Coq should say so.)\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337519470/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337519471","html_url":"https://github.com/coq/coq/issues/3329#issuecomment-337519471","issue_url":"https://api.github.com/repos/coq/coq/issues/3329","id":337519471,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxOTQ3MQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-06-26T10:32:27Z","updated_at":"2017-10-18T09:18:09Z","author_association":"CONTRIBUTOR","body":"Comment author: @mattam82\n\nThis is closed in trunk.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337519471/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]