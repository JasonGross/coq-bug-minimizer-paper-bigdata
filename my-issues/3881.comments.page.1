[{"url":"https://api.github.com/repos/coq/coq/issues/comments/337528594","html_url":"https://github.com/coq/coq/issues/3881#issuecomment-337528594","issue_url":"https://api.github.com/repos/coq/coq/issues/3881","id":337528594,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyODU5NA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-12-24T10:13:46Z","updated_at":"2017-10-18T09:44:24Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nA week ago, this worked.  Sometime between then and now, it stopped working.\n\n(* File reduced by coq-bug-finder from original input, then from 2236 lines to 1877 lines, then from 1652 lines to 160 lines, then from 102 lines to 34 lines *)\n(* coqc version trunk (December 2014) compiled on Dec 23 2014 22:6:43 with OCaml 4.01.0\n   coqtop version cagnode15:/afs/csail.mit.edu/u/j/jgross/coq-trunk,trunk (90ed6636dea41486ddf2cc0daead83f9f0788163) *)\nGeneralizable All Variables.\nAxiom admit : forall {T}, T.\nNotation \"g 'o' f\" := (fun x => g (f x)) (at level 40, left associativity).\nDefinition ap {A B:Type} (f:A -> B) {x y:A} (p:x = y) : f x = f y := match p with eq_refl => eq_refl end.\nClass IsEquiv {A B : Type} (f : A -> B) := { equiv_inv : B -> A ; eisretr : forall x, f (equiv_inv x) = x }.\nArguments eisretr {A B} f {_} _.\nNotation \"f ^-1\" := (@ equiv_inv _ _ f _) (at level 3, format \"f '^-1'\").\nGlobal Instance isequiv_compose `{IsEquiv A B f} `{IsEquiv B C g} : IsEquiv (g o f) | 1000 := admit.\nDefinition isequiv_homotopic {A B} (f : A -> B) (g : A -> B) `{IsEquiv A B f} (h : forall x, f x = g x) : IsEquiv g := admit.\nGlobal Instance isequiv_inverse {A B} (f : A -> B) {feq : IsEquiv f} : IsEquiv f^-1 | 10000 := admit.\nDefinition cancelR_isequiv {A B C} (f : A -> B) {g : B -> C} `{IsEquiv A B f} `{IsEquiv A C (g o f)} : IsEquiv g.\nProof.\n  pose (fun H => @ isequiv_homotopic _ _ ((g o f) o f^-1) _ H\n                                    (fun b => ap g (eisretr f b))) as k.\n  revert k.\n  let x := match goal with |- let k := ?x in _ => constr:x end in\n  intro k; clear k;\n  pose (x _).\n  pose (@ isequiv_homotopic _ _ ((g o f) o f^-1) g _\n                           (fun b => ap g (eisretr f b))).\n(* Toplevel input, characters 15-123:\nError: Unable to satisfy the following constraints:\nUNDEFINED EVARS:\n ?X84==[A B C f g H H0\n         (i:=(fun H0 : IsEquiv (g o f o f^-1) =>\n              isequiv_homotopic (g o f o f^-1) g\n                (fun b : B => ap g (eisretr f b))) isequiv_compose)\n         |- IsEquiv (g o f o f^-1)] (underscore) {i1}\n ?X91==[A B C f g H H0\n         (i:=(fun H0 : IsEquiv (g o f o f^-1) =>\n              isequiv_homotopic (g o f o f^-1) g\n                (fun b : B => ap g (eisretr f b))) isequiv_compose) b\n         |- IsEquiv f] (parameter IsEquiv of @ eisretr) {IsEquiv}\n*)\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337528594/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337528595","html_url":"https://github.com/coq/coq/issues/3881#issuecomment-337528595","issue_url":"https://api.github.com/repos/coq/coq/issues/3881","id":337528595,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyODU5NQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-12-29T10:35:48Z","updated_at":"2017-10-18T09:44:25Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nGit bisect* says that it is 96906c2a1ba9426271a4048bfa8b3991db51c192 or 5bbe23801d8961b04d54f48123f01b21e43261c3; I suspect\n\ncommit 96906c2a1ba9426271a4048bfa8b3991db51c192\nAuthor: Hugo Herbelin <Hugo.Herbelin@ inria.fr>\nDate:   Fri Dec 19 10:39:27 2014 +0100\n\n    Back to the preferred ?n1:=?n2 order of evar-evar unification which got accidentally mixed up in 9aa416c0c6.\n\n\nIndeed, the script does not work in 8.4.  So I am changing this to a feature request, that typeclass resolution be able to infer this instance.\n\n\n* The git bisect run script used was https://github.com/JasonGross/coq-bisect, with \n(* -*- coq-prog-args: (\"-emacs\" \"-nois\") -*- *)\n(* File reduced by coq-bug-finder from original input, then from 2236 lines to 1877 lines, then from 1652 lines to 160 lines, then from 102 lines to 34 lines *)\n(* coqc version trunk (December 2014) compiled on Dec 23 2014 22:6:43 with OCaml 4.01.0\n   coqtop version cagnode15:/afs/csail.mit.edu/u/j/jgross/coq-trunk,trunk (90ed6636dea41486ddf2cc0daead83f9f0788163) *)\nGeneralizable All Variables.\nRequire Import Coq.Init.Notations.\nReserved Notation \"x -> y\" (at level 99, right associativity, y at level 200).\nNotation \"A -> B\" := (forall (_ : A), B) : type_scope.\nAxiom admit : forall {T}, T.\nNotation \"g 'o' f\" := (fun x => g (f x)) (at level 40, left associativity).\nInductive eq {A} (x:A) : A -> Prop := eq_refl : x = x where \"x = y\" := (@ eq _ x y) : type_scope.\nArguments eq_refl {_ _}.\nDefinition ap {A B:Type} (f:A -> B) {x y:A} (p:x = y) : f x = f y := match p with eq_refl => eq_refl end.\nClass IsEquiv {A B : Type} (f : A -> B) := { equiv_inv : B -> A ; eisretr : forall x, f (equiv_inv x) = x }.\nArguments eisretr {A B} f {_} _.\nNotation \"f ^-1\" := (@ equiv_inv _ _ f _) (at level 3, format \"f '^-1'\").\nGlobal Instance isequiv_compose `{IsEquiv A B f} `{IsEquiv B C g} : IsEquiv (g o f) | 1000 := admit.\nDefinition isequiv_homotopic {A B} (f : A -> B) (g : A -> B) `{IsEquiv A B f} (h : forall x, f x = g x) : IsEquiv g := admit.\nGlobal Instance isequiv_inverse {A B} (f : A -> B) {feq : IsEquiv f} : IsEquiv f^-1 | 10000 := admit.\nDefinition cancelR_isequiv {A B C} (f : A -> B) {g : B -> C} `{IsEquiv A B f} `{IsEquiv A C (g o f)} : IsEquiv g.\nProof.\n  pose (fun H => @ isequiv_homotopic _ _ ((g o f) o f^-1) _ H\n                                    (fun b => ap g (eisretr f b))) as k.\n  revert k.\n  let x := match goal with |- let k := ?x in _ => constr:x end in\n  intro k; clear k;\n  pose (x _).\n  pose (@ isequiv_homotopic _ _ ((g o f) o f^-1) g _\n                           (fun b => ap g (eisretr f b))).\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337528595/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337528597","html_url":"https://github.com/coq/coq/issues/3881#issuecomment-337528597","issue_url":"https://api.github.com/repos/coq/coq/issues/3881","id":337528597,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyODU5Nw==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2015-02-12T22:24:43Z","updated_at":"2017-10-18T09:44:25Z","author_association":"CONTRIBUTOR","body":"Comment author: @mattam82\n\nAdding a parsing notation:\n\nNotation \"g 'o' f\" := $(let g' := g in let f' := f in exact (fun x => g' (f' x)))$ (at level 40, left associativity). (* Ensure that x is not captured in [g] or [f] in case they contain holes *)\n\nMakes it work. This is really the cleanest solution, anything else will have to rely on heuristics of higher-order unification otherwise.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337528597/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]