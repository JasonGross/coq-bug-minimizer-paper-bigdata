[{"url":"https://api.github.com/repos/coq/coq/issues/comments/337522331","html_url":"https://github.com/coq/coq/issues/3506#issuecomment-337522331","issue_url":"https://api.github.com/repos/coq/coq/issues/3506","id":337522331,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyMjMzMQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-08-10T17:40:44Z","updated_at":"2017-10-18T09:26:37Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\n(* File reduced by coq-bug-finder from original input, then from 6694 lines to 5554 lines, then from 5074 lines to 4062 lines, then from 4053 lines to 283 lines, then from 270 lines to 195 lines, then from 132 lines to 66 lines, then from 64 lines to 52 lines *)\nSet Implicit Arguments.\nGeneralizable All Variables.\nDefinition compose {A B C : Type} (g : B -> C) (f : A -> B) := fun x => g (f x).\nInductive paths {A : Type} (a : A) : A -> Type := idpath : paths a a where \"x = y\" := (@ paths _ x y) : type_scope.\nArguments idpath {A a} , [A] a.\nDelimit Scope path_scope with path.\nLocal Open Scope path_scope.\nDefinition concat {A : Type} {x y z : A} (p : x = y) (q : y = z) : x = z :=\n  match p, q with idpath, idpath => idpath end.\nDefinition inverse {A : Type} {x y : A} (p : x = y) : y = x\n  := match p with idpath => idpath end.\nNotation \"p @  q\" := (concat p q) (at level 20) : path_scope.\nNotation \"p ^\" := (inverse p) (at level 3) : path_scope.\nDefinition transport {A : Type} (P : A -> Type) {x y : A} (p : x = y) (u : P x) : P y :=\n  match p with idpath => u end.\nNotation \"p # x\" := (transport _ p x) (right associativity, at level 65, only parsing) : path_scope.\nClass IsEquiv {A B : Type} (f : A -> B) := {}.\nInstance isequiv_compose `{IsEquiv A B f} `{IsEquiv B C g} : IsEquiv (compose g f) | 1000.\nSet Printing Implicit.\nModule NonPrim.\n  Record sigT (A : Type) (P : A -> Type) := existT { projT1 : A ; projT2 : P projT1 }.\n  Notation \"{ x : A  & P }\" := (sigT (fun x:A => P)) : type_scope.\n  Notation \"x .1\" := (projT1 x) (at level 3).\n  Notation \"x .2\" := (projT2 x) (at level 3).\n  Axiom path_sigma_uncurried : forall {A : Type} (P : A -> Type) (u v : sigT P),\n                                 {p : u.1 = v.1 &  p # u.2 = v.2} -> u = v.\n  Instance isequiv_path_sigma `{P : A -> Type} {u v : sigT P} : IsEquiv (path_sigma_uncurried u v) | 0.\n  Definition ExtensionAlong {A B : Type} (f : A -> B) (P : B -> Type) (d : forall x:A, P (f x))\n    := { s : forall y:B, P y & forall x:A, s (f x) = d x }.\n  Definition path_extension {A B : Type} {f : A -> B}\n             {P : B -> Type} {d : forall x:A, P (f x)}\n             (ext ext' : ExtensionAlong f P d)\n  : (ExtensionAlong f\n                    (fun y => projT1 ext y = projT1 ext' y)\n                    (fun x => projT2 ext x @  (projT2 ext' x)^))\n    -> ext = ext'.\n  Proof.\n    apply (compose (path_sigma_uncurried _ _)).\n    admit.\n  Defined.\n  Definition isequiv_path_extension {A B : Type} {f : A -> B}\n             {P : B -> Type} {d : forall x:A, P (f x)}\n             (ext ext' : ExtensionAlong f P d)\n  : IsEquiv (path_extension ext ext').\n  Proof.\n    apply @ isequiv_compose.\n    2: refine (@ isequiv_path_sigma _ _ _ _) || fail \"bad\".\n    Undo.\n    2: apply @ isequiv_path_sigma.\n    admit.\n  Qed.\nEnd NonPrim.\nModule Prim.\n  Set Primitive Projections.\n  Record sigT (A : Type) (P : A -> Type) := existT { projT1 : A ; projT2 : P projT1 }.\n  Notation \"{ x : A  & P }\" := (sigT (fun x:A => P)) : type_scope.\n  Notation \"x .1\" := (projT1 x) (at level 3).\n  Notation \"x .2\" := (projT2 x) (at level 3).\n  Axiom path_sigma_uncurried : forall {A : Type} (P : A -> Type) (u v : sigT P),\n                                 {p : u.1 = v.1 &  p # u.2 = v.2} -> u = v.\n  Instance isequiv_path_sigma `{P : A -> Type} {u v : sigT P} : IsEquiv (path_sigma_uncurried u v) | 0.\n  Definition ExtensionAlong {A B : Type} (f : A -> B) (P : B -> Type) (d : forall x:A, P (f x))\n    := { s : forall y:B, P y & forall x:A, s (f x) = d x }.\n  Definition path_extension {A B : Type} {f : A -> B}\n             {P : B -> Type} {d : forall x:A, P (f x)}\n             (ext ext' : ExtensionAlong f P d)\n  : (ExtensionAlong f\n                    (fun y => projT1 ext y = projT1 ext' y)\n                    (fun x => projT2 ext x @  (projT2 ext' x)^))\n    -> ext = ext'.\n  Proof.\n    apply (compose (path_sigma_uncurried _ _)).\n    admit.\n  Defined.\n  Definition isequiv_path_extension {A B : Type} {f : A -> B}\n             {P : B -> Type} {d : forall x:A, P (f x)}\n             (ext ext' : ExtensionAlong f P d)\n  : IsEquiv (path_extension ext ext').\n  Proof.\n    apply @ isequiv_compose.\n    2: refine (@ isequiv_path_sigma _ _ _ _) || fail \"bad\".\n    Undo.\n    2: apply @ isequiv_path_sigma. (* Toplevel input, characters 24-43:\nError:\nIn environment\nA : Type\nB : Type\nf : A -> B\nP : B -> Type\nd : forall x : A, P (f x)\next : @ ExtensionAlong A B f P d\next' : @ ExtensionAlong A B f P d\nUnable to unify\n \"@ IsEquiv\n    {p : ?225 .1 = ?226 .1 &\n    @ transport ?223 ?224 ?225 .1 ?226 .1 p ?225 .2 = ?226 .2}\n    (?225 = ?226) (@ path_sigma_uncurried ?223 ?224 ?225 ?226)\" with\n \"@ IsEquiv\n    {p : ext .1 = ext' .1 &\n    @ transport (forall y : B, P y)\n      (fun s : forall y : B, P y => forall x : A, s (f x) = d x)\n      ext .1 ext' .1 p ext .2 = ext' .2} (ext = ext')\n    (@ path_sigma_uncurried (forall y : B, P y)\n       (fun s : forall y : B, P y => forall x : A, s (f x) = d x) ext ext')\".\n *)\n    admit.\n  Qed.\nEnd Prim.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337522331/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337522333","html_url":"https://github.com/coq/coq/issues/3506#issuecomment-337522333","issue_url":"https://api.github.com/repos/coq/coq/issues/3506","id":337522333,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyMjMzMw==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-09-11T11:42:47Z","updated_at":"2017-10-18T09:26:37Z","author_association":"CONTRIBUTOR","body":"Comment author: @mattam82\n\nFixed too.\n\n*** This bug has been marked as a duplicate of bug [BZ#3504](https://github.com/coq/coq/issues?q=is%3Aissue%20%22Original%20bug%20ID%3A%20BZ%233504%22) ***\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337522333/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]