[{"url":"https://api.github.com/repos/coq/coq/issues/comments/337538890","html_url":"https://github.com/coq/coq/issues/4494#issuecomment-337538890","issue_url":"https://api.github.com/repos/coq/coq/issues/4494","id":337538890,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUzODg5MA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-01-16T00:20:08Z","updated_at":"2017-10-18T10:14:37Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nThe occurrence numbering of [replace], unlike [set], ignores binders, does not error on invalid locations, and is unreasonably slow.\n\nRequire Import Coq.Setoids.Setoid.\nHint Extern 0 => solve [apply reflexivity] : typeclass_instances.\nGoal forall x y : nat, (forall k, x = k) = (x = x).\n  clear; intros x y.\n  Time replace x with y at 1. (* Finished transaction in 6. secs (5.884u,0.092s) *)\n  (* gives (forall k : nat, x = k) = (y = x); this is not the first occurrence! *)\n\nThis is terrible.  Here's a better version (in 8.4, replace hyp_list with hyp, since set doesn't like hyp_list in 8.4pl6):\n\nLtac replace_with_at_by x y set_tac tac :=\n  let H := fresh in\n  let x' := fresh in\n  set_tac x' x;\n  assert (H : x' = y) by (subst x'; tac);\n  clearbody x'; subst x'.\nLtac replace_with_at x y set_tac :=\n  let H := fresh in\n  let x' := fresh in\n  set_tac x' x;\n  cut (x' = y);\n  [ intro H; clearbody x'; subst x'\n  | subst x' ].\nTactic Notation \"replace\" constr(x) \"with\" constr(y) := \n  replace_with_at x y ltac:(fun x' x => set (x' := x) ).\nTactic Notation \"replace\" constr(x) \"with\" constr(y) \"at\" ne_integer_list(n) :=\n  replace_with_at x y ltac:(fun x' x => set (x' := x) at n ).\nTactic Notation \"replace\" constr(x) \"with\" constr(y) \"in\" \"*\" :=\n  replace_with_at x y ltac:(fun x' x => set (x' := x) in * ).\nTactic Notation \"replace\" constr(x) \"with\" constr(y) \"in\" \"*\" \"at\" ne_integer_list(n) :=\n  replace_with_at x y ltac:(fun x' x => set (x' := x) in * at n ).\nTactic Notation \"replace\" constr(x) \"with\" constr(y) \"in\" \"*\" \"|-\" :=\n  replace_with_at x y ltac:(fun x' x => set (x' := x) in * |- ).\nTactic Notation \"replace\" constr(x) \"with\" constr(y) \"in\" \"*\" \"|-\" \"*\" :=\n  replace_with_at x y ltac:(fun x' x => set (x' := x) in * |- * ).\nTactic Notation \"replace\" constr(x) \"with\" constr(y) \"in\" \"*\" \"|-\" \"*\" \"at\" ne_integer_list(n) :=\n  replace_with_at x y ltac:(fun x' x => set (x' := x) in * |- * at n ).\nTactic Notation \"replace\" constr(x) \"with\" constr(y) \"in\" hyp_list(H) \"|-\" \"*\" :=\n  replace_with_at x y ltac:(fun x' x => set (x' := x) in H |- * ).\nTactic Notation \"replace\" constr(x) \"with\" constr(y) \"in\" hyp_list(H) \"|-\" \"*\" \"at\" ne_integer_list(n) :=\n  replace_with_at x y ltac:(fun x' x => set (x' := x) in H |- * at n ).\nTactic Notation \"replace\" constr(x) \"with\" constr(y) \"in\" hyp_list(H) \"|-\" :=\n  replace_with_at x y ltac:(fun x' x => set (x' := x) in H |- ).\nTactic Notation \"replace\" constr(x) \"with\" constr(y) \"in\" hyp_list(H) :=\n  replace_with_at x y ltac:(fun x' x => set (x' := x) in H ).\nTactic Notation \"replace\" constr(x) \"with\" constr(y) \"in\" hyp_list(H) \"at\" ne_integer_list(n) :=\n  replace_with_at x y ltac:(fun x' x => set (x' := x) in H at n ).\nTactic Notation \"replace\" constr(x) \"with\" constr(y) \"by\" tactic3(tac) := \n  replace_with_at_by x y ltac:(fun x' x => set (x' := x) ) tac.\nTactic Notation \"replace\" constr(x) \"with\" constr(y) \"at\" ne_integer_list(n) \"by\" tactic3(tac) :=\n  replace_with_at_by x y ltac:(fun x' x => set (x' := x) at n ) tac.\nTactic Notation \"replace\" constr(x) \"with\" constr(y) \"in\" \"*\" \"by\" tactic3(tac) :=\n  replace_with_at_by x y ltac:(fun x' x => set (x' := x) in * ) tac.\nTactic Notation \"replace\" constr(x) \"with\" constr(y) \"in\" \"*\" \"at\" ne_integer_list(n) \"by\" tactic3(tac) :=\n  replace_with_at_by x y ltac:(fun x' x => set (x' := x) in * at n ) tac.\nTactic Notation \"replace\" constr(x) \"with\" constr(y) \"in\" \"*\" \"|-\" \"by\" tactic3(tac) :=\n  replace_with_at_by x y ltac:(fun x' x => set (x' := x) in * |- ) tac.\nTactic Notation \"replace\" constr(x) \"with\" constr(y) \"in\" \"*\" \"|-\" \"*\" \"by\" tactic3(tac) :=\n  replace_with_at_by x y ltac:(fun x' x => set (x' := x) in * |- * ) tac.\nTactic Notation \"replace\" constr(x) \"with\" constr(y) \"in\" \"*\" \"|-\" \"*\" \"at\" ne_integer_list(n) \"by\" tactic3(tac) :=\n  replace_with_at_by x y ltac:(fun x' x => set (x' := x) in * |- * at n ) tac.\nTactic Notation \"replace\" constr(x) \"with\" constr(y) \"in\" hyp_list(H) \"|-\" \"*\" \"by\" tactic3(tac) :=\n  replace_with_at_by x y ltac:(fun x' x => set (x' := x) in H |- * ) tac.\nTactic Notation \"replace\" constr(x) \"with\" constr(y) \"in\" hyp_list(H) \"|-\" \"*\" \"at\" ne_integer_list(n) \"by\" tactic3(tac) :=\n  replace_with_at_by x y ltac:(fun x' x => set (x' := x) in H |- * at n ) tac.\nTactic Notation \"replace\" constr(x) \"with\" constr(y) \"in\" hyp_list(H) \"|-\" \"by\" tactic3(tac) :=\n  replace_with_at_by x y ltac:(fun x' x => set (x' := x) in H |- ) tac.\nTactic Notation \"replace\" constr(x) \"with\" constr(y) \"in\" hyp_list(H) \"by\" tactic3(tac) :=\n  replace_with_at_by x y ltac:(fun x' x => set (x' := x) in H ) tac.\nTactic Notation \"replace\" constr(x) \"with\" constr(y) \"in\" hyp_list(H) \"at\" ne_integer_list(n) \"by\" tactic3(tac) :=\n  replace_with_at_by x y ltac:(fun x' x => set (x' := x) in H at n ) tac.\n\n\n\nPresumably there should be a backward compatibility layer that removes this definition, or something.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337538890/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337538892","html_url":"https://github.com/coq/coq/issues/4494#issuecomment-337538892","issue_url":"https://api.github.com/repos/coq/coq/issues/4494","id":337538892,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUzODg5Mg==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-01-16T02:17:10Z","updated_at":"2017-10-18T10:14:37Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nOops, replace [subst x'] with [symmetry in H; destruct H].\n\nTest case that passed with built-in [replace] that failed with the version given, but is fixed by this:\n\n\nGoal forall x y z : nat, x = y -> z = y.\nProof.\n  intros x y z H.\n  replace x with z in H; [ exact H | ].\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337538892/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337538893","html_url":"https://github.com/coq/coq/issues/4494#issuecomment-337538893","issue_url":"https://api.github.com/repos/coq/coq/issues/4494","id":337538893,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUzODg5Mw==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-01-16T02:21:57Z","updated_at":"2017-10-18T10:14:37Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nBetter, here's one that generates the same proof term up to beta zeta reduction:\n\nLtac replace_with_at_by x y set_tac tac :=\n  let H := fresh in\n  let x' := fresh in\n  set_tac x' x;\n  assert (H : y = x') by (subst x'; tac);\n  clearbody x'; induction H.\nLtac replace_with_at x y set_tac :=\n  let H := fresh in\n  let x' := fresh in\n  set_tac x' x;\n  cut (y = x');\n  [ intro H; induction H\n  | subst x' ].\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337538893/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337538894","html_url":"https://github.com/coq/coq/issues/4494#issuecomment-337538894","issue_url":"https://api.github.com/repos/coq/coq/issues/4494","id":337538894,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUzODg5NA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-01-19T16:44:47Z","updated_at":"2017-10-18T10:14:37Z","author_association":"CONTRIBUTOR","body":"Comment author: @herbelin\n\nThis is not specifically a problem of replace but a general problem of computation of occurrences in setoid_rewrite.\n\nRequire Import Coq.Setoids.Setoid.\nGoal forall x y : nat, x=y -> (forall k, x = k) = (x = x).\nintros x y H.\nrewrite H at 1.\n(* (forall k : nat, x = k) = (y = x) *)\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337538894/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337538899","html_url":"https://github.com/coq/coq/issues/4494#issuecomment-337538899","issue_url":"https://api.github.com/repos/coq/coq/issues/4494","id":337538899,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUzODg5OQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-01-19T20:38:27Z","updated_at":"2017-10-18T10:14:38Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nWhy is replace using setoid machinery?  And what is being done with setoids that takes five seconds?\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337538899/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337538901","html_url":"https://github.com/coq/coq/issues/4494#issuecomment-337538901","issue_url":"https://api.github.com/repos/coq/coq/issues/4494","id":337538901,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUzODkwMQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-01-19T23:32:33Z","updated_at":"2017-10-18T10:14:38Z","author_association":"CONTRIBUTOR","body":"Comment author: @herbelin\n\nThe clause \"at\" of replace and rewrite has been historically first supported by setoid_rewrite, so there is a switch to setoid_rewrite whenever there is an \"at\" clause, whatever rewriting problem it is.\n\nI believe the whole set of rewriting tactics deserve a cleaning phase as discussed last year on coqdev a but I don't know what Matthieu is thinking about it.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337538901/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]