[{"url":"https://api.github.com/repos/coq/coq/issues/comments/337543402","html_url":"https://github.com/coq/coq/issues/4810#issuecomment-337543402","issue_url":"https://api.github.com/repos/coq/coq/issues/4810","id":337543402,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0MzQwMg==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-06-11T19:17:19Z","updated_at":"2017-10-18T10:28:56Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nIf the type of the field is a projection from a record, then the performance of [field_simplify_eq] is linear in the *number of record fields of that record*.  This number is completely irrelevant to the intended behavior of [field_simplify_eq].  Fixing this would remove the need for the variant of [field_simplify_eq] mentioned in bug [BZ#4809](https://github.com/coq/coq/issues?q=is%3Aissue%20%22Original%20bug%20ID%3A%20BZ%234809%22).  (The constant coefficient in trunk is around 1.3 s rather than 5 s, which is better, but still entirely unacceptable, given that we need records with 11 fields.)\n\nAxiom proof_admitted : False.\nTactic Notation \"admit\" := abstract case proof_admitted.\nRequire Coq.nsatz.Nsatz.\nImport Coq.ZArith.BinInt.\nImport Coq.ZArith.Znumtheory.\n\nDefinition OpaqueF (modulus : BinInt.Z) : Set.\nexact { z : BinInt.Z | z = z mod modulus }.\nDefined.\nExport Coq.setoid_ring.Field_tac.\nExport Coq.ZArith.ZArith.\nAxiom pow : forall {m}, OpaqueF m -> BinNums.N -> OpaqueF m.\nAxiom Opaqueadd : forall {p}, OpaqueF p -> OpaqueF p -> OpaqueF p.\nAxiom Opaquemul : forall {p}, OpaqueF p -> OpaqueF p -> OpaqueF p.\nAxiom Opaquesub : forall {p}, OpaqueF p -> OpaqueF p -> OpaqueF p.\nAxiom Opaquediv : forall {p}, OpaqueF p -> OpaqueF p -> OpaqueF p.\nAxiom Opaqueopp : forall {p}, OpaqueF p -> OpaqueF p.\nAxiom Opaqueinv : forall {p}, OpaqueF p -> OpaqueF p.\nAxiom OpaqueZToField : forall {p}, BinInt.Z -> OpaqueF p.\n\nAxiom OpaqueFieldTheory : forall p, @ field_theory (OpaqueF p) (OpaqueZToField 0%Z) (OpaqueZToField 1%Z) Opaqueadd Opaquemul Opaquesub\\\n Opaqueopp Opaquediv Opaqueinv eq.\n\nModule Type params.\n  Parameter TwistedEdwardsParams : Set.\n  Parameter q : forall {_ : TwistedEdwardsParams}, BinInt.Z.\nEnd params.\nModule gen (Import P : params).\n  Existing Class TwistedEdwardsParams.\n\n  Context {prm:TwistedEdwardsParams}.\n\n  Add Field Ffield_notConstant : (OpaqueFieldTheory q).\n\n  Notation qq := (@ q prm).\n\n  Infix \"*\" := (@ Opaquemul qq).\n  Infix \"+\" := (@ Opaqueadd qq).\n  Infix \"-\" := (@ Opaquesub qq).\n  Infix \"/\" := (@ Opaquediv qq).\n  Notation \"1\" := (@ OpaqueZToField qq 1%Z).\n  Infix \"^\" := (@ pow qq).\n\n  Axiom d : OpaqueF qq.\n  Axiom a : OpaqueF qq.\n\n  Definition GT := forall xA yA : OpaqueF qq,\n   a * xA ^ 2%N + yA ^ 2%N = 1 + d * xA ^ 2%N * yA ^ 2%N ->\n   forall xB yB : OpaqueF qq,\n   a * xB ^ 2%N + yB ^ 2%N = 1 + d * xB ^ 2%N * yB ^ 2%N ->\n   forall xC yC : OpaqueF qq,\n   a * xC ^ 2%N + yC ^ 2%N = 1 + d * xC ^ 2%N * yC ^ 2%N ->\n   (xA * ((yB * yC - a * xB * xC) / (1 - d * xB * xC * yB * yC)) + yA * ((xB * yC + yB * xC) / (1 + d * xB * xC * yB * yC))) /\n   (1 + d * xA * ((xB * yC + yB * xC) / (1 + d * xB * xC * yB * yC)) * yA * ((yB * yC - a * xB * xC) / (1 - d * xB * xC * yB * yC))) \\\n=\n   ((xA * yB + yA * xB) / (1 + d * xA * xB * yA * yB) * yC + (yA * yB - a * xA * xB) / (1 - d * xA * xB * yA * yB) * xC) /\n   (1 + d * ((xA * yB + yA * xB) / (1 + d * xA * xB * yA * yB)) * xC * ((yA * yB - a * xA * xB) / (1 - d * xA * xB * yA * yB)) * yC).\n\n  Ltac t0 := unfold GT; intros.\nEnd gen.\n\nRecord TwistedEdwardsParams0 := { q0 : BinInt.Z }.\nModule P0 <: params. Definition TwistedEdwardsParams := TwistedEdwardsParams0. Definition q := @ q0. End P0.\nModule Import Show0 := gen P0.\nGoal GT. t0. Time field_simplify_eq. (* Finished transaction in 0. secs (0.324u,0.004s) *) Admitted.\n\nRecord TwistedEdwardsParams1 := { q1 : BinInt.Z ; a1 : OpaqueF q1 }.\nModule P1 <: params. Definition TwistedEdwardsParams := TwistedEdwardsParams1. Definition q := @ q1. End P1.\nModule Import Show1 := gen P1.\nGoal GT. t0. Time field_simplify_eq. (* Finished transaction in 5. secs (4.76u,0.028s) *) Admitted.\n\nRecord TwistedEdwardsParams2 := { q2 : BinInt.Z ; a2 : OpaqueF q2 ; b2 : OpaqueF q2 }.\nModule P2 <: params. Definition TwistedEdwardsParams := TwistedEdwardsParams2. Definition q := @ q2. End P2.\nModule Import Show2 := gen P2.\nGoal GT. t0. Time field_simplify_eq. (* Finished transaction in 11. secs (10.12u,0.096s) *) Admitted.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337543402/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337543403","html_url":"https://github.com/coq/coq/issues/4810#issuecomment-337543403","issue_url":"https://api.github.com/repos/coq/coq/issues/4810","id":337543403,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0MzQwMw==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-06-24T17:56:10Z","updated_at":"2017-10-18T10:28:56Z","author_association":"CONTRIBUTOR","body":"Comment author: @ppedrot\n\nIt looks like the linear cost comes from the protect_tac function in Newring,  but I do not really understand what is going on. Some fancy interaction is happening between the fields of the record and the type of elements, both being OpaqueF. When turning OpaqueF to a Qed-definition, the function performs in constant time.\n\nMatthieu rewrote it recently (and thus had to get the semantics), he may know better what to do.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337543403/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337543404","html_url":"https://github.com/coq/coq/issues/4810#issuecomment-337543404","issue_url":"https://api.github.com/repos/coq/coq/issues/4810","id":337543404,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0MzQwNA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-06-24T18:16:23Z","updated_at":"2017-10-18T10:28:56Z","author_association":"CONTRIBUTOR","body":"Comment author: @ppedrot\n\nFYI, setting primitive projections also restore linear time computation...\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337543404/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337543405","html_url":"https://github.com/coq/coq/issues/4810#issuecomment-337543405","issue_url":"https://api.github.com/repos/coq/coq/issues/4810","id":337543405,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0MzQwNQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-07-07T23:06:52Z","updated_at":"2017-10-18T10:28:56Z","author_association":"CONTRIBUTOR","body":"Comment author: @mattam82\n\nIt's hard to see why, because the type and all ring operations provided should be protected during computations... but this must not always be the case if the Qed'ed version is instantaneous or primitive projections make computation faster. Apparently my patch is not at fault. Maybe Bruno has an idea, cc-ing.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337543405/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337543408","html_url":"https://github.com/coq/coq/issues/4810#issuecomment-337543408","issue_url":"https://api.github.com/repos/coq/coq/issues/4810","id":337543408,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0MzQwOA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-07-07T23:30:16Z","updated_at":"2017-10-18T10:28:56Z","author_association":"CONTRIBUTOR","body":"Comment author: @mattam82\n\nI have doubts about the protected arguments of PEeval and FEeval and PCond (defined in newring.ml) which should rather be:\n\n    pol_cst \"PEeval\", (function -1|8|10|13->Eval|12->Rec|_->Prot);\n    (* FEeval: evaluate morphism, protect field\n       operations and make recursive call on the var map *)\n    my_reference \"FEeval\", (function -1|10|15->Eval|14->Rec|_->Prot)]);;\n     my_reference \"PCond\", (function -1|9|11|14->Eval|13->Rec|_->Prot)]);;\n\nBut that doesn't seem to make a difference.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337543408/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337543410","html_url":"https://github.com/coq/coq/issues/4810#issuecomment-337543410","issue_url":"https://api.github.com/repos/coq/coq/issues/4810","id":337543410,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0MzQxMA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-07-07T23:34:18Z","updated_at":"2017-10-18T10:28:56Z","author_association":"CONTRIBUTOR","body":"Comment author: @mattam82\n\nIt could just be a conversion test using the \"wrong\" strategy and unfolding OpaqueF when it's not Qed.d or being much faster converting P2.q Show2.prm with itself with primitive projections...\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337543410/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337543411","html_url":"https://github.com/coq/coq/issues/4810#issuecomment-337543411","issue_url":"https://api.github.com/repos/coq/coq/issues/4810","id":337543411,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0MzQxMQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-08-25T10:12:59Z","updated_at":"2017-10-18T10:28:56Z","author_association":"CONTRIBUTOR","body":"Comment author: @ppedrot\n\nCreated attachment 753\nDump of the implicit argument\n\n> Attached file: [dump.tar.gz](https://coq.inria.fr/bugfiles/attachment.cgi?id=753) (application/gzip, 207978 bytes)\n> Description:   Dump of the implicit argument\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337543411/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337543414","html_url":"https://github.com/coq/coq/issues/4810#issuecomment-337543414","issue_url":"https://api.github.com/repos/coq/coq/issues/4810","id":337543414,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0MzQxNA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-08-25T10:14:41Z","updated_at":"2017-10-18T10:28:57Z","author_association":"CONTRIBUTOR","body":"Comment author: @ppedrot\n\nI've just discovered that the implicit argument of ZToField (a Z) is really HUGE.\n\nWhen printed normally, this is:\n\nlet (q, a, d, _, _, _, _, _) := Show7.prm in q : Z\n\nWhen dumped in debug mode, well, just have a look at the attached archive...\n\nMatthieu, do you know how such a huge term can be constructed with historical projections?\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337543414/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337543415","html_url":"https://github.com/coq/coq/issues/4810#issuecomment-337543415","issue_url":"https://api.github.com/repos/coq/coq/issues/4810","id":337543415,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0MzQxNQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-08-25T13:13:40Z","updated_at":"2017-10-18T10:28:57Z","author_association":"CONTRIBUTOR","body":"Comment author: @ppedrot\n\nThe problem ultimately comes from the protect_fv tactic that turns out not to protect the branches of a pattern-matching. Any reduction expert out there?\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337543415/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337543417","html_url":"https://github.com/coq/coq/issues/4810#issuecomment-337543417","issue_url":"https://api.github.com/repos/coq/coq/issues/4810","id":337543417,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0MzQxNw==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-08-25T13:43:27Z","updated_at":"2017-10-18T10:28:57Z","author_association":"CONTRIBUTOR","body":"Comment author: @ppedrot\n\nHere is a reduced test case generating a huge goal, even though it does not appear without debug printing (i.e. it remains small even with the print all flag, as the internal pattern matching functions are never displayed to the user ever).\n\nRequire Import ZArith.\n\nDefinition F (modulus : BinInt.Z) : Set := { z : BinInt.Z | z = z + z }%Z.\n\nAxiom add : forall {p}, F p -> F p -> F p.\nAxiom mul : forall {p}, F p -> F p -> F p.\nAxiom sub : forall {p}, F p -> F p -> F p.\nAxiom opp : forall {p}, F p -> F p.\nAxiom ZToField : forall {p}, BinInt.Z -> F p.\n\nRecord TwistedEdwardsParams := { q : BinInt.Z ; a1 : F q }.\n\nAxiom prm : TwistedEdwardsParams.\n\nNotation \"1\" := (@ ZToField (q prm) 1%Z).\n\nGoal\n 1 = Ring_polynom.Pphi_dev (ZToField 0) 1 add mul sub opp 0%Z 1%Z Zeq_bool\n   (gen_phiZ (ZToField 0) 1 add mul opp) get_signZ nil (Ring_polynom.Pc 2%Z).\nProof.\nprotect_fv \"ring\".\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337543417/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337543418","html_url":"https://github.com/coq/coq/issues/4810#issuecomment-337543418","issue_url":"https://api.github.com/repos/coq/coq/issues/4810","id":337543418,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0MzQxOA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-08-25T15:29:03Z","updated_at":"2017-10-18T10:28:57Z","author_association":"CONTRIBUTOR","body":"Comment author: @ppedrot\n\nGotcha. The problem is that the computing function of ring/field is marked fully reducible by protect_fv. That is, in\n\nRing_polynom.Pphi_dev (ZToField 0) 1 add mul sub opp 0%Z 1%Z Zeq_bool\n   (gen_phiZ (ZToField 0) 1 add mul opp) get_signZ nil (Ring_polynom.Pc 2%Z).\n\nthe \"gen_phiZ (ZToField 0) 1 add mul opp\" term is fully normalized by the invokation of protect_fv. This is where things start to go awry, as the implicit argument \"q prm\" of \"ZToField 0\" is thus fully normalized as well. I don't really know why the internal representation of patterns is done that way, but it leads to the computation of a huge term. This obviously does not appear with primitive projections as there is no such pattern-matching.\n\nI think we can fix this by changing the implementation of Newring to recognize constants that are computing functions and marking the corresponding field of Pphi_dev to be Rec. But that's not easy...\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337543418/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337543419","html_url":"https://github.com/coq/coq/issues/4810#issuecomment-337543419","issue_url":"https://api.github.com/repos/coq/coq/issues/4810","id":337543419,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0MzQxOQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-08-25T16:05:30Z","updated_at":"2017-10-18T10:28:57Z","author_association":"CONTRIBUTOR","body":"Comment author: @herbelin\n\n> I don't really know why the internal representation of patterns is done that\n> way, but it leads to the computation of a huge term. This obviously does not\n> appear with primitive projections as there is no such pattern-matching.\n\nIf I understand your point clearly, you are taking about the internal types of the pattern variables in \"match\", as was discussed in a couple of bugs with simpl or maybe rewrite in those types.\n\nThe notion of \"pattern\" in match was not in the early presentation of CoC and CIC. Reasoning in terms of pattern arrived progressively with Cristina's \"Cases\" ML-style pattern-matching. It took its current form, where the internal types are invisible in the concrete syntax only in 8.0.\n\nIf ever relevant to the current thread, there are some discussions around to remove these internal types, keeping only the names of variables, and to canonically reconstruct the types on demand.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337543419/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337543421","html_url":"https://github.com/coq/coq/issues/4810#issuecomment-337543421","issue_url":"https://api.github.com/repos/coq/coq/issues/4810","id":337543421,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0MzQyMQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-08-25T16:08:54Z","updated_at":"2017-10-18T10:28:57Z","author_association":"CONTRIBUTOR","body":"Comment author: @ppedrot\n\n(In reply to Hugo Herbelin from comment [BZ#11](https://github.com/coq/coq/issues?q=is%3Aissue%20%22Original%20bug%20ID%3A%20BZ%2311%22))\n> If I understand your point clearly, you are taking about the internal types\n> of the pattern variables in \"match\", as was discussed in a couple of bugs\n> with simpl or maybe rewrite in those types.\n\nIndeed. Actually, I'm wondering whether we can even derive some inconsistency from this. There is a discrepancy between the kernel lazy reduction and vm / native_compute in so far as the former normalizes the types of the patterns while the latter do not. Maxime, any idea?\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337543421/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337543422","html_url":"https://github.com/coq/coq/issues/4810#issuecomment-337543422","issue_url":"https://api.github.com/repos/coq/coq/issues/4810","id":337543422,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0MzQyMg==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-08-25T19:00:38Z","updated_at":"2017-10-18T10:28:57Z","author_association":"CONTRIBUTOR","body":"Comment author: @herbelin\n\nI suspect that Maxime would say that terms are up to reduction and that no inconsistency can be derived from choosing a different representative in a class of equivalent types. The vm_compute and native_compute reductions are to me reasonable here, lazy is not. By stopping reducing in lazy, the only risks I see is in falling in one of these cases where a syntactic subterm matching (e.g. rewrite) or subterm selection (e.g. pattern) stops to work. But, anyway, I'm more and more convinced that the clean approach is eventually to have these types canonically reconstructed from the parameters of the term to match, even if this would probably introduce some (hopefully) rare incompatibilities (e.g. less occurrences to count, or a variable getting a different name from named_hd).\n\nBy the way, another discrepancy between vm, native and the other machines is that the formers eta-expand the constructors when they are not fully applied while the latters don't. Now that eta is supported this is not a big deal, but it is another example where the normal forms produced are not syntactically the same.\n\nEval vm_compute in S.\n     = fun x : nat => S x\n     : nat -> nat\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337543422/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337543423","html_url":"https://github.com/coq/coq/issues/4810#issuecomment-337543423","issue_url":"https://api.github.com/repos/coq/coq/issues/4810","id":337543423,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0MzQyMw==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-08-25T21:31:39Z","updated_at":"2017-10-18T10:28:57Z","author_association":"CONTRIBUTOR","body":"Comment author: @maximedenes\n\n(In reply to Hugo Herbelin from comment [BZ#13](https://github.com/coq/coq/issues?q=is%3Aissue%20%22Original%20bug%20ID%3A%20BZ%2313%22))\n> I suspect that Maxime would say that terms are up to reduction and that no\n> inconsistency can be derived from choosing a different representative in a\n> class of equivalent types.\n\nIndeed, I don't think anything will break here. I wouldn't say the same of PMP's [BZ#5042](https://github.com/coq/coq/issues?q=is%3Aissue%20%22Original%20bug%20ID%3A%20BZ%235042%22) :) (I'm trying to fix it)\n\n> The vm_compute and native_compute reductions are\n> to me reasonable here, lazy is not. By stopping reducing in lazy, the only\n> risks I see is in falling in one of these cases where a syntactic subterm\n> matching (e.g. rewrite) or subterm selection (e.g. pattern) stops to work.\n> But, anyway, I'm more and more convinced that the clean approach is\n> eventually to have these types canonically reconstructed from the parameters\n> of the term to match, even if this would probably introduce some (hopefully)\n> rare incompatibilities (e.g. less occurrences to count, or a variable\n> getting a different name from named_hd).\n\nThat may be a better solution than the current solution indeed. I think the incompatibilities (do to counting occurrences) will be fairly common, but maybe we have to do it anyway.\n\n> \n> By the way, another discrepancy between vm, native and the other machines is\n> that the formers eta-expand the constructors when they are not fully applied\n> while the latters don't. Now that eta is supported this is not a big deal,\n> but it is another example where the normal forms produced are not\n> syntactically the same.\n> \n> Eval vm_compute in S.\n>      = fun x : nat => S x\n>      : nat -> nat\n\nIndeed. I believe there was an ad-hoc treatment of constructors before we had eta, but it is easier to do as it is now, since constructors are always represented fully applied in OCaml.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337543423/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337543424","html_url":"https://github.com/coq/coq/issues/4810#issuecomment-337543424","issue_url":"https://api.github.com/repos/coq/coq/issues/4810","id":337543424,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0MzQyNA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-08-25T22:25:34Z","updated_at":"2017-10-18T10:28:58Z","author_association":"CONTRIBUTOR","body":"Comment author: @mattam82\n\nChanging the structure of match to not include the types of the patterns could be a costly operation implementation-wise and performance-wise I think, as you need type information to reconstruct the branches annotations, and for example something as basic as fold_constr_with_binders would need it. On the other hand, I have no idea how we could \"fix\" protect_fv to prevent this reduction from happening either...\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337543424/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337543426","html_url":"https://github.com/coq/coq/issues/4810#issuecomment-337543426","issue_url":"https://api.github.com/repos/coq/coq/issues/4810","id":337543426,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0MzQyNg==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-08-26T06:21:56Z","updated_at":"2017-10-18T10:28:58Z","author_association":"CONTRIBUTOR","body":"Comment author: @herbelin\n\n(In reply to Matthieu Sozeau from comment [BZ#15](https://github.com/coq/coq/issues?q=is%3Aissue%20%22Original%20bug%20ID%3A%20BZ%2315%22))\n> Changing the structure of match to not include the types of the patterns\n> could be a costly operation implementation-wise and performance-wise I\n> think, as you need type information to reconstruct the branches annotations,\n> and for example something as basic as fold_constr_with_binders would need\n> it.\n\nI fully agree and this is indeed my worry. The possible sources of slowdown are in reducing the type of the term to match to whd normal form (probably instantaneous in general but arbitrary long in theory), then in substituting the parameters in the type of the pattern variables (always in linear time). Maybe this substitution can be done lazily, or maybe, by just prepending the types with an appropriate bar of let-ins (or maybe it is a bad idea)?\n\nOn the other side, we would gain on all operations which go through the hidden types since there would not be any such types to traverse any more.\n\nSo, in a function in the style of fold_constr_with_binders, we would loose time in computing the env but gain time in not going through the types of binder. I'm unable to tell what the exact outcome would be.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337543426/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337543429","html_url":"https://github.com/coq/coq/issues/4810#issuecomment-337543429","issue_url":"https://api.github.com/repos/coq/coq/issues/4810","id":337543429,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0MzQyOQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-09-02T12:01:31Z","updated_at":"2017-10-18T10:28:58Z","author_association":"CONTRIBUTOR","body":"Comment author: @ppedrot\n\nAn alternative solution that may actually be more efficient in general would be to restrict the kernel reduction so that it never reduces the types of patterns. Does it sound reasonable?\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337543429/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337543430","html_url":"https://github.com/coq/coq/issues/4810#issuecomment-337543430","issue_url":"https://api.github.com/repos/coq/coq/issues/4810","id":337543430,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0MzQzMA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-09-02T14:51:47Z","updated_at":"2017-10-18T10:28:58Z","author_association":"CONTRIBUTOR","body":"Comment author: @herbelin\n\n(In reply to Pierre-Marie Pédrot from comment [BZ#17](https://github.com/coq/coq/issues?q=is%3Aissue%20%22Original%20bug%20ID%3A%20BZ%2317%22))\n> An alternative solution that may actually be more efficient in general would\n> be to restrict the kernel reduction so that it never reduces the types of\n> patterns. Does it sound reasonable?\n\nThat could be tried. Incidentally, Benjamin Grégoire and Bruno Barras had a paper on the redundancy of conversion in types of binders, \"On the Role of Type Decorations in the Calculus of Inductive Constructions\" (but I don't remember the details).\n\nOn the binders of \"match\" issue, another lighter approach than the one I proposed would be to accept Cast in patterns (as Daniel started to do). Then, \"Set Printing All\", or maybe an aggressive form of \"Set Printing All\", could print the types as casts. This would certainly make reading of terms painful but this would be a light way to make the specification language and the implementation match (refining the specification language into the implemented one rather than tranferring the level of abstraction of the specification language to the implemented one).\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337543430/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337543431","html_url":"https://github.com/coq/coq/issues/4810#issuecomment-337543431","issue_url":"https://api.github.com/repos/coq/coq/issues/4810","id":337543431,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0MzQzMQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-09-02T15:06:15Z","updated_at":"2017-10-18T10:28:58Z","author_association":"CONTRIBUTOR","body":"Comment author: @silene\n\nPerhaps I am missing something, but I don't think it would work to not perform reduction in the pattern types. It is not a matter of consistency but more a matter of usability. For instance, the user would no longer be able to generalize some subterms away, since they would not have been reduced and thus would not have the form expected by the user.\n\nFor instance, if you have\n\n  fun x : T (3 + 5) => match x with C (y (*: U (3 + 5)*)) => y end\n\nand you first reduce (3 + 5) and then generalize 8, you need the implicit (3 + 5) in the type of y to also have been reduced, otherwise you obtain the following ill-typed subterm:\n\n  fun x : T n => match x with C y (*: U (3 + 5)*) => y end.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337543431/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]