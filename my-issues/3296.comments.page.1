[{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518999","html_url":"https://github.com/coq/coq/issues/3296#issuecomment-337518999","issue_url":"https://api.github.com/repos/coq/coq/issues/3296","id":337518999,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxODk5OQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-05-01T02:42:31Z","updated_at":"2017-10-18T09:16:41Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nMy primary use case for [lazy] is when I have a term with many (potentially opaque) proofs, but I think that they should all disappear from the final result.  When I accidentally make something opaque that should be transparent, [lazy] will just sit there running for a very long time.  It would be more useful to know which lemma I forgot to make transparent.  As such, I'd like to have one (or both) of the following two variants of [lazy] (possibly determined via flags):\n\nA variant that fails fast whenever it encounters an opaque term; currently, the rule it uses for application, I believe, is that to reduce [f x], first it finds the (w)hnf of [f], and then, if that's a lambda, it substitutes [x], and otherwise it reduces [x].  I would like like it to instead fail if the (w)hnf of [f] is neither a lambda nor a constructor applied to arguments, and the error message should mention the name of the constant that is not a constructor applied to arguments.\n\nAND/OR\n\nA variant that ignores applications of opaque lemmas.  This is the same as above, but instead of failing with an error message, it simply leaves [x] as it is, and continues reducing the rest of the term.\n\n\nI think the first variant would be more useful, though the second variant would probably end up giving me the same information.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518999/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]