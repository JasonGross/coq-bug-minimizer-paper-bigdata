[{"url":"https://api.github.com/repos/coq/coq/issues/comments/1018227089","html_url":"https://github.com/coq/coq/issues/15520#issuecomment-1018227089","issue_url":"https://api.github.com/repos/coq/coq/issues/15520","id":1018227089,"node_id":"IC_kwDOABUDh848sOmR","user":{"login":"ppedrot","id":1202327,"node_id":"MDQ6VXNlcjEyMDIzMjc=","avatar_url":"https://avatars.githubusercontent.com/u/1202327?v=4","gravatar_id":"","url":"https://api.github.com/users/ppedrot","html_url":"https://github.com/ppedrot","followers_url":"https://api.github.com/users/ppedrot/followers","following_url":"https://api.github.com/users/ppedrot/following{/other_user}","gists_url":"https://api.github.com/users/ppedrot/gists{/gist_id}","starred_url":"https://api.github.com/users/ppedrot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ppedrot/subscriptions","organizations_url":"https://api.github.com/users/ppedrot/orgs","repos_url":"https://api.github.com/users/ppedrot/repos","events_url":"https://api.github.com/users/ppedrot/events{/privacy}","received_events_url":"https://api.github.com/users/ppedrot/received_events","type":"User","site_admin":false},"created_at":"2022-01-21T06:44:57Z","updated_at":"2022-01-21T06:44:57Z","author_association":"MEMBER","body":">  a bug in pattern_of_constr?\r\n\r\nI'd bet so.","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/1018227089/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/1019574613","html_url":"https://github.com/coq/coq/issues/15520#issuecomment-1019574613","issue_url":"https://api.github.com/repos/coq/coq/issues/15520","id":1019574613,"node_id":"IC_kwDOABUDh848xXlV","user":{"login":"herbelin","id":460771,"node_id":"MDQ6VXNlcjQ2MDc3MQ==","avatar_url":"https://avatars.githubusercontent.com/u/460771?v=4","gravatar_id":"","url":"https://api.github.com/users/herbelin","html_url":"https://github.com/herbelin","followers_url":"https://api.github.com/users/herbelin/followers","following_url":"https://api.github.com/users/herbelin/following{/other_user}","gists_url":"https://api.github.com/users/herbelin/gists{/gist_id}","starred_url":"https://api.github.com/users/herbelin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/herbelin/subscriptions","organizations_url":"https://api.github.com/users/herbelin/orgs","repos_url":"https://api.github.com/users/herbelin/repos","events_url":"https://api.github.com/users/herbelin/events{/privacy}","received_events_url":"https://api.github.com/users/herbelin/received_events","type":"User","site_admin":false},"created_at":"2022-01-23T21:52:04Z","updated_at":"2022-01-23T21:52:04Z","author_association":"MEMBER","body":"Technically, in the first case, After the period, the evar, which was initially a hole, is turned into a proper component of the goal, so it gets a goal-style \"evar source\" marker, i.e. `GoalEvar` or `VarInstance`. It is thus considered as a proper evar. \r\n\r\nIn the second case, without a period, the evar is still considered to be a `_`, i.e. a hole which has not yet been resolved and which thus matches anything (its evar source is `QuestionMark`).\r\n\r\nI don't know what to think about it though. Maybe it is `eexists n` which should be responsible to declare that `n` is not any more an `open_constr` (i.e. an constr with holes) but a `constr` with evars, and that the holes it contains should be considered proper evars.","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/1019574613/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/1019686988","html_url":"https://github.com/coq/coq/issues/15520#issuecomment-1019686988","issue_url":"https://api.github.com/repos/coq/coq/issues/15520","id":1019686988,"node_id":"IC_kwDOABUDh848xzBM","user":{"login":"JasonGross","id":396076,"node_id":"MDQ6VXNlcjM5NjA3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/396076?v=4","gravatar_id":"","url":"https://api.github.com/users/JasonGross","html_url":"https://github.com/JasonGross","followers_url":"https://api.github.com/users/JasonGross/followers","following_url":"https://api.github.com/users/JasonGross/following{/other_user}","gists_url":"https://api.github.com/users/JasonGross/gists{/gist_id}","starred_url":"https://api.github.com/users/JasonGross/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JasonGross/subscriptions","organizations_url":"https://api.github.com/users/JasonGross/orgs","repos_url":"https://api.github.com/users/JasonGross/repos","events_url":"https://api.github.com/users/JasonGross/events{/privacy}","received_events_url":"https://api.github.com/users/JasonGross/received_events","type":"User","site_admin":false},"created_at":"2022-01-24T03:42:26Z","updated_at":"2022-01-24T03:42:26Z","author_association":"MEMBER","body":"I think it would be fine to have any tactic that adds an evar to the proof context turn it into a goal evar.","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/1019686988/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/1020061512","html_url":"https://github.com/coq/coq/issues/15520#issuecomment-1020061512","issue_url":"https://api.github.com/repos/coq/coq/issues/15520","id":1020061512,"node_id":"IC_kwDOABUDh848zOdI","user":{"login":"herbelin","id":460771,"node_id":"MDQ6VXNlcjQ2MDc3MQ==","avatar_url":"https://avatars.githubusercontent.com/u/460771?v=4","gravatar_id":"","url":"https://api.github.com/users/herbelin","html_url":"https://github.com/herbelin","followers_url":"https://api.github.com/users/herbelin/followers","following_url":"https://api.github.com/users/herbelin/following{/other_user}","gists_url":"https://api.github.com/users/herbelin/gists{/gist_id}","starred_url":"https://api.github.com/users/herbelin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/herbelin/subscriptions","organizations_url":"https://api.github.com/users/herbelin/orgs","repos_url":"https://api.github.com/users/herbelin/repos","events_url":"https://api.github.com/users/herbelin/events{/privacy}","received_events_url":"https://api.github.com/users/herbelin/received_events","type":"User","site_admin":false},"created_at":"2022-01-24T12:44:57Z","updated_at":"2022-01-24T12:44:57Z","author_association":"MEMBER","body":"On\r\n```\r\nGoal True.\r\nlet n := open_constr:(_) in\r\npose n as N1;\r\npose n as N2.\r\nmatch N1 with N2 => idtac \"match\" | _ => idtac \"nomatch\" end.\r\n```\r\nDo you expect a \"match\" or a \"nomatch\"?\r\n\r\nOr similarly in:\r\n```\r\nGoal exists n : nat, n=0.\r\nlet n := open_constr:(_) in\r\neexists n; pose n as N;\r\nlet n := (eval cbv delta [N] in N) in\r\nmatch goal with |- n = 0 => idtac \"match\" | _ => idtac \"nomatch\" end.\r\n```\r\n\r\nAnd in:\r\n```\r\nGoal 0=1.\r\nlet p := open_constr:(_ = _) in\r\nmatch goal with |- p => idtac \"match\" | _ => idtac \"nomatch\" end.\r\n```\r\nIf the answer is match, match, nomatch then, I would lean towards thinking that it is `open_constr` which should be changed so that it \"goalifies\" its evars.\r\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/1020061512/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/1020066806","html_url":"https://github.com/coq/coq/issues/15520#issuecomment-1020066806","issue_url":"https://api.github.com/repos/coq/coq/issues/15520","id":1020066806,"node_id":"IC_kwDOABUDh848zPv2","user":{"login":"SkySkimmer","id":2461932,"node_id":"MDQ6VXNlcjI0NjE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/2461932?v=4","gravatar_id":"","url":"https://api.github.com/users/SkySkimmer","html_url":"https://github.com/SkySkimmer","followers_url":"https://api.github.com/users/SkySkimmer/followers","following_url":"https://api.github.com/users/SkySkimmer/following{/other_user}","gists_url":"https://api.github.com/users/SkySkimmer/gists{/gist_id}","starred_url":"https://api.github.com/users/SkySkimmer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/SkySkimmer/subscriptions","organizations_url":"https://api.github.com/users/SkySkimmer/orgs","repos_url":"https://api.github.com/users/SkySkimmer/repos","events_url":"https://api.github.com/users/SkySkimmer/events{/privacy}","received_events_url":"https://api.github.com/users/SkySkimmer/received_events","type":"User","site_admin":false},"created_at":"2022-01-24T12:50:29Z","updated_at":"2022-01-24T12:50:29Z","author_association":"CONTRIBUTOR","body":"I would say nomatch, match, not sure leaning nomatch.","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/1020066806/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/1020071175","html_url":"https://github.com/coq/coq/issues/15520#issuecomment-1020071175","issue_url":"https://api.github.com/repos/coq/coq/issues/15520","id":1020071175,"node_id":"IC_kwDOABUDh848zQ0H","user":{"login":"ppedrot","id":1202327,"node_id":"MDQ6VXNlcjEyMDIzMjc=","avatar_url":"https://avatars.githubusercontent.com/u/1202327?v=4","gravatar_id":"","url":"https://api.github.com/users/ppedrot","html_url":"https://github.com/ppedrot","followers_url":"https://api.github.com/users/ppedrot/followers","following_url":"https://api.github.com/users/ppedrot/following{/other_user}","gists_url":"https://api.github.com/users/ppedrot/gists{/gist_id}","starred_url":"https://api.github.com/users/ppedrot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ppedrot/subscriptions","organizations_url":"https://api.github.com/users/ppedrot/orgs","repos_url":"https://api.github.com/users/ppedrot/repos","events_url":"https://api.github.com/users/ppedrot/events{/privacy}","received_events_url":"https://api.github.com/users/ppedrot/received_events","type":"User","site_admin":false},"created_at":"2022-01-24T12:56:12Z","updated_at":"2022-01-24T12:56:12Z","author_association":"MEMBER","body":"Please don't pile hacks over hacks in the Ltac implementation. We should never convert contrs to patterns there, instead we should keep the term as is in the pattern and use (one particular variant we can bicker about of) syntactic equality. Really, I insist, stop relying on the `evar_kind` flag for good.","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/1020071175/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/1020109409","html_url":"https://github.com/coq/coq/issues/15520#issuecomment-1020109409","issue_url":"https://api.github.com/repos/coq/coq/issues/15520","id":1020109409,"node_id":"IC_kwDOABUDh848zaJh","user":{"login":"herbelin","id":460771,"node_id":"MDQ6VXNlcjQ2MDc3MQ==","avatar_url":"https://avatars.githubusercontent.com/u/460771?v=4","gravatar_id":"","url":"https://api.github.com/users/herbelin","html_url":"https://github.com/herbelin","followers_url":"https://api.github.com/users/herbelin/followers","following_url":"https://api.github.com/users/herbelin/following{/other_user}","gists_url":"https://api.github.com/users/herbelin/gists{/gist_id}","starred_url":"https://api.github.com/users/herbelin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/herbelin/subscriptions","organizations_url":"https://api.github.com/users/herbelin/orgs","repos_url":"https://api.github.com/users/herbelin/repos","events_url":"https://api.github.com/users/herbelin/events{/privacy}","received_events_url":"https://api.github.com/users/herbelin/received_events","type":"User","site_admin":false},"created_at":"2022-01-24T13:36:59Z","updated_at":"2022-01-24T13:36:59Z","author_association":"MEMBER","body":"You mean not type-checking the pattern? That's certainly a possibility.\r\n\r\nWhat bothered me was that without \"pretyping\" the pattern, we loose the ability to automatically insert coercions and to use non basic pattern-matching.\r\n\r\nIn any case, I agree that we should not pile hacks but rather put some \"order\" in the current hacks (evar kinds for example...).","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/1020109409/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/1020112923","html_url":"https://github.com/coq/coq/issues/15520#issuecomment-1020112923","issue_url":"https://api.github.com/repos/coq/coq/issues/15520","id":1020112923,"node_id":"IC_kwDOABUDh848zbAb","user":{"login":"ppedrot","id":1202327,"node_id":"MDQ6VXNlcjEyMDIzMjc=","avatar_url":"https://avatars.githubusercontent.com/u/1202327?v=4","gravatar_id":"","url":"https://api.github.com/users/ppedrot","html_url":"https://github.com/ppedrot","followers_url":"https://api.github.com/users/ppedrot/followers","following_url":"https://api.github.com/users/ppedrot/following{/other_user}","gists_url":"https://api.github.com/users/ppedrot/gists{/gist_id}","starred_url":"https://api.github.com/users/ppedrot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ppedrot/subscriptions","organizations_url":"https://api.github.com/users/ppedrot/orgs","repos_url":"https://api.github.com/users/ppedrot/repos","events_url":"https://api.github.com/users/ppedrot/events{/privacy}","received_events_url":"https://api.github.com/users/ppedrot/received_events","type":"User","site_admin":false},"created_at":"2022-01-24T13:41:04Z","updated_at":"2022-01-24T13:41:04Z","author_association":"MEMBER","body":"> You mean not type-checking the pattern?\r\n\r\nNo, the problem is the other way around, that is the inclusion of a term (a `constr`) into a pattern (a `constr_pattern`). Instead of trying to interpret it back, just add a node to `constr_pattern` that keeps a term and when asked to check whether it matches, check for syntactic equality. I had an old patch that tried to do this but there were weird things going on IIRC.\r\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/1020112923/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/1020124124","html_url":"https://github.com/coq/coq/issues/15520#issuecomment-1020124124","issue_url":"https://api.github.com/repos/coq/coq/issues/15520","id":1020124124,"node_id":"IC_kwDOABUDh848zdvc","user":{"login":"herbelin","id":460771,"node_id":"MDQ6VXNlcjQ2MDc3MQ==","avatar_url":"https://avatars.githubusercontent.com/u/460771?v=4","gravatar_id":"","url":"https://api.github.com/users/herbelin","html_url":"https://github.com/herbelin","followers_url":"https://api.github.com/users/herbelin/followers","following_url":"https://api.github.com/users/herbelin/following{/other_user}","gists_url":"https://api.github.com/users/herbelin/gists{/gist_id}","starred_url":"https://api.github.com/users/herbelin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/herbelin/subscriptions","organizations_url":"https://api.github.com/users/herbelin/orgs","repos_url":"https://api.github.com/users/herbelin/repos","events_url":"https://api.github.com/users/herbelin/events{/privacy}","received_events_url":"https://api.github.com/users/herbelin/received_events","type":"User","site_admin":false},"created_at":"2022-01-24T13:53:41Z","updated_at":"2022-01-24T13:53:41Z","author_association":"MEMBER","body":"Ah, interesting. Seems worth to see if we can eventually make it working.\r\n\r\nActually, maybe `constr_pattern` was a bad idea in the first place and we can just use annotations on evars to remember which of those are second-order metavariables 😟 ","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/1020124124/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/1020126114","html_url":"https://github.com/coq/coq/issues/15520#issuecomment-1020126114","issue_url":"https://api.github.com/repos/coq/coq/issues/15520","id":1020126114,"node_id":"IC_kwDOABUDh848zeOi","user":{"login":"ppedrot","id":1202327,"node_id":"MDQ6VXNlcjEyMDIzMjc=","avatar_url":"https://avatars.githubusercontent.com/u/1202327?v=4","gravatar_id":"","url":"https://api.github.com/users/ppedrot","html_url":"https://github.com/ppedrot","followers_url":"https://api.github.com/users/ppedrot/followers","following_url":"https://api.github.com/users/ppedrot/following{/other_user}","gists_url":"https://api.github.com/users/ppedrot/gists{/gist_id}","starred_url":"https://api.github.com/users/ppedrot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ppedrot/subscriptions","organizations_url":"https://api.github.com/users/ppedrot/orgs","repos_url":"https://api.github.com/users/ppedrot/repos","events_url":"https://api.github.com/users/ppedrot/events{/privacy}","received_events_url":"https://api.github.com/users/ppedrot/received_events","type":"User","site_admin":false},"created_at":"2022-01-24T13:56:04Z","updated_at":"2022-01-24T13:56:04Z","author_association":"MEMBER","body":"> we can just use annotations on evars\r\n\r\nNo no no no no!!!!!!!! That's the root of the problem, this perennial confusion between evars and holes. The very fact we're using the same surface syntax is preventing us from splitting them, but they're really two things that have literally nothing to do with one another! The `constr_pattern` type is a good thing, the problem is (as usual) the lack of Ltac expressivity where one would like to manipulate patterns as a first-class construct.\r\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/1020126114/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/1020132107","html_url":"https://github.com/coq/coq/issues/15520#issuecomment-1020132107","issue_url":"https://api.github.com/repos/coq/coq/issues/15520","id":1020132107,"node_id":"IC_kwDOABUDh848zfsL","user":{"login":"herbelin","id":460771,"node_id":"MDQ6VXNlcjQ2MDc3MQ==","avatar_url":"https://avatars.githubusercontent.com/u/460771?v=4","gravatar_id":"","url":"https://api.github.com/users/herbelin","html_url":"https://github.com/herbelin","followers_url":"https://api.github.com/users/herbelin/followers","following_url":"https://api.github.com/users/herbelin/following{/other_user}","gists_url":"https://api.github.com/users/herbelin/gists{/gist_id}","starred_url":"https://api.github.com/users/herbelin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/herbelin/subscriptions","organizations_url":"https://api.github.com/users/herbelin/orgs","repos_url":"https://api.github.com/users/herbelin/repos","events_url":"https://api.github.com/users/herbelin/events{/privacy}","received_events_url":"https://api.github.com/users/herbelin/received_events","type":"User","site_admin":false},"created_at":"2022-01-24T14:02:37Z","updated_at":"2022-01-24T14:02:37Z","author_association":"MEMBER","body":"But then what do you mean by a node in `constr_pattern` for terms. That would be only for terms with no holes?\r\n\r\nIn particular, what is your solution to `constr_of_pattern`, that is to the question of type-checking a pattern by reusing the typing algorithm for constr?\r\n\r\n> the lack of Ltac expressivity where one would like to manipulate patterns as a first-class construct.\r\n\r\nThis seems to be a different question, but why not to have a first-class construct for patterns in Ltac?","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/1020132107/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/1020138664","html_url":"https://github.com/coq/coq/issues/15520#issuecomment-1020138664","issue_url":"https://api.github.com/repos/coq/coq/issues/15520","id":1020138664,"node_id":"IC_kwDOABUDh848zhSo","user":{"login":"ppedrot","id":1202327,"node_id":"MDQ6VXNlcjEyMDIzMjc=","avatar_url":"https://avatars.githubusercontent.com/u/1202327?v=4","gravatar_id":"","url":"https://api.github.com/users/ppedrot","html_url":"https://github.com/ppedrot","followers_url":"https://api.github.com/users/ppedrot/followers","following_url":"https://api.github.com/users/ppedrot/following{/other_user}","gists_url":"https://api.github.com/users/ppedrot/gists{/gist_id}","starred_url":"https://api.github.com/users/ppedrot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ppedrot/subscriptions","organizations_url":"https://api.github.com/users/ppedrot/orgs","repos_url":"https://api.github.com/users/ppedrot/repos","events_url":"https://api.github.com/users/ppedrot/events{/privacy}","received_events_url":"https://api.github.com/users/ppedrot/received_events","type":"User","site_admin":false},"created_at":"2022-01-24T14:08:44Z","updated_at":"2022-01-24T14:08:44Z","author_association":"MEMBER","body":"> that is to the question of type-checking a pattern by reusing the typing algorithm for constr?\r\n\r\nWe don't do that, the typing flag is statically set to false in Tacinterp. Currently a pattern is just an untyped AST in which we may replace some variables by `constr` to handle the weird Ltac semantics. I have a very simple patch that enforces this statically, I can unearth it. The replacement of variables is precisely where the `pattern_of_constr` horror happens because we need to cast a `constr` to a `constr_pattern`. My proposal is simply to keep it verbatim, and this way we don't have to fiddle with evars.","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/1020138664/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/1020143350","html_url":"https://github.com/coq/coq/issues/15520#issuecomment-1020143350","issue_url":"https://api.github.com/repos/coq/coq/issues/15520","id":1020143350,"node_id":"IC_kwDOABUDh848zib2","user":{"login":"ppedrot","id":1202327,"node_id":"MDQ6VXNlcjEyMDIzMjc=","avatar_url":"https://avatars.githubusercontent.com/u/1202327?v=4","gravatar_id":"","url":"https://api.github.com/users/ppedrot","html_url":"https://github.com/ppedrot","followers_url":"https://api.github.com/users/ppedrot/followers","following_url":"https://api.github.com/users/ppedrot/following{/other_user}","gists_url":"https://api.github.com/users/ppedrot/gists{/gist_id}","starred_url":"https://api.github.com/users/ppedrot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ppedrot/subscriptions","organizations_url":"https://api.github.com/users/ppedrot/orgs","repos_url":"https://api.github.com/users/ppedrot/repos","events_url":"https://api.github.com/users/ppedrot/events{/privacy}","received_events_url":"https://api.github.com/users/ppedrot/received_events","type":"User","site_admin":false},"created_at":"2022-01-24T14:13:29Z","updated_at":"2022-01-24T14:13:29Z","author_association":"MEMBER","body":"@herbelin see #15536 for the first patch in the (globally broken) series tweaking the semantics of constr inclusion. The key observation is that `instantiate_pattern` only takes a `constr_pattern` + a list of variables to replace with some `constr`.","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/1020143350/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/1020163217","html_url":"https://github.com/coq/coq/issues/15520#issuecomment-1020163217","issue_url":"https://api.github.com/repos/coq/coq/issues/15520","id":1020163217,"node_id":"IC_kwDOABUDh848znSR","user":{"login":"herbelin","id":460771,"node_id":"MDQ6VXNlcjQ2MDc3MQ==","avatar_url":"https://avatars.githubusercontent.com/u/460771?v=4","gravatar_id":"","url":"https://api.github.com/users/herbelin","html_url":"https://github.com/herbelin","followers_url":"https://api.github.com/users/herbelin/followers","following_url":"https://api.github.com/users/herbelin/following{/other_user}","gists_url":"https://api.github.com/users/herbelin/gists{/gist_id}","starred_url":"https://api.github.com/users/herbelin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/herbelin/subscriptions","organizations_url":"https://api.github.com/users/herbelin/orgs","repos_url":"https://api.github.com/users/herbelin/repos","events_url":"https://api.github.com/users/herbelin/events{/privacy}","received_events_url":"https://api.github.com/users/herbelin/received_events","type":"User","site_admin":false},"created_at":"2022-01-24T14:33:26Z","updated_at":"2022-01-24T14:33:26Z","author_association":"MEMBER","body":"You mean that patterns of `match goal` are not type-checked in practice? I believe we would have expected they are. So we can write `Ltac f := match goal with |- 0 0 => idtac end` without failing. Don't we want consider it to be a bug?","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/1020163217/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/1020167516","html_url":"https://github.com/coq/coq/issues/15520#issuecomment-1020167516","issue_url":"https://api.github.com/repos/coq/coq/issues/15520","id":1020167516,"node_id":"IC_kwDOABUDh848zoVc","user":{"login":"ppedrot","id":1202327,"node_id":"MDQ6VXNlcjEyMDIzMjc=","avatar_url":"https://avatars.githubusercontent.com/u/1202327?v=4","gravatar_id":"","url":"https://api.github.com/users/ppedrot","html_url":"https://github.com/ppedrot","followers_url":"https://api.github.com/users/ppedrot/followers","following_url":"https://api.github.com/users/ppedrot/following{/other_user}","gists_url":"https://api.github.com/users/ppedrot/gists{/gist_id}","starred_url":"https://api.github.com/users/ppedrot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ppedrot/subscriptions","organizations_url":"https://api.github.com/users/ppedrot/orgs","repos_url":"https://api.github.com/users/ppedrot/repos","events_url":"https://api.github.com/users/ppedrot/events{/privacy}","received_events_url":"https://api.github.com/users/ppedrot/received_events","type":"User","site_admin":false},"created_at":"2022-01-24T14:37:56Z","updated_at":"2022-01-24T14:37:56Z","author_association":"MEMBER","body":"> Don't we want consider it to be a bug?\r\n\r\nNobody seems to have been complaining loudly so far, so probably not. It keeps the nice invariant that patterns are just that, i.e. syntactic objects.","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/1020167516/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/1020188843","html_url":"https://github.com/coq/coq/issues/15520#issuecomment-1020188843","issue_url":"https://api.github.com/repos/coq/coq/issues/15520","id":1020188843,"node_id":"IC_kwDOABUDh848ztir","user":{"login":"herbelin","id":460771,"node_id":"MDQ6VXNlcjQ2MDc3MQ==","avatar_url":"https://avatars.githubusercontent.com/u/460771?v=4","gravatar_id":"","url":"https://api.github.com/users/herbelin","html_url":"https://github.com/herbelin","followers_url":"https://api.github.com/users/herbelin/followers","following_url":"https://api.github.com/users/herbelin/following{/other_user}","gists_url":"https://api.github.com/users/herbelin/gists{/gist_id}","starred_url":"https://api.github.com/users/herbelin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/herbelin/subscriptions","organizations_url":"https://api.github.com/users/herbelin/orgs","repos_url":"https://api.github.com/users/herbelin/repos","events_url":"https://api.github.com/users/herbelin/events{/privacy}","received_events_url":"https://api.github.com/users/herbelin/received_events","type":"User","site_admin":false},"created_at":"2022-01-24T14:58:57Z","updated_at":"2022-01-24T14:58:57Z","author_association":"MEMBER","body":"Whatever choice you're doing is ok for me. The `pattern_of_constr` thing was anyway not primarily for converting a constr to a pattern per se but for typing patterns (as e.g. `change` does) and there was then no other choice than transiting via a constr.\r\n\r\nWith respect to the current issue, I believe that keeping a \"term\" node in patterns to host the `n` open_constr would solve the problem.","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/1020188843/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/1020256935","html_url":"https://github.com/coq/coq/issues/15520#issuecomment-1020256935","issue_url":"https://api.github.com/repos/coq/coq/issues/15520","id":1020256935,"node_id":"IC_kwDOABUDh848z-Kn","user":{"login":"JasonGross","id":396076,"node_id":"MDQ6VXNlcjM5NjA3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/396076?v=4","gravatar_id":"","url":"https://api.github.com/users/JasonGross","html_url":"https://github.com/JasonGross","followers_url":"https://api.github.com/users/JasonGross/followers","following_url":"https://api.github.com/users/JasonGross/following{/other_user}","gists_url":"https://api.github.com/users/JasonGross/gists{/gist_id}","starred_url":"https://api.github.com/users/JasonGross/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JasonGross/subscriptions","organizations_url":"https://api.github.com/users/JasonGross/orgs","repos_url":"https://api.github.com/users/JasonGross/repos","events_url":"https://api.github.com/users/JasonGross/events{/privacy}","received_events_url":"https://api.github.com/users/JasonGross/received_events","type":"User","site_admin":false},"created_at":"2022-01-24T16:02:02Z","updated_at":"2022-01-24T16:02:02Z","author_association":"MEMBER","body":"> we need to cast a `constr` to a `constr_pattern`. My proposal is simply to keep it verbatim, and this way we don't have to fiddle with evars.\r\n\r\nI think I agree with this proposal, but to make sure we're on the same page, I think the following should be possible:\r\n- inject a constr into a constr_pattern, verbatim (should also be exposed in Ltac2)\r\n- inject a uconstr into a constr_pattern, turning holes into unnamed matching variables (this should be what happens when notations are used in constr_patterns)\r\n- binding a constr_pattern to an Ltac variable via `constr_pattern:(...)`\r\n- interpreting an expression as a constr_pattern when it contains both constr and constr_pattern subterms, so that users can manipulate constr_patterns somewhat programmatically\r\n- inspection and building of constr_pattern in Ltac2 a la Constr.Unsafe.kind\r\n\r\nIs this feasible and in alignment with your plans?","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/1020256935/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]