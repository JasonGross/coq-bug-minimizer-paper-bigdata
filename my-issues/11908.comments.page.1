[{"url":"https://api.github.com/repos/coq/coq/issues/comments/604068301","html_url":"https://github.com/coq/coq/issues/11908#issuecomment-604068301","issue_url":"https://api.github.com/repos/coq/coq/issues/11908","id":604068301,"node_id":"MDEyOklzc3VlQ29tbWVudDYwNDA2ODMwMQ==","user":{"login":"herbelin","id":460771,"node_id":"MDQ6VXNlcjQ2MDc3MQ==","avatar_url":"https://avatars.githubusercontent.com/u/460771?v=4","gravatar_id":"","url":"https://api.github.com/users/herbelin","html_url":"https://github.com/herbelin","followers_url":"https://api.github.com/users/herbelin/followers","following_url":"https://api.github.com/users/herbelin/following{/other_user}","gists_url":"https://api.github.com/users/herbelin/gists{/gist_id}","starred_url":"https://api.github.com/users/herbelin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/herbelin/subscriptions","organizations_url":"https://api.github.com/users/herbelin/orgs","repos_url":"https://api.github.com/users/herbelin/repos","events_url":"https://api.github.com/users/herbelin/events{/privacy}","received_events_url":"https://api.github.com/users/herbelin/received_events","type":"User","site_admin":false},"created_at":"2020-03-25T20:26:21Z","updated_at":"2020-03-25T20:26:21Z","author_association":"MEMBER","body":"I believe there are indeed different possible answers:\r\n- Local solutions: \r\n  - Moving the notations of `Int63` to their own module would be the cheapest/simplest solution.\r\n  - Renaming `land` into `&&` in the sense that it generalize the Boolean and to vectors.\r\n- A global approach: Avoiding identifiers as infix is a bit constraining (other examples are `o` or `U` which somehow we may want for notations) but we may adopt a convention than such symbols are always surround e.g. by brackets, or whatever, as in `[o]` or `[land]`. I'm afraid that this is a bit late to set such policy though.\r\n- A parser approach: if we accept the restriction that infix symbols have arguments at level less than 10, or even 0 (which is not absurd, because parsing something like `f arga land g argb` is a bit difficult, even for a human), we could implement a special treatment for infix symbols which are identifiers, parsing them as a regular application `t land u` (roughly `CApp(t,[land;u])` and post-processing them into a notation (i.e. `CNotation(\"_ land _\",t,u)`). Maybe a bit too ad hoc.\r\n- A \"rich\" parser approach: if we want `land` to be a keyword, we may expect, in a user interface, to manually annotate it with a color, and to have the parser recognize the annotation. After all, we already have highlighting to distinguish keywords, why not to give the user the ability to pre-indicate that some identifier is a keyword. Maybe a bit futuristic, but seems an interesting direction to go.","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/604068301/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]