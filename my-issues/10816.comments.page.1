[{"url":"https://api.github.com/repos/coq/coq/issues/comments/549909611","html_url":"https://github.com/coq/coq/issues/10816#issuecomment-549909611","issue_url":"https://api.github.com/repos/coq/coq/issues/10816","id":549909611,"node_id":"MDEyOklzc3VlQ29tbWVudDU0OTkwOTYxMQ==","user":{"login":"yforster","id":4191846,"node_id":"MDQ6VXNlcjQxOTE4NDY=","avatar_url":"https://avatars.githubusercontent.com/u/4191846?v=4","gravatar_id":"","url":"https://api.github.com/users/yforster","html_url":"https://github.com/yforster","followers_url":"https://api.github.com/users/yforster/followers","following_url":"https://api.github.com/users/yforster/following{/other_user}","gists_url":"https://api.github.com/users/yforster/gists{/gist_id}","starred_url":"https://api.github.com/users/yforster/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/yforster/subscriptions","organizations_url":"https://api.github.com/users/yforster/orgs","repos_url":"https://api.github.com/users/yforster/repos","events_url":"https://api.github.com/users/yforster/events{/privacy}","received_events_url":"https://api.github.com/users/yforster/received_events","type":"User","site_admin":false},"created_at":"2019-11-05T16:52:23Z","updated_at":"2019-11-05T16:52:23Z","author_association":"CONTRIBUTOR","body":"I think this is a bug of `Scheme Case` and `Scheme Elimination`. They should be the non-recursive equivalents for `Scheme Minimality` and `Scheme Induction`, but unfortunately they are the respective equivalents.\r\n\r\nI think `Scheme nat_caset := Elimination for nat Sort Type.` should yield\r\n\r\n```\r\nnat_caset : forall P : nat -> Type, P 0 -> (forall n : nat,  P (S n)) -> forall n : nat, P n\r\n```\r\nbut what you get is\r\n```\r\nnat_caset : forall P : nat -> Type, P 0 -> (forall n : nat, (* wrong *) P n (* end wrong *)-> P (S n)) -> forall n : nat, P n\r\n```\r\nThe bug (in case it's a bug) has at least been there since `Coq 8.4.6`.\r\n\r\nCan somebody confirm it's a bug and that this is the morally expected behaviour of `Scheme Elimination`?\r\n\r\n(prompted by [Marcel's question on discourse](https://coq.discourse.group/t/dependent-case-analysis-scheme/491))\r\n\r\n\r\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/549909611/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/551152209","html_url":"https://github.com/coq/coq/issues/10816#issuecomment-551152209","issue_url":"https://api.github.com/repos/coq/coq/issues/10816","id":551152209,"node_id":"MDEyOklzc3VlQ29tbWVudDU1MTE1MjIwOQ==","user":{"login":"yforster","id":4191846,"node_id":"MDQ6VXNlcjQxOTE4NDY=","avatar_url":"https://avatars.githubusercontent.com/u/4191846?v=4","gravatar_id":"","url":"https://api.github.com/users/yforster","html_url":"https://github.com/yforster","followers_url":"https://api.github.com/users/yforster/followers","following_url":"https://api.github.com/users/yforster/following{/other_user}","gists_url":"https://api.github.com/users/yforster/gists{/gist_id}","starred_url":"https://api.github.com/users/yforster/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/yforster/subscriptions","organizations_url":"https://api.github.com/users/yforster/orgs","repos_url":"https://api.github.com/users/yforster/repos","events_url":"https://api.github.com/users/yforster/events{/privacy}","received_events_url":"https://api.github.com/users/yforster/received_events","type":"User","site_admin":false},"created_at":"2019-11-07T16:19:24Z","updated_at":"2019-11-07T16:19:24Z","author_association":"CONTRIBUTOR","body":"I think the reason is that lines 331 and 332 in [indschemes.ml](https://github.com/coq/coq/blob/7153cc3a4d886944f9e09a10ea106cefb1e9d0f8/vernac/indschemes.ml#L331) are exactly the same, so `CaseScheme` and `IndScheme` are never distinguished in the code and the `Scheme` command does not actually use the `build_case_analysis_scheme` function in `indrec.ml`, but rather always `build_mutual_induction_scheme`.\r\n\r\nI have hacked a fix here: https://github.com/yforster/coq/commit/1e8d2545f8fd35cb8a24ddf2d03886a1a9fc3efd\r\n\r\nThat's in no way good enough, but maybe it can serve as template for a developer to fix it for `8.10.2` or `8.11`?\r\n ","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/551152209/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]