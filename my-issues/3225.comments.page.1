[{"url":"https://api.github.com/repos/coq/coq/issues/comments/337517636","html_url":"https://github.com/coq/coq/issues/3225#issuecomment-337517636","issue_url":"https://api.github.com/repos/coq/coq/issues/3225","id":337517636,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxNzYzNg==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-02-02T14:52:24Z","updated_at":"2019-04-29T12:24:11Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\r\n\r\nThe following is a list of tactics printed by [Print Grammar tactic] which don't show up in http://coq.inria.fr/refman/tactic-index.html nor under Ltac in http://coq.inria.fr/refman/general-index.html:\r\n````\r\nipattern (IDENT \"ipattern\"; \":\"; tactic:simple_intropattern)\r\nposeq (IDENT \"poseq\"; prim:ident; constr:constr)\r\nfauto (IDENT \"fauto\"; tactic:tactic | IDENT \"fauto\")\r\nfinduction (IDENT \"finduction\"; prim:ident; OPT prim:natural)\r\nsoft functional induction (IDENT \"soft\"; IDENT \"functional\"; IDENT \"induction\"; LIST1 constr:constr; tactic:fun_ind_using; tactic:with_names)\r\nfunctional inversion (IDENT \"functional\"; IDENT \"inversion\"; tactic:quantified_hypothesis; OPT prim:reference)\r\ngintuition (IDENT \"gintuition\"; OPT tactic:tactic)\r\nnow (IDENT \"now\"; tactic:tactic)\r\nrewrite_all (IDENT \"rewrite_all\"; \"<-\"; constr:constr | IDENT \"rewrite_all\"; constr:constr)\r\ndecide (IDENT \"decide\"; constr:constr; \"with\"; constr:constr)\r\nmyapply (IDENT \"myapply\"; constr:global; LIST0 constr:constr)\r\nfold_matches (IDENT \"fold_matches\"; constr:constr)\r\nfold_match (IDENT \"fold_match\"; constr:constr)\r\nimplify (IDENT \"implify\"; prim:var)\r\nsetoid_etransitivity (IDENT \"setoid_etransitivity\")\r\nrew (IDENT \"rew\"; tactic:orient; tactic:glob_constr_with_bindings; \"in\"; prim:var; \"at\"; tactic:occurrences | IDENT \"rew\"; tactic:orient; tactic:glob_constr_with_bindings; \"in\"; prim:var | IDENT \"rew\"; tactic:orient; tactic:glob_constr_with_bindings; \"at\"; tactic:occurrences; \"in\"; prim:var | IDENT \"rew\"; tactic:orient; tactic:glob_constr_with_bindings; \"at\"; tactic:occurrences | IDENT \"rew\"; tactic:orient; tactic:glob_constr_with_bindings)\r\nsubstitute (IDENT \"substitute\"; tactic:orient; tactic:glob_constr_with_bindings)\r\nrewrite_strat (IDENT \"rewrite_strat\"; tactic:rewstrategy; \"in\"; prim:var | IDENT \"rewrite_strat\"; tactic:rewstrategy)\r\nrewrite_db (IDENT \"rewrite_db\"; prim:preident; \"in\"; prim:var | IDENT \"rewrite_db\"; prim:preident)\r\nautoapply (IDENT \"autoapply\"; constr:constr; \"using\"; prim:preident)\r\nis_ground (IDENT \"is_ground\"; constr:constr)\r\nnot_evar (IDENT \"not_evar\"; constr:constr)\r\nhead_of_constr (IDENT \"head_of_constr\"; prim:ident; constr:constr)\r\ntypeclasses eauto (IDENT \"typeclasses\"; IDENT \"eauto\"; \"with\"; LIST1 prim:preident | IDENT \"typeclasses\"; IDENT \"eauto\")\r\nprogress_evars (IDENT \"progress_evars\"; tactic:tactic)\r\nconvert_concl_no_check (IDENT \"convert_concl_no_check\"; constr:constr)\r\nautounfoldify (IDENT \"autounfoldify\"; constr:constr)\r\nautounfold_one (IDENT \"autounfold_one\"; tactic:hintbases; \"in\"; prim:var | IDENT \"autounfold_one\"; tactic:hintbases)\r\ndfs eauto (IDENT \"dfs\"; IDENT \"eauto\"; OPT tactic:int_or_var; tactic:auto_using; tactic:hintbases)\r\nnew auto (IDENT \"new\"; IDENT \"auto\"; OPT tactic:int_or_var; tactic:auto_using; tactic:hintbases)\r\nprolog (IDENT \"prolog\"; \"[\"; LIST0 tactic:open_constr; \"]\"; tactic:int_or_var)\r\nis_fix (IDENT \"is_fix\"; constr:constr)\r\ndestauto (IDENT \"destauto\"; \"in\"; prim:var | IDENT \"destauto\")\r\nhget_evar (IDENT \"hget_evar\"; tactic:int_or_var)\r\nhresolve_core (IDENT \"hresolve_core\"; \"(\"; prim:ident; \":=\"; constr:constr; \")\"; \"at\"; tactic:int_or_var; \"in\"; constr:constr | IDENT \"hresolve_core\"; \"(\"; prim:ident; \":=\"; constr:constr; \")\"; \"in\"; constr:constr)\r\nspecialize_eqs (IDENT \"specialize_eqs\"; prim:var)\r\ngeneralize_eqs_vars (IDENT \"generalize_eqs_vars\"; prim:var)\r\ngeneralize_eqs (IDENT \"generalize_eqs\"; prim:var)\r\nstepr (IDENT \"stepr\"; constr:constr; \"by\"; tactic:tactic | IDENT \"stepr\"; constr:constr)\r\nstepl (IDENT \"stepl\"; constr:constr; \"by\"; tactic:tactic | IDENT \"stepl\"; constr:constr)\r\nautorewrite * with (IDENT \"autorewrite\"; \"*\"; \"with\"; LIST1 prim:preident; tactic:in_arg_hyp; \"using\"; tactic:tactic | IDENT \"autorewrite\"; \"*\"; \"with\"; LIST1 prim:preident; tactic:in_arg_hyp)\r\nexact_no_check (IDENT \"exact_no_check\"; constr:constr)\r\nvm_cast_no_check (IDENT \"vm_cast_no_check\"; constr:constr)\r\napply <- (IDENT \"apply\"; \"<-\"; constr:constr; \"in\"; prim:var | IDENT \"apply\"; \"<-\"; constr:constr)\r\napply -> (IDENT \"apply\"; \"->\"; constr:constr; \"in\"; prim:var | IDENT \"apply\"; \"->\"; constr:constr)\r\ncasetype (IDENT \"casetype\"; constr:constr)\r\ndebug eauto (IDENT \"debug\"; IDENT \"eauto\"; OPT tactic:int_or_var; OPT tactic:int_or_var; tactic:auto_using; tactic:hintbases)\r\ndebug trivial (IDENT \"debug\"; IDENT \"trivial\"; auto_using; hintbases)\r\ndebug auto (IDENT \"debug\"; IDENT \"auto\"; OPT tactic:int_or_var; auto_using; hintbases)\r\nrewrite * (IDENT \"rewrite\"; \"*\"; tactic:orient; tactic:open_constr; \"in\"; prim:var; \"at\"; tactic:occurrences; tactic:by_arg_tac | IDENT \"rewrite\"; \"*\"; tactic:orient; tactic:open_constr; \"in\"; prim:var; tactic:by_arg_tac | IDENT \"rewrite\"; \"*\"; tactic:orient; tactic:open_constr; \"at\"; tactic:occurrences; \"in\"; prim:var; tactic:by_arg_tac | IDENT \"rewrite\"; \"*\"; tactic:orient; tactic:open_constr; \"at\"; tactic:occurrences; tactic:by_arg_tac | IDENT \"rewrite\"; \"*\"; tactic:orient; tactic:open_constr; tactic:by_arg_tac)\r\nsimple subst (IDENT \"simple\"; IDENT \"subst\")\r\n```","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337517636/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337517639","html_url":"https://github.com/coq/coq/issues/3225#issuecomment-337517639","issue_url":"https://api.github.com/repos/coq/coq/issues/3225","id":337517639,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxNzYzOQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-04-04T20:17:09Z","updated_at":"2017-10-18T09:13:04Z","author_association":"CONTRIBUTOR","body":"Comment author: @forestjulien\n\nfunctional induction is now refenced in the manual (v8.4 and trunk).\nConcerning soft functional induction, this tactic is only for debuging purposes and won't be documented.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337517639/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337517641","html_url":"https://github.com/coq/coq/issues/3225#issuecomment-337517641","issue_url":"https://api.github.com/repos/coq/coq/issues/3225","id":337517641,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxNzY0MQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-04-04T22:02:04Z","updated_at":"2017-10-18T09:13:04Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nAnother undocumented tactic (https://coq.inria.fr/bugs/show_bug.cgi?id=3268) breadth-first search for eauto - \"use eauto <non_important_integer> <max_depth> .... to use  bfs instead of dfs.\"\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337517641/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337517643","html_url":"https://github.com/coq/coq/issues/3225#issuecomment-337517643","issue_url":"https://api.github.com/repos/coq/coq/issues/3225","id":337517643,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxNzY0Mw==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2015-02-26T06:06:52Z","updated_at":"2017-10-18T09:13:04Z","author_association":"CONTRIBUTOR","body":"Comment author: @cpitclaudel\n\nThe prolog tactic is actually commented out in the documentation, so that one should be an easy fix :) It's at the begining of Automatizing in `RefMan-tac.tex`\n\n% EXISTE ENCORE ?\n%\n% \\subsection{\\tt Prolog [ \\term$_1$ \\dots\\ \\term$_n$ ] \\num}\n% \\tacindex{Prolog}\\label{Prolog}\n% This tactic, implemented by Chet Murthy, is based upon the concept of\n% existential variables of Gilles Dowek, stating that resolution is a\n% kind of unification. It tries to solve the current goal using the {\\tt\n%   Assumption} tactic, the {\\tt intro} tactic, and applying hypotheses\n% of the local context and terms of the given list {\\tt [ \\term$_1$\n%   \\dots\\ \\term$_n$\\ ]}.  It is more powerful than {\\tt auto} since it\n% may apply to any theorem, even those of the form {\\tt (x:A)(P x) -> Q}\n% where {\\tt x} does not appear free in {\\tt Q}.  The maximal search\n% depth is {\\tt \\num}.\n\n% \\begin{ErrMsgs}\n% \\item \\errindex{Prolog failed}\\\\\n%   The Prolog tactic was not able to prove the subgoal.\n% \\end{ErrMsgs} \n\n\nIt does seem to still exist, only in lower case:\n\nCoq < Lemma test: forall P Q, P -> (P -> Q) -> Q.\n1 subgoal\n  \n  ============================\n   forall P Q : Type, P -> (P -> Q) -> Q\n\ntest < prolog [] 6.\nNo more subgoals.\n\ntest < Qed.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337517643/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337517648","html_url":"https://github.com/coq/coq/issues/3225#issuecomment-337517648","issue_url":"https://api.github.com/repos/coq/coq/issues/3225","id":337517648,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxNzY0OA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2015-10-19T11:05:32Z","updated_at":"2017-10-18T09:13:05Z","author_association":"CONTRIBUTOR","body":"Comment author: @Matafou\n\nRemoved poseq fauto and finduction.\nMay be it is time to re-check undocumented tactics.\n\nBy the way how did you check?\n\nP.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337517648/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337517650","html_url":"https://github.com/coq/coq/issues/3225#issuecomment-337517650","issue_url":"https://api.github.com/repos/coq/coq/issues/3225","id":337517650,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxNzY1MA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2015-10-19T14:54:17Z","updated_at":"2017-10-18T09:13:05Z","author_association":"CONTRIBUTOR","body":"Comment author: @cpitclaudel\n\nPierre: Not sure if you meant to ask Jason or me :) I used a small script that I wrote for that, here: https://github.com/cpitclaudel/company-coq/blob/master/find-missing-tactics.py\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337517650/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337517652","html_url":"https://github.com/coq/coq/issues/3225#issuecomment-337517652","issue_url":"https://api.github.com/repos/coq/coq/issues/3225","id":337517652,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxNzY1Mg==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-02-02T23:14:47Z","updated_at":"2017-10-18T09:13:05Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nTactics which don't seem to be documented in 8.5:\n\nautoapply\nautounfold_one\ndebug auto\ndebug eauto\ndebug trivial\ndependent generalize_eqs\ndependent generalize_eqs_vars\ndestauto\ndestruct_with_eqn\ndfs eauto\ngeneralize_eqs\ngeneralize_eqs_vars\ngintuition\ngoal\nguard\nhead_of_constr\nhget_evar\nhresolve_core\ninfo\ninfo_auto\ninfo_eauto\ninfoH\ninfo_trivial\nnew auto\nnow\nprogress_evars\nprolog\nrec\nreverse goal\nrewrite_all\nrewrite_db\nsetoid_etransitivity\nsimple subst\nsoft functional induction\nspecialize_eqs\nsubstitute\ntypeclasses eauto\nunshelve\n\nGenerated via\n  echo \"Print Grammar tactic.\" | ~/.local64/coq/coq-8.5/bin/coqtop | grep -o 'IDENT \".*' | sed s'/\"; IDENT \"/ /g' | sed s'/^IDENT \"//g' | grep -o '^[^\"]*' | sort | uniq > /tmp/tactics\nand setting the variable x in a python shell to the string literal contents of https://coq.inria.fr/refman/tactic-index.html, and then running\n  doc=[i[:i.index(',')] for i in x.split('\\n') if ',' in i]\n  exist = open('/tmp/tactics', 'r').read()\n  print('\\n'.join([i for i in exist.split('\\n') if i not in doc and not any(j[:len(i)] == i for j in doc)]))\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337517652/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337517653","html_url":"https://github.com/coq/coq/issues/3225#issuecomment-337517653","issue_url":"https://api.github.com/repos/coq/coq/issues/3225","id":337517653,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxNzY1Mw==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2017-08-04T22:43:53Z","updated_at":"2017-10-18T09:13:05Z","author_association":"CONTRIBUTOR","body":"Comment author: @Zimmi48\n\nThanks for the script Jason.\nHere's a (partially curated) list for 8.6:\n\nautounfold_one\ndependent generalize_eqs\ndependent generalize_eqs_vars\ndestauto\ndestruct_with_eqn\neintros\ngeneralize_eqs\ngeneralize_eqs_vars\ngintuition\nhead_of_constr\nhget_evar\ninfoH\nnow\nprogress_evars\nrewrite_all\nrewrite_db\nsetoid_etransitivity\nsimple injection\nsimple subst\nsoft functional induction\nspecialize_eqs\nsubstitute\nunshelve\n\nSome are documented but do not appear in the tactic index:\n\ndebug auto\ndebug eauto\ndebug trivial\ninfo_auto\ninfo_eauto\ninfo_trivial\ntypeclasses eauto bfs\n\nSome which are not documented because they are probably doomed:\n\ndfs eauto\ninfo\nnew auto\nprolog\n\nBut even in the first list above, the status of many of these is probably unclear. So rather than documenting all of them, the removal of some of them could be discussed instead.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337517653/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/415186447","html_url":"https://github.com/coq/coq/issues/3225#issuecomment-415186447","issue_url":"https://api.github.com/repos/coq/coq/issues/3225","id":415186447,"node_id":"MDEyOklzc3VlQ29tbWVudDQxNTE4NjQ0Nw==","user":{"login":"samuelgruetter","id":2394355,"node_id":"MDQ6VXNlcjIzOTQzNTU=","avatar_url":"https://avatars.githubusercontent.com/u/2394355?v=4","gravatar_id":"","url":"https://api.github.com/users/samuelgruetter","html_url":"https://github.com/samuelgruetter","followers_url":"https://api.github.com/users/samuelgruetter/followers","following_url":"https://api.github.com/users/samuelgruetter/following{/other_user}","gists_url":"https://api.github.com/users/samuelgruetter/gists{/gist_id}","starred_url":"https://api.github.com/users/samuelgruetter/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/samuelgruetter/subscriptions","organizations_url":"https://api.github.com/users/samuelgruetter/orgs","repos_url":"https://api.github.com/users/samuelgruetter/repos","events_url":"https://api.github.com/users/samuelgruetter/events{/privacy}","received_events_url":"https://api.github.com/users/samuelgruetter/received_events","type":"User","site_admin":false},"created_at":"2018-08-22T21:27:11Z","updated_at":"2018-08-22T21:27:11Z","author_association":"CONTRIBUTOR","body":"It would be nice if these tactics were documented.\r\nFor instance, today I wanted to look up the documentation for (lowercase) `unshelve`, but couldnt' find anything.","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/415186447/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]