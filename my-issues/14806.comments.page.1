[{"url":"https://api.github.com/repos/coq/coq/issues/comments/904963350","html_url":"https://github.com/coq/coq/issues/14806#issuecomment-904963350","issue_url":"https://api.github.com/repos/coq/coq/issues/14806","id":904963350,"node_id":"IC_kwDOABUDh8418KUW","user":{"login":"JasonGross","id":396076,"node_id":"MDQ6VXNlcjM5NjA3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/396076?v=4","gravatar_id":"","url":"https://api.github.com/users/JasonGross","html_url":"https://github.com/JasonGross","followers_url":"https://api.github.com/users/JasonGross/followers","following_url":"https://api.github.com/users/JasonGross/following{/other_user}","gists_url":"https://api.github.com/users/JasonGross/gists{/gist_id}","starred_url":"https://api.github.com/users/JasonGross/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JasonGross/subscriptions","organizations_url":"https://api.github.com/users/JasonGross/orgs","repos_url":"https://api.github.com/users/JasonGross/repos","events_url":"https://api.github.com/users/JasonGross/events{/privacy}","received_events_url":"https://api.github.com/users/JasonGross/received_events","type":"User","site_admin":false},"created_at":"2021-08-24T20:48:09Z","updated_at":"2021-08-24T20:48:09Z","author_association":"MEMBER","body":"cc @coq/extensible-syntax-maintainers","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/904963350/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/905249728","html_url":"https://github.com/coq/coq/issues/14806#issuecomment-905249728","issue_url":"https://api.github.com/repos/coq/coq/issues/14806","id":905249728,"node_id":"IC_kwDOABUDh8419QPA","user":{"login":"proux01","id":15833376,"node_id":"MDQ6VXNlcjE1ODMzMzc2","avatar_url":"https://avatars.githubusercontent.com/u/15833376?v=4","gravatar_id":"","url":"https://api.github.com/users/proux01","html_url":"https://github.com/proux01","followers_url":"https://api.github.com/users/proux01/followers","following_url":"https://api.github.com/users/proux01/following{/other_user}","gists_url":"https://api.github.com/users/proux01/gists{/gist_id}","starred_url":"https://api.github.com/users/proux01/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/proux01/subscriptions","organizations_url":"https://api.github.com/users/proux01/orgs","repos_url":"https://api.github.com/users/proux01/repos","events_url":"https://api.github.com/users/proux01/events{/privacy}","received_events_url":"https://api.github.com/users/proux01/received_events","type":"User","site_admin":false},"created_at":"2021-08-25T07:22:17Z","updated_at":"2021-08-25T07:22:17Z","author_association":"CONTRIBUTOR","body":"> I might take a look at this if I get a chance, but I imagine it's just that we need to add an extra case for app nodes somewhere in the conversion.\r\n\r\nFeel free to (I'll review your PR). But if I were to fix this myself, I'd probably just improve the error message, considering how easy it is to workaround.","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/905249728/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/905457939","html_url":"https://github.com/coq/coq/issues/14806#issuecomment-905457939","issue_url":"https://api.github.com/repos/coq/coq/issues/14806","id":905457939,"node_id":"IC_kwDOABUDh841-DET","user":{"login":"andrew-appel","id":9196811,"node_id":"MDQ6VXNlcjkxOTY4MTE=","avatar_url":"https://avatars.githubusercontent.com/u/9196811?v=4","gravatar_id":"","url":"https://api.github.com/users/andrew-appel","html_url":"https://github.com/andrew-appel","followers_url":"https://api.github.com/users/andrew-appel/followers","following_url":"https://api.github.com/users/andrew-appel/following{/other_user}","gists_url":"https://api.github.com/users/andrew-appel/gists{/gist_id}","starred_url":"https://api.github.com/users/andrew-appel/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/andrew-appel/subscriptions","organizations_url":"https://api.github.com/users/andrew-appel/orgs","repos_url":"https://api.github.com/users/andrew-appel/repos","events_url":"https://api.github.com/users/andrew-appel/events{/privacy}","received_events_url":"https://api.github.com/users/andrew-appel/received_events","type":"User","site_admin":false},"created_at":"2021-08-25T12:28:30Z","updated_at":"2021-08-25T12:28:30Z","author_association":"NONE","body":"\"Improving\" the error message by advising the use of a horrible work-around is not very nice.  But really, why does Number Notation require that the first qualid be a designator of an Inductive type?  Why can't it just be a Definition?  That's really what I want in some cases.  The use of an abbreviation (as suggested in the reference manual) is just another work-around.","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/905457939/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/905830852","html_url":"https://github.com/coq/coq/issues/14806#issuecomment-905830852","issue_url":"https://api.github.com/repos/coq/coq/issues/14806","id":905830852,"node_id":"IC_kwDOABUDh841_eHE","user":{"login":"andrew-appel","id":9196811,"node_id":"MDQ6VXNlcjkxOTY4MTE=","avatar_url":"https://avatars.githubusercontent.com/u/9196811?v=4","gravatar_id":"","url":"https://api.github.com/users/andrew-appel","html_url":"https://github.com/andrew-appel","followers_url":"https://api.github.com/users/andrew-appel/followers","following_url":"https://api.github.com/users/andrew-appel/following{/other_user}","gists_url":"https://api.github.com/users/andrew-appel/gists{/gist_id}","starred_url":"https://api.github.com/users/andrew-appel/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/andrew-appel/subscriptions","organizations_url":"https://api.github.com/users/andrew-appel/orgs","repos_url":"https://api.github.com/users/andrew-appel/repos","events_url":"https://api.github.com/users/andrew-appel/events{/privacy}","received_events_url":"https://api.github.com/users/andrew-appel/received_events","type":"User","site_admin":false},"created_at":"2021-08-25T19:57:43Z","updated_at":"2021-08-25T19:57:58Z","author_association":"NONE","body":"I believe that the workaround suggested by @JasonGross is effective only for parsing, not for printing.  Recall that the workaround is \"make a Definition for the parameters (such as sum nat nat) and use that instead in the notation.\"  But when the pretty-printer encounters actual values, the types of those values will have had that Definition expanded (back into [sum nat nat]) and the pretty-printer will not invoke the Number Notation on such values.\r\n\r\nSo it really seems necessary to handle the nested app nodes correctly.  By the way, the true use-case is not (aa), it's  (binary_float 24 128), where the nested app constructors are inside the integer constants 24 and 128.","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/905830852/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/905839751","html_url":"https://github.com/coq/coq/issues/14806#issuecomment-905839751","issue_url":"https://api.github.com/repos/coq/coq/issues/14806","id":905839751,"node_id":"IC_kwDOABUDh841_gSH","user":{"login":"JasonGross","id":396076,"node_id":"MDQ6VXNlcjM5NjA3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/396076?v=4","gravatar_id":"","url":"https://api.github.com/users/JasonGross","html_url":"https://github.com/JasonGross","followers_url":"https://api.github.com/users/JasonGross/followers","following_url":"https://api.github.com/users/JasonGross/following{/other_user}","gists_url":"https://api.github.com/users/JasonGross/gists{/gist_id}","starred_url":"https://api.github.com/users/JasonGross/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JasonGross/subscriptions","organizations_url":"https://api.github.com/users/JasonGross/orgs","repos_url":"https://api.github.com/users/JasonGross/repos","events_url":"https://api.github.com/users/JasonGross/events{/privacy}","received_events_url":"https://api.github.com/users/JasonGross/received_events","type":"User","site_admin":false},"created_at":"2021-08-25T20:10:55Z","updated_at":"2021-08-25T20:10:55Z","author_association":"MEMBER","body":"> But when the pretty-printer encounters actual values, the types of those values will have had that Definition expanded (back into [sum nat nat]) and the pretty-printer will not invoke the Number Notation on such values.\n\nAre you sure that this is the case?  (I haven't tested it.). IIRC, the inductive is only used to identify which constructors are entry-points into printing, and to type-constrain the parsing and printing functions, and so the syntactic form of the parameters should not matter.","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/905839751/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/905843898","html_url":"https://github.com/coq/coq/issues/14806#issuecomment-905843898","issue_url":"https://api.github.com/repos/coq/coq/issues/14806","id":905843898,"node_id":"IC_kwDOABUDh841_hS6","user":{"login":"andrew-appel","id":9196811,"node_id":"MDQ6VXNlcjkxOTY4MTE=","avatar_url":"https://avatars.githubusercontent.com/u/9196811?v=4","gravatar_id":"","url":"https://api.github.com/users/andrew-appel","html_url":"https://github.com/andrew-appel","followers_url":"https://api.github.com/users/andrew-appel/followers","following_url":"https://api.github.com/users/andrew-appel/following{/other_user}","gists_url":"https://api.github.com/users/andrew-appel/gists{/gist_id}","starred_url":"https://api.github.com/users/andrew-appel/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/andrew-appel/subscriptions","organizations_url":"https://api.github.com/users/andrew-appel/orgs","repos_url":"https://api.github.com/users/andrew-appel/repos","events_url":"https://api.github.com/users/andrew-appel/events{/privacy}","received_events_url":"https://api.github.com/users/andrew-appel/received_events","type":"User","site_admin":false},"created_at":"2021-08-25T20:17:11Z","updated_at":"2021-08-25T20:17:11Z","author_association":"NONE","body":"Yes, I'm pretty sure; I've tested it.  Tomorrow I hope to provide a whole working system that illustrates many of these points.","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/905843898/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/906482344","html_url":"https://github.com/coq/coq/issues/14806#issuecomment-906482344","issue_url":"https://api.github.com/repos/coq/coq/issues/14806","id":906482344,"node_id":"IC_kwDOABUDh842B9Ko","user":{"login":"andrew-appel","id":9196811,"node_id":"MDQ6VXNlcjkxOTY4MTE=","avatar_url":"https://avatars.githubusercontent.com/u/9196811?v=4","gravatar_id":"","url":"https://api.github.com/users/andrew-appel","html_url":"https://github.com/andrew-appel","followers_url":"https://api.github.com/users/andrew-appel/followers","following_url":"https://api.github.com/users/andrew-appel/following{/other_user}","gists_url":"https://api.github.com/users/andrew-appel/gists{/gist_id}","starred_url":"https://api.github.com/users/andrew-appel/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/andrew-appel/subscriptions","organizations_url":"https://api.github.com/users/andrew-appel/orgs","repos_url":"https://api.github.com/users/andrew-appel/repos","events_url":"https://api.github.com/users/andrew-appel/events{/privacy}","received_events_url":"https://api.github.com/users/andrew-appel/received_events","type":"User","site_admin":false},"created_at":"2021-08-26T14:51:31Z","updated_at":"2021-08-26T14:51:31Z","author_association":"NONE","body":"Yes, this issue is a serious bug, and no, the workaround suggested in the original issue report is not useful.  The attached file (which works in Coq 8.13.2) explains.  \r\n[float_notations.txt](https://github.com/coq/coq/files/7060536/float_notations.txt)\r\nJust search for 14806 within the text, for explanations.\r\n\r\nI strongly suggest that the bug be fixed, i.e., to permit such things as Z literals as the arguments to parametrized inductive types.","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/906482344/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/908160681","html_url":"https://github.com/coq/coq/issues/14806#issuecomment-908160681","issue_url":"https://api.github.com/repos/coq/coq/issues/14806","id":908160681,"node_id":"IC_kwDOABUDh842IW6p","user":{"login":"proux01","id":15833376,"node_id":"MDQ6VXNlcjE1ODMzMzc2","avatar_url":"https://avatars.githubusercontent.com/u/15833376?v=4","gravatar_id":"","url":"https://api.github.com/users/proux01","html_url":"https://github.com/proux01","followers_url":"https://api.github.com/users/proux01/followers","following_url":"https://api.github.com/users/proux01/following{/other_user}","gists_url":"https://api.github.com/users/proux01/gists{/gist_id}","starred_url":"https://api.github.com/users/proux01/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/proux01/subscriptions","organizations_url":"https://api.github.com/users/proux01/orgs","repos_url":"https://api.github.com/users/proux01/repos","events_url":"https://api.github.com/users/proux01/events{/privacy}","received_events_url":"https://api.github.com/users/proux01/received_events","type":"User","site_admin":false},"created_at":"2021-08-30T08:45:13Z","updated_at":"2021-08-30T08:45:13Z","author_association":"CONTRIBUTOR","body":"Thanks for your work, I acknowledge the bug should actually be fixed and I'm currently working on it.\r\n\r\nNote that it seems that your `rebuild_float` function can be replaced by `erase` that already exists in Flocq.","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/908160681/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]