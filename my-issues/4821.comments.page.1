[{"url":"https://api.github.com/repos/coq/coq/issues/comments/337543596","html_url":"https://github.com/coq/coq/issues/4821#issuecomment-337543596","issue_url":"https://api.github.com/repos/coq/coq/issues/4821","id":337543596,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0MzU5Ng==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-06-14T06:49:13Z","updated_at":"2017-10-18T10:29:25Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nCreated attachment 727\nexample of slow eapply in src/Parsers/Refinement/SharpenedJavaScriptAssignmentExpression.v\n\n[eapply] got significantly slower in Coq 8.5.  See the attached development, which should build in both 8.4 and 8.5 (except the two demo files, src/Parsers/Refinement/SharpenedJavaScriptAssignmentExpression.v and src/Parsers/Refinement/SharpenedJSON.v, which only build part of the way though).  If you want an example that runs in under two hours, look at src/Parsers/Refinement/SharpenedJSON.v (the slow [eapply]s are about 12 s in 8.4, and about 1 minute in 8.5).\n\nWhat's taking so much time here?\n\n> Attached file: [slow_fiat_eapply_example (1).zip](https://coq.inria.fr/bugfiles/attachment.cgi?id=727) (application/x-zip-compressed, 498143 bytes)\n> Description:   example of slow eapply in src/Parsers/Refinement/SharpenedJavaScriptAssignmentExpression.v\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337543596/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337543597","html_url":"https://github.com/coq/coq/issues/4821#issuecomment-337543597","issue_url":"https://api.github.com/repos/coq/coq/issues/4821","id":337543597,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0MzU5Nw==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-06-23T15:55:04Z","updated_at":"2017-10-18T10:29:26Z","author_association":"CONTRIBUTOR","body":"Comment author: @ppedrot\n\nThe problem has been identified and is due to the handling of fixpoint refolding in the Reductionops machine. With a proper patch over 8.5, the apply you describe are actually about four times quicker than in 8.4 (~3s vs. 60s without patch).\n\nWith Matthieu, we're currently discussing the integration of this fix in 8.5, because it is not innocuous. It does change some reductions, even though no contribs were broken. Two tests are broken by the patch. Bug [BZ#3424](https://github.com/coq/coq/issues?q=is%3Aissue%20%22Original%20bug%20ID%3A%20BZ%233424%22) is reactivated, but after closer inspection, we found out that this was not a bug, rather merely an insufficiently specified \"(e)apply\" tactic. A printing test fails because a fixpoint is not refolded by the unification, as expected actually.\n\n(I can provide you with the 4-line patch if you wish to test it on your more involved examples.)\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337543597/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337543601","html_url":"https://github.com/coq/coq/issues/4821#issuecomment-337543601","issue_url":"https://api.github.com/repos/coq/coq/issues/4821","id":337543601,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0MzYwMQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-06-23T17:45:31Z","updated_at":"2017-10-18T10:29:26Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nThanks!  This is actually the full development that I'm working on at the moment: the more involved example is in src/Parsers/Refinement/SharpenedJavaScriptAssignmentExpression.v.  What's the timing of the various [eapply]s in that with this patch?\n\nI'm confused how Bug [BZ#3424](https://github.com/coq/coq/issues?q=is%3Aissue%20%22Original%20bug%20ID%3A%20BZ%233424%22) is an insufficiently specified \"(e)apply\"; can you elaborate?\n\nIs the change strictly more compatible with 8.4, or is there breakage against both 8.4 and 8.5?\n\nNote that the development attached here should also build with trunk, so it might be better to note that this is an incompatibility, specify how to work around it, and only apply it to 8.6.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337543601/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337543602","html_url":"https://github.com/coq/coq/issues/4821#issuecomment-337543602","issue_url":"https://api.github.com/repos/coq/coq/issues/4821","id":337543602,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0MzYwMg==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-06-23T18:04:05Z","updated_at":"2017-10-18T10:29:26Z","author_association":"CONTRIBUTOR","body":"Comment author: @ppedrot\n\n> I'm confused how Bug [BZ#3424](https://github.com/coq/coq/issues?q=is%3Aissue%20%22Original%20bug%20ID%3A%20BZ%233424%22) is an insufficiently specified \"(e)apply\"; can you elaborate?\n\nWell, the question is to decide when apply should decide to instantiate a forall quantification in the type of the lemma you gave to it. The aforementioned bug amounts to the following situation:\n\nH : match tt with tt => forall x : nat, x = x end âŠ¢ forall x : nat, x = x\n\nwhere it applies a iota rule (in bug [BZ#3424](https://github.com/coq/coq/issues?q=is%3Aissue%20%22Original%20bug%20ID%3A%20BZ%233424%22), this is a fixpoint rather than a match, but that is about the same) before looking for the shape of the goal, and thus ends up instantiating x with an evar (and eventually failing). Thus specifying the reduction \"apply\" should perform on the type of its argument changes the above behaviour. It is not currently specified, and turns out to be quite involved.\n\n> Is the change strictly more compatible with 8.4, or is there breakage against both 8.4 and 8.5?\n\nAFAIU, it makes Coq's behaviour closer to 8.4.\n\n> Note that the development attached here should also build with trunk, so it might be better to note that this is an incompatibility, specify how to work around it, and only apply it to 8.6.\n\nWe were thinking about this approach actually.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337543602/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337543605","html_url":"https://github.com/coq/coq/issues/4821#issuecomment-337543605","issue_url":"https://api.github.com/repos/coq/coq/issues/4821","id":337543605,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0MzYwNQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-06-24T21:05:29Z","updated_at":"2017-10-18T10:29:26Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nI still don't understand how bug [BZ#3424](https://github.com/coq/coq/issues?q=is%3Aissue%20%22Original%20bug%20ID%3A%20BZ%233424%22) can be not a bug... can't you just backtrack across the decision about which binders to instantiate with evars, a la `rapply` in the standard library?  Or is discovering how many binders the goal has too expensive or something?\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337543605/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337543607","html_url":"https://github.com/coq/coq/issues/4821#issuecomment-337543607","issue_url":"https://api.github.com/repos/coq/coq/issues/4821","id":337543607,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0MzYwNw==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-06-24T22:44:14Z","updated_at":"2017-10-18T10:29:27Z","author_association":"CONTRIBUTOR","body":"Comment author: @ppedrot\n\n(In reply to Jason Gross from comment [BZ#4](https://github.com/coq/coq/issues?q=is%3Aissue%20%22Original%20bug%20ID%3A%20BZ%234%22))\n> I still don't understand how bug [BZ#3424](https://github.com/coq/coq/issues?q=is%3Aissue%20%22Original%20bug%20ID%3A%20BZ%233424%22) can be not a bug... can't you just\n> backtrack across the decision about which binders to instantiate with evars,\n> a la `rapply` in the standard library?  Or is discovering how many binders\n> the goal has too expensive or something?\n\nI think that it is difficult to change the behaviour of apply without breaking many previous uses, or creating complexity issues. So we have to ponder the tradeoff between fixing the current quite unusual issue and leaving things as is. If only we had a specification of apply...\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337543607/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337543608","html_url":"https://github.com/coq/coq/issues/4821#issuecomment-337543608","issue_url":"https://api.github.com/repos/coq/coq/issues/4821","id":337543608,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0MzYwOA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-06-25T02:17:05Z","updated_at":"2017-10-18T10:29:27Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nIndeed, we are missing a specification of [apply], and I don't have a good idea of what one should be.  However, here is one tactic (let's call it [fast_(e)apply]) which I want:\n  repeat:\n    attempt to do syntactic unification on the type of the hypothesis and the goal: do not do any reduction, ignore failed syntactic equalities when the term under consideration contains evars, and instantiate evars where they show up alone on one side of the unification problem (this should ignore identical subterms by hashconsing, and should be very fast; faster than walking the term to do an occurance check, probably)\n    if the type of the hypothesis has no evars not also in the goal:\n      try (e)exact on the hypothesis (full conversion, but maybe nothing higher-order on remaining evars)\n    else:\n      undo the syntactic unification\n    if there is no exposed binder:\n      fail \"Could not recognize the goal as\" (type of hypothesis)\n    instantiate the first binder with a fresh evar\n\n\nAs I understand it, the above algorithm should be fast (as fast as [exact], potentially).  And in any case where the above algorithm succeeds, I expect [apply] to succeed as well.  (I have similar issues with [rewrite], where the purely syntactic method of filling in evars would succeed, but [rewrite] fails to find the subterm  because it things it needs to do higher order unification when it doesn't, or it things it needs to reason modulo unification when really it just needs to postpone the conversion problem and then later reason modulo evar-free conversion.)\n\nI think this is the basic building block underneath [apply].  The question, in terms of higher-level tactics, is what unfolding do we do when looking for binders, and what unification heuristics we try when attempting to instantiate evars.  I think these should be user-controllable, and we should lets users pick what kind of [apply] they want.  Does this seem like a plausible splitting / plausible spec?\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337543608/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337543611","html_url":"https://github.com/coq/coq/issues/4821#issuecomment-337543611","issue_url":"https://api.github.com/repos/coq/coq/issues/4821","id":337543611,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0MzYxMQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-09-13T16:45:32Z","updated_at":"2017-10-18T10:29:27Z","author_association":"CONTRIBUTOR","body":"Comment author: @ppedrot\n\nFixed by 7a3ef81.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337543611/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]