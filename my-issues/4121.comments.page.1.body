Comment author: @JasonGross

Here is code that works in 8.5beta1, but not current v8.5/trunk.

(* -*- coq-prog-args: ("-emacs" "-nois") -*- *)
(* File reduced by coq-bug-finder from original input, then from 830 lines to 47 lines, then from 25 lines to 11 lines *)
(* coqc version 8.5beta1 (March 2015) compiled on Mar 11 2015 18:51:36 with OCaml 4.01.0
   coqtop version cagnode15:/afs/csail.mit.edu/u/j/jgross/coq-8.5,v8.5 (8dbfee5c5f897af8186cb1bdfb04fd4f88eca677) *)

Set Universe Polymorphism.
Class Contr_internal (A : Type) := BuildContr { center : A }.
Arguments center A {_}.
Class Contr (A : Type) : Type := Contr_is_trunc : Contr_internal A.
Hint Extern 0 => progress change Contr_internal with Contr in * : typeclass_instances.
Definition contr_paths_contr0 {A} `{Contr A} : Contr A := {| center := center A |}.
Instance contr_paths_contr1 {A} `{Contr A} : Contr A := {| center := center A |}.
Check @ contr_paths_contr0@ {i}.
Check @ contr_paths_contr1@ {i}. (* Error: Universe instance should have length 2 *)
(** It should have length 1, just like contr_paths_contr0 *)


Comment author: @JasonGross

Note that if we give the typeclass instances explicitly, the [change] hint is unnecessary, and the bug goes away (regardless of whether the [Hint] is there or not); this works fine:

Set Universe Polymorphism.
Class Contr_internal (A : Type) := BuildContr { center : A }.
Class Contr (A : Type) : Type := Contr_is_trunc : Contr_internal A.
Definition contr_paths_contr0 {A} `{H : Contr A} : Contr A := {| center := @ center A H |}.
Instance contr_paths_contr1 {A} `{H : Contr A} : Contr A := {| center := @ center A H |}.
Check @ contr_paths_contr0@ {i}.
Check @ contr_paths_contr1@ {i}.


Comment author: @JasonGross

Note that using more standard (but circular) hints makes the bug go away too; this works:

Set Universe Polymorphism.
Class Contr_internal (A : Type) := BuildContr { center : A }.
Arguments center A {_}.
Class > Contr (A : Type) : Type := Contr_is_trunc :> Contr_internal A.
Definition contr_paths_contr0 {A} `{H : Contr A} : Contr A := {| center := center A |}.
Instance contr_paths_contr1 {A} `{H : Contr A} : Contr A := {| center := center A |}.
Check @ contr_paths_contr0@ {i}.
Check @ contr_paths_contr1@ {i}. 

So maybe this is somehow related to bug [BZ#4120](https://github.com/coq/coq/issues?q=is%3Aissue%20%22Original%20bug%20ID%3A%20BZ%234120%22)?


Comment author: @JasonGross

This, too, is caused by

commit 2d3916766d3f145643a994aa83174c98394d5baa
Author: Matthieu Sozeau <matthieu.sozeau@ inria.fr>
Date:   Tue Mar 3 21:45:42 2015 +0100

    Fix bug [BZ#3590](https://github.com/coq/coq/issues?q=is%3Aissue%20%22Original%20bug%20ID%3A%20BZ%233590%22), keeping evars that are not turned into named metas by
    pattern_of_constr in an evar_map, as they can appear in the context
    of said named metas, which is used by change. Not sure what to do in
    the PEvar case, which never matches anyway according to Constr_matching.matches.


Comment author: @mattam82

Not exactly related to 4120 but slightly, [change] adds a universe level that's unused, but Instance did not perform restriction as Definition does to get rid of those spurious universes. Fixed in v8.5 branch.


