[{"url":"https://api.github.com/repos/coq/coq/issues/comments/337530104","html_url":"https://github.com/coq/coq/issues/3973#issuecomment-337530104","issue_url":"https://api.github.com/repos/coq/coq/issues/3973","id":337530104,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUzMDEwNA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2015-02-01T05:30:39Z","updated_at":"2017-10-18T09:48:56Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\n(* -*- mode: coq; mode: visual-line -*- *)\nSet Universe Polymorphism.\nSet Primitive Projections.\nClose Scope nat_scope.\n\nRecord prod (A B : Type) := pair { fst : A ; snd : B }.\nArguments pair {A B} _ _.\nArguments fst {A B} _ / .\nArguments snd {A B} _ / .\nNotation \"x * y\" := (prod x y) : type_scope.\nNotation \"( x , y , .. , z )\" := (pair .. (pair x y) .. z) : core_scope.\n\nDefinition Type1 := Eval hnf in let gt := (Set : Type@ {i}) in Type@ {i}.\nDefinition Type2 := Eval hnf in let gt := (Type1 : Type@ {i}) in Type@ {i}.\n\nInductive paths {A : Type} (a : A) : A -> Type :=\n  idpath : paths a a.\nArguments idpath {A a} , [A] a.\nNotation \"x = y\" := (@ paths _ x y) : type_scope.\nDefinition concat {A} {x y z : A} (p : x = y) (q : y = z) : x = z\n  := match p, q with idpath, idpath => idpath end.\n\nDefinition path_prod {A B : Type} (z z' : A * B)\n: (fst z = fst z') -> (snd z = snd z') -> (z = z').\nProof.\n  destruct z, z'; simpl; intros [] []; reflexivity.\nDefined.  \n\nModule Type TypeM.\n  Parameter m : Type2.\nEnd TypeM.\n\nModule ProdM (XM : TypeM) (YM : TypeM) <: TypeM.\n  Definition m := XM.m * YM.m.\nEnd ProdM.\n\nModule Type FunctionM (XM YM : TypeM).\n  Parameter m : XM.m -> YM.m.\nEnd FunctionM.\n\nModule IdmapM (XM : TypeM) <: FunctionM XM XM.\n  Definition m := (fun x => x) : XM.m -> XM.m.\nEnd IdmapM.\n\nModule Type HomotopyM (XM YM : TypeM) (fM gM : FunctionM XM YM).\n  Parameter m : forall x, fM.m x = gM.m x.\nEnd HomotopyM.\n\nModule ComposeM (XM YM ZM : TypeM)\n       (gM : FunctionM YM ZM) (fM : FunctionM XM YM)\n       <: FunctionM XM ZM.\n  Definition m := (fun x => gM.m (fM.m x)).\nEnd ComposeM.\n\nModule Type CorecM (YM ZM : TypeM) (fM : FunctionM YM ZM)\n       (XM : TypeM) (gM : FunctionM XM ZM).\n  Parameter m : XM.m -> YM.m.\n  Parameter m_beta : forall x, fM.m (m x) = gM.m x.\nEnd CorecM.\n\nModule Type CoindpathsM (YM ZM : TypeM) (fM : FunctionM YM ZM)\n       (XM : TypeM) (hM kM : FunctionM XM YM).\n  Module fhM := ComposeM XM YM ZM fM hM.\n  Module fkM := ComposeM XM YM ZM fM kM.\n  Declare Module mM (pM : HomotopyM XM ZM fhM fkM)\n    : HomotopyM XM YM hM kM.\nEnd CoindpathsM.\n\nModule Type Comodality (XM : TypeM).\n  Parameter m : Type2.\n  Module mM <: TypeM.\n    Definition m := m.\n  End mM.\n  Parameter from : m -> XM.m.\n  Module fromM <: FunctionM mM XM.\n    Definition m := from.\n  End fromM.\n  Declare Module corecM : CorecM mM XM fromM.\n  Declare Module coindpathsM : CoindpathsM mM XM fromM.\nEnd Comodality.\n\nModule Comodality_Theory (F : Comodality).\n\n  Module F_functor_M (XM YM : TypeM) (fM : FunctionM XM YM)\n         (FXM : Comodality XM) (FYM : Comodality YM).\n    Module f_o_from_M <: FunctionM FXM.mM YM.\n      Definition m := fun x => fM.m (FXM.from x).\n    End f_o_from_M.\n    Module mM := FYM.corecM FXM.mM f_o_from_M.\n    Definition m := mM.m.\n  End F_functor_M.\n\n  Module F_prod_cmp_M (XM YM : TypeM)\n         (FXM : Comodality XM) (FYM : Comodality YM).\n    Module PM := ProdM XM YM.\n    Module PFM := ProdM FXM FYM.\n    Module fstM <: FunctionM PM XM.\n      Definition m := @ fst XM.m YM.m.\n    End fstM.\n    Module sndM <: FunctionM PM YM.\n      Definition m := @ snd XM.m YM.m.\n    End sndM.\n    Module FPM := F PM.\n    Module FfstM := F_functor_M PM XM fstM FPM FXM.\n    Module FsndM := F_functor_M PM YM sndM FPM FYM.\n    Definition m : FPM.m -> PFM.m\n      := fun z => (FfstM.m z , FsndM.m z).\n  End F_prod_cmp_M.\n\n  Module isequiv_F_prod_cmp_M\n         (XM YM : TypeM)\n         (FXM : Comodality XM) (FYM : Comodality YM).\n    (** The comparison map *)\n    Module cmpM := F_prod_cmp_M XM YM FXM FYM.\n    Module FPM := cmpM.FPM.\n    (** We construct an inverse to it using corecursion. *)\n    Module prod_from_M <: FunctionM cmpM.PFM cmpM.PM.\n      Definition m : cmpM.PFM.m -> cmpM.PM.m\n        := fun z => ( FXM.from (fst z) , FYM.from (snd z) ).\n    End prod_from_M.\n    Module cmpinvM <: FunctionM cmpM.PFM FPM\n      := FPM.corecM cmpM.PFM prod_from_M.\n    (** We prove the first homotopy *)\n    Module cmpinv_o_cmp_M <: FunctionM FPM FPM\n      := ComposeM FPM cmpM.PFM FPM cmpinvM cmpM.\n    Module idmap_FPM <: FunctionM FPM FPM\n      := IdmapM FPM.\n    Module cip_FPM := FPM.coindpathsM FPM cmpinv_o_cmp_M idmap_FPM.\n    Module cip_FPHM <: HomotopyM FPM cmpM.PM cip_FPM.fhM cip_FPM.fkM.\n      Definition m : forall x, cip_FPM.fhM.m@ {i j} x = cip_FPM.fkM.m@ {i j} x.\n      Proof.\n        intros x.\n        refine (concat (cmpinvM.m_beta@ {i j} (cmpM.m@ {i j} x)) _).\n        apply path_prod@ {i i i}; cbn.\n        all:admit.\n      Defined. (* Toplevel input, characters 15-23:\nError: Illegal application:\nThe term \"cmpM.FfstM.m\" of type \"cmpM.FPM.mM.m -> FXM.mM.m\"\ncannot be applied to the term\n \"x\" : \"FPM.m\"\nThis term has type \"FPM.m\" which should be coercible to\n\"cmpM.FPM.mM.m\". *)\n    End cip_FPHM.\n  End isequiv_F_prod_cmp_M.\n\nEnd Comodality_Theory. \n\nRemoving the [cbn] gets rid of the error.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337530104/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337530106","html_url":"https://github.com/coq/coq/issues/3973#issuecomment-337530106","issue_url":"https://api.github.com/repos/coq/coq/issues/3973","id":337530106,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUzMDEwNg==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-01-07T07:20:59Z","updated_at":"2017-10-18T09:48:56Z","author_association":"CONTRIBUTOR","body":"Comment author: @silene\n\nCoq no longer allows unbound universe levels in universe-polymorphic definitions. If I am adding them manually, everything goes through properly. So my guess is that, in the original issue, implicit universe levels were not properly instantiated and cbn/simpl were just exhibiting a universe inconsistency. (For instance, I ended up with a 6-universe signature for path_prod instead of the original 3.) But I might have messed the signatures. So if you still can reproduce the issue nowadays, please reopen this report.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337530106/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]