[{"url":"https://api.github.com/repos/coq/coq/issues/comments/337546326","html_url":"https://github.com/coq/coq/issues/5021#issuecomment-337546326","issue_url":"https://api.github.com/repos/coq/coq/issues/5021","id":337546326,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0NjMyNg==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-08-17T23:26:47Z","updated_at":"2018-12-05T20:05:35Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\r\n\r\nConsider this tactic:\r\n```coq\r\nLtac destructeq H :=\r\n  generalize dependent H;\r\n  let H := fresh H in\r\n  refine (let pf := _ in fun H => match H with eq_refl => pf end).\r\n  destructeq H1.\r\n\r\nThere are cases that this tactic can handle which [destruct] cannot:\r\n\r\nGoal forall (T : Type) (feq : Eq=Eq->T) (H1 : Eq=Eq), feq eq_refl = feq H1.\r\n  intros.\r\n  Fail destruct H1. (* The command has indeed failed with message:\r\nAbstracting over the terms \"Eq\" and \"H1\" leads to a term\r\nfun (a : comparison) (H0 : a = a) => feq eq_refl = feq H0\r\nwhich is ill-typed.\r\nReason is: Illegal application: \r\nThe term \"feq\" of type \"Eq = Eq -> T\"\r\ncannot be applied to the term\r\n \"eq_refl\" : \"a = a\"\r\nThis term has type \"a = a\" which should be coercible to \"Eq = Eq\". *)\r\n  destructeq H1. (* success *)\r\n```\r\nI think [destruct] and [case] and [inversion] should be able to handle this \r\ncase.\r\n\r\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337546326/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337546327","html_url":"https://github.com/coq/coq/issues/5021#issuecomment-337546327","issue_url":"https://api.github.com/repos/coq/coq/issues/5021","id":337546327,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0NjMyNw==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-08-18T10:16:46Z","updated_at":"2017-10-18T10:38:22Z","author_association":"CONTRIBUTOR","body":"Comment author: @herbelin\n\nI fully support your request which is in the air for years. For instance, Pierre Boutillier and Thomas Braibant had started a branch with this extended case analysis tactic (https://github.com/braibant/invert, https://github.com/braibant/invert_paper).\n\nThere are various difficulties to make progresses. One of them is time. Another one is probably the inner complexity of the problem and the question of where to put a limit to a problem which in its full generality borders on higher-order unification (so, a \"design\" issue). Another one is the difficulty to make the complex code of \"destruct\" and \"case\" evolve, without breaking the compatibility excessively.\n\nIn any case, there are several persons interested in this extension (for instance, my understanding is that Maxime is also interested, and Daniel maybe also), so, hopefully, something will eventually arrive!\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337546327/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]