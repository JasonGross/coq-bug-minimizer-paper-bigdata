[{"url":"https://api.github.com/repos/coq/coq/issues/comments/337523013","html_url":"https://github.com/coq/coq/issues/3551#issuecomment-337523013","issue_url":"https://api.github.com/repos/coq/coq/issues/3551","id":337523013,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyMzAxMw==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-08-28T18:35:47Z","updated_at":"2020-07-23T12:40:43Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\r\n\r\nHere is some code that fakes `transparent assert`, but the one that actually goes into Coq should be written in OCaml, I think, so that we can do `transparent assert (foo : nat = nat)` rather than `transparent assert (foo : (nat = nat))`, and so that we can have both `transparent assert (foo : bar)` and just `transparent assert (bar)`.\r\n\r\n```coq\r\n(** [transparent assert (H : T)] is like [assert (H : T)], but leaves the body transparent. *)\r\nTactic Notation \"transparent\" \"assert\" \"(\" ident(name) \":\" constr(type) \")\" :=\r\n  refine (let H := (_ : type) in _);\r\n  [\r\n  | ((* We cannot use the name [H], due to some infelicities in the naming of bound variables.  So instead we pull the bottommost\r\nhypothesis. *)\r\n    let H := match goal with H := _ |- _ => constr:(H) end in\r\n    rename H into name) ].\r\n\r\n(** [transparent eassert] is like [transparent assert], but allows holes in the type, which will be turned into evars. *)\r\nTactic Notation \"transparent\" \"assert\" \"(\" ident(name) \":\" constr(type) \")\" \"by\" tactic3(tac) := let name := fresh \"H\" in\r\ntransparent assert (name : type); [ solve [ tac ] | ].\r\n(* Doesn't actually help *)\r\n(*Tactic Notation \"transparent\" \"eassert\" \"(\" open_constr(type) \")\" := let name := fresh \"H\" in transparent assert (name : type).*)\r\nTactic Notation \"transparent\" \"eassert\" \"(\" ident(name) \":\" open_constr(type) \")\" := transparent assert (name : type).\r\nTactic Notation \"transparent\" \"eassert\" \"(\" ident(name) \":\" open_constr(type) \")\" \"by\" tactic3(tac) := transparent assert (name :\r\ntype) by tac.\r\nGoal True.\r\n  transparent eassert (H : (_ = nat)).\r\n```\r\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337523013/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337523016","html_url":"https://github.com/coq/coq/issues/3551#issuecomment-337523016","issue_url":"https://api.github.com/repos/coq/coq/issues/3551","id":337523016,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyMzAxNg==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-09-05T16:32:17Z","updated_at":"2020-07-23T12:41:06Z","author_association":"CONTRIBUTOR","body":"Comment author: @aspiwack\r\n\r\nNo opinion, but I've fixed the handling of ltac names by refine so that:\r\n```coq\r\nTactic Notation \"transparent\" \"assert\" \"(\" ident(H) \":\" open_constr(type) \")\" :=\r\n  refine (let H := (_ : type) in _).\r\n```\r\nnow works.\r\n\r\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337523016/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]