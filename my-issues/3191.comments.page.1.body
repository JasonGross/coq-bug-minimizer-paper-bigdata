Comment author: @JasonGross

A match construct of the form

  match H as H' in (T x) return (T' x H' -> T'' x H') with
    | con1 a1 => fun _ => r1 a1
    | con2 a2 => fun _ => r2 a2
  end arg1

should reduce to

  match H as H' in (T x) return (T'' x H') with
    | con1 a1 => r1 a1
    | con2 a2 => r2 a2
  end

That is, if all of the return branches are of the form [fun _ => ...] (i.e., the ... doesn't mention the argument), and the return type of the match doesn't depend on the argument (it's an arrow and not a forall), then the argument should be "eaten".

I'm sure this rule has a more general form (it may be a special case of the commutation rule in https://coq.inria.fr/bugs/show_bug.cgi?id=3119#c1, but I think it is one of the most useful instances), but I request this special case because it is one of the components I need to extract the components of, e.g., a path between dependent pairs, using only unification.

I'm a bit worried that this will break the private inductive types hack which allows encoding computational higher inductive types via axioms in Coq.


Comment author: @pirbo

If you want that the reduction of the kernel does such reductions, it is an unrealistic wish.
If you ask for a way in the pretypper to rewrite such terms generated by tactics before sending them to the kernel. I agree and this is on the long term todo list.


Comment author: @JasonGross

It would be nice for a way to have the kernel do such reductions (though perhaps via something like CoqMT, where it is up to the user or extension-writer to come up with and justify such rules).

I would settle for a way to deal more quickly and nicely with proof obligations involving such terms.  The problem I am running in to is that by the time I unfold enough definitions to see places where I could apply these rules, the goal is so big that using [rewrite] is very, very slow.  So I have to write lemmas about intermediate steps, and then use something like [autorewrite] with a large number of intermediate lemmas, and it is still rather slow.

The problem with just having the pre-typer rewrite such cases is that the cases I care about are often the result of composing other lemmas; I don't want them to always show up as unfolded, as would have to be the case if the pretyper rewrote things, but when they can simplify, I would like them to, and quickly.


Comment author: @ppedrot

Closed like bug [BZ#3190](https://github.com/coq/coq/issues?q=is%3Aissue%20%22Original%20bug%20ID%3A%20BZ%233190%22), waiting for greener times.


