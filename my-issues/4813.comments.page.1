[{"url":"https://api.github.com/repos/coq/coq/issues/comments/337543466","html_url":"https://github.com/coq/coq/issues/4813#issuecomment-337543466","issue_url":"https://api.github.com/repos/coq/coq/issues/4813","id":337543466,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0MzQ2Ng==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-06-11T21:48:41Z","updated_at":"2017-10-18T10:29:05Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nCommit f9695eb4bc5b377a02f49ee485d7fe9be122c183 broke Bedrock and Fiat by making [apply with] weaker.  This is \n\nFixing [BZ#4782](https://github.com/coq/coq/issues?q=is%3Aissue%20%22Original%20bug%20ID%3A%20BZ%234782%22) (a typing error not captured when dealing with bindings).\nTrying to now catch all unification errors, but without a clear view\nat whether some errors could be tolerated at the point of checking the\ntype of the binding.\n\nHere's an example of valid code that is no longer accepted:\n\nRecord ProverT := { Facts : Type }.\nRecord ProverT_correct (P : ProverT) :=  { Valid : Facts P -> Prop ; Valid_weaken : Valid = Valid }.\nDefinition reflexivityValid (_ : unit) := True.\nDefinition reflexivityProver_correct : ProverT_correct {| Facts := unit |}.\nProof.\n  eapply Build_ProverT_correct with (Valid := reflexivityValid). (* Error: The term \"reflexivityValid\" has type \"unit -> Prop\" while it is expected to have type \"Facts ?P -> Prop\". *)\n\n\nThe only type errors that should be caught are ones where the types are known to be not convertible, not simply types that the unification engine can't unify.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337543466/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337543470","html_url":"https://github.com/coq/coq/issues/4813#issuecomment-337543470","issue_url":"https://api.github.com/repos/coq/coq/issues/4813","id":337543470,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0MzQ3MA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-06-12T05:55:14Z","updated_at":"2017-10-18T10:29:05Z","author_association":"CONTRIBUTOR","body":"Comment author: @silene\n\nThis is strange. There is indeed a regression, but it seems like \"apply with\" is just exhibiting an old issue in the pretyper. For instance, I would expect the following declaration to go through, since there is an obvious (and unique) way to fill the hole and, once the hole is filled with (BT unit), H is well-typed as an argument.\n\nRecord T := BT { t : Set }.\nRecord U (x : T) := BU { u : t x -> Prop }.\nDefinition A (H : unit -> Prop) : U (BT unit) := BU _ H.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337543470/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337543472","html_url":"https://github.com/coq/coq/issues/4813#issuecomment-337543472","issue_url":"https://api.github.com/repos/coq/coq/issues/4813","id":337543472,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0MzQ3Mg==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-06-12T18:01:44Z","updated_at":"2017-10-18T10:29:05Z","author_association":"CONTRIBUTOR","body":"Comment author: @herbelin\n\nTo Jason: new fix for both [BZ#4782](https://github.com/coq/coq/issues?q=is%3Aissue%20%22Original%20bug%20ID%3A%20BZ%234782%22) and [BZ#4813](https://github.com/coq/coq/issues?q=is%3Aissue%20%22Original%20bug%20ID%3A%20BZ%234813%22).\n\nTo Guillaume: yes, one would certainly like to have this example eventually working.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337543472/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337543473","html_url":"https://github.com/coq/coq/issues/4813#issuecomment-337543473","issue_url":"https://api.github.com/repos/coq/coq/issues/4813","id":337543473,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0MzQ3Mw==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-06-12T20:29:48Z","updated_at":"2017-10-18T10:29:06Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nThanks!\n\nShould my example go into the test-suite?\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337543473/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337543474","html_url":"https://github.com/coq/coq/issues/4813#issuecomment-337543474","issue_url":"https://api.github.com/repos/coq/coq/issues/4813","id":337543474,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0MzQ3NA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-06-12T20:39:45Z","updated_at":"2017-10-18T10:29:06Z","author_association":"CONTRIBUTOR","body":"Comment author: @herbelin\n\nIt is.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337543474/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337543475","html_url":"https://github.com/coq/coq/issues/4813#issuecomment-337543475","issue_url":"https://api.github.com/repos/coq/coq/issues/4813","id":337543475,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0MzQ3NQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-06-13T16:23:16Z","updated_at":"2017-10-18T10:29:06Z","author_association":"CONTRIBUTOR","body":"Comment author: @mattam82\n\nNote that the BU example goes through if you enable bidirectional typechecking (e.g. using Program). It's a bit late to enable it by default for 8.6, but I could still make a flag for it (note that the solution is canonical only up to conversion, which could be a big compatibility issue, with a change this deep in the pretyping algorithm). I think an Arguments flag to drive the unification at applications (to use information from the typing constraint) would be a useful generalization too, as currently what Program does is limited to constructors of inductive types.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337543475/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]