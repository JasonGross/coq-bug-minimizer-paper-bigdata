Comment author: @JasonGross

jgross@ cagnode13:~/bedrock-vio/src$ cat foo.v
Ltac foo := do 1000 pose Type.

Theorem bar : Set.
Proof.
  foo.
  exact nat.
Qed.
jgross@ cagnode13:~/bedrock-vio/src$ time coqc -quick foo.v

real    0m5.225s
user    0m4.880s
sys     0m0.312s
jgross@ cagnode13:~/bedrock-vio/src$ time coqc -quick -time foo.v
Chars 0 - 30 [Ltac~foo~:=~do~1000~pose~Type....] Chars 32 - 50 
[Theorem~bar~:~Set.] Chars 51 - 57 [Proof.] Chars 60 - 64 [foo.] Chars 67 - 77 
[exact~nat.] Chars 78 - 82 [Qed.] 0. secs (0.u,0.s)
0. secs (0.u,0.s)
0. secs (0.u,0.s)
0. secs (0.u,0.s)

real    0m0.284s
user    0m0.124s
sys     0m0.120s


Comment author: @JasonGross

Here is a file for the test-suite, which should succeed (it currently fails)

(* -*- coq-prog-args: ("-emacs" "-quick") -*- *)
Theorem bar : Set.
Proof.
  Fail exact nat. (* test that this proof is not compiled when -quick is passed *)
Qed.


Comment author: @gares

1. -emacs -quick makes no sense, -quick is for the back compilation only
2. proof general has no support for async proofs, CoqIDE passes automatically the right flags
3. the "bug" you see is that -quick -time makes timing annotations bogus (didn't try).


Comment author: @JasonGross

1. I agree it is a confusing annotation.  However, it allows the test-suite file to be edited in PG (without -emacs, PG will loop waiting for output it recognizes), and also have the test-suite makefile pass -quick (the makefile strips -emacs from the list automatically).

2. See 1, I think?

3. That is bug [BZ#3934](https://github.com/coq/coq/issues?q=is%3Aissue%20%22Original%20bug%20ID%3A%20BZ%233934%22).  Here, the issue is that `time coqc -quick` takes 5.225s, while `time coqc -quick -time` takes 0.284s.


Comment author: @gares

Ah, now I understand you bugreport.  It is again documented in the chapter
about async proofs.

If you don't write a "Proof using" than coqc -quick can't behave differently
that coqc, unless you already have compiled the file (with or without -quick).
The first time you compile a lemma with no "Proof using" coqc generates an
.aux file that lists which section variables are used.  If you don't alter the file and recompile it then coqc reads the annotations from the .aux file
and can do its job.

It has nothing to do with -time.


