[{"url":"https://api.github.com/repos/coq/coq/issues/comments/337549080","html_url":"https://github.com/coq/coq/issues/5198#issuecomment-337549080","issue_url":"https://api.github.com/repos/coq/coq/issues/5198","id":337549080,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0OTA4MA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-11-12T21:22:31Z","updated_at":"2017-10-18T10:46:57Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nI suspect this is f691677, but I'll go bisect\n\n(* -*- mode: coq; coq-prog-args: (\"-emacs\" \"-boot\" \"-nois\") -*- *)\n(* File reduced by coq-bug-finder from original input, then from 286 lines to \n27 lines, then from 224 lines to 53 lines, then from 218 lines to 56 lines, \nthen from 269 lines to 180 lines, then from 132 lines to 48 lines, then from \n253 lines to 65 lines, then from 79 lines to 65 lines *)\n(* coqc version 8.6.0 (November 2016) compiled on Nov 12 2016 14:43:52 with \nOCaml 4.02.3\n   coqtop version jgross-Leopard-WS:/home/jgross/Downloads/coq/coq-v8.6,v8.6 \n(7e992fa784ee6fa48af8a2e461385c094985587d) *)\nAxiom admit : forall {T}, T.\nSet Printing Implicit.\nInductive nat := O | S (_ : nat).\nAxiom f : forall (_ _ : nat), nat.\nClass ZLikeOps (e : nat)\n  := { LargeT : Type ; SmallT : Type ; CarryAdd : forall (_ _ : LargeT), LargeT \n}.\nClass BarrettParameters :=\n  { b : nat ; k : nat ; ops : ZLikeOps (f b k) }.\nAxiom barrett_reduce_function_bundled : forall {params : BarrettParameters}\n                                               (_ : @ LargeT _ (@ ops params)),\n    @ SmallT _ (@ ops params).\n\nGlobal Instance ZZLikeOps e : ZLikeOps (f (S O) e)\n  := { LargeT := nat ; SmallT := nat ; CarryAdd x y := y }.\nDefinition SRep := nat.\nLocal Instance x86_25519_Barrett : BarrettParameters\n  := { b := S O ; k := O ; ops := ZZLikeOps O }.\nDefinition SRepAdd : forall (_ _ : SRep), SRep\n  := let v := (fun x y => barrett_reduce_function_bundled (CarryAdd x y)) in\n     v.\nDefinition SRepAdd' : forall (_ _ : SRep), SRep\n  := (fun x y => barrett_reduce_function_bundled (CarryAdd x y)).\n(* Error:\nIn environment\nx : SRep\ny : SRep\nThe term \"x\" has type \"SRep\" while it is expected to have type\n \"@ LargeT ?e ?ZLikeOps\".\n *)\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337549080/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337549084","html_url":"https://github.com/coq/coq/issues/5198#issuecomment-337549084","issue_url":"https://api.github.com/repos/coq/coq/issues/5198","id":337549084,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0OTA4NA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-11-12T21:28:33Z","updated_at":"2017-10-18T10:46:57Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nBisecting gives\n\na477dca64bb71a98fb92875df438d44d1fe54400 is the first bad commit\ncommit a477dca64bb71a98fb92875df438d44d1fe54400\nAuthor: Matthieu Sozeau <mattam@ mattam.org>\nDate:   Wed Oct 26 19:20:08 2016 +0200\n\n    Fix handling of only_classes at toplevel\n\n:040000 040000 025af2066663eb4b30e9b930ef78ff94f1d59688 \nb6b4d221a7e322030aad263a386b9aac919439e6 M\tltac\n:040000 040000 ecb4eed76a98ec7100c4d82a430d29a758122234 \ndbf5d5b3541e1ecc60774af09f1b299e340fd8c3 M\ttactics\n:040000 040000 a4e562050b2cf32f8acd54fd959e7715884db0ce \n2a48b8ece7f933075bcd19bbbb85dc794bd0e165 M\ttest-suite\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337549084/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337549086","html_url":"https://github.com/coq/coq/issues/5198#issuecomment-337549086","issue_url":"https://api.github.com/repos/coq/coq/issues/5198","id":337549086,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0OTA4Ng==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-11-14T09:27:27Z","updated_at":"2017-10-18T10:46:58Z","author_association":"CONTRIBUTOR","body":"Comment author: @mattam82\n\nOk, I'll have a look ASAP\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337549086/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337549087","html_url":"https://github.com/coq/coq/issues/5198#issuecomment-337549087","issue_url":"https://api.github.com/repos/coq/coq/issues/5198","id":337549087,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0OTA4Nw==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-11-14T15:59:22Z","updated_at":"2017-10-18T10:46:58Z","author_association":"CONTRIBUTOR","body":"Comment author: @mattam82\n\nYour example seems to require canonical structures, if you declare ZZLikeOps to be one it typechecks. The second example is really a different type inference problem as the constraint you give is used early to fill the types of x and y.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337549087/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337549088","html_url":"https://github.com/coq/coq/issues/5198#issuecomment-337549088","issue_url":"https://api.github.com/repos/coq/coq/issues/5198","id":337549088,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0OTA4OA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-11-14T16:08:40Z","updated_at":"2017-10-18T10:46:58Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nWhy do they both work in 8.5, though?  And is the advice to fix this problem \"make all your typeclasses be canonical structures?\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337549088/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337549089","html_url":"https://github.com/coq/coq/issues/5198#issuecomment-337549089","issue_url":"https://api.github.com/repos/coq/coq/issues/5198","id":337549089,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0OTA4OQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-11-14T16:39:52Z","updated_at":"2017-10-18T10:46:58Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nThis seems like it could be solved by delaying unification constraints.  The code\n\nDefinition SRepAdd' : forall (_ _ : SRep), SRep\n  := (fun x y => @ barrett_reduce_function_bundled x86_25519_Barrett (@ CarryAdd _ _ x y)).\n\nhas a unique solution in the first-order unification fragment, I believe.  But Coq 8.6 does not find it.  However, Coq 8.6 does find the solution to\n\nDefinition SRepAdd' : forall (_ _ : SRep), SRep\n  := (fun x y => @ barrett_reduce_function_bundled x86_25519_Barrett (@ CarryAdd (f _ _) _ x y)).\n\nI don't see why this is; I haven't added any new information.  Even more strikingly, if I force this information in a different way, Coq still fails to solve the problem:\n\nAxiom admit : forall {T}, T.\nSet Printing Implicit.\nInductive nat := O | S (_ : nat).\nAxiom f : forall (_ _ : nat), nat.\nClass ZLikeOps (e : nat)\n  := { LargeT : Type ; SmallT : Type ; CarryAdd : forall (_ _ : LargeT), e = e -> LargeT }.\nClass BarrettParameters :=\n  { b : nat ; k : nat ; ops : ZLikeOps (f b k) }.\nAxiom barrett_reduce_function_bundled : forall {params : BarrettParameters}\n                                               (_ : f b k = f b k -> @ LargeT _ (@ ops params)),\n    @ SmallT _ (@ ops params).\n\nGlobal Instance ZZLikeOps e : ZLikeOps (f (S O) e)\n  := { LargeT := nat ; SmallT := nat ; CarryAdd x y := fun _ => y }.\nDefinition SRep := nat.\nLocal Instance x86_25519_Barrett : BarrettParameters\n  := { b := S O ; k := O ; ops := ZZLikeOps O }.\nDefinition SRepAdd : forall (_ _ : SRep), SRep\n  := let v := (fun x y => @ barrett_reduce_function_bundled x86_25519_Barrett (@ CarryAdd _ _ x y)) in\n     v.\nDefinition SRepAdd' : forall (_ _ : SRep), SRep\n  := (fun x y => @ barrett_reduce_function_bundled x86_25519_Barrett (@ CarryAdd _ _ x y)).\n\nIn this example, I've fully specified what the [e] parameter to [CarryAdd] must be, by virtue of the type of [barrett_reduce_function_bundled].  Coq is still unhappy, though.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337549089/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337549090","html_url":"https://github.com/coq/coq/issues/5198#issuecomment-337549090","issue_url":"https://api.github.com/repos/coq/coq/issues/5198","id":337549090,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0OTA5MA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-11-14T16:47:09Z","updated_at":"2017-10-18T10:46:58Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nHere's a case where there is a unique solution to the global unification problem, and it falls within the first-order fragment, and yet Coq fails to find it.\n\nAxiom admit : forall {T}, T.\nSet Printing Implicit.\nInductive nat := O | S (_ : nat).\nAxiom f : forall (_ _ : nat), nat.\nClass ZLikeOps (e : nat)\n  := { LargeT : Type ; SmallT : Type ; CarryAdd : forall (_ _ : LargeT), LargeT }.\nAxiom LargeT' : forall {e} {ops : ZLikeOps e}, Type.\nAxiom CarryAdd' : forall {e} {ops : ZLikeOps e} (_ _ : @ LargeT e ops), @ LargeT' e ops.\nClass BarrettParameters :=\n  { b : nat ; k : nat ; ops : ZLikeOps (f b k) }.\nAxiom barrett_reduce_function_bundled : forall {params : BarrettParameters}\n                                               (_ : @ LargeT' _ (@ ops params)),\n    @ SmallT _ (@ ops params).\nGlobal Instance ZZLikeOps e : ZLikeOps (f (S O) e)\n  := { LargeT := nat ; SmallT := nat ; CarryAdd x y := y }.\nDefinition SRep := nat.\nLocal Instance x86_25519_Barrett : BarrettParameters\n  := { b := S O ; k := O ; ops := ZZLikeOps O }.\nDefinition SRepAdd : forall (_ _ : SRep), SRep\n  := let v := (fun x y => @ barrett_reduce_function_bundled x86_25519_Barrett (@ CarryAdd' _ _ x y)) in\n     v.\nDefinition SRepAdd' : forall (_ _ : SRep), SRep\n  := (fun x y => @ barrett_reduce_function_bundled x86_25519_Barrett (@ CarryAdd' _ _ x y)).\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337549090/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337549091","html_url":"https://github.com/coq/coq/issues/5198#issuecomment-337549091","issue_url":"https://api.github.com/repos/coq/coq/issues/5198","id":337549091,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0OTA5MQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-11-14T16:52:42Z","updated_at":"2017-10-18T10:46:58Z","author_association":"CONTRIBUTOR","body":"Comment author: @mattam82\n\nCertainly not that advice. But you bundle the Type in ZZLikeOps and that's not recommended style with typeclasses for sure. It worked in 8.5 because in the middle of unification we allow a resolution of @ LargeT ?n ?e by ZZLikeOps ?n for some unknown ?n and luckily a later unification solved this ?n. Today this residual shelved goal makes the search fail. I think while we explore the design space with shelving, we'll need an option to allow shelved subgoals to remain after resolution of typeclasses, even though I find it quite disturbing to have such \"floating\" things around. \"Legacy Resolution\" works in this case, as well as Filtered Unification by giving the right patterns to the [ops], e.g.\n\nor even without any particular option by doing \nHint Extern 0 (ZLikeOps _) => notypeclasses refine (@ ops _) : typeclass_instances. (* The pattern inferred for it is too specific *)\nDefinition ZZLikeOps (* Remove the offending instance creating non-class subgoals *)\n\nAnother venue for avoiding this is with a bidirectional typechecking algorithm that could transmit the values of the [e] and [ZLikeOps] arguments of CarryAdd from the typing constraint coming from the enclosing barret_reduce_function_bundled.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337549091/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337549093","html_url":"https://github.com/coq/coq/issues/5198#issuecomment-337549093","issue_url":"https://api.github.com/repos/coq/coq/issues/5198","id":337549093,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0OTA5Mw==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-11-14T16:54:07Z","updated_at":"2017-10-18T10:46:58Z","author_association":"CONTRIBUTOR","body":"Comment author: @mattam82\n\nYou have to remember that typechecking [foo (CarryAdd x y)] typechecks [x] with just the information of CarryAdd, _nothing else_ here.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337549093/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337549094","html_url":"https://github.com/coq/coq/issues/5198#issuecomment-337549094","issue_url":"https://api.github.com/repos/coq/coq/issues/5198","id":337549094,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0OTA5NA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-11-14T17:04:10Z","updated_at":"2017-10-18T10:46:59Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nSo is [Set Typeclasses Legacy Resolution] the advice?  Or always unbundling typeclasses?  It seems like this should definitely be mentioned in incompatibilities/CHANGES/COMPATIBILITY, if it's here to stay, and there should be advice for how to update code appropriately.\n\n> Another venue for avoiding this is with a bidirectional typechecking algorithm that could transmit the values of the [e] and [ZLikeOps] arguments of CarryAdd from the typing constraint coming from the enclosing barret_reduce_function_bundled.\n\nThat sounds like a useful thing for 8.7?\n\n> You have to remember that typechecking [foo (CarryAdd x y)] typechecks [x] with just the information of CarryAdd, _nothing else_ here.\n\nSure.  I'm saying that this breaks the folk-lore guarantee that Coq's unification is complete on the pattern fragment.  But I guess that's a separate bug, since it doesn't involve typeclasses, and is not a regression.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337549094/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337549095","html_url":"https://github.com/coq/coq/issues/5198#issuecomment-337549095","issue_url":"https://api.github.com/repos/coq/coq/issues/5198","id":337549095,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0OTA5NQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-11-14T17:18:32Z","updated_at":"2017-10-18T10:46:59Z","author_association":"CONTRIBUTOR","body":"Comment author: @mattam82\n\nLet's wait a bit before jumping to conclusions, I'm not giving advice yet, just trying to understand the problems first. I don't think Coq's incomplete on the pattern fragment. Do you think SRep ~= @ LargeT _ _ is in the pattern fragment or are you thinking about a different problem? There seems to be issues on the patterns of ops (and ZZLikeOps) where you need to explicitely give the (f _ _), is this the source of the higher-order pattern problem you're talking about?\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337549095/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337549096","html_url":"https://github.com/coq/coq/issues/5198#issuecomment-337549096","issue_url":"https://api.github.com/repos/coq/coq/issues/5198","id":337549096,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0OTA5Ng==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-11-14T19:19:11Z","updated_at":"2017-10-18T10:46:59Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\n> Do you think SRep ~= @ LargeT _ _ is in the pattern fragment or are you thinking about a different problem?\n\nNo.  And I might be misnaming things.  What's the fragment where first you instantiate evars up to syntactic equality, and then you do conversion on closed terms?  I think that strategy dives this problem.\n\nI'm also confused why giving [f _ _] fixes things.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337549096/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337549097","html_url":"https://github.com/coq/coq/issues/5198#issuecomment-337549097","issue_url":"https://api.github.com/repos/coq/coq/issues/5198","id":337549097,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0OTA5Nw==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-11-16T10:35:08Z","updated_at":"2017-10-18T10:46:59Z","author_association":"CONTRIBUTOR","body":"Comment author: @mattam82\n\nThis is fixed in the 8.6 branch. Leaving it opened though as there is an interesting discussion to start on treatment of shelved goals during resolution.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337549097/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337549098","html_url":"https://github.com/coq/coq/issues/5198#issuecomment-337549098","issue_url":"https://api.github.com/repos/coq/coq/issues/5198","id":337549098,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0OTA5OA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-11-16T10:38:17Z","updated_at":"2017-10-18T10:46:59Z","author_association":"CONTRIBUTOR","body":"Comment author: @mattam82\n\nAlso analysing why the (f _ _) pattern helps is interesting, my guess is that unification is greatly helped by it.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337549098/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337549099","html_url":"https://github.com/coq/coq/issues/5198#issuecomment-337549099","issue_url":"https://api.github.com/repos/coq/coq/issues/5198","id":337549099,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0OTA5OQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2017-06-09T13:07:09Z","updated_at":"2017-10-18T10:46:59Z","author_association":"CONTRIBUTOR","body":"Comment author: @Zimmi48\n\nThis bug was fixed but left open because \"there is an interesting discussion to start on treatment of shelved goals during resolution\". This is an interesting discussion indeed but I think it can happen elsewhere.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337549099/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]