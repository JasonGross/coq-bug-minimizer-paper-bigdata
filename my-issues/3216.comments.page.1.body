Comment author: @JasonGross

After some discussion with Ross Tate, I have decided to request a point-and-click proving mode for CoqIDE.  I think this would be a significant help for new users, who don't know the names of tactics.  I am thinking of something like Edward Yang's Logitext (http://logitext.mit.edu/main), which I think has an excellent interface for linear logic proofs.

I propose the following semantics, to be tuned later, based on feedback, for the point and click mode.  When I say that a tactic should be run, I mean that it should be inserted into the proof script in the appropriate place, and executed, and the view updated.  If the tactic errors, the error message should be displayed, and then the inserted tactic should be commented out (the goal being to minimize the user's need of the keyboard when proving).  There should be "undo" and "redo" buttons and some kind of history list, for actions which insert/run tactics.  "Undo" after inserting a failed tactic should remove the comment (I'm not sure if it should also clear the error message; probably it should).  Every click should give some kind of feedback, whether that's a "The only thing supported when the goal is "a -> b" is clicking on the "a" or the "->" to introduce" or "I don't know what to do when you click on a ":" or "Tactic intro failed with error message..."

When you hover over any part of a clickable term, the entire term is highlighted.  So if "a : T" in the goal "forall a : T, P a" is clickable, then when you hover over any part of "a : T", all of "a : T" gets highlighted.  If you start dragging something, all drop targets should be highlighted, and when you hover over a drop target, that one should be highlighted more boldly.  There should also be some visual indication of what is being dragged.

In Goals:
- When you click on a binder in a forall ("a : T" in "forall a : T, P a"), or a type in an arrow ("T" in "T -> P"), it should run "intro" the appropriate number of times to introduce that variable and all that come before that.  Preferably the IDE should generate fresh names, and insert into the proof script "intro H0. intro H1." ...
- When you click on "forall" in the head position of a goal, the system should run "intros", preferably with appropriate fresh names
- When you click on an arrow ("->" in "T -> P"), it should have the same behavior as if you clicked on the preceding type ("T" in "T -> P")
- When you click on an inductive type with only one applicable constructor in the goal ("and", "prod", "sig", "eq", or notations for these such as "/\", "*", "{ ... | ... }"), CoqIDE should run econstructor
- When you click on the left or right term in an "or" (and perhaps find a similar way to generalize this to other inductives), "left" or "right" should be run
- When you click on "no goals remaining", "Qed" should be run if you started the proof with "Lemma", "Theorem", etc., or "Defined" should be run if you started with "Definition", "Let", etc.
- When you click "no focused subgoals remain, but unfocused ones remain", the appropriate focusing construct (from bulleted proof scripts, or "Focus", or whatever) should be run.
- When you click on a numbered goal, that goal should be focused.  Clicking on the "unfocused goals" message at the top (or wherever it is) should attempt to unfocus the goal.

In the context, regardless of what is selected:
- When you drag a hypothesis (by name or by type or by body) onto the type of the goal, CoqIDE should "refine"/"apply"/"exact"/"eapply" that hypothesis to the goal
- When you drag a hypothesis (by name or by type or by body) onto the space above or to the left of the goal, CoqIDE should "revert" or possibly "generalize dependent" that hypothesis
- When you drag a hypothesis (by name or by type or by body) onto the name of another hypothesis, CoqIDE should apply the dragged hypothesis to the hypothesis it is dropped on to.
- When you drag a hypothesis (by name or by type or by body) to a slot between two other hypotheses, it should be moved (upwards or downwards) to that slot, reordering its dependencies as necessary.
- When you drag a hypothesis to a slot between other hypotheses, and release the drag while holding Ctrl, CoqIDE should copy the dragged hypothesis and move the copy to the slot where you dropped it.  By copy, I mean:
  * if you dragged the type, use "pose proof"
  * if you dragged the body, use "pose <body of hypothesis>"
  * if you dragged the name, and the hypothesis has no body, use "pose proof"
  * if you dragged the name, and the hypothesis has a body, use "pose <name of hypothesis>"
- When you drag a hypothesis (by name or by type or by body) onto a variable/binder, CoqIDE should specialize the dropped-on-to hypothesis in the appropriate slot with the dragged hypothesis.  Any variables that come before it which are fully determined should be inferred ("specialize (dropped_H _ dragged_H)"), and any which are not should remain ("pose proof (fun A => dropped_H A dragged_H)")

In the context, selection dependent:
- If you begin a drag holding down Ctrl, then the resulting action should be taken for every hypothesis selected at the time of drag start, including the one that you hold-clicked-and-dragged (even if it was not previously selected)
- If you begin a drag not holding down Ctrl, anything previously highlighted should be unhighlighted, before taking the action on the dragged hypothesis
- If you click while holding down control, and the target would become selected if nothing else were selected, whether or not that term is selected should be toggled.  Clicking inside any part of a selected term counts as clicking on the entire term.

In the context, when something is selected:
- If you click on one thing when another term is selected, it should be as if you had dragged the selected term onto the place you are now clicking.

In the context, when nothing is selected:
- When you click on the name of a hypothesis, that hypothesis should become selected.
- When you click on the body of a hypothesis (not the type), that body should become selected.
- When you click on an non-recursive inductive type (such as "and", "prod", "/\", "or", "\/", "sum", etc.), CoqIDE should run whichever of "destruct", "induction", or "case" first succeeds.  If the type is under binders (perhaps only for recognized types, preferably for everything), then CoqIDE should destruct under binders. (Example tactic for [and] below.*)
- When you click on a recursive inductive type (such as "nat"), CoqIDE should run "induction"


There should also be an "eraser" mode, with the following proposed behavior:
- If you click a hypothesis (the type or the name), CoqIDE should "clear" that hypothesis
- If you click a hypothesis (the body), CoqIDE should "clearbody" that hypothesis
- If you click a type before an arrow in the goal ("T" in "T -> P"), CoqIDE should "intro" until that variable, "clear" it, and then revert the variables that came before
- If you highlight a term in the goal, CoqIDE should "generalize" that term.  There should possibly be a checkbox (checked by default?) to "generalize dependent" and then "intro" the appropriate variables instead
- If you highlight a term in a hypothesis, CoqIDE should "generalize dependent" that term, and possibly "intro" the appropriate things afterwards to bring the goal back to how it was

There should possibly be a "bomb"/"destruct" mode, which is like the "eraser" mode, but runs "destruct"/"induction"/"case" instead of "generalize"/"clear".


There should be a "magnifying glass"/"unfolder" mode, with the following proposed behavior:
- If you click in the background of the goal or context, CoqIDE toggles "Set Printing All".
- If you hover for, say 2+ seconds on a notation or name, CoqIDE should run "Locate" or "Check" or "Print" on the name, and print it in a popup box.  Clicking on a name/notation should make CoqIDE "unfold" that particular instance of the name.
- If you click on a hypothesis with a body, CoqIDE should "subst" that hypothesis, and "unfold" it "in *" if "subst" fails

There should also be buttons for tactics like "simpl", "omega", "ring", etc, depending on whether or not the tactic might apply to the goal (so equality of nats should make an "omega" button visible/clickable, etc)



It would be nice if many/most/all of these behaviors were customizable via some menu (and maybe also config file), so that people who come up with better behaviors don't have to write OCaml or wait for the next release.



I've probably missed a number of useful behaviors but I think these (or even a subset of these) would be very helpful for beginners.




* Split tactic for [and] and [iff] under binders:
(* Coq's build in tactics don't work so well with things like [iff]
   so split them up into multiple hypotheses *)
Ltac split_in_context ident funl funr :=
  repeat match goal with
           | [ H : context p [ident] |- _ ] =>
             let H0 := context p[funl] in let H0' := eval simpl in H0 in assert H0' by (apply H);
               let H1 := context p[funr] in let H1' := eval simpl in H1 in assert H1' by (apply H);
                 clear H
         end.

Ltac split_iff := split_in_context iff (fun a b : Prop => a -> b) (fun a b : Prop => b -> a).

Ltac split_and' :=
  repeat match goal with
           | [ H : ?a /\ ?b |- _ ] => let H0 := fresh in let H1 := fresh in
             assert (H0 := fst H); assert (H1 := snd H); clear H
         end.
Ltac split_and := split_and'; split_in_context and (fun a b : Type => a) (fun a b : Type => b).


Comment author: @JasonGross

Oops, logitext isn't for linear logic, it's for basic intuitionistic or classical logic proofs.


Comment author: @JasonGross

Additionally, in the cases where there are multiple actions for a term (such as "destruct", "case", "induction" for a hypothesis), right clicking should bring up a menu with the appropriate options.


Comment author: @gares

Well, the idea is not new.  Coq had a point-and-click interface that, among other things, was letting you do (very cool IMO) algebraic manipulations like these ones:

  http://www-sop.inria.fr/croap/ctcoq/help/example.mpg

A Coq clone, Matita, had it too.  I loved to select sub-terms with the mouse to focus rewrite, elim, and the like. See for example page 10:

  http://matita.cs.unibo.it/PAPERS/matita.pdf

You miss one important proof step IMO: use an already proved lemma.  What you propose seems to be mostly about proving tautologies.

All these gestures require the GUI to handle syntax trees, and not just plain
text.  This is your main enemy if you want to implement something like that.

I'd love to put an unused, by CoqIDE, feature in 8.5.  A message, in the XML  protocol, to ask Coq to print the AST of the just parsed/printed command/goal.
But I'm not sure we are going to make it...

My 2C.


Comment author: @ppedrot

Ideally, yes. Any contribution in this area is welcome. Meanwhile, I propose to close this feature request.


