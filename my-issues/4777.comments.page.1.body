Comment author: @JasonGross

(** Coq is slow, interactively, even if there is nothing big being displayed, if there are big hidden things *)
(** Use `coqtop -time -emacs < file.v` to see the slowness in Coq 8.5; in 8.4, the [Time] directive picks up the slowness in ProofGeneral *)

Definition dhidden {T} {x : T} := x.
Definition nhidden {T} (x : T) := x.
Notation Nhidden := (nhidden _).

Axiom iter2 : bool -> bool -> bool.
Fixpoint do2 (n : nat) (A : bool) :=
  match n with
    | 0 => A
    | S n' => do2 n' (iter2 A A)
  end.
Axiom x : bool.

Goal True.
  Time idtac. (* 0.0s *)
  let x := constr:(do2 19 x) in
  let x := (eval vm_compute in x) in
  pose (@ dhidden _ x).
  Unset Silent.
  Time idtac. (* 3.7 s in 8.4; still slow (about 1.5 s) in 8.5, but not displayed with [Time] *)
  Time idtac.
  Time idtac.
  Set Silent. Time idtac. Set Silent. (* 0.084 s in 8.4, which is still slow, but not insanely slow *)
  Set Silent. Time idtac. Set Silent.
  Set Silent. Time idtac. Set Silent.
Abort.


Goal True.
  Time idtac. (* 0.0s *)
  let x := constr:(do2 19 x) in
  let x := (eval vm_compute in x) in
  pose (@ nhidden _ x).
  Unset Silent.
  Time idtac. (* 1.0 s in 8.4; still slow (about 0.5 s) in 8.5, but not displayed with [Time] *)
  Time idtac.
  Time idtac.
  Set Silent. Time idtac. Set Silent. (* 0.084 s in 8.4, which is still slow, but not insanely slow *)
  Set Silent. Time idtac. Set Silent.
  Set Silent. Time idtac. Set Silent.
Abort.


Comment author: @ppedrot

Should be fixed by 87f9a31. Can you confirm?


Comment author: @JasonGross

It's much better!  The file now takes 2.771s, down from 7.576s, and the individual [idtac]s now take 0.12--0.6 seconds, down from 1.2--1.5 seconds.  (Still a far cry from the 0.0012 seconds of [idtac]s on [Set Silent], unfortunately.)


