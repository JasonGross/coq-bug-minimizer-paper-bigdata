[{"url":"https://api.github.com/repos/coq/coq/issues/comments/337520876","html_url":"https://github.com/coq/coq/issues/3420#issuecomment-337520876","issue_url":"https://api.github.com/repos/coq/coq/issues/3420","id":337520876,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyMDg3Ng==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-07-14T14:47:43Z","updated_at":"2017-10-18T09:22:16Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nHere is some code that works in 8.4 but fails in trunk:\n\n(* File reduced by coq-bug-finder from original input, then from 3418 lines to 82 lines *)\nGeneralizable All Variables.\nSet Asymmetric Patterns.\nNotation \"( x ; y )\" := (existT _ x y) : fibration_scope.\nOpen Scope fibration_scope.\nInductive paths {A : Type} (a : A) : A -> Type := idpath : paths a a where \"x = y\" := (@ paths _ x y) : type_scope.\nArguments idpath {A a} , [A] a.\nDefinition Sect {A B : Type} (s : A -> B) (r : B -> A) := forall x : A, r (s x) = x.\nClass IsEquiv {A B : Type} (f : A -> B) := { equiv_inv : B -> A ; eissect : Sect f equiv_inv }.\nDefinition eta_sigma `{P : A -> Type} (u : sigT P) : (projT1 u; projT2 u) = u := match u with existT x y => idpath end.\nDefinition sigT_corect_uncurried `{A : X -> Type} (P : forall x, A x -> Type)\n: { f : forall x, A x & forall x, P x (f x) } -> (forall x, sigT (P x))\n  := fun fg => fun x => (projT1 fg x ; projT2 fg x).\nInstance isequiv_sigT_corect `{A : X -> Type} {P : forall x, A x -> Type} : IsEquiv (sigT_corect_uncurried P) | 0\n  := Build_IsEquiv _ _\n                   (sigT_corect_uncurried P)\n                   (fun h => existT (fun f => forall x, P x (f x))\n                                    (fun x => projT1 (h x))\n                                    (fun x => projT2 (h x)))\n                   (fun h => eta_sigma _).\n(* Toplevel input, characters 414-425:\nError:\nIn environment\nX : Type\nA : X -> Type\nP : forall x : X, A x -> Type\nh : {f : forall x : X, A x & forall x : X, P x (f x)}\nThe term \"eta_sigma ?53\" has type \"(projT1 ?53; projT2 ?53) = ?53\"\nwhile it is expected to have type\n \"(fun x : X => projT1 (sigT_corect_uncurried P h x);\n  fun x : X => projT2 (sigT_corect_uncurried P h x)) = h\". *)\n\n\nFilling in the [h] explicitly is sufficient to make the code go through.  Intuitively, this should be solvable because [@ eq A b c] can only unify with [@ eq A' b' c'] when A, b, c unify with A', b', c', respectively, and the unification of [c] with [c'] is sufficient to get the rest of the term through the unifier.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337520876/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337520877","html_url":"https://github.com/coq/coq/issues/3420#issuecomment-337520877","issue_url":"https://api.github.com/repos/coq/coq/issues/3420","id":337520877,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyMDg3Nw==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2015-11-26T14:48:03Z","updated_at":"2017-10-18T09:22:16Z","author_association":"CONTRIBUTOR","body":"Comment author: @silene\n\nThe testcase seems to pass nowadays. Please reopen if you find another instance of this issue.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337520877/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]