[{"url":"https://api.github.com/repos/coq/coq/issues/comments/337519519","html_url":"https://github.com/coq/coq/issues/3331#issuecomment-337519519","issue_url":"https://api.github.com/repos/coq/coq/issues/3331","id":337519519,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxOTUxOQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-05-16T19:55:48Z","updated_at":"2017-10-18T09:18:16Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\n(* File reduced by coq-bug-finder from original input, then from 6303 lines to 66 lines, then from 63 lines to 36 lines *)\nInductive paths {A : Type} (a : A) : A -> Type := idpath : paths a a where \"x = y :> A\" := (@ paths A x y) : type_scope.\nArguments idpath {A a} , [A] a.\nNotation \"x = y\" := (x = y :>_) : type_scope.\nClass Contr_internal (A : Type) := BuildContr { center : A ; contr : (forall y : A, center = y) }.\nInductive trunc_index : Type :=\n| minus_two : trunc_index\n| trunc_S : trunc_index -> trunc_index.\nFixpoint IsTrunc_internal (n : trunc_index) (A : Type) : Type :=\n  match n with\n    | minus_two => Contr_internal A\n    | trunc_S n' => forall (x y : A), IsTrunc_internal n' (x = y)\n  end.\nClass IsTrunc (n : trunc_index) (A : Type) : Type := Trunc_is_trunc : IsTrunc_internal n A.\nInstance istrunc_paths (A : Type) n `{H : IsTrunc (trunc_S n) A} (x y : A) : IsTrunc n (x = y) := H x y.\nNotation Contr := (IsTrunc minus_two).\nSection groupoid_category.\n  Variable X : Type.\n  Context `{H : IsTrunc (trunc_S (trunc_S (trunc_S minus_two))) X}.\n  Goal X -> True.\n    intro d.\n    pose (_ : Contr (idpath = idpath :> (@ paths (@ paths X d d) idpath idpath))) as H'. (* success *)\n    clear H'.\n    compute in H.\n    change (forall (x y : X) (p q : x = y) (r s : p = q), Contr (r = s)) in H.\n    assert (H' := H).\n    pose proof (_ : Contr (idpath = idpath :> (@ paths (@ paths X d d) idpath idpath))) as X0. (* success *)\n    clear H' X0.\n    pose (_ : Contr (idpath = idpath :> (@ paths (@ paths X d d) idpath idpath))). (* Toplevel input, characters 21-22:\nError:\nCannot infer this placeholder.\nCould not find an instance for \"Contr (idpath = idpath)\" in environment:\n\nX : Type\nH : forall (x y : X) (p q : x = y) (r s : p = q), Contr (r = s)\nd : X *)\n\n\n\nThis happens in both 8.4pl3 and trunk, though HoTT/coq was able to infer the instance in the last case.  I'm very surprised that [assert (H' := H)] is enough to make it find the instance, which suggests that there's some \"this is a typeclass hypothesis\" bit that's getting unset by [compute], or not getting set by [change], or something (it also happens when I [unfold] rather than [compute], or even don't [compute] at all).\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337519519/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337519520","html_url":"https://github.com/coq/coq/issues/3331#issuecomment-337519520","issue_url":"https://api.github.com/repos/coq/coq/issues/3331","id":337519520,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxOTUyMA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-05-17T08:20:52Z","updated_at":"2017-10-18T09:18:16Z","author_association":"CONTRIBUTOR","body":"Comment author: @ppedrot\n\nThe change tactic is know to leak evars, so it may come from there.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337519520/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337519521","html_url":"https://github.com/coq/coq/issues/3331#issuecomment-337519521","issue_url":"https://api.github.com/repos/coq/coq/issues/3331","id":337519521,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxOTUyMQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-06-09T09:52:18Z","updated_at":"2017-10-18T09:18:16Z","author_association":"CONTRIBUTOR","body":"Comment author: @aspiwack\n\nIt's probably not the change tactic which is involved. For one thing the problem was when change was using a pattern, which is clearly not the case here. Second, I believe I fixed the evar leak, and it does not make this example succeed.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337519521/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337519522","html_url":"https://github.com/coq/coq/issues/3331#issuecomment-337519522","issue_url":"https://api.github.com/repos/coq/coq/issues/3331","id":337519522,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxOTUyMg==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-06-20T14:25:55Z","updated_at":"2017-10-18T09:18:16Z","author_association":"CONTRIBUTOR","body":"Comment author: @mattam82\n\nThis is due to the fact that H is a section hypothesis, hence typeclass resolution doesn't reindex it every time it indexes the local context of the goal. That's mainly for efficiency, and up to now unproblematic (the section variable is still considered, with its initial type). One shouldn't ever modify the section context, compute, change or destruct it... sadly Coq doesn't enforce this. I patched the code so that if the variable changed type then it gets reindexed.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337519522/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]