[{"url":"https://api.github.com/repos/coq/coq/issues/comments/337543010","html_url":"https://github.com/coq/coq/issues/4776#issuecomment-337543010","issue_url":"https://api.github.com/repos/coq/coq/issues/4776","id":337543010,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0MzAxMA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-06-03T21:21:44Z","updated_at":"2017-10-18T10:27:31Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nI'd like to be able to tell the typeclass machinery that some instances are \nimpossible to solve, perhaps with\n  Hint Extern 0 (Proper <some pattern> some_identifier) => fail 1 : \ntypeclass_instances.\n\n\nHere's an example use-case:\n(** We would like to be able to abort typeclass search early.  But we can't do \nthat, and slowness ensues. *)\n\nRequire Import Coq.Setoids.Setoid Coq.Classes.Morphisms.\nRequire Import Coq.MSets.MSetPositive Coq.MSets.MSetInterface \nCoq.MSets.MSetProperties.\nRequire Import Coq.MSets.MSetFacts Coq.MSets.MSetDecide.\n\nSet Implicit Arguments.\n\nLocal Coercion is_true : bool >-> Sortclass.\n\nInstance pointwise_Proper {A B} R (f : A -> B) `{H : forall x, Proper R (f x)}\n  : Proper (pointwise_relation A R) f\n  := H.\n\nGlobal Instance or_iff_impl_morphism : Proper (iff ==> iff ==> impl) or.\nAdmitted.\n\nModule MSetExtensionsOn (E: DecidableType) (Import M: WSetsOn E).\n  Module Export BasicProperties := WPropertiesOn E M.\n  Module Export BasicFacts := WFactsOn E M.\n  Module Export BasicDec := WDecideOn E M.\n\n  Global Instance Equal_Equivalence : Equivalence Equal.\n  Admitted.\n  Axiom union_subset_1b : forall s s', subset s (union s s').\n  Axiom union_subset_2b : forall s s', subset s' (union s s').\n  Create HintDb setsb discriminated.\n  Hint Rewrite union_subset_1b union_subset_2b : setsb.\nEnd MSetExtensionsOn.\n\nModule MSetExtensions (M: Sets) := MSetExtensionsOn M.E M.\n\nModule PositiveSetExtensions0 := MSetExtensions PositiveSet.\nModule PositiveSetExtensions1 := MSetExtensions PositiveSet.\nModule PositiveSetExtensions2 := MSetExtensions PositiveSet.\nModule PositiveSetExtensions3 := MSetExtensions PositiveSet.\nModule Import PositiveSetExtensions := MSetExtensions PositiveSet.\n\nGoal forall s s', PositiveSet.subset s (PositiveSet.union s s').\nProof.\n  intros.\n  (*Typeclasses eauto := debug.*)\n  Time rewrite union_subset_1b. (* 9069 lines of tc resolution before success, \n0.75 s *)\n  Undo.\n  Time progress autorewrite with setsb. (* 18142 lines of tc resolution before \nsuccess, 1.4 s *)\n  exact (eq_refl : is_true true).\nQed.\n\nGoal forall t t0 : PositiveSet.t,\n    PositiveSet.Equal t0 t \\/ PositiveSet.Subset t0 t /\\ ~ PositiveSet.Equal t0 \nt -> False.\nProof.\n  intros ?? H.\n  (*Typeclasses eauto := debug.*)\n  Time try rewrite union_subset_1b in H. (* 2584 lines of tc resolution, 0.12 s \n*)\n  Time autorewrite with setsb in H. (* 25885 lines of tc resolution before \nfailure, 1.48 s *)\n  (** Suppose we allow these contradictory lemmas. *)\n  assert (forall R1 R2, Proper (PositiveSet.subset ==> R1 ==> R2) \nPositiveSet.Equal) by admit.\n  assert (forall R1 R2, Proper (PositiveSet.subset ==> R1 ==> R2) \nPositiveSet.Subset) by admit.\n  Time rewrite union_subset_1b in H. (* 0.008 s *)\n  (** autorewrite will, unsurprisingly, loop *)\nAbort.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337543010/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]