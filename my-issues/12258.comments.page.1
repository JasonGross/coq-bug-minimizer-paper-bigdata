[{"url":"https://api.github.com/repos/coq/coq/issues/comments/624601547","html_url":"https://github.com/coq/coq/issues/12258#issuecomment-624601547","issue_url":"https://api.github.com/repos/coq/coq/issues/12258","id":624601547,"node_id":"MDEyOklzc3VlQ29tbWVudDYyNDYwMTU0Nw==","user":{"login":"zeldovich","id":828308,"node_id":"MDQ6VXNlcjgyODMwOA==","avatar_url":"https://avatars.githubusercontent.com/u/828308?v=4","gravatar_id":"","url":"https://api.github.com/users/zeldovich","html_url":"https://github.com/zeldovich","followers_url":"https://api.github.com/users/zeldovich/followers","following_url":"https://api.github.com/users/zeldovich/following{/other_user}","gists_url":"https://api.github.com/users/zeldovich/gists{/gist_id}","starred_url":"https://api.github.com/users/zeldovich/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/zeldovich/subscriptions","organizations_url":"https://api.github.com/users/zeldovich/orgs","repos_url":"https://api.github.com/users/zeldovich/repos","events_url":"https://api.github.com/users/zeldovich/events{/privacy}","received_events_url":"https://api.github.com/users/zeldovich/received_events","type":"User","site_admin":false},"created_at":"2020-05-06T11:45:17Z","updated_at":"2020-05-06T11:45:17Z","author_association":"CONTRIBUTOR","body":"Explicitly specifying the types for `(Prelude.==)` seems reasonable.\r\n\r\nIn this particular case, `ExtrHaskellString.v` does not force the use of `ExtrHaskellBasic.v`, so the result of `String.eqb` might not be `Prelude.Bool`.  So perhaps we should annotate as `((Prelude.==) :: Prelude.String -> Prelude.String -> _)`, or just import `ExtrHaskellBasic` in `ExtrHaskellString`.","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/624601547/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/624722457","html_url":"https://github.com/coq/coq/issues/12258#issuecomment-624722457","issue_url":"https://api.github.com/repos/coq/coq/issues/12258","id":624722457,"node_id":"MDEyOklzc3VlQ29tbWVudDYyNDcyMjQ1Nw==","user":{"login":"JasonGross","id":396076,"node_id":"MDQ6VXNlcjM5NjA3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/396076?v=4","gravatar_id":"","url":"https://api.github.com/users/JasonGross","html_url":"https://github.com/JasonGross","followers_url":"https://api.github.com/users/JasonGross/followers","following_url":"https://api.github.com/users/JasonGross/following{/other_user}","gists_url":"https://api.github.com/users/JasonGross/gists{/gist_id}","starred_url":"https://api.github.com/users/JasonGross/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JasonGross/subscriptions","organizations_url":"https://api.github.com/users/JasonGross/orgs","repos_url":"https://api.github.com/users/JasonGross/repos","events_url":"https://api.github.com/users/JasonGross/events{/privacy}","received_events_url":"https://api.github.com/users/JasonGross/received_events","type":"User","site_admin":false},"created_at":"2020-05-06T15:35:36Z","updated_at":"2020-05-06T15:35:36Z","author_association":"MEMBER","body":"`((Prelude.==) :: Prelude.String -> Prelude.String -> _)` gives\r\n```\r\n    • Found type wildcard ‘_’ standing for ‘GHC.Base.Bool’\r\n      To use the inferred type, enable PartialTypeSignatures\r\n    • In an expression type signature:\r\n        GHC.Base.String -> GHC.Base.String -> _\r\n      In the first argument of ‘unsafeCoerce’, namely\r\n        ‘((GHC.Base.==) :: GHC.Base.String -> GHC.Base.String -> _)’\r\n      In the expression:\r\n        unsafeCoerce\r\n          ((GHC.Base.==) :: GHC.Base.String -> GHC.Base.String -> _)\r\n    • Relevant bindings include\r\n        t :: Base1\r\n          (bound at src/ExtractionHaskell/bedrock2_word_by_word_montgomery.hs:7270:17)\r\n        base_interp_beq :: Base1\r\n                           -> Base_interp -> Base_interp -> GHC.Base.Bool\r\n          (bound at src/ExtractionHaskell/bedrock2_word_by_word_montgomery.hs:7270:1)\r\n```\r\nIn any case, http://hackage.haskell.org/package/base-4.14.0.0/docs/Data-Eq.html seems to mandate that `(Prelude.==)` lands in `Prelude.Bool`, regardless of what `bool` is extracted to, and hence the extraction is ill-typed if it's expected to land in anything other than`Prelude.Bool`.  I reported this as https://github.com/coq/coq/issues/12257, and will prepare a pull request to fix both.","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/624722457/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]