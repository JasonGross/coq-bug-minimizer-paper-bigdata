[{"url":"https://api.github.com/repos/coq/coq/issues/comments/337553191","html_url":"https://github.com/coq/coq/issues/5476#issuecomment-337553191","issue_url":"https://api.github.com/repos/coq/coq/issues/5476","id":337553191,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU1MzE5MQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2017-04-18T21:19:25Z","updated_at":"2017-10-18T11:00:27Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nThis code works in v8.6, fails in trunk.  I suspect an econstr bug, given that \nreplacing [eauto] with [try eassumption] makes the code go through, as does \ninserting [revert H0; intro] before the [lazymatch].\n\nGoal forall (P : Prop) (T : Type) (m m' : T) (T0 T1 : Type) (P2 : forall _ : \nProp, Prop) \n            (P0 : Set) (x0 : P0) (P1 : forall (_ : P0) (_ : T), Prop)\n            (P3 : forall (_ : forall (_ : P0) (_ : T0) (_ : Prop), Prop) (_ : \nT) (_ : Prop), Prop)\n            (o : forall _ : P0, option T1)\n            (_ : P3\n                   (fun (k : P0) (_ : T0) (_ : Prop) =>\n                      match o k return Prop with\n                      | Some _ => True\n                      | None => False\n                      end) m' P) (_ : P2 (P1 x0 m))\n            (_ : forall (f : forall (_ : P0) (_ : T0) (_ : Prop), Prop) (m1 m2 \n: T) \n                        (k : P0) (e : T0) (_ : P2 (P1 k m1)), iff (P3 f m2 P) \n(f k e (P3 f m1 P))), False.\nProof.\n  intros ???????????? H0 H H1.\n  rewrite H1 in H0; eauto with nocore.\n  { lazymatch goal with\n    | H : match ?X with _ => _ end |- _\n      => first [ lazymatch goal with\n                 | [ H' : context[X] |- _ ] => idtac H\n                 end\n               | fail 1 \"could not find\" X ]\n    end. (* fails *)\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337553191/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337553192","html_url":"https://github.com/coq/coq/issues/5476#issuecomment-337553192","issue_url":"https://api.github.com/repos/coq/coq/issues/5476","id":337553192,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU1MzE5Mg==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2017-04-18T23:05:56Z","updated_at":"2017-10-18T11:00:27Z","author_association":"CONTRIBUTOR","body":"Comment author: @ppedrot\n\nMy understanding is that it is a bug due to the infamous pattern_of_constr function which is evar-sensitive by design. Here, ?X gets bound to a term which is not nf-normal, so that when passed to another pattern-matching, the aforementioned function does not normalize it by design, and thus fails.\n\nI think it is possible to fix this by normalizing eagerly terms bound to variables in Pretyping, but I'm slightly afraid of the potential cost for such a stupid workaround to an otherwise unrelated issue.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337553192/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337553195","html_url":"https://github.com/coq/coq/issues/5476#issuecomment-337553195","issue_url":"https://api.github.com/repos/coq/coq/issues/5476","id":337553195,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU1MzE5NQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2017-04-19T00:07:03Z","updated_at":"2017-10-18T11:00:27Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nThe \"correct\" solution is to make EConstr.constr_pattern like EConstr.constr, no?  But why is pattern_of_constr evar-sensitive by design?\n\nBut, uh, I'm a bit sketched out by the documentation:\n> (** [pattern_of_constr c] translates a term [c] with metavariables into\n>    a pattern; currently, no destructor (Cases, Fix, Cofix) and no\n>    existential variable are allowed in [c] *)\n\nIf that is true, why does this work?\n> Goal forall b, match b with true => True | false => False end -> True.\n>   intros b H.\n>   let T := type of H in\n>   lazymatch goal with\n>   | [ H : context[T] |- _ ] => idtac\n>   end.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337553195/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337553196","html_url":"https://github.com/coq/coq/issues/5476#issuecomment-337553196","issue_url":"https://api.github.com/repos/coq/coq/issues/5476","id":337553196,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU1MzE5Ng==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2017-04-19T09:57:56Z","updated_at":"2017-10-18T11:00:27Z","author_association":"CONTRIBUTOR","body":"Comment author: @ppedrot\n\nSee https://github.com/coq/coq/pull/574.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337553196/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337553197","html_url":"https://github.com/coq/coq/issues/5476#issuecomment-337553197","issue_url":"https://api.github.com/repos/coq/coq/issues/5476","id":337553197,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU1MzE5Nw==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2017-04-19T10:02:31Z","updated_at":"2017-10-18T11:00:27Z","author_association":"CONTRIBUTOR","body":"Comment author: @ppedrot\n\n> The \"correct\" solution is to make EConstr.constr_pattern like EConstr.constr,\n> no?  But why is pattern_of_constr evar-sensitive by design?\n> But, uh, I'm a bit sketched out by the documentation:\n\nThe problem is that pattern_of_constr actually relies on evars to encode underscore patterns coming from a constr. But sometime, the pretyper solves such holes without being asked for it, so that the pattern disappears and is replaced by some actual term.\n\nTherefore, the current hack we did was to keep pattern_of_constr sensitive. The proper fix would be to understand why the pretyper fills holes randomly, or even better, getting rid of pattern_of_constr which is already a hack itself. Hugo said that we need to pretype to add coercions in the pattern, but I'm actually wondering how often we really need coercions in patterns, and if this tradeoff in complexity (both of code and runtime) is relevant.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337553197/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337553199","html_url":"https://github.com/coq/coq/issues/5476#issuecomment-337553199","issue_url":"https://api.github.com/repos/coq/coq/issues/5476","id":337553199,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU1MzE5OQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2017-04-19T10:40:46Z","updated_at":"2017-10-18T11:00:27Z","author_association":"CONTRIBUTOR","body":"Comment author: @herbelin\n\n> Hugo said that we need to pretype to add coercions in the pattern,\n> but I'm actually wondering how often we really need coercions in patterns,\n> and if this tradeoff in complexity (both of code and runtime) is relevant.\n\nMore generally, this is the question of whether we want to type pattern or not.\n\nEven if we can already statically define Ltac functions with ill-typed patterns as e.g.:\n\nLtac f x := match x with S S => idtac end.  \n\nDon't we want at some time to inform the Ltac writer that s/he wrote such an ill-typed pattern?\n\nBut if we renounce to type the patterns, then we can renounce to the idea of inserting coercions. After all, we already renounced to support complex patterns as in:\n\nFail Ltac g x y := match x with (match y with 2 => _ | _ => _ end) => idtac end.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337553199/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337553201","html_url":"https://github.com/coq/coq/issues/5476#issuecomment-337553201","issue_url":"https://api.github.com/repos/coq/coq/issues/5476","id":337553201,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU1MzIwMQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2017-04-24T13:59:17Z","updated_at":"2017-10-18T11:00:27Z","author_association":"CONTRIBUTOR","body":"Comment author: @maximedenes\n\nI believe it is useful to type the patterns. However, if we don't try to insert coercions, it looks trivial to do in a way that respects the evarmap abstraction: just type the term, if it succeeds, throw away the result (and its evar map), and keep the original one.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337553201/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337553203","html_url":"https://github.com/coq/coq/issues/5476#issuecomment-337553203","issue_url":"https://api.github.com/repos/coq/coq/issues/5476","id":337553203,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU1MzIwMw==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2017-04-24T14:02:32Z","updated_at":"2017-10-18T11:00:28Z","author_association":"CONTRIBUTOR","body":"Comment author: @maximedenes\n\nPMP's fix pushed to trunk. Thanks!\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337553203/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]