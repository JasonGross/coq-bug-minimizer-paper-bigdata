[{"url":"https://api.github.com/repos/coq/coq/issues/comments/337519844","html_url":"https://github.com/coq/coq/issues/3353#issuecomment-337519844","issue_url":"https://api.github.com/repos/coq/coq/issues/3353","id":337519844,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxOTg0NA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-05-29T16:35:27Z","updated_at":"2018-05-23T17:45:56Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\r\n\r\nIt would be nice to have proper variance analysis for universe levels.  For example, with -indices-matter, it would be nice if `p : @paths Type (* U_i *) A B` could also be typed as `@paths Type (* U_j *) A B` for U_j >= U_i.\r\n\r\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337519844/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337519845","html_url":"https://github.com/coq/coq/issues/3353#issuecomment-337519845","issue_url":"https://api.github.com/repos/coq/coq/issues/3353","id":337519845,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxOTg0NQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-07-21T23:32:40Z","updated_at":"2017-10-18T09:19:13Z","author_association":"CONTRIBUTOR","body":"Comment author: @ppedrot\n\nIsn't that subtyping undecidable in general (e.g. tricky recursive structures)?\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337519845/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337519847","html_url":"https://github.com/coq/coq/issues/3353#issuecomment-337519847","issue_url":"https://api.github.com/repos/coq/coq/issues/3353","id":337519847,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxOTg0Nw==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-07-22T02:40:19Z","updated_at":"2017-11-19T12:15:26Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\r\n\r\nI think you can decide it by eta-expanding the term and refreshing the universes on the return annotation and the constructors?  Unless there are recursive structures with no nice eta-expansion...\r\n\r\nFor example, expand `p : @ eq Type@ {i} A B` to\r\n```\r\nmatch p in (_ = B') return @ eq Type@ {j} A B' with\r\n  | eq_refl => @ eq_refl Type@ {k} A\r\nend\r\n```\r\nand then enforce whatever constraints would arise from typechecking this term from scratch.\r\n\r\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337519847/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337519849","html_url":"https://github.com/coq/coq/issues/3353#issuecomment-337519849","issue_url":"https://api.github.com/repos/coq/coq/issues/3353","id":337519849,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxOTg0OQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2015-01-30T19:42:49Z","updated_at":"2017-10-18T09:19:13Z","author_association":"CONTRIBUTOR","body":"Comment author: @ppedrot\n\n*** Bug [BZ#2766](https://github.com/coq/coq/issues?q=is%3Aissue%20%22Original%20bug%20ID%3A%20BZ%232766%22) has been marked as a duplicate of this bug. ***\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337519849/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/345481030","html_url":"https://github.com/coq/coq/issues/3353#issuecomment-345481030","issue_url":"https://api.github.com/repos/coq/coq/issues/3353","id":345481030,"node_id":"MDEyOklzc3VlQ29tbWVudDM0NTQ4MTAzMA==","user":{"login":"SkySkimmer","id":2461932,"node_id":"MDQ6VXNlcjI0NjE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/2461932?v=4","gravatar_id":"","url":"https://api.github.com/users/SkySkimmer","html_url":"https://github.com/SkySkimmer","followers_url":"https://api.github.com/users/SkySkimmer/followers","following_url":"https://api.github.com/users/SkySkimmer/following{/other_user}","gists_url":"https://api.github.com/users/SkySkimmer/gists{/gist_id}","starred_url":"https://api.github.com/users/SkySkimmer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/SkySkimmer/subscriptions","organizations_url":"https://api.github.com/users/SkySkimmer/orgs","repos_url":"https://api.github.com/users/SkySkimmer/repos","events_url":"https://api.github.com/users/SkySkimmer/events{/privacy}","received_events_url":"https://api.github.com/users/SkySkimmer/received_events","type":"User","site_admin":false},"created_at":"2017-11-19T00:05:27Z","updated_at":"2017-11-19T00:05:27Z","author_association":"CONTRIBUTOR","body":"Semantically this is just cumulativity of inductive types (in the metatheory you compare anonymous inductive types with both polymorphic universes and parameters already substituted).\r\nImplementation wise it's kind of a generalisation of #6128 so if nobody else does I might do it someday.","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/345481030/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/473802644","html_url":"https://github.com/coq/coq/issues/3353#issuecomment-473802644","issue_url":"https://api.github.com/repos/coq/coq/issues/3353","id":473802644,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3MzgwMjY0NA==","user":{"login":"DanGrayson","id":700228,"node_id":"MDQ6VXNlcjcwMDIyOA==","avatar_url":"https://avatars.githubusercontent.com/u/700228?v=4","gravatar_id":"","url":"https://api.github.com/users/DanGrayson","html_url":"https://github.com/DanGrayson","followers_url":"https://api.github.com/users/DanGrayson/followers","following_url":"https://api.github.com/users/DanGrayson/following{/other_user}","gists_url":"https://api.github.com/users/DanGrayson/gists{/gist_id}","starred_url":"https://api.github.com/users/DanGrayson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/DanGrayson/subscriptions","organizations_url":"https://api.github.com/users/DanGrayson/orgs","repos_url":"https://api.github.com/users/DanGrayson/repos","events_url":"https://api.github.com/users/DanGrayson/events{/privacy}","received_events_url":"https://api.github.com/users/DanGrayson/received_events","type":"User","site_admin":false},"created_at":"2019-03-18T07:45:21Z","updated_at":"2019-03-18T07:45:21Z","author_association":"CONTRIBUTOR","body":"Such a change would be very good for UniMath, as this practical example shows:\r\n```\r\nSet Universe Polymorphism. Set Primitive Projections. Set Polymorphic Inductive Cumulativity.\r\nSet Printing All. Set Printing Universes.\r\nInductive paths@{i} (A:Type@{i}) (a:A) : A -> Type@{i} := idpath : paths A a a.\r\nInductive nat : Type := | O : nat | S : nat -> nat.\r\nRecord total2@{i} (T : Type@{i}) (P : T -> Type@{i}) : Type@{i} := tpair { pr1 : T; pr2 : P pr1 }.\r\nDefinition iscontr@{i} (T:Type@{i}) : Type@{i} := total2 T (fun cntr => forall t:T, paths _ t cntr).\r\nFixpoint isofhlevel@{i} (n : nat) (X : Type@{i}) : Type@{i} := match n with | O => iscontr X | S m => forall x : X, forall x' : X, (isofhlevel m (paths _ x x')) end.\r\nDefinition isaprop@{i} := isofhlevel@{i} (S O).\r\nDefinition isaset@{i} := isofhlevel@{i} (S (S O)).\r\nDefinition hSet@{i i'} : Type@{i'} := @total2@{i'} Type@{i} isaset@{i}.\r\nDefinition change_hSet@{i i' j j' | i < j, i < i', j < j'} :\r\n  hSet@{i i'} -> hSet@{j j'}.\r\nProof.\r\n  intros X.\r\n  Fail exact X.                 (* fails with universe inconsistency *)\r\n  exact (tpair _ isaset@{j} (pr1 _ _ X) (pr2 _ _ X)).\r\nDefined.\r\n```","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/473802644/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/473851130","html_url":"https://github.com/coq/coq/issues/3353#issuecomment-473851130","issue_url":"https://api.github.com/repos/coq/coq/issues/3353","id":473851130,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3Mzg1MTEzMA==","user":{"login":"mattam82","id":98373,"node_id":"MDQ6VXNlcjk4Mzcz","avatar_url":"https://avatars.githubusercontent.com/u/98373?v=4","gravatar_id":"","url":"https://api.github.com/users/mattam82","html_url":"https://github.com/mattam82","followers_url":"https://api.github.com/users/mattam82/followers","following_url":"https://api.github.com/users/mattam82/following{/other_user}","gists_url":"https://api.github.com/users/mattam82/gists{/gist_id}","starred_url":"https://api.github.com/users/mattam82/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mattam82/subscriptions","organizations_url":"https://api.github.com/users/mattam82/orgs","repos_url":"https://api.github.com/users/mattam82/repos","events_url":"https://api.github.com/users/mattam82/events{/privacy}","received_events_url":"https://api.github.com/users/mattam82/received_events","type":"User","site_admin":false},"created_at":"2019-03-18T10:20:11Z","updated_at":"2019-03-18T10:20:11Z","author_association":"MEMBER","body":"It’s a non-trivial generalization of cumulativity of inductive types, as you change the universe that is in the sigma, but that should be justifiable using the same model construction, where Type@{i} is included in Type@{j}. In this particular case the isaset@{j} proof is obtained by eta expansion of the isaset@{i} proof, right? It seems finding out that isaset is covariant in its type argument would require computing the normal form of its application to a parameter, like we do for Cumulative Inductives, as Jason suggests. ","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/473851130/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/473852842","html_url":"https://github.com/coq/coq/issues/3353#issuecomment-473852842","issue_url":"https://api.github.com/repos/coq/coq/issues/3353","id":473852842,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3Mzg1Mjg0Mg==","user":{"login":"mattam82","id":98373,"node_id":"MDQ6VXNlcjk4Mzcz","avatar_url":"https://avatars.githubusercontent.com/u/98373?v=4","gravatar_id":"","url":"https://api.github.com/users/mattam82","html_url":"https://github.com/mattam82","followers_url":"https://api.github.com/users/mattam82/followers","following_url":"https://api.github.com/users/mattam82/following{/other_user}","gists_url":"https://api.github.com/users/mattam82/gists{/gist_id}","starred_url":"https://api.github.com/users/mattam82/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mattam82/subscriptions","organizations_url":"https://api.github.com/users/mattam82/orgs","repos_url":"https://api.github.com/users/mattam82/repos","events_url":"https://api.github.com/users/mattam82/events{/privacy}","received_events_url":"https://api.github.com/users/mattam82/received_events","type":"User","site_admin":false},"created_at":"2019-03-18T10:25:17Z","updated_at":"2019-03-18T10:25:17Z","author_association":"MEMBER","body":"In practice we’d probably need user annotations on the expected variance of parameters, that the kernel could check rather than infer. Inference of cumulativity already blows up in some cases for inductives.","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/473852842/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/474738614","html_url":"https://github.com/coq/coq/issues/3353#issuecomment-474738614","issue_url":"https://api.github.com/repos/coq/coq/issues/3353","id":474738614,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3NDczODYxNA==","user":{"login":"DanGrayson","id":700228,"node_id":"MDQ6VXNlcjcwMDIyOA==","avatar_url":"https://avatars.githubusercontent.com/u/700228?v=4","gravatar_id":"","url":"https://api.github.com/users/DanGrayson","html_url":"https://github.com/DanGrayson","followers_url":"https://api.github.com/users/DanGrayson/followers","following_url":"https://api.github.com/users/DanGrayson/following{/other_user}","gists_url":"https://api.github.com/users/DanGrayson/gists{/gist_id}","starred_url":"https://api.github.com/users/DanGrayson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/DanGrayson/subscriptions","organizations_url":"https://api.github.com/users/DanGrayson/orgs","repos_url":"https://api.github.com/users/DanGrayson/repos","events_url":"https://api.github.com/users/DanGrayson/events{/privacy}","received_events_url":"https://api.github.com/users/DanGrayson/received_events","type":"User","site_admin":false},"created_at":"2019-03-20T08:46:07Z","updated_at":"2019-03-20T08:46:07Z","author_association":"CONTRIBUTOR","body":"I don't know how to answer your questions, but I'd be glad to annotate things.  Ideally the result would be that a function that is declared to accept two hsets at the same level would accept them also at different levels.","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/474738614/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]