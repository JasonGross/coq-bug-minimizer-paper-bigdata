Comment author: @JasonGross

```coq
(* File reduced by coq-bug-finder from original input, then from 2352 lines to 162 lines, then from 48 lines to 33 lines *)
(* coqc version 8.5beta1 (January 2015) compiled on Jan 16 2015 7:25:14 with OCaml 4.01.0
   coqtop version cagnode15:/afs/csail.mit.edu/u/j/jgross/coq-8.5,v8.5 (81489f299ef60c21ac3da1d2157b02c3b41886d1) *)

Notation compose := (fun g f x => g (f x)).
Notation "g 'o' f" := (compose g f) (at level 40, left associativity) : function_scope.
Open Scope function_scope.
Inductive paths {A : Type} (a : A) : A -> Type := idpath : paths a a where "x = y" := (@ paths _ x y) : type_scope.
Arguments idpath {A a} , [A] a.
Definition ap {A B:Type} (f:A -> B) {x y:A} (p:x = y) : f x = f y := match p with idpath => idpath end.
Class IsEquiv {A B : Type} (f : A -> B) := { equiv_inv : B -> A }.
Notation "f ^-1" := (@ equiv_inv _ _ f _) (at level 3, format "f '^-1'") : equiv_scope.
Local Open Scope equiv_scope.
Axiom eisretr : forall {A B} (f : A -> B) `{IsEquiv A B f} x, f (f^-1 x) = x.
Generalizable Variables A B C f g.
Global Instance isequiv_compose `{IsEquiv A B f} `{IsEquiv B C g} : IsEquiv (compose g f) | 1000
  := Build_IsEquiv A C (compose g f) (compose f^-1 g^-1).
Definition isequiv_homotopic {A B} (f : A -> B) {g : A -> B} `{IsEquiv A B f} (h : forall x, f x = g x) : IsEquiv g
  := Build_IsEquiv _ _ g (f ^-1).
Global Instance isequiv_inverse {A B} (f : A -> B) `{IsEquiv A B f} : IsEquiv f^-1 | 10000
  := Build_IsEquiv B A f^-1 f.
Definition cancelR_isequiv {A B C} (f : A -> B) {g : B -> C}
  `{IsEquiv A B f} `{IsEquiv A C (g o f)}
  : IsEquiv g.
Proof.
  Unset Typeclasses Modulo Eta.
  exact (isequiv_homotopic (compose (compose g f) f^-1)
                           (fun b => ap g (eisretr f b))) || fail "too early".
  Undo.
  Set Typeclasses Modulo Eta.
  Set Typeclasses Dependency Order.
  Set Typeclasses Debug.
  exact (isequiv_homotopic (compose (compose g f) f^-1)
                           (fun b => ap g (eisretr f b))).
  (* Toplevel input, characters 20-132:
Error: Unable to satisfy the following constraints:
UNDEFINED EVARS:
 ?X124==[A B C f g H H0 |- IsEquiv (g o f o f^-1)] (parameter H of
          @ isequiv_homotopic) {H}
 ?X132==[A B C f g H H0 {b} |- IsEquiv f] (parameter H of @ eisretr) {H0} *)
  (* Debug: 1.1: exact H on (IsEquiv f)
Debug: 2.1: apply @ isequiv_compose on (IsEquiv (g o f o f^-1))
Debug: 2.1.1: no match for (IsEquiv (fun x : B => x)) , 4 possibilities
Debug: Backtracking after apply @ isequiv_compose
Debug: Backtracking after exact H
Debug: 1.1: exact H on (IsEquiv f)
Debug: 2.1: apply @ isequiv_compose on (IsEquiv (g o f o f^-1))
Debug: 2.1.1: no match for (IsEquiv (fun x : B => x)) , 4 possibilities
Debug: Backtracking after apply @ isequiv_compose
Debug: Backtracking after exact H
 *)
```

Does `Set Typeclasses Modulo Eta` backtrack after eta-expansion, or does it always eta-expand everything and not try the non-eta-expanded goal?


Given that this option is deprecated and is going to be removed, this is a "won't fix".
