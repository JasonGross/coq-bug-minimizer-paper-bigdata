[{"url":"https://api.github.com/repos/coq/coq/issues/comments/647148197","html_url":"https://github.com/coq/coq/issues/12557#issuecomment-647148197","issue_url":"https://api.github.com/repos/coq/coq/issues/12557","id":647148197,"node_id":"MDEyOklzc3VlQ29tbWVudDY0NzE0ODE5Nw==","user":{"login":"ejgallego","id":7192257,"node_id":"MDQ6VXNlcjcxOTIyNTc=","avatar_url":"https://avatars.githubusercontent.com/u/7192257?v=4","gravatar_id":"","url":"https://api.github.com/users/ejgallego","html_url":"https://github.com/ejgallego","followers_url":"https://api.github.com/users/ejgallego/followers","following_url":"https://api.github.com/users/ejgallego/following{/other_user}","gists_url":"https://api.github.com/users/ejgallego/gists{/gist_id}","starred_url":"https://api.github.com/users/ejgallego/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ejgallego/subscriptions","organizations_url":"https://api.github.com/users/ejgallego/orgs","repos_url":"https://api.github.com/users/ejgallego/repos","events_url":"https://api.github.com/users/ejgallego/events{/privacy}","received_events_url":"https://api.github.com/users/ejgallego/received_events","type":"User","site_admin":false},"created_at":"2020-06-21T16:13:41Z","updated_at":"2020-06-21T16:13:41Z","author_association":"MEMBER","body":"See the backtrace in #12558 for more information, some kind of cycle seems to be created.","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/647148197/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/647334870","html_url":"https://github.com/coq/coq/issues/12557#issuecomment-647334870","issue_url":"https://api.github.com/repos/coq/coq/issues/12557","id":647334870,"node_id":"MDEyOklzc3VlQ29tbWVudDY0NzMzNDg3MA==","user":{"login":"herbelin","id":460771,"node_id":"MDQ6VXNlcjQ2MDc3MQ==","avatar_url":"https://avatars.githubusercontent.com/u/460771?v=4","gravatar_id":"","url":"https://api.github.com/users/herbelin","html_url":"https://github.com/herbelin","followers_url":"https://api.github.com/users/herbelin/followers","following_url":"https://api.github.com/users/herbelin/following{/other_user}","gists_url":"https://api.github.com/users/herbelin/gists{/gist_id}","starred_url":"https://api.github.com/users/herbelin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/herbelin/subscriptions","organizations_url":"https://api.github.com/users/herbelin/orgs","repos_url":"https://api.github.com/users/herbelin/repos","events_url":"https://api.github.com/users/herbelin/events{/privacy}","received_events_url":"https://api.github.com/users/herbelin/received_events","type":"User","site_admin":false},"created_at":"2020-06-22T07:19:32Z","updated_at":"2020-06-22T07:19:32Z","author_association":"MEMBER","body":"A shorter example is:\r\n```\r\nCheck ((fun (v : nat) (pf : S (?[f] 0) = S v :> nat) => v) ?[x] eq_refl).\r\n```\r\n\r\nThe occur-check in `Evarsolve.occur_evar_upto_types` is too weak. It accepts the circularity `?x := ?f[v:=?x] 0`.\r\n\r\nIt is not bad that it accepts this circularity, because this is an erasable circularity. For instance `?f[v] := fun _ => v` would be an ok solution. But it is bad that it accepts it w/o first restricting the problem to its valid solutions.\r\n\r\nPossible strategies:\r\n- to postpone \r\n- to restrict `?f` to remove the dependency in `v:=?x` (but possibly loosing solutions)\r\n- to refine the problem, making a disjunction on either depending on ?x and seeing that there is then no other choice than `?f:=fun _ => v` or restricting. Indeed, IINM, the problem has two disjoint most general solutions which cannot be discriminated anyway:\r\n  - `?f[v] := fun _ => v` and `?x` unresolved\r\n  - `?f[v] := ?f'` and `?x := ?f' 0` for unresolved restriction `?f'` of `?f`\r\n\r\nA way to implement this would be to absorb the argument `0` (with `evar_absorb_arguments`) and to send the problem to `solve_evar_evar`. In general, this should be done with care because it loses information on when to apply the 1st order unification heuristics, but in a `solve_simple_eqn` case like `?x = ?y args` this seems ok.\r\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/647334870/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/647391904","html_url":"https://github.com/coq/coq/issues/12557#issuecomment-647391904","issue_url":"https://api.github.com/repos/coq/coq/issues/12557","id":647391904,"node_id":"MDEyOklzc3VlQ29tbWVudDY0NzM5MTkwNA==","user":{"login":"Janno","id":70595,"node_id":"MDQ6VXNlcjcwNTk1","avatar_url":"https://avatars.githubusercontent.com/u/70595?v=4","gravatar_id":"","url":"https://api.github.com/users/Janno","html_url":"https://github.com/Janno","followers_url":"https://api.github.com/users/Janno/followers","following_url":"https://api.github.com/users/Janno/following{/other_user}","gists_url":"https://api.github.com/users/Janno/gists{/gist_id}","starred_url":"https://api.github.com/users/Janno/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Janno/subscriptions","organizations_url":"https://api.github.com/users/Janno/orgs","repos_url":"https://api.github.com/users/Janno/repos","events_url":"https://api.github.com/users/Janno/events{/privacy}","received_events_url":"https://api.github.com/users/Janno/received_events","type":"User","site_admin":false},"created_at":"2020-06-22T09:14:07Z","updated_at":"2020-06-22T09:14:07Z","author_association":"CONTRIBUTOR","body":"I noticed that the example does not crash when using Unicoq. It might be worth looking into what their solution is.","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/647391904/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]