Comment author: @JasonGross

(* File reduced by coq-bug-finder from original input, then from 5104 lines to 163 lines, then from 121 lines to 52 lines *)
(* coqc version trunk (August 2014) compiled on Aug 31 2014 10:12:32 with OCaml 4.01.0
   coqtop version cagnode17:/afs/csail.mit.edu/u/j/jgross/coq-trunk,trunk (437b91a3ffd7327975a129b95b24d3f66ad7f3e4) *)
Inductive paths {A : Type} (a : A) : A -> Type := idpath : paths a a.
Arguments idpath {A a} , [A] a.
Notation "x = y :> A" := (@ paths A x y) : type_scope.
Notation "x = y" := (x = y :>_) : type_scope.
Delimit Scope path_scope with path.
Definition concat {A : Type} {x y z : A} (p : x = y) (q : y = z) : x = z := match p, q with idpath, idpath => idpath end.
Definition inverse {A : Type} {x y : A} (p : x = y) : y = x := match p with idpath => idpath end.
Notation "1" := idpath : path_scope.
Notation "p @  q" := (concat p q) (at level 20) : path_scope.
Notation "p ^" := (inverse p) (at level 3, format "p '^'") : path_scope.
Definition ap {A B:Type} (f:A -> B) {x y:A} (p:x = y) : f x = f y := match p with idpath => idpath end.
Definition Sect {A B : Type} (s : A -> B) (r : B -> A) := forall x : A, r (s x) = x.
Class IsEquiv {A B : Type} (f : A -> B) := { equiv_inv : B -> A ; eisretr : Sect equiv_inv f }.
Axiom path_universe : forall {A B : Type} (f : A -> B) {feq : IsEquiv f}, (A = B).

Definition Lift : Type@ {i} -> Type@ {j}
  := Eval hnf in let lt := Type@ {i} : Type@ {j} in fun T => T.

Definition lift {T} : T -> Lift T := fun x => x.

Instance isembedding_Lift x y : IsEquiv (@ ap _ _ Lift x y).
Proof.
  refine (Build_IsEquiv _ _ _ _ _).
  {
    intro H'.
    pose proof ((fun H0 => (@ path_universe _ _ (@ lift x) (H0 x) @  H' @  (@ path_universe _ _ (@ lift y) (H0 y))^)))%path as H''.
    set (id := fun T (x : T) => x).
    change @ IsEquiv with (id _ (@ IsEquiv)) in *.
    refine (match H'' _ with idpath => idpath end).
    subst id; simpl.
    intro.
    exact (@ Build_IsEquiv
             _ _
             (fun x => x)
             (fun x => x)
             (fun _ => idpath)).
  }
  {
    hnf; simpl.
    intro x0.
    revert x0.
    intro x0.
    pattern x0.
(* Toplevel input, characters 15-26:
Error: The abstracted term
"fun p : Lift x = Lift y =>
 ap Lift
   match
     ((path_universe lift @  p) @  (path_universe lift)^)%path in (_ = T)
     return (x = T)
   with
   | 1%path => 1%path
   end = p" is not well typed.
Illegal application:
The term "paths" of type "forall A : Type, A -> A -> Type"
cannot be applied to the terms
 "Type" : "Type"
 "x" : "Type"
 "T" : "Type"
The 3rd term has type "Type@ {Top.76}" which should be coercible to
 "Type@ {Top.77}".
 *)


Comment author: @ppedrot

The faulty one is actually revert which should not succeed. If you try to finish your proof by [admit. Qed.] after the revert, you will get a universe inconsistency.


Comment author: @JasonGross

Gah.  Why does [refine (match H'' _ with idpath => idpath end).] succeed?  That is the step that causes the universe inconsistency.


Comment author: @ppedrot

The refine tactic does not really check that the resulting term is typable...


Comment author: @aspiwack

Well it trusts the pretyper to avoid typing the term yet a third time. Apparently it does not detect universe inconsistencies, I'll try and ask Matthieu how it could be achieved.


Comment author: @aspiwack

As mysterious as it is, it appears that this particular bug has been fixed in trunk without any conscious action from anybody. The offending refine reports a universe inconsistency as it should.

Matthieu confirms that the pretyping and typing operation all report universe inconsistencies when they arise.


