[{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518750","html_url":"https://github.com/coq/coq/issues/3286#issuecomment-337518750","issue_url":"https://api.github.com/repos/coq/coq/issues/3286","id":337518750,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxODc1MA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-04-19T06:00:17Z","updated_at":"2017-10-18T09:16:06Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nRequire Import FunctionalExtensionality.\n\nLtac make_apply_under_binders_in lem H :=\n  let tac := make_apply_under_binders_in in\n  match type of H with\n    | forall x : ?T, @ ?P x\n      => let ret := constr:(fun x' : T =>\n                              let Hx := H x' in\n                              $(let ret' := tac lem Hx in\n                                exact ret')$) in\n         match ret with\n             | fun x => Some (@ ?P x) => let P' := (eval cbv zeta in P) in\n                                        constr:(Some P')\n         end\n    | _ => let ret := constr:($(match goal with\n                                  | _ => (let H' := fresh in\n                                          pose H as H';\n                                          apply lem in H';\n                                          exact (Some H'))\n                                  | _ => exact (@ None nat)\n                                end\n                               )$) in\n           let ret' := (eval cbv beta zeta in ret) in\n           constr:(ret')\n    | _ => constr:(@ None nat)\n  end.\n\nLtac apply_under_binders_in lem H :=\n  let H' := make_apply_under_binders_in lem H in\n  let H'0 := match H' with Some ?H'0 => constr:(H'0) end in\n  let H'' := fresh in\n  pose proof H'0 as H'';\n    clear H;\n    rename H'' into H.\n\nGoal forall A B C (f g : forall (x : A) (y : B x), C x y), (forall x y, f x y = g x y) -> True.\nProof.\n  intros A B C f g H.\n  let lem := constr:(@ functional_extensionality_dep) in\n  apply_under_binders_in lem H.\n(* Anomaly: Uncaught exception Not_found(_). Please report. *)\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518750/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518753","html_url":"https://github.com/coq/coq/issues/3286#issuecomment-337518753","issue_url":"https://api.github.com/repos/coq/coq/issues/3286","id":337518753,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxODc1Mw==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-06-22T23:54:20Z","updated_at":"2017-10-18T09:16:07Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nThis has been fixed in trunk.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518753/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518754","html_url":"https://github.com/coq/coq/issues/3286#issuecomment-337518754","issue_url":"https://api.github.com/repos/coq/coq/issues/3286","id":337518754,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxODc1NA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-06-22T23:55:05Z","updated_at":"2017-10-18T09:16:07Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nFor the record, the correct test case is:\n\nRequire Import FunctionalExtensionality.\n\nLtac make_apply_under_binders_in lem H :=\n  let tac := make_apply_under_binders_in in\n  match type of H with\n    | forall x : ?T, @ ?P x\n      => let ret := constr:(fun x' : T =>\n                              let Hx := H x' in\n                              $(let ret' := tac lem Hx in\n                                exact ret')$) in\n         match eval cbv zeta in ret with\n           | fun x => Some (@ ?P x) => let P' := (eval cbv zeta in P) in\n                                      constr:(Some P')\n         end\n    | _ => let ret := constr:($(match goal with\n                                  | _ => (let H' := fresh in\n                                          pose H as H';\n                                          apply lem in H';\n                                          exact (Some H'))\n                                  | _ => exact (@ None nat)\n                                end\n                               )$) in\n           let ret' := (eval cbv beta zeta in ret) in\n           constr:(ret')\n    | _ => constr:(@ None nat)\n  end.\n\nLtac apply_under_binders_in lem H :=\n  let H' := make_apply_under_binders_in lem H in\n  let H'0 := match H' with Some ?H'0 => constr:(H'0) end in\n  let H'' := fresh in\n  pose proof H'0 as H'';\n    clear H;\n    rename H'' into H.\nGoal forall A B C (f g : forall (x : A) (y : B x), C x y), (forall x y, f x y = g x y) -> True.\nProof.\n  intros A B C f g H.\n  let lem := constr:(@ functional_extensionality_dep) in\n  apply_under_binders_in lem H.\n(* Anomaly: Uncaught exception Not_found(_). Please report. *)\n\n\n(There's an extra [eval cbv zeta in] in a [match].)\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518754/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]