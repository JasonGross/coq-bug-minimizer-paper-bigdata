[{"url":"https://api.github.com/repos/coq/coq/issues/comments/337526976","html_url":"https://github.com/coq/coq/issues/3785#issuecomment-337526976","issue_url":"https://api.github.com/repos/coq/coq/issues/3785","id":337526976,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyNjk3Ng==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-10-30T02:41:24Z","updated_at":"2017-10-18T09:39:49Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\n(* File reduced by coq-bug-finder from original input, then from 9765 lines to 178 lines, then from 145 lines to 102 lines, then from 99 lines to 64 lines *)\n(* coqc version trunk (October 2014) compiled on Oct 28 2014 14:33:38 with OCaml 4.01.0\n   coqtop version cagnode15:/afs/csail.mit.edu/u/j/jgross/coq-trunk,(no branch) (53bfe9cf58a3c40e6eb7120d25c1633a9cea3126) *)\nNotation \"( x ; y )\" := (existT _ x y).\nNotation pr1 := projT1.\nDefinition compose {A B C : Type} (g : B -> C) (f : A -> B) := fun x => g (f x).\nNotation \"g 'o' f\" := (compose g f) (at level 40, left associativity) : function_scope.\nOpen Scope function_scope.\nDefinition pointwise_paths {A} {P:A->Type} (f g:forall x:A, P x) := forall x:A, f x = g x.\nNotation \"f == g\" := (pointwise_paths f g) (at level 70, no associativity) : type_scope.\nDefinition hfiber {A B : Type} (f : A -> B) (y : B) := { x : A & f x = y }.\nRecord UnitSubuniverse :=\n  { inO_internal : Type -> Type ;\n    O_reflector : Type -> Type ;\n    to : forall T, T -> O_reflector T }.\nCoercion O_reflector : UnitSubuniverse >-> Funclass.\nClass In (O : UnitSubuniverse) (T : Type) := {}.\nGlobal Instance O_inO {O : UnitSubuniverse} (T : Type) : In O (O T).\nModule NonPrim.\n  Unset Primitive Projections.\n  Record ReflectiveSubuniverse :=\n    { rsubu : UnitSubuniverse ;\n      O_rec : forall {P Q : Type} {Q_inO : In rsubu Q} (f : P -> Q), rsubu P -> Q }.\n  Arguments O_rec {O P Q Q_inO} f x : rename.\n  Coercion rsubu : ReflectiveSubuniverse >-> UnitSubuniverse.\n  Definition O_functor (O : ReflectiveSubuniverse) {A B : Type} (f : A -> B) : O A -> O B.\n    exact (O_rec (to O B o f)).\n  Defined.\n  Axiom to_O_natural : forall (O : ReflectiveSubuniverse) {A B} (f : A -> B),\n                         (O_functor O f) o (to O A) == (to O B) o f.\n  Record Modality :=\n    { msubu : UnitSubuniverse ;\n      O_ind : forall A (B : msubu A -> Type) (B_inO : forall oa, In msubu (B oa)),\n                (forall a, B (to msubu A a)) -> forall a, B a }.\n  Arguments O_ind {O} {A} B {B_inO} f a : rename.\n  Definition modality_to_reflective_subuniverse (O : Modality)\n  : ReflectiveSubuniverse.\n    exact (Build_ReflectiveSubuniverse (msubu O)\n                                       (fun P Q H => O_ind (fun _ => Q))).\n  Defined.\n  Coercion modality_to_reflective_subuniverse : Modality >-> ReflectiveSubuniverse.\n  Goal forall (O' : Modality) (A B : Type) (f : A -> B) (a : A),\n         O_functor O' (@ projT1 _ _) (to O' (hfiber f (f a)) (a; eq_refl)) = to (msubu O') A a.\n    clear; intros.\n    apply (@ to_O_natural O').\n    Undo.\n    apply to_O_natural.\n  Defined.\nEnd NonPrim.\nModule Prim.\n  Set Primitive Projections.\n  Record ReflectiveSubuniverse :=\n    { rsubu : UnitSubuniverse ;\n      O_rec : forall {P Q : Type} {Q_inO : In rsubu Q} (f : P -> Q), rsubu P -> Q }.\n  Arguments O_rec {O P Q Q_inO} f x : rename.\n  Coercion rsubu : ReflectiveSubuniverse >-> UnitSubuniverse.\n  Definition O_functor (O : ReflectiveSubuniverse) {A B : Type} (f : A -> B) : O A -> O B.\n    exact (O_rec (to O B o f)).\n  Defined.\n  Axiom to_O_natural : forall (O : ReflectiveSubuniverse) {A B} (f : A -> B),\n                         (O_functor O f) o (to O A) == (to O B) o f.\n  Record Modality :=\n    { msubu : UnitSubuniverse ;\n      O_ind : forall A (B : msubu A -> Type) (B_inO : forall oa, In msubu (B oa)),\n                (forall a, B (to msubu A a)) -> forall a, B a }.\n  Arguments O_ind {O} {A} B {B_inO} f a : rename.\n  Definition modality_to_reflective_subuniverse (O : Modality)\n  : ReflectiveSubuniverse.\n    exact (Build_ReflectiveSubuniverse (msubu O)\n                                       (fun P Q H => O_ind (fun _ => Q))).\n  Defined.\n  Coercion modality_to_reflective_subuniverse : Modality >-> ReflectiveSubuniverse.\n  Goal forall (O' : Modality) (A B : Type) (f : A -> B) (a : A),\n         O_functor O' (@ projT1 _ _) (to O' (hfiber f (f a)) (a; eq_refl)) = to (msubu O') A a.\n    clear; intros.\n    apply (@ to_O_natural O').\n    Undo.\n    apply to_O_natural. (* Toplevel input, characters 6-18:\nError:\nIn environment\nO' : Modality\nA : Type\nB : Type\nf : A -> B\na : A\nUnable to unify\n \"forall x : ?M195,\n  (O_functor ?M194 ?M197 o to ?M194 ?M195) x = (to ?M194 ?M196 o ?M197) x\"\nwith\n \"O_functor O' (pr1 (P:=fun x : A => f x = f a))\n    (to O' (hfiber f (f a)) (a; 1)) = to (msubu O') A a\".\n *)\n  Defined.\nEnd Prim.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337526976/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337526978","html_url":"https://github.com/coq/coq/issues/3785#issuecomment-337526978","issue_url":"https://api.github.com/repos/coq/coq/issues/3785","id":337526978,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyNjk3OA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2015-03-03T22:44:29Z","updated_at":"2017-10-18T09:39:49Z","author_association":"CONTRIBUTOR","body":"Comment author: @mattam82\n\nSame problem as usual with apply not being eager enough to use previously found instances. It needs to unfold O_rec (modality_to ... O') but stops at O_rec ?META even if it knows already that ?META is that term.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337526978/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]