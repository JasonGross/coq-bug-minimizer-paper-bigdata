[{"url":"https://api.github.com/repos/coq/coq/issues/comments/337526655","html_url":"https://github.com/coq/coq/issues/3765#issuecomment-337526655","issue_url":"https://api.github.com/repos/coq/coq/issues/3765","id":337526655,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyNjY1NQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-10-25T06:03:51Z","updated_at":"2017-10-18T09:38:54Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\n(* File reduced by coq-bug-finder from original input, then from 7916 lines to 292 lines, then from 258 lines to 43 lines *)\n(* coqc version trunk (October 2014) compiled on Oct 24 2014 13:2:47 with OCaml 4.01.0\n   coqtop version cagnode15:/afs/csail.mit.edu/u/j/jgross/coq-trunk,trunk (9973cd2ca529076388710e90f2c46180581397cf) *)\nNotation \"( x ; y )\" := (existT _ x y).\nInductive paths {A : Type} (a : A) : A -> Type := idpath : paths a a where \"x = y\" := (@ paths _ x y) : type_scope.\nArguments idpath {A a} , [A] a.\nDelimit Scope path_scope with path.\nNotation \"1\" := idpath : path_scope.\nAxiom ap : forall {A B:Type} (f:A -> B) {x y:A} (p:x = y), f x = f y.\nAxiom dummy_funext_type : Set.\nClass Funext := { dummy_funext_value : dummy_funext_type }.\nRecord Functor := { object_of :> Type -> Type ; identity_of : Type }.\nModule Foo.\n  Axiom path_functor'_sig : forall `{Funext} (F G : Functor), { HO : object_of F = object_of G & Set = Set } -> F = G.\n  Axiom path_functor'_sig_fst : forall `{Funext} F G HO HM, ap object_of (@ path_functor'_sig _ F G (HO; HM)) = HO.\n  Goal forall (H : Funext) (objof : Type -> Type) io1 io2 k,\n         (ap object_of\n             (path_functor'_sig (Build_Functor objof io1)\n                                (Build_Functor objof io2)\n                                (1%path; 1%path))) = k.\n    intros.\n    match goal with\n      | [ |- context [path_functor'_sig ?F ?G (?x; ?y)] ]\n        => rewrite (@ path_functor'_sig_fst _ F G x y)\n    end.\n    admit.\n  Defined.\nEnd Foo.\nModule Bar.\n  Axiom path_functor'_sig : forall (F G : Functor), { HO : object_of F = object_of G & Set = Set } -> F = G.\n  Axiom path_functor'_sig_fst : forall F G HO HM, ap object_of (@ path_functor'_sig F G (HO; HM)) = HO.\n  Goal forall (objof : Type -> Type) io1 io2 k,\n         (ap object_of\n             (path_functor'_sig (Build_Functor objof io1)\n                                (Build_Functor objof io2)\n                                (1%path; 1%path))) = k.\n    intros.\n    match goal with\n      | [ |- context [path_functor'_sig ?F ?G (?x; ?y)] ]\n        => let H := fresh in\n           pose proof (@ path_functor'_sig_fst F G x y) as H;\n             change (object_of {| object_of := ?a |}) with a in H |- *;\n             rewrite H\n    end.\n    Undo.\n    match goal with\n      | [ |- context [path_functor'_sig ?F ?G (?x; ?y)] ]\n        => rewrite (@ path_functor'_sig_fst F G x y)\n    end. (* Toplevel input, characters 85-125:\nError:\nFound no subterm matching \"ap object_of\n                             (path_functor'_sig\n                                {| object_of := objof; identity_of := io1 |}\n                                {| object_of := objof; identity_of := io2 |}\n                                (1%path; 1%path))\" in the current goal. *)\n    admit.\n  Defined.\nEnd Bar.\n\n\nIn the second case, [rewrite] fails, I think, because it's failing to notice that [object_of {| object_of := objof |}] and [objof] are the same.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337526655/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]