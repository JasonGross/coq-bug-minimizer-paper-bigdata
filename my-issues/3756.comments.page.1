[{"url":"https://api.github.com/repos/coq/coq/issues/comments/337526474","html_url":"https://github.com/coq/coq/issues/3756#issuecomment-337526474","issue_url":"https://api.github.com/repos/coq/coq/issues/3756","id":337526474,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyNjQ3NA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-10-20T16:25:22Z","updated_at":"2017-10-18T09:38:14Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nAs I posted on coqdev (posting here so it's not forgotten):\nHi,\nIs the following correct?   If I see\nRa:b X <> Y Z\nin a .glob file, this means that from characters a-b, there is a thing of type Z referenced whose absolute name is X.Y?\n\nThis seems to often be the case, and I'm relying on it for my bug-minimizer, which is how I discovered that it is not always the case.  Namely, it seems to not be the case for things where Z is 'mod' or 'modtype', in which case Y is always '<>'?  Is this intentional?\n\nThanks,\nJason\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337526474/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337526475","html_url":"https://github.com/coq/coq/issues/3756#issuecomment-337526475","issue_url":"https://api.github.com/repos/coq/coq/issues/3756","id":337526475,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyNjQ3NQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-10-21T16:35:17Z","updated_at":"2017-10-18T09:38:14Z","author_association":"CONTRIBUTOR","body":"Comment author: @herbelin\n\n> Is the following correct?   If I see\n> Ra:b X <> Y Z\n> in a .glob file, this means that from characters a-b, there is a thing of \n> type Z referenced whose absolute name is X.Y?\n\nAs far as I understand the code, it is correct for things which are \"leaves\" of a library.\n\n> Namely, it seems to not be the case for things where Z is 'mod' or 'modtype', > in which case Y is always '<>'?  Is this intentional?\n\nI believe this is intentional. This is just a matter of convention anyway. It is natural to represent leaves as a path with a label Y. It is natural to represent module names with just a path, and hence a dummy label <>.\n\nNote that tag \"lib\" and \"sec\" have also a dummy <> for the \"Y\".\n\nNote also that the middle part is not necessarily <>. The X is the library name. The middle part is the module or section part (see e.g. in theories/Init/Logic.glob) . The Z is the label, for leaves.\n\nBest,\n\nHugo\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337526475/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337526476","html_url":"https://github.com/coq/coq/issues/3756#issuecomment-337526476","issue_url":"https://api.github.com/repos/coq/coq/issues/3756","id":337526476,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyNjQ3Ng==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-10-21T19:33:24Z","updated_at":"2017-10-18T09:38:15Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nI think I might see what my confusion was, now.  I thought that\n\nRa:b X <> <> Z\n\nmeant that the absolute name of the thing in the range a-b was X.  This isn't the case, though, is it?  For leaves, Y will never be <>, and modules and module types follow a different convention.\n\nThis means, though, that the following statements can never be given hyperlinks by coqdoc, right?\nModule A := B. (* no way to get the absolute name of [B] from the .glob file; if [B] is [Directory.File.Module1.Module2.B], the .glob file will say \"Ra:b Directory.File Module2.B <> modtype\", and Module1 will not show up *)\nModule A <: B. End A. (* ditto about [B] *)\nImport B. (* does not even show up in the .glob file *)\n\nI'm still confused why the first [Module1] in the file gets excluded, though...\n\nIn fact, I think there's still a bug here, in that\n  Module A := top.foo.\n  Module B := top.foo.Foo.\nboth show up in the .glob file as\n  Ra:b top.foo <> <> modtype\n\n(If this is not a bug, I'll apologize for reopening this.)\n\nHere are the files:\n$ cat foo.v\nModule Export Foo.\n  Module Export Bar.\n    Module Export Baz.\n    End Baz.\n  End Bar.\nEnd Foo.\n$ cat bar.v\nRequire Import top.foo.\n\nModule A := top.foo.\nModule B := top.foo.Foo.\nModule C := top.foo.Foo.Bar.\nModule D := top.foo.Foo.Bar.Baz.\n$ coqc -nois foo.v bar.v -R . top\n$ cat bar.glob\nDIGEST 2422ff130cc319be2ae15a3f289e4162\nFtop.bar\nR15:21 top.foo <> <> lib\nR37:43 top.foo <> <> modtype\nmod 32:32 <> A\nR58:68 top.foo <> <> modtype\nmod 53:53 <> B\nR83:97 top.foo Bar <> modtype\nmod 78:78 <> C\nR112:130 top.foo Bar.Baz <> modtype\nmod 107:107 <> D\n\n\n\n\n\n\n\n\n\n\n\nHere are the files I was originally playing with, for reference:\n$ cat bar.v\nModule Export bar0.\n  Module Export bar1.\n    Axiom b : Type.\n  End bar1.\nEnd bar0.\n$ cat foo.v\nRequire Import Coq.Init.Logic.\nModule A0 := Coq.Init.Logic.\nModule A1 := Init.Logic.\nModule A2 := Logic.\nRequire Import top.bar.\nModule A3 := top.bar.\nModule Export Foo.\n  Module Export Bar.\n    Module Export Baz.\n      Axiom a : Type.\n    End Baz.\n  End Bar.\nEnd Foo.\nModule A4 := Foo.Bar.Baz.\nModule A5 := Bar.Baz.\nModule A6 := Baz.\nCheck Foo.Bar.Baz.a.\nCheck Bar.Baz.a.\nCheck Baz.a.\nCheck a.\nModule A7 := top.bar.bar0.bar1.\nModule A8 := bar.bar0.bar1.\nModule A9 := bar0.bar1.\nModule A10 := bar1.\nCheck top.bar.bar0.bar1.b.\nCheck bar.bar0.bar1.b.\nCheck bar0.bar1.b.\nCheck bar1.b.\nCheck b.\n$ cat foo.glob\nDIGEST 51437bb8f9ca39ccd3d68f5fa51b9bd8\nFtop.foo\nR15:28 Coq.Init.Logic <> <> lib\nR44:57 Coq.Init.Logic <> <> modtype\nmod 38:39 <> A0\nR73:82 Coq.Init.Logic <> <> modtype\nmod 67:68 <> A1\nR98:102 Coq.Init.Logic <> <> modtype\nmod 92:93 <> A2\nR120:126 top.bar <> <> lib\nR142:148 top.bar <> <> modtype\nmod 136:137 <> A3\nmod 165:167 <> Foo\nmod 186:188 <> Foo.Bar\nmod 209:211 <> Foo.Bar.Baz\nax 226:226 Foo.Bar.Baz a\nR244:246 top.foo Bar.Baz <> mod\nR255:257 top.foo Bar <> mod\nR264:266 top.foo <> <> mod\nR282:292 top.foo Bar.Baz <> modtype\nmod 276:277 <> A4\nR308:314 top.foo Bar.Baz <> modtype\nmod 302:303 <> A5\nR330:332 top.foo Bar.Baz <> modtype\nmod 324:325 <> A6\nR341:353 top.foo Foo.Bar.Baz a prfax\nR362:370 top.foo Foo.Bar.Baz a prfax\nR379:383 top.foo Foo.Bar.Baz a prfax\nR392:392 top.foo Foo.Bar.Baz a prfax\nR408:424 top.bar bar1 <> modtype\nmod 402:403 <> A7\nR440:452 top.bar bar1 <> modtype\nmod 434:435 <> A8\nR468:476 top.bar bar1 <> modtype\nmod 462:463 <> A9\nR493:496 top.bar bar1 <> modtype\nmod 486:488 <> A10\nR505:523 top.bar bar0.bar1 b prfax\nR532:546 top.bar bar0.bar1 b prfax\nR555:565 top.bar bar0.bar1 b prfax\nR574:579 top.bar bar0.bar1 b prfax\nR588:588 top.bar bar0.bar1 b prfax\n$ python -c \"f = open('foo.glob', 'r').read(); g = open('foo.v', 'r').read(); f2 = [i for i in f.split('\\n') if i and i[0] == 'R']; import re; reg = re.compile('R([0-9]+):([0-9]+) ([^ ]+) ([^ ]+) ([^ ]+) ([^ ]+)'); f3 = [reg.findall(i)[0] for i in f2]; print('\\n'.join(['%s => %s %s %s %s' % tuple([g[int(i[0]):int(i[1])+1]] + list(i[2:])) for i in f3]))\"\nCoq.Init.Logic => Coq.Init.Logic <> <> lib\nCoq.Init.Logic => Coq.Init.Logic <> <> modtype\nInit.Logic => Coq.Init.Logic <> <> modtype\nLogic => Coq.Init.Logic <> <> modtype\ntop.bar => top.bar <> <> lib\ntop.bar => top.bar <> <> modtype\nBaz => top.foo Bar.Baz <> mod\nBar => top.foo Bar <> mod\nFoo => top.foo <> <> mod\nFoo.Bar.Baz => top.foo Bar.Baz <> modtype\nBar.Baz => top.foo Bar.Baz <> modtype\nBaz => top.foo Bar.Baz <> modtype\nFoo.Bar.Baz.a => top.foo Foo.Bar.Baz a prfax\nBar.Baz.a => top.foo Foo.Bar.Baz a prfax\nBaz.a => top.foo Foo.Bar.Baz a prfax\na => top.foo Foo.Bar.Baz a prfax\ntop.bar.bar0.bar1 => top.bar bar1 <> modtype\nbar.bar0.bar1 => top.bar bar1 <> modtype\nbar0.bar1 => top.bar bar1 <> modtype\nbar1 => top.bar bar1 <> modtype\ntop.bar.bar0.bar1.b => top.bar bar0.bar1 b prfax\nbar.bar0.bar1.b => top.bar bar0.bar1 b prfax\nbar0.bar1.b => top.bar bar0.bar1 b prfax\nbar1.b => top.bar bar0.bar1 b prfax\nb => top.bar bar0.bar1 b prfax\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337526476/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337526478","html_url":"https://github.com/coq/coq/issues/3756#issuecomment-337526478","issue_url":"https://api.github.com/repos/coq/coq/issues/3756","id":337526478,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyNjQ3OA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-10-22T09:39:55Z","updated_at":"2017-10-18T09:38:15Z","author_association":"CONTRIBUTOR","body":"Comment author: @herbelin\n\nOne part of the modpath missing really looks like a bug, dating from the very beginning of the support of links to modules in 2008.\n\nI applied a fix and now, top.foo.html and top.bar.html have correct internal resp. external links.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337526478/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]