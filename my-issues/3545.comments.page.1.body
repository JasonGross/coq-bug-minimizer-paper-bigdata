Comment author: @JasonGross

Here is some code that works with 8.4pl4, but fails with a very recent trunk (it worked fine a few days ago).  Possibly related to https://coq.inria.fr/bugs/show_bug.cgi?id=3544, just because both cropped up at about the same time and both involve [apply].

(* coqc version trunk (August 2014) compiled on Aug 26 2014 10:11:53 with OCaml 4.01.0
   coqtop version cagnode17:/afs/csail.mit.edu/u/j/jgross/coq-trunk,trunk (9ef5dbb1f340971036aa0c7d4d7a0986188fd971) *)
Class IsConnected (A : Type)
 := isconnected_elim :>
      forall (C : Type) (f : A -> C),
        { c:C & forall a:A, f a = c }.
Definition hfiber {A B : Type} (f : A -> B) (y : B) := { x : A & f x = y }.
Class IsConnMap {A B : Type} (f : A -> B)
  := isconnected_hfiber_conn_map :>
       forall b:B, IsConnected (hfiber f b).
Definition conn_map_elim
  {A B : Type} (f : A -> B) `{IsConnMap _ _ f}
  (P : B -> Type)
  (d : forall a:A, P (f a))
: forall b:B, P b.
Proof.
  intros b.
  pose (@ isconnected_elim) as H0.
  refine (projT1 (H0 _ _ _ _)).
  Undo.
  apply isconnected_elim. (* Error: No applicable tactic. *)


Comment author: @JasonGross

According to git bisect:
There are only 'skip'ped commits left to test.
The first bad commit could be any of:
19a7a5789c42a143f92232ce15298c2f44db96ba
6c72e455a048d69048ddf386c43d5fc5eb4597a4
We cannot bisect more!
bisect run cannot continue any more

These are

commit 19a7a5789c42a143f92232ce15298c2f44db96ba
Author: Hugo Herbelin <Hugo.Herbelin@ inria.fr>
Date:   Tue Aug 19 17:57:24 2014 +0200

    Fixing a bug introduced in the extension of 'apply in' + simplifying code.



commit 6c72e455a048d69048ddf386c43d5fc5eb4597a4
Author: Pierre-Marie PÃ©drot <pierre-marie.pedrot@ inria.fr>
Date:   Mon Aug 25 13:55:03 2014 +0200

    Fixing previous commit.


The bisect script is

#!/bin/bash

SCRIPT="$(readlink -f "${BASH_SOURCE[0]}")"
COQ_DIR="$HOME/coq"

# exit immediately and abort the bisect if killed
trap "exit 128" SIGHUP SIGINT SIGTERM

if [ "$1" = "--init" ]
then
    shift
    cd "$COQ_DIR"
    PS4='$ '
    set -x
    # git bisect start [--no-checkout] [<bad> [<good>...]] [--] [<paths>...]
    git bisect start c70d5b27ad5872c74e20b6c997383fb4462a68dc 728b6c31df7a3e6c53b6f7be4ef62bf2a2a75505 # f23e7e7d6f8912ef3ddcc6288cd0f5710a12b99a # aa2f0216bb39a1054737b1edf695f28f59c14ea7
    git bisect run "$SCRIPT" "$@ "
    exit 128 # if git bisect run gets --init, abort immediately
fi

cd "$COQ_DIR"

ARGS="-local"
for arg in "-nodoc" "-no-native-compiler"; do
    if [ ! -z "$(./configure -h 2>&1 | grep -- "$arg")" ]; then
        ARGS="$ARGS $arg"
    fi
done
for arg in "-coqide" "-with-doc"; do
    if [ ! -z "$(./configure -h 2>&1 | grep -- "$arg")" ]; then
        ARGS="$ARGS $arg no"
    fi
done
if [ "$1" == "--no-build" ]; then
    shift
else
    git clean -xfd 2>&1 >/dev/null
    echo "./configure $ARGS"
    ./configure $ARGS
    make coqbinaries "$@ " || exit 125
fi
ls ./bin


FILE=`mktemp --suffix=.v --tmpdir tmpXXXXXXXXXX`

cat > "$FILE" <<'EOF'
(* -*- coq-prog-args: ("-emacs" "-nois") -*- *)
(* coqc version trunk (August 2014) compiled on Aug 26 2014 10:11:53 with OCaml 4.01.0
   coqtop version cagnode17:/afs/csail.mit.edu/u/j/jgross/coq-trunk,trunk (9ef5dbb1f340971036aa0c7d4d7a0986188fd971) *)
Axiom admit : forall {T}, T.
Record sigT {A} (P : forall _ : A, Type) := existT { projT1 : A ; projT2 : P projT1 }.
Inductive eq {A} (x : A) : forall _ : A, Type := eq_refl : eq x x.
Class IsConnected (A : Type)
 := isconnected_elim :>
      forall (C : Type) (f : forall _ : A, C),
        sigT (fun c:C => forall a:A, eq (f a) c ).
Definition hfiber {A B : Type} (f : forall _ : A, B) (y : B) := sigT (fun x : A => eq (f x) y ).
Class IsConnMap {A B : Type} (f : forall _ : A, B)
  := isconnected_hfiber_conn_map :>
       forall b:B, IsConnected (hfiber f b).
Definition conn_map_elim
  {A B : Type} (f : forall _ : A, B) `{IsConnMap _ _ f}
  (P : forall _ : B, Type)
  (d : forall a:A, P (f a))
: forall b:B, P b.
Proof.
  intros b.
  pose (@ isconnected_elim) as H0.
  apply isconnected_elim. (* Error: No applicable tactic. *)
Admitted.
EOF

rm -f "${FILE%.v}.vo"
OUTPUT="$(timeout 30 ./bin/coqtop -nois -boot -compile "${FILE%.v}" 2>&1)"
ls "${FILE%.v}"*
ERR=$?
echo "$OUTPUT"
echo "$ERR"
#echo "$FILE"
rm -f "$FILE" "${FILE%.v}.vo" "${FILE%.v}.glob"

if [ ! -z "$(echo "$OUTPUT" | grep -o 'Error: No applicable tactic')" ]; then
    echo 'exit 1'
    exit 1 # bad
elif [ $ERR = 0 ]; then
    echo 'exit 0'
    exit 0 # good
else
    echo 'exit 125'
    exit 125 # failed for other reason
fi


Comment author: @herbelin

The problem is when "apply" destruct the lemma and apply one of the component of the lemma (and recursively). The "old" (internal) refine is not able to do that sometimes. I'm waiting for hints from Arnaud on how to solve this with the new refine. This is probably the same cause of failure as in RelationAlgebra.


Comment author: @herbelin

I'm looking again at this report. The observed behavior is actually a feature implemented in 029f850bceb1 (maybe it did not work at some previous time, but reverting 029f850bceb1 at least makes the example working again).

My previous comment did not seem to be related to this bug (or at least I don't see the relation yet).

Instead the problem is dual to the one mentioned in report [BZ#3544](https://github.com/coq/coq/issues?q=is%3Aissue%20%22Original%20bug%20ID%3A%20BZ%233544%22) where commit 
029f850bceb1 precisely implements what [BZ#3544](https://github.com/coq/coq/issues?q=is%3Aissue%20%22Original%20bug%20ID%3A%20BZ%233544%22) is asking for.

I'm leaning towards keeping the new behavior and to close this bug.


Comment author: @JasonGross

How much trouble would it be to add a compatibility flag to change this behavior (and set it in Coq84.v suggested in bug [BZ#4300](https://github.com/coq/coq/issues?q=is%3Aissue%20%22Original%20bug%20ID%3A%20BZ%234300%22))?


Comment author: @herbelin

> How much trouble would it be to add a compatibility flag to change this behavior (and set it in Coq84.v suggested in bug [BZ#4300](https://github.com/coq/coq/issues?q=is%3Aissue%20%22Original%20bug%20ID%3A%20BZ%234300%22))?

Very little trouble, except extending the list of flags. Do you have several examples where it should be really useful to have the 8.4 behavior?


Comment author: @JasonGross

I don't have a list of several examples, but here's one that would be a pain to debug behavior changes in:

Ltac apply_hyps :=
  repeat match goal with
           | [ H : _ |- _ ] => apply H
         end.

Feel free to throw this into some general [Set Compatibility Mode v84.] flag, or similar.


Comment author: @JasonGross

For future reference, the wish has been granted in 2418cf8d5ff6f479a5b43a87c861141bf9067507.  Thanks!


