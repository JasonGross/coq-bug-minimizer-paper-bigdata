[{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518178","html_url":"https://github.com/coq/coq/issues/3254#issuecomment-337518178","issue_url":"https://api.github.com/repos/coq/coq/issues/3254","id":337518178,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxODE3OA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-03-10T08:39:01Z","updated_at":"2021-12-20T07:51:49Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\r\n\r\n```coq\r\n(* File reduced by coq-bug-finder, originally 1957 lines, recently from 185 lines to 174 lines. *)\r\nRequire Import Coq.Classes.Morphisms Coq.Classes.RelationClasses Coq.Program.Program Coq.Setoids.Setoid.\r\n\r\nGlobal Set Implicit Arguments.\r\n\r\nReserved Infix \"~>\" (at level 70).\r\nDelimit Scope bundled_comp_scope with bundled_comp.\r\nGlobal Open Scope bundled_comp_scope.\r\n\r\nClass Context :=\r\n  { names : Type;\r\n    dom : names -> Type;\r\n    cod : names -> Type }.\r\n\r\nInductive Comp `{ctx : Context} : Type -> Type :=\r\n| Return : forall A, A -> Comp A\r\n| Bind : forall A B, Comp A -> (A -> Comp B) -> Comp B\r\n| Pick : forall A, (A -> Prop) -> Comp A\r\n| Call : forall name : names, dom name -> Comp (cod name).\r\n\r\nClass LookupContext :=\r\n  { LContext :> Context;\r\n    lookup : forall name, dom name -> Comp (cod name) }.\r\n\r\nCoercion LContext : LookupContext >-> Context.\r\n\r\nRecord BundledComp A :=\r\n  Bundle { CompContext : LookupContext;\r\n           Unbundle :> Comp A }.\r\n\r\nNotation \"``[ c 'with' l ]``\" := (@ Bundle _ l c) (only parsing) : bundled_comp_scope.\r\n\r\nAxiom computes_to : forall `{ctx : LookupContext}, forall A, Comp A -> A -> Prop.\r\n\r\nNotation \"c ~> v\" := (computes_to c v).\r\n\r\nDefinition refine {A}\r\n           {oldCtx newCtx : LookupContext}\r\n           (old : @ Comp oldCtx A)\r\n           (new : @ Comp newCtx A)\r\n  := forall v, new ~> v -> old ~> v.\r\n\r\nDefinition refineBundled {A} (old new : BundledComp A)\r\n  := refine old new.\r\n\r\nDefinition refineEquiv {A}\r\n           {oldCtx newCtx : LookupContext}\r\n           (old : @ Comp oldCtx A)\r\n           (new : @ Comp newCtx A)\r\n  := refine old new /\\ refine new old.\r\n\r\nDefinition refineBundledEquiv {A} (old new : BundledComp A)\r\n  := refineEquiv old new.\r\n\r\nLocal Obligation Tactic := admit.\r\n\r\nGlobal Program Instance refine_PreOrder A `{LookupContext} : PreOrder (@ refine A _ _).\r\nGlobal Program Instance refineBundled_PreOrder A : PreOrder (@ refineBundled A).\r\n\r\nAdd Parametric Morphism `{LookupContext} A B\r\n: (@ Bind _ A B)\r\n    with signature\r\n    (@ refine A _ _)\r\n      ==> (pointwise_relation _ (@ refine B _ _))\r\n      ==> (@ refine B _ _)\r\n      as refine_bind.\r\nadmit.\r\nDefined.\r\n\r\nLtac equate_evar_context :=\r\n  unfold refineBundledEquiv, refineBundled; simpl;\r\n  lazymatch goal with\r\n| [ |- @ refineEquiv ?A ?ctx1 (@ CompContext ?B ?e) ?v1 ?v2 ]\r\n  => is_evar e; refine (_ : @ refineEquiv A ctx1 (@ CompContext B {| CompContext := ctx1 |}) v1 v2)\r\n| [ |- @ refine ?A ?ctx1 (@ CompContext ?B ?e) ?v1 ?v2 ]\r\n  => is_evar e; refine (_ : @ refine A ctx1 (@ CompContext B {| CompContext := ctx1 |}) v1 v2)\r\nend;\r\n  simpl.\r\n\r\nLocal Open Scope type_scope.\r\n\r\nDefinition Build_ADTContext\r\n           (rep : Type)\r\n           (indices : Context)\r\n: Context :=\r\n  {| names := names;\r\n     dom idx := rep * dom idx;\r\n     cod idx := rep * cod idx |}.\r\n\r\nDefinition methodTypeUnbundled (Ty : Type)\r\n           (indices : Context)\r\n           (idx : names)\r\n\r\n           (ctx := Build_ADTContext Ty indices)\r\n  := Ty\r\n     -> dom idx\r\n     -> Comp (Ty * cod idx)  .\r\n\r\nDefinition methodType (Ty : Type)\r\n           (indices : Context)\r\n           (idx : names)\r\n  := Ty\r\n     -> dom idx\r\n     -> BundledComp (Ty * cod idx) .\r\n\r\nRecord ADT :=\r\n  {\r\n    Rep : Type;\r\n    MethodNames : Context;\r\n    ADTContext : Context := Build_ADTContext Rep MethodNames;\r\n    UnbundledMethods : forall idx, methodTypeUnbundled Rep MethodNames idx\r\n  }.\r\n\r\nDefinition ADTLookupContext (A : ADT) : LookupContext\r\n  := {| LContext := ADTContext A;\r\n        lookup idx state_value := UnbundledMethods A idx (fst state_value) (snd state_value) |}.\r\n\r\nDefinition Methods (A : ADT) (i : names)\r\n: methodType (Rep A) (MethodNames A) i\r\n  := fun m x => ``[ UnbundledMethods A i m x with ADTLookupContext A ]`` .\r\n\r\nGoal forall (Rep0 : Type) (MethodNames0 : Context)\r\n            (UnbundledMethods0 : forall idx : @ names MethodNames0,\r\n                                   methodTypeUnbundled Rep0 MethodNames0 idx)\r\n            (idx : @ names MethodNames0) (r_n : Rep0) (n : @ dom MethodNames0 idx),\r\n       @ refineBundled (prod Rep0 (@ cod MethodNames0 idx))\r\n                      (@ Bundle (prod Rep0 (@ cod MethodNames0 idx))\r\n                               (ADTLookupContext (@ Build_ADT Rep0 MethodNames0 UnbundledMethods0))\r\n                               (@ Bind (ADTContext (@ Build_ADT Rep0 MethodNames0 UnbundledMethods0))\r\n                                      (prod Rep0 (@ cod MethodNames0 idx))\r\n                                      (prod Rep0 (@ cod MethodNames0 idx)) (UnbundledMethods0 idx r_n n)\r\n                                      (fun r_o' : prod Rep0 (@ cod MethodNames0 idx) =>\r\n                                         @ Pick\r\n                                           (ADTContext (@ Build_ADT Rep0 MethodNames0 UnbundledMethods0))\r\n                                           (prod Rep0 (@ cod MethodNames0 idx))\r\n                                           (fun r_n' : prod Rep0 (@ cod MethodNames0 idx) =>\r\n                                              and\r\n                                                (@ eq Rep0 (@ fst Rep0 (@ cod MethodNames0 idx) r_o')\r\n                                                     (@ fst Rep0 (@ cod MethodNames0 idx) r_n'))\r\n                                                (@ eq (@ cod MethodNames0 idx)\r\n                                                     (@ snd Rep0 (@ cod MethodNames0 idx) r_o')\r\n                                                     (@ snd Rep0 (@ cod MethodNames0 idx) r_n'))))))\r\n                      (Methods (@ Build_ADT Rep0 MethodNames0 UnbundledMethods0) idx r_n n).\r\nintros.\r\n\r\netransitivity;\r\n  [ equate_evar_context | ].\r\n\r\nassert (H : forall x : prod Rep0 (@ cod MethodNames0 idx),\r\n              @ refine (prod Rep0 (@ cod MethodNames0 idx))\r\n                      (ADTLookupContext (@ Build_ADT Rep0 MethodNames0 UnbundledMethods0))\r\n                      (ADTLookupContext (@ Build_ADT Rep0 MethodNames0 UnbundledMethods0))\r\n                      (@ Pick (ADTContext (@ Build_ADT Rep0 MethodNames0 UnbundledMethods0))\r\n                             (prod Rep0 (@ cod MethodNames0 idx))\r\n                             (fun v : prod Rep0 (@ cod MethodNames0 idx) =>\r\n                                and\r\n                                  (@ eq Rep0 (@ fst Rep0 (@ cod MethodNames0 idx) x)\r\n                                       (@ fst Rep0 (@ cod MethodNames0 idx) v))\r\n                                  (@ eq (@ cod MethodNames0 idx)\r\n                                       (@ snd Rep0 (@ cod MethodNames0 idx) x)\r\n                                       (@ snd Rep0 (@ cod MethodNames0 idx) v))))\r\n                      (@ Return\r\n                         (ADTContext (@ Build_ADT Rep0 MethodNames0 UnbundledMethods0))\r\n                         (prod Rep0 (@ cod MethodNames0 idx))\r\n                         (@ pair Rep0 (@ cod MethodNames0 idx)\r\n                                (@ fst Rep0 (@ cod MethodNames0 idx) x)\r\n                                (@ snd Rep0 (@ cod MethodNames0 idx) x)))) by admit.\r\neapply refine_bind; solve [ reflexivity | intro; apply H ].\r\nUndo.\r\nsetoid_rewrite H. (* Toplevel input, characters 0-16:\r\nError:\r\nTactic failure:setoid rewrite failed: Unable to satisfy the rewriting constraints.\r\nUnable to satisfy the following constraints:\r\nEVARS:\r\n ?267==[Rep0 MethodNames0 UnbundledMethods0 idx r_n n H\r\n         |- ProperProxy ?265 ?224] (internal placeholder)\r\n ?266==[Rep0 MethodNames0 UnbundledMethods0 idx r_n n H\r\n         (do_subrelation:=do_subrelation)\r\n         |- Proper (?263 ==> ?265 ==> flip impl) refine]\r\n         (internal placeholder)\r\n ?265==[Rep0 MethodNames0 UnbundledMethods0 idx r_n n H\r\n         |- relation (Comp (Rep0 * cod idx))] (internal placeholder)\r\n ?264==[Rep0 MethodNames0 UnbundledMethods0 idx r_n n H\r\n         (do_subrelation:=do_subrelation)\r\n         |- Proper (pointwise_relation (Rep0 * cod idx) refine ==> ?263)\r\n              (Bind (UnbundledMethods0 idx r_n n))] (internal placeholder)\r\n ?263==[Rep0 MethodNames0 UnbundledMethods0 idx r_n n H\r\n         |- relation (Comp (Rep0 * cod idx))] (internal placeholder)\r\n ?224==[Rep0 MethodNames0 UnbundledMethods0 idx r_n n\r\n         |- Comp (Rep0 * cod idx)] (underscore)\r\nUNIVERSES:\r\n Top.435 <= Coq.Init.Datatypes.45\r\n Top.434 <= Coq.Init.Datatypes.45\r\n Top.433 <= Coq.Init.Datatypes.40\r\n Top.432 <= Top.11\r\n Top.431 <= Coq.Init.Datatypes.40\r\n Top.429 <= Coq.Init.Datatypes.45\r\n Top.428 <= Coq.Init.Datatypes.45\r\n Top.427 <= Coq.Init.Logic.14\r\n Top.426 <= Coq.Init.Datatypes.45\r\n Top.425 <= Coq.Init.Datatypes.45\r\n Top.423 <= Coq.Init.Datatypes.40\r\n Top.421 <= Top.19\r\n Top.420 <= Coq.Init.Datatypes.40\r\n Top.418 <= Top.62\r\n Top.417 <= Coq.Init.Datatypes.40\r\n Top.414 <= Coq.Init.Datatypes.40\r\n Top.319 <= Coq.Init.Datatypes.45\r\n         <= Coq.Init.Logic.14\r\n         <= Top.296\r\n         <= Coq.Init.Datatypes.39\r\n\r\n\r\nMETAS:\r\n 1468[x] := _UNBOUND_REL_1 : Rep0 * cod idx  [type is checked]\r\n .\r\n *)\r\n```\r\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518178/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/997680243","html_url":"https://github.com/coq/coq/issues/3254#issuecomment-997680243","issue_url":"https://api.github.com/repos/coq/coq/issues/3254","id":997680243,"node_id":"IC_kwDOABUDh847d2Rz","user":{"login":"Alizter","id":8614547,"node_id":"MDQ6VXNlcjg2MTQ1NDc=","avatar_url":"https://avatars.githubusercontent.com/u/8614547?v=4","gravatar_id":"","url":"https://api.github.com/users/Alizter","html_url":"https://github.com/Alizter","followers_url":"https://api.github.com/users/Alizter/followers","following_url":"https://api.github.com/users/Alizter/following{/other_user}","gists_url":"https://api.github.com/users/Alizter/gists{/gist_id}","starred_url":"https://api.github.com/users/Alizter/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Alizter/subscriptions","organizations_url":"https://api.github.com/users/Alizter/orgs","repos_url":"https://api.github.com/users/Alizter/repos","events_url":"https://api.github.com/users/Alizter/events{/privacy}","received_events_url":"https://api.github.com/users/Alizter/received_events","type":"User","site_admin":false},"created_at":"2021-12-20T07:56:01Z","updated_at":"2021-12-20T07:56:01Z","author_association":"CONTRIBUTOR","body":"This isn't fixed by #14137.","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/997680243/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]