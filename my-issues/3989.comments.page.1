[{"url":"https://api.github.com/repos/coq/coq/issues/comments/337530372","html_url":"https://github.com/coq/coq/issues/3989#issuecomment-337530372","issue_url":"https://api.github.com/repos/coq/coq/issues/3989","id":337530372,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUzMDM3Mg==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2015-02-03T16:19:33Z","updated_at":"2019-08-22T18:43:26Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\r\n```coq\r\n(* 9e6b28c04ad98369a012faf3bd4d630cf123a473 *)\r\nRecord foo := { bar : Type }.\r\nArguments bar _ / .\r\nDefinition baz (x : Type) := x.\r\nArguments baz / : simpl nomatch.\r\nGoal forall x, baz (bar x) = baz (bar x).\r\nProof.\r\n  repeat simpl; match goal with\r\n                  | [ |- forall x : foo, (let (bar) := x in bar) = (let (bar) := x in bar) ] => idtac\r\n                  | [ |- ?G ] => fail 1 G\r\n                end. (* success *)\r\n  Undo.\r\n  repeat cbn; match goal with\r\n                | [ |- forall x : foo, (let (bar) := x in bar) = (let (bar) := x in bar) ] => idtac\r\n                | [ |- ?G ] => fail 1 G\r\n              end. (* Tactic failure: (forall x : foo, baz (let (bar) := x in bar) = baz (let (bar) := x in bar)). *)\r\n```\r\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337530372/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337530374","html_url":"https://github.com/coq/coq/issues/3989#issuecomment-337530374","issue_url":"https://api.github.com/repos/coq/coq/issues/3989","id":337530374,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUzMDM3NA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2015-03-14T12:41:23Z","updated_at":"2017-10-18T09:49:39Z","author_association":"CONTRIBUTOR","body":"Comment author: @pirbo\n\nIndeed, the is a differences between the semantic of nomatch in simpl and in cbn.\n\nIn cbn, the semantic is:\n- takes the applicative context (remove the surrounding case and fix)\n- try to do the delta\n- computes\n- if there is a case or a fix in the computation context backtrack and stop\n- else put back the surrounding context between the obtained value and continue to compute\n\nHere as computation after the attempt of unfolding of baz ends in the state\n<x | Zmatch return Type with Build_foo bar0 => bar0 end>\nit backtracks. Never mind that before the attempt of unfolding baz you were already in the state :\n<baz| Zapp (match x return Type with Build_foo bar0 => bar0 end)>\n\nI don't know how to implement the simpl semantic in my abstract machine. Well, the more accurate answer is Here is an other instance of what we've already discover with Hugo: \"cbn would be much better if it were call by value and not call by name\" (well, of course, the name won't fit anymore :-))\n\nFor the record, we reach this conclusion on the opposite situation :\n- keep Definition baz (x : Type) := x.\n- do Goal baz (match tt with tt => True end).\n- remind that the semantic of cbn is \"delta expand if it allows a iota\" then you would like that cbn this goal answers \"baz True\" but the abstract machine trace is\n\"baz (match tt with tt => True end)\" -> \"(fun x => x) (match tt with tt => True end)\" -> \"match tt with tt => True end\" -> (* A IOTA, let's baz unfolded !!!*) \"True\"\n(The real problem in the real life occurs in theories/Sets/Ensembles.v with In *)\n\n\nOK at the end of this message I get completely lost and I change my mind to SIMPL MUST NOT UNFOLD Baz, CBN IS RIGHT. Because unfolding base does not allows a iota reduction.\nGoal Baz True. simpl. answers base True good\nBUT\ngoal baz match x with Build_foo bar0 => bar0 end. simpl. answers\n(fun x0 => x0) match x with Build_foo bar0 => bar0 end which is bad, doesn't it ?\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337530374/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337530375","html_url":"https://github.com/coq/coq/issues/3989#issuecomment-337530375","issue_url":"https://api.github.com/repos/coq/coq/issues/3989","id":337530375,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUzMDM3NQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2015-03-14T15:51:13Z","updated_at":"2017-10-18T09:49:40Z","author_association":"CONTRIBUTOR","body":"Comment author: @gares\n\nYour last observation is a bug in simpl, there is another open bug for it with myself and maxime in Cc.  I don't think it is related to nomatch. It seems due to the fact that simpl is implemented using the \"strong\" iterator (and using a more correct one breaks things here and there).\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337530375/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]