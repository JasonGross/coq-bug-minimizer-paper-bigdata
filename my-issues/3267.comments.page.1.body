Comment author: @JasonGross

Here is a snippet of code where [eauto] fails to solve the goal:

Hint Extern 0 => progress subst.
Goal forall T (x y : T) (P Q : _ -> Prop), x = y -> (P x -> Q x) -> P y -> Q y.
  intros.
  eauto.


And here are three snippets of code where [eauto] succeeds.

Hint Extern 0 => progress subst.
Goal forall T (x y : T) (P Q : _ -> Prop), y = x -> (P x -> Q x) -> P y -> Q y.
  intros.
  eauto.


Hint Extern 0 => progress subst; eauto.
Goal forall T (x y : T) (P Q : _ -> Prop), x = y -> (P x -> Q x) -> P y -> Q y.
  intros.
  eauto.

Hint Extern 0 => progress subst; repeat match goal with H : _ |- _ => revert H end.
Goal forall T (x y : T) (P Q : _ -> Prop), x = y -> (P x -> Q x) -> P y -> Q y.
  intros.
  eauto.



I think [eauto] should succeed in all of these cases.


Comment author: @mattam82

Indeed, eauto was not careful enough to check if the hypotheses changed due to a call to an extern hint. Fixed in trunk.


Comment author: @herbelin

Hi, I found another instance of the bug:

Parameter A B : Prop.
Axiom a:B.

Hint Extern 1 => match goal with H:_ -> id _ |- _ => try (unfold id in H) end.
Hint Resolve a.
Goal (B -> id A) -> A.
intros.
eauto.

works in 8.5 (= trunk at the time of Matthieu's message) thanks to the fix, but this is still failing:

Parameter A B : Prop.
Axiom a:B.

Hint Extern 1 => match goal with H:_ -> id _ |- _ => try (unfold id in H) end.
Goal (B -> id A) -> A.
intros.
eauto using a.

The way I found it is funny. The fix relies on physical equality and in particular on the fact that nf_evar preserves sharing, while I was working on a change which was precisely breaking sharing. I committed a simple fix obtained by adding the "lems" to the searching "state" (Matthieu, I hope this fix is ok for you), but I suspect that there should exist a way to implement updating the initial local db in a more robust way.


