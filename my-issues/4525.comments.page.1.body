Comment author: @JasonGross
```coq
(* -*- mode: coq; coq-prog-args: ("-emacs" "-nois" "-indices-matter") -*- *)
(* File reduced by coq-bug-finder from original input, then from 953 lines to 
170 lines, then from 184 lines to 170 lines, then from 705 lines to 214 lines, 
then from 228 lines to 214 lines *)
(* coqc version 8.5 (January 2016) compiled on Jan 23 2016 16:15:22 with OCaml 
4.01.0
   coqtop version 8.5 (January 2016) *)
Inductive False := .
Axiom proof_admitted : False.
Tactic Notation "admit" := case proof_admitted.
Require Coq.Init.Datatypes.
Import Coq.Init.Notations.
Global Set Universe Polymorphism.
Notation "A -> B" := (forall (_ : A), B) : type_scope.
Module Export Datatypes.
  Set Implicit Arguments.
  Inductive sum (A B : Type) : Type := inl (a : A) | inr (b : B).
  Notation nat := Coq.Init.Datatypes.nat.
  Notation S := Coq.Init.Datatypes.S.
  Notation "x + y" := (sum x y) : type_scope.
  Arguments inl {A B} _ , [A] B _.
  Arguments inr {A B} _ , A [B] _.
  Record prod (A B : Type) := pair { fst : A ; snd : B }.
  Notation "x * y" := (prod x y) : type_scope.
  Delimit Scope nat_scope with nat.
  Open Scope nat_scope.
End Datatypes.
Module Export Specif.
  Set Implicit Arguments.
  Record sig {A} (P : A -> Type) := exist { proj1_sig : A ; proj2_sig : P 
proj1_sig }.
  Notation sigT := sig (only parsing).
  Notation "{ x : A  & P }" := (sigT (fun x:A => P)) : type_scope.
  Notation projT1 := proj1_sig (only parsing).
End Specif.
Definition Type1@{i} := Eval hnf in let gt := (Set : Type@{i}) in Type@{i}.
Definition Type2@{i j} := Eval hnf in let gt := (Type1@{j} : Type@{i}) in 
Type@{i}.
Definition Type2le@{i j} := Eval hnf in let gt := (Set : Type@{i}) in
                                        let ge := ((fun x => x) : Type1@{j} -> 
Type@{i}) in Type@{i}.
Delimit Scope function_scope with function.
Delimit Scope path_scope with path.
Delimit Scope fibration_scope with fibration.
Open Scope path_scope.
Open Scope fibration_scope.
Open Scope function_scope.
Notation pr1 := projT1.
Notation "x .1" := (pr1 x) (at level 3, format "x '.1'") : fibration_scope.
Notation compose := (fun g f x => g (f x)).
Notation "g 'o' f" := (compose g%function f%function) (at level 40, left 
associativity) : function_scope.
Inductive paths {A : Type} (a : A) : A -> Type := idpath : paths a a.
Arguments idpath {A a} , [A] a.
Notation "x = y :> A" := (@paths A x y) : type_scope.
Notation "x = y" := (x = y :>_) : type_scope.
Definition inverse {A : Type} {x y : A} (p : x = y) : y = x
  := match p with idpath => idpath end.
Definition concat {A : Type} {x y z : A} (p : x = y) (q : y = z) : x = z :=
  match p, q with idpath, idpath => idpath end.
Notation "p @ q" := (concat p%path q%path) (at level 20) : path_scope.
Notation "p ^" := (inverse p%path) (at level 3, format "p '^'") : path_scope.
Definition ap {A B:Type} (f:A -> B) {x y:A} (p:x = y) : f x = f y
  := match p with idpath => idpath end.
Definition Sect {A B : Type} (s : A -> B) (r : B -> A) :=
  forall x : A, r (s x) = x.
Class IsEquiv {A B : Type} (f : A -> B) := BuildIsEquiv {
                                               equiv_inv : B -> A ;
                                               eisretr : Sect equiv_inv f;
                                               eissect : Sect f equiv_inv;
                                               eisadj : forall x : A, eisretr 
(f x) = ap f (eissect x)
                                             }.
Record Equiv A B := BuildEquiv {
                        equiv_fun : A -> B ;
                        equiv_isequiv : IsEquiv equiv_fun
                      }.
Notation "A <~> B" := (Equiv A B) (at level 85) : type_scope.
Inductive Unit : Type1 := tt : Unit.
Section Adjointify.
  Context {A B : Type} (f : A -> B) (g : B -> A).
  Context (isretr : Sect g f) (issect : Sect f g).
  Let issect' := fun x =>
                   ap g (ap f (issect x)^)  @  ap g (isretr (f x))  @  issect x.
  Let is_adjoint' (a : A) : isretr (f a) = ap f (issect' a).
    admit.
  Defined.
  Definition isequiv_adjointify : IsEquiv f
    := BuildIsEquiv A B f g isretr issect' is_adjoint'.
  Definition equiv_adjointify : A <~> B
    := BuildEquiv A B f isequiv_adjointify.
End Adjointify.
Section FunctorSum.
  Context {A A' B B' : Type} (f : A -> A') (g : B -> B').
  Definition functor_sum : A + B -> A' + B'
    := fun z => match z with inl z' => inl (f z') | inr z' => inr (g z') end.
End FunctorSum.
Definition ExtensionAlong {A B : Type} (f : A -> B)
           (P : B -> Type) (d : forall x:A, P (f x))
  := { s : forall y:B, P y & forall x:A, s (f x) = d x }.
Fixpoint ExtendableAlong@{i j k l}
         (n : nat) {A : Type@{i}} {B : Type@{j}}
         (f : A -> B) (C : B -> Type@{k}) : Type@{l}
  := match n with
     | 0 => Unit@{l}
     | S n => (forall (g : forall a, C (f a)),
                  ExtensionAlong@{i j k l l} f C g) *
              forall (h k : forall b, C b),
                ExtendableAlong n f (fun b => h b = k b)
     end.
Definition ooExtendableAlong@{i j k l}
           {A : Type@{i}} {B : Type@{j}}
           (f : A -> B) (C : B -> Type@{k}) : Type@{l}
  := forall n, ExtendableAlong@{i j k l} n f C.
Module Type ReflectiveSubuniverses.
  Parameter ReflectiveSubuniverse@{u a} : Type2@{u a}.
  Parameter O_reflector@{u a i} : forall (O : ReflectiveSubuniverse@{u a}),
      Type2le@{i a} -> Type2le@{i a}.
  Parameter In@{u a i} : forall (O : ReflectiveSubuniverse@{u a}),
      Type2le@{i a} -> Type2le@{i a}.
  Parameter O_inO@{u a i} : forall (O : ReflectiveSubuniverse@{u a}) (T : 
Type@{i}),
      In@{u a i} O (O_reflector@{u a i} O T).
  Parameter to@{u a i} : forall (O : ReflectiveSubuniverse@{u a}) (T : 
Type@{i}),
      T -> O_reflector@{u a i} O T.
  Parameter extendable_to_O@{u a i j k}
    : forall (O : ReflectiveSubuniverse@{u a}) {P : Type2le@{i a}} {Q : 
Type2le@{j a}} {Q_inO : In@{u a j} O Q},
      ooExtendableAlong@{i i j k} (to O P) (fun _ => Q).
End ReflectiveSubuniverses.
Module ReflectiveSubuniverses_Theory (Os : ReflectiveSubuniverses).
  Export Os.
  Existing Class In.
  Coercion O_reflector : ReflectiveSubuniverse >-> Funclass.
  Global Existing Instance O_inO.
  Section ORecursion.
    Context {O : ReflectiveSubuniverse}.
    Definition O_rec {P Q : Type} {Q_inO : In O Q}
               (f : P -> Q)
      : O P -> Q
      := (fst (extendable_to_O O 1%nat) f).1.
  End ORecursion.
  Section Reflective_Subuniverse.
    Universes Ou Oa.
    Context (O : ReflectiveSubuniverse@{Ou Oa}).
    Definition equiv_O_sum {A B} :
      O (A + B) <~> O (O A + O B).
    Proof.
      simple refine (equiv_adjointify _ _ _ _).
      - apply O_rec; intros x.
        exact (to O _ (functor_sum (to O A) (to O B) x)).
      - apply O_rec; intros [x|x].
        + Timeout 1 exact (O_rec (to O _ o inl) x). (* Stack overflow *)
```


Passing -debug gives:
```
sh: 1: dot: not found
master:0] STM: 62: proof : synch (cause: non opaque)
File "./foo.v", line 143, characters 10-51:
Stack overflow.
frame @ file "toplevel/coqtop.ml", line 620, characters 6-22
frame @ file "toplevel/vernac.ml", line 352, characters 2-13
frame @ file "toplevel/vernac.ml", line 320, characters 14-48
raise @ file "lib/exninfo.ml", line 63, characters 8-15
frame @ file "lib/flags.ml", line 139, characters 19-41
raise @ file "lib/exninfo.ml", line 63, characters 8-15
frame @ file "lib/flags.ml", line 11, characters 15-18
raise @ file "lib/exninfo.ml", line 63, characters 8-15
frame @ file "toplevel/vernac.ml", line 253, characters 6-43
raise @ file "lib/exninfo.ml", line 63, characters 8-15
frame @ file "toplevel/vernac.ml", line 233, characters 6-16
raise @ file "lib/exninfo.ml", line 63, characters 8-15
frame @ file "stm/stm.ml", line 2473, characters 8-30
frame @ file "stm/stm.ml", line 1973, characters 2-35
raise @ file "lib/exninfo.ml", line 63, characters 8-15
frame @ file "stm/stm.ml", line 1963, characters 4-48
frame @ file "stm/stm.ml", line 1930, characters 4-91
raise @ file "lib/exninfo.ml", line 63, characters 8-15
frame @ file "lib/flags.ml", line 139, characters 19-41
raise @ file "lib/exninfo.ml", line 63, characters 8-15
frame @ file "lib/flags.ml", line 11, characters 15-18
raise @ file "lib/exninfo.ml", line 63, characters 8-15
frame @ file "toplevel/vernac.ml", line 253, characters 6-43
raise @ file "lib/exninfo.ml", line 63, characters 8-15
frame @ file "toplevel/vernac.ml", line 233, characters 6-16
raise @ file "lib/exninfo.ml", line 63, characters 8-15
frame @ file "stm/stm.ml", line 2473, characters 8-30
frame @ file "stm/stm.ml", line 1973, characters 2-35
raise @ file "lib/exninfo.ml", line 63, characters 8-15
frame @ file "stm/stm.ml", line 1963, characters 4-48
frame @ file "stm/stm.ml", line 1930, characters 4-91
raise @ file "lib/exninfo.ml", line 63, characters 8-15
frame @ file "lib/flags.ml", line 11, characters 15-18
raise @ file "lib/exninfo.ml", line 63, characters 8-15
frame @ file "toplevel/vernac.ml", line 253, characters 6-43
raise @ file "lib/exninfo.ml", line 63, characters 8-15
frame @ file "toplevel/vernac.ml", line 233, characters 6-16
raise @ file "lib/exninfo.ml", line 63, characters 8-15
frame @ file "stm/stm.ml", line 2473, characters 8-30
frame @ file "stm/stm.ml", line 1973, characters 2-35
raise @ file "lib/exninfo.ml", line 63, characters 8-15
frame @ file "stm/stm.ml", line 1963, characters 4-48
frame @ file "stm/stm.ml", line 1930, characters 4-91
raise @ file "lib/exninfo.ml", line 63, characters 8-15
frame @ file "toplevel/vernac.ml", line 253, characters 6-43
raise @ file "lib/exninfo.ml", line 63, characters 8-15
frame @ file "toplevel/vernac.ml", line 233, characters 6-16
raise @ file "lib/exninfo.ml", line 63, characters 8-15
frame @ file "stm/stm.ml", line 2473, characters 8-30
frame @ file "stm/stm.ml", line 1973, characters 2-35
raise @ file "lib/exninfo.ml", line 63, characters 8-15
frame @ file "stm/stm.ml", line 1963, characters 4-48
frame @ file "stm/stm.ml", line 1930, characters 4-91
raise @ file "lib/exninfo.ml", line 63, characters 8-15
frame @ file "toplevel/vernac.ml", line 233, characters 6-16
raise @ file "lib/exninfo.ml", line 63, characters 8-15
frame @ file "stm/stm.ml", line 2473, characters 8-30
frame @ file "stm/stm.ml", line 1973, characters 2-35
raise @ file "lib/exninfo.ml", line 63, characters 8-15
frame @ file "stm/stm.ml", line 1963, characters 4-48
frame @ file "stm/stm.ml", line 1930, characters 4-91
raise @ file "lib/exninfo.ml", line 63, characters 8-15
frame @ file "stm/stm.ml", line 2473, characters 8-30
frame @ file "stm/stm.ml", line 1973, characters 2-35
raise @ file "lib/exninfo.ml", line 63, characters 8-15
frame @ file "stm/stm.ml", line 1963, characters 4-48
frame @ file "stm/stm.ml", line 1930, characters 4-91
raise @ file "lib/exninfo.ml", line 63, characters 8-15
frame @ file "stm/stm.ml", line 1930, characters 4-91
raise @ file "lib/exninfo.ml", line 63, characters 8-15
frame @ file "array.ml", line 72, characters 31-48
frame @ file "array.ml", line 72, characters 31-48
frame @ file "array.ml", line 72, characters 31-48
frame @ file "array.ml", line 72, characters 31-48
frame @ file "array.ml", line 72, characters 31-48
frame @ file "array.ml", line 72, characters 31-48
frame @ file "array.ml", line 72, characters 31-48
frame @ file "array.ml", line 72, characters 31-48
frame @ file "array.ml", line 72, characters 31-48
frame @ file "array.ml", line 72, characters 31-48
... (many pages of this) ...
frame @ file "array.ml", line 72, characters 31-48
frame @ file "array.ml", line 72, characters 31-48
frame @ file "array.ml", line 72, characters 31-48
frame @ file "pretyping/evarsolve.ml", line 214, characters 13-36
raise @ unknown
raise @ unknown
```

Example doesn't work anymore in `master`.
Fixed version:
```coq
(* -*- mode: coq; coq-prog-args: ("-emacs" "-indices-matter") -*- *)
(* File reduced by coq-bug-finder from original input, then from 953 lines to
170 lines, then from 184 lines to 170 lines, then from 705 lines to 214 lines,
then from 228 lines to 214 lines *)
(* coqc version 8.5 (January 2016) compiled on Jan 23 2016 16:15:22 with OCaml
4.01.0
   coqtop version 8.5 (January 2016) *)
Inductive False := .
Axiom proof_admitted : False.

Ltac admit := case proof_admitted.
Require Coq.Init.Datatypes.
Import Coq.Init.Notations.
Global Set Universe Polymorphism.
Notation "A -> B" := (forall (_ : A), B) : type_scope.
Module Export Datatypes.
  Set Implicit Arguments.
  Inductive sum (A B : Type) : Type := inl (a : A) | inr (b : B).
  Notation nat := Coq.Init.Datatypes.nat.
  Notation S := Coq.Init.Datatypes.S.
  Notation "x + y" := (sum x y) : type_scope.
  Arguments inl {A B} _ , [A] B _.
  Arguments inr {A B} _ , A [B] _.
  Record prod (A B : Type) := pair { fst : A ; snd : B }.
  Notation "x * y" := (prod x y) : type_scope.
  Delimit Scope nat_scope with nat.
  Open Scope nat_scope.
End Datatypes.
Module Export Specif.
  Set Implicit Arguments.
  Record sig {A} (P : A -> Type) := exist { proj1_sig : A ; proj2_sig : P
proj1_sig }.
  Notation sigT := sig (only parsing).
  Notation "{ x : A  & P }" := (sigT (fun x:A => P)) : type_scope.
  Notation projT1 := proj1_sig (only parsing).
End Specif.
Definition Type1@{i} := Eval hnf in let gt := (Set : Type@{i}) in Type@{i}.
Definition Type2@{i j} := Eval hnf in let gt := (Type1@{j} : Type@{i}) in
Type@{i}.
Definition Type2le@{i j} := Eval hnf in let gt := (Set : Type@{i}) in
                                        let ge := ((fun x => x) : Type1@{j} ->
Type@{i}) in Type@{i}.
Delimit Scope function_scope with function.
Delimit Scope path_scope with path.
Delimit Scope fibration_scope with fibration.
Open Scope path_scope.
Open Scope fibration_scope.
Open Scope function_scope.
Notation pr1 := projT1.
Notation "x .1" := (pr1 x) (at level 3, format "x '.1'") : fibration_scope.
Notation compose := (fun g f x => g (f x)).
Notation "g 'o' f" := (compose g%function f%function) (at level 40, left
associativity) : function_scope.
Inductive paths {A : Type} (a : A) : A -> Type := idpath : paths a a.
Arguments idpath {A a} , [A] a.
Notation "x = y :> A" := (@paths A x y) : type_scope.
Notation "x = y" := (x = y :>_) : type_scope.
Definition inverse {A : Type} {x y : A} (p : x = y) : y = x
  := match p with idpath => idpath end.
Definition concat {A : Type} {x y z : A} (p : x = y) (q : y = z) : x = z :=
  match p, q with idpath, idpath => idpath end.
Notation "p @ q" := (concat p%path q%path) (at level 20) : path_scope.
Notation "p ^" := (inverse p%path) (at level 3, format "p '^'") : path_scope.
Definition ap {A B:Type} (f:A -> B) {x y:A} (p:x = y) : f x = f y
  := match p with idpath => idpath end.
Definition Sect {A B : Type} (s : A -> B) (r : B -> A) :=
  forall x : A, r (s x) = x.
Class IsEquiv {A B : Type} (f : A -> B) := BuildIsEquiv {
                                               equiv_inv : B -> A ;
                                               eisretr : Sect equiv_inv f;
                                               eissect : Sect f equiv_inv;
                                               eisadj : forall x : A, eisretr
(f x) = ap f (eissect x)
                                             }.
Record Equiv A B := BuildEquiv {
                        equiv_fun : A -> B ;
                        equiv_isequiv : IsEquiv equiv_fun
                      }.
Notation "A <~> B" := (Equiv A B) (at level 85) : type_scope.
Inductive Unit : Type1 := tt : Unit.
Section Adjointify.
  Context {A B : Type} (f : A -> B) (g : B -> A).
  Context (isretr : Sect g f) (issect : Sect f g).
  Let issect' := fun x =>
                   ap g (ap f (issect x)^)  @  ap g (isretr (f x))  @  issect x.
  Let is_adjoint' (a : A) : isretr (f a) = ap f (issect' a).
    admit.
  Admitted.
  Definition isequiv_adjointify : IsEquiv f
    := BuildIsEquiv A B f g isretr issect' is_adjoint'.
  Definition equiv_adjointify : A <~> B
    := BuildEquiv A B f isequiv_adjointify.
End Adjointify.
Section FunctorSum.
  Context {A A' B B' : Type} (f : A -> A') (g : B -> B').
  Definition functor_sum : A + B -> A' + B'
    := fun z => match z with inl z' => inl (f z') | inr z' => inr (g z') end.
End FunctorSum.
Definition ExtensionAlong {A B : Type} (f : A -> B)
           (P : B -> Type) (d : forall x:A, P (f x))
  := { s : forall y:B, P y & forall x:A, s (f x) = d x }.
Fixpoint ExtendableAlong@{i j k l}
         (n : nat) {A : Type@{i}} {B : Type@{j}}
         (f : A -> B) (C : B -> Type@{k}) : Type@{l}
  := match n with
     | 0 => Unit@{l}
     | S n => (forall (g : forall a, C (f a)),
                  ExtensionAlong@{i j k l l} f C g) *
              forall (h k : forall b, C b),
                ExtendableAlong n f (fun b => h b = k b)
     end.
Definition ooExtendableAlong@{i j k l}
           {A : Type@{i}} {B : Type@{j}}
           (f : A -> B) (C : B -> Type@{k}) : Type@{l}
  := forall n, ExtendableAlong@{i j k l} n f C.
Module Type ReflectiveSubuniverses.
  Parameter ReflectiveSubuniverse@{u a} : Type2@{u a}.
  Parameter O_reflector@{u a i} : forall (O : ReflectiveSubuniverse@{u a}),
      Type2le@{i a} -> Type2le@{i a}.
  Parameter In@{u a i} : forall (O : ReflectiveSubuniverse@{u a}),
      Type2le@{i a} -> Type2le@{i a}.
  Parameter O_inO@{u a i} : forall (O : ReflectiveSubuniverse@{u a}) (T :
Type@{i}),
      In@{u a i} O (O_reflector@{u a i} O T).
  Parameter to@{u a i} : forall (O : ReflectiveSubuniverse@{u a}) (T :
Type@{i}),
      T -> O_reflector@{u a i} O T.
  Parameter extendable_to_O@{u a i j k}
    : forall (O : ReflectiveSubuniverse@{u a}) {P : Type2le@{i a}} {Q :
Type2le@{j a}} {Q_inO : In@{u a j} O Q},
      ooExtendableAlong@{i i j k} (to O P) (fun _ => Q).
End ReflectiveSubuniverses.
Module ReflectiveSubuniverses_Theory (Os : ReflectiveSubuniverses).
  Export Os.
  Existing Class In.
  Coercion O_reflector : ReflectiveSubuniverse >-> Funclass.
  Global Existing Instance O_inO.
  Section ORecursion.
    Context {O : ReflectiveSubuniverse}.
    Definition O_rec {P Q : Type} {Q_inO : In O Q}
               (f : P -> Q)
      : O P -> Q
      := (fst (extendable_to_O O 1%nat) f).1.
  End ORecursion.
  Section Reflective_Subuniverse.
    Universes Ou Oa.
    Context (O : ReflectiveSubuniverse@{Ou Oa}).
    Definition equiv_O_sum {A B} :
      O (A + B)%type <~> O (O A + O B)%type.
    Proof.
      simple refine (equiv_adjointify _ _ _ _).
      - apply O_rec; intros x.
        exact (to O _ (functor_sum (to O A) (to O B) x)).
      - apply O_rec; intros [x|x].
        + Timeout 1 exact (O_rec (to O _ o inl) x). (* Stack overflow *)

```
Example got broken again.
