[{"url":"https://api.github.com/repos/coq/coq/issues/comments/337527064","html_url":"https://github.com/coq/coq/issues/3792#issuecomment-337527064","issue_url":"https://api.github.com/repos/coq/coq/issues/3792","id":337527064,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyNzA2NA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-11-04T23:13:36Z","updated_at":"2017-10-18T09:40:09Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nFail Check\n  (forall {A B} (P : forall b : bool, A b -> B b) (a : A true) (a' : A false)\n         (b : bool),\n    P (if b as b return A b then a else a') =\n    if b as b return B b then P _ a else P _ a').\n(* The command has indeed failed with message:\n=> Error: Illegal application (Type Error): \n   The term \"A\" of type \"bool -> Type\"\n   cannot be applied to the term\n    \"if b as b return (A b) then a1 else a'\" : \"A b\"\n   This term has type \"A b\" which should be coercible to \n   \"bool\".\n *)\n\n\nDefinition pull_if_dep\n: forall {A B} (P : forall b : bool, A b -> B b) (a : A true) (a' : A false)\n         (b : bool),\n    P (if b as b return A b then a else a') =\n    if b as b return B b then P _ a else P _ a'.\nAdmitted.\n(*\nError: Illegal application (Type Error): \nThe term \"A\" of type \"bool -> Type\"\ncannot be applied to the term\n \"if b as b return (A b) then a else a'\" : \"A b\"\nThis term has type \"A b\" which should be coercible to \n\"bool\".\n*)\n\n\nThis is present in 8.4 and trunk.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337527064/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337527065","html_url":"https://github.com/coq/coq/issues/3792#issuecomment-337527065","issue_url":"https://api.github.com/repos/coq/coq/issues/3792","id":337527065,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyNzA2NQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-11-08T19:50:23Z","updated_at":"2017-10-18T09:40:09Z","author_association":"CONTRIBUTOR","body":"Comment author: @ppedrot\n\nThis is strange. I had a look in the debugger, but I am not skilled enough to clearly see what is going on.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337527065/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337527066","html_url":"https://github.com/coq/coq/issues/3792#issuecomment-337527066","issue_url":"https://api.github.com/repos/coq/coq/issues/3792","id":337527066,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyNzA2Ng==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-11-08T20:06:54Z","updated_at":"2017-10-18T09:40:09Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nIf it helps, here is a slightly smaller example (and an even smaller one at the bottom):\n\nDefinition pull_if_dep\n: forall {A} (P : bool -> Type) (a : A true) (a' : A false)\n         (b : bool),\n    P (if b as b return A b then a else a').\n\n\nIf I manually desugar the [if], I get:\n\nDefinition pull_if_dep\n: forall {A} (P : bool -> Type) (a : A true) (a' : A false)\n         (b : bool),\n    P (match b as b return A b with true => a | false => a' end).\n(* Toplevel input, characters 111-167:\nError:\nIn environment\nA : bool -> Type\nP : bool -> Type\na : A true\na' : A false\nb : bool\nThe term \"if b as b return (A b) then a else a'\" has type \n\"A b\" while it is expected to have type \"bool\". *)\n\nSo it seems to have something to do with how [if]s are parsed.\n\nIf I do:\n\nDefinition pull_if_dep\n: forall {A} (P : forall b : bool, A b) (a : A true) (a' : A false)\n         (b : bool),\n    P (if b as b return A b then a else a').\n\nthen I get\n\n(* Toplevel input, characters 135-174:\nError:\nIn environment\nA : bool -> Type\nP : forall b : bool, A b\na : A true\na' : A false\nb : bool\nThe term \"P (if b as b return (A b) then a else a')\" has type\n\"A (if b as b return (A b) then a else a')\"\nwhich should be Set, Prop or Type. *)\n\nSo it's clear that it's sticking the [if] in as the boolean argument, and somehow bypassing the check that [P ...] is well-typed.  Note that this [if] statement also manages to break the well-typedness check of the equality:\n\nDefinition pull_if_dep\n: forall {A} (P : forall b : bool, Type) (a : A true) (a' : A false)\n         (b : bool),\n    P (if b as b return A b then a else a') = 1.\n\nfails with [The term \"1\" has type \"nat\" while it is expected to have type \n\"Type\".], but\n\nDefinition pull_if_dep\n: forall {A} (P : forall b : bool, Type) (a : A true) (a' : A false)\n         (b : bool),\n    P (if b as b return A b then a else a') = if b as b return nat then 1 else 1.\n\nsucceeds.  This led me to an even smaller example:\n\nDefinition pull_if_dep\n: forall (b : bool),\n    @ eq Prop\n        (if b as b return Type then True else True)\n        (if b as b return nat then 1 else 1).\n\nwhich checks out (note that replacing [@ eq Prop] with [@ eq] followed by any other Type works (but [@ eq 1] fails as expected)).  Note that replacing [True] with something that is not a [Type] fails.  Additionally, let-expanding out either of the [if]-statements results in the expected error.\n\nMy barely-educated hypothesis is that there's incorrect error-catching logic somewhere, and there's an error thrown by something involving the [if]-statement which is improperly silenced elsewhere, leading to incorrectly successful typechecking.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337527066/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337527068","html_url":"https://github.com/coq/coq/issues/3792#issuecomment-337527068","issue_url":"https://api.github.com/repos/coq/coq/issues/3792","id":337527068,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyNzA2OA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-11-09T12:47:45Z","updated_at":"2017-10-18T09:40:09Z","author_association":"CONTRIBUTOR","body":"Comment author: @ppedrot\n\nFor ther record, after pretyping the [if] in the following definition,\n\nDefinition pull_if_dep\n: forall {A} (P : bool -> Type) (a : A true) (a' : A false)\n         (b : bool),\n    P (if b as b return A b then a else a').\n\nthe pretyper is in the following state (env is the current environment, v is the if, p is its type and evdref is the current evarmap):\n\nenv: Environ.env = [] [(A : ?X1) (P : forall _ : bool, Type@ {bug.2})\n  (a : A CSTR.bool._0._1) (a' : A CSTR.bool._0._2) \n  (b : bool)]\nv: Term.constr =\n  if _UNBOUND_REL_1 as b return (_UNBOUND_REL_6 b)\n  then _UNBOUND_REL_3\n  else _UNBOUND_REL_2\np: Term.constr = _UNBOUND_REL_5 _UNBOUND_REL_1\nevdref: Evd.evar_map ref =\n  {contents = EVARS:\n     ?3==[x |- Type@ {bug.4} => Type@ {bug.5}] (type of A) {X3}\n     ?2==[ |- Type@ {bug.3} => bool] (internal placeholder) {X2}\n     ?1==[ |- Type@ {bug.1} => forall x : ?X2, ?X3@ {A:=x}] (type of A) {X1}\n    \n    UNIVERSES:\n     {bug.5 bug.4 bug.3 bug.2 bug.1} |= bug.5 < bug.4\n                                         Set <= bug.3\n                                         bug.3 <= bug.1\n                                         bug.4 <= bug.1\n                                         \n    ALGEBRAIC UNIVERSES:{bug.4 bug.3 bug.1}\n    UNDEFINED UNIVERSES:bug.4\n                        bug.3\n                        bug.1\n    }\n\nI can't see anything wrong, but I may be tired...\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337527068/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337527070","html_url":"https://github.com/coq/coq/issues/3792#issuecomment-337527070","issue_url":"https://api.github.com/repos/coq/coq/issues/3792","id":337527070,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyNzA3MA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-11-09T19:03:47Z","updated_at":"2017-10-18T09:40:09Z","author_association":"CONTRIBUTOR","body":"Comment author: @ppedrot\n\nShould be fixed in trunk. The ambient type constraint was dropped when pretyping [if], so that in this case it was never checking the [if] had not type bool.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337527070/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]