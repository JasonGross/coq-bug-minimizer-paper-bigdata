[{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518410","html_url":"https://github.com/coq/coq/issues/3269#issuecomment-337518410","issue_url":"https://api.github.com/repos/coq/coq/issues/3269","id":337518410,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxODQxMA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-04-02T14:32:54Z","updated_at":"2017-10-18T09:15:10Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nIn 8.4, and trunk from March 5 (42a04b75717d719d013af902379450e4c0e72928), the following code works, but in today's trunk (502e61ec1ac488dd430ce6654c7a6947c6f7d1c3), it fails.  The problem is that the unification/inference engine has changed, and it is now inferring the identity function too eagerly.\n\nInductive paths {A : Type} (a : A) : A -> Type :=\n  idpath : paths a a.\n\nArguments idpath {A a} , [A] a.\n\nArguments paths_ind [A] a P f y p.\nArguments paths_rec [A] a P f y p.\nArguments paths_rect [A] a P f y p.\n\nNotation \"x = y :> A\" := (@ paths A x y) : type_scope.\nNotation \"x = y\" := (x = y :>_) : type_scope.\n\nDefinition ap {A B:Type} (f:A -> B) {x y:A} (p:x = y) : f x = f y\n  := match p with idpath => idpath end.\n\nDefinition ap_compose {A B C : Type} (f : A -> B) (g : B -> C) {x y : A} (p : x = y) :\n  ap (fun x => g (f x)) p = ap g (ap f p)\n  :=\n  match p with idpath => idpath end.\n\nDefinition ap_apply_Fr {A B C : Type} {x y : A} (p : x = y) (z : B -> C) (N : A -> B) :\n  ap (fun a => z (N a)) p = ap z (ap N p)\n:= (ap_compose _ _ _).\n(* Toplevel input, characters 135-151:\n> := (ap_compose _ _ _).\n>     ^^^^^^^^^^^^^^^^\nError:\nIn environment\nA : Type\nB : Type\nC : Type\nx : A\ny : A\np : x = y\nz : B -> C\nN : A -> B\nThe term \"ap_compose (fun x : A => x) (fun a : A => z (N a)) p\" has type\n \"ap (fun x : A => z (N x)) p =\n  ap (fun a : A => z (N a)) (ap (fun x : A => x) p)\"\nwhile it is expected to have type\n \"ap (fun a : A => z (N a)) p = ap z (ap N p)\"\n(cannot unify \"ap (fun a : A => z (N a)) (ap (fun x : A => x) p)\" and\n\"ap z (ap N p)\"). *)\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518410/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518411","html_url":"https://github.com/coq/coq/issues/3269#issuecomment-337518411","issue_url":"https://api.github.com/repos/coq/coq/issues/3269","id":337518411,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxODQxMQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-04-02T14:40:13Z","updated_at":"2017-10-18T09:15:11Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nBut, miraculously, it seems to be fixed as of 5b39c3535f7b3383d89d7b844537244a4e7c0eca?  Can someone confirm this for me?  I'll go make a pull request for a regression test, after I bisect to find where it was broken and fixed...\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518411/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518414","html_url":"https://github.com/coq/coq/issues/3269#issuecomment-337518414","issue_url":"https://api.github.com/repos/coq/coq/issues/3269","id":337518414,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxODQxNA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-04-02T16:19:19Z","updated_at":"2017-10-18T09:15:11Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nNevermind, I was running the wrong version of Coq when I thought it was fixed today.  (I think.)\n\ngit bisect tells me that the first bad commit is f16f8383f0af88deda99fa4c033ea04149b00f49 (Pierre Boutillier):\n\nMaybeFlexible semantic changes\nFrom Maybe reducible to Maybe to reduce (but for sure reducible)\n\n\n\nThe git bisect script I used was:\n\n$ cat ../test-coq-trunk-script.sh\n#!/bin/bash\n\ncd ~/coq\n\ngit clean -xfd 2>&1 >/dev/null\n./configure -local -coqide no -nodoc -no-native-compiler\nmake coqbinaries \"$@ \" || exit 125\nls ./bin\n#((make coqbinaries \"$@ \" \\\n#        || (git clean -xfd; \\\n#           ./configure -local -coqide no -nodoc -no-native-compiler \\\n#           make coqbinaries \"$@ \")) \\\n#    || exit 125) # source can't be tested\n\n\nCODE='Inductive paths {A : Type} (a : A) : forall _ : A, Type :=\n  idpath : paths a a.\n\nArguments idpath {A a} , [A] a.\n\nArguments paths_ind [A] a P f y p.\nArguments paths_rec [A] a P f y p.\nArguments paths_rect [A] a P f y p.\n\nNotation \"x = y\" := (@ paths _ x y) (at level 70, no associativity) : type_scope.\n\nDefinition ap {A B:Type} (f:forall _ : A, B) {x y:A} (p:x = y) : f x = f y\n  := match p with idpath => idpath end.\n\nDefinition ap_compose {A B C : Type} (f : forall _ : A, B) (g : forall _ : B, C) {x y : A} (p : x = y) :\n  ap (fun x => g (f x)) p = ap g (ap f p)\n  :=\n  match p with idpath => idpath end.\n\nDefinition ap_apply_Fr {A B C : Type} {x y : A} (p : x = y) (z : forall _ : B, C) (N : forall _ : A, B) :\n  ap (fun a => z (N a)) p = ap z (ap N p)\n:= (ap_compose _ _ _).\n'\n\nFILE=`mktemp --suffix=.v --tmpdir tmpXXXXXXXXXX`\n\necho \"$CODE\" > \"$FILE\"\n./bin/coqtop -boot -compile \"${FILE%.v}\" -noinit\nERR=$?\nrm \"$FILE\"\n\nif [ $ERR = 0 ]; then\n    exit 0 # good\nelse\n    exit 1 # bad\nfi\n$ git bisect start; git bisect bad; git bisect good 42a04b75717d719d013af902379450e4c0e72928; git bisect run ../test-coq-trunk-script.sh -j10\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518414/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518415","html_url":"https://github.com/coq/coq/issues/3269#issuecomment-337518415","issue_url":"https://api.github.com/repos/coq/coq/issues/3269","id":337518415,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxODQxNQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-04-10T19:16:15Z","updated_at":"2017-10-18T09:15:11Z","author_association":"CONTRIBUTOR","body":"Comment author: @ppedrot\n\nI think you're far too optimistic to hope second-order unification to guess the arguments of a compose function. Unification is essentially heuristic, so you should not really complain when you're actually unifying such really tricky terms.\n\nI may not be the most competent on this topic, but I believe that unless you come up with a real example which is somehow blocking for you, there is unluckily not much to do but close this bug...\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518415/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518418","html_url":"https://github.com/coq/coq/issues/3269#issuecomment-337518418","issue_url":"https://api.github.com/repos/coq/coq/issues/3269","id":337518418,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxODQxOA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-06-04T11:10:15Z","updated_at":"2017-10-18T09:15:11Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nIt still seems to me that inference should work here; the arguments to ap_compose are uniquely determined by the resulting type.  There is only one way to unify [ap z (ap N p)] with [ap ?1 (ap ?2 ?3)], even after unfolding.  But I guess knowing that would require unfolding, and Coq doesn't take the strategy of \"if the heads match, see if the arguments match\", or something?\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518418/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]