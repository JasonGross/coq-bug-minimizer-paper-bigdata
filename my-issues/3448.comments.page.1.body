Comment author: @JasonGross

The former takes around 1.3 seconds, while the latter takes less than 0.01 s.

(* File reduced by coq-bug-finder from original input, then from 16780 lines to 19369 lines, then from 18856 lines to 689 lines, then from 700 lines to 686 lines, then from 594 lines to 379 lines, then from 392 lines to 391 lines, then from 377 lines to 360 lines *)
Require Coq.Setoids.Setoid.

Import Coq.Classes.Morphisms.
Import Coq.Setoids.Setoid.
Generalizable All Variables.

Axiom admit : forall {T}, T.
Definition BITS (n : nat) : Set.
Admitted.
Definition BYTE   := BITS 8.
Definition DWORD  := BITS 32.

Class Equiv (A : Type) := equiv : relation A.
Infix "===" := equiv (at level 70, no associativity).

Class type (A : Type) {e : Equiv A} := eq_equiv : Equivalence equiv.

Instance Equiv_PropP : Equiv Prop := iff.

Global Instance ge_Pre: PreOrder ge.
admit.
Defined.

Class ILogicOps Frm := {
                        lentails: relation Frm;
                        ltrue: Frm;
                        lfalse: Frm;
                        limpl: Frm -> Frm -> Frm;
                        land: Frm -> Frm -> Frm;
                        lor: Frm -> Frm -> Frm;
                        lforall: forall {T}, (T -> Frm) -> Frm;
                        lexists: forall {T}, (T -> Frm) -> Frm
                      }.

Infix "|--"  := lentails (at level 79, no associativity).
Infix "//\\"   := land (at level 75, right associativity).
Infix "\\//"   := lor (at level 76, right associativity).
Infix "-->>"   := limpl (at level 77, right associativity).
Notation "'Forall' x .. y , p" :=
  (lforall (fun x => .. (lforall (fun y => p)) .. )) (at level 78, x binder, y binder, right associativity).
Notation "'Exists' x .. y , p" :=
  (lexists (fun x => .. (lexists (fun y => p)) .. )) (at level 78, x binder, y binder, right associativity).

Class ILogic Frm {ILOps: ILogicOps Frm} := {
                                            lentailsPre:> PreOrder lentails;
                                            ltrueR: forall C, C |-- ltrue;
                                            lfalseL: forall C, lfalse |-- C;
                                            lforallL: forall T x (P: T -> Frm) C, P x |-- C -> lforall P |-- C;
                                            lforallR: forall T (P: T -> Frm) C, (forall x, C |-- P x) -> C |-- lforall P;
                                            lexistsL: forall T (P: T -> Frm) C, (forall x, P x |-- C) -> lexists P |-- C;
                                            lexistsR: forall T x (P: T -> Frm) C, C |-- P x -> C |-- lexists P;
                                            landL1: forall P Q C, P |-- C  ->  P //\\ Q |-- C;
                                            landL2: forall P Q C, Q |-- C  ->  P //\\ Q |-- C;
                                            lorR1:  forall P Q C, C |-- P  ->  C |-- P \\// Q;
                                            lorR2:  forall P Q C, C |-- Q  ->  C |-- P \\// Q;
                                            landR:  forall P Q C, C |-- P  ->  C |-- Q  ->  C |-- P //\\ Q;
                                            lorL:   forall P Q C, P |-- C  ->  Q |-- C  ->  P \\// Q |-- C;
                                            landAdj: forall P Q C, C |-- (P -->> Q) -> C //\\ P |-- Q;
                                            limplAdj: forall P Q C, C //\\ P |-- Q -> C |-- (P -->> Q)
                                          }.

Section ILogicExtra.
  Context `{IL: ILogic Frm}.

  Definition lequiv P Q := P |-- Q /\ Q |-- P.
  Definition lpropand (p: Prop) Q := Exists _: p, Q.
  Definition lpropimpl (p: Prop) Q := Forall _: p, Q.

End ILogicExtra.

Infix "/\\" := lpropand (at level 75, right associativity).
Infix "->>" := lpropimpl (at level 77, right associativity).
Infix "-|-"  := lequiv (at level 85, no associativity).

Section ILogicMorphisms.
  Context `{IL: ILogic Frm}.

  Global Instance lforall_lentails_m T:
    Proper (pointwise_relation T lentails ++> lentails) lforall.
  admit.
  Defined.

  Global Instance lexists_lentails_m T:
    Proper (pointwise_relation T lentails ++> lentails) lexists.
  admit.
  Defined.

  Global Instance land_lentails_m:
    Proper (lentails ++> lentails ++> lentails) land.
  admit.
  Defined.

  Global Instance lor_lentails_m:
    Proper (lentails ++> lentails ++> lentails) lor.
  admit.
  Defined.

  Global Instance lpropimpl_lentails_m:
    Proper (impl --> lentails ++> lentails) lpropimpl.
  admit.
  Defined.

End ILogicMorphisms.

Section ILogic_Pre.
  Context T (ord: relation T) {ord_Pre: PreOrder ord}.
  Context `{IL: ILogic Frm}.

  Record ILPreFrm := mkILPreFrm {
                         ILPreFrm_pred :> T -> Frm;
                         ILPreFrm_closed: forall t t': T, ord t t' ->
                                                          ILPreFrm_pred t |-- ILPreFrm_pred t'
                       }.

  Notation "'mk'" := @ mkILPreFrm.

  Global Instance ILPreFrm_m (P: ILPreFrm): Proper (ord ++> lentails) P.
  admit.
  Defined.

  Local Obligation Tactic :=
    repeat match goal with
             | |- ord _ _ -> _ => intros Hord; try setoid_rewrite Hord; reflexivity
             | |- _ => intro
           end.

  Program Definition ILPre_Ops : ILogicOps ILPreFrm := {|
                                                        lentails P Q := forall t:T, P t |-- Q t;
                                                        ltrue        := mk (fun t => ltrue) _;
                                                        lfalse       := mk (fun t => lfalse) _;
                                                        limpl    P Q := mk (fun t => Forall t', ord t t' ->> P t' -->> Q t') _;
                                                        land     P Q := mk (fun t => P t //\\ Q t) _;
                                                        lor      P Q := mk (fun t => P t \\// Q t) _;
                                                        lforall  A P := mk (fun t => Forall a, P a t) _;
                                                        lexists  A P := mk (fun t => Exists a, P a t) _
                                                      |}.
  Local Existing Instance ILPre_Ops.

  Definition ILPre_ILogic : ILogic ILPreFrm.
    admit.
  Defined.
End ILogic_Pre.

Implicit Arguments ILPreFrm [T [ILOps]].
Implicit Arguments mkILPreFrm [T ord Frm ILOps].

Section ILogic_Fun.
  Context (T: Type) `{TType: type T}.
  Context `{IL: ILogic Frm}.

  Record ILFunFrm := mkILFunFrm {
                         ILFunFrm_pred :> T -> Frm;
                         ILFunFrm_closed: forall t t': T, t === t' ->
                                                          ILFunFrm_pred t |-- ILFunFrm_pred t'
                       }.

  Notation "'mk'" := @ mkILFunFrm.
  Local Obligation Tactic := admit.
  Program Definition ILFun_Ops : ILogicOps ILFunFrm := {|
                                                        lentails P Q := forall t:T, P t |-- Q t;
                                                        ltrue        := mk (fun t => ltrue) _;
                                                        lfalse       := mk (fun t => lfalse) _;
                                                        limpl    P Q := mk (fun t => P t -->> Q t) _;
                                                        land     P Q := mk (fun t => P t //\\ Q t) _;
                                                        lor      P Q := mk (fun t => P t \\// Q t) _;
                                                        lforall  A P := mk (fun t => Forall a, P a t) _;
                                                        lexists  A P := mk (fun t => Exists a, P a t) _
                                                      |}.

End ILogic_Fun.

Implicit Arguments ILFunFrm [[ILOps] [e]].
Implicit Arguments mkILFunFrm [T Frm ILOps].

Instance ILogicOps_Prop : ILogicOps Prop | 2 := {|
                                                 lentails P Q := P -> Q;
                                                 ltrue        := True;
                                                 lfalse       := False;
                                                 limpl    P Q := P -> Q;
                                                 land     P Q := P /\ Q;
                                                 lor      P Q := P \/ Q;
                                                 lforall  T F := forall x:T, F x;
                                                 lexists  T F := exists x:T, F x
                                               |}.

Instance ILogic_Prop : ILogic Prop.
admit.
Defined.

Section FunEq.
  Context A `{eT: type A}.

  Global Instance FunEquiv {T} : Equiv (T -> A) := {
                                                    equiv P Q := forall a, P a === Q a
                                                  }.
End FunEq.
Class SepAlgOps T `{eT : type T}:= {
                                    sa_unit : T;

                                    sa_mul : T -> T -> T -> Prop
                                  }.

Class SepAlg T `{SAOps: SepAlgOps T} : Type := {
                                                sa_mul_eqL a b c d : sa_mul a b c -> c === d -> sa_mul a b d;
                                                sa_mul_eqR a b c d : sa_mul a b c -> sa_mul a b d -> c === d;
                                                sa_mon a b c   : a === b -> sa_mul a c === sa_mul b c;
                                                sa_mulC a b        : sa_mul a b === sa_mul b a;
                                                sa_mulA a b c      : forall bc abc, sa_mul a bc abc -> sa_mul b c bc ->
                                                                                    exists ac, sa_mul b ac abc /\ sa_mul a c ac;
                                                sa_unitI a         : sa_mul a sa_unit a
                                              }.

Class BILOperators (A : Type) := {
                                  empSP : A;
                                  sepSP : A -> A -> A;
                                  wandSP : A -> A -> A
                                }.

Notation "a '**' b"  := (sepSP a b)
                          (at level 75, right associativity).

Section BISepAlg.
  Context {A} `{sa : SepAlg A}.
  Context {B} `{IL: ILogic B}.

  Instance SABIOps: BILOperators (ILFunFrm A B) := {
                                                    empSP := mkILFunFrm e (fun x => sa_unit === x /\\ ltrue) _;
                                                    sepSP P Q := mkILFunFrm e (fun x => Exists x1, Exists x2, sa_mul x1 x2 x /\\
                                                                                                                     P x1 //\\ Q x2) _;
                                                    wandSP P Q := mkILFunFrm e (fun x => Forall x1, Forall x2, sa_mul x x1 x2 ->>
                                                                                                                      P x1 -->> Q x2) _
                                                  }.
  admit.
  admit.
  admit.
  Defined.

End BISepAlg.

Set Implicit Arguments.

Section PFun.

  Variable X Y : Type.

  Definition splitsAs (f f1 f2: X -> option Y) :=
    forall x,
      match f x with
        | Some y => (f1 x = Some y /\ f2 x = None)
                    \/ (f2 x = Some y /\ f1 x = None)
        | _ => f1 x = None /\ f2 x = None
      end.

  Definition empFun : X -> option Y := fun _ => None.

End PFun.

Definition Flag  := BITS 5.

Inductive FlagVal := mkFlag (b: bool) | FlagUnspecified.

Definition Chan := BYTE.

Definition PTR := DWORD.

Inductive NonSPReg := EAX | EBX | ECX | EDX | ESI | EDI | EBP.

Inductive Reg := nonSPReg (r: NonSPReg) | ESP.

Inductive AnyReg := regToAnyReg (r: Reg) | EIP.

Inductive Frag := Registers | Memory | Flags | Traces.
Definition fragDom d :=
  match d with
    | Registers => AnyReg
    | Memory => PTR
    | Flags => Flag
    | Traces => Chan
  end.

Definition fragTgt d :=
  match d with
    | Registers => DWORD

    | Memory => option BYTE

    | Flags => FlagVal
    | Traces => list (bool * BYTE)
  end.

Definition PState := forall f: Frag, fragDom f -> option (fragTgt f).

Definition emptyPState : PState := fun _ => empFun _.

Instance PStateEquiv : Equiv PState := {
                                        equiv s1 s2 := forall f, s1 f = s2 f
                                      }.

Instance PStateType : type PState.
admit.
Defined.

Instance PStateSepAlgOps: SepAlgOps PState := {
                                               sa_unit := emptyPState;
                                               sa_mul s1 s2 s := forall f, splitsAs (s f) (s1 f) (s2 f)
                                             }.

Definition SPred := ILFunFrm PState Prop.

Local Existing Instance ILFun_Ops.
Local Existing Instance SABIOps.

Implicit Arguments mkILFunFrm [[e] [ILOps]].

Definition mkSPred (P : PState -> Prop)
           (f : forall t t' : PState, t === t' -> P t |-- P t') : SPred :=
  mkILFunFrm PState Prop P f.

Definition eq_pred s := mkSPred (fun s' => s === s') admit.

Definition extSP (P Q: SPred) := exists R, (P ** R) -|- Q.
Instance extSP_Pre: PreOrder extSP.
admit.
Defined.

Local Existing Instance ILPre_Ops.
Local Existing Instance ILPre_ILogic.

Definition spec := ILPreFrm ge (ILPreFrm extSP Prop).

Definition mkspec (f: nat -> SPred -> Prop)
           (Hnat: forall k P, f (S k) P -> f k P)
           (HSPred: forall k P P', extSP P P' -> f k P -> f k P') : spec.
Proof.
  refine (mkILPreFrm (fun k => mkILPreFrm (f k) _) _).
  simpl; admit.
  Grab Existential Variables.
  repeat intro.
  eapply HSPred; eassumption.
Defined.

Definition spec_fun (S: spec) := fun k P => S k P.
Coercion spec_fun: spec >-> Funclass.

Definition spec_at (S: spec) (R: SPred) : spec.
Proof.
  refine (mkspec (fun k P => S k (R ** P)) _ _); admit.
Defined.

Infix "@ " := spec_at (at level 44, left associativity).

Class AtEx S := at_ex: forall A f, Forall x:A, S @  f x |-- S @  lexists f.

Module slow.
  Axiom AtEx_at : forall S R {HS: AtEx S}, AtEx (S @  R).
  Local Hint Extern 1 (AtEx _) => apply AtEx_at : typeclass_instances.
  Typeclasses eauto := debug.
  Goal forall S R (HS : AtEx S) a, eq_pred a |-- R -> AtEx (S @  eq_pred a).
  Proof.
    Time typeclasses eauto.
    (* : no match for (forall (S : spec) (R : SPred),
                AtEx S ->
                forall a : PState, eq_pred a |-- R -> AtEx (S @  eq_pred a))
2 possibilities
: no match for (forall R : SPred,
                AtEx S ->
                forall a : PState, eq_pred a |-- R -> AtEx (S @  eq_pred a))
2 possibilities
: no match for (AtEx S ->
                forall a : PState, eq_pred a |-- R -> AtEx (S @  eq_pred a))
2 possibilities
: no match for (forall a : PState, eq_pred a |-- R -> AtEx (S @  eq_pred a))
3 possibilities
: no match for (eq_pred a |-- R -> AtEx (S @  eq_pred a))
3 possibilities
1: (*external*) apply AtEx_at on
(AtEx (S @  eq_pred a))
1.1.1: exact HS on
(AtEx S)
no backtrack on (AtEx S) after normevars
no backtrack on (AtEx S) after (*external*)
no backtrack on (AtEx (S @  eq_pred a)) after intro
no backtrack on (eq_pred a |-- R -> AtEx (S @  eq_pred a)) after intro
no backtrack on (forall a : PState, eq_pred a |-- R -> AtEx (S @  eq_pred a)) after intro
no backtrack on (AtEx S ->
                 forall a : PState, eq_pred a |-- R -> AtEx (S @  eq_pred a)) after intro
no backtrack on (forall R : SPred,
                 AtEx S ->
                 forall a : PState, eq_pred a |-- R -> AtEx (S @  eq_pred a)) after intro
No more subgoals.

(dependent evars:)
Finished transaction in 1. secs (1.260079u,0.s) *)
    Undo.
    Time intros; typeclasses eauto.
    (* 1: (*external*) apply AtEx_at on
(AtEx (S @  eq_pred a))
1.1.1: exact HS on
(AtEx S)
no backtrack on (AtEx S) after normevars
no backtrack on (AtEx S) after (*external*)
No more subgoals.

(dependent evars:)
Finished transaction in 0. secs (0.u,0.s) *)
    Undo.
    Fail Timeout 1 typeclasses eauto. (* Timeout! *)
  Admitted.
End slow.

Module fast.
  Axiom AtEx_at : forall S R {HS: AtEx S}, AtEx (S @  R).
  Local Hint Extern 1 AtEx => apply AtEx_at : typeclass_instances.
  Typeclasses eauto := debug.
  Goal forall S R (HS : AtEx S) a, eq_pred a |-- R -> AtEx (S @  eq_pred a).
  Proof.
    Time typeclasses eauto. (* : no match for (forall (S : spec) (R : SPred),
                AtEx S ->
                forall a : PState, eq_pred a |-- R -> AtEx (S @  eq_pred a))
2 possibilities
: no match for (forall R : SPred,
                AtEx S ->
                forall a : PState, eq_pred a |-- R -> AtEx (S @  eq_pred a))
2 possibilities
: no match for (AtEx S ->
                forall a : PState, eq_pred a |-- R -> AtEx (S @  eq_pred a))
2 possibilities
: no match for (forall a : PState, eq_pred a |-- R -> AtEx (S @  eq_pred a))
3 possibilities
: no match for (eq_pred a |-- R -> AtEx (S @  eq_pred a))
3 possibilities
1: apply AtEx_at on
(AtEx (S @  eq_pred a))
1.1.1: exact HS on
(AtEx S)
no backtrack on (AtEx S) after normevars
no backtrack on (AtEx S) after apply AtEx_at
no backtrack on (AtEx (S @  eq_pred a)) after intro
no backtrack on (eq_pred a |-- R -> AtEx (S @  eq_pred a)) after intro
no backtrack on (forall a : PState, eq_pred a |-- R -> AtEx (S @  eq_pred a)) after intro
no backtrack on (AtEx S ->
                 forall a : PState, eq_pred a |-- R -> AtEx (S @  eq_pred a)) after intro
no backtrack on (forall R : SPred,
                 AtEx S ->
                 forall a : PState, eq_pred a |-- R -> AtEx (S @  eq_pred a)) after intro
No more subgoals.

(dependent evars:)
Finished transaction in 0. secs (0.u,0.s)
 *)
  Defined.
End fast.


Comment author: @ppedrot

It seems to be an issue in unification.


Comment author: @ppedrot

Here is a a shorter version of the example:

```coq
Require Program.Tactics.
Generalizable All Variables.

Class ILogicOps Frm := {
                        lentails: Frm -> Frm -> Prop;
                        lforall: forall {T}, (T -> Frm) -> Frm;
                        lexists: forall {T}, (T -> Frm) -> Frm
                      }.

Infix "|--"  := lentails (at level 79, no associativity).
Notation "'Forall' x .. y , p" :=
  (lforall (fun x => .. (lforall (fun y => p)) .. )) (at level 78, x binder, y binder, right associativity).
Notation "'Exists' x .. y , p" :=
  (lexists (fun x => .. (lexists (fun y => p)) .. )) (at level 78, x binder, y binder, right associativity).

Section ILogic_Pre.
  Context (T : Type) .
  Context `{ILOps: ILogicOps Frm}.

  Record ILPreFrm := mkILPreFrm {
                         ILPreFrm_pred :> T -> Frm;
                         ILPreFrm_closed: forall t t': T,
                                                          ILPreFrm_pred t |-- ILPreFrm_pred t'
                       }.

  Notation "'mk'" := @ mkILPreFrm.

  Program Definition ILPre_Ops : ILogicOps ILPreFrm := {|
                                                        lentails P Q := forall t:T, P t |-- Q t;
                                                        lforall  A P := mk (fun t => Forall a, P a t) _;
                                                        lexists  A P := mk (fun t => Exists a, P a t) _
                                                      |}.
  Admit Obligations.

End ILogic_Pre.

Implicit Arguments ILPreFrm [T [ILOps]].
Implicit Arguments mkILPreFrm [T Frm ILOps].

Section ILogic_Fun.
  Context (T: Type).
  Context `{ILOps: ILogicOps Frm}.

  Definition ILFunFrm := T -> Frm .

  Program Definition ILFun_Ops : ILogicOps ILFunFrm := {|
                                                        lentails P Q := forall t:T, P t |-- Q t;
                                                        lforall  A P := (fun t => Forall a, P a t);
                                                        lexists  A P := (fun t => Exists a, P a t)
                                                      |}.

End ILogic_Fun.

Set Implicit Arguments.

Axiom PState : Type.
Definition SPred := @ ILFunFrm PState Prop.
Axiom sepSP : SPred -> SPred -> SPred.
Axiom eq_pred : PState -> SPred.

Local Existing Instance ILFun_Ops.
Local Existing Instance ILPre_Ops.

Instance ILogicOps_Prop : ILogicOps Prop | 2 := {|
                                                 lentails := fun (P : Prop) (Q : Prop) => P -> Q;
                                                 lforall  T F := forall x:T, F x;
                                                 lexists  T F := exists x:T, F x
                                               |}.

Definition spec := @ ILPreFrm nat (@ ILPreFrm SPred Prop _) _.

Definition mkspec (f: nat -> SPred -> Prop)
           (HSPred: forall k P P', f k P -> f k P') : spec.
Proof.
  refine (mkILPreFrm (fun k => mkILPreFrm (f k) _) _).
  repeat intro.
  eapply HSPred; eassumption.
  simpl. admit.
Defined.

Definition spec_fun (S: spec) := fun k P => S k P.
Coercion spec_fun: spec >-> Funclass.

Definition spec_at (S: spec) (R: SPred) : spec.
Proof.
  refine (mkspec (fun k P => S k (sepSP R P)) _); admit.
Defined.

Infix "@ " := spec_at (at level 44, left associativity).

Class AtEx S := at_ex: forall A f, Forall x:A, S @  f x |-- S @  lexists f.

Module slow.
  Axiom AtEx_at : forall S R {HS: AtEx S}, AtEx (S @  R).
  Local Hint Extern 1 (AtEx _) => apply AtEx_at : typeclass_instances.
  Typeclasses eauto := debug.
  Goal forall S R (HS : AtEx S) a, eq_pred a |-- R -> AtEx (S @  eq_pred a).
  Proof.
    Time typeclasses eauto.
    Undo.
    Time intros; typeclasses eauto.
    Undo.
    Fail Timeout 1 typeclasses eauto. (* Timeout! *)
  Admitted.
End slow.

Module fast.
  Axiom AtEx_at : forall S R {HS: AtEx S}, AtEx (S @  R).
  Local Hint Extern 1 AtEx => apply AtEx_at : typeclass_instances.
  Typeclasses eauto := debug.
  Goal forall S R (HS : AtEx S) a, eq_pred a |-- R -> AtEx (S @  eq_pred a).
  Proof.
    Time typeclasses eauto.
  Defined.
End fast.
```
I can't reproduce on a modern Coq version, closing.
