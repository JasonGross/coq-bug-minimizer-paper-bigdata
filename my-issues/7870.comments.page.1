[{"url":"https://api.github.com/repos/coq/coq/issues/comments/520082680","html_url":"https://github.com/coq/coq/issues/7870#issuecomment-520082680","issue_url":"https://api.github.com/repos/coq/coq/issues/7870","id":520082680,"node_id":"MDEyOklzc3VlQ29tbWVudDUyMDA4MjY4MA==","user":{"login":"pi8027","id":111003,"node_id":"MDQ6VXNlcjExMTAwMw==","avatar_url":"https://avatars.githubusercontent.com/u/111003?v=4","gravatar_id":"","url":"https://api.github.com/users/pi8027","html_url":"https://github.com/pi8027","followers_url":"https://api.github.com/users/pi8027/followers","following_url":"https://api.github.com/users/pi8027/following{/other_user}","gists_url":"https://api.github.com/users/pi8027/gists{/gist_id}","starred_url":"https://api.github.com/users/pi8027/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pi8027/subscriptions","organizations_url":"https://api.github.com/users/pi8027/orgs","repos_url":"https://api.github.com/users/pi8027/repos","events_url":"https://api.github.com/users/pi8027/events{/privacy}","received_events_url":"https://api.github.com/users/pi8027/received_events","type":"User","site_admin":false},"created_at":"2019-08-09T22:21:35Z","updated_at":"2019-08-09T22:21:46Z","author_association":"CONTRIBUTOR","body":"@JasonGross Hello. Your script gives me the following output in Coq 8.9 and 8.10.\r\n```haskell\r\nmodule Main where\r\n\r\nimport qualified Prelude\r\n\r\nalpha :: Prelude.String\r\nalpha =\r\n  (:) '\\206' ((:) '\\177' ([]))\r\n```\r\nIt does compile with GHC 8.0.1. `α` is `0xCE 0xB1` in UTF-8 encoding so I think it's fine. Would you confirm the problem is disappeared? (I have no Windows computer.)","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/520082680/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/520574701","html_url":"https://github.com/coq/coq/issues/7870#issuecomment-520574701","issue_url":"https://api.github.com/repos/coq/coq/issues/7870","id":520574701,"node_id":"MDEyOklzc3VlQ29tbWVudDUyMDU3NDcwMQ==","user":{"login":"pi8027","id":111003,"node_id":"MDQ6VXNlcjExMTAwMw==","avatar_url":"https://avatars.githubusercontent.com/u/111003?v=4","gravatar_id":"","url":"https://api.github.com/users/pi8027","html_url":"https://github.com/pi8027","followers_url":"https://api.github.com/users/pi8027/followers","following_url":"https://api.github.com/users/pi8027/following{/other_user}","gists_url":"https://api.github.com/users/pi8027/gists{/gist_id}","starred_url":"https://api.github.com/users/pi8027/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pi8027/subscriptions","organizations_url":"https://api.github.com/users/pi8027/orgs","repos_url":"https://api.github.com/users/pi8027/repos","events_url":"https://api.github.com/users/pi8027/events{/privacy}","received_events_url":"https://api.github.com/users/pi8027/received_events","type":"User","site_admin":false},"created_at":"2019-08-12T20:06:05Z","updated_at":"2019-08-13T07:37:37Z","author_association":"CONTRIBUTOR","body":"I didn't reproduce this issue in Coq 8.8.0. The pretty-printing function of character literals is implemented by using `Char.escaped` and hasn't been changed in the recent 5 years. So I guess that the source of the issue was ocaml/ocaml#6521. If it's true, the issue is addressed in OCaml 4.03.0.","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/520574701/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/520741778","html_url":"https://github.com/coq/coq/issues/7870#issuecomment-520741778","issue_url":"https://api.github.com/repos/coq/coq/issues/7870","id":520741778,"node_id":"MDEyOklzc3VlQ29tbWVudDUyMDc0MTc3OA==","user":{"login":"llelf","id":870172,"node_id":"MDQ6VXNlcjg3MDE3Mg==","avatar_url":"https://avatars.githubusercontent.com/u/870172?v=4","gravatar_id":"","url":"https://api.github.com/users/llelf","html_url":"https://github.com/llelf","followers_url":"https://api.github.com/users/llelf/followers","following_url":"https://api.github.com/users/llelf/following{/other_user}","gists_url":"https://api.github.com/users/llelf/gists{/gist_id}","starred_url":"https://api.github.com/users/llelf/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/llelf/subscriptions","organizations_url":"https://api.github.com/users/llelf/orgs","repos_url":"https://api.github.com/users/llelf/repos","events_url":"https://api.github.com/users/llelf/events{/privacy}","received_events_url":"https://api.github.com/users/llelf/received_events","type":"User","site_admin":false},"created_at":"2019-08-13T08:31:42Z","updated_at":"2019-08-13T08:31:42Z","author_association":"CONTRIBUTOR","body":"> α is 0xCE 0xB1 in UTF-8 encoding so I think it's fine.\r\n\r\nNot really.  `\"\\206\\177\"` is `\"Î±\"`\r\n\r\nIt should be\r\n```haskell\r\nalpha = \"α\"\r\n   -- or \"\\945\"\r\n   --  = ('\\945' : [])\r\n   --  = Data.Text.unpack (Data.Text.Encoding.decodeUtf8 (Data.ByteString.pack [206,177]))\r\n```\r\n\r\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/520741778/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/520745021","html_url":"https://github.com/coq/coq/issues/7870#issuecomment-520745021","issue_url":"https://api.github.com/repos/coq/coq/issues/7870","id":520745021,"node_id":"MDEyOklzc3VlQ29tbWVudDUyMDc0NTAyMQ==","user":{"login":"vbgl","id":2612464,"node_id":"MDQ6VXNlcjI2MTI0NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/2612464?v=4","gravatar_id":"","url":"https://api.github.com/users/vbgl","html_url":"https://github.com/vbgl","followers_url":"https://api.github.com/users/vbgl/followers","following_url":"https://api.github.com/users/vbgl/following{/other_user}","gists_url":"https://api.github.com/users/vbgl/gists{/gist_id}","starred_url":"https://api.github.com/users/vbgl/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/vbgl/subscriptions","organizations_url":"https://api.github.com/users/vbgl/orgs","repos_url":"https://api.github.com/users/vbgl/repos","events_url":"https://api.github.com/users/vbgl/events{/privacy}","received_events_url":"https://api.github.com/users/vbgl/received_events","type":"User","site_admin":false},"created_at":"2019-08-13T08:41:50Z","updated_at":"2019-08-13T08:41:50Z","author_association":"CONTRIBUTOR","body":"Haskell strings (type String) are not encoded: they are a list of unicode code points.\r\n\r\nMaybe the extraction of Coq strings should target the ByteString Haskell data type.","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/520745021/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/520754609","html_url":"https://github.com/coq/coq/issues/7870#issuecomment-520754609","issue_url":"https://api.github.com/repos/coq/coq/issues/7870","id":520754609,"node_id":"MDEyOklzc3VlQ29tbWVudDUyMDc1NDYwOQ==","user":{"login":"pi8027","id":111003,"node_id":"MDQ6VXNlcjExMTAwMw==","avatar_url":"https://avatars.githubusercontent.com/u/111003?v=4","gravatar_id":"","url":"https://api.github.com/users/pi8027","html_url":"https://github.com/pi8027","followers_url":"https://api.github.com/users/pi8027/followers","following_url":"https://api.github.com/users/pi8027/following{/other_user}","gists_url":"https://api.github.com/users/pi8027/gists{/gist_id}","starred_url":"https://api.github.com/users/pi8027/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pi8027/subscriptions","organizations_url":"https://api.github.com/users/pi8027/orgs","repos_url":"https://api.github.com/users/pi8027/repos","events_url":"https://api.github.com/users/pi8027/events{/privacy}","received_events_url":"https://api.github.com/users/pi8027/received_events","type":"User","site_admin":false},"created_at":"2019-08-13T09:08:15Z","updated_at":"2019-08-13T09:12:58Z","author_association":"CONTRIBUTOR","body":"@llelf I know. But translating the given Coq definition `alpha` to `\"\\945\"` doesn't preserve the meaning and makes Haskell extraction unsound. The former one has size 2 but the latter one has size 1.\r\n@vbgl `Data.ByteString.cons` has the linear time complexity so would `[Word8]` be reasonable?","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/520754609/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/520768785","html_url":"https://github.com/coq/coq/issues/7870#issuecomment-520768785","issue_url":"https://api.github.com/repos/coq/coq/issues/7870","id":520768785,"node_id":"MDEyOklzc3VlQ29tbWVudDUyMDc2ODc4NQ==","user":{"login":"vbgl","id":2612464,"node_id":"MDQ6VXNlcjI2MTI0NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/2612464?v=4","gravatar_id":"","url":"https://api.github.com/users/vbgl","html_url":"https://github.com/vbgl","followers_url":"https://api.github.com/users/vbgl/followers","following_url":"https://api.github.com/users/vbgl/following{/other_user}","gists_url":"https://api.github.com/users/vbgl/gists{/gist_id}","starred_url":"https://api.github.com/users/vbgl/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/vbgl/subscriptions","organizations_url":"https://api.github.com/users/vbgl/orgs","repos_url":"https://api.github.com/users/vbgl/repos","events_url":"https://api.github.com/users/vbgl/events{/privacy}","received_events_url":"https://api.github.com/users/vbgl/received_events","type":"User","site_admin":false},"created_at":"2019-08-13T09:50:20Z","updated_at":"2019-08-13T09:50:20Z","author_association":"CONTRIBUTOR","body":"Indeed, a list of Word8 precisely matches the Coq definition. Extracted string literals will probably be hard to read — but they already are…","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/520768785/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/520806987","html_url":"https://github.com/coq/coq/issues/7870#issuecomment-520806987","issue_url":"https://api.github.com/repos/coq/coq/issues/7870","id":520806987,"node_id":"MDEyOklzc3VlQ29tbWVudDUyMDgwNjk4Nw==","user":{"login":"pi8027","id":111003,"node_id":"MDQ6VXNlcjExMTAwMw==","avatar_url":"https://avatars.githubusercontent.com/u/111003?v=4","gravatar_id":"","url":"https://api.github.com/users/pi8027","html_url":"https://github.com/pi8027","followers_url":"https://api.github.com/users/pi8027/followers","following_url":"https://api.github.com/users/pi8027/following{/other_user}","gists_url":"https://api.github.com/users/pi8027/gists{/gist_id}","starred_url":"https://api.github.com/users/pi8027/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pi8027/subscriptions","organizations_url":"https://api.github.com/users/pi8027/orgs","repos_url":"https://api.github.com/users/pi8027/repos","events_url":"https://api.github.com/users/pi8027/events{/privacy}","received_events_url":"https://api.github.com/users/pi8027/received_events","type":"User","site_admin":false},"created_at":"2019-08-13T12:04:48Z","updated_at":"2019-08-13T12:04:48Z","author_association":"CONTRIBUTOR","body":"Anyway, we wouldn't able to deal with Unicode strings in extraction. So I think this issue itself has been addressed in OCaml 4.03.0. But we can keep it opened to find a good alternative to `ExtrHaskellString` which realizes Coq `string` by `[Word8]` or `ByteString`.","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/520806987/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]