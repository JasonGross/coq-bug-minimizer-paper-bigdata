[{"url":"https://api.github.com/repos/coq/coq/issues/comments/337548173","html_url":"https://github.com/coq/coq/issues/5138#issuecomment-337548173","issue_url":"https://api.github.com/repos/coq/coq/issues/5138","id":337548173,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0ODE3Mw==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-10-13T17:13:51Z","updated_at":"2017-10-18T10:44:10Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nIn 8.5 and 8.6:\n\nGoal forall (W : Type) (P : bool -> bool -> Prop),\n    let sub_with_carry := prod bool W in\n    forall (subc : sub_with_carry)\n           (is_sub_with_carry : forall _ : prod bool W, Prop)\n           (_ : is_sub_with_carry subc) (c k : bool)\n           (_ : forall (subc0 : prod bool W)\n                       (_ : is_sub_with_carry subc0) (c0 : bool),\n               P (@ fst bool W (subc0)) k),\n      @ ex bool\n          (fun b : bool =>\n             P (@ fst bool W (subc)) b).\n  intros.\n  eexists.\n  typeclasses eauto with nocore || fail 0 \"too early\".\n  Undo.\n  Typeclasses eauto := debug.\n  typeclasses eauto with core.\n  (* Debug: 1: looking for (P (fst subc) ?b) with backtracking\nDebug: 1: no match for (P (fst subc) ?b) , 1 possibilities\n   *)\n  (* Ltac call to \"typeclasses eauto (int_or_var_opt) with (ne_preident_list)\" \nfailed.\nError: Tactic failure: Proof search failed. *)\n\nAlso, what does \"1 possibilities\" mean?\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337548173/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337548175","html_url":"https://github.com/coq/coq/issues/5138#issuecomment-337548175","issue_url":"https://api.github.com/repos/coq/coq/issues/5138","id":337548175,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0ODE3NQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-10-17T07:23:06Z","updated_at":"2017-10-18T10:44:10Z","author_association":"CONTRIBUTOR","body":"Comment author: @mattam82\n\nThis is an intended change. core is a database where no constants/variables are \nunfoldable by default (Print HintDb tells it), hence when calling typeclasses \neauto with just that database it's now unable to unfold the sub_with_carry \nabbreviation and fails to unify. You can get the expected behavior by giving a \ndifferent database for the local hints (it is using the transparent state of \nthe first database), like so:\n\nCreate HintDb transparent.\ntypeclasses eauto with transparent core.\n\ntypeclasses eauto does not use the \"nocore\" hack btw, it just ignores databases \nwhich do not exist.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337548175/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]