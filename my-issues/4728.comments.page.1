[{"url":"https://api.github.com/repos/coq/coq/issues/comments/337542376","html_url":"https://github.com/coq/coq/issues/4728#issuecomment-337542376","issue_url":"https://api.github.com/repos/coq/coq/issues/4728","id":337542376,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0MjM3Ng==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-05-13T18:14:55Z","updated_at":"2018-05-15T05:57:57Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\r\n\r\nI'd like the final [Check] in the following to work:\r\n```coq\r\nLtac fin_eta_expand :=\r\n  [ > lazymatch goal with\r\n      | [ H : _ |- _ ] => clear H\r\n      end..\r\n  | lazymatch goal with\r\n    | [ H : ?T |- ?T ]\r\n      => exact H\r\n    | [ |- ?G ]\r\n      => fail 0 \"No hypothesis matching\" G\r\n    end ];\r\n  let n := numgoals in\r\n  tryif constr_eq numgoals 0\r\n  then idtac\r\n  else fin_eta_expand.\r\n\r\nLtac pre_eta_expand x :=\r\n  let T := type of x in\r\n  let G := match goal with |- ?G => G end in\r\n  unify T G;\r\n  unshelve econstructor;\r\n  destruct x;\r\n  fin_eta_expand.\r\n\r\nLtac eta_expand x :=\r\n  let v := constr:(ltac:(pre_eta_expand x)) in\r\n  idtac v;\r\n  let v := (eval cbv beta iota zeta in v) in\r\n  exact v.\r\n\r\nNotation eta_expand x := (ltac:(eta_expand x)) (only parsing).\r\n\r\nLtac partial_unify eqn :=\r\n  lazymatch eqn with\r\n  | ?x = ?x => idtac\r\n  | ?f ?x = ?g ?y\r\n    => partial_unify (f = g);\r\n       (tryif unify x y then\r\n           idtac\r\n         else tryif has_evar x then\r\n             unify x y\r\n           else tryif has_evar y then\r\n               unify x y\r\n             else\r\n               idtac)\r\n  | ?x = ?y\r\n    => idtac;\r\n       (tryif unify x y then\r\n           idtac\r\n         else tryif has_evar x then\r\n             unify x y\r\n           else tryif has_evar y then\r\n               unify x y\r\n             else\r\n               idtac)\r\n  end.\r\n\r\nTactic Notation \"{\" open_constr(old_record) \"with\" open_constr(new_record) \"}\" :=\r\n  let old_record' := eta_expand old_record in\r\n  partial_unify (old_record = new_record);\r\n  eexact new_record.\r\n\r\nSet Implicit Arguments.\r\nRecord prod A B := pair { fst : A ; snd : B }.\r\nInfix \"*\" := prod : type_scope.\r\nNotation \"( x , y , .. , z )\" := (pair .. (pair x y) .. z) : core_scope.\r\n\r\nNotation \"{ old 'with' new }\" := (ltac:({ old with new })) (only parsing).\r\n\r\nCheck ltac:({ (1, 1) with {| snd := 2 |} }).\r\nCheck { (1, 1) with {| snd := 2 |} }. (* Error: Cannot infer this placeholder of type \"Type\". *)\r\n\r\n```","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337542376/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/442986919","html_url":"https://github.com/coq/coq/issues/4728#issuecomment-442986919","issue_url":"https://api.github.com/repos/coq/coq/issues/4728","id":442986919,"node_id":"MDEyOklzc3VlQ29tbWVudDQ0Mjk4NjkxOQ==","user":{"login":"JasonGross","id":396076,"node_id":"MDQ6VXNlcjM5NjA3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/396076?v=4","gravatar_id":"","url":"https://api.github.com/users/JasonGross","html_url":"https://github.com/JasonGross","followers_url":"https://api.github.com/users/JasonGross/followers","following_url":"https://api.github.com/users/JasonGross/following{/other_user}","gists_url":"https://api.github.com/users/JasonGross/gists{/gist_id}","starred_url":"https://api.github.com/users/JasonGross/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JasonGross/subscriptions","organizations_url":"https://api.github.com/users/JasonGross/orgs","repos_url":"https://api.github.com/users/JasonGross/repos","events_url":"https://api.github.com/users/JasonGross/events{/privacy}","received_events_url":"https://api.github.com/users/JasonGross/received_events","type":"User","site_admin":false},"created_at":"2018-11-29T20:46:17Z","updated_at":"2018-11-29T20:46:17Z","author_association":"MEMBER","body":"Here's another version of the record-updating code that would also be made slightly better with uconstr-in-notations:\r\n\r\n```coq\r\nDefinition marker {T} (v : T) := v.                                                                                                                                                                         \r\nLtac apply_with_underscores f x :=                                                                                                                                                                          \r\n  match constr:(Set) with                                                                                                                                                                                   \r\n  | _ => constr:(f x)                                                                                                                                                                                       \r\n  | _ => apply_with_underscores uconstr:(f _) x                                                                                                                                                             \r\n  end.                                                                                                                                                                                                      \r\nLtac update_record v accessor new_value :=                                                                                                                                                                  \r\n  let T := type of v in                                                                                                                                                                                     \r\n  let v' := open_constr:(ltac:(econstructor) : T) in                                                                                                                                                        \r\n  let accessed := apply_with_underscores accessor v' in                                                                                                                                                     \r\n  let accessed := (eval hnf in accessed) in                                                                                                                                                                 \r\n  let unif := open_constr:(eq_refl : accessed = marker _) in                                                                                                                                                \r\n  let v'' := (eval cbv [marker] in v') in                                                                                                                                                                   \r\n  let unif := constr:(eq_refl : v = v'') in                                                                                                                                                                 \r\n  lazymatch v' with                                                                                                                                                                                         \r\n  | context G[marker _] => let G' := context G[new_value] in                                                                                                                                                \r\n                           G'                                                                                                                                                                               \r\n  end.                                                                                                                                                                                                      \r\n                                                                                                                                                                                                            \r\nTactic Notation \"update!\" constr(v) \"setting\" uconstr(accessor) \"to\" constr(new_value)                                                                                                                      \r\n  := let res := update_record v accessor new_value in                                                                                                                                                       \r\n     exact res.                                                                                                                                                                                             \r\n                                                                                                                                                                                                            \r\nSet Primitive Projections.                                                                                                                                                                                  \r\nRecord prod A B := pair { fst : A ; snd : B }.                                                                                                                                                              \r\nArguments pair {A B} _ _.                                                                                                                                                                                   \r\nArguments fst {A B} _.                                                                                                                                                                                      \r\nArguments snd {A B} _.                                                                                                                                                                                      \r\n                                                                                                                                                                                                            \r\nNotation \"'update!' v 'setting' accessor 'to' new_value\" := (ltac:(update! v setting accessor to new_value)) (only parsing, at level 90).                                                                   \r\nCheck ltac:(update! {| fst := 1 ; snd := 2 |} setting fst to 3).                                                                                                                                            \r\nCheck update! {| fst := 1 ; snd := 2 |} setting @fst to 3.\r\n```","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/442986919/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]