[{"url":"https://api.github.com/repos/coq/coq/issues/comments/337539269","html_url":"https://github.com/coq/coq/issues/4518#issuecomment-337539269","issue_url":"https://api.github.com/repos/coq/coq/issues/4518","id":337539269,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUzOTI2OQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-01-23T17:04:09Z","updated_at":"2017-10-18T10:15:45Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nSet Universe Polymorphism.\nSection foo.\n  Let foo@ {i} := Type@ {i}. (* Syntax error: [vernac:def_body] expected after \n[Prim.identref] (in [vernac:gallina]). *)\nEnd foo.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337539269/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337539271","html_url":"https://github.com/coq/coq/issues/4518#issuecomment-337539271","issue_url":"https://api.github.com/repos/coq/coq/issues/4518","id":337539271,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUzOTI3MQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-01-24T17:07:06Z","updated_at":"2017-10-18T10:15:45Z","author_association":"CONTRIBUTOR","body":"Comment author: @ppedrot\n\nI'm not sure that polymorphic Let-definitions make sense, just as you can't have polymorphic section variables. Why would you want this to work?\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337539271/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337539272","html_url":"https://github.com/coq/coq/issues/4518#issuecomment-337539272","issue_url":"https://api.github.com/repos/coq/coq/issues/4518","id":337539272,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUzOTI3Mg==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-01-24T17:28:49Z","updated_at":"2017-10-18T10:15:45Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nIf I write\n  Let foo := (Type * Type)%type.\nI get something that mentions two universe levels. If I write\n  Let foo := Eval hnf in let T := Type in (T * T)%type.\nI (expect to) get the same, but with one universe level.  I want to do the same thing by writing somehing like\n  Let foo := (Type@ {i} * Type@ {i})%type.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337539272/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337539275","html_url":"https://github.com/coq/coq/issues/4518#issuecomment-337539275","issue_url":"https://api.github.com/repos/coq/coq/issues/4518","id":337539275,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUzOTI3NQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-01-24T17:30:34Z","updated_at":"2017-10-18T10:15:45Z","author_association":"CONTRIBUTOR","body":"Comment author: @ppedrot\n\nYes, but what term should be elaborated when the section is closed? Universe polymorphism can only be specified on toplevel constants, not inside terms, so that the transformation\n\nLet foo := bar. Definition baz := P.\n\ninto\n\nDefinition baz := let foo := bar in P.\n\nis not well-typed in general.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337539275/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337539276","html_url":"https://github.com/coq/coq/issues/4518#issuecomment-337539276","issue_url":"https://api.github.com/repos/coq/coq/issues/4518","id":337539276,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUzOTI3Ng==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-01-25T09:25:01Z","updated_at":"2017-10-18T10:15:45Z","author_association":"CONTRIBUTOR","body":"Comment author: @silene\n\nAs Pierre-Marie explained, \"Let\" is translated to a let-in construct, which is not polymorphic with respect to universes. So it does not make sense to allow the \"@ {}\" syntax on \"Let\". However, you can use the \"Universe\" command to quantify over universes; it was designed for this purpose.\n\nSet Universe Polymorphism.\nSection foo.\n  Universe i.\n  Let foo := (Type@ {i} * Type@ {i})%type.\n  Definition bar := foo.\nEnd foo.\nPrint bar.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337539276/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]