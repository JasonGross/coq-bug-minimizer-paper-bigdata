[{"url":"https://api.github.com/repos/coq/coq/issues/comments/337554667","html_url":"https://github.com/coq/coq/issues/5572#issuecomment-337554667","issue_url":"https://api.github.com/repos/coq/coq/issues/5572","id":337554667,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU1NDY2Nw==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2017-06-01T18:31:31Z","updated_at":"2017-10-18T11:04:58Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nConsider this code:\nModule A.\n  Inductive nat := O | S (_ : nat).\n\n  Definition zero := O.\n  Definition one := Eval compute in S zero.\n  Definition two := Eval compute in S one.\n\n  SearchPattern nat.\nEnd A.\nSearchPattern A.nat.\n\nIn v8.6, we get:\n  two: nat\n  one: nat\n  zero: nat\n  O: nat\n  S: nat -> nat\nfor the first and\n  A.O: A.nat\n  A.S: A.nat -> A.nat\n  A.zero: A.nat\n  A.one: A.nat\n  A.two: A.nat\nfor the second\n\nIn trunk, we get\n  O: nat\n  one: nat\n  zero: nat\n  two: nat\n  S: nat -> nat\nfor the first and\n  A.two: A.nat\n  A.one: A.nat\n  A.zero: A.nat\n  A.O: A.nat\n  A.S: A.nat -> A.nat\nfor the second.\n\nI don't understand why the list is reversed in 8.6, and why the lists in trunk \nare so different in order.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337554667/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337554668","html_url":"https://github.com/coq/coq/issues/5572#issuecomment-337554668","issue_url":"https://api.github.com/repos/coq/coq/issues/5572","id":337554668,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU1NDY2OA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2017-06-01T19:10:16Z","updated_at":"2017-10-18T11:04:58Z","author_association":"CONTRIBUTOR","body":"Comment author: @aspiwack\n\nThe cause seems to be the same in v8.6 and trunk: the stream is reversed depending whether Search is called from inside the module or outside.\n\nIn trunk and additional sorting occurs, but doesn't re-order things of the same type, so we can observe the reversal in each type (each priority, to be more precise) but not globally.\n\nMaybe it's best to sort search result in a way that is more independent of streaming order (the main requirement for streaming is speed, and we do very much not want to rely on ordering there, if I understand correctly). I'm not sure what is best. One thing I never got around to think about more carefully was if it was possible to group the value of a given type together (so we would have something like `O,one,two,zero: nat` and such in your example). Maybe that could be used to solve this problem as well? At least to some degree.\n\nThough how much does the ordering of `Search` matters?\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337554668/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]