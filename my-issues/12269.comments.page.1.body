(Btw, to fix my problems, I need this to work not just converting let-bound variables against other let-bound variables, but also converting let-bound variables with global constants, and global constants with other global constants.  I don't think I need it for any cases other than Var, Rel, and Const (or, rather, with suitable tuning of conversion (especially if I can hint about unfolding order for Vars and Rels), I think I can make do with memoization just in these cases.)
cc also @gares , who might be interested in trying to write code in elpi for the challenge that spurred this:
Challenge: using a fixed set of non-primitive records/inductives/coinductives, come up with a way to extend the global context, in time and space 𝒪(*n* log *n*), with definitions for:
1. a nested (non-dependent) pair type / pseudo-record with *n* fields,
2. the constructor function that takes in the *n* fields and returns the type defined in (1),
3. the *n* projections from this type, 
4. either the η principle or the dependent eliminator for this type (they're each easily definible in terms of the other with only 𝒪(*n*) overhead)

I can do (1), (2), and (3) (I believe; I haven't run benchmarks yet) in 𝒪(*n*), but I can't figure out (4) in anything better than 𝒪(*n*<sup>2</sup>) without having this issue solved.

Edit: Additional requirement: the constructor should take in types that are syntactically equal to the ones given by the user, and the projections should return types that are syntactically equal to the ones given by the user.  Without this requirement, it's possible to solve this challenge reflectively by defining a field-count-indexed type of data describing the types of the fields, and then define generic definitions for the *n*<sup>th</sup> projection and the constructor and the η principle.  But then all of the conversion problems cost linear or quadratic overhead when you want to use the types the user gave.
I don't follow you. If a record has n fields, and you define n projections, given how coq represents `match - with - end` you already have a n^2 side of the data you want to add to the coq environment.

I don't feel like elpi task is to be more efficient than other options, but rather easier to use to do these tasks. Actually building a sigma type out of a record is one of the [examples](https://github.com/LPCIC/coq-elpi/blob/master/theories/examples/example_record_to_sigma.v) (does not produce projections, only the type definition and the constructor). But if you look the very last lines you see that sigma types, being polymorphic, carry a lot of duplication, so I'm even more lost about your complexity claims, now ;-)
@gares here's a definition of a 4-field nested sigma type (currently not making use of dependencies; I agree that in the fully dependent case, there's no way around n^2 data) which defines a constructor and all n projections with only linear cost: https://github.com/JasonGross/doctoral-thesis/blob/0572043c47954a85212ee55e9f0f7f7ed0c4a2e4/chap3-api-design.tex#L261-L347
And, indeed, defining the projections from a non-primitive record do incur n^2 overhead, but it turns out that defining a primitive record also incurs n^2 overhead; see #12270.  
OK. May I suggest to use "(non dependent) pairs" instead of sigma types in the definition of your challenge then? The whole point of sigma types is to have the dependency, IMO.

I'm sorry I don't have time to read the code you pointed me at, but I could not avoid spotting that you did not define a minted env for Coq (via \newminted and \newmintinline). It may save you some typing ;-)
> OK. May I suggest to use "(non dependent) pairs" instead of sigma types in the definition of your challenge then? The whole point of sigma types is to have the dependency, IMO.

Sure.  Hm, I suspect with non-dependent pairs, you could get linear cost using a reflective approach that used native arrays to store the list of field types.  

> I'm sorry I don't have time to read the code you pointed me at, but I could not avoid spotting that you did not define a minted env for Coq (via \newminted and \newmintinline). It may save you some typing ;-)

Ah, neat, thanks!
