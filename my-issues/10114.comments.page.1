[{"url":"https://api.github.com/repos/coq/coq/issues/comments/325464174","html_url":"https://github.com/coq/coq/issues/10114#issuecomment-325464174","issue_url":"https://api.github.com/repos/coq/coq/issues/10114","id":325464174,"node_id":"MDEyOklzc3VlQ29tbWVudDMyNTQ2NDE3NA==","user":{"login":"ppedrot","id":1202327,"node_id":"MDQ6VXNlcjEyMDIzMjc=","avatar_url":"https://avatars.githubusercontent.com/u/1202327?v=4","gravatar_id":"","url":"https://api.github.com/users/ppedrot","html_url":"https://github.com/ppedrot","followers_url":"https://api.github.com/users/ppedrot/followers","following_url":"https://api.github.com/users/ppedrot/following{/other_user}","gists_url":"https://api.github.com/users/ppedrot/gists{/gist_id}","starred_url":"https://api.github.com/users/ppedrot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ppedrot/subscriptions","organizations_url":"https://api.github.com/users/ppedrot/orgs","repos_url":"https://api.github.com/users/ppedrot/repos","events_url":"https://api.github.com/users/ppedrot/events{/privacy}","received_events_url":"https://api.github.com/users/ppedrot/received_events","type":"User","site_admin":false},"created_at":"2017-08-28T20:04:31Z","updated_at":"2017-08-28T20:04:31Z","author_association":"MEMBER","body":"So you want to be able to access `a` and `b` in the matching branch, did I get it right? Although there is code to do that in the matching primitives, I'm pretty sure it is an anti-feature of Ltac, and I'm not really willing to expose it in Ltac2, unless you come up with very good arguments and / or sane semantics.\r\n\r\nThe sanest way to do that is to match on the kind of the term and retrieve the identifier from the function. Obviously a few helper functions would help.","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/325464174/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/649822441","html_url":"https://github.com/coq/coq/issues/10114#issuecomment-649822441","issue_url":"https://api.github.com/repos/coq/coq/issues/10114","id":649822441,"node_id":"MDEyOklzc3VlQ29tbWVudDY0OTgyMjQ0MQ==","user":{"login":"jfehrle","id":1253341,"node_id":"MDQ6VXNlcjEyNTMzNDE=","avatar_url":"https://avatars.githubusercontent.com/u/1253341?v=4","gravatar_id":"","url":"https://api.github.com/users/jfehrle","html_url":"https://github.com/jfehrle","followers_url":"https://api.github.com/users/jfehrle/followers","following_url":"https://api.github.com/users/jfehrle/following{/other_user}","gists_url":"https://api.github.com/users/jfehrle/gists{/gist_id}","starred_url":"https://api.github.com/users/jfehrle/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jfehrle/subscriptions","organizations_url":"https://api.github.com/users/jfehrle/orgs","repos_url":"https://api.github.com/users/jfehrle/repos","events_url":"https://api.github.com/users/jfehrle/events{/privacy}","received_events_url":"https://api.github.com/users/jfehrle/received_events","type":"User","site_admin":false},"created_at":"2020-06-25T21:18:13Z","updated_at":"2020-06-25T21:18:13Z","author_association":"CONTRIBUTOR","body":"@JasonGross Do you want to keep this open?  You never responded to @ppedrot.","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/649822441/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/649847879","html_url":"https://github.com/coq/coq/issues/10114#issuecomment-649847879","issue_url":"https://api.github.com/repos/coq/coq/issues/10114","id":649847879,"node_id":"MDEyOklzc3VlQ29tbWVudDY0OTg0Nzg3OQ==","user":{"login":"JasonGross","id":396076,"node_id":"MDQ6VXNlcjM5NjA3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/396076?v=4","gravatar_id":"","url":"https://api.github.com/users/JasonGross","html_url":"https://github.com/JasonGross","followers_url":"https://api.github.com/users/JasonGross/followers","following_url":"https://api.github.com/users/JasonGross/following{/other_user}","gists_url":"https://api.github.com/users/JasonGross/gists{/gist_id}","starred_url":"https://api.github.com/users/JasonGross/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JasonGross/subscriptions","organizations_url":"https://api.github.com/users/JasonGross/orgs","repos_url":"https://api.github.com/users/JasonGross/repos","events_url":"https://api.github.com/users/JasonGross/events{/privacy}","received_events_url":"https://api.github.com/users/JasonGross/received_events","type":"User","site_admin":false},"created_at":"2020-06-25T22:23:46Z","updated_at":"2020-06-25T22:23:46Z","author_association":"MEMBER","body":"Oops, sorry.\r\n\r\n> So you want to be able to access `a` and `b` in the matching branch, did I get it right?\r\n\r\nYes\r\n\r\n> Although there is code to do that in the matching primitives, I'm pretty sure it is an anti-feature of Ltac, and I'm not really willing to expose it in Ltac2, unless you come up with very good arguments and / or sane semantics.\r\n\r\nThe strongest argument I have is that sometimes I like my code transformations to preserve binder names.  It would be nice to have the option to do this (maybe we require users to use an alternate `match` syntax to get this matching, but I think the underlying `Pattern.matches` should expose this information)\r\n \r\n> The sanest way to do that is to match on the kind of the term and retrieve the identifier from the function. Obviously a few helper functions would help.\r\n\r\nSure, that also works, at least if it can be done without too much pain to the user.","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/649847879/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]