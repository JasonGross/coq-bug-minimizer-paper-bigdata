Comment author: @JasonGross

Here is some code that works in 8.4, but fails in trunk due to reordered existentials:

(* File reduced by coq-bug-finder from original input, then from 287 lines to 208 lines *)
(* coqc version trunk (October 2014) compiled on Oct 11 2014 1:13:41 with OCaml 4.01.0
   coqtop version cagnode16:/afs/csail.mit.edu/u/j/jgross/coq-trunk,trunk (d65496f09c4b68fa318783e53f9cd6d5c18e1eb7) *)
Require Coq.Sorting.Permutation.
Export Coq.Sorting.Permutation.

Definition BagInsertEnumerate
           {TContainer TItem: Type}
           (RepInv : TContainer -> Prop)
           (benumerate : TContainer -> list TItem)
           (binsert    : TContainer -> TItem -> TContainer) :=
  forall inserted container
         (containerCorrect : RepInv container),
    Permutation
      (benumerate (binsert container inserted))
      (inserted :: benumerate container).

Definition BagEnumerateEmpty
           {TContainer TItem: Type}
           (benumerate : TContainer -> list TItem)
           (bempty     : TContainer) :=
  forall item, ~ List.In item (benumerate bempty).

Definition BagFindCorrect
           {TContainer TItem TSearchTerm: Type}
           (RepInv : TContainer -> Prop)
           (bfind         : TContainer -> TSearchTerm -> list TItem)
           (bfind_matcher : TSearchTerm -> TItem -> bool)
           (benumerate : TContainer -> list TItem) :=
  forall container search_term
         (containerCorrect : RepInv container),
    Permutation
      (List.filter (bfind_matcher search_term) (benumerate container))
      (bfind container search_term).

Definition BagFindStar
           {TContainer TItem TSearchTerm: Type}
           (RepInv : TContainer -> Prop)
           (bfind : TContainer -> TSearchTerm -> list TItem)
           (benumerate : TContainer -> list TItem)
           (bstar : TSearchTerm) :=
  forall container
         (containerCorrect : RepInv container),
    bfind container bstar = benumerate container.

Definition BagCountCorrect
           {TContainer TItem TSearchTerm: Type}
           (RepInv : TContainer -> Prop)
           (bcount        : TContainer -> TSearchTerm -> nat)
           (bfind         : TContainer -> TSearchTerm -> list TItem) :=
  forall container search_term
         (containerCorrect : RepInv container),
    List.length (bfind container search_term) = (bcount container search_term).

Definition BagDeleteCorrect
           {TContainer TItem TSearchTerm: Type}
           (RepInv : TContainer -> Prop)
           (bfind         : TContainer -> TSearchTerm -> list TItem)
           (bfind_matcher : TSearchTerm -> TItem -> bool)
           (benumerate : TContainer -> list TItem)
           (bdelete    : TContainer -> TSearchTerm -> (list TItem) * TContainer) :=
  forall container search_term
         (containerCorrect : RepInv container),
    Permutation (benumerate (snd (bdelete container search_term)))
                (snd (List.partition (bfind_matcher search_term)
                                     (benumerate container)))
    /\ Permutation (fst (bdelete container search_term))
                   (fst (List.partition (bfind_matcher search_term)
                                        (benumerate container))).

Definition BagUpdateCorrect
           {TContainer TItem TSearchTerm TUpdateTerm : Type}
           (RepInv : TContainer -> Prop)
           (ValidUpdate : TUpdateTerm -> Prop)
           (bfind         : TContainer -> TSearchTerm -> list TItem)
           (bfind_matcher : TSearchTerm -> TItem -> bool)
           (benumerate : TContainer -> list TItem)
           (bupdate_transform : TUpdateTerm -> TItem -> TItem)
           (bupdate    : TContainer -> TSearchTerm -> TUpdateTerm -> TContainer) :=
  forall container search_term update_term
         (containerCorrect : RepInv container)
         (valid_update : ValidUpdate update_term),
    Permutation (benumerate (bupdate container search_term update_term))
                ((snd (List.partition (bfind_matcher search_term)
                                      (benumerate container)))
                   ++ List.map (bupdate_transform update_term)
                   (fst (List.partition (bfind_matcher search_term)
                                        (benumerate container)))).

Definition binsert_Preserves_RepInv
           {TContainer TItem: Type}
           (RepInv : TContainer -> Prop)
           (binsert    : TContainer -> TItem -> TContainer)
  := forall container item
            (containerCorrect : RepInv container),
       RepInv (binsert container item).

Definition bdelete_Preserves_RepInv
           {TContainer TItem TSearchTerm: Type}
           (RepInv : TContainer -> Prop)
           (bdelete    : TContainer -> TSearchTerm -> (list TItem) * TContainer)
  := forall container search_term
            (containerCorrect : RepInv container),
       RepInv (snd (bdelete container search_term)).

Definition bupdate_Preserves_RepInv
           {TContainer TSearchTerm TUpdateTerm : Type}
           (RepInv : TContainer -> Prop)
           (ValidUpdate       : TUpdateTerm -> Prop)
           (bupdate    : TContainer -> TSearchTerm -> TUpdateTerm -> TContainer)
  := forall container search_term update_term
            (containerCorrect : RepInv container)
            (valid_update : ValidUpdate update_term),
       RepInv (bupdate container search_term update_term).

Class Bag (BagType TItem SearchTermType UpdateTermType : Type) :=
  {

    bempty            : BagType;
    bstar             : SearchTermType;
    bfind_matcher     : SearchTermType -> TItem -> bool;
    bupdate_transform : UpdateTermType -> TItem -> TItem;

    benumerate : BagType -> list TItem;
    bfind      : BagType -> SearchTermType -> list TItem;
    binsert    : BagType -> TItem -> BagType;
    bcount     : BagType -> SearchTermType -> nat;
    bdelete    : BagType -> SearchTermType -> (list TItem) * BagType;
    bupdate    : BagType -> SearchTermType -> UpdateTermType -> BagType
  }.

Class CorrectBag
      {BagType TItem SearchTermType UpdateTermType : Type}
      (RepInv            : BagType -> Prop)
      (ValidUpdate       : UpdateTermType -> Prop)
      (BagImplementation : Bag BagType TItem SearchTermType UpdateTermType) :=
  {

    bempty_RepInv     : RepInv bempty;
    binsert_RepInv    : binsert_Preserves_RepInv RepInv binsert;
    bdelete_RepInv    : bdelete_Preserves_RepInv RepInv bdelete ;
    bupdate_RepInv    : bupdate_Preserves_RepInv RepInv ValidUpdate bupdate;

    bfind_star        : BagFindStar RepInv bfind benumerate bstar;

    benumerate_empty  : BagEnumerateEmpty benumerate bempty;
    binsert_enumerate : BagInsertEnumerate RepInv benumerate binsert;
    bfind_correct     : BagFindCorrect RepInv bfind bfind_matcher benumerate;
    bcount_correct    : BagCountCorrect RepInv bcount bfind;
    bdelete_correct   : BagDeleteCorrect RepInv bfind bfind_matcher benumerate bdelete;
    bupdate_correct   : BagUpdateCorrect RepInv ValidUpdate bfind bfind_matcher benumerate bupdate_transform bupdate
  }.

Record BagPlusProof (TItem : Type) :=
  { BagTypePlus : Type;
    SearchTermTypePlus : Type;
    UpdateTermTypePlus : Type;

    RepInvPlus : BagTypePlus -> Prop;
    ValidUpdatePlus : UpdateTermTypePlus -> Prop;

    BagPlus : Bag BagTypePlus TItem SearchTermTypePlus UpdateTermTypePlus;
    CorrectBagPlus : CorrectBag RepInvPlus ValidUpdatePlus BagPlus
  }.
Arguments SearchTermTypePlus [TItem] _.
Arguments RepInvPlus [TItem] _ _.
Arguments ValidUpdatePlus [TItem] _ _.

Definition WFBagPlusType {TItem} (Index : BagPlusProof TItem)
  := sigT (RepInvPlus Index).

Instance WFBagPlusTypeAsBag {TItem}
         (Index : BagPlusProof TItem)
: Bag (WFBagPlusType Index) TItem (SearchTermTypePlus Index)
      (sigT (ValidUpdatePlus Index)).
Proof.
  destruct Index as [? ? ? ? ? BagPlus' CorrectBagPlus'];
  destruct BagPlus'; destruct CorrectBagPlus'; simpl in *.
  econstructor 1; simpl; try solve [eassumption].

  econstructor; eauto.

  intro; apply bupdate_transform0; apply X.

  intros; apply benumerate0; apply X.

  intros; destruct X; apply (bfind0 x X0).

  intros; destruct X; econstructor; eapply binsert_RepInv0; apply r.

  intros; destruct X; eapply bcount0; [apply x | apply X0 ].

  intros x search_term; constructor.
  -
    eapply (fst (bdelete0 (projT1 x) search_term)).
  -
    econstructor; eapply bdelete_RepInv0; apply (projT2 x).

  -
    intros x search_term update_term; destruct x; destruct update_term;
    econstructor.
    eapply bupdate_RepInv0.
    apply r.
    apply v.
    Grab Existential Variables.
    Fail apply X0.
    3:apply X0 || fail "not 8.4".
    2:(simpl; apply search_term) || fail "not 8.4".
    1:(simpl; apply search_term) || fail "not 8.4".


Comment author: @aspiwack

I don't know why that is (my guess though is that it is not Grab Existential Variable which changed, but the precise order in which the tactics are run, hence the order in which the existential variables are generated). But IÂ don't think it is anything which can be made very robust unfortunately.


Comment author: @JasonGross

Here is a much simpler example of code that works in 8.4, but fails in trunk:

Goal forall (P Q : nat -> Prop) (f : nat -> nat -> nat)
            (QH : forall x, Q x)
            (H : forall (y : nat) (x : { x : nat | x = y }),
                   Q y -> P (f (proj1_sig x) y)),
       ({ x : nat | P x } * { x : nat | P x } * { x : nat | P x })%type.
  intros.
  repeat split.
  { econstructor. eapply (@ H 0). apply QH. }
  { econstructor. eapply (@ H 1). apply QH. }
  { econstructor. eapply (@ H 2). apply QH. }
  Grab Existential Variables.
  { (exists 2; reflexivity). }
  { (exists 1; reflexivity). }
  { (exists 0; reflexivity). }
Defined.

In 8.4, the existential variables seem to be given in reverse order of the goals to which they were generated.  In trunk, they seem to be given in the same order as the goals in which they were generated.  If this is correct, although trunk behavior seems saner, I don't think there's a good reason to break backwards compatibility here (or, at least, no good reason to break it without providing a flag to restore the old behavior).


Comment author: @aspiwack

Apparently, Grabâ¦ used to be an [Evd.undefined_list], now it is and [Evar.Map.bindings Evd.undefined_map]. It seems [bindings] and [undefined_list] have a different ordering.

The fix is a [List.rev] away. I will try not to forget to fix it.


Comment author: @aspiwack

I've just fixed it ( b5c5f67c628e6ba7c987e9a306f7a0efdebf85cf ).

As an added bonus, though, it is now possible to call back the goals in the middle of the proof using Unshelve (rather than just at the end of the proof with Grab Existential Variables).


