[{"url":"https://api.github.com/repos/coq/coq/issues/comments/367233833","html_url":"https://github.com/coq/coq/issues/6798#issuecomment-367233833","issue_url":"https://api.github.com/repos/coq/coq/issues/6798","id":367233833,"node_id":"MDEyOklzc3VlQ29tbWVudDM2NzIzMzgzMw==","user":{"login":"ejgallego","id":7192257,"node_id":"MDQ6VXNlcjcxOTIyNTc=","avatar_url":"https://avatars.githubusercontent.com/u/7192257?v=4","gravatar_id":"","url":"https://api.github.com/users/ejgallego","html_url":"https://github.com/ejgallego","followers_url":"https://api.github.com/users/ejgallego/followers","following_url":"https://api.github.com/users/ejgallego/following{/other_user}","gists_url":"https://api.github.com/users/ejgallego/gists{/gist_id}","starred_url":"https://api.github.com/users/ejgallego/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ejgallego/subscriptions","organizations_url":"https://api.github.com/users/ejgallego/orgs","repos_url":"https://api.github.com/users/ejgallego/repos","events_url":"https://api.github.com/users/ejgallego/events{/privacy}","received_events_url":"https://api.github.com/users/ejgallego/received_events","type":"User","site_admin":false},"created_at":"2018-02-21T07:12:40Z","updated_at":"2018-02-21T07:12:40Z","author_association":"MEMBER","body":"Umm, like this?\r\n```\r\n====== ill-typed term ====\r\napplication head= Cons((u.ap),Var(1) Var(1))\r\nhead type=\r\n  (A:Type(Var(1)))\r\n   (B:Type(Var(1))) (f:(#2->#2)) (x:#3) (y:#4) (p:(Ind((u.paths),0,Var(1)) #5#2#1)) (Ind((u.paths),0,Var(1)) #5(#4 #3)(#4 #2))\r\narguments:\r\narg 1=\r\n (Ind((u.paths),0,Var(1))\r\n  #4\r\n  (Cons((u.transport),Var(2) Var(1))\r\n   Type(Var(1))[X:Type(Var(1))]#1#5#4\r\n   (Cons((u.path_universe),Var(1) Var(1) Var(2))\r\n    #7#5#4Proj((u.equiv_fun),(Cons((u.equiv_path),Var(1) Var(1) Var(2) Var(1)) #5#4#1))\r\n    Proj((u.equiv_isequiv),(Cons((u.equiv_path),Var(1) Var(1) Var(2) Var(1)) #5#4#1)))#2)\r\n  (Proj((u.equiv_fun),(Cons((u.equiv_path),Var(1) Var(1) Var(2) Var(1)) #5#4#1)) #2))\r\ntype=  Type(Var(1))\r\n\r\narg 2=\r\n (Ind((u.paths),0,Var(1))\r\n  #5\r\n  (Cons((u.transport),Var(2) Var(1))\r\n   Type(Var(1))[x:Type(Var(1))]#1#4#5\r\n   (Cons((u.inverse),Var(2))\r\n    Type(Var(1))#5#4\r\n    (Cons((u.path_universe),Var(1) Var(1) Var(2))\r\n     #7#5#4Proj((u.equiv_fun),(Cons((u.equiv_path),Var(1) Var(1) Var(2) Var(1)) #5#4#1))\r\n     (Cons((u.isequiv_path),Var(1) Var(1) Var(1) Var(1) Var(2)) #5#4#1)))\r\n   (Cons((u.transport),Var(2) Var(1))\r\n    Type(Var(1))[x:Type(Var(1))]#1#5#4\r\n    (Cons((u.path_universe),Var(1) Var(1) Var(2))\r\n     #7#5#4Proj((u.equiv_fun),(Cons((u.equiv_path),Var(1) Var(1) Var(2) Var(1)) #5#4#1))\r\n     (Cons((u.isequiv_path),Var(1) Var(1) Var(1) Var(1) Var(2)) #5#4#1))#2))\r\n  (Cons((u.transport),Var(2) Var(1))\r\n   Type(Var(1))[x:Type(Var(1))]#1#4#5\r\n   (Cons((u.inverse),Var(2))\r\n    Type(Var(1))#5#4\r\n    (Cons((u.path_universe),Var(1) Var(1) Var(2))\r\n     #7#5#4Proj((u.equiv_fun),(Cons((u.equiv_path),Var(1) Var(1) Var(2) Var(1)) #5#4#1))\r\n     Proj((u.equiv_isequiv),(Cons((u.equiv_path),Var(1) Var(1) Var(2) Var(1)) #5#4#1))))\r\n   (Proj((u.equiv_fun),(Cons((u.equiv_path),Var(1) Var(1) Var(2) Var(1)) #5#4#1)) #2)))\r\ntype=  Type(Var(1))\r\n\r\narg 3=\r\n (Cons((u.ap),Var(1) Var(1))\r\n  #4#5\r\n  (Cons((u.transport),Var(2) Var(1))\r\n   Type(Var(1))[x:Type(Var(1))]#1#4#5\r\n   (Cons((u.inverse),Var(2))\r\n    Type(Var(1))#5#4\r\n    (Cons((u.path_universe),Var(1) Var(1) Var(2))\r\n     #7#5#4Proj((u.equiv_fun),(Cons((u.equiv_path),Var(1) Var(1) Var(2) Var(1)) #5#4#1))\r\n     (Cons((u.isequiv_path),Var(1) Var(1) Var(1) Var(1) Var(2)) #5#4#1))))\r\n  (Cons((u.transport),Var(2) Var(1))\r\n   Type(Var(1))[x:Type(Var(1))]#1#5#4\r\n   (Cons((u.path_universe),Var(1) Var(1) Var(2))\r\n    #7#5#4Proj((u.equiv_fun),(Cons((u.equiv_path),Var(1) Var(1) Var(2) Var(1)) #5#4#1))\r\n    (Cons((u.isequiv_path),Var(1) Var(1) Var(1) Var(1) Var(2)) #5#4#1))#2)\r\n  (Cons((u.transport),Var(2) Var(1)) Type(Var(1))[x:Type(Var(1))]#1#5#4#1#2))\r\ntype=\r\n (p:(Ind((u.paths),0,Var(1))\r\n   #4\r\n   (Cons((u.transport),Var(2) Var(1))\r\n    Type(Var(1))[x:Type(Var(1))]#1#5#4\r\n    (Cons((u.path_universe),Var(1) Var(1) Var(2))\r\n     #7#5#4Proj((u.equiv_fun),(Cons((u.equiv_path),Var(1) Var(1) Var(2) Var(1)) #5#4#1))\r\n     (Cons((u.isequiv_path),Var(1) Var(1) Var(1) Var(1) Var(2)) #5#4#1))#2)\r\n   (Cons((u.transport),Var(2) Var(1)) Type(Var(1))[x:Type(Var(1))]#1#5#4#1#2)))\r\n  (Ind((u.paths),0,Var(1))\r\n   #6\r\n   ((Cons((u.transport),Var(2) Var(1))\r\n     Type(Var(1))[x:Type(Var(1))]#1#5#6\r\n     (Cons((u.inverse),Var(2))\r\n      Type(Var(1))#6#5\r\n      (Cons((u.path_universe),Var(1) Var(1) Var(2))\r\n       #8#6#5Proj((u.equiv_fun),(Cons((u.equiv_path),Var(1) Var(1) Var(2) Var(1)) #6#5#2))\r\n       (Cons((u.isequiv_path),Var(1) Var(1) Var(1) Var(1) Var(2)) #6#5#2))))\r\n    (Cons((u.transport),Var(2) Var(1))\r\n     Type(Var(1))[x:Type(Var(1))]#1#6#5\r\n     (Cons((u.path_universe),Var(1) Var(1) Var(2))\r\n      #8#6#5Proj((u.equiv_fun),(Cons((u.equiv_path),Var(1) Var(1) Var(2) Var(1)) #6#5#2))\r\n      (Cons((u.isequiv_path),Var(1) Var(1) Var(1) Var(1) Var(2)) #6#5#2))#3))\r\n   ((Cons((u.transport),Var(2) Var(1))\r\n     Type(Var(1))[x:Type(Var(1))]#1#5#6\r\n     (Cons((u.inverse),Var(2))\r\n      Type(Var(1))#6#5\r\n      (Cons((u.path_universe),Var(1) Var(1) Var(2))\r\n       #8#6#5Proj((u.equiv_fun),(Cons((u.equiv_path),Var(1) Var(1) Var(2) Var(1)) #6#5#2))\r\n       (Cons((u.isequiv_path),Var(1) Var(1) Var(1) Var(1) Var(2)) #6#5#2))))\r\n    (Cons((u.transport),Var(2) Var(1)) Type(Var(1))[x:Type(Var(1))]#1#6#5#2#3)))\r\n\r\narg 4=\r\n (Cons((u.transport_path_universe),Var(0) Var(1) Var(2) Var(1))\r\n  #7#5#4Proj((u.equiv_fun),(Cons((u.equiv_path),Var(1) Var(1) Var(2) Var(1)) #5#4#1))\r\n  Proj((u.equiv_isequiv),(Cons((u.equiv_path),Var(1) Var(1) Var(2) Var(1)) #5#4#1))#2)\r\ntype=\r\n (Ind((u.paths),0,Var(1))\r\n  #4\r\n  (Cons((u.transport),Var(2) Var(1))\r\n   Type(Var(1))[X:Type(Var(1))]#1#5#4\r\n   (Cons((u.path_universe),Var(1) Var(1) Var(2))\r\n    #7#5#4Proj((u.equiv_fun),(Cons((u.equiv_path),Var(1) Var(1) Var(2) Var(1)) #5#4#1))\r\n    Proj((u.equiv_isequiv),(Cons((u.equiv_path),Var(1) Var(1) Var(2) Var(1)) #5#4#1)))#2)\r\n  (Proj((u.equiv_fun),(Cons((u.equiv_path),Var(1) Var(1) Var(2) Var(1)) #5#4#1)) #2))\r\n\r\narg 5=\r\n (Cons((u.ap),Var(2) Var(1))\r\n  (Ind((u.paths),0,Var(2)) Type(Var(1))#5#4)#4\r\n  [s:(Ind((u.paths),0,Var(2)) Type(Var(1))#5#4)](Cons((u.transport),Var(2) Var(1)) Type(Var(1))[x:Type(Var(1))]#1#6#5#1#3)\r\n  (Cons((u.path_universe),Var(1) Var(1) Var(2))\r\n   #7#5#4Proj((u.equiv_fun),(Cons((u.equiv_path),Var(1) Var(1) Var(2) Var(1)) #5#4#1))\r\n   (Cons((u.isequiv_path),Var(1) Var(1) Var(1) Var(1) Var(2)) #5#4#1))#1\r\n  (Proj((u.eissect),(Cons((u.isequiv_equiv_path),Var(1) Var(1) Var(1) Var(2)) #7#5#4)) #1))\r\ntype=\r\n (Ind((u.paths),0,Var(1))\r\n  #4\r\n  ([s:(Ind((u.paths),0,Var(2)) Type(Var(1))#5#4)](Cons((u.transport),Var(2) Var(1)) Type(Var(1))[x:Type(Var(1))]#1#6#5#1#3)\r\n   (Cons((u.path_universe),Var(1) Var(1) Var(2))\r\n    #7#5#4Proj((u.equiv_fun),(Cons((u.equiv_path),Var(1) Var(1) Var(2) Var(1)) #5#4#1))\r\n    (Cons((u.isequiv_path),Var(1) Var(1) Var(1) Var(1) Var(2)) #5#4#1)))\r\n  ([s:(Ind((u.paths),0,Var(2)) Type(Var(1))#5#4)](Cons((u.transport),Var(2) Var(1)) Type(Var(1))[x:Type(Var(1))]#1#6#5#1#3) #1))\r\n\r\narg 6=  (Cons((u.transport_path_universe_equiv_path),Var(1) Var(1) Var(2)) #7#5#4#1#2)\r\ntype=\r\n (Ind((u.paths),0,Var(1))\r\n  (Ind((u.paths),0,Var(1))\r\n   #4\r\n   (Cons((u.transport),Var(2) Var(1))\r\n    Type(Var(1))[X:Type(Var(1))]#1#5#4\r\n    (Cons((u.path_universe),Var(1) Var(1) Var(2))\r\n     #7#5#4Proj((u.equiv_fun),(Cons((u.equiv_path),Var(1) Var(1) Var(2) Var(1)) #5#4#1))\r\n     (Cons((u.isequiv_path),Var(1) Var(1) Var(1) Var(1) Var(2)) #5#4#1))#2)\r\n   (Proj((u.equiv_fun),(Cons((u.equiv_path),Var(1) Var(1) Var(2) Var(1)) #5#4#1)) #2))\r\n  (Cons((u.transport_path_universe),Var(1) Var(1) Var(2) Var(1))\r\n   #7#5#4Proj((u.equiv_fun),(Cons((u.equiv_path),Var(1) Var(1) Var(2) Var(1)) #5#4#1))\r\n   (Cons((u.isequiv_path),Var(1) Var(1) Var(1) Var(1) Var(2)) #5#4#1)#2)\r\n  (Cons((u.ap),Var(2) Var(1))\r\n   (Ind((u.paths),0,Var(2)) Type(Var(1))#5#4)#4\r\n   [s:(Ind((u.paths),0,Var(2)) Type(Var(1))#5#4)](Cons((u.transport),Var(2) Var(1)) Type(Var(1))[x:Type(Var(1))]#1#6#5#1#3)\r\n   (Proj((u.equiv_inv),(Cons((u.isequiv_equiv_path),Var(1) Var(1) Var(1) Var(2)) #7#5#4))\r\n    (Cons((u.equiv_path),Var(1) Var(1) Var(2) Var(1)) #5#4#1))#1\r\n   (Proj((u.eissect),(Cons((u.isequiv_equiv_path),Var(1) Var(1) Var(1) Var(2)) #7#5#4)) #1)))\r\n\r\n\r\n====== type error ====\r\n(Ind((u.paths),0,Var(1))\r\n (Ind((u.paths),0,Var(1))\r\n  #4\r\n  (Cons((u.transport),Var(2) Var(1))\r\n   Type(Var(1))[X:Type(Var(1))]#1#5#4\r\n   (Cons((u.path_universe),Var(1) Var(1) Var(2))\r\n    #7#5#4Proj((u.equiv_fun),(Cons((u.equiv_path),Var(1) Var(1) Var(2) Var(1)) #5#4#1))\r\n    (Cons((u.isequiv_path),Var(1) Var(1) Var(1) Var(1) Var(2)) #5#4#1))#2)\r\n  (Proj((u.equiv_fun),(Cons((u.equiv_path),Var(1) Var(1) Var(2) Var(1)) #5#4#1)) #2))\r\n (Cons((u.transport_path_universe),Var(1) Var(1) Var(2) Var(1))\r\n  #7#5#4Proj((u.equiv_fun),(Cons((u.equiv_path),Var(1) Var(1) Var(2) Var(1)) #5#4#1))\r\n  (Cons((u.isequiv_path),Var(1) Var(1) Var(1) Var(1) Var(2)) #5#4#1)#2)\r\n (Cons((u.ap),Var(2) Var(1))\r\n  (Ind((u.paths),0,Var(2)) Type(Var(1))#5#4)#4\r\n  [s:(Ind((u.paths),0,Var(2)) Type(Var(1))#5#4)](Cons((u.transport),Var(2) Var(1)) Type(Var(1))[x:Type(Var(1))]#1#6#5#1#3)\r\n  (Proj((u.equiv_inv),(Cons((u.isequiv_equiv_path),Var(1) Var(1) Var(1) Var(2)) #7#5#4))\r\n   (Cons((u.equiv_path),Var(1) Var(1) Var(2) Var(1)) #5#4#1))#1\r\n  (Proj((u.eissect),(Cons((u.isequiv_equiv_path),Var(1) Var(1) Var(1) Var(2)) #7#5#4)) #1)))\r\nis not convertible with\r\n(Ind((u.paths),0,Var(1))\r\n (Ind((u.paths),0,Var(1))\r\n  #4\r\n  (Cons((u.transport),Var(2) Var(1))\r\n   Type(Var(1))[X:Type(Var(1))]#1#5#4\r\n   (Cons((u.path_universe),Var(1) Var(1) Var(2))\r\n    #7#5#4Proj((u.equiv_fun),(Cons((u.equiv_path),Var(1) Var(1) Var(2) Var(1)) #5#4#1))\r\n    Proj((u.equiv_isequiv),(Cons((u.equiv_path),Var(1) Var(1) Var(2) Var(1)) #5#4#1)))#2)\r\n  (Proj((u.equiv_fun),(Cons((u.equiv_path),Var(1) Var(1) Var(2) Var(1)) #5#4#1)) #2))\r\n (Cons((u.transport_path_universe),Var(0) Var(1) Var(2) Var(1))\r\n  #7#5#4Proj((u.equiv_fun),(Cons((u.equiv_path),Var(1) Var(1) Var(2) Var(1)) #5#4#1))\r\n  Proj((u.equiv_isequiv),(Cons((u.equiv_path),Var(1) Var(1) Var(2) Var(1)) #5#4#1))#2)\r\n (Cons((u.ap),Var(2) Var(1))\r\n  (Ind((u.paths),0,Var(2)) Type(Var(1))#5#4)#4\r\n  [s:(Ind((u.paths),0,Var(2)) Type(Var(1))#5#4)](Cons((u.transport),Var(2) Var(1)) Type(Var(1))[x:Type(Var(1))]#1#6#5#1#3)\r\n  (Cons((u.path_universe),Var(1) Var(1) Var(2))\r\n   #7#5#4Proj((u.equiv_fun),(Cons((u.equiv_path),Var(1) Var(1) Var(2) Var(1)) #5#4#1))\r\n   (Cons((u.isequiv_path),Var(1) Var(1) Var(1) Var(1) Var(2)) #5#4#1))#1\r\n  (Proj((u.eissect),(Cons((u.isequiv_equiv_path),Var(1) Var(1) Var(1) Var(2)) #7#5#4)) #1)))\r\n====== universes ====\r\nVar(1) = Var(0)\r\nVar(0) < Var(2)\r\nSet <= Var(2)\r\n    <= Var(1)\r\n    <= Var(0)\r\nProp < Set\r\n\r\nFatal Error: Type error: CantApplyBadType at argument 6\r\n```","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/367233833/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/367274741","html_url":"https://github.com/coq/coq/issues/6798#issuecomment-367274741","issue_url":"https://api.github.com/repos/coq/coq/issues/6798","id":367274741,"node_id":"MDEyOklzc3VlQ29tbWVudDM2NzI3NDc0MQ==","user":{"login":"JasonGross","id":396076,"node_id":"MDQ6VXNlcjM5NjA3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/396076?v=4","gravatar_id":"","url":"https://api.github.com/users/JasonGross","html_url":"https://github.com/JasonGross","followers_url":"https://api.github.com/users/JasonGross/followers","following_url":"https://api.github.com/users/JasonGross/following{/other_user}","gists_url":"https://api.github.com/users/JasonGross/gists{/gist_id}","starred_url":"https://api.github.com/users/JasonGross/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JasonGross/subscriptions","organizations_url":"https://api.github.com/users/JasonGross/orgs","repos_url":"https://api.github.com/users/JasonGross/repos","events_url":"https://api.github.com/users/JasonGross/events{/privacy}","received_events_url":"https://api.github.com/users/JasonGross/received_events","type":"User","site_admin":false},"created_at":"2018-02-21T10:06:59Z","updated_at":"2018-02-21T10:06:59Z","author_association":"MEMBER","body":"I like the newlines for the args; thanks! You seem to have lost some spaces between numbers though, e.g., `#1#5#4` should be ` #1 #5 #4`.  ( and shouldn't this discussion about printing be on the printing pr?)","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/367274741/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/383122470","html_url":"https://github.com/coq/coq/issues/6798#issuecomment-383122470","issue_url":"https://api.github.com/repos/coq/coq/issues/6798","id":383122470,"node_id":"MDEyOklzc3VlQ29tbWVudDM4MzEyMjQ3MA==","user":{"login":"SkySkimmer","id":2461932,"node_id":"MDQ6VXNlcjI0NjE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/2461932?v=4","gravatar_id":"","url":"https://api.github.com/users/SkySkimmer","html_url":"https://github.com/SkySkimmer","followers_url":"https://api.github.com/users/SkySkimmer/followers","following_url":"https://api.github.com/users/SkySkimmer/following{/other_user}","gists_url":"https://api.github.com/users/SkySkimmer/gists{/gist_id}","starred_url":"https://api.github.com/users/SkySkimmer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/SkySkimmer/subscriptions","organizations_url":"https://api.github.com/users/SkySkimmer/orgs","repos_url":"https://api.github.com/users/SkySkimmer/repos","events_url":"https://api.github.com/users/SkySkimmer/events{/privacy}","received_events_url":"https://api.github.com/users/SkySkimmer/received_events","type":"User","site_admin":false},"created_at":"2018-04-20T14:54:07Z","updated_at":"2018-04-20T14:54:07Z","author_association":"CONTRIBUTOR","body":"The checker doesn't look at the universe graph when comparing instances on polymorphic constants, even when the constants are opaque. Here: https://github.com/coq/coq/blob/350ee43d73ee4d6c9b6c3fd24cae3aca8a2b5ce4/checker/reduction.ml#L346\r\n\r\nHere's a reduced version: https://gist.github.com/SkySkimmer/4aad82eb32c63cc598d378265026ba09\r\nIt produces checker error https://gist.github.com/SkySkimmer/7f12bce75b7966ff0119e70b5fdd7e32\r\n\r\nHere's a super reduced version for the test suite:\r\n```coq\r\nUniverse big.\r\n\r\nPolymorphic Lemma foo@{u} : Type@{big}.\r\nProof. exact Type@{u}. Qed.\r\n\r\nUniverses U V.\r\n\r\nDefinition yo : foo@{U} = foo@{V} := eq_refl.\r\n```","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/383122470/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]