[{"url":"https://api.github.com/repos/coq/coq/issues/comments/337555348","html_url":"https://github.com/coq/coq/issues/5615#issuecomment-337555348","issue_url":"https://api.github.com/repos/coq/coq/issues/5615","id":337555348,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU1NTM0OA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2017-06-22T21:54:16Z","updated_at":"2017-10-18T11:07:05Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nConsider the following code:\n\nGoal forall x : { x : Set * Set | True }, proj1_sig x = proj1_sig x.\n  clear.\n  intro.\n  let G := match goal with |- ?G => G end in\n  do 2 match G with\n       | context[proj1_sig ?k]\n         => is_var k; destruct k\n       end;\n    cbv beta iota delta [proj1_sig].\n\nNote that replacing \"intro\" with \"intro x\" does not change the behavior, but \nreplacing \"intro\" with \"intro X\" causes the second run of the [match] to fail.  \nI don't think Hugo's autogenerated-name-warning patch has a hope of catching \nthis one, because both the context variable and the name passed to [destruct] \nare considered autogenerated.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337555348/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337555349","html_url":"https://github.com/coq/coq/issues/5615#issuecomment-337555349","issue_url":"https://api.github.com/repos/coq/coq/issues/5615","id":337555349,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU1NTM0OQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2017-06-23T09:57:52Z","updated_at":"2017-10-18T11:07:05Z","author_association":"CONTRIBUTOR","body":"Comment author: @herbelin\n\nTricky example but I'm not sure Coq is to blame. A term, G, is used in a context which is not its defining context, so, isn't it expected that strange things happen?\n\nAbout the x/X naming, it is the user who decided to use x for \"x:{x:Set*Set|True}\" and for \"x:Set*Set\", isn't it expected that x works twice (each time in a different context) and X only once?\n\nShouldn't the function first collect in a fixed typing context all such distinct variables \"k\" on which a destruct is applicable, then do the \"do\" on this list?\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337555349/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337555353","html_url":"https://github.com/coq/coq/issues/5615#issuecomment-337555353","issue_url":"https://api.github.com/repos/coq/coq/issues/5615","id":337555353,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU1NTM1Mw==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2017-06-23T12:32:46Z","updated_at":"2017-10-18T11:07:06Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nIf by \"strange things\" you mean proofs of False that [refine] accepts but [Defined] does not, as in bug [BZ#5616](https://github.com/coq/coq/issues?q=is%3Aissue%20%22Original%20bug%20ID%3A%20BZ%235616%22), then, uh, maybe, but probably not?  Anyway, I expect Ltac2 should be able to fix this (or, at least, it will be a proper bug in Ltac2 and not just an insanity in semantics), when I can bind a pointer to a variable in the context, rather than just binding its name.\n\nAnd, yes, using a list to collect the variables is the right way to do this, but that doesn't mean that I like these semantics.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337555353/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]