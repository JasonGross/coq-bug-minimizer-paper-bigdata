[{"url":"https://api.github.com/repos/coq/coq/issues/comments/337519371","html_url":"https://github.com/coq/coq/issues/3323#issuecomment-337519371","issue_url":"https://api.github.com/repos/coq/coq/issues/3323","id":337519371,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxOTM3MQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-05-14T23:22:40Z","updated_at":"2017-10-18T09:17:49Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nRunning the following in coq with -indices-matter gives the error on Qed:\n\n(* -*- coq-prog-args: (\"-emacs\" \"-indices-matter\") -*- *)\n(* File reduced by coq-bug-finder from original input, then from 5302 lines to 4649 lines, then from 4660 lines to 355 lines, then from 360 lines to 269 lines, then from 269 lines to 175 lines, then from 144 lines to 119 lines, then from 297 lines to 117 lines, then from 95 lines to 79 lines, then from 82 lines to 68 lines *)\n\nSet Universe Polymorphism.\nGeneralizable All Variables.\nInductive sigT {A:Type} (P:A -> Type) : Type := existT : forall x:A, P x -> sigT P.\nNotation \"{ x : A  & P }\" := (sigT (fun x:A => P)) : type_scope.\nDefinition projT1 {A} {P : A -> Type} (x : sigT P) : A := let (a, _) := x in a.\nDefinition projT2 {A} {P : A -> Type} (x : sigT P) : P (projT1 x) := let (a, h) return P (projT1 x) := x in h.\nAxiom admit : forall {T}, T.\nInductive paths {A : Type} (a : A) : A -> Type := idpath : paths a a where \"x = y\" := (@ paths _ x y) : type_scope.\nArguments idpath {A a} , [A] a.\nDefinition inverse {A : Type} {x y : A} (p : x = y) : y = x := match p with idpath => idpath end.\nDefinition transport {A : Type} (P : A -> Type) {x y : A} (p : x = y) (u : P x) : P y := match p with idpath => u end.\nDefinition Sect {A B : Type} (s : A -> B) (r : B -> A) := forall x : A, r (s x) = x.\nClass IsEquiv {A B : Type} (f : A -> B) := BuildIsEquiv { equiv_inv : B -> A ; eisretr : Sect equiv_inv f }.\nRecord Equiv A B := BuildEquiv { equiv_fun :> A -> B ; equiv_isequiv :> IsEquiv equiv_fun }.\nExisting Instance equiv_isequiv.\nGlobal Instance isequiv_inverse `{IsEquiv A B f} : IsEquiv (@ equiv_inv _ _ f _) | 10000 := admit.\nDefinition equiv_path_sigma `(P : A -> Type) (u v : sigT P)\n: Equiv {p : projT1 u = projT1 v &  transport _ p (projT2 u) = projT2 v} (u = v) := admit.\nDefinition hfiber {A B : Type} (f : A -> B) (y : B) := { x : A & f x = y }.\nDefinition path_universe {A B : Type} (f : A -> B) : (A = B) := admit.\nSection AssumeFunext.\n  Let equiv_fibration_replacement_eissect {B C f}\n  : forall x : {y : B & {x : C & f x = y}},\n      existT _ (f (projT1 (projT2 x))) (existT _ (projT1 (projT2 x)) idpath) = x.\n    admit.\n  Defined.\n  Definition equiv_fibration_replacement  {B C} (f:C ->B):\n    Equiv C {y:B & {x:C & f x = y}}.\n  Proof.\n    refine (BuildEquiv\n              _ _ _\n              (BuildIsEquiv\n                 C {y:B & {x:C & f x = y}}\n                 (fun c => existT _ (f c) (existT _ c idpath))\n                 (fun c => projT1 (projT2 c))\n                 equiv_fibration_replacement_eissect)).\n  Defined.\n  Definition equiv_total_paths (A : Type) (P : A-> Type) (x y : sigT P) :\n    Equiv (x = y) { p : projT1 x = projT1 y & transport P p (projT2 x) = (projT2 y) }\n    := BuildEquiv _ _ (@ equiv_inv _ _ _ (equiv_path_sigma P x y)) _.\n  Variable A:Type.\n  Definition Fam A:=sigT (fun I:Type  => I->A).\n  Definition p2f: (A->Type)-> Fam A := fun Q:(A->Type) => existT _ (sigT Q) (@ projT1 _ _).\n  Definition f2p: Fam A -> (A->Type) := fun F => let (I, f) := F in (fun a => (hfiber f a)).\n  Definition exp {U V:Type}(w:Equiv U V):Equiv (U->A) (V->A).\n    exists (fun f:(U->A)=> (fun x => (f (@ equiv_inv _ _ w _ x)))).\n    admit.\n  Defined.\n  Goal { h : Fam A -> A -> Type & Sect h p2f }.\n  exists f2p.\n  intros [I f].\n  set (e:=@ equiv_total_paths _ _ (@ existT Type (fun I0 : Type => I0 -> A) I f)\n                             (existT _ {a : A & hfiber f a} (@ projT1 _ _))).\n  simpl in e.\n  cut ( {p : I = {a : A & @ hfiber I A f a} &\n                                           @ transport _ (fun I0 : Type => I0 -> A) _ _ p f = @ projT1 _ _}).\n  { intro X.\n    apply (inverse (@ equiv_inv _ _ _ e X)). }\n  set (w:=@ equiv_fibration_replacement A I f).\n  exists (path_universe w).\n  assert (forall x, (exp w) f x = projT1 x); [ | admit ].\n  intros [a [i p]].\n  exact p.\n  Qed.\n(* Toplevel input, characters 15-19:\nError: In pattern-matching on term \"x\" the branch for constructor\n\"existT(*Top.256 Top.258*)\" has type\n \"forall (I : Type) (f : I -> A),\n  existT (fun I0 : Type => I0 -> A) {a : A & hfiber f a} projT1 =\n  existT (fun I0 : Type => I0 -> A) I f\" which should be\n \"forall (x : Type) (H : x -> A),\n  p2f (f2p (existT (fun I : Type => I -> A) x H)) =\n  existT (fun I : Type => I -> A) x H\".\n *)\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337519371/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337519373","html_url":"https://github.com/coq/coq/issues/3323#issuecomment-337519373","issue_url":"https://api.github.com/repos/coq/coq/issues/3323","id":337519373,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxOTM3Mw==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-05-14T23:23:19Z","updated_at":"2017-10-18T09:17:49Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nNote that this code goes through fine in 8.4.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337519373/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337519374","html_url":"https://github.com/coq/coq/issues/3323#issuecomment-337519374","issue_url":"https://api.github.com/repos/coq/coq/issues/3323","id":337519374,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxOTM3NA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-06-10T21:31:08Z","updated_at":"2017-10-18T09:17:49Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nThis bug has been fixed; I'll submit a file for the test-suite soon.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337519374/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]