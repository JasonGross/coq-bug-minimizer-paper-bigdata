[{"url":"https://api.github.com/repos/coq/coq/issues/comments/337525413","html_url":"https://github.com/coq/coq/issues/3700#issuecomment-337525413","issue_url":"https://api.github.com/repos/coq/coq/issues/3700","id":337525413,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyNTQxMw==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-10-07T15:10:41Z","updated_at":"2021-09-09T12:29:58Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\r\n\r\nHere are a bunch of cases where things disagree.  How does Coq manage to print two terms differently when they show up identically with `Set Printing All`?  Anyway, for at least some of these, we could do better.\r\n```coq\r\nSet Implicit Arguments.\r\nModule NonPrim.\r\n  Unset Primitive Projections.\r\n  Record prod A B := pair { fst : A ; snd : B }.\r\nEnd NonPrim.\r\nModule Prim.\r\n  Set Primitive Projections.\r\n  Record prod A B := pair { fst : A ; snd : B }.\r\nEnd Prim.\r\nGoal (forall x : NonPrim.prod Set Set, let (a, b) := x in a = a)\r\n/\\ (forall x : Prim.prod Set Set, let (a, b) := x in a = a).\r\n  Show. (* (forall x : NonPrim.prod Set Set, let (a, _) := x in a = a) /\\\r\n   (forall x : Prim.prod Set Set,\r\n    let a := Prim.fst x in let b := Prim.snd x in a = a) *)\r\n  Set Printing All.\r\n  Show. (* and\r\n     (forall x : NonPrim.prod Set Set,\r\n      match x return Prop with\r\n      | NonPrim.pair a _ => @ eq Set a a\r\n      end)\r\n     (forall x : Prim.prod Set Set,\r\n      let a := @ Prim.fst Set Set x in\r\n      let b := @ Prim.snd Set Set x in @ eq Set a a) *)\r\n  Unset Printing All.\r\nAbort.\r\nGoal (forall x : NonPrim.prod Set Set, match x with NonPrim.pair a b => a = a end)\r\n/\\ (forall x : Prim.prod Set Set, match x with Prim.pair a b => a = a end).\r\n  Show. (* (forall x : NonPrim.prod Set Set,\r\n    match x with\r\n    | {| NonPrim.fst := a |} => a = a\r\n    end) /\\ (forall x : Prim.prod Set Set, Prim.fst x = Prim.fst x) *)\r\n  (** Wrong: [match] should generate unfolded things *)\r\n  Set Printing All.\r\n  Show. (* and\r\n     (forall x : NonPrim.prod Set Set,\r\n      match x return Prop with\r\n      | NonPrim.pair a _ => @ eq Set a a\r\n      end)\r\n     (forall x : Prim.prod Set Set,\r\n      @ eq Set (@ Prim.fst Set Set x) (@ Prim.fst Set Set x)) *)\r\n  Unset Printing All.\r\nAbort.\r\nGoal (forall x : NonPrim.prod Set Set, let (a, b) := x in a = a /\\ b = b)\r\n/\\ (forall x : Prim.prod Set Set, let (a, b) := x in a = a /\\ b = b).\r\n  Show. (* (forall x : NonPrim.prod Set Set, let (a, b) := x in a = a /\\ b = b) /\\\r\n   (forall x : Prim.prod Set Set,\r\n    let a := Prim.fst x in let b := Prim.snd x in a = a /\\ b = b) *)\r\n  (** Understandably different, maybe, but should still be unfolded *)\r\n  Set Printing All.\r\n  Show. (* and\r\n     (forall x : NonPrim.prod Set Set,\r\n      match x return Prop with\r\n      | NonPrim.pair a b => and (@ eq Set a a) (@ eq Set b b)\r\n      end)\r\n     (forall x : Prim.prod Set Set,\r\n      let a := @ Prim.fst Set Set x in\r\n      let b := @ Prim.snd Set Set x in and (@ eq Set a a) (@ eq Set b b)) *)\r\n  Unset Printing All.\r\nAbort.\r\nGoal (forall x : NonPrim.prod Set Set, match x with NonPrim.pair a b => a = a /\\ b = b end)\r\n/\\ (forall x : Prim.prod Set Set, match x with Prim.pair a b => a = a /\\ b = b end).\r\n  Show. (* (forall x : NonPrim.prod Set Set,\r\n    match x with\r\n    | {| NonPrim.fst := a; NonPrim.snd := b |} => a = a /\\ b = b\r\n    end) /\\\r\n   (forall x : Prim.prod Set Set,\r\n    Prim.fst x = Prim.fst x /\\ Prim.snd x = Prim.snd x) *)\r\n  Set Printing All.\r\n  Show. (* and\r\n     (forall x : NonPrim.prod Set Set,\r\n      match x return Prop with\r\n      | NonPrim.pair a b => and (@ eq Set a a) (@ eq Set b b)\r\n      end)\r\n     (forall x : Prim.prod Set Set,\r\n      and (@ eq Set (@ Prim.fst Set Set x) (@ Prim.fst Set Set x))\r\n        (@ eq Set (@ Prim.snd Set Set x) (@ Prim.snd Set Set x))) *)\r\n  Unset Printing All.\r\nAbort.\r\n```","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337525413/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337525417","html_url":"https://github.com/coq/coq/issues/3700#issuecomment-337525417","issue_url":"https://api.github.com/repos/coq/coq/issues/3700","id":337525417,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyNTQxNw==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2015-02-16T21:09:33Z","updated_at":"2017-10-18T09:35:21Z","author_association":"CONTRIBUTOR","body":"Comment author: @mattam82\n\nClosing, we did our best and do better now :) The remaining difference is compilation of match/destructuring let.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337525417/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]