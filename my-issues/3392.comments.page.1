[{"url":"https://api.github.com/repos/coq/coq/issues/comments/337520509","html_url":"https://github.com/coq/coq/issues/3392#issuecomment-337520509","issue_url":"https://api.github.com/repos/coq/coq/issues/3392","id":337520509,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyMDUwOQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-06-22T21:45:25Z","updated_at":"2017-10-18T09:21:08Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\n(* File reduced by coq-bug-finder from original input, then from 12105 lines to 142 lines, then from 83 lines to 57 lines *)\nGeneralizable All Variables.\nAxiom admit : forall {T}, T.\nInductive paths {A : Type} (a : A) : A -> Type := idpath : paths a a where \"x = y\" := (@ paths _ x y) : type_scope.\nArguments idpath {A a} , [A] a.\nDefinition transport {A : Type} (P : A -> Type) {x y : A} (p : x = y) (u : P x) : P y := match p with idpath => u end.\nNotation \"p # x\" := (transport _ p x) (right associativity, at level 65, only parsing).\nDefinition ap {A B:Type} (f:A -> B) {x y:A} (p:x = y) : f x = f y := match p with idpath => idpath end.\nDefinition apD {A:Type} {B:A->Type} (f:forall a:A, B a) {x y:A} (p:x=y): transport _ p (f x) = f y := admit.\nDefinition Sect {A B : Type} (s : A -> B) (r : B -> A) := forall x : A, r (s x) = x.\nClass IsEquiv {A B : Type} (f : A -> B) := BuildIsEquiv {\n                                               equiv_inv : B -> A ;\n                                               eisretr : Sect equiv_inv f;\n                                               eissect : Sect f equiv_inv;\n                                               eisadj : forall x : A, eisretr (f x) = ap f (eissect x) }.\nNotation \"f ^-1\" := (@ equiv_inv _ _ f _) (at level 3).\nAxiom path_forall : forall {A : Type} {P : A -> Type} (f g : forall x : A, P x), (forall x, f x = g x) -> f = g.\nAxiom isequiv_adjointify : forall {A B} (f : A -> B) (g : B -> A) (isretr : Sect g f) (issect : Sect f g), IsEquiv f.\nDefinition functor_forall `{P : A -> Type} `{Q : B -> Type} (f0 : B -> A) (f1 : forall b:B, P (f0 b) -> Q b)\n: (forall a:A, P a) -> (forall b:B, Q b) := (fun g b => f1 _ (g (f0 b))).\nGoal forall `{P : A -> Type} `{Q : B -> Type} `{IsEquiv B A f} `{forall b, @ IsEquiv (P (f b)) (Q b) (g b)},\n       IsEquiv (functor_forall f g).\nProof.\n  intros.\n  refine (isequiv_adjointify (functor_forall f g)\n                             (functor_forall (f^-1)\n                                             (fun (x:A) (y:Q (f^-1 x)) => @ eisretr _ _ f _ x # (g (f^-1 x))^-1 y\n                             )) _ _);\n  intros h.\n  - abstract (\n        apply path_forall; intros b; unfold functor_forall;\n        rewrite eisadj;\n        admit\n      ).\n  - abstract (\n        apply path_forall; intros a; unfold functor_forall;\n        rewrite eissect;\n        apply apD\n      ).\nDefined.\n(* Anomaly: Uncaught exception Not_found(_). Please report. *)\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337520509/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337520510","html_url":"https://github.com/coq/coq/issues/3392#issuecomment-337520510","issue_url":"https://api.github.com/repos/coq/coq/issues/3392","id":337520510,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyMDUxMA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-08-13T22:44:01Z","updated_at":"2017-10-18T09:21:09Z","author_association":"CONTRIBUTOR","body":"Comment author: @maximedenes\n\nThis seems fixed in trunk (6346bee2). It would be good to know how it was solved by running a git bisect, though.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337520510/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337520511","html_url":"https://github.com/coq/coq/issues/3392#issuecomment-337520511","issue_url":"https://api.github.com/repos/coq/coq/issues/3392","id":337520511,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyMDUxMQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-08-14T10:47:05Z","updated_at":"2017-10-18T09:21:09Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nI've set my machine to run the following bisect script.  (Is it possible to have the [abstract] tactic work if I compile coqbinaries rather than coqlight, and run coqtop with -nois?)  I'll post another comment when it finishes.\n\n#!/bin/bash\n\nSCRIPT=\"$(readlink -f \"${BASH_SOURCE[0]}\")\"\nCOQ_DIR=\"$HOME/coq\"\n\n# exit immediately and abort the bisect if killed\ntrap \"exit 128\" SIGHUP SIGINT SIGTERM\n\nif [ \"$1\" = \"--init\" ]\nthen\n    shift\n    cd \"$COQ_DIR\"\n    PS4='$ '\n    set -x\n    # git bisect start [--no-checkout] [<bad> [<good>...]] [--] [<paths>...]\n    git bisect start 58a01fa1dabaf4ebd25d1386e7cc9de36c82e1eb 75940a69b0151191ded0ff153ec5490436786faa\n    git bisect run \"$SCRIPT\" \"$@ \"\n    exit 128 # if git bisect run gets --init, abort immediately\nfi\n\ncd \"$COQ_DIR\"\n\nARGS=\"-local\"\nfor arg in \"-nodoc\" \"-no-native-compiler\"; do\n    if [ ! -z \"$(./configure -h 2>&1 | grep -- \"$arg\")\" ]; then\n        ARGS=\"$ARGS $arg\"\n    fi\ndone\nfor arg in \"-coqide\" \"-with-doc\"; do\n    if [ ! -z \"$(./configure -h 2>&1 | grep -- \"$arg\")\" ]; then\n        ARGS=\"$ARGS $arg no\"\n    fi\ndone\ngit clean -xfd 2>&1 >/dev/null\necho \"./configure $ARGS\"\n./configure $ARGS\nmake coqlight \"$@ \" || exit 125\nls ./bin\n\n\nFILE=`mktemp --suffix=.v --tmpdir tmpXXXXXXXXXX`\n\ncat > \"$FILE\" <<'EOF'\n(* -*- coq-prog-args: (\"-emacs\" \"-nois\") -*- *)\n(* File reduced by coq-bug-finder from original input, then from 12105 lines to 142 lines, then from 83 lines to 57 lines *)\nGeneralizable All Variables.\nNotation \"A -> B\" := (forall _ : A, B) (right associativity, at level 99, B at level 200).\nReserved Notation \"x = y  :>  T\"\n(at level 70, y at next level, no associativity).\nReserved Notation \"x = y\" (at level 70, no associativity).\nRequire Import Coq.Init.Logic.\nAxiom admit : forall {T}, T.\nInductive paths {A : Type} (a : A) : A -> Type := idpath : paths a a where \"x = y\" := (@ paths _ x y) : type_scope.\nArguments idpath {A a} , [A] a.\nDefinition transport {A : Type} (P : A -> Type) {x y : A} (p : x = y) (u : P x) : P y := match p with idpath => u end.\nNotation \"p # x\" := (transport _ p x) (right associativity, at level 65, only parsing).\nDefinition ap {A B:Type} (f:A -> B) {x y:A} (p:x = y) : f x = f y := match p with idpath => idpath end.\nDefinition apD {A:Type} {B:A->Type} (f:forall a:A, B a) {x y:A} (p:x=y): transport _ p (f x) = f y := admit.\nDefinition Sect {A B : Type} (s : A -> B) (r : B -> A) := forall x : A, r (s x) = x.\nClass IsEquiv {A B : Type} (f : A -> B) := BuildIsEquiv {\n                                               equiv_inv : B -> A ;\n                                               eisretr : Sect equiv_inv f;\n                                               eissect : Sect f equiv_inv;\n                                               eisadj : forall x : A, eisretr (f x) = ap f (eissect x) }.\nNotation \"f ^-1\" := (@ equiv_inv _ _ f _) (at level 3).\nAxiom path_forall : forall {A : Type} {P : A -> Type} (f g : forall x : A, P x), (forall x, f x = g x) -> f = g.\nAxiom isequiv_adjointify : forall {A B} (f : A -> B) (g : B -> A) (isretr : Sect g f) (issect : Sect f g), IsEquiv f.\nDefinition functor_forall `{P : A -> Type} `{Q : B -> Type} (f0 : B -> A) (f1 : forall b:B, P (f0 b) -> Q b)\n: (forall a:A, P a) -> (forall b:B, Q b) := (fun g b => f1 _ (g (f0 b))).\nGoal forall `{P : A -> Type} `{Q : B -> Type} `{IsEquiv B A f} `{forall b, @ IsEquiv (P (f b)) (Q b) (g b)},\n       IsEquiv (functor_forall f g).\nProof.\n  intros.\n  refine (isequiv_adjointify (functor_forall f g)\n                             (functor_forall (f^-1)\n                                             (fun (x:A) (y:Q (f^-1 x)) => @ eisretr _ _ f _ x # (g (f^-1 x))^-1 y\n                             )) _ _);\n  intros h.\n  - abstract (\n        apply path_forall; intros b; unfold functor_forall;\n        rewrite eisadj;\n        admit\n      ).\n  - abstract (\n        apply path_forall; intros a; unfold functor_forall;\n        rewrite eissect;\n        apply apD\n      ).\nDefined.\n(* Anomaly: Uncaught exception Not_found(_). Please report. *)\nEOF\n\nrm -f \"${FILE%.v}.vo\"\nOUTPUT=\"$(timeout 30 ./bin/coqtop -nois -compile \"${FILE%.v}\" -nois 2>&1)\"\nERR=$?\necho \"$OUTPUT\"\necho \"$ERR\"\n#echo \"$FILE\"\nrm \"$FILE\"\n\nif [ ! -z \"$(echo \"$OUTPUT\" | grep -o 'Anomaly')\" ]; then\n    exit 0 # good, i.e., this is a commit where the error is still present, and we're looking for the first \"bad\" commit, where the anomaly has disappeared\nelif [ $ERR = 0 ]; then\n    exit 1 # bad\nelse\n    exit 125 # failed for other reason\nfi\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337520511/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337520513","html_url":"https://github.com/coq/coq/issues/3392#issuecomment-337520513","issue_url":"https://api.github.com/repos/coq/coq/issues/3392","id":337520513,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyMDUxMw==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-08-14T13:22:06Z","updated_at":"2017-10-18T09:21:09Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nThe bisect script says that it was fixed by:\n\nefa3add0c03b70ecda3890cc6c69e66850605e7d is the first bad commit\ncommit efa3add0c03b70ecda3890cc6c69e66850605e7d\nAuthor: Enrico Tassi <Enrico.Tassi@ inria.fr>\nDate:   Mon Jun 23 19:06:03 2014 +0200\n\n    Fix handling of side effects in Defined objects (Closes: HoTT#111 + 3344)\n\n    Every time you use abstract a kitten dies, please stop.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337520513/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]