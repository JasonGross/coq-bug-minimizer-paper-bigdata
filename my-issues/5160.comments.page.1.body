Comment author: @JasonGross

Goal False.
  try abstract exact_no_check I. (* Future: no fix_exn.
You have probably created a Future.computation from a value without passing the 
~fix_exn argument.  You probably want to chain with an already existing future 
instead. *)

It's quite interesting that this is neither a warning nor an error, but is 
simply printed.  Enrico, I'm assigning this to you as master of the STM.


Comment author: @ejgallego

'git grep prerr_' reveals quite a few offenders that bypass the Coq printing system and mess with the console.


Comment author: @gares

Thanks for reporting, I'll look into it next week.

@ emilio beware stm redefines prerr_endline locally.

It is an error, maybe the system can recover but its still fishy hence worth investigating.


Comment author: @ejgallego

@ enrico It is still printing to the console, thus the message doesn't get classified, but gets captured by the slave. (We discussed getting rid of that capture, I think it may be a good idea).


Comment author: @gares

Sorry I had no time for that.  Such message is for the developer.  The user does not care, so a warning is inappropriate.

The message detects at run time that a Future.t was built in an imperfect way.
Nothing will explode, but errors may not come with an appropriate Stateid.t.

What I wanted to investigate was why it was printed.  The printing itself
is fine IMO: it should not reach the casual user.  Some software do have a
"release build mode" that disables this kind of debug prints or other run time assertions.  I don't think we have it with Coq... Maxime what should I do? (apart from trying to get rid of the offending call to Future's API)?

Best,


Comment author: @ejgallego

@ Enrico the messaging system should be certainly discussed but you could also use the debug priority here?

Otherwise printing to stderr would be fine IMO, however the deal here is that ide_slave should capture std*'s output in a different way (or not at all).


Comment author: @JasonGross

Emilio, would that fix the fact that this gets printed on the command line when I run coqc?


Comment author: @JasonGross

Emilio, would that fix the fact that this gets printed on the command line when I run coqc?


Comment author: @ejgallego

@ jason, using msg_debug for that messages would indeed help for coqc.


Comment author: @Zimmi48

It looks like this was solved in 8.6 released.


