Comment author: @JasonGross

The following code succeeds, but replacing [(@ eq_equivalence)] on the last line with a hole (underscore) causes type-class resolution to fail:

Require Import Classes.RelationClasses List Setoid.

Set Universe Polymorphism.

Definition RowType := list Type.


Inductive Row : RowType -> Type :=
| RNil : Row nil
| RCons : forall T Ts, T -> Row Ts -> Row (T :: Ts).

Inductive RowTypeDecidable (P : forall T, relation T) `(H : forall T, Equivalence (P T))
: RowType -> Type :=
| RTDecNil : RowTypeDecidable P H nil
| RTDecCons : forall T Ts, (forall t0 t1 : T,
                              {P T t0 t1} + {~P T t0 t1})
                           -> RowTypeDecidable P H Ts
                           -> RowTypeDecidable P H (T :: Ts).

Set Printing Universes.

Fixpoint Row_eq Ts
: RowTypeDecidable (fun T => @ eq T) (@ eq_equivalence) Ts -> forall r1 r2 : Row Ts, {@ eq (Row Ts) r1 r2} + {r1 <> r2}.

Replacing [(fun T => @ eq T)] makes it succeed in finding [@ eq_equivalence], but this causes universe inconsistencies in HoTT/coq (the universe polymorphic branch).  It would be nice if typeclass resolution, at some point, tried beta-iota-zeta normalizing the goal (and possibly hints).

Unlike delta expansion, I think that beta-iota-zeta normalization usually makes terms smaller (though I guess [(fun x => f x x) y] gets bigger if [y] is big), and my guess is that this would not be a significant slow-down for typeclass resolution.


Comment author: @Zimmi48

This seems to be working in 8.6.


