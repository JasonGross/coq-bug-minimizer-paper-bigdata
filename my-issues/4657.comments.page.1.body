Comment author: @JasonGross

```coq
Lemma min_def {x y} : min x y = x - (x - y).
Proof. apply Min.min_case_strong; omega. Qed.
Lemma max_def {x y} : max x y = x + (y - x).
Proof. apply Max.max_case_strong; omega. Qed.
```

I want [omega] to take advantage of these two identities to handle systems involving [min] and [max].


Comment author: @JasonGross

Hmmm, [omega] seems to be slow at such equations, though.  For example:


Lemma min_minus_l x y
  : min (x - y) x = x - y.
Proof. Time apply Min.min_case_strong; omega. Qed. (* Finished transaction in 0. secs (0.06u,0.004s) *)

Lemma min_minus_l' x y
  : min (x - y) x = x - y.
Proof. Time rewrite min_def; omega. Qed. (* Finished transaction in 1. secs (1.128u,0.004s) *)

What's going on here?


Concerning the primitive support of `min` and `max` by `omega` (either on `nat` or `Z`), I don't think that's going to happen (in particular I won't do it myself). That would be way too much tweaking of the code of this tactic which is quite ... "historical", with unclear effect on the compatibility.

Moreover, `min` and `max` are already supported by the `omega with ...` family of enhanced versions of `omega` (more specifically : `omega with nat`, `omega with Z`, or the general `omega with *`).
Let me remind that these tactics are actually `omega` launched after some preprocessing (see the `zify` family of tactics in `PreOmega.v`). For instance, all the proofs above could be finished by a mere `omega with *`.

Concerning efficiency, I won't investigate the time difference you noticed. If you're concerned with efficiency, you simply **shouldn't** use `omega`. Ever. Instead, `romega` (or rather `romega with *`) is an 99%-compatible alternative which is **really** faster and lighter. In particular `romega with *` is also able to prove all the above lemmas in just no time. You could also try `lia`.

Unless there are strong objections, I plan to close this issue due to a mix of WONTFIX and ALTERNATIVE_EXISTS...
BTW @letouzey there was a recent discussion on Gitter on `omega` / `romega` / `lia` triggered by someone coming and asking why `omega` was so slow. People then advised using `romega` or `lia` but overall what one should conclude from this is that the problem is not that alternatives don't exist (they do) but that they are not sufficiently put forward. `omega` has a full (albeit small) chapter dedicated to it in the reference manual and not once it is advised there to prefer the modern `romega` or `lia`. But what's even worse is that `romega` is not even documented! See #4805.
`omega with nat` does not work, though `omega with *` does.
```coq
Require Import Coq.omega.Omega.
Goal forall x : nat, min x x = x.
  intros.
  Fail omega.
  Fail omega with nat.
  Fail omega with Z.
  omega with *. (* success *)
```
Also, `omega with` seems undocumented; I've made https://github.com/coq/coq/issues/6829 .
@JasonGross : my bad, indeed `omega with nat` is not enough to solve your example on `nat`. It just triggers the use of `zify_nat`, that converts the problem to the corresponding problem on `Z`, but does nothing special for `min`, only converts it to `Z.min`. Then we're back to the initial issue : `omega` alone doesn't handle `Z.min`. So we need here at least `omega with nat Z`, since the `with ... Z` precisely brings some special handling of functions `Z.max`, `Z.min`, `Z.abs`, `Z.sgn`. And note that `omega with *` is `omega with nat positive N Z`.
