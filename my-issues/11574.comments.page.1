[{"url":"https://api.github.com/repos/coq/coq/issues/comments/584923515","html_url":"https://github.com/coq/coq/issues/11574#issuecomment-584923515","issue_url":"https://api.github.com/repos/coq/coq/issues/11574","id":584923515,"node_id":"MDEyOklzc3VlQ29tbWVudDU4NDkyMzUxNQ==","user":{"login":"JasonGross","id":396076,"node_id":"MDQ6VXNlcjM5NjA3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/396076?v=4","gravatar_id":"","url":"https://api.github.com/users/JasonGross","html_url":"https://github.com/JasonGross","followers_url":"https://api.github.com/users/JasonGross/followers","following_url":"https://api.github.com/users/JasonGross/following{/other_user}","gists_url":"https://api.github.com/users/JasonGross/gists{/gist_id}","starred_url":"https://api.github.com/users/JasonGross/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JasonGross/subscriptions","organizations_url":"https://api.github.com/users/JasonGross/orgs","repos_url":"https://api.github.com/users/JasonGross/repos","events_url":"https://api.github.com/users/JasonGross/events{/privacy}","received_events_url":"https://api.github.com/users/JasonGross/received_events","type":"User","site_admin":false},"created_at":"2020-02-11T23:51:29Z","updated_at":"2020-02-11T23:51:29Z","author_association":"MEMBER","body":"> A basic problem is that there's no introduction at all--which should say which use cases it's intended to address (e.g. a developer trying to improve performance of code internal to Coq OR a user trying to improve performance of a large proof OR).\r\n\r\nI'm not sure there's a coherent description of the use-case beyond saying what it accomplishes.  The use case is \"your have a Coq development with a performance change due to some cause, and you want to know details about how much the performance changed in what locations.\".  Is that the sort of sentence you're looking for?\r\n\r\n> Is the \"per-line\" timing only for commands or will it break out individual tactics?\r\n\r\nIt will do whatever `coqc -time` does.  Currently, that's at the \"sentence\" level.  (Most of which are ended by periods, but I think `{` is also a sentence.)\r\n\r\n> And it should also answer basic questions (\"What is the \"timing log\"?\" should be answered in the doc, not in a PR).\r\n\r\nAgreed\r\n\r\n> TIMED and TIMING options are confusingly similar.\r\n\r\nIndeed, though TIMED is well-established at this point.  Do you have a better suggestion for TIMING which is not too long?\r\n\r\n> Using character ranges to identify lines seems very unfriendly--most editors don't have a \"jump to character offset\", which makes it harder for a user to find a particular line. I also don't see why the lines are mangled with ~.\r\n\r\nBoth of these are inherited from the `-time` flag to `coqc`.  I'd be a fan of replacing character numbers with line#:col#, and would happily update the scripts to handle this if someone else wants to update coqc/coqtop.  Line mangling with `~` is entirely inherited from `coqc -time`, but I think the scripts rely on it.  If you change this, I can update the scripts to use a regex based on the end of the line rather than one based on a lack of spaces in the string.\r\n\r\n> And TIMING_FUZZ seems a very weird approach as well.\r\n\r\nAgain, I don't see a better option.  If someone points me to a description of the algorithm used by `diff` or `git diff`, I can implement that instead.  Because that's essentially what we're doing here: we're trying to diff two files to figure out which lines are to be considered \"the same\" or \"unchanged\".\r\n\r\n> We should try to make them non-fiddly.\r\n\r\nIt's not clear to me how to do this even in principle.  There are a number of design choices, and I've tried to pick good defaults, but there are valid use cases for picking alternatives.  For example, user time just doesn't work on Windows (always reports 0), iirc, but we probably want to default to user-time on most files, especially when doing a parallel build.  On the other hand, per-line timings don't work well with user time due to the numerous things not captured by internally-reported user time, including the time to load files in `Require`, time spent in tactics under `par`, and much of the time spent in the native compiler.  Furthermore, there are different preferences about sorting, such as whether you want to see the biggest diffs first, or the biggest diffs followed by the longest time for things that likely differ only by noise (as estimated by having a diff of under a second), or if you want to see diffs sorted in numerical order (so that the biggest increases are at one end and the biggest decreases are at the other).  Additionally, I hope to someday also add an option to include changes in peak memory usage, which would be another option.\r\n\r\nThe goal of these tools is not too be a one-invocation-fits-all solution, but instead to present performance information in a usable way.","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/584923515/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/584998887","html_url":"https://github.com/coq/coq/issues/11574#issuecomment-584998887","issue_url":"https://api.github.com/repos/coq/coq/issues/11574","id":584998887,"node_id":"MDEyOklzc3VlQ29tbWVudDU4NDk5ODg4Nw==","user":{"login":"jfehrle","id":1253341,"node_id":"MDQ6VXNlcjEyNTMzNDE=","avatar_url":"https://avatars.githubusercontent.com/u/1253341?v=4","gravatar_id":"","url":"https://api.github.com/users/jfehrle","html_url":"https://github.com/jfehrle","followers_url":"https://api.github.com/users/jfehrle/followers","following_url":"https://api.github.com/users/jfehrle/following{/other_user}","gists_url":"https://api.github.com/users/jfehrle/gists{/gist_id}","starred_url":"https://api.github.com/users/jfehrle/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jfehrle/subscriptions","organizations_url":"https://api.github.com/users/jfehrle/orgs","repos_url":"https://api.github.com/users/jfehrle/repos","events_url":"https://api.github.com/users/jfehrle/events{/privacy}","received_events_url":"https://api.github.com/users/jfehrle/received_events","type":"User","site_admin":false},"created_at":"2020-02-12T03:02:39Z","updated_at":"2020-02-12T03:06:34Z","author_association":"CONTRIBUTOR","body":"A few thoughts...\r\n\r\n> I'm not sure there's a coherent description of the use-case beyond saying what it accomplishes. The use case is \"your have a Coq development with a performance change due to some cause, and you want to know details about how much the performance changed in what locations.\". Is that the sort of sentence you're looking for?\r\n\r\nThat seems wordy.  You could mention the two cases I suggested: this profiling is useful for those modifying Coq internals as well as for comparing performance of alternative proof scripts.\r\n\r\nThe text says the script does lines, you say sentences above.   If it's sentences, briefly explain what a sentence is and that `tactic1; tactic2.` is one sentence but two tactics.\r\n\r\nAlso worth saying that pretty-timed shows per-file build times and pretty-print-timed-diff gives you per-line diffs.  The introduction also gives a bit of a summary/preview of what follows so the reader can decide if it's worth reading.\r\n\r\nThe example for print-pretty-single-time-diff only shows commands.  That's a little misleading.\r\n\r\nThe command names could be simpler; \"pretty\" doesn't add much; there are no non-pretty options are there?  And maybe put the after-before-change-% change columns together with the code/file name on the far right, which could then maybe be a bit longer.\r\n\r\nAlso explain how the various options do or don't interact; can you set TIMING=1 on print-pretty-single-time-diff?  Or do you do that in 2 steps?\r\n\r\n> If someone points me to a description of the algorithm used by diff or git diff, I can implement that instead.\r\n\r\nFrom the doc: See Eugene Myers. An O(ND) difference algorithm and its variations. Algorithmica, 1986. URL: http://www.xmailserver.org/diff2.pdf.\r\n\r\nThere is an OCaml implementation in diff2.ml in the source tree.","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/584998887/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/585007457","html_url":"https://github.com/coq/coq/issues/11574#issuecomment-585007457","issue_url":"https://api.github.com/repos/coq/coq/issues/11574","id":585007457,"node_id":"MDEyOklzc3VlQ29tbWVudDU4NTAwNzQ1Nw==","user":{"login":"jfehrle","id":1253341,"node_id":"MDQ6VXNlcjEyNTMzNDE=","avatar_url":"https://avatars.githubusercontent.com/u/1253341?v=4","gravatar_id":"","url":"https://api.github.com/users/jfehrle","html_url":"https://github.com/jfehrle","followers_url":"https://api.github.com/users/jfehrle/followers","following_url":"https://api.github.com/users/jfehrle/following{/other_user}","gists_url":"https://api.github.com/users/jfehrle/gists{/gist_id}","starred_url":"https://api.github.com/users/jfehrle/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jfehrle/subscriptions","organizations_url":"https://api.github.com/users/jfehrle/orgs","repos_url":"https://api.github.com/users/jfehrle/repos","events_url":"https://api.github.com/users/jfehrle/events{/privacy}","received_events_url":"https://api.github.com/users/jfehrle/received_events","type":"User","site_admin":false},"created_at":"2020-02-12T03:24:25Z","updated_at":"2020-02-12T03:24:25Z","author_association":"CONTRIBUTOR","body":"Venturing off topic: it would nice if there was a way to get performance traces of OCaml source code showing time spent in each routine.  That could give insight not available with the options we've discussed here.  But not simple to implement.  And probably depends critically on the OS.  The high-precision can get some of this info but it's laborious to do so.","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/585007457/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/585010273","html_url":"https://github.com/coq/coq/issues/11574#issuecomment-585010273","issue_url":"https://api.github.com/repos/coq/coq/issues/11574","id":585010273,"node_id":"MDEyOklzc3VlQ29tbWVudDU4NTAxMDI3Mw==","user":{"login":"JasonGross","id":396076,"node_id":"MDQ6VXNlcjM5NjA3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/396076?v=4","gravatar_id":"","url":"https://api.github.com/users/JasonGross","html_url":"https://github.com/JasonGross","followers_url":"https://api.github.com/users/JasonGross/followers","following_url":"https://api.github.com/users/JasonGross/following{/other_user}","gists_url":"https://api.github.com/users/JasonGross/gists{/gist_id}","starred_url":"https://api.github.com/users/JasonGross/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JasonGross/subscriptions","organizations_url":"https://api.github.com/users/JasonGross/orgs","repos_url":"https://api.github.com/users/JasonGross/repos","events_url":"https://api.github.com/users/JasonGross/events{/privacy}","received_events_url":"https://api.github.com/users/JasonGross/received_events","type":"User","site_admin":false},"created_at":"2020-02-12T03:33:40Z","updated_at":"2020-02-12T03:33:40Z","author_association":"MEMBER","body":"> Venturing off topic: it would nice if there was a way to get performance traces of OCaml source code showing time spent in each routine. That could give insight not available with the options we've discussed here. But not simple to implement. And probably depends critically on the OS. The high-precision can get some of this info but it's laborious to do so.\r\n\r\nIsn't that what flamegraphs give you?  (c.f. https://github.com/coq/coq/issues/9582#issuecomment-464088101)","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/585010273/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/585028117","html_url":"https://github.com/coq/coq/issues/11574#issuecomment-585028117","issue_url":"https://api.github.com/repos/coq/coq/issues/11574","id":585028117,"node_id":"MDEyOklzc3VlQ29tbWVudDU4NTAyODExNw==","user":{"login":"jfehrle","id":1253341,"node_id":"MDQ6VXNlcjEyNTMzNDE=","avatar_url":"https://avatars.githubusercontent.com/u/1253341?v=4","gravatar_id":"","url":"https://api.github.com/users/jfehrle","html_url":"https://github.com/jfehrle","followers_url":"https://api.github.com/users/jfehrle/followers","following_url":"https://api.github.com/users/jfehrle/following{/other_user}","gists_url":"https://api.github.com/users/jfehrle/gists{/gist_id}","starred_url":"https://api.github.com/users/jfehrle/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jfehrle/subscriptions","organizations_url":"https://api.github.com/users/jfehrle/orgs","repos_url":"https://api.github.com/users/jfehrle/repos","events_url":"https://api.github.com/users/jfehrle/events{/privacy}","received_events_url":"https://api.github.com/users/jfehrle/received_events","type":"User","site_admin":false},"created_at":"2020-02-12T04:51:56Z","updated_at":"2020-02-12T04:51:56Z","author_association":"CONTRIBUTOR","body":"I hadn't seen those.","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/585028117/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]