[{"url":"https://api.github.com/repos/coq/coq/issues/comments/337548443","html_url":"https://github.com/coq/coq/issues/5153#issuecomment-337548443","issue_url":"https://api.github.com/repos/coq/coq/issues/5153","id":337548443,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0ODQ0Mw==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-10-23T18:05:09Z","updated_at":"2017-10-18T10:44:54Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nClass some_type := { Ty : Type }.\nInstance: some_type := { Ty := nat }.\nArguments Ty : clear implicits.\nGoal forall (H : forall t : some_type, @ Ty t -> False) (H' : False -> 1 = 2), 1 \n= 2.\nProof.\n  intros H H'.\n  pose proof (H' (@ H _ O)). (* succeeds *)\n  specialize (H' (@ H _ O)). (* fails *)\n(*\nError: (diff) In environment\nH : forall t : some_type, Ty t -> False\nH' : False -> 1 = 2\nH0 : 1 = 2\nThe term \"0\" has type \"nat\" while it is expected to have type\n\"Ty ?10\".\n*)\n\nClearly the issue is that unification is calling typeclass resolution at a \ndifferent point in each of these.  It's not clear to me that they should.  I'll \nleave it up to the devs to pick a target milestone; changes in the unification \nalgorithms that tactics use seems like a subtle problem and an easy source of \nincompatibilities.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337548443/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337548445","html_url":"https://github.com/coq/coq/issues/5153#issuecomment-337548445","issue_url":"https://api.github.com/repos/coq/coq/issues/5153","id":337548445,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0ODQ0NQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-10-23T18:06:24Z","updated_at":"2017-10-18T10:44:54Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nHugo, I'm assigning you because you seem to have the most involvement in the \nunification and type algorithms lately, though I'm not sure if someone else \nwould be better (MS? PMP? coq-bugs-redist?)\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337548445/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337548447","html_url":"https://github.com/coq/coq/issues/5153#issuecomment-337548447","issue_url":"https://api.github.com/repos/coq/coq/issues/5153","id":337548447,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0ODQ0Nw==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-10-24T12:58:31Z","updated_at":"2017-10-18T10:44:54Z","author_association":"CONTRIBUTOR","body":"Comment author: @herbelin\n\nHi Jason,\n\nIt seems that it would be strictly more powerful in this case to have \"specialize\" follow the same typing path as \"pose proof\", in the following sense.\n\nAs far as I can see, in \"pose proof\" path [1], type classes are used only at the very end of typing [2] as well as in case of type mismatch failure of unification/coercion when applying an argument to a function [3].\n\nIn \"specialize\" path [4], type classes are used at the very end of typing [5]. As for arguments given with \"with\", this is a similar path [6] a bit weaker [7].\n\nSo, if I did not forget places where type classes can be used, the only effect of using path [1] for \"specialize\" would be to succeed in a case where it previously failed (case [3]) (if ever Matthieu can confirm).\n\nBased on that, I have an \"enhancement\" patch. Note however that this is not magical and exclusive of working at improving unification itself. For instance, the following would fail:\n\nClass some_type := { Ty : Type }.\nInstance some_nat : some_type := { Ty := nat }.\nInstance some_bool : some_type := { Ty := bool }.\nArguments Ty : clear implicits.\nGoal forall (H : forall t : some_type, @ Ty t -> False) (H' : False -> 1 = 2), 1 \n= 2.\nProof.\n  intros H H'.\n  specialize (H' (@ H _ O)).\n\nbecause the wrong instance would be found with no backtracking available. Alternatively, in the given case, another algorithm canonically inverting the problem \"nat == Ty ?n\" into \"?n := Build_some_type ?p\" and \"nat == ?p\" would succeed.\n\nI add some technical information for the purpose of further reference, and for those interested in the technical aspects of the code as it is now.\n\n[1] Tacinterp.interp_constr which calls type inference with the use_typeclasses flag on\n[2] Pretyping.solve_remaining_evars\n[3] in Coercion.inh_conv_coerce_to_gen\n[4] Tacinterp.interp_constr_with_bindings, which calls Tacinterp.interp_open_constr, which in this case calls type inference with the use_typeclasses flag off\n[5] in Tactics.specialize itself\n[6] Tacinterp.interp_open_constr\n[7] type classes are only used for checking the type of \"with\" arguments (in Unification.w_coerce_to_type) but not internally for typing\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337548447/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337548449","html_url":"https://github.com/coq/coq/issues/5153#issuecomment-337548449","issue_url":"https://api.github.com/repos/coq/coq/issues/5153","id":337548449,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0ODQ0OQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-10-24T15:47:39Z","updated_at":"2017-10-18T10:44:54Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nGiven that the change would be strictly more powerful, it seems reasonable for \ninclusion in 8.6 to me, as long as this is noted in the \nchangelog/compatibilities file.  (I was worried about it being less powerful in \nsome cases.)\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337548449/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337548450","html_url":"https://github.com/coq/coq/issues/5153#issuecomment-337548450","issue_url":"https://api.github.com/repos/coq/coq/issues/5153","id":337548450,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0ODQ1MA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2017-05-25T22:53:15Z","updated_at":"2017-10-18T10:44:55Z","author_association":"CONTRIBUTOR","body":"Comment author: @herbelin\n\nGranted in trunk 9f463c144 (May 22, 2017).\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337548450/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]