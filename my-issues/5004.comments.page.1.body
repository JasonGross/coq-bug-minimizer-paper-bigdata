Comment author: @JasonGross

Here is code that works in 8.5, but times out in 8.6.  Note that even in the 
case that vm_compute does not time out, it is 10x slower in 8.6 than 8.5.  The 
issue seems to have something to do with [fix]points with extremely large 
bodies.

(* -*- mode: coq; coq-prog-args: ("-emacs" "-R" "src" "Crypto" "-R" 
"coqprime/Coqprime" "Coqprime" "-R" "Bedrock" "Bedrock" "-top" 
"SpecificCurve25519") -*- *)
(* File reduced by coq-bug-finder from original input, then from 174 lines to 
83 lines, then from 97 lines to 83 lines *)
(* coqc version trunk (July 2016) compiled on Jul 29 2016 16:1:59 with OCaml 
4.02.3
   coqtop version [..]:[..]/Downloads/coq/coq-v8.6,v8.6 
(dabe6d0e1d1782d3e9647e04aa1bf161765ad882) *)
Require Coq.ZArith.Zpower.

Import Coq.ZArith.BinInt.

Fixpoint tuple' T n : Type :=
  match n with
  | O => T
  | S n' => (tuple' T n' * T)%type
  end.

Definition tuple T n : Type :=
  match n with
  | O => unit
  | S n' => tuple' T n'
  end.

Program Fixpoint from_list' {T} (y:T) (n:nat) (xs:list T) : length xs = n -> 
tuple' T n :=
  match n return _ with
  | 0 =>
    match xs return (length xs = 0 -> tuple' T 0) with
    | nil => fun _ => y
    | _ => _
    end
  | S n' =>
    match xs return (length xs = S n' -> tuple' T (S n')) with
    | cons x xs' => fun _ => (from_list' x n' xs' _, y)
    | _ => _
    end
  end.
Program Definition from_list {T} (n:nat) (xs:list T) : length xs = n -> tuple T 
n :=
match n return _ with
| 0 =>
    match xs return (length xs = 0 -> tuple T 0) with
    | nil => fun _ : 0 = 0 => tt
    | _ => _
    end
| S n' =>
    match xs return (length xs = S n' -> tuple T (S n')) with
    | cons x xs' => fun _ => from_list' x n' xs' _
    | _ => _
    end
end.
Import Coq.Lists.List.

Local Open Scope Z_scope.

Definition sum_firstn l n := fold_right Z.add 0%Z (firstn n l).

Section Pow2Base.
  Context (limb_widths : list Z).

  Fixpoint encode' z i :=
    match i with
    | O => nil
    | S i' => let lw := sum_firstn limb_widths in
       encode' z i' ++ (Z.shiftr (Z.land z (Z.ones (lw i))) (lw i')) :: nil
    end.
End Pow2Base.

Definition limb_widths_from_len_step loop len k := Eval compute in
  (fun i prev =>
  match i with
  | O => nil
  | S i' => let x := (if (Z.eq_dec ((k * Z.of_nat (len - i + 1)) mod (Z.of_nat 
len)) 0)
                      then (k * Z.of_nat (len - i + 1)) / Z.of_nat len
                      else (k * Z.of_nat (len - i + 1)) / Z.of_nat len + 1)in
            x - prev:: (loop i' x)
  end).
Definition limb_widths_from_len len k :=
  (fix loop i prev := @ limb_widths_from_len_step loop len k i prev) len 0.

Definition limb_widths_from_len' len k := Eval compute in
  (fix loop i prev :=
    match i with
    | O => nil
    | S i' => let x := (if (Z.eq_dec ((k * Z.of_nat (len - i + 1)) mod 
(Z.of_nat len)) 0)
                        then (k * Z.of_nat (len - i + 1)) / Z.of_nat len
                        else (k * Z.of_nat (len - i + 1)) / Z.of_nat len + 1)in
      x - prev:: (loop i' x)
    end) len 0.

Goal forall (d2Z := 
16295367250680780974490674513165176452449235426866156013048779062215315747161%Z 
: Z)
            (ls := (26 :: 25 :: 26 :: 25 :: 26 :: 25 :: 26 :: 25 :: 26 :: 25 :: 
nil)%list%Z)
            (k := @ length Z (limb_widths_from_len 10 255) : nat)
            (e : (10 = 10)%nat)
            (x := @ from_list Z k
                                   (encode' ls d2Z k)
                                   e
                  : Z * Z * Z * Z * Z * Z * Z * Z * Z * Z),
    False.
  intros.
  Time Timeout 10 vm_compute in x. (* 8.5pl2: Finished transaction in 0.284 
secs (0.268u,0.016s) (successful); 8.6: Finished transaction in 2.931 secs 
(2.928u,0.s) (successful) *)
Abort.
Goal forall (d2Z := 
16295367250680780974490674513165176452449235426866156013048779062215315747161%Z 
: Z)
            (ls := (26 :: 25 :: 26 :: 25 :: 26 :: 25 :: 26 :: 25 :: 26 :: 25 :: 
nil)%list%Z)
            (k := @ length Z (limb_widths_from_len' 10 255) : nat)
            (e : (10 = 10)%nat)
            (x := @ from_list Z k
                                   (encode' ls d2Z k)
                                   e
                  : Z * Z * Z * Z * Z * Z * Z * Z * Z * Z),
    False.
  intros.
  Time ((timeout 5 (vm_compute in k; subst k ls d2Z)) || fail 0 "too early"). 
(* Finished transaction in 0. secs (0.u,0.s) (successful) *)
  Time ((timeout 1 (vm_compute in x)) || fail 0 "too early"). (* Finished 
transaction in 0.003 secs (0.u,0.003s) (successful) *)
  Undo 2.
  Time Timeout 100 vm_compute in x. (* In 8.5pl2: Finished transaction in 0.861 
secs (0.852u,0.007s) (successful); in 8.6: Finished failing transaction in 100. 
secs (99.897u,0.024s) (failure) *)


Comment author: @silene

As a rule of thumb, never use "vm_compute in". It does not do what you expect it to do (unfortunately). If you arrange your two examples so that they use "vm_compute" instead, you will notice that the VM machinery has not become any slower in 8.6.


Comment author: @JasonGross

What does [vm_compute in] do that is unexpected, beyond not inserting vm casts into the proof term?

I don't have access to a computer at the moment, but I found this bug from code doing [Definition x := Eval vm_compute in y.], which times out in 8.6 but runs in about 10 seconds in 8.5.  Are you saying this construct should not be used?


Comment author: @silene

You are right, "vm_compute in" does not introduce any VMcast. As a consequence, if, for any reason, the kernel needs to typecheck the term (or its type), then you get might get awful performances. Now this might be a bug that the kernel typechecks more often in 8.6 than in 8.5, but it is not related to the speed of "vm_compute" at all.

As for "Eval vm_compute in", that is a whole different matter. Yes it should be used and if it has indeed regressed, that is a serious bug. Please fill a bug-report about it. I tried modifying your example so that it uses "Eval vm_compute in" and I didn't notice anything special about it.

Print x.
(* x = @ from_list Z k (encode' ls d2Z k) e : Z * Z * Z * Z * Z * Z * Z * Z * Z * Z *)
Time Definition y := Eval vm_compute in x.
(* Finished transaction in 0.003 secs (0.003u,0.s) (successful) *)
Print y.
(* y = (9444199, 29715967, 27058993, 54557047, 15978800, 229458, 13898781, 36363642, 27714825, 45281625) : Z * Z * Z * Z * Z * Z * Z * Z * Z * Z *)

Note again that you have to be careful when using "Eval something in", since the kernel might still have to typecheck something before introducing the definition in the context, and this typechecking will be done without using the VM machinery. Again, it might be that the kernel typechecks more often in 8.6 than in 8.5.


Comment author: @JasonGross

Note that I use two different [k]s, and have two examples at the end.  Which definition of [k] were you using?



Here is a definition that takes 7 seconds in 8.5pl2, but over 100 (if it finishes at all) in 8.6:

Time Timeout 100 Definition foo' (d2Z := 16295367250680780974490674513165176452449235426866156013048779062215315747161%Z : Z)
     (ls := (26 :: 25 :: 26 :: 25 :: 26 :: 25 :: 26 :: 25 :: 26 :: 25 :: nil)%list%Z)
     (k := @ length Z (limb_widths_from_len' 10 255) : nat)
     (e : (10 = 10)%nat)
  := Eval vm_compute in @ from_list Z k
                                   (encode' ls d2Z k)
                                   e. (* In 8.5pl2: Finished transaction in 7.16 secs (7.139u,0.015s) (successful); in 8.6: Finished failing transaction in 100. secs (99.882u,0.027s) (failure) *)

I'm not sure what it could possibly be typechecking outside the kernel, given that it's a top-level definition that produces a list of Zs...  If the let-ins matter, doing the same thing but making them disappear on vm_compute is equally slow:

Time Timeout 100 Definition foo' (e : (10 = 10)%nat)                                                                                                           
  := Eval vm_compute in let d2Z := (16295367250680780974490674513165176452449235426866156013048779062215315747161%Z : Z) in                                    
                        let ls := ((26 :: 25 :: 26 :: 25 :: 26 :: 25 :: 26 :: 25 :: 26 :: 25 :: nil)%list%Z) in                                                
                        let k := (@ length Z (limb_widths_from_len' 10 255) : nat) in                                                                           
                        @ from_list Z k                                                                                                                         
                                   (encode' ls d2Z k)                                                                                                          
                                   e. (* In 8.5pl2: Finished transaction in 6.581 secs (6.56u,0.015s) (successful); in 8.6: Finished failing transaction in 100. secs (99.757u,0.142s) (failure) *)



It does seem that my first example (without the gigantic [fix] body, i.e., using [limb_widths_from_len] rather than [limb_widths_from_len']) seems about 2-3 orders of magnitude faster with [Eval vm_compute in] than with [vm_compute in], and that the difference between 8.5 and 8.6 seems to disappear with that one.  But the problem remains in this example.


Comment author: @silene

It is really a matter of how you write your definitions:

If I input the following definitions, it doesn't terminate, neither with Coq 8.5 nor Coq 8.6.

Definition foo' (d2Z := 16295367250680780974490674513165176452449235426866156013048779062215315747161%Z : Z)
     (ls := (26 :: 25 :: 26 :: 25 :: 26 :: 25 :: 26 :: 25 :: 26 :: 25 :: nil)%list%Z)
     (k := @ length Z (limb_widths_from_len' 10 255) : nat)
     (e : (10 = 10)%nat)
  := @ from_list Z k (encode' ls d2Z k) e.
Time Definition foo'' := Eval vm_compute in foo'.

But if I input the following ones, it does terminate instantly, with both Coq 8.5 and 8.6.

Definition foo' (d2Z := 16295367250680780974490674513165176452449235426866156013048779062215315747161%Z : Z)
     (ls := (26 :: 25 :: 26 :: 25 :: 26 :: 25 :: 26 :: 25 :: 26 :: 25 :: nil)%list%Z)
     (k := @ length Z (limb_widths_from_len' 10 255) : nat)
     (e : (10 = 10)%nat) : (Z * Z * Z * Z * Z * Z * Z * Z * Z * Z)%type
  := @ from_list Z k (encode' ls d2Z k) e.
Time Definition foo'' := Eval vm_compute in foo'.

The only difference between the two scripts is whether I gave a reduced type for foo' or not. If I don't, the kernel starts unfolding definitions inside the types of foo' and foo'' and get lost somewhere in the process of matching them against each other. If I do, then the kernel can trivially typecheck the value of foo''. In both cases, vm_compute terminates instantly; what takes time is adding the new constant to the safely-typed environment.


Comment author: @JasonGross

Interesting.  So this is a change in type inference or constraints between 8.5 and 8.6, then?

Would there be any good way to make definitions involving vm_compute not be this fragile?


Comment author: @ppedrot

In any case, I think this bug is essentially invalid.


