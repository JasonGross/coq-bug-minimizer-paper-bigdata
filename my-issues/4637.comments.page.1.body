Comment author: @JasonGross

If I do something like [set (x := y); vm_compute in x; subst x], there's no vm_cast inserted in the proof term.  This can cause [Defined] to be very slow.  If it's useful, I can try to come up with a test case, though I'm having trouble finding a small example where it matters whether [Defined] does [vm_compute] vs it's normal strategy.


Comment author: @JasonGross

Created attachment 687
`make src/Parsers/Refinement/SharpenedJSON.vo`

The first [Defined] in src/Parsers/Refinement/SharpenedJSON.v takes 40 minutes in Coq 8.4pl6.  If I make sure that the VMCasts are inserted (see bug [BZ#4643](https://github.com/coq/coq/issues?q=is%3Aissue%20%22Original%20bug%20ID%3A%20BZ%234643%22)), then it only takes 2 minutes.

> Attached file: [bug_4637.zip](https://coq.inria.fr/bugfiles/attachment.cgi?id=687) (application/x-zip-compressed, 953084 bytes)
> Description:   `make src/Parsers/Refinement/SharpenedJSON.vo`


Comment author: @silene

Here is a small example where it matters (increase n if the issue is not noticeable).

Require Import Arith.
Goal let n := 9 in fact n - fact n = 0.
intro n.
set (l := fact n - fact n).
Time vm_compute in l.
reflexivity.
Time Defined.

The main issue with inserting vm_cast where it matters is that it is quite intricate to get it right. That is the reason why nobody tried to make it so. For instance, on the example above, "vm_compute in l" would have to behave as follows in order for vm_cast to reduce only the body of the let-in:

(* vm_compute in l *)
generalize (eq_refl (l = 0)).
generalize (l = 0) at 2 3.
intros P HP.
generalize (eq_refl (fact n - fact n)).
generalize (fact n - fact n) at 1.
intros k Hk.
revert HP.
revert l.
rewrite <- Hk.
intros l HP.
revert Hk.
Time vm_compute.
intros Hk.
revert l HP.
rewrite Hk.
intros l HP.
rewrite <- HP.
clear k Hk P HP.

It is possible to make the code shorter (e.g. by using auxiliary lemmas), but this example should already make it apparent why it is not as simple as it might seem.


Comment author: @JasonGross

Thanks for the shorter example!  Here's a generic-ish solution:

(** Work around bug [BZ#4494](https://github.com/coq/coq/issues?q=is%3Aissue%20%22Original%20bug%20ID%3A%20BZ%234494%22), https://coq.inria.fr/bugs/show_bug.cgi?id=4494 (replace is slow and broken under binders *)
Ltac replace_with_at_by x y set_tac tac :=
  let H := fresh in
  let x' := fresh in
  set_tac x' x;
  assert (H : y = x') by (subst x'; tac);
  clearbody x'; induction H.

Ltac replace_with_at x y set_tac :=
  let H := fresh in
  let x' := fresh in
  set_tac x' x;
  cut (y = x');
  [ intro H; induction H
  | subst x' ].

Ltac replace_with_vm_compute c :=
  let c' := (eval vm_compute in c) in
  (* we'd like to just do: *)
  (* replace c with c' by (clear; abstract (vm_compute; reflexivity)) *)
  (* but [set] is too slow in 8.4, so we write our own version (see https://coq.inria.fr/bugs/show_bug.cgi?id=3280#c13 *)
  let set_tac := (fun x' x
                  => pose x as x';
                     change x with x') in
  replace_with_at_by c c' set_tac ltac:(clear; vm_cast_no_check (eq_refl c')).

Ltac replace_with_vm_compute_in c H :=
  let c' := (eval vm_compute in c) in
  (* By constrast [set ... in ...] seems faster than [change .. with ... in ...] in 8.4?! *)
  replace_with_at_by c c' ltac:(fun x' x => set (x' := x) in H ) ltac:(clear; vm_cast_no_check (eq_refl c')).

Require Import Arith.
Goal let n := 9 in fact n - fact n = 0.
intro n.
set (l := fact n - fact n).
(*Time vm_compute in l.*)
Time replace_with_vm_compute_in (fact n - fact n) l.
reflexivity.
Time Defined.


Comment author: @silene

*** Bug [BZ#4662](https://github.com/coq/coq/issues?q=is%3Aissue%20%22Original%20bug%20ID%3A%20BZ%234662%22) has been marked as a duplicate of this bug. ***


