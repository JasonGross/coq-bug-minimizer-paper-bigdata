Comment author: @JasonGross

I want to be able to track down anomalies that show up only in CoqIDE, automatically.  In this case, there's an "Anomaly: variable U unbound. Please report." that shows up whenever you step forwards or backwards, so I suspect it's raised in the querying of the goal.  (I can point you at a large code base reproducing the problem, or you can give me a vernacular that queries the goal in the same way as CoqIDE does automatically (neither [Show] nor [Show Proof] trigger the anomaly in coqtop, or you can give me a headless mode.)


Comment author: @gares

There is an headless coqide, called fake_ide, with some tests in test-suite/ide/.

Another, simpler way, is to configure coq with -debug, recompile all files, start coqide with -debug.  Then the anomaly will carry a backtrace.


Comment author: @JasonGross

Any chance I can convince you to add an opam 8.5.dev-debug package with -debug enabled?

Here's the tail end of the log from -debug (without reconfiguring Coq):

[DEBUG] Handling coqtop answer
[DEBUG] Start eval_call Status false
[DEBUG] End eval_call
[pid 136] <-- Status false
master:0] reaching: 57
master:0] reached (cache)
[pid 136] --> GOOD Status: path=Top;proof = bipequivEQequiv;
[DEBUG] Handling coqtop answer
[DEBUG] Feedback Processed on 57
[DEBUG] Marking  [-218,  0]( 2760, 2867) transitivity {... [] 
Error: dot: can't open /tmp/6.dot
[DEBUG] Begin command processing
[DEBUG] Start eval_call Add (("\n    apply equiv_functor_sigma_id; intro n.",-219),(57,true))
[DEBUG] End eval_call
[pid 136] <-- Add (("\n    apply equiv_functor_sigma_id; intro n.",-219),(57,true))
master:0] {{{ processing: apply equiv_functor_sigma_id; intro n.
master:0]   classified as: ProofStep Later
master:0] processed }}}
[pid 136] --> GOOD (58,(Inl ,""))
[DEBUG] Handling coqtop answer
[DEBUG] Marking  [-219,  0]( 2867, 2910) apply equiv_... [P] 
[DEBUG] start_of_input moved
[DEBUG] selection_bound moved
[DEBUG] Start eval_call SetOptions [(["Printing";"Width"],64);(["Printing";"Coercions"],false);(["Printing";"Matching"],true);(["Printing";"Notations"],true);(["Printing";"Existential";"Instances"],false);(["Printing";"Implicit"],false);(["Printing";"All"],false);(["Printing";"Universes"],false)]
[DEBUG] End eval_call
[pid 136] <-- SetOptions [(["Printing";"Width"],64);(["Printing";"Coercions"],false);(["Printing";"Matching"],true);(["Printing";"Notations"],true);(["Printing";"Existential";"Instances"],false);(["Printing";"Implicit"],false);(["Printing";"All"],false);(["Printing";"Universes"],false)]
[pid 136] --> GOOD 
[DEBUG] Handling coqtop answer
[DEBUG] Start eval_call Goal 
[DEBUG] End eval_call
[pid 136] <-- Goal 
master:0] reaching: 58
master:0] defining 58 (cache=Y)
master:0] reaching: 57
master:0] reached (cache)
master:0] interpreting apply equiv_functor_sigma_id; intro n.
master:0] setting cur id to 58
master:0] reached: 58
[DEBUG] Feedback ProcessingIn on 58
[DEBUG] Marking  [-219,  0]( 2867, 2910) apply equiv_... [P] 
[DEBUG] Feedback Processed on 57
[DEBUG] Marking  [-218,  0]( 2760, 2867) transitivity {... [] 
[DEBUG] Feedback Processed on 58
[DEBUG] Marking  [-219,  0]( 2867, 2910) apply equiv_... [] 
[pid 136] --> FAIL 0 [
Anomaly: in retyping: variable U unbound. Please report.]
[DEBUG] Handling coqtop answer
[DEBUG] Start eval_call Status false
[DEBUG] End eval_call
[pid 136] <-- Status false
master:0] reaching: 58
master:0] reached (cache)
[pid 136] --> GOOD Status: path=Top;proof = bipequivEQequiv;
[DEBUG] Handling coqtop answer
[DEBUG] Feedback Processed on 58
[DEBUG] Marking  [-219,  0]( 2867, 2910) apply equiv_... [] 
got key '' (65513, )
Error: dot: can't open /tmp/6.dot
Error: dot: can't open /tmp/6.dot
got key '' (65513, )


Comment author: @gares

I don't want the stderr, I want the text of the anomaly that includes a trace.

I'm absolutely in favor of having the debug version of Coq easily installable.

I guess we will discuss opam seriously at the next GT, today the installation instruction of beta don't even mention it.


Comment author: @ppedrot

Actually, I discussed about this a bit with Hugo, and he doesn't see anything against publishing the beta2 with the debug configure flag enable.

If I am not mistaken, adding this flag (the configure one, not the program) by default is almost free. It only makes the binary a little bit larger.


Comment author: @gares

Good news then, I'll activate the flag on the windows build.

Are you saying that there is not slowdown if -debug is not passed?
If so, why don't we make -debug the default?


Comment author: @ppedrot


> If so, why don't we make -debug the default?

No idea. According to http://caml.inria.fr/mantis/view.php?id=5583, this is just for free.


Comment author: @gares

Sorry, my sentence is very ambiguous.

Why don't we make the ./configure script enable -debug by default?

And then just ask the users to run coqide with -debug when they want to
report a bug?

Do debug symbols just make Coq fatter? Or they slow it down too?


Comment author: @ppedrot


> Why don't we make the ./configure script enable -debug by default?

I'm personally in favour of making it the default.

> And then just ask the users to run coqide with -debug when they want to
> report a bug?

That's the idea.

> Do debug symbols just make Coq fatter? Or they slow it down too?

According to the above link, it just makes the executable bigger, but does not affect the run time nor memory requirements.


Comment author: @gares

Ah right, at the end ocaml calls the C toolchain.
Then yes, there is no overhead.

But something makes me curious.  What we do for C software in Debian
is that we always compile it with -g, then we ask "strip" to remove
the debug symbols from the binary and stock them on the side.
Then gdb, when debugging a binary and a code dump, loads on
the fly the debug symbols to print a readable back trace.
So we don't even get the space overhead (in memory).

Any idea how your trace printer would "work" if the debug symbols
are stripped from the binary?


Comment author: @ppedrot


> Any idea how your trace printer would "work" if the debug symbols
> are stripped from the binary?

I had read the backtrace code once, and as far as I remember, if OCaml does not find the debugging information, it returns an empty backtrace. This is pretty dumb, but maybe we can patch it to recover the pointers instead.


Comment author: @gares

Well, then the patch really belongs to OCaml.

Here the best doc I've found:
  http://sourceware.org/gdb/onlinedocs/gdb/Separate-Debug-Files.html
  http://sources.debian.net/src/debhelper/9.20141022/dh_strip/

but I guess we've drifted far enough from the original bugreport ;-)


Comment author: @ppedrot

We agreed to distribute coq with the -debug flag activated by default, so I believe this wish is closed.


Comment author: @JasonGross

The opam packages do not seem to have been updated.  Should I open an issue at https://github.com/coq/repo-coqs, or reopen this issue?


