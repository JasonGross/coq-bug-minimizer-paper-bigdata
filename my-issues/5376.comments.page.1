[{"url":"https://api.github.com/repos/coq/coq/issues/comments/337551560","html_url":"https://github.com/coq/coq/issues/5376#issuecomment-337551560","issue_url":"https://api.github.com/repos/coq/coq/issues/5376","id":337551560,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU1MTU2MA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2017-03-01T20:31:13Z","updated_at":"2017-10-18T10:55:23Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nI'd like to be able to automatically generate lemmas like the ones I'm adding \nin https://github.com/coq/coq/pull/451\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337551560/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/1009281090","html_url":"https://github.com/coq/coq/issues/5376#issuecomment-1009281090","issue_url":"https://api.github.com/repos/coq/coq/issues/5376","id":1009281090,"node_id":"IC_kwDOABUDh848KGhC","user":{"login":"Alizter","id":8614547,"node_id":"MDQ6VXNlcjg2MTQ1NDc=","avatar_url":"https://avatars.githubusercontent.com/u/8614547?v=4","gravatar_id":"","url":"https://api.github.com/users/Alizter","html_url":"https://github.com/Alizter","followers_url":"https://api.github.com/users/Alizter/followers","following_url":"https://api.github.com/users/Alizter/following{/other_user}","gists_url":"https://api.github.com/users/Alizter/gists{/gist_id}","starred_url":"https://api.github.com/users/Alizter/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Alizter/subscriptions","organizations_url":"https://api.github.com/users/Alizter/orgs","repos_url":"https://api.github.com/users/Alizter/repos","events_url":"https://api.github.com/users/Alizter/events{/privacy}","received_events_url":"https://api.github.com/users/Alizter/received_events","type":"User","site_admin":false},"created_at":"2022-01-10T19:42:43Z","updated_at":"2022-01-10T19:42:43Z","author_association":"CONTRIBUTOR","body":"So with primitive projections this becomes a definitional equality. But I guess we can keep this as a wish for an eta lemma without primitive projections. Here is a small example to demonstrate:\r\n```coq\r\nUnset Primitive Projections.\r\n\r\nModule A.\r\n  Record foobar := { foo : Set ; bar : Prop }.\r\n  Axiom fb : foobar.\r\n  Eval cbv in (Build_foobar (foo fb) (bar fb)).\r\n  (*      = {| foo := let (foo, _) := fb in foo; bar := let (_, bar) := fb in bar |}\r\n     : foobar\r\n *)\r\nEnd A.\r\n\r\nSet Primitive Projections.\r\n\r\nModule B.\r\n  Record foobar := { foo : Set ; bar : Prop }.\r\n  Axiom fb : foobar.\r\n  Eval cbv in (Build_foobar (foo fb) (bar fb)).\r\n  (*      = {| foo := foo fb; bar := bar fb |}\r\n     : foobar\r\n*)\r\nEnd B.\r\n```","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/1009281090/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]