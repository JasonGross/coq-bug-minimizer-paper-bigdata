[{"url":"https://api.github.com/repos/coq/coq/issues/comments/337530387","html_url":"https://github.com/coq/coq/issues/3990#issuecomment-337530387","issue_url":"https://api.github.com/repos/coq/coq/issues/3990","id":337530387,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUzMDM4Nw==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2015-02-03T18:00:56Z","updated_at":"2017-11-27T10:40:51Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\r\n\r\nThe current behavior of Coq is confusing, and makes working with multiple scopes a pain.  Here is some contrived code demonstrating the counter-intuitive behavior, with comments explaining what I expect.\r\n```coq\r\nInductive nat1 := O1 | S1 (_ : nat1).\r\nInductive nat2 := O2 | S2 (_ : nat2).\r\nAxiom add1 : nat1 -> nat1 -> nat1.\r\nAxiom add2 : nat2 -> nat2 -> nat2.\r\nAxiom conv12 : nat1 -> nat2.\r\nAxiom conv21 : nat2 -> nat1.\r\nDelimit Scope nat1_scope with nat1.\r\nDelimit Scope nat2_scope with nat2.\r\nBind Scope nat1_scope with nat1.\r\nBind Scope nat2_scope with nat2.\r\nNotation \"1\" := (S1 O1) : nat1_scope.\r\nNotation \"1\" := (S2 O2) : nat2_scope.\r\nNotation \"++++++\" := (O1) : nat1_scope.\r\nNotation \"a + b\" := (add1 a b) : nat1_scope.\r\nNotation \"a + b\" := (add2 a b) : nat2_scope.\r\nNotation \"a +F b\" := (add1 a%nat1 b%nat1) (at level 50, left associativity) : nat1_scope.\r\nNotation \"a +F b\" := (add2 a%nat1 b%nat1) (at level 50, left associativity) : nat2_scope.\r\n\r\n(** verify that bind scope worked *)\r\nCheck conv12 (1 : nat1).\r\nFail Check conv12 (1 : nat2).\r\nCheck conv21 (1 : nat2).\r\nFail Check conv21 (1 : nat1).\r\n(* all correct *)\r\n\r\n(** I expect that a bound argument scope will bring that scope to the\r\n    top for that argument; if [foo] has one argument with scope\r\n    [bar_scope] (delimited by [bar]), [foo x] should be equivalent to\r\n    [foo (x)%bar]. *)\r\n\r\n(** verify that bound scopes take precedence over explicit scopes above them *)\r\nCheck (conv12 1)%nat2.\r\nCheck (conv12 1 +F conv12 1)%nat2.\r\nCheck (conv12 1)%nat1.\r\nCheck (conv12 (conv21 (conv12 1) +F conv21 (conv12 1)))%nat2.\r\nCheck (conv12 (conv21 (conv12 1) +F conv21 (conv12 1)))%nat1.\r\n(** so far so good *)\r\nCheck (conv12 ((fun _ => 1) tt)%nat1). (* good *)\r\nFail Check (conv12 ((fun _ => 1) tt)). (* bad!  [1] should be interpreted in [nat1_scope] automatically *)\r\nCheck (conv12 ((fun _ => 1) tt +F (fun _ => 1) tt)). (* but if we use a notation that forces the scopes, things work... *)\r\nFail Check (conv12 ((fun _ => 1) tt + (fun _ => 1) tt)). (* ... but not if the notation assumes its scopes automatically *)\r\nCheck (conv12 (fst (1, tt)))%nat1. (* good *)\r\nFail Check conv12 (fst (1, tt)). (* bad!  [1] should be interpreted in [nat1_scope] automatically *)\r\n(** Furthermore, implicit scopes should be layered, and certainly should not be overwritten by empty scopes *)\r\nCheck (conv12 ++++++). (* good *)\r\nCheck (conv12 ++++++%nat1). (* good *)\r\nCheck (conv12 (++++++%nat2)%nat1). (* good *)\r\nCheck (conv12 (++++++%nat1)%nat2). (* good *)\r\nFail Check (conv21 (fst (1%nat2, ++++++))). (* bad! the [fst (_, _)] should not remove the implicit scopes above it! *)\r\n```\r\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337530387/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337530389","html_url":"https://github.com/coq/coq/issues/3990#issuecomment-337530389","issue_url":"https://api.github.com/repos/coq/coq/issues/3990","id":337530389,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUzMDM4OQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2015-02-03T18:18:59Z","updated_at":"2017-11-27T10:41:13Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\r\n\r\nSee https://github.com/HoTT/HoTT/pull/708, and, in particular, the remaining explicit `%equiv / %path` scopes in the diff for that, for a more realistic example of how this makes things more painful.  (Basically, I can think of ~no use to have a function argument have the scope-effect of \"remove all implicitly bound scopes\", while there are many uses for \"add this scope to the stack\".)\r\n\r\nIf there is worry about breaking backward compatibility, I'd be ok with a `Set Separate Implicit Scope Stack` (or similar) compatibility flag.\r\n\r\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337530389/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337530390","html_url":"https://github.com/coq/coq/issues/3990#issuecomment-337530390","issue_url":"https://api.github.com/repos/coq/coq/issues/3990","id":337530390,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUzMDM5MA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2015-02-13T12:36:15Z","updated_at":"2017-11-27T10:41:33Z","author_association":"CONTRIBUTOR","body":"Comment author: @charguer\r\n\r\nOn a related not, I have add the very confusing error:\r\n\r\n\"Error: P is here used in the empty scope stack while it was elsewhere used in scope heap_scope\"\r\n\r\n```coq\r\nDefinition heap_is_star (H1 H2 : hprop) : hprop := ...\r\nOpen Scope heap_scope.\r\nBind Scope heap_scope with hprop.\r\nDelimit Scope heap_scope with h.\r\nNotation \"P ==>+ Q\" := (pred_le P (heap_is_star P Q)) \r\n  (at level 55) : heap_scope_advanced.\r\n```\r\n \r\nwhich I could (finally) solve by adding (non-intuitive) explicit scopes:\r\n```coq\r\nNotation \"P ==>+ Q\" := (pred_le P%h (heap_is_star P Q)) \r\n  (at level 55) : heap_scope_advanced.\r\n```\r\n\r\nMaybe the change log should explain how to work around this kind of new errors, and explain why it is raised in the first place.\r\n\r\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337530390/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337530391","html_url":"https://github.com/coq/coq/issues/3990#issuecomment-337530391","issue_url":"https://api.github.com/repos/coq/coq/issues/3990","id":337530391,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUzMDM5MQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2015-02-13T19:32:45Z","updated_at":"2017-11-27T10:41:56Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\r\n\r\nArthur, that is unrelated.  Please open a separate bug report if you want that documented.  However, it is not a new error.  For reference, here is code that works in 8.4 but not trunk:\r\n```coq\r\nAxiom hprop : Type.\r\nAxiom heap_is_star : hprop -> hprop -> hprop.\r\nBind Scope heap_scope with hprop.\r\nOpen Scope heap_scope.\r\nDelimit Scope heap_scope with h.\r\nAxiom not_hprop : Type.\r\nAxiom pred_le : not_hprop -> hprop -> hprop.\r\nNotation \"P ==>+ Q\" := (pred_le P (heap_is_star P Q))\r\n  (at level 55) : heap_scope_advanced.\r\n```\r\nThe issue is that, in trunk, `Bind Scope` is retroactive.  This is a good thing, even if it causes backwards incompatibilities.  Here is code that fails with the relevant error message in both 8.4 and trunk:\r\n```coq\r\nAxiom hprop : Type.\r\nBind Scope heap_scope with hprop.\r\nAxiom heap_is_star : hprop -> hprop -> hprop.\r\nOpen Scope heap_scope.\r\nDelimit Scope heap_scope with h.\r\nAxiom not_hprop : Type.\r\nAxiom pred_le : not_hprop -> hprop -> hprop.\r\nNotation \"P ==>+ Q\" := (pred_le P (heap_is_star P Q))\r\n  (at level 55) : heap_scope_advanced.\r\n```\r\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337530391/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337530392","html_url":"https://github.com/coq/coq/issues/3990#issuecomment-337530392","issue_url":"https://api.github.com/repos/coq/coq/issues/3990","id":337530392,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUzMDM5Mg==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2015-12-10T13:55:19Z","updated_at":"2017-11-27T10:42:13Z","author_association":"CONTRIBUTOR","body":"Comment author: @andrew-appel\r\n\r\nMore \"Bind Scope\" problems; please advise me whether this is the same bug or whether I should file a separate bug report.  (This bug occurs in 8.4pl6, and presumably has been there forever).\r\n```coq\r\n(* Let \"eee\" be an expression with notation from scope s *)\r\n\r\nBind Scope s with t.\r\nDefinition force_t (x: t) := x.\r\n\r\nDefinition x : t := (...).   (* FAILS *)\r\nDefinition x := force_t (...).  (* succeeds *)\r\n```\r\nSo, the BUG (in my opinion) is that the type constraint\r\n(in the failing definition) should be sufficient to activate\r\nthe \"bind scope\", but it is not sufficient.\r\n-- A. Appel\r\n\r\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337530392/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337530393","html_url":"https://github.com/coq/coq/issues/3990#issuecomment-337530393","issue_url":"https://api.github.com/repos/coq/coq/issues/3990","id":337530393,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUzMDM5Mw==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2015-12-10T14:26:37Z","updated_at":"2017-10-18T09:49:42Z","author_association":"CONTRIBUTOR","body":"Comment author: @silene\n\nIt is a different bug. It is also fixed in 8.5. Please submit a fresh bug report if you have testcases that still fail.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337530393/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337530395","html_url":"https://github.com/coq/coq/issues/3990#issuecomment-337530395","issue_url":"https://api.github.com/repos/coq/coq/issues/3990","id":337530395,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUzMDM5NQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-10-28T12:20:18Z","updated_at":"2017-11-27T10:42:29Z","author_association":"CONTRIBUTOR","body":"Comment author: @jhjourdan\r\n\r\nI also encountered this problem with 8.5pl2 :\r\n```coq\r\nDelimit Scope scope with S.\r\n\r\nNotation \"#\" := 0 : scope.\r\n\r\nDefinition foo (n:nat) := n.\r\nArguments foo _%S.\r\nCheck (foo #).\r\n\r\nDefinition bar (n:nat -> nat) := n 0.\r\nArguments bar _%S.\r\nFail Check (bar (fun _ => #)).\r\nCheck (bar (fun _ => #)%S).\r\n```\r\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337530395/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337530396","html_url":"https://github.com/coq/coq/issues/3990#issuecomment-337530396","issue_url":"https://api.github.com/repos/coq/coq/issues/3990","id":337530396,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUzMDM5Ng==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-10-28T23:21:46Z","updated_at":"2017-10-18T09:49:43Z","author_association":"CONTRIBUTOR","body":"Comment author: @herbelin\n\nI had missed these multiple reports about scopes when they arrived. As far as I can summarize, there are 3 questions:\n\nAndrew's question is already solved in 8.5.\nArthur's question is answered by Jason.\nJason's and Jacques-Henri's questions are open.\n\nI'm missing experience myself to evaluate whether implicit scopes should open the scope only for the immediate subterm (as it is now) or if it should remain open for subterms of the immediate subterms too, so that it works when traversion a lambda, or a projection (and more generally any kind of term construct).\n\nI'm ready to provide an option to support this alternative behavior, with one exception: If I have a term in position of type, the scope type_scope is automatically open, but I don't think it is legitimate to keep it open for the subterms of the type, besides those subterms statically known as types, since these subterms have otherwise little chance to be types themselves (consider e.g. \"fun H : a*b=0 => ...\" where I don't want the \"*\" to be interpreted in type scope).\n\nA prototype with this feature is currently available at https://github.com/herbelin/github-coq/tree/v8.6+persistent-implicit-scopes with name \"Unset Immediate Only Implicit Scope\".\n\nIncidentally, that would certainly be useful to think eventually at a notion of scope aware of types, but that seems a more complex issue since unification would have then to be mixed with interpretation of notations.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337530396/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337530397","html_url":"https://github.com/coq/coq/issues/3990#issuecomment-337530397","issue_url":"https://api.github.com/repos/coq/coq/issues/3990","id":337530397,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUzMDM5Nw==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-11-02T09:17:00Z","updated_at":"2017-10-18T09:49:43Z","author_association":"CONTRIBUTOR","body":"Comment author: @jhjourdan\n\nComing back to your example \"fun H : a*b=0 => ...\", my intuition would say that what should be done is making the parameters of eq have their scope bound to C_scope, so that a*b is not interpreted in type_scope.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337530397/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337530398","html_url":"https://github.com/coq/coq/issues/3990#issuecomment-337530398","issue_url":"https://api.github.com/repos/coq/coq/issues/3990","id":337530398,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUzMDM5OA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-11-02T12:02:43Z","updated_at":"2017-10-18T09:49:43Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nWhat is C_scope, and why should equality activate it?\n\nHugo, I think a more generic solution would be to have a specific modifier that means \"pop the top of the scope stack if it's X\", and then bind this \"untype_scope\" for eq and JMeq.  Can you think of any other combinators that deserve this behavior?\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337530398/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]