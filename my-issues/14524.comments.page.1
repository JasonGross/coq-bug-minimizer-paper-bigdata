[{"url":"https://api.github.com/repos/coq/coq/issues/comments/864180837","html_url":"https://github.com/coq/coq/issues/14524#issuecomment-864180837","issue_url":"https://api.github.com/repos/coq/coq/issues/14524","id":864180837,"node_id":"MDEyOklzc3VlQ29tbWVudDg2NDE4MDgzNw==","user":{"login":"Alizter","id":8614547,"node_id":"MDQ6VXNlcjg2MTQ1NDc=","avatar_url":"https://avatars.githubusercontent.com/u/8614547?v=4","gravatar_id":"","url":"https://api.github.com/users/Alizter","html_url":"https://github.com/Alizter","followers_url":"https://api.github.com/users/Alizter/followers","following_url":"https://api.github.com/users/Alizter/following{/other_user}","gists_url":"https://api.github.com/users/Alizter/gists{/gist_id}","starred_url":"https://api.github.com/users/Alizter/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Alizter/subscriptions","organizations_url":"https://api.github.com/users/Alizter/orgs","repos_url":"https://api.github.com/users/Alizter/repos","events_url":"https://api.github.com/users/Alizter/events{/privacy}","received_events_url":"https://api.github.com/users/Alizter/received_events","type":"User","site_admin":false},"created_at":"2021-06-18T17:27:52Z","updated_at":"2021-06-18T17:28:05Z","author_association":"CONTRIBUTOR","body":"There are quite a few vernac commands that are not highlighted. For example: \r\n * `Universe` is but `Universes` isn't.\r\n * `Generalizable Variable(s)`.\r\n * `Scheme`\r\n * `Existing Instances`\r\n * Weirdly formatting `Require Imports`. (Together with `From` also)\r\n * Anything with `Cumulative`.\r\n\r\nAnd so on.\r\n\r\nI wonder if there is a systematic way to detect syntax that doesn't have highlighting support.\r\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/864180837/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/864190855","html_url":"https://github.com/coq/coq/issues/14524#issuecomment-864190855","issue_url":"https://api.github.com/repos/coq/coq/issues/14524","id":864190855,"node_id":"MDEyOklzc3VlQ29tbWVudDg2NDE5MDg1NQ==","user":{"login":"JasonGross","id":396076,"node_id":"MDQ6VXNlcjM5NjA3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/396076?v=4","gravatar_id":"","url":"https://api.github.com/users/JasonGross","html_url":"https://github.com/JasonGross","followers_url":"https://api.github.com/users/JasonGross/followers","following_url":"https://api.github.com/users/JasonGross/following{/other_user}","gists_url":"https://api.github.com/users/JasonGross/gists{/gist_id}","starred_url":"https://api.github.com/users/JasonGross/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JasonGross/subscriptions","organizations_url":"https://api.github.com/users/JasonGross/orgs","repos_url":"https://api.github.com/users/JasonGross/repos","events_url":"https://api.github.com/users/JasonGross/events{/privacy}","received_events_url":"https://api.github.com/users/JasonGross/received_events","type":"User","site_admin":false},"created_at":"2021-06-18T17:50:34Z","updated_at":"2021-06-18T17:50:34Z","author_association":"MEMBER","body":"Presumably the list that has support is at\r\nhttps://github.com/coq/coq/blob/97f093250f9ca19822d68aa191177db43fc880f1/ide/coqide/coq_commands.ml#L11-L227\r\n\r\nThe full list is probably something like\r\nhttps://github.com/coq/coq/blob/d05e359713eec269948804d5b0eb58874aca5447/doc/tools/docgram/fullGrammar#L494-L710\r\nand\r\nhttps://github.com/coq/coq/blob/d05e359713eec269948804d5b0eb58874aca5447/doc/tools/docgram/fullGrammar#L790-L797\r\n\r\nI wonder if @jfehrle has a tool that's the equivalent of `Eval cbv [<nonterminal list>] in nonterminal` to inline relevant productions so we can see what the possible prefix strings are","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/864190855/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/864355965","html_url":"https://github.com/coq/coq/issues/14524#issuecomment-864355965","issue_url":"https://api.github.com/repos/coq/coq/issues/14524","id":864355965,"node_id":"MDEyOklzc3VlQ29tbWVudDg2NDM1NTk2NQ==","user":{"login":"jfehrle","id":1253341,"node_id":"MDQ6VXNlcjEyNTMzNDE=","avatar_url":"https://avatars.githubusercontent.com/u/1253341?v=4","gravatar_id":"","url":"https://api.github.com/users/jfehrle","html_url":"https://github.com/jfehrle","followers_url":"https://api.github.com/users/jfehrle/followers","following_url":"https://api.github.com/users/jfehrle/following{/other_user}","gists_url":"https://api.github.com/users/jfehrle/gists{/gist_id}","starred_url":"https://api.github.com/users/jfehrle/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jfehrle/subscriptions","organizations_url":"https://api.github.com/users/jfehrle/orgs","repos_url":"https://api.github.com/users/jfehrle/repos","events_url":"https://api.github.com/users/jfehrle/events{/privacy}","received_events_url":"https://api.github.com/users/jfehrle/received_events","type":"User","site_admin":false},"created_at":"2021-06-19T04:59:00Z","updated_at":"2021-06-19T04:59:00Z","author_association":"CONTRIBUTOR","body":"The list in `coq_commands.ml` is used to populate the Templates menu.  (Which, FWIW, doesn't seem too useful--I'd be interested in hearing from those feel otherwise.)\r\n\r\nCoq highlighting is done by the `GSourceView3` package.  `coq.lang` defines the highlighting in XML form using colors defined in `coq_style.xml`.  A cursory examination suggests that it is fairly powerful.  See the [tutorial](https://developer.gnome.org/gtksourceview/stable/lang-tutorial.html) and [reference manual](https://developer.gnome.org/gtksourceview/stable/lang-reference.html).\r\n\r\nPerhaps it's possible to generate some or all of this information automatically from the info `doc_grammar` has.  That would be a bit of a project.  It may be possible to improve it significantly by hand without too much trouble (e.g. add `<keyword>Declare</keyword>` just before `<keyword>Delimit</keyword>` for your example).\r\n\r\nAs for the raw information, if you run `make doc_gram_rsts` locally, it creates two files `prodnCommands` and `prodnTactics` that give the syntax of all commands and tactics (including a very few Ltac-defined tactics) in alpha order.  Lines with no prefix are documented, lines with a `-` prefix are undocumented, lines with `+` are documented but don't exist in the code.  Including a few that don't begin with literal strings.  I generated these to facilitate updating the documentation.  `doc/tools/docgram/README.md` explains the tool.\r\n\r\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/864355965/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]