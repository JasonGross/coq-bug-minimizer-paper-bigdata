[{"url":"https://api.github.com/repos/coq/coq/issues/comments/337550345","html_url":"https://github.com/coq/coq/issues/5288#issuecomment-337550345","issue_url":"https://api.github.com/repos/coq/coq/issues/5288","id":337550345,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU1MDM0NQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-12-22T19:56:30Z","updated_at":"2017-10-18T10:51:13Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nCoInductive Inf := S (_ : Inf).\nDefinition expand_Inf (x : Inf) := match x with S x' => S x' end.\nLemma expand_Inf_eq x : x = expand_Inf x.\nProof. destruct x; reflexivity. Defined.  \nCoFixpoint inf := S inf.\nInductive Inf_eq x := make (pf : x = S x).\nDefinition have : Inf_eq inf := make _ (expand_Inf_eq inf).\nDefinition lost := Eval cbv in have. (* Error: Illegal application: \nThe term \"make\" of type \"forall x : Inf, x = S x -> Inf_eq x\"\ncannot be applied to the terms\n \"cofix inf  : Inf := S inf\" : \"Inf\"\n \"eq_refl\" : \"S (cofix inf  : Inf := S inf) = S (cofix inf  : Inf := S inf)\"\nThe 2nd term has type \"S (cofix inf  : Inf := S inf) = S (cofix inf  : Inf := S \ninf)\"\nwhich should be coercible to \"(cofix inf  : Inf := S inf) = S (cofix inf  : Inf \n:= S inf)\". *)\n\nExample modified from https://coq.inria.fr/files/coq5-slides-sacchini.pdf\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337550345/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337550346","html_url":"https://github.com/coq/coq/issues/5288#issuecomment-337550346","issue_url":"https://api.github.com/repos/coq/coq/issues/5288","id":337550346,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU1MDM0Ng==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2017-01-05T12:57:59Z","updated_at":"2017-10-18T10:51:13Z","author_association":"CONTRIBUTOR","body":"Comment author: @ppedrot\n\nThere is a simple solution for this one, but which is going to break retro-compatibility. Simply put, never use the constructor-based form for coinductive datatypes, but rather use the primitive projection one. That is, write:\n\nSet Primitive Projections.\nCoInductive Inf := { S : Inf }.\n\nThis is the copattern-style which is the only one semantically correct (i.e. coinductive types are negative, not positive), and this will prevent subject reduction failure.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337550346/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337550347","html_url":"https://github.com/coq/coq/issues/5288#issuecomment-337550347","issue_url":"https://api.github.com/repos/coq/coq/issues/5288","id":337550347,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU1MDM0Nw==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2017-01-05T13:57:12Z","updated_at":"2017-10-18T10:51:13Z","author_association":"CONTRIBUTOR","body":"Comment author: @silene\n\nGiven that cbv does not work properly with primitive projections and coinductive records (see bug [BZ#5286](https://github.com/coq/coq/issues?q=is%3Aissue%20%22Original%20bug%20ID%3A%20BZ%235286%22)), I am not convinced the solution you suggest is that simple.\n\nCoInductive Inf := S { projS : Inf }.\nDefinition expand_Inf (x : Inf) := S (projS x).\nLemma expand_Inf_eq x : x = expand_Inf x.\nProof. destruct x; reflexivity. Defined.\nCoFixpoint inf := S inf.\nInductive Inf_eq x := make (pf : x = S x).\nDefinition have : Inf_eq inf := make _ (expand_Inf_eq inf).\nDefinition lost := Eval cbv in have.\n\nError: Illegal application: \nThe term \"make\" of type \"forall x : Inf, x = {| projS := x |} -> Inf_eq x\"\ncannot be applied to the terms\n \"cofix inf  : Inf := {| projS := inf |}\" : \"Inf\"\n \"eq_refl\"\n   : \"{| projS := cofix inf  : Inf := {| projS := inf |} |} =\n      {| projS := cofix inf  : Inf := {| projS := inf |} |}\"\nThe 2nd term has type\n \"{| projS := cofix inf  : Inf := {| projS := inf |} |} =\n  {| projS := cofix inf  : Inf := {| projS := inf |} |}\"\nwhich should be coercible to\n \"(cofix inf  : Inf := {| projS := inf |}) =\n  {| projS := cofix inf  : Inf := {| projS := inf |} |}\".\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337550347/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337550348","html_url":"https://github.com/coq/coq/issues/5288#issuecomment-337550348","issue_url":"https://api.github.com/repos/coq/coq/issues/5288","id":337550348,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU1MDM0OA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2017-01-05T14:09:45Z","updated_at":"2017-10-18T10:51:13Z","author_association":"CONTRIBUTOR","body":"Comment author: @ppedrot\n\nThat's a bug of cbv, not a foundational issue. By opposition, the loss of subject reduction *in the kernel* is due to a fundamental mishandling of coinductive types in CIC.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337550348/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337550349","html_url":"https://github.com/coq/coq/issues/5288#issuecomment-337550349","issue_url":"https://api.github.com/repos/coq/coq/issues/5288","id":337550349,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU1MDM0OQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2017-01-05T17:21:19Z","updated_at":"2017-10-18T10:51:13Z","author_association":"CONTRIBUTOR","body":"Comment author: @silene\n\nI never meant to say that this was not a bug in cbv. I just wanted to point out that, given that developers got it wrong for all three of cbv, vm_compute, and native_compute, this is not as simple as you make it sound (and certainly not possible currently).\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337550349/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337550350","html_url":"https://github.com/coq/coq/issues/5288#issuecomment-337550350","issue_url":"https://api.github.com/repos/coq/coq/issues/5288","id":337550350,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU1MDM1MA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2017-01-05T18:31:53Z","updated_at":"2017-10-18T10:51:13Z","author_association":"CONTRIBUTOR","body":"Comment author: @herbelin\n\n@ PMP: Do I understand correctly that your view is that the problem behind the lost of subject reduction for coinductive types in CIC (whether one uses cbv, cbn, or whatever reduction strategy for CIC, or simply the conversion algorithm) is eta-expansion (surjective pairing) for coinductive types (and indirectly dependent pattern-matching, since dependent pattern-matching can be obtained from non-dependent pattern-matching using eta)?\n\n@ Guillaume: If you add the \"Set Primitive Projections\" in your example, you cannot indeed prove \"x = expand_Inf x\" anymore and the problem disappears (in 8.6).\n\n@ PMP: Do you intend then that \"x = expand_Inf x\" should not be provable?\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337550350/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337550352","html_url":"https://github.com/coq/coq/issues/5288#issuecomment-337550352","issue_url":"https://api.github.com/repos/coq/coq/issues/5288","id":337550352,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU1MDM1Mg==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2017-01-05T18:33:28Z","updated_at":"2017-10-18T10:51:13Z","author_association":"CONTRIBUTOR","body":"Comment author: @ppedrot\n\n(In reply to Hugo Herbelin from comment [BZ#5](https://github.com/coq/coq/issues?q=is%3Aissue%20%22Original%20bug%20ID%3A%20BZ%235%22))\n> @ PMP: Do I understand correctly that your view is that the problem behind\n> the lost of subject reduction for coinductive types in CIC (whether one uses\n> cbv, cbn, or whatever reduction strategy for CIC, or simply the conversion\n> algorithm) is eta-expansion (surjective pairing) for coinductive types (and\n> indirectly dependent pattern-matching, since dependent pattern-matching can\n> be obtained from non-dependent pattern-matching using eta)?\n\nYes.\n\n> @ PMP: Do you intend then that \"x = expand_Inf x\" should not be provable?\n\nYes, mistaking equality for bisimilarity is the root of all evil (©).\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337550352/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337550353","html_url":"https://github.com/coq/coq/issues/5288#issuecomment-337550353","issue_url":"https://api.github.com/repos/coq/coq/issues/5288","id":337550353,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU1MDM1Mw==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2017-01-05T19:03:18Z","updated_at":"2017-10-18T10:51:14Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\n> > @ PMP: Do you intend then that \"x = expand_Inf x\" should not be provable?\n> Yes, mistaking equality for bisimilarity is the root of all evil (©).\n\nWhat?  Really?  Shouldn't there be some sort of co-univalence that lets you identify bisimilarity and equality?  And it seems a bit strange to me to say that we shouldn't be able to prove that [forall x y, projS x = projS y -> x = y]...\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337550353/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337550354","html_url":"https://github.com/coq/coq/issues/5288#issuecomment-337550354","issue_url":"https://api.github.com/repos/coq/coq/issues/5288","id":337550354,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU1MDM1NA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2017-01-05T19:53:49Z","updated_at":"2017-10-18T10:51:14Z","author_association":"CONTRIBUTOR","body":"Comment author: @ppedrot\n\n(In reply to Jason Gross from comment [BZ#7](https://github.com/coq/coq/issues?q=is%3Aissue%20%22Original%20bug%20ID%3A%20BZ%237%22))\n> What?  Really?  Shouldn't there be some sort of co-univalence that lets you\n> identify bisimilarity and equality?\n\nThat might be a consequence of univalence, even though I'm unsure about this. In any case, it is valid, because there is no way to observe this in the theory, but it's not going to compute how you expect it to (otherwise that would break subject reduction). Maybe parametricity would help here.\n\n> And it seems a bit strange to me to say that we shouldn't be able to prove\n> that [forall x y, projS x = projS y -> x = y]...\n\nIn our latest paper, we provide a syntactic model that readily negates this theorem (https://www.pédrot.fr/articles/cpp2017.pdf, section IV).\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337550354/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/398882361","html_url":"https://github.com/coq/coq/issues/5288#issuecomment-398882361","issue_url":"https://api.github.com/repos/coq/coq/issues/5288","id":398882361,"node_id":"MDEyOklzc3VlQ29tbWVudDM5ODg4MjM2MQ==","user":{"login":"ppedrot","id":1202327,"node_id":"MDQ6VXNlcjEyMDIzMjc=","avatar_url":"https://avatars.githubusercontent.com/u/1202327?v=4","gravatar_id":"","url":"https://api.github.com/users/ppedrot","html_url":"https://github.com/ppedrot","followers_url":"https://api.github.com/users/ppedrot/followers","following_url":"https://api.github.com/users/ppedrot/following{/other_user}","gists_url":"https://api.github.com/users/ppedrot/gists{/gist_id}","starred_url":"https://api.github.com/users/ppedrot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ppedrot/subscriptions","organizations_url":"https://api.github.com/users/ppedrot/orgs","repos_url":"https://api.github.com/users/ppedrot/repos","events_url":"https://api.github.com/users/ppedrot/events{/privacy}","received_events_url":"https://api.github.com/users/ppedrot/received_events","type":"User","site_admin":false},"created_at":"2018-06-20T20:16:36Z","updated_at":"2018-06-20T20:16:36Z","author_association":"MEMBER","body":"Let's close this as a duplicate of #6768.","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/398882361/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/398888534","html_url":"https://github.com/coq/coq/issues/5288#issuecomment-398888534","issue_url":"https://api.github.com/repos/coq/coq/issues/5288","id":398888534,"node_id":"MDEyOklzc3VlQ29tbWVudDM5ODg4ODUzNA==","user":{"login":"JasonGross","id":396076,"node_id":"MDQ6VXNlcjM5NjA3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/396076?v=4","gravatar_id":"","url":"https://api.github.com/users/JasonGross","html_url":"https://github.com/JasonGross","followers_url":"https://api.github.com/users/JasonGross/followers","following_url":"https://api.github.com/users/JasonGross/following{/other_user}","gists_url":"https://api.github.com/users/JasonGross/gists{/gist_id}","starred_url":"https://api.github.com/users/JasonGross/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JasonGross/subscriptions","organizations_url":"https://api.github.com/users/JasonGross/orgs","repos_url":"https://api.github.com/users/JasonGross/repos","events_url":"https://api.github.com/users/JasonGross/events{/privacy}","received_events_url":"https://api.github.com/users/JasonGross/received_events","type":"User","site_admin":false},"created_at":"2018-06-20T20:38:12Z","updated_at":"2018-06-20T20:38:41Z","author_association":"MEMBER","body":"Duplicate of #6768","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/398888534/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/398888807","html_url":"https://github.com/coq/coq/issues/5288#issuecomment-398888807","issue_url":"https://api.github.com/repos/coq/coq/issues/5288","id":398888807,"node_id":"MDEyOklzc3VlQ29tbWVudDM5ODg4ODgwNw==","user":{"login":"JasonGross","id":396076,"node_id":"MDQ6VXNlcjM5NjA3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/396076?v=4","gravatar_id":"","url":"https://api.github.com/users/JasonGross","html_url":"https://github.com/JasonGross","followers_url":"https://api.github.com/users/JasonGross/followers","following_url":"https://api.github.com/users/JasonGross/following{/other_user}","gists_url":"https://api.github.com/users/JasonGross/gists{/gist_id}","starred_url":"https://api.github.com/users/JasonGross/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JasonGross/subscriptions","organizations_url":"https://api.github.com/users/JasonGross/orgs","repos_url":"https://api.github.com/users/JasonGross/repos","events_url":"https://api.github.com/users/JasonGross/events{/privacy}","received_events_url":"https://api.github.com/users/JasonGross/received_events","type":"User","site_admin":false},"created_at":"2018-06-20T20:39:09Z","updated_at":"2018-06-20T20:39:09Z","author_association":"MEMBER","body":"Apparently it needs a comment whose contents is just \"Duplicate of #nnnn\" for GitHub to register duplication.","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/398888807/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]