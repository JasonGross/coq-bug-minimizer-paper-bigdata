Somebody broke my toy :( . (most likely it's been built broken)

Does it happen without `vm_cast_no_check` as well?

This message comes from `Pfedit`. And IÂ have no idea why `Derive` even goes through `Pfedit` :-/ .
No, `vm_cast_no_check` is fine.  Note that it also breaks with
```coq
Require Import Coq.derive.Derive.
Require Import Coq.Compat.AdmitAxiom.

Derive f SuchThat (f = 1 + 1) As feq.
Proof.
  transitivity 2.
  2:admit.
```

The anomaly with `abstract` is already present in 8.5beta1, and the derive plugin does not seem to be present in 8.4pl6...
It is probably `abstract` that goes through `Pfedit`, not Derive, and probably Derive is the only thing that opens two proof statements at once?  The backtrace on 8.7.1 with `-debug` is 
```
Error: Anomaly "in Pfedit.current_proof_statement: more than one statement."
Please report at http://coq.inria.fr/bugs/.
frame @ file "toplevel/coqloop.ml", line 307, characters 4-59
raise @ file "lib/exninfo.ml", line 63, characters 8-15
frame @ file "str.ml", line 253, characters 6-29
raise @ file "map.ml", line 117, characters 16-25
frame @ file "stm/stm.ml", line 2363, characters 4-48
frame @ file "stm/stm.ml", line 2329, characters 4-100
raise @ file "lib/exninfo.ml", line 63, characters 8-15
frame @ file "stm/stm.ml", line 832, characters 6-10
frame @ file "stm/stm.ml", line 2204, characters 12-118
raise @ unknown
frame @ file "stm/stm.ml", line 2148, characters 10-14
raise @ file "lib/exninfo.ml", line 63, characters 8-15
frame @ file "stm/stm.ml", line 975, characters 8-81
raise @ file "lib/exninfo.ml", line 63, characters 8-15
frame @ file "lib/flags.ml", line 30, characters 14-17
raise @ unknown
frame @ file "vernac/vernacentries.ml", line 2200, characters 10-389
frame @ file "lib/flags.ml", line 141, characters 20-44
raise @ file "lib/exninfo.ml", line 63, characters 8-15
frame @ file "lib/flags.ml", line 30, characters 14-17
raise @ file "lib/exninfo.ml", line 63, characters 8-15
frame @ file "vernac/vernacinterp.ml", line 69, characters 4-10
frame @ file "plugins/ltac/g_ltac.ml4", line 379, characters 15-536
frame @ file "proofs/proof_global.ml", line 164, characters 24-36
frame @ file "plugins/ltac/g_ltac.ml4", line 384, characters 6-82
raise @ unknown
frame @ file "proofs/pfedit.ml", line 113, characters 28-67
frame @ file "proofs/proof.ml", line 351, characters 4-30
frame @ file "engine/proofview.ml", line 217, characters 12-42
raise @ unknown
frame @ file "engine/logic_monad.ml", line 114, characters 8-12
raise @ unknown
frame @ file "engine/logic_monad.ml", line 257, characters 6-27
frame @ file "engine/logic_monad.ml", line 189, characters 38-43
raise @ unknown
frame @ file "engine/proofview.ml", line 1072, characters 10-34
frame @ file "engine/proofview.ml", line 1067, characters 40-46
frame @ file "tactics/tactics.ml", line 5042, characters 9-60
raise @ unknown
frame @ file "tactics/tactics.ml", line 5036, characters 23-56
raise @ file "lib/loc.ml", line 73, characters 22-23
```
Ahaha, this is because `abstract` wants to name its lemma `<current proof name>_subproof`, and this raises an anomaly if two proofs are "current":
https://github.com/coq/coq/blob/588a81cfadf66ea9bac230f03ca0e27db3ddf1fa/tactics/tactics.ml#L5027-L5044
Right. This doesn't sound terribly hard to fix. Let's just take the first open thingy as the name instead of requiring that there is only one.
Great!  Shall I expect a PR from you fixing this soon?  (Or are you wanting me to make one?)
