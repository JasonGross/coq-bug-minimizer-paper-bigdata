[{"url":"https://api.github.com/repos/coq/coq/issues/comments/337523827","html_url":"https://github.com/coq/coq/issues/3597#issuecomment-337523827","issue_url":"https://api.github.com/repos/coq/coq/issues/3597","id":337523827,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyMzgyNw==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-09-08T19:40:47Z","updated_at":"2017-10-18T09:30:39Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nSorry ask for the compatibility mode to be even more complicated, but\n\nSet Primitive Projections.\nRecord bar {A : Type} := { bx : forall {x : Set}, Set }.\nGoal let k := (@ bx Set (@ Build_bar Set (fun _ => nat)) nat) in True.\ncbv beta delta [bx].\nSet Printing All.\n(* Goal is:\nlet k := @ bx (Build_bar Set (fun _ : Set => nat)) nat in True *)\nassert (let k := @ bx (Build_bar Set (fun _ : Set => nat)) nat in True). (* Toplevel input, characters 29-63:\nError:\nThe term \"Build_bar Set (fun _ : Set => nat)\" has type\n\"@ bar Set\" while it is expected to have type \"Type\". *)\n\n\nPerhaps [Set Printing All]/[Set Printing Implicit] on primitive projections should use named arguments / the (foo := bar) syntax?\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337523827/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337523830","html_url":"https://github.com/coq/coq/issues/3597#issuecomment-337523830","issue_url":"https://api.github.com/repos/coq/coq/issues/3597","id":337523830,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyMzgzMA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-09-09T20:58:10Z","updated_at":"2017-10-18T09:30:39Z","author_association":"CONTRIBUTOR","body":"Comment author: @mattam82\n\nWell, not in Set Printing All mode... I fixed it. Now for primitive projection p, r.(p) and r.(@ p) are reserved for the primitive projection, the first for the \"implicit version\" and the second for the explicit version (all of this according to the implicits of the record field, ignoring parameters). The hackish part of the compatibility mode is just for the special case of \"p r\" really. Now Set Printing All or not, you should get you reparseable terms (not exactly though, I found a bug in the externalisation code on the way).\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337523830/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]