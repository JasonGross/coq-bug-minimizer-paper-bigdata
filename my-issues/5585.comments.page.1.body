Comment author: @JasonGross

I'd like this to work:
```coq

Section with_state.
  (** TODO: MOVE ME *)
  Local Notation "'return' x" := (fun {T} (continuation:_->T) => continuation
                                                                   x) (at level 
70).
  Local Notation "~> R" := (forall {T} (_:R->T), T) (at level 70).
  Local Notation "A ~> R" := (forall (_:A) {T} (_:R->T), T) (at level 99).

  Context {state : Type}.

  Definition loop_cps_step
             (loop_cps
              : forall (max_iter : nat)
                       (initial : state)
                       (body : state -> forall {T} (continue : state -> T)
                                               (break : state -> T), T),
                 ~> state)
             (max_iter : nat)
    : forall (initial : state)
             (body : state -> forall {T} (continue : state -> T) (break : state
                                                                          -> 
T), T),
      ~> state
    := fun st body
       => match max_iter with
          | 0
            => (return st)
          | S max_iter'
            => fun T ret
               => body st T (fun st' => @ loop_cps max_iter' st' body _ ret) ret
          end.

  Fixpoint loop_cps (max_iter : nat)
    : forall (initial : state)
             (body : state -> forall {T} (continue : state -> T) (break : state
                                                                          -> 
T), T),
      ~> state
    := loop_cps_step loop_cps max_iter.
End with_state.

Notation "'loop' _{ fuel } ( state = initial ) 'via' ( continue , break ) {{ 
body }} ; rest"
  := (@ loop_cps _ fuel initial
                (fun state T continue break => body)
                _ (fun state => rest))
       (at level 200, state binder, rest at level 10,
        format "'[v  ' 'loop' _{ fuel }  ( state  =  initial )  'via'  ( 
continue ,  break )  {{ '//' body ']' '//' }} ; '//' rest").

Check loop _{ 10 } ('(a, b) = (0, 0)) via (continue, break) {{ continue (a + 1, 
b+1) }} ; a + b.

```

Comment author: @tchajed

+1 for this feature request; I also have a recursive binder in a notation that only type checks if there's one binding so that I can support patterns in binders.


Granted in #982.
