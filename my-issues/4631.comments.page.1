[{"url":"https://api.github.com/repos/coq/coq/issues/comments/337541042","html_url":"https://github.com/coq/coq/issues/4631#issuecomment-337541042","issue_url":"https://api.github.com/repos/coq/coq/issues/4631","id":337541042,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0MTA0Mg==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-03-20T16:33:49Z","updated_at":"2018-12-02T15:09:08Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\r\n\r\nSometimes when I use [refine] to switch the order of arguments, Coq 8.5 stack overflows.\r\n```coq\r\n(* -*- mode: coq; coq-prog-args: (\"-emacs\" \"-R\" \".\" \"Fiat\" \"-top\" \"IndexedAndAtMostOneNonTerminalReflective\") -*- *)\r\n(* File reduced by coq-bug-finder from original input, then from 1373 lines to 16 lines *)\r\n(* coqc version 8.5 (March 2016) compiled on Mar 20 2016 12:6:5 with OCaml 4.02.3\r\n   coqtop version jgross-Leopard-WS:/home/jgross/Downloads/coq/coq-v8.5,v8.5 (09c2011fbdbb2ac1ce33e5abe52d93b907b21a3c) *)\r\nRequire Coq.Sets.Ensembles.\r\n\r\nGoal forall (T : Type) (computes_to'' : Ensembles.Ensemble T -> T -> Prop) (U : Set) (v : T * U)\r\n            (bind : Ensembles.Ensemble T -> (T -> Ensembles.Ensemble (T * U)) -> Ensembles.Ensemble (T * U))\r\n            (computes_to' : Ensembles.Ensemble (T * U) -> T * U -> Prop),\r\n    (forall (ca : Ensembles.Ensemble T) (f : T -> Ensembles.Ensemble (T * U)) (a : T) (b : T * U),\r\n        computes_to'' ca a -> computes_to' (f a) b -> computes_to' (bind ca f) b) ->\r\n    exists k : T * U, computes_to' (bind (fun r_n : T => fst k = r_n) (fun r_n' : T => Ensembles.Singleton (T * U) (r_n', snd k))) v.\r\n  intros ?????? bind_computes.\r\n  eexists.\r\n  Timeout 1 match goal with\r\n            | [ |- computes_to' (bind _ _) _ ]\r\n              => refine ((fun H0 H1 => bind_computes _ _ _ _ H1 H0) _ _)\r\n            end.\r\n```","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337541042/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337541043","html_url":"https://github.com/coq/coq/issues/4631#issuecomment-337541043","issue_url":"https://api.github.com/repos/coq/coq/issues/4631","id":337541043,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0MTA0Mw==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-03-20T16:58:32Z","updated_at":"2018-12-02T15:08:55Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\r\n\r\nSlightly simpler version:\r\n```coq\r\n(* -*- mode: coq; coq-prog-args: (\"-emacs\" \"-nois\") -*- *)\r\n(* File reduced by coq-bug-finder from original input, then from 1373 lines to 16 lines *)\r\n(* coqc version 8.5 (March 2016) compiled on Mar 20 2016 12:6:5 with OCaml 4.02.3\r\n   coqtop version jgross-Leopard-WS:/home/jgross/Downloads/coq/coq-v8.5,v8.5 (09c2011fbdbb2ac1ce33e5abe52d93b907b21a3c) *)\r\nRequire Import Coq.Init.Notations.\r\nNotation \"A -> B\" := (forall (_ : A), B) : type_scope.\r\n\r\nInductive ex {A:Type} (P:A -> Prop) : Prop :=\r\n  ex_intro : forall x:A, P x -> ex (A:=A) P.\r\n\r\nGoal forall (T : Type) (computes_to'' : (T -> Prop) -> T -> Prop) (v : T) (bind : (T -> Prop) -> (T -> T -> Prop) -> T -> Prop)\r\n            (computes_to' : (T -> Prop) -> T -> Prop) (R : T -> T -> Prop),\r\n    (forall (ca : T -> Prop) (f : T -> T -> Prop) (a b : T), computes_to'' ca a -> computes_to' (f a) b -> computes_to' (bind ca f) b) ->\r\n    ex (fun k : T => computes_to' (bind (fun r_n : T => R k r_n) (fun r_n' _ : T => R k r_n')) v).\r\n  intros ?????? bind_computes.\r\n  eexists.\r\n  Timeout 1 match goal with\r\n            | [ |- computes_to' (bind _ _) _ ]\r\n              => refine ((fun H0 H1 => bind_computes _ _ _ _ H1 H0) _ _)\r\n            end\r\n```","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337541043/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337541044","html_url":"https://github.com/coq/coq/issues/4631#issuecomment-337541044","issue_url":"https://api.github.com/repos/coq/coq/issues/4631","id":337541044,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0MTA0NA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-03-20T17:43:51Z","updated_at":"2018-12-02T15:09:29Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\r\n\r\nMy coq-bisect script (https://github.com/JasonGross/coq-bisect) says:\r\n```\r\n259ec71685cf2180403e35acea32cb42ba6b761b is the first bad commit\r\ncommit 259ec71685cf2180403e35acea32cb42ba6b761b\r\nAuthor: Pierre-Marie PÃ©drot <pierre-marie.pedrot@ inria.fr>\r\nDate:   Fri May 23 18:41:47 2014 +0200\r\n\r\n    The tactic interpreter now uses a new type of tactics, through\r\n    the GTac module. A ['a Gtac.t] is a special case of tactic that\r\n    may depend on the current goals, or not. Internally, it construct\r\n    a list of results, one for each focussed goal, if the tactic is\r\n    actually dependent.\r\n\r\n    This allows for an interpretation of whole-goal tactic that does\r\n    work, which was not the case for the previous implementation,\r\n    which did to many Proofview.Goal.enter.\r\n\r\n:040000 040000 2a5297ce861f1c8cc938a744e38c5db0686b8d79 e7ed7cdb96c329972b1bfaad98836374e717e455 M      proofs\r\n:040000 040000 05df646440fd521ca0e48756416e0f0314ef44bb e747be44d6816f5aac5b68623599f30dc7bcf2bc M      tactics\r\n```","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337541044/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337541045","html_url":"https://github.com/coq/coq/issues/4631#issuecomment-337541045","issue_url":"https://api.github.com/repos/coq/coq/issues/4631","id":337541045,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0MTA0NQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-03-22T22:00:22Z","updated_at":"2017-10-18T10:21:05Z","author_association":"CONTRIBUTOR","body":"Comment author: @ppedrot\n\nIt looks like there is a cycle in the evar dependency of the term created by the refine tactic, leading to the stack overflow.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337541045/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337541046","html_url":"https://github.com/coq/coq/issues/4631#issuecomment-337541046","issue_url":"https://api.github.com/repos/coq/coq/issues/4631","id":337541046,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0MTA0Ng==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-03-22T22:20:03Z","updated_at":"2018-12-02T15:09:53Z","author_association":"CONTRIBUTOR","body":"Comment author: @ppedrot\r\n\r\nOK, I think I found the error. The `Evarutil.occur_evar_upto` function does not do what it claims. If an evar is undefined, it simply ignores its arguments for the occurs check. Fixing this bug makes your example fail. Was that the expected behaviour?\r\n\r\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337541046/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337541047","html_url":"https://github.com/coq/coq/issues/4631#issuecomment-337541047","issue_url":"https://api.github.com/repos/coq/coq/issues/4631","id":337541047,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0MTA0Nw==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-03-22T22:33:26Z","updated_at":"2017-10-18T10:21:05Z","author_association":"CONTRIBUTOR","body":"Comment author: @maximedenes\n\nThis is a part of the code base I don't know at all, but already for Termops.occur_evar, is it ok not to look into the arguments of evars? I understand it doesn't recursively check the evar_map, but still. For instance, Termops.occur_var does check evars arguments through Constr.iter.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337541047/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337541048","html_url":"https://github.com/coq/coq/issues/4631#issuecomment-337541048","issue_url":"https://api.github.com/repos/coq/coq/issues/4631","id":337541048,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0MTA0OA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-03-22T23:16:32Z","updated_at":"2017-10-18T10:21:05Z","author_association":"CONTRIBUTOR","body":"Comment author: @ppedrot\n\nChecking the arguments in case of an undefined evar is an overapproximation, as the argument may not be used by the body of the evar when it is instantiated. Yet, it is the only sound behaviour I can think of, as witnessed by the current bug. We could try to weaken the environment, but that would require typing and it may break things in a way difficult to predict.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337541048/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337541049","html_url":"https://github.com/coq/coq/issues/4631#issuecomment-337541049","issue_url":"https://api.github.com/repos/coq/coq/issues/4631","id":337541049,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0MTA0OQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-03-23T02:57:16Z","updated_at":"2017-10-18T10:21:06Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\n> Fixing this bug makes your example fail. Was that the expected behaviour?\n\nNo, the example goes through fine in 8.4pl6\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337541049/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337541051","html_url":"https://github.com/coq/coq/issues/4631#issuecomment-337541051","issue_url":"https://api.github.com/repos/coq/coq/issues/4631","id":337541051,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0MTA1MQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-03-23T07:16:30Z","updated_at":"2018-12-02T17:44:43Z","author_association":"CONTRIBUTOR","body":"Comment author: @gares\r\n\r\n> Checking the arguments in case of an undefined evar is an overapproximation,\r\n> as the argument may not be used by the body of the evar when it is\r\n> instantiated. Yet, it is the only sound behaviour I can think of\r\n\r\nI did no look at the example, but it is not the only sound solution as far as I can tell from your message.  Evars can be pruned (the Coq codebase calls restriction this way).\r\nIn particular you can say the evar cannot use its, say, second argument.\r\nThe \"filter\" data structure serves this purpose.\r\n\r\nEg.  occur_check  Y   (f (X a Y b))  -->  success, but X filtered on 2nd arg\r\n\r\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337541051/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337541052","html_url":"https://github.com/coq/coq/issues/4631#issuecomment-337541052","issue_url":"https://api.github.com/repos/coq/coq/issues/4631","id":337541052,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0MTA1Mg==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-03-23T10:47:11Z","updated_at":"2018-12-02T17:44:52Z","author_association":"CONTRIBUTOR","body":"Comment author: @ppedrot\r\n\r\n> In particular you can say the evar cannot use its, say, second argument.\r\n> The \"filter\" data structure serves this purpose.\r\n\r\nIndeed, this is what I meant by \"weakening the environment\". But I think we start to wander on the fringes of heuristics with this approach. Where do we cut the cycle? How do we ensure that typing of the type of the evar is preserved? There may be several choices, leading to different solutions.\r\n\r\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337541052/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337541053","html_url":"https://github.com/coq/coq/issues/4631#issuecomment-337541053","issue_url":"https://api.github.com/repos/coq/coq/issues/4631","id":337541053,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0MTA1Mw==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-03-23T12:14:44Z","updated_at":"2018-12-02T17:45:01Z","author_association":"CONTRIBUTOR","body":"Comment author: @gares\r\n\r\n> > In particular you can say the evar cannot use its, say, second argument.\r\n> > The \"filter\" data structure serves this purpose.\r\n> \r\n> Indeed, this is what I meant by \"weakening the environment\". But I think we\r\n> start to wander on the fringes of heuristics with this approach. Where do we\r\n> cut the cycle? How do we ensure that typing of the type of the evar is\r\n> preserved? There may be several choices, leading to different solutions.\r\n\r\nYes, IIRC Matita was recursively restricting the type of the evar... and I had the impression Coq was doing the same.  But AFAICT evarconv did not change much, so it must be refine calling unification on a \"harder\" problem than before.\r\nIn any case we (Maxime and myself) plan to look at the code of refine this afternoon to understand how things are.\r\n\r\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337541053/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337541054","html_url":"https://github.com/coq/coq/issues/4631#issuecomment-337541054","issue_url":"https://api.github.com/repos/coq/coq/issues/4631","id":337541054,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0MTA1NA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-06-06T02:50:26Z","updated_at":"2017-10-18T10:21:06Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nEnrico, Maxime, any further insights?\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337541054/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337541055","html_url":"https://github.com/coq/coq/issues/4631#issuecomment-337541055","issue_url":"https://api.github.com/repos/coq/coq/issues/4631","id":337541055,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0MTA1NQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2017-04-24T12:57:47Z","updated_at":"2018-12-02T17:45:18Z","author_association":"CONTRIBUTOR","body":"Comment author: @SkySkimmer\r\n\r\n*** #5468 has been marked as a duplicate of this bug. ***\r\n\r\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337541055/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/443514390","html_url":"https://github.com/coq/coq/issues/4631#issuecomment-443514390","issue_url":"https://api.github.com/repos/coq/coq/issues/4631","id":443514390,"node_id":"MDEyOklzc3VlQ29tbWVudDQ0MzUxNDM5MA==","user":{"login":"Armael","id":315125,"node_id":"MDQ6VXNlcjMxNTEyNQ==","avatar_url":"https://avatars.githubusercontent.com/u/315125?v=4","gravatar_id":"","url":"https://api.github.com/users/Armael","html_url":"https://github.com/Armael","followers_url":"https://api.github.com/users/Armael/followers","following_url":"https://api.github.com/users/Armael/following{/other_user}","gists_url":"https://api.github.com/users/Armael/gists{/gist_id}","starred_url":"https://api.github.com/users/Armael/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Armael/subscriptions","organizations_url":"https://api.github.com/users/Armael/orgs","repos_url":"https://api.github.com/users/Armael/repos","events_url":"https://api.github.com/users/Armael/events{/privacy}","received_events_url":"https://api.github.com/users/Armael/received_events","type":"User","site_admin":false},"created_at":"2018-12-02T15:05:05Z","updated_at":"2018-12-02T15:05:05Z","author_association":"CONTRIBUTOR","body":"I just stumbled on what looks like an instance of this issue:\r\n\r\n```coq\r\nGoal exists x, x = 0.\r\n  eexists.\r\n  match goal with |- ?x = _ =>\r\n    refine ((fun (_ : x = x) => _) _)\r\n  end.\r\n(* Error: Stack overflow *)\r\n```\r\n\r\nCould someone confirm whether this is actually the same issue?","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/443514390/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/443514708","html_url":"https://github.com/coq/coq/issues/4631#issuecomment-443514708","issue_url":"https://api.github.com/repos/coq/coq/issues/4631","id":443514708,"node_id":"MDEyOklzc3VlQ29tbWVudDQ0MzUxNDcwOA==","user":{"login":"Armael","id":315125,"node_id":"MDQ6VXNlcjMxNTEyNQ==","avatar_url":"https://avatars.githubusercontent.com/u/315125?v=4","gravatar_id":"","url":"https://api.github.com/users/Armael","html_url":"https://github.com/Armael","followers_url":"https://api.github.com/users/Armael/followers","following_url":"https://api.github.com/users/Armael/following{/other_user}","gists_url":"https://api.github.com/users/Armael/gists{/gist_id}","starred_url":"https://api.github.com/users/Armael/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Armael/subscriptions","organizations_url":"https://api.github.com/users/Armael/orgs","repos_url":"https://api.github.com/users/Armael/repos","events_url":"https://api.github.com/users/Armael/events{/privacy}","received_events_url":"https://api.github.com/users/Armael/received_events","type":"User","site_admin":false},"created_at":"2018-12-02T15:09:07Z","updated_at":"2018-12-02T15:09:07Z","author_association":"CONTRIBUTOR","body":"Note: the snippet above is derived from an attempt at doing what `eassert` does using `refine`, before finding out that `eassert` exists. However, `eassert` seems to behave correctly, as opposed to refine...","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/443514708/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/681065841","html_url":"https://github.com/coq/coq/issues/4631#issuecomment-681065841","issue_url":"https://api.github.com/repos/coq/coq/issues/4631","id":681065841,"node_id":"MDEyOklzc3VlQ29tbWVudDY4MTA2NTg0MQ==","user":{"login":"maximedenes","id":647105,"node_id":"MDQ6VXNlcjY0NzEwNQ==","avatar_url":"https://avatars.githubusercontent.com/u/647105?v=4","gravatar_id":"","url":"https://api.github.com/users/maximedenes","html_url":"https://github.com/maximedenes","followers_url":"https://api.github.com/users/maximedenes/followers","following_url":"https://api.github.com/users/maximedenes/following{/other_user}","gists_url":"https://api.github.com/users/maximedenes/gists{/gist_id}","starred_url":"https://api.github.com/users/maximedenes/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/maximedenes/subscriptions","organizations_url":"https://api.github.com/users/maximedenes/orgs","repos_url":"https://api.github.com/users/maximedenes/repos","events_url":"https://api.github.com/users/maximedenes/events{/privacy}","received_events_url":"https://api.github.com/users/maximedenes/received_events","type":"User","site_admin":false},"created_at":"2020-08-26T19:03:14Z","updated_at":"2020-08-26T19:03:14Z","author_association":"MEMBER","body":"It seems all these examples are fixed by #7825.","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/681065841/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]