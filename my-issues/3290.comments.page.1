[{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518797","html_url":"https://github.com/coq/coq/issues/3290#issuecomment-337518797","issue_url":"https://api.github.com/repos/coq/coq/issues/3290","id":337518797,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxODc5Nw==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-04-21T17:24:33Z","updated_at":"2019-07-17T09:47:41Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\r\n\r\nTrunk's [abstract] is crippled, at least in the case that the proof is ended in [Qed].\r\n\r\nUsing the memusg script (https://gist.github.com/JasonGross/11149425, just my copy of https://gist.github.com/netj/526585), I get\r\n```\r\njgross@ cagnode17:/tmp$ cat memabstract.v\r\nGoal True.\r\nProof.\r\n  do 100 assert True by abstract (do 100 assert True by constructor; constructor).\r\n  constructor.\r\nQed.\r\njgross@ cagnode17:/tmp$ cat memnoabstract.v\r\nGoal True.\r\nProof.\r\n  do 100 assert True by (do 100 assert True by constructor; constructor).\r\n  constructor.\r\nQed.\r\njgross@ cagnode17:/tmp$ for DIR in coq-8.4pl3 coq-trunk; do echo \"$DIR\"; echo; echo \"abstract\"; time memusg ~/.local64/coq/$DIR/bin/coq\r\nc memabstract.v; sleep 0.2; echo; echo \"no abstract\"; time memusg ~/.local64/coq/$DIR/bin/coqc memnoabstract.v; sleep 0.2; echo; echo; done\r\ncoq-8.4pl3\r\n\r\nabstract\r\n\r\nreal    0m16.842s\r\nuser    0m16.613s\r\nsys     0m0.240s\r\nmemusg: peak=48308\r\n\r\nno abstract\r\n\r\nreal    0m15.622s\r\nuser    0m15.113s\r\nsys     0m0.516s\r\nmemusg: peak=388672\r\n\r\n\r\ncoq-trunk\r\n\r\nabstract\r\n\r\nreal    0m5.264s\r\nuser    0m4.852s\r\nsys     0m0.412s\r\nmemusg: peak=388800\r\n\r\nno abstract\r\n\r\nreal    0m4.628s\r\nuser    0m4.160s\r\nsys     0m0.460s\r\nmemusg: peak=430960\r\n```\r\n\r\nIt is nice that Coq trunk is 3x faster in this case.  But it uses a comparable amount of memory (~400 MB), and, worse, using [abstract] does not give the ~10x decrease in memory usage that it does in 8.4.\r\n\r\n\r\n\r\nAs I understand it, this has something to do with it inlining the proofs:\r\n```\r\nLemma Foo : True.\r\nProof.\r\n  assert (True) by (abstract exact I).\r\n  clear; abstract (exact I).\r\nDefined.\r\nPrint Foo.\r\n(* as expected: Foo = (fun _ : True => Foo_subproof0) Foo_subproof\r\n     : True *)\r\nLemma Foo' : True.\r\nProof.\r\n  assert (True) by (abstract exact I).\r\n  clear; abstract (exact I).\r\nQed.\r\nPrint Foo'.\r\n(* Foo' =\r\n(fun Top_Foo'_subproof : True =>\r\n (fun Top_Foo'_subproof0 : True =>\r\n  (fun _ : True => Top_Foo'_subproof0) Top_Foo'_subproof) I) I\r\n     : True *)\r\n(* um.... *)\r\n```","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518797/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518799","html_url":"https://github.com/coq/coq/issues/3290#issuecomment-337518799","issue_url":"https://api.github.com/repos/coq/coq/issues/3290","id":337518799,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxODc5OQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-04-22T08:04:01Z","updated_at":"2017-10-18T09:16:15Z","author_association":"CONTRIBUTOR","body":"Comment author: @gares\n\nYou are right proofs are inlined as beta-redexes (but not duplicated).\n\nSo the reason must be something else.  Every time a Qed happens, and abstract was doing a Qed behind the scenes, the proof term is hashconsed.  This is still happening but just at the end of the proof.\nCan you force a garbage collection with Gc.compat() just before you measure the memory consumption?\n\nAlso, abstract is an horrible hack that should have never been coded.  Hacks are not durable.  Don't rely on them.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518799/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518800","html_url":"https://github.com/coq/coq/issues/3290#issuecomment-337518800","issue_url":"https://api.github.com/repos/coq/coq/issues/3290","id":337518800,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxODgwMA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-04-22T08:17:41Z","updated_at":"2017-10-18T09:16:16Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nI presume you mean from the OCaml toploop, using Drop, or something?  The only time I've made use of Drop is when I had Bruno Barras helping me debug something, and I don't really recall how to use it.  (For example, Drop gives me \"Error: There is no ML toplevel.\".  And once I Drop., do I just type Gc.compat()?  Or do I need to load things?  Or do I need to compile Coq specially?)  If you give me a Coq script or other instructions, I can measure the memory consumption at a certain point and report back.\n\nI personally use abstract to keep some part of a transparent proof folded, to improve performance (see https://coq.inria.fr/bugs/show_bug.cgi?id=3280).  Adam Chlipala, at least, makes extensive use of it for precisely the purpose of decreasing memory usage.  I'll see if I can get him to weigh in here on the potential for a non-hacky alternative to [abstract] that will satisfy his needs.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518800/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518801","html_url":"https://github.com/coq/coq/issues/3290#issuecomment-337518801","issue_url":"https://api.github.com/repos/coq/coq/issues/3290","id":337518801,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxODgwMQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-04-22T08:31:08Z","updated_at":"2017-10-18T09:16:16Z","author_association":"CONTRIBUTOR","body":"Comment author: @gares\n\nI've discussed on coqdev the implementation of abstract and after a chat with Adam I made it behave as in 8.4 for proofs ending with Defined.\n\nPulling back the old behavior is always possible but given that it is an\nhack I prefer to understand what you are doing (for real, not the repeat 1000...)\nand see how thinks can be made to work without the hack.\n\nW.r.t. Gc.compat() I was thinking of adding it to the code of Coq after the code running Qed.  I don't know how you measure memory usage, but I expect that if you\nmeasure it after the compaction what you measure is the real memory usage, not a peek.  And I expect it to be aligned with 8.4.\n\nYou could do it via Drop, you need coqtop in bytecode (so all you measurements have to be redone, the bytecode is less efficient).  Then Load \"yourscript\".\nThen Drop.  Then Gc.compact();;  Then go();;  Then you measure with your utility.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518801/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518802","html_url":"https://github.com/coq/coq/issues/3290#issuecomment-337518802","issue_url":"https://api.github.com/repos/coq/coq/issues/3290","id":337518802,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxODgwMg==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-04-22T08:39:44Z","updated_at":"2019-07-17T09:48:03Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\r\n\r\nAfter Drop, I get:\r\n\r\n```\r\nFile \"/afs/csail.mit.edu/u/j/jgross/.ocamlinit\", line 2, characters 13-33:\r\nError: Unbound module Toploop\r\n\r\n.ocamlinit is\r\nif Filename.basename Sys.argv.(0) = \"coqtop.byte\"\r\nthen ignore (Toploop.use_silently Format.std_formatter \"include\")\r\n(* some comments *)\r\n\r\n\r\nIf I run the commands anyway, I get\r\nGc.compat();;\r\nCharacters 0-9:\r\n  Gc.compat();;\r\n  ^^^^^^^^^\r\nError: Unbound value Gc.compat\r\nDid you mean compact?\r\n# Gc.compact();;\r\n- : unit = ()\r\n# go();;\r\nCharacters 0-2:\r\n  go();;\r\n  ^^\r\nError: Unbound value go\r\n#\r\n```\r\n\r\nThe script I used is at https://gist.github.com/JasonGross/11149425, which looks at peak memory usage, but now I am using htop, because I can look at the usage at any point in time.  Gc.compact() without go() seems to have virtually no effect; I get 566M VIRT and 376M RES both before and after Gc.compact() (this is after the final Qed).\r\n\r\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518802/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518803","html_url":"https://github.com/coq/coq/issues/3290#issuecomment-337518803","issue_url":"https://api.github.com/repos/coq/coq/issues/3290","id":337518803,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxODgwMw==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-04-22T08:47:25Z","updated_at":"2017-10-18T09:16:16Z","author_association":"CONTRIBUTOR","body":"Comment author: @gares\n\nWhile you are at it, could you try to call compaction twice?  IIRC the ephemeron data structure I coded needs it.\n\nAlso, you could \"#use include;;\"  after Drop. (maybe \"include\" between quotes)\nto have back go();; and the rest.\n\nCheers\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518803/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518804","html_url":"https://github.com/coq/coq/issues/3290#issuecomment-337518804","issue_url":"https://api.github.com/repos/coq/coq/issues/3290","id":337518804,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxODgwNA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-04-22T08:54:38Z","updated_at":"2019-07-17T09:48:17Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\r\n\r\n```\r\n# use \"include\";;\r\nCharacters 0-3:\r\n  use \"include\";;\r\n  ^^^\r\nError: Unbound value use\r\n# use include;;\r\nToplevel input:\r\n# use include;;\r\n      ^^^^^^^\r\nParse error: ';;' expected after [phrase] (in [top_phrase])\r\n\r\n# Gc.compact();;\r\n- : unit = ()\r\n# Gc.compact();;\r\n- : unit = ()\r\n# Gc.compact();;\r\n- : unit = ()\r\n# Gc.compact();;\r\n- : unit = ()\r\n#\r\n```\r\n\r\nBoth before and after Gc: 565M VIRT, 375M RES\r\n\r\nIs it possible that OCaml never gives memory back, and so the system can't tell?  (Alternatively, maybe I just need to get go() working)\r\n\r\n(For reference, 8.4pl3, according to htop, peaks at around 79M VIRT, 51M RES)\r\n\r\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518804/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518807","html_url":"https://github.com/coq/coq/issues/3290#issuecomment-337518807","issue_url":"https://api.github.com/repos/coq/coq/issues/3290","id":337518807,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxODgwNw==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-04-22T09:16:27Z","updated_at":"2017-10-18T09:16:16Z","author_association":"CONTRIBUTOR","body":"Comment author: @herbelin\n\nHi Jason, you can have a look at dev/doc/debugging.txt in the Coq archive for using the ocaml toplevel.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518807/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518808","html_url":"https://github.com/coq/coq/issues/3290#issuecomment-337518808","issue_url":"https://api.github.com/repos/coq/coq/issues/3290","id":337518808,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxODgwOA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-04-22T09:22:28Z","updated_at":"2017-10-18T09:16:16Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nHi, Hugo.  Thanks for the pointer, but that file doesn't seem to tell me how to fix\nFile \"/afs/csail.mit.edu/u/j/jgross/.ocamlinit\", line 2, characters 13-33:\nError: Unbound module Toploop\n        Camlp5 parsing version 6.11\n\n#\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518808/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518809","html_url":"https://github.com/coq/coq/issues/3290#issuecomment-337518809","issue_url":"https://api.github.com/repos/coq/coq/issues/3290","id":337518809,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxODgwOQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-04-22T09:30:26Z","updated_at":"2017-10-18T09:16:17Z","author_association":"CONTRIBUTOR","body":"Comment author: @herbelin\n\nYou don't need to use an .ocamlinit file, nor Toploop. Toploop.use_silently is just the ocaml internal name of the directive #use that you can type yourself at toplevel.\n\nIf Toploop is not found for you, maybe it is because you don't have the ocaml library toplevellib.cma installed, or in your path (it is e.g. at /usr/lib/ocaml/toplevellib.cma on my Linux) \n\nHugo\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518809/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518810","html_url":"https://github.com/coq/coq/issues/3290#issuecomment-337518810","issue_url":"https://api.github.com/repos/coq/coq/issues/3290","id":337518810,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxODgxMA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-04-22T10:37:34Z","updated_at":"2017-10-18T09:16:17Z","author_association":"CONTRIBUTOR","body":"Comment author: @gares\n\nHum that is really weird.  Can I ask to repeat the test but measure before the Qed?  During proof construction, abstract does behave as usual + it declares the name of the global object defined by side effect.  Then Qed takes the list of side effects and inlines it.  So, if the memory bloat it visible *before* the Qed, the problem has not to be looked for in the abstract tactic, but elsewhere.\n\nThanks for all the testing,\nEnrico\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518810/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518812","html_url":"https://github.com/coq/coq/issues/3290#issuecomment-337518812","issue_url":"https://api.github.com/repos/coq/coq/issues/3290","id":337518812,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxODgxMg==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-04-22T10:57:00Z","updated_at":"2017-10-18T09:16:17Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nQed (which in both cases runs almost instantly, if I recall correctly) has approximately no effect on memory consumption.  The unexpectedly high usage is already there by the time abstract is done running (even before the final \"constructor\" of the script).\n\nI'm now off to sleep, the internet having distracted me for seven hours past my bed time.  Let me know if there are any other tests you want me to run (but I expect this to be reproducible on any linux machine, if not on all computers0.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518812/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518813","html_url":"https://github.com/coq/coq/issues/3290#issuecomment-337518813","issue_url":"https://api.github.com/repos/coq/coq/issues/3290","id":337518813,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxODgxMw==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-04-22T12:11:05Z","updated_at":"2019-07-17T09:48:28Z","author_association":"CONTRIBUTOR","body":"Comment author: @achlipala\r\n\r\nWhat makes the old [abstract] a hack?  I'm certainly happy with any solution that achieves the same effect, which is to allow the deallocation of thunks standing for completed subgoals, by generating proof terms (which can be _much_ smaller) early.\r\n\r\nWe have plenty of examples where it is just not feasible to store all proof thunks in memory until [Qed], unless you are willing to devote 32 GB+ of RAM to the task.  See for instance examples in the Bedrock library:\r\n  http://plv.csail.mit.edu/bedrock/\r\nThe file examples/TreeSet.v there should be a good one to demonstrate.\r\n\r\nBedrock using automated verification condition generation to produce many subgoals within a single proof, and each subgoal is dispatched automatically by tactics for separation logic.  The individual subgoal proof thunks grow large enough to be a real problem memory-wise, if they can't be forced after each subgoal.\r\n\r\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518813/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518815","html_url":"https://github.com/coq/coq/issues/3290#issuecomment-337518815","issue_url":"https://api.github.com/repos/coq/coq/issues/3290","id":337518815,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxODgxNQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-04-22T12:41:06Z","updated_at":"2017-10-18T09:16:17Z","author_association":"CONTRIBUTOR","body":"Comment author: @gares\n\n@ jason: thanks for the test.  This shows that it is not the \"new\" abstract.  You should be able to Show Proof before the Qed and see that abstracted subproofs are indeed abstracted out as in 8.4.  The new thing happens at Qed time.\nMaybe the evars corresponding to the abstracted subterms are not purged?  Arnaud, is this possible?\n\n@ adam: abstract is a hack because it subverts the logical order of the script.\nYou typecheck the statement in an environment E1, then you typecheck the proof\nin a new environment E2 that is not E1 (it is an extension of it).  This is not a real problem in practice, but complicates the way one has to handles proof construction.  Proof construction is not a function from text to a proof term,\nbut to a proof term plus a random number of side effects.  Of course, if such function is run on a worker process, these side effects have to be at least notified to the master process and taken into account.  This is what Qed does now: takes a proof term and a list of side effects, and makes them local by creating local let-in or beta-redex.\n\nNow I'm on VAC, I'll try to follow your pointers when I'll be back.  If memory consumption is a problem I believe we should understand why/who wastes it.  \n\nI see that a huge evar map can be way bigger than the terms it represents given that it holds the type of every subterm each evar represents.  If this is the culprit, rather than providing a tactic generating global side effects and indirectly freeing some memory, I'd provide brave users like you two a vernacular command to compact the evar map manually (as a last resort) and eventually see if one can find a good heuristic to compact it automatically when it grows above a reasonable size.\n\nCiao\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518815/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518818","html_url":"https://github.com/coq/coq/issues/3290#issuecomment-337518818","issue_url":"https://api.github.com/repos/coq/coq/issues/3290","id":337518818,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxODgxOA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-04-22T12:45:40Z","updated_at":"2019-07-17T09:48:35Z","author_association":"CONTRIBUTOR","body":"Comment author: @achlipala\r\n\r\nThanks; I'll be glad to see what you find, Enrico!\r\n\r\nI don't know exactly which element of subgoal state uses so much memory, and it would certainly be a win to optimize the representation rather than provide a way to force it to proof terms selectively (as [abstract] does now in 8.4).\r\n\r\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518818/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518819","html_url":"https://github.com/coq/coq/issues/3290#issuecomment-337518819","issue_url":"https://api.github.com/repos/coq/coq/issues/3290","id":337518819,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxODgxOQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-04-22T15:42:48Z","updated_at":"2017-10-18T09:16:17Z","author_association":"CONTRIBUTOR","body":"Comment author: @aspiwack\n\n\n> Maybe the evars corresponding to the abstracted subterms are not purged? \n> Arnaud, is this possible?\n\nIt's quite likely indeed. As far as I know there are two things which may be different in trunk than in v8.4 and may be involved here, depending on how you implemented them.\n1/ abstract (v8.4) used a different evar_map than the main proof, it was discarded at the end of the abstracted proof. The main proof was resumed merrily as if the abstracted proof is a single exact of a constant. I the new implementation of abstract (trunk) uses the same evar_map, then the abstracted proof will be kept in memory in the evar_map\n2/ the intermediate step of functions were (v8.4) saved as a separated undo mechanism than the main commands. As a consequence, when a proof was completed, the evar_map used during this proof was garbage collected. Is it possible that the trunk implementation keeps the evar_map-s in memory even after the proof is completed.\n\nThe issue I see, is that persistent data structures are hard to compact. There are a few things which I want to explore to improve time efficiency. But memory usage is another beast altogether. Even if we forget that the whole proof together with the intermediate evar_map-s is kept in memory so that even if we compact the evar_map along the way it may no gain us any memory (by the virtue of sharing), every evar in the evar_map is a potential point of entry into the evar_map meaning that it is not safe to remove it unless you have a way to know that no one knows about this existential variable (is there some way to have a notion of scope for these existentials ? I have no idea). I've thought about this issue before, and I couldn't find anything satisfactory.\n\nUnrelated to abstract, but potentially useful for the memory front, I think we should borrow a trick from Matita (it's too late for the next release, I think): having a special, compact representation for (lifted) identity substitutions for evars. I strongly suspect that almost all the substitutions are of this form in proofs. So there may be some significant gain there.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518819/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518820","html_url":"https://github.com/coq/coq/issues/3290#issuecomment-337518820","issue_url":"https://api.github.com/repos/coq/coq/issues/3290","id":337518820,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxODgyMA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-04-22T16:55:08Z","updated_at":"2017-10-18T09:16:18Z","author_association":"CONTRIBUTOR","body":"Comment author: @gares\n\nWhen you decide to compact the evar map you split the evars that have an assignment and the ones that don't, then you apply the substitution to the type\nof all evars that don't; then you find the initial evar (the root/s of the proof)\nand you apply the subst to it; finally you keep one assignment, the one from the initial evar to its current proof term.  This assumes that the only terms around are the goals (because these are the only terms you apply the subst to before pruning it), so you can do that only as a vernacular command, not as a tactic.\n\n\n+1 for the compact identity list, but beware it is not all roses: you lose the canonicity of identity substitution (i.e. a non identity one may become an identity one) hence you need to compact these subst when you have the occasion.  Also I recall a lot of headaches dealing with mixed cases (like comparing/unifying the two subst, one compact one not).  But yes, the speedup was visible, especially in automatic tactics.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518820/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518821","html_url":"https://github.com/coq/coq/issues/3290#issuecomment-337518821","issue_url":"https://api.github.com/repos/coq/coq/issues/3290","id":337518821,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxODgyMQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-04-22T18:33:24Z","updated_at":"2017-10-18T09:16:18Z","author_association":"CONTRIBUTOR","body":"Comment author: @aspiwack\n\n\n> When you decide to compact the evar map you split the evars that have an\n> assignment and the ones that don't, then you apply the substitution to the\n> type\n> of all evars that don't; then you find the initial evar (the root/s of the\n> proof)\n> and you apply the subst to it; finally you keep one assignment, the one from\n> the initial evar to its current proof term.  This assumes that the only\n> terms around are the goals (because these are the only terms you apply the\n> subst to before pruning it), so you can do that only as a vernacular\n> command, not as a tactic.\n\nIt sounds fairly reasonable. I don't know how robust are the assumptions, nor whether it will yield the expected effect. But if the assumptions are reasonable, there would be arguments to do partial compaction at the end of each tactic dot-terminated command (so that to avoid storing too large evar_map for the purpose of backtracking (though, of course, it may destroy some sharing and end up having the reverse effect, it warrants careful profiling).\n\n\n> +1 for the compact identity list, but beware it is not all roses: you lose\n> the canonicity of identity substitution (i.e. a non identity one may become\n> an identity one) hence you need to compact these subst when you have the\n> occasion.  Also I recall a lot of headaches dealing with mixed cases (like\n> comparing/unifying the two subst, one compact one not).  But yes, the\n> speedup was visible, especially in automatic tactics.\n\nI'm aware of some of the shortcomings indeed. I'm pretty sure many of the hairy cases can be handled conservatively by turning the identity substitution into a regular one when the cases arise, with room for future improvement.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518821/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518823","html_url":"https://github.com/coq/coq/issues/3290#issuecomment-337518823","issue_url":"https://api.github.com/repos/coq/coq/issues/3290","id":337518823,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxODgyMw==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-04-23T12:22:42Z","updated_at":"2017-10-18T09:16:18Z","author_association":"CONTRIBUTOR","body":"Comment author: @ppedrot\n\nCreated attachment 462\nMemory dump\n\nHere is an excerpt of a memory dump of coqtop (revision d23c753) after the constructor tactic has been applied. The left column indicates the number of words allocated and the right line indicates which part of the code allocated it.\n\n> Attached file: [memory.log](https://coq.inria.fr/bugfiles/attachment.cgi?id=462) (text/x-log, 93408 bytes)\n> Description:   Memory dump\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518823/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518824","html_url":"https://github.com/coq/coq/issues/3290#issuecomment-337518824","issue_url":"https://api.github.com/repos/coq/coq/issues/3290","id":337518824,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxODgyNA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-04-24T06:36:32Z","updated_at":"2017-10-18T09:16:18Z","author_association":"CONTRIBUTOR","body":"Comment author: @aspiwack\n\nGolly!\n\nAccording to this memory dump, almost all* of the space are evars with substitutions (the substitutions are probably the biggest offenders). The relevant substitutions, however, are of the form [Var id1; Var id2 ; … ; Var idn]. Which seem tricky to optimise, compared to [Rel 1; Rel 2 ; … ; Rel n].\n\nNamed context really obscure the dependencies between evars. On the other hand, as they don't need to be strictly linear, they promise optimisations in large goals. I'm totally confused what to do about this.\n\n* We're talking an order of magnitude more than the next thing on the list, itself an order of magnitude bigger than the third item.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518824/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518828","html_url":"https://github.com/coq/coq/issues/3290#issuecomment-337518828","issue_url":"https://api.github.com/repos/coq/coq/issues/3290","id":337518828,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxODgyOA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-04-24T06:47:29Z","updated_at":"2017-10-18T09:16:18Z","author_association":"CONTRIBUTOR","body":"Comment author: @gares\n\nYes it seems all memory is taken by goals.  If one compacts the evar map as I've suggested the number of goals should drop considerably.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518828/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518830","html_url":"https://github.com/coq/coq/issues/3290#issuecomment-337518830","issue_url":"https://api.github.com/repos/coq/coq/issues/3290","id":337518830,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxODgzMA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-04-24T14:09:45Z","updated_at":"2017-10-18T09:16:18Z","author_association":"CONTRIBUTOR","body":"Comment author: @gares\n\nHello, I've \"coded\" the compaction function and If I call it in place of abstract then memory consumption stays very low.\n\nIn the quick patch I attach I define a new toplevel vernacular command,\nhence the script becomes 100 copies of the following line:\n\n assert True by (do 100 .... ).  Compact Proof.\n\nI could not make a tactic of it because the proof engine patch that landed\na few months ago changed the structure of the proof in a way that I don't understand anymore, but Arnaud should be able to make a tactic of it.\n\n@ Arnaud: the point is that I need a Proof.entry for the compaction operation,\nbut a new tactic gets only a proofview...\n\nCheers\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518830/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518831","html_url":"https://github.com/coq/coq/issues/3290#issuecomment-337518831","issue_url":"https://api.github.com/repos/coq/coq/issues/3290","id":337518831,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxODgzMQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-04-24T14:10:48Z","updated_at":"2017-10-18T09:16:19Z","author_association":"CONTRIBUTOR","body":"Comment author: @gares\n\nCreated attachment 463\ncompaction patch\n\n> Attached file: [compact.diff](https://coq.inria.fr/bugfiles/attachment.cgi?id=463) (text/plain, 5315 bytes)\n> Description:   compaction patch\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518831/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518832","html_url":"https://github.com/coq/coq/issues/3290#issuecomment-337518832","issue_url":"https://api.github.com/repos/coq/coq/issues/3290","id":337518832,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxODgzMg==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-04-24T14:54:28Z","updated_at":"2017-10-18T09:16:19Z","author_association":"CONTRIBUTOR","body":"Comment author: @ppedrot\n\nSounds dangerous as a tactic, as tactics may share evars from different states of the goal, thus resulting in a potential evar leak... The main question is to understand why the evarmap grows so much in that case, I can't find in the code of tclABSTRACT where the problem is.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518832/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518833","html_url":"https://github.com/coq/coq/issues/3290#issuecomment-337518833","issue_url":"https://api.github.com/repos/coq/coq/issues/3290","id":337518833,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxODgzMw==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-04-24T15:05:54Z","updated_at":"2017-10-18T09:16:19Z","author_association":"CONTRIBUTOR","body":"Comment author: @ppedrot\n\nI failed to see any effect to your patch, Enrico. The memory is almost untouched by your command, be it through coqtop or in interactive mode. I think there is some hidden memory leak somewhere.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518833/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518834","html_url":"https://github.com/coq/coq/issues/3290#issuecomment-337518834","issue_url":"https://api.github.com/repos/coq/coq/issues/3290","id":337518834,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxODgzNA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-04-24T15:15:54Z","updated_at":"2017-10-18T09:16:19Z","author_association":"CONTRIBUTOR","body":"Comment author: @ppedrot\n\nSorry, actually it does work only if you remove the \"abstract\", as you stated. But with the \"abstract\" tactic present, as I did, no effect at all. Something fishy in here...\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518834/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518835","html_url":"https://github.com/coq/coq/issues/3290#issuecomment-337518835","issue_url":"https://api.github.com/repos/coq/coq/issues/3290","id":337518835,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxODgzNQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-04-24T15:22:22Z","updated_at":"2017-10-18T09:16:19Z","author_association":"CONTRIBUTOR","body":"Comment author: @ppedrot\n\nI think I may have an idea of the culprit: when exactly is computed the body of the abstracted proof? If this is a future, then we're wasting a lot of memory because of the pending evarmap needed to recompute it. If that's the case, there should be some way to force the computation of the body at abstraction time.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518835/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518836","html_url":"https://github.com/coq/coq/issues/3290#issuecomment-337518836","issue_url":"https://api.github.com/repos/coq/coq/issues/3290","id":337518836,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxODgzNg==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-04-24T15:46:15Z","updated_at":"2017-10-18T09:16:20Z","author_association":"CONTRIBUTOR","body":"Comment author: @gares\n\nI suspected that but if you look at Proof_global.close_proof the proof\nis really forced, then the abstract tactic calls   Declare.declare_constant and there the future should reach the kernel and be sunk (see library.ml, line 409)\nhence the system state associated with the future should be dropped.\n\nI would follow that trajectory to see if for some reason things go differently.\n\nBTW, can you tell me how you did trace the allocator?\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518836/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518837","html_url":"https://github.com/coq/coq/issues/3290#issuecomment-337518837","issue_url":"https://api.github.com/repos/coq/coq/issues/3290","id":337518837,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxODgzNw==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-04-24T18:07:32Z","updated_at":"2017-10-18T09:16:20Z","author_association":"CONTRIBUTOR","body":"Comment author: @ppedrot\n\nThat's really strange, because sinking by hand in tclABSTRACT does divide by 2 the quantity of allocated memory in the memabstract.v example. That's far from the division by 10, but still...\n\nFor the allocation profiling, I use the following opam switch:\n\nhttps://github.com/mshinwell/opam-repo-dev\n\ntogether with this branch of mine (that's essentially a set of three patches):\n\nhttps://github.com/ppedrot/coq/tree/allocation-profiling\n\nThen you need some scripts provided with Mark Shinwell's distribution of OCaml switch to get a nice output, but I can put them somewhere for more convenience if you wish (I modified them a bit for some outputs).\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518837/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518839","html_url":"https://github.com/coq/coq/issues/3290#issuecomment-337518839","issue_url":"https://api.github.com/repos/coq/coq/issues/3290","id":337518839,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxODgzOQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-04-24T18:31:31Z","updated_at":"2017-10-18T09:16:20Z","author_association":"CONTRIBUTOR","body":"Comment author: @ppedrot\n\nIn Proof_global.close_proof, line 277, there is a Future.force used on the body of the entry. Shouldn't it be a Future.sink to release the memory used by the proof once and for all? The entry should be pure, shouldn't it?\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518839/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518840","html_url":"https://github.com/coq/coq/issues/3290#issuecomment-337518840","issue_url":"https://api.github.com/repos/coq/coq/issues/3290","id":337518840,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxODg0MA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-04-24T18:56:33Z","updated_at":"2017-10-18T09:16:20Z","author_association":"CONTRIBUTOR","body":"Comment author: @aspiwack\n\nRe compaction as a tactic:\n\nInstead of compacting with respect to the initial goals (which is fairly likely to be unsafe), we could imagine a tactic (compact t) which runs [t] and only compacts the proof produced by t (t could still leak evars in a reference, but that's a problem even without compaction).\n\nI don't have time right now to do much more than outline the idea:\nwe have sigma_initial when we start and get sigma_after after t. And sigma_after is guaranteed to be an expansion of sigma_initial. So, for each unsolved evar in sigma_initial, we can fill it with its normal form  in sigma_after. After this, we add the new unsolve evars of sigma_after into sigma_initial.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518840/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518841","html_url":"https://github.com/coq/coq/issues/3290#issuecomment-337518841","issue_url":"https://api.github.com/repos/coq/coq/issues/3290","id":337518841,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxODg0MQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-04-24T19:06:22Z","updated_at":"2017-10-18T09:16:20Z","author_association":"CONTRIBUTOR","body":"Comment author: @ppedrot\n\nBeotian question to Enrico: why are we still using Future.force and not Future.join in rather many places if we know that the computation should not depend on non-registered effects? That sounds like a potentially huge memory leak, as observed by the factor two gained by sinking the constant body in tclABSTRACT...\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518841/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518844","html_url":"https://github.com/coq/coq/issues/3290#issuecomment-337518844","issue_url":"https://api.github.com/repos/coq/coq/issues/3290","id":337518844,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxODg0NA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-04-24T20:50:23Z","updated_at":"2017-10-18T09:16:20Z","author_association":"CONTRIBUTOR","body":"Comment author: @gares\n\n@ PMP: it should be documented in the .mli.  Forcing a future is different from joining it.  When you force it, you save the system state (and the output value),\nso that if you chain it with another function, that function will run in the same system state.  When one joins a future, it purges the system state, hence it makes sense to compose this future only with pure functions.  E.g.  At some point compcert stopped to compile.  I was erroneously joining the future computing a proof term thinking that what follows, type checking by the kernel, is purely functional.  It was not, because the kernel uses the conversion oracle which state is not part of the env nor part of the proof term.  The fix was to force the future (for example to compute the section variables used) without throwing away the system state in which the future was created.  This particular issue is fixed, the oracle state is part of the env now.  Hope it helps understanding the difference.  Sink is different: if the future is a value, it throws away the state, if not it does nothing.\nNow, for abstract, I agree with you that one could join the future producing the term.  What I was suggesting is to trace it because it should get sunk automatically.  When two futures are composed, if the first one is a value, the composition is evaluated immediately (i.e. the compound future is still a value, unless ~greedy:false is given) and this should go on until library, where the future is stocked (and sunk).\n\n@ Arnaud: can you explain why the command I wrote is \"probably unsafe\"?  Pruning a substitution potentially affects terms in which the evars occur. These terms are IMO inside the \"entry\" (initial proof term) and inside the evar map.  Where else should they be?\nAlso, is it possible to access the \"entry\" from a \"new\" tactic?\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518844/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518845","html_url":"https://github.com/coq/coq/issues/3290#issuecomment-337518845","issue_url":"https://api.github.com/repos/coq/coq/issues/3290","id":337518845,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxODg0NQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-04-25T08:49:47Z","updated_at":"2017-10-18T09:16:20Z","author_association":"CONTRIBUTOR","body":"Comment author: @aspiwack\n\n\n> @ Arnaud: can you explain why the command I wrote is \"probably unsafe\"? \n> Pruning a substitution potentially affects terms in which the evars occur.\n> These terms are IMO inside the \"entry\" (initial proof term) and inside the\n> evar map.  Where else should they be?\n\nI meant unsafe in the middle of a tactic. Tactics can hold references inside the evar_map (and have many of good reason to do so). Thus I suggest it is safer to delimit the compaction. As a command there is probably nothing wrong.\n\n> Also, is it possible to access the \"entry\" from a \"new\" tactic?\n\nI think the entry used to be part of the proofview and Pierre-Marie removed it (legitimately as it was not used anywhere). I don't feel strongly about that.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518845/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518846","html_url":"https://github.com/coq/coq/issues/3290#issuecomment-337518846","issue_url":"https://api.github.com/repos/coq/coq/issues/3290","id":337518846,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxODg0Ng==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-04-25T13:55:51Z","updated_at":"2017-10-18T09:16:20Z","author_association":"CONTRIBUTOR","body":"Comment author: @ppedrot\n\n@ Enrico: clearly, the constant body is not sunk by the kernel as shown by the debugger after the declaration. I don't know why, but it seems that the pure chainings of Library l. 408 and Opaqueproof l. 53 prevent it somehow.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518846/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518848","html_url":"https://github.com/coq/coq/issues/3290#issuecomment-337518848","issue_url":"https://api.github.com/repos/coq/coq/issues/3290","id":337518848,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxODg0OA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-04-25T15:19:43Z","updated_at":"2017-10-18T09:16:21Z","author_association":"CONTRIBUTOR","body":"Comment author: @gares\n\n@ PMP: In interactive mode !mk_indirect returns null since Library did not set it.  Hence the future never reaches library 408, and it is never sunk.  I've fixed it in trunk.  Thanks for adding the pretty printers.\n\n@ Arnaud:\n> I meant unsafe in the middle of a tactic. Tactics can hold references inside\n> the evar_map (and have many of good reason to do so). Thus I suggest it is\n> safer to delimit the compaction. As a command there is probably nothing wrong.\n\nI still don't get what you mean, sorry.  What can go wrong in something like\n\n  t1; compact (t2).\n\n?\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518848/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518851","html_url":"https://github.com/coq/coq/issues/3290#issuecomment-337518851","issue_url":"https://api.github.com/repos/coq/coq/issues/3290","id":337518851,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxODg1MQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-04-25T15:30:22Z","updated_at":"2017-10-18T09:16:21Z","author_association":"CONTRIBUTOR","body":"Comment author: @ppedrot\n\nCreated attachment 464\nTestcase for memory releasing\n\nStill, the problem of releasing memory is not fixed in non-interactive mode.\n\nWith the following patch, we are able to trace when the memory of a computation is released from the ephemeron table. This should happen after a [Future.join] and a subsequent garbage collection. I have tested it with dummy examples and it worked; in the case of tclABSTRACT, on memabstract.v, the finalizer is never called, thus resulting in a memory blowup because of the still-present proof state.\n\n> Attached file: [patch.txt](https://coq.inria.fr/bugfiles/attachment.cgi?id=464) (text/plain, 1956 bytes)\n> Description:   Testcase for memory releasing\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518851/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518853","html_url":"https://github.com/coq/coq/issues/3290#issuecomment-337518853","issue_url":"https://api.github.com/repos/coq/coq/issues/3290","id":337518853,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxODg1Mw==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-04-25T15:46:58Z","updated_at":"2017-10-18T09:16:21Z","author_association":"CONTRIBUTOR","body":"Comment author: @ppedrot\n\nCreated attachment 465\nTentative patch\n\nIf this patch is correct, then the problem is solved for the memory leak.\n\nI am not really aware of the subtleties of the future mechanism, but at first sight, a pure computation when forced should not register the state, so this 2-line patch should be correct. What do you think of it, Enrico?\n\n> Attached file: [patch.txt](https://coq.inria.fr/bugfiles/attachment.cgi?id=465) (text/plain, 585 bytes)\n> Description:   Tentative patch\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518853/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518855","html_url":"https://github.com/coq/coq/issues/3290#issuecomment-337518855","issue_url":"https://api.github.com/repos/coq/coq/issues/3290","id":337518855,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxODg1NQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-04-25T16:04:46Z","updated_at":"2017-10-18T09:16:21Z","author_association":"CONTRIBUTOR","body":"Comment author: @gares\n\nThanks!  The patch is correct, I've committed a slight variant of it.\n\nBut I would not close this bug yet, since the right fix for the memory blowup is a (well written) compaction of the evarmap.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518855/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518857","html_url":"https://github.com/coq/coq/issues/3290#issuecomment-337518857","issue_url":"https://api.github.com/repos/coq/coq/issues/3290","id":337518857,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxODg1Nw==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-04-29T12:12:24Z","updated_at":"2017-10-18T09:16:21Z","author_association":"CONTRIBUTOR","body":"Comment author: @aspiwack\n\n\n> I still don't get what you mean, sorry.  What can go wrong in something like\n> \n>   t1; compact (t2).\n\nThat's safe. On the other hand t1;compact t2; t3 may not be, if t1 and t3 share an evar which is in the evar_map (and, say, get instantiated by t2). Then t3 would have a dangling reference.\n\nI think there is an invariant we should violate in any situation: that the evar_map after a tactic t0 is an extension of the evar_map before t0.\n\nWith a defininition like: m2 is an extension of m1 if all the evars in m1 are also in m2, with the same type. And m2 might have instantiated some of the undefined evars of m1.\n\nThe function you defined doesn't preserve the evars if I'm not mistaken. We should probably only compact relatively to m1 (as in the definition above), so that the compacted m2 is still an extension of m1.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518857/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518858","html_url":"https://github.com/coq/coq/issues/3290#issuecomment-337518858","issue_url":"https://api.github.com/repos/coq/coq/issues/3290","id":337518858,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxODg1OA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-04-30T07:15:10Z","updated_at":"2017-10-18T09:16:21Z","author_association":"CONTRIBUTOR","body":"Comment author: @gares\n\nHum, I think I see what you mean now.  If one writes\n\nmatch goal with ..?T.. => t1 T; compact (t2 T); t3 T. \n\nThe term captured by ?T may contain an evar.  I don't know how these Ltac bindings are kept, but I guess compact could apply the substitution to them too, right?\n\nAre there other ways t1 and t3 could share evars?\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518858/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518861","html_url":"https://github.com/coq/coq/issues/3290#issuecomment-337518861","issue_url":"https://api.github.com/repos/coq/coq/issues/3290","id":337518861,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxODg2MQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-05-02T02:10:50Z","updated_at":"2017-10-18T09:16:21Z","author_association":"CONTRIBUTOR","body":"Comment author: @ppedrot\n\nCreated attachment 469\nMemory dump of the ephemeron table\n\nI persist thinking that while the compaction of evar map may provide a nice speedup, there is still some memory leak hidden somewhere. The attached file is a graph dump of the ephemeron table after coqc-ing the last line of the following code:\n\nGoal True.\nProof.\n  do 5 assert True by abstract (do 5 assert True by constructor; constructor).\n  constructor.\nQed.\n\nWe can clearly see that some futures are never joined (I expect the ephemeron table after this code to be almost empty), and that they contain constrs that seems to have escaped hashconsing (as far as I understand the redundancy of the graph).\n\nEnrico, what do you think about that?\n\n> Attached file: [ephemeron.846.5](https://coq.inria.fr/bugfiles/attachment.cgi?id=469) (application/octet-stream, 47444 bytes)\n> Description:   Memory dump of the ephemeron table\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518861/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518863","html_url":"https://github.com/coq/coq/issues/3290#issuecomment-337518863","issue_url":"https://api.github.com/repos/coq/coq/issues/3290","id":337518863,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxODg2Mw==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-05-02T07:58:14Z","updated_at":"2017-10-18T09:16:21Z","author_association":"CONTRIBUTOR","body":"Comment author: @gares\n\nSorry I can't make much sense of the graph you attach, but I believe you.\n\nThe only thing that could save me here is that the ephemeron table\nis cleaned up \"asynchronously\".  \nWhen a future key (an ephemeron key) gets unreferenced nothing is removed.\nWhen the key is collected by the Gc it is moved in the cleanup list.\nWhen a new ephemeron key is created (or when Ephemeron.clear is called) the cleanup list is actually removed from the ephemeron table.\n\nDid you call Gc.major() and Ephemeron.clear() before drawing the graph?\n\nIn other words \"Qed\" is not supposed to actively clear that table, but to\nmake it possible for the Gc to put futures in the cleanup list and that will\neventually remove their values from the table.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518863/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518865","html_url":"https://github.com/coq/coq/issues/3290#issuecomment-337518865","issue_url":"https://api.github.com/repos/coq/coq/issues/3290","id":337518865,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxODg2NQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-05-02T16:41:08Z","updated_at":"2017-10-18T09:16:22Z","author_association":"CONTRIBUTOR","body":"Comment author: @ppedrot\n\nThat's a Graphviz graph, you can generate a graphical representation of it using the dot command.\n\nI have tried again by forcing a major GC and the clearing the table. There is still some rather big live futures around, but I doubt they contribute that much to the whole memory consumption. Actually, I am more worried by the in-proof futures generated by the abstract tactic now. Aren't they supposed to be joined immediately?\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518865/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518869","html_url":"https://github.com/coq/coq/issues/3290#issuecomment-337518869","issue_url":"https://api.github.com/repos/coq/coq/issues/3290","id":337518869,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxODg2OQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-05-02T17:37:07Z","updated_at":"2017-10-18T09:16:22Z","author_association":"CONTRIBUTOR","body":"Comment author: @aspiwack\n\n\n> Hum, I think I see what you mean now.  If one writes\n> \n> match goal with ..?T.. => t1 T; compact (t2 T); t3 T. \n> \n> The term captured by ?T may contain an evar.  I don't know how these Ltac\n> bindings are kept, but I guess compact could apply the substitution to them\n> too, right?\n\nThat's one way to do it. Of course, it can also be done via direct manipulation of evars in an ML tactic.\n\nI don't really have a strong opinion on what should be compacted and what shouldn't. The only thing one should ensure is that every evar before compact is still there after with an equivalent content (possibly further instantiated).\n\nIf we assume (and we probably should) that no tactic is allowed to \"mutate\" the definition of an evar to a different term (up to evar substitution), then any strategy which compacts any number of evar bodies is safe.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518869/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518871","html_url":"https://github.com/coq/coq/issues/3290#issuecomment-337518871","issue_url":"https://api.github.com/repos/coq/coq/issues/3290","id":337518871,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxODg3MQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-05-02T18:06:36Z","updated_at":"2017-10-18T09:16:22Z","author_association":"CONTRIBUTOR","body":"Comment author: @ppedrot\n\nWell, I think I have finally spotted why we use so much memory in trunk. Remember the GC trick I introduced? The one enlarging the minor heap. Actually, I thought I was enlarging it to 4MB by multiplying it by 128 as the documentation stated it was 32k by default.\n\nNot quite true. It is indeed 32k __words__, that is, the current trunk uses a whooping 128MB minor heap on 64-bit archs. No more questions about why I can't get the example Jason provided to run under ~130MB of maximum memory used. Mystery solved.\n\nBy reducing it to the default values, I do get a memory profile inferior to the one of v8.4, which is nice.\n\nI don't know what to do about this though. Using 128MB of memory as a minimum requirement does not seem that bad, assuming we're living in 2014. People using RPi may still change that parameter by hand using the OCAMLRUNPARAM variable. Anyway, we should document it a least (?).\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518871/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518873","html_url":"https://github.com/coq/coq/issues/3290#issuecomment-337518873","issue_url":"https://api.github.com/repos/coq/coq/issues/3290","id":337518873,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxODg3Mw==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-05-03T10:00:48Z","updated_at":"2017-10-18T09:16:22Z","author_association":"CONTRIBUTOR","body":"Comment author: @gares\n\n@ PMP: IMO 128MB as a requirement is not a problem.  My cell phone has 2G ;-)\n\n@ Arnaud:  I understand your invariant.  But this invariant is clearly disallowing any form of evar map compaction run by a tactic.  I wanted to\nunderstand why/where this invariant is needed to see how to invalidate it\nwithout breaking things.\nWe could stay with my patch that implements evarmap compaction as a toplevel\ncommand, but I don't know if it is sufficient.  It would be so in a language like\nssreflect, where proofs are made of many short sentences.  But IIRC Adam builds proofs made of very few long sentences hence he may need compaction in the middle of them.  \nIt is true that abstract is once again a workaround for this issue, but still I see it as a hack.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518873/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518875","html_url":"https://github.com/coq/coq/issues/3290#issuecomment-337518875","issue_url":"https://api.github.com/repos/coq/coq/issues/3290","id":337518875,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxODg3NQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-05-03T10:04:12Z","updated_at":"2017-10-18T09:16:22Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nAs I understand it, Bedrock only (or primarily) needs compactification simultaneous with [abstract].  (Similarly, as I understand it, parallel processing of tactics is also primarily useful as a way to solve subgoals with time-consuming proof scripts, i.e., simultaneous with [abstract].)\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518875/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518876","html_url":"https://github.com/coq/coq/issues/3290#issuecomment-337518876","issue_url":"https://api.github.com/repos/coq/coq/issues/3290","id":337518876,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxODg3Ng==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-05-07T09:11:42Z","updated_at":"2017-10-18T09:16:22Z","author_association":"CONTRIBUTOR","body":"Comment author: @gares\n\n@ adam: the example used in this thread is odd.  What makes Coq blow up is that\n\"assert\" enlarges the context at each step.  So what we see here is surely an inefficiency but I'm not sure anymore it is representative of your real world formalizations.  And for that inefficiency I agree with Arnaud: we \"just\" need\nto give a compact representation to the identity explicit substitution for evars.\n\nIs it really the case that your contexts grow to the size of 10'000 entries?\nOr, as I expect, your proof terms are huge trees that live in a, say, 30 items context?\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518876/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518877","html_url":"https://github.com/coq/coq/issues/3290#issuecomment-337518877","issue_url":"https://api.github.com/repos/coq/coq/issues/3290","id":337518877,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxODg3Nw==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-05-07T12:28:23Z","updated_at":"2019-07-17T09:49:13Z","author_association":"CONTRIBUTOR","body":"Comment author: @achlipala\r\n\r\nWell, in this tarball:\r\n  http://plv.csail.mit.edu/bedrock/bedrock-20130328.tgz\r\nsee examples/TreeSet.v for a long-running file, which uses much more memory without the [abstract].  (Not entirely sure it runs in various avant-garde Coq versions.)\r\n\r\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518877/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518879","html_url":"https://github.com/coq/coq/issues/3290#issuecomment-337518879","issue_url":"https://api.github.com/repos/coq/coq/issues/3290","id":337518879,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxODg3OQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-08-27T14:16:58Z","updated_at":"2017-10-18T09:16:23Z","author_association":"CONTRIBUTOR","body":"Comment author: @ppedrot\n\nResurrecting this thread: I think the memory leak is now fixed, but I presume we should nonetheless provide the user with a way to garbage collect huge evarmaps with a command, or a by setting a flag so that it is done after each vernacular tactic command. Anyone against this?\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518879/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518881","html_url":"https://github.com/coq/coq/issues/3290#issuecomment-337518881","issue_url":"https://api.github.com/repos/coq/coq/issues/3290","id":337518881,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxODg4MQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-09-08T13:36:30Z","updated_at":"2017-10-18T09:16:23Z","author_association":"CONTRIBUTOR","body":"Comment author: @gares\n\nI agree. Hopefully my patch (in this thread) is still working.\nNo time to check it now, but if you want to apply it you are welcome.\nIIRC it was not the best possible solution ever, but Arnaud agreed it was correct.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518881/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]