[{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518709","html_url":"https://github.com/coq/coq/issues/3284#issuecomment-337518709","issue_url":"https://api.github.com/repos/coq/coq/issues/3284","id":337518709,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxODcwOQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-04-19T05:10:19Z","updated_at":"2017-10-18T09:15:59Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nGoal forall A B C (f g : forall (x : A) (y : B x), C x y), (forall x y, f x y = g x y) -> True.\nProof.\n  intros A B C f g H.\n  apply functional_extensionality_dep in H.\n(* Success in 8.4, Error: Unable to unify. in trunk *)\n\nThe same thing happens with [eapply].\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518709/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518711","html_url":"https://github.com/coq/coq/issues/3284#issuecomment-337518711","issue_url":"https://api.github.com/repos/coq/coq/issues/3284","id":337518711,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxODcxMQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-04-20T20:05:39Z","updated_at":"2017-10-18T09:15:59Z","author_association":"CONTRIBUTOR","body":"Comment author: @ppedrot\n\nUnification was changed in trunk. This may explain this behaviour. Do you have the exact commit which introduced that?\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518711/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518712","html_url":"https://github.com/coq/coq/issues/3284#issuecomment-337518712","issue_url":"https://api.github.com/repos/coq/coq/issues/3284","id":337518712,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxODcxMg==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-04-20T20:07:04Z","updated_at":"2017-10-18T09:15:59Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nI don't.  I can run [git bisect] if you'd like, though.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518712/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518714","html_url":"https://github.com/coq/coq/issues/3284#issuecomment-337518714","issue_url":"https://api.github.com/repos/coq/coq/issues/3284","id":337518714,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxODcxNA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-04-20T20:28:18Z","updated_at":"2017-10-18T09:15:59Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nI think it is not the unification engine, but instead the timing of inferring maximally inserted implicit arguments; replacing [functional_extensionality_dep] with [@ functional_extensionality_dep] makes it work in trunk.  I will go bisect.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518714/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518717","html_url":"https://github.com/coq/coq/issues/3284#issuecomment-337518717","issue_url":"https://api.github.com/repos/coq/coq/issues/3284","id":337518717,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxODcxNw==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-04-20T22:28:20Z","updated_at":"2017-10-18T09:16:00Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\ngit bisect says\nf5bbb5ce34bb1ee2165086b0fdb3ee5f3d96a44e is the first bad commit\ncommit f5bbb5ce34bb1ee2165086b0fdb3ee5f3d96a44e\nAuthor: msozeau <msozeau@ 85f007b7-540e-0410-9357-904b9bb8a0f7>\nDate:   Fri Jul 19 14:50:48 2013 +0000\n\n    - Fix uncaught exception NotASort from reductionops, moving decomp_sort to retyping.ml\n    - In unification's w_merge, assign the evars in the same order they were found. Might\n    create rare incompatibilities.\n\n\n    git-svn-id: svn+ssh://scm.gforge.inria.fr/svn/coq/trunk@ 16632 85f007b7-540e-0410-9357-904b9bb8a0f7\n\nI haven't tested it, but it seems plausible.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518717/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518720","html_url":"https://github.com/coq/coq/issues/3284#issuecomment-337518720","issue_url":"https://api.github.com/repos/coq/coq/issues/3284","id":337518720,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxODcyMA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-04-20T22:29:02Z","updated_at":"2017-10-18T09:16:00Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nHere is the bisect script I used:\n\n\n#!/bin/bash\n\ncd ~/coq\n\ngit clean -xfd 2>&1 >/dev/null\nCONFIGURE_ARGS=\"-local -coqide no\"\nif [ ! -z \"$(./configure -help 2>&1 | grep 'nodoc')\" ]; then\n    CONFIGURE_ARGS=\"$CONFIGURE_ARGS -nodoc\"\nelse\n    CONFIGURE_ARGS=\"$CONFIGURE_ARGS -with-doc no\"\nfi\nif [ ! -z \"$(./configure -help 2>&1 | grep 'no-native-compilter')\" ]; then\n    CONFIGURE_ARGS=\"$CONFIGURE_ARGS -no-native-compiler\"\nfi\n./configure $CONFIGURE_ARGS\nmake coqbinaries \"$@ \" || exit 125\nls ./bin\n\n\nCODE='Notation \"A -> B\" := (forall _ : A, B) (right associativity, at level 99, B at level 200).\nInductive eq {A} (x : A) : A -> Prop := eq_refl : eq x x.\nInductive True : Prop := I.\nNotation \"a = b\" := (@ eq _ a b) (at level 70, right associativity, b at next level).\nAxiom functional_extensionality_dep :\n  forall {A : Type} {B : A -> Type} (f g : forall x : A, B x),\n    (forall x : A, f x = g x) -> f = g.\n\nGoal forall A B C (f g : forall (x : A) (y : B x), C x y), (forall x y, f x y = g x y) -> True.\nProof.\n  intros A B C f g H.\n  apply functional_extensionality_dep in H.\nAdmitted.'\n\nFILE=`mktemp --suffix=.v --tmpdir tmpXXXXXXXXXX`\n\necho \"$CODE\" > \"$FILE\"\nif [ ! -z \"$(./bin/coqtop -help 2>&1 | grep noinit)\" ]\nthen\n    ./bin/coqtop -boot -compile \"${FILE%.v}\" -noinit\n    ERR=$?\nelse\n    ./bin/coqtop -boot -compile \"${FILE%.v}\" -nois\n    ERR=$?\nfi\nrm \"$FILE\"\n\nif [ $ERR = 0 ]; then\n    exit 0 # good\nelse\n    exit 1 # bad\nfi\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518720/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518721","html_url":"https://github.com/coq/coq/issues/3284#issuecomment-337518721","issue_url":"https://api.github.com/repos/coq/coq/issues/3284","id":337518721,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxODcyMQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-06-12T10:28:10Z","updated_at":"2017-10-18T09:16:00Z","author_association":"CONTRIBUTOR","body":"Comment author: @mattam82\n\nThis does \"work\" but it produces ill-formed terms referring to an unbound de Bruijn index. The result should be forall x : A, eq (f x) (g x) but the forall is missing, maybe Hugo knows how to achieve that result.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518721/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518722","html_url":"https://github.com/coq/coq/issues/3284#issuecomment-337518722","issue_url":"https://api.github.com/repos/coq/coq/issues/3284","id":337518722,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxODcyMg==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-06-12T10:57:06Z","updated_at":"2017-10-18T09:16:01Z","author_association":"CONTRIBUTOR","body":"Comment author: @herbelin\n\nThere are several issues afaiu:\n\nIt should a priori behave the same whether we say \"apply @ functional_extensionality_dep in H\" or \"apply functional_extensionality_dep in H\".\n\nWhen it works, the result, whether it is in 8.4 or trunk, is:\n\n  H : (fun y : B ?23 => f ?23 y) = (fun y : B ?23 => g ?23 y)\n\nwhere ?23 is an evar. Since \"e\" has not been given, \"apply\" would have to fail here. With \"eapply\", this looks a correct behavior to me.\n\nObtaining H : forall x, (fun y : B x => f x y) = (fun y : B x => g x y) is asking too much of \"apply in\" I think, since the policy of apply in, like the one of apply, is that dependencies are treated as evars.\n\nSo, in summary: I see two problems:\n- \"apply in\" does not properly check if evars are created;\n- unification should work the same whether using @ functional_extensionality_dep or functional_extensionality_dep.\n\nOtherwise said, it should work the same in 8.4 and trunk producing the H above with eapply and failing with a \"cannot instantiate x\" in with 8.4 and trunk when using apply.\n\nOK for being assigned to it in any case (though I don't know when it will come on top of my priority list).\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518722/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518724","html_url":"https://github.com/coq/coq/issues/3284#issuecomment-337518724","issue_url":"https://api.github.com/repos/coq/coq/issues/3284","id":337518724,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxODcyNA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-06-12T11:11:10Z","updated_at":"2017-10-18T09:16:01Z","author_association":"CONTRIBUTOR","body":"Comment author: @mattam82\n\nI think it should always fail. The ?23 existential refers to an UNBOUND de Bruijn index, i.e. it's ill-typed:\n  \n  A : Type\n  B : forall _ : A, Type\n  C : forall (x : A) (_ : B x), Type\n  f : forall (x : A) (y : B x), C x y\n  g : forall (x : A) (y : B x), C x y\n  H : @ eq\n        (forall x : B ?20 (* [A, B, C, f, g, H, _UNBOUND_REL_1] *),\n         C ?20 (* [A, B, C, f, g, H, x] *) x)\n        (fun y : B ?20 (* [A, B, C, f, g, H, _UNBOUND_REL_1] *) =>\n         f ?20 (* [A, B, C, f, g, H, y] *) y)\n        (fun y : B ?20 (* [A, B, C, f, g, H, _UNBOUND_REL_1] *) =>\n         g ?20 (* [A, B, C, f, g, H, y] *) y)\n  ============================\n   True\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518724/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518725","html_url":"https://github.com/coq/coq/issues/3284#issuecomment-337518725","issue_url":"https://api.github.com/repos/coq/coq/issues/3284","id":337518725,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxODcyNQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-06-12T19:07:56Z","updated_at":"2017-10-18T09:16:01Z","author_association":"CONTRIBUTOR","body":"Comment author: @herbelin\n\nThe unbound rel indeed shows a bug (supposingly in unification). Note that there were no such unbound rel in 8.4 (*). So, I see this as a hint of why it works in 8.4 and not in trunk.\n\nAnother bug is the presence of H in the signature in both 8.4 and trunk, which shows a collision between the old H that has been overwritten with a new H.\n\nHugo\n\n8.4 gives :\n\n  A : Type\n  B : A -> Type\n  C : forall x : A, B x -> Type\n  f : forall (x : A) (y : B x), C x y\n  g : forall (x : A) (y : B x), C x y\n  H : @ Logic.eq\n        (forall x : B ?37 (* [A, B, C, f, g, H] *),\n         C ?37 (* [A, B, C, f, g, H] *) x)\n        (fun y : B ?37 (* [A, B, C, f, g, H] *) =>\n         f ?37 (* [A, B, C, f, g, H] *) y)\n        (fun y : B ?37 (* [A, B, C, f, g, H] *) =>\n         g ?37 (* [A, B, C, f, g, H] *) y)\n  ============================\n   True\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518725/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518726","html_url":"https://github.com/coq/coq/issues/3284#issuecomment-337518726","issue_url":"https://api.github.com/repos/coq/coq/issues/3284","id":337518726,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxODcyNg==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-06-13T15:34:53Z","updated_at":"2017-10-18T09:16:01Z","author_association":"CONTRIBUTOR","body":"Comment author: @herbelin\n\nUnbould rel problem fixed in trunk, v8.4 and v8.3.\n\nThe two other problems are fixed in trunk.\n\nThe clear problem does not seem so critical so I don't propagate it to 8.4.\n\nThe \"apply\" working even if evar remains could be propagated to 8.4 but I'm afraid it break scripts using this \"bug\". I let this pending...\n\nNote that 8.3 was ok for \"apply functional_extensionality_dep in H\" but not ok for \"apply @ functional_extensionality_dep in H\" because of the unbould rel bug.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518726/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]