Comment author: @JasonGross

Here is some code that fakes `transparent assert`, but the one that actually goes into Coq should be written in OCaml, I think, so that we can do `transparent assert (foo : nat = nat)` rather than `transparent assert (foo : (nat = nat))`, and so that we can have both `transparent assert (foo : bar)` and just `transparent assert (bar)`.

```coq
(** [transparent assert (H : T)] is like [assert (H : T)], but leaves the body transparent. *)
Tactic Notation "transparent" "assert" "(" ident(name) ":" constr(type) ")" :=
  refine (let H := (_ : type) in _);
  [
  | ((* We cannot use the name [H], due to some infelicities in the naming of bound variables.  So instead we pull the bottommost
hypothesis. *)
    let H := match goal with H := _ |- _ => constr:(H) end in
    rename H into name) ].

(** [transparent eassert] is like [transparent assert], but allows holes in the type, which will be turned into evars. *)
Tactic Notation "transparent" "assert" "(" ident(name) ":" constr(type) ")" "by" tactic3(tac) := let name := fresh "H" in
transparent assert (name : type); [ solve [ tac ] | ].
(* Doesn't actually help *)
(*Tactic Notation "transparent" "eassert" "(" open_constr(type) ")" := let name := fresh "H" in transparent assert (name : type).*)
Tactic Notation "transparent" "eassert" "(" ident(name) ":" open_constr(type) ")" := transparent assert (name : type).
Tactic Notation "transparent" "eassert" "(" ident(name) ":" open_constr(type) ")" "by" tactic3(tac) := transparent assert (name :
type) by tac.
Goal True.
  transparent eassert (H : (_ = nat)).
```

Comment author: @aspiwack

No opinion, but I've fixed the handling of ltac names by refine so that:
```coq
Tactic Notation "transparent" "assert" "(" ident(H) ":" open_constr(type) ")" :=
  refine (let H := (_ : type) in _).
```
now works.


