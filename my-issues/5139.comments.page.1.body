Comment author: @JasonGross

I thought anomalies were supposed to always show up.  At the very least, I'd 
like a setting that I can set so that anomalies are marked as uncatchable.  
Otherwise bugs in Coq take longer to catch, and are frequently harder to debug,


Comment author: @ejgallego

Hi Jason, I am not sure I follow you, what you suggest is the default coding style in Coq, even if only manually enforced ATM. Thus, any anomaly caught is a bug.

There have been talks about improving that but it is not easy to do on the Ocaml side.

Do you have an specific instance of a bad try ... with ... block?


Comment author: @JasonGross

Here is code that raises an anomaly in 8.6 
(064de6f6839c4ef963b83018812c5d4113eb2bb9)

Class instructions (n : nat) :=
  {
    W : Type;
    ldi :> nat -> W
  }.
Goal instructions 64 -> True.
  intro.
  let v := constr:(
             let y2 := ldi 0 in
             let '(CF, _) := (true, 0) in
             y2) in
  idtac.



If you stick a [try] before the [let v := ...], then the code succeeds.  Maybe 
this is an anomaly in the pretyper or something?


Comment author: @ejgallego

Oh I confused Ocaml's try with LTAC try, I'm sorry!

However, I can't reproduce the anomaly in today's 8.6, dunno which commit solved that particular problem.


Comment author: @ejgallego

It seems that 0b417c12eb10bb29bcee04384b6c0855cb9de73a is the one solving the issue.


Comment author: @ppedrot

Yes, I've already commented on that kind of behaviour a while ago, but I can't find back the relevant bug report. Essentially, the problem is that it is impossible to tell apart whether an exception is expected or whether it is wild while executing a tactic. The only criterion is that at toplevel, any unhandled exception is turned into an anomaly.

Thus every such anomaly must be fixed in a by-case basis. It looks like the current one has been solved, so that I'm closing this bug.


Comment author: @ejgallego

Pierre-Marie excuse my ignorance on this topic, but are you saying that it is normal that that LTAC "try" swallows Anomalies?

Why can't is use the usual `is_critical` check to allow them to propagate?

Even if the anomaly is fixed, Jason may have a point here, it seems a bit weird that adding try removed the anomaly, so maybe people expert in LTAC and the monad want to have a look and make sure that things are OK.


Comment author: @ppedrot

No, this is not what I meant. Essentially, there are two classes of exceptions, the fatal ones and the other ones. Ltac never catches the former (otherwise, that'd be a bug).

The problem stems from exceptions from the second class that reach toplevel without having a handler. In that case, they are displayed to the user as an anomaly, e.g. the infamous "Anomaly: Uncaught exception Not_found". But internally, one cannot check whether it's legal for such an exception to be raised or if it's a stray one. I was under the impression that the current bug was an avatar of this behaviour.


Comment author: @ejgallego

Oh I see, good point, thanks! Let me check what kind of anomaly I got exactly as I still have this tree around.


Comment author: @ejgallego

Umm so indeed I get here:

"Anomaly: index to an anonymous variable. Please report."

which is generated by `CErrors.anomaly` and not an unhandled exception.

However, adding try as Jason suggested makes the anomaly go away. It seems a bit fishy.


Comment author: @ppedrot

Yep, that's not the expected behaviour. I'll have a look before the aforementioned patch.


Comment author: @ppedrot

Hmm, obviously, Tacticals.catch_failerror is nicely catching every exception... That's terrible.


Comment author: @ejgallego

That's a cool one indeed :D !


Comment author: @ejgallego

Another instance of catch all (likely harmless) is in stm:run_command .


Comment author: @ejgallego

Pierre-Marie, after applying the patch to the tree with the anomaly, try still keeps masking it. No clue what is going on, but the problem seems to persist.


Comment author: @JasonGross

Can we get an undocumented [_debugging_anomaly] tactic that can issue anomalies, so that we can test things like this more easily, and in the test suite?  (I'm fine if the tactic only exists when you pass -debug to Coq, or when you [Require Import Coq.Debugging.Tactics] or similar.)


Comment author: @ejgallego

@ jason a plugin should be very easy to write.


Comment author: @ppedrot

There is something veeeeery fishy about that bug. It seems that when adding the try, the anomaly is actually never triggered (and thus never caught). I'm investigating.


Comment author: @ppedrot

Holy celestial teapot! This is not a bug, or at least, not phrased this way. The anomaly was actually raised by the printer of the Ltac error, not by the Ltac interpretation. As try caught the error, it never got to be printed, thus not raising the anomaly...

Marking it fixed again.


Comment author: @ejgallego

Wow, amazing eye PMP!


