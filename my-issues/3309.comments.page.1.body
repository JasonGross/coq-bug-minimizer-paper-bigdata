Comment author: @JasonGross

Created attachment 473
450 line test case

With -no-sharing (option from https://github.com/UniMath/UniMath/blob/0891f4e0c53bf55afb52cfb292b633dd71333f90/Coq_patch/coq-8.4-ufpatches.diff), Coq 8.4pl3 runs in 0.5 seconds. Without it, Coq eats up 14 GB of memory before being killed. [Timeout 2] on the last line will let this file be tested in the test-suite.  I may try to minimize this test case further, at some point, but I hope the combination of having a running example and knowing approximately where the problem is will make 450 lines short enough.

This example is created from code of Vladimir Voevodsky and Dan Grayson, I believe.

> Attached file: [bug_sharing.v](https://coq.inria.fr/bugfiles/attachment.cgi?id=473) (application/octet-stream, 20946 bytes)
> Description:   450 line test case


Comment author: @JasonGross

Created attachment 474
patch for 8.4pl3 to, among other things, give a -no-sharing command line option

I've attached a patch for Coq 8.4pl3 that, among other things, gives a -no-sharing option to Coq.  This patch should NOT be merged, as, among other things, it turns off universe checking.  I've attached it here to make this bug report self-contained.

> Attached file: [coq-8.4-ufpatches.diff](https://coq.inria.fr/bugfiles/attachment.cgi?id=474) (text/plain, 15080 bytes)
> Description:   patch for 8.4pl3 to, among other things, give a -no-sharing command line option


Comment author: @ppedrot

Is it only the fact that you're turning off sharing in Closure that produces this speedup? If you also turn off universe checking, I bet this explains your speedup...


Comment author: @gares

IIRC I looked at this code/patch when I worked on the conversion test.  It shows pretty well the unlucky case of the conversion test when the optimization for fast reduction (sharing) plays against term comparison by inflating duplicated terms that will never reduce to something smaller.

My attempt to keep track of equivalence classes of terms was helping but the bookkeeping was very costly for the cases where things do not explode.  I did put this line of research on hold, waiting for more free time an maybe some extra ideas and/or help.  BTW, this is the very same problem that is worked around in MathComp with the "black art of locking and projection in-lining":
a way to "drive" the term comparison algorithm without patching Coq.

It would be nice to have these files ported to the current version of Coq.

w.r.t. the patch, I think it would make sense to have a "Set ConversionNoSharing" flag to be used in specific files.  With this flag always on not even the standard library passes.  This would make it possible to compile things without patching Coq (assuming the form of universe polymorphism that just landed makes the other half of the patch non necessary).

Ciao


Comment author: @ppedrot

Is it sound to desactivate this flag? It is quite easy indeed to add an option to do that in like ~5 lines of code.


Comment author: @JasonGross

Created attachment 475
303 line test case

I've attached a slightly reduced version of the test-case.  The patch adds a flag for disabling sharing; the patched Coq (so, no universe checking) OOMs unless I pass it -no-sharing.

I tried porting the test-case to trunk, but it does not work.  setquotuniv seems to make essential use of impredicative Type (from ishinh_UU : forall P: hProp, ( ( X -> P ) -> P )), and replacing Type with Set and using -impredicative-set does not work.  (And admitting the impredicative encoding, or even passing it through an admitted universe-level-adjuster, makes the sharing bug disappear.)  Perhaps Dan Grayson, who probably actually understands the code, can help.

++ to having a flag in the file to turn of sharing for that file

> Attached file: [bug_sharing_16.v](https://coq.inria.fr/bugfiles/attachment.cgi?id=475) (application/octet-stream, 14434 bytes)
> Description:   303 line test case


Comment author: @ppedrot

I just added a Kernel Term Sharing option in trunk to deactivate this behaviour. I do not think this deserves to be documented, but at least it is there.


Comment author: @JasonGross

Should we put the test case in the test-suite, to make sure that option doesn't disappear without someone noticing?


Comment author: @gares

I'd say it should be documented.  And I would also change the short description
to something that makes it clear that it is about Qed and the sharing of reductions:

  "lazy reduction machine closure sharing (used at Qed time)"

So that people having problems with Qed may eventually try that option.

It should also be clear that it is the same hack used for (one of the) HoTT libraries.  Maybe not advertised in first page of the manual, but at least the people that are currently patching Coq to compile that development must know that in 8.5 they don't need a hacked Coq, but just this new option.

Best,


Comment author: @JasonGross

I have managed to make a test-case that runs on trunk (with some help of explicit universe levels (which seem rather buggy, still) and -impredicative-set).  I will submit a pull request soon.


Comment author: @mattam82

The test-suite files is in now.


