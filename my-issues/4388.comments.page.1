[{"url":"https://api.github.com/repos/coq/coq/issues/comments/337537102","html_url":"https://github.com/coq/coq/issues/4388#issuecomment-337537102","issue_url":"https://api.github.com/repos/coq/coq/issues/4388","id":337537102,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUzNzEwMg==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2015-10-25T21:40:22Z","updated_at":"2018-03-25T15:18:57Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\r\n\r\nI have a case where\r\n```coq\r\n    match goal with\r\n      | [ |- appcontext[@ mis_char] ] => erewrite !(@ mis_char_eq) by (eauto with nocore parser_adt_method_db)\r\n      | [ H : appcontext[@ mis_char] |- _ ] => erewrite !(@ mis_char_eq) in H by (eauto with nocore parser_adt_method_db)\r\n    end.\r\n```\r\non a goal like this:\r\n```coq\r\n  H2 : mis_char ch x1\r\n  ════════════════════════════\r\n   (let\r\n    (String0, is_char0, _, _, _, _, _, _) as StringLike0\r\n    return (String -> Ascii.ascii -> bool) := string_stringlike in\r\n    is_char0) str2 ch\r\n```\r\nfails with \"Error: decompose_lam_n_decls: not enough abstractions\", but removing the first line of the match statement makes it succeed.\r\n\r\nThis should not be the case.  Either it should be an anomaly, or match should backtrack across it.  I'll see if I can make a test case.\r\n\r\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337537102/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337537104","html_url":"https://github.com/coq/coq/issues/4388#issuecomment-337537104","issue_url":"https://api.github.com/repos/coq/coq/issues/4388","id":337537104,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUzNzEwNA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2015-10-25T22:22:28Z","updated_at":"2018-03-25T15:19:38Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\r\n```coq\r\nRecord silly := { x : nat; y := x }.\r\nGoal forall (k : silly), x k = x k.\r\n  clear; unfold x; intros.\r\n  match goal with\r\n    | [ |- appcontext[1] ] => idtac\r\n  end. (* Toplevel input, characters 15-70:\r\nError: decompose_lam_n_decls: not enough abstractions *)\r\n```\r\nThe bug goes away if [unfold x] is replaced by [cbv beta delta [x]].\r\n\r\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337537104/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337537107","html_url":"https://github.com/coq/coq/issues/4388#issuecomment-337537107","issue_url":"https://api.github.com/repos/coq/coq/issues/4388","id":337537107,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUzNzEwNw==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2015-10-25T22:30:07Z","updated_at":"2017-10-18T10:09:16Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nOh, fascinating, but it comes back if you do [cbv zeta] before the [match].  In non Set Printing All mode, [cbv zeta] changes the goal from\n   (let (x0, y0) := k in x0) = (let (x0, y0) := k in x0)\nto\n   (let (x0, _) := k in x0) = (let (x0, _) := k in x0)\n\nIn Set Printing All mode, [cbv zeta] changes nothing.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337537107/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337537108","html_url":"https://github.com/coq/coq/issues/4388#issuecomment-337537108","issue_url":"https://api.github.com/repos/coq/coq/issues/4388","id":337537108,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUzNzEwOA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2015-10-27T20:42:12Z","updated_at":"2017-10-18T10:09:17Z","author_association":"CONTRIBUTOR","body":"Comment author: @ppedrot\n\nWell, there is a nice comment in the code (Constr_matching module) that precisely seems to hint at the source of the error:\n\n(* Warning: this assumes predicate and branches to be in canonical form using let and fun of the signature *)\n\nYour reduction functions probably messed up this assumption...\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337537108/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337537109","html_url":"https://github.com/coq/coq/issues/4388#issuecomment-337537109","issue_url":"https://api.github.com/repos/coq/coq/issues/4388","id":337537109,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUzNzEwOQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2015-11-09T04:49:00Z","updated_at":"2018-03-25T15:17:45Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\r\n\r\nUsing Gregory's template-coq plugin, and some notations, we get\r\n```coq\r\nRequire Import Template.Template.\r\n\r\nRequire Import Template.Ast.\r\nRequire Import Coq.Strings.String.\r\nLocal Open Scope string_scope.\r\nNotation n := nNamed.\r\nNotation \"'λ' x ::: t ⇒ b\" := (tLambda (n x) t b) (at level 10).\r\nNotation r := tRel.\r\nNotation mI n := (mkInd n 0).\r\nNotation tI n := (tInd (mI n)).\r\nNotation v n := (tVar n).\r\nNotation \"'LET' x := v 'IN' b\" := (tLetIn (n x) v b) (at level 10).\r\nRequire Import Program.\r\n\r\nRecord silly := { x : nat; y := x }.\r\nGoal forall (k : silly), x k = x k.\r\n  clear; cbv beta delta [x]; intros; exfalso.\r\n  quote_term (let (x0, y0) := k in x0) (fun x => pose x).\r\n  quote_term (let (x0, _) := k in x0) (fun x => pose x).\r\n  let c := (eval cbv zeta in (let (x0, _) := k in x0)) in\r\n  quote_term c (fun x => pose x).\r\n(*  t := tCase 0 (λ \"k\" ::: tI \"Top.silly\" ⇒ (tI \"Coq.Init.Datatypes.nat\"))\r\n         (v \"k\")\r\n         [(1,\r\n          λ \"x0\" ::: tI \"Coq.Init.Datatypes.nat\"\r\n          ⇒ ((LET \"y0\" := r 0 IN (tI \"Coq.Init.Datatypes.nat\")) (r 1)))]\r\n    : term\r\n  t0 := tCase 0 (λ \"k\" ::: tI \"Top.silly\" ⇒ (tI \"Coq.Init.Datatypes.nat\"))\r\n          (v \"k\")\r\n          [(1,\r\n           λ \"x0\" ::: tI \"Coq.Init.Datatypes.nat\"\r\n           ⇒ (tLetIn nAnon (r 0) (tI \"Coq.Init.Datatypes.nat\") (r 1)))]\r\n     : term\r\n  t1 := tCase 0 (λ \"k\" ::: tI \"Top.silly\" ⇒ (tI \"Coq.Init.Datatypes.nat\"))\r\n          (v \"k\") [(1, λ \"x0\" ::: tI \"Coq.Init.Datatypes.nat\" ⇒ (r 0))] *)\r\n(* more verbosely:\r\n  t := tCase 0\r\n         (tLambda (nNamed \"k\") (tInd (mkInd \"Top.silly\" 0))\r\n            (tInd (mkInd \"Coq.Init.Datatypes.nat\" 0)))\r\n         (tVar \"k\")\r\n         [(1,\r\n          tLambda (nNamed \"x0\") (tInd (mkInd \"Coq.Init.Datatypes.nat\" 0))\r\n            (tLetIn (nNamed \"y0\") (tRel 0)\r\n               (tInd (mkInd \"Coq.Init.Datatypes.nat\" 0))\r\n               (tRel 1)))] : term\r\n  t0 := tCase 0\r\n          (tLambda (nNamed \"k\") (tInd (mkInd \"Top.silly\" 0))\r\n             (tInd (mkInd \"Coq.Init.Datatypes.nat\" 0)))\r\n          (tVar \"k\")\r\n          [(1,\r\n           tLambda (nNamed \"x0\") (tInd (mkInd \"Coq.Init.Datatypes.nat\" 0))\r\n             (tLetIn nAnon (tRel 0) (tInd (mkInd \"Coq.Init.Datatypes.nat\" 0))\r\n                (tRel 1)))] : term\r\n  t1 := tCase 0\r\n          (tLambda (nNamed \"k\") (tInd (mkInd \"Top.silly\" 0))\r\n             (tInd (mkInd \"Coq.Init.Datatypes.nat\" 0)))\r\n          (tVar \"k\")\r\n          [(1,\r\n           tLambda (nNamed \"x0\") (tInd (mkInd \"Coq.Init.Datatypes.nat\" 0))\r\n             (tRel 0))] : term *)\r\n```\r\n\r\nIn any case, this seems fixed in 95a4fcf8cd36e29034e886682ed3a6e2914ce04f?\r\n\r\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337537109/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]