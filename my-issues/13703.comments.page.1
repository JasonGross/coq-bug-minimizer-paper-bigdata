[{"url":"https://api.github.com/repos/coq/coq/issues/comments/753681088","html_url":"https://github.com/coq/coq/issues/13703#issuecomment-753681088","issue_url":"https://api.github.com/repos/coq/coq/issues/13703","id":753681088,"node_id":"MDEyOklzc3VlQ29tbWVudDc1MzY4MTA4OA==","user":{"login":"JasonGross","id":396076,"node_id":"MDQ6VXNlcjM5NjA3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/396076?v=4","gravatar_id":"","url":"https://api.github.com/users/JasonGross","html_url":"https://github.com/JasonGross","followers_url":"https://api.github.com/users/JasonGross/followers","following_url":"https://api.github.com/users/JasonGross/following{/other_user}","gists_url":"https://api.github.com/users/JasonGross/gists{/gist_id}","starred_url":"https://api.github.com/users/JasonGross/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JasonGross/subscriptions","organizations_url":"https://api.github.com/users/JasonGross/orgs","repos_url":"https://api.github.com/users/JasonGross/repos","events_url":"https://api.github.com/users/JasonGross/events{/privacy}","received_events_url":"https://api.github.com/users/JasonGross/received_events","type":"User","site_admin":false},"created_at":"2021-01-03T21:49:54Z","updated_at":"2021-01-03T21:49:54Z","author_association":"MEMBER","body":"Here are a couple more strategies that I want:\r\n- cbv/vm_compute ordering of computation (including recursing under lambdas last) --- that is, I want a version of `cbv` where, in addition to deciding whether or not to have `beta`, `iota`, `zeta`, I can also replace the `delta` steps with any `rewrite_strat` strategy\r\n- lazy ordering of computation (including recursing under lambdas last); same as above, but with the strategy of `lazy`\r\n- the ability to have fine-grained control over order of subterm recursion based on the head constant and/or the types of the arguments.  That is, I want a simplified version of `match` with pointers, where I can write something like\r\n```coq\r\nrewrite_strat\r\n  fix F goal.\r\n    match goal with\r\n    | nat_rect ?P _ _ ?n ?arg => try (F n; F arg; F goal)\r\n    | nat_rect ?P _ _ ?n => try (F n; F goal)\r\n    | nat_rect ?P _ _ O => eval unfold nat_rect at 1; eval cbv beta iota; F goal\r\n    | nat_rect ?P ?Z_case ?S_case (S ?n) => eval change (S_case n (nat_rect P Z_case S_case n); F goal\r\n    | _ => some_strat\r\n    end.\r\n```","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/753681088/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]