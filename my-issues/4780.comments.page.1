[{"url":"https://api.github.com/repos/coq/coq/issues/comments/337543046","html_url":"https://github.com/coq/coq/issues/4780#issuecomment-337543046","issue_url":"https://api.github.com/repos/coq/coq/issues/4780","id":337543046,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0MzA0Ng==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-06-04T05:18:43Z","updated_at":"2017-10-18T10:27:40Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nNot sure what's going on (something with primitive projections?), but this should be caught before [Defined], if it's even wrong:\n\n(* -*- mode: coq; coq-prog-args: (\"-emacs\" \"-R\" \".\" \"Top\" \"-top\" \"bug_bad_induction_01\") -*- *)\n(* File reduced by coq-bug-finder from original input, then from 1889 lines to 144 lines, then from 158 lines to 144 lines *)\n(* coqc version 8.5pl1 (April 2016) compiled on Apr 18 2016 14:48:5 with OCaml 4.02.3\n   coqtop version 8.5pl1 (April 2016) *)\nAxiom proof_admitted : False.\nTactic Notation \"admit\" := abstract case proof_admitted.\nGlobal Set Universe Polymorphism.\nGlobal Set Asymmetric Patterns.\nNotation \"'exists' x .. y , p\" := (sigT (fun x => .. (sigT (fun y => p)) ..))\n  (at level 200, x binder, right associativity,\n   format \"'[' 'exists'  '/  ' x  ..  y ,  '/  ' p ']'\")\n  : type_scope.\nDefinition relation (A : Type) := A -> A -> Type.\nClass Transitive {A} (R : relation A) := transitivity : forall x y z, R x y -> R y z -> R x z.\nTactic Notation \"etransitivity\" open_constr(y) :=\n  let R := match goal with |- ?R ?x ?z => constr:(R) end in\n  let x := match goal with |- ?R ?x ?z => constr:(x) end in\n  let z := match goal with |- ?R ?x ?z => constr:(z) end in\n  refine (@ transitivity _ R _ x y z _ _).\nTactic Notation \"etransitivity\" := etransitivity _.\nNotation \"( x ; y )\" := (existT _ x y) : fibration_scope.\nOpen Scope fibration_scope.\nNotation pr1 := projT1.\nNotation pr2 := projT2.\nNotation \"x .1\" := (projT1 x) (at level 3) : fibration_scope.\nNotation \"x .2\" := (projT2 x) (at level 3) : fibration_scope.\nInductive paths {A : Type} (a : A) : A -> Type := idpath : paths a a.\nArguments idpath {A a} , [A] a.\nArguments paths_rect [A] a P f y p.\nNotation \"x = y :> A\" := (@ paths A x y) : type_scope.\nNotation \"x = y\" := (x = y :>_) : type_scope.\nDelimit Scope path_scope with path.\nLocal Open Scope path_scope.\nDefinition concat {A : Type} {x y z : A} (p : x = y) (q : y = z) : x = z :=\n  match p, q with idpath, idpath => idpath end.\nInstance transitive_paths {A} : Transitive (@ paths A) | 0 := @ concat A.\nDefinition inverse {A : Type} {x y : A} (p : x = y) : y = x\n  := match p with idpath => idpath end.\nNotation \"1\" := idpath : path_scope.\nNotation \"p @  q\" := (concat p q) (at level 20) : path_scope.\nNotation \"p ^\" := (inverse p) (at level 3) : path_scope.\nDefinition transport {A : Type} (P : A -> Type) {x y : A} (p : x = y) (u : P x) : P y :=\n  match p with idpath => u end.\nNotation \"p # x\" := (transport _ p x) (right associativity, at level 65, only parsing) : path_scope.\nDefinition ap {A B:Type} (f:A -> B) {x y:A} (p:x = y) : f x = f y\n  := match p with idpath => idpath end.\nDefinition apD {A:Type} {B:A->Type} (f:forall a:A, B a) {x y:A} (p:x=y):\n  p # (f x) = f y\n  := match p with idpath => idpath end.\nLemma transport_compose {A B} {x y : A} (P : B -> Type) (f : A -> B)\n  (p : x = y) (z : P (f x))\n  : transport (fun x => P (f x)) p z  =  transport P (ap f p) z.\nadmit.\nDefined.\nLocal Open Scope path_scope.\nGeneralizable Variables X A B C f g n.\nDefinition path_sigma_uncurried {A : Type} (P : A -> Type) (u v : sigT P)\n  (pq : {p : u.1 = v.1 &  p # u.2 = v.2})\n  : u = v\n  := match pq with\n       | existT p q =>\n         match u, v return (forall p0 : (u.1 = v.1), (p0 # u.2 = v.2) -> (u=v)) with\n           | (x;y), (x';y') => fun p1 q1 =>\n             match p1 in (_ = x'') return (forall y'', (p1 # y = y'') -> (x;y)=(x'';y'')) with\n               | idpath => fun y' q2 =>\n                 match q2 in (_ = y'') return (x;y) = (x;y'') with\n                   | idpath => 1\n                 end\n             end y' q1\n         end p q\n     end.\nDefinition path_sigma {A : Type} (P : A -> Type) (u v : sigT P)\n  (p : u.1 = v.1) (q : p # u.2 = v.2)\n  : u = v\n  := path_sigma_uncurried P u v (p;q).\nDefinition projT1_path `{P : A -> Type} {u v : sigT P} (p : u = v)\n  : u.1 = v.1\n  :=\n  ap (@ projT1 _ _) p.\nNotation \"p ..1\" := (projT1_path p) (at level 3) : fibration_scope.\nDefinition projT2_path `{P : A -> Type} {u v : sigT P} (p : u = v)\n  : p..1 # u.2 = v.2\n  := (transport_compose P (@ projT1 _ _) p u.2)^\n     @  (@ apD {x:A & P x} _ (@ projT2 _ _) _ _ p).\nNotation \"p ..2\" := (projT2_path p) (at level 3) : fibration_scope.\nDefinition eta_path_sigma_uncurried `{P : A -> Type} {u v : sigT P}\n  (p : u = v)\n  : path_sigma_uncurried _ _ _ (p..1; p..2) = p.\nadmit.\nDefined.\nDefinition eta_path_sigma `{P : A -> Type} {u v : sigT P} (p : u = v)\n  : path_sigma _ _ _ (p..1) (p..2) = p\n  := eta_path_sigma_uncurried p.\nDefinition path_path_sigma_uncurried {A : Type} (P : A -> Type) (u v : sigT P)\n  (p q : u = v)\n  (rs : {r : p..1 = q..1 & transport (fun x => transport P x u.2 = v.2) r p..2 = q..2})\n  : p = q.\nProof.\n  destruct rs, p, u.\n  etransitivity; [ | apply eta_path_sigma ].\n  simpl in *.\n  match goal with H : _ = _ |- _ => induction H end.\n  admit.\nDefined. (* Error:\nIn environment\nA : Type\nP : A -> Type\nu : exists x, P x\nv : exists x, P x\np : u = v\nq : u = v\nrs :\nexists r : p ..1 = q ..1,\n  transport (fun x : u .1 = v .1 => transport P x u .2 = v .2) r p ..2 = q ..2\nx : p ..1 = q ..1\np0 : transport (fun x : u .1 = v .1 => transport P x u .2 = v .2) x p ..2 = q ..2\nq0 : u = u\nx0 : 1 ..1 = q0 ..1\np1 : transport (fun x : u .1 = u .1 => transport P x u .2 = u .2) x0 1 ..2 = q0 ..2\nx1 : A\np2 : P x1\nq1 : (x1; p2) = (x1; p2)\nx2 : 1 ..1 = q1 ..1\np3 :\ntransport (fun x : (x1; p2) .1 = (x1; p2) .1 => transport P x (x1; p2) .2 = (x1; p2) .2) x2 1 ..2 =\nq1 ..2\nThe term\n \"let p1 := q1 ..2 in\n  paths_rect (transport (fun x : x1 = x1 => transport P x p2 = p2) x2 1 ..2)\n    (fun (p3 : transport P q1 ..1 p2 = p2)\n       (_ : transport (fun x : x1 = x1 => transport P x p2 = p2) x2 1 ..2 = p3) =>\n     1 = path_sigma P (x1; p2) (x1; p2) q1 ..1 p3)\n    (path_path_sigma_uncurried_subproof A P x1 p2 q1 x2) p1 p3\" has type\n \"1 = path_sigma P (x1; p2) (x1; p2) q1 ..1 q1 ..2\" while it is expected to have type\n \"1 = path_sigma P (x1; p2) (x1; p2) q1 ..1 q1 ..2\".\n *)\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337543046/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337543048","html_url":"https://github.com/coq/coq/issues/4780#issuecomment-337543048","issue_url":"https://api.github.com/repos/coq/coq/issues/4780","id":337543048,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0MzA0OA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-06-04T05:20:00Z","updated_at":"2017-10-18T10:27:41Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nOops, not primitive projections.  But possibly universe polymorphism, since removing that makes it go through.  Matthieu, I'm tentatively assigning this to you, based on that.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337543048/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337543050","html_url":"https://github.com/coq/coq/issues/4780#issuecomment-337543050","issue_url":"https://api.github.com/repos/coq/coq/issues/4780","id":337543050,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0MzA1MA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-07-20T08:55:40Z","updated_at":"2017-10-18T10:27:41Z","author_association":"CONTRIBUTOR","body":"Comment author: @mattam82\n\nAnother admit bug...\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337543050/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337543051","html_url":"https://github.com/coq/coq/issues/4780#issuecomment-337543051","issue_url":"https://api.github.com/repos/coq/coq/issues/4780","id":337543051,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0MzA1MQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-07-20T08:55:54Z","updated_at":"2017-10-18T10:27:41Z","author_association":"CONTRIBUTOR","body":"Comment author: @mattam82\n\nWell, abstract actually\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337543051/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337543053","html_url":"https://github.com/coq/coq/issues/4780#issuecomment-337543053","issue_url":"https://api.github.com/repos/coq/coq/issues/4780","id":337543053,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0MzA1Mw==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-07-20T10:36:49Z","updated_at":"2017-10-18T10:27:41Z","author_association":"CONTRIBUTOR","body":"Comment author: @mattam82\n\nWell, that was letin leaking universes actually, strangely enough we didn't catch it yet, it's already present in 8.5. Testing on the contribs just in case: https://ci.inria.fr/coq/view/coq-contribs/job/coq-contribs/297/\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337543053/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337543054","html_url":"https://github.com/coq/coq/issues/4780#issuecomment-337543054","issue_url":"https://api.github.com/repos/coq/coq/issues/4780","id":337543054,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0MzA1NA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-07-20T16:41:28Z","updated_at":"2017-10-18T10:27:41Z","author_association":"CONTRIBUTOR","body":"Comment author: @mattam82\n\nFixed in 8.6 branch, backporting to 8.5 ongoing\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337543054/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337543055","html_url":"https://github.com/coq/coq/issues/4780#issuecomment-337543055","issue_url":"https://api.github.com/repos/coq/coq/issues/4780","id":337543055,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0MzA1NQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-07-20T16:43:02Z","updated_at":"2017-10-18T10:27:41Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nThanks!\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337543055/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]