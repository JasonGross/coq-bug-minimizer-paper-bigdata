[{"url":"https://api.github.com/repos/coq/coq/issues/comments/337559428","html_url":"https://github.com/coq/coq/issues/5786#issuecomment-337559428","issue_url":"https://api.github.com/repos/coq/coq/issues/5786","id":337559428,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU1OTQyOA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2017-10-15T16:08:17Z","updated_at":"2017-10-30T15:31:36Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\r\n\r\nThis is quite unfortunate:\r\n```\r\nTactic Notation \"myidtac\" string(v) := idtac v.\r\nGoal True.\r\n  myidtac \"foo\". (* <string> *)\r\n```\r\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337559428/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337608632","html_url":"https://github.com/coq/coq/issues/5786#issuecomment-337608632","issue_url":"https://api.github.com/repos/coq/coq/issues/5786","id":337608632,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzYwODYzMg==","user":{"login":"JasonGross","id":396076,"node_id":"MDQ6VXNlcjM5NjA3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/396076?v=4","gravatar_id":"","url":"https://api.github.com/users/JasonGross","html_url":"https://github.com/JasonGross","followers_url":"https://api.github.com/users/JasonGross/followers","following_url":"https://api.github.com/users/JasonGross/following{/other_user}","gists_url":"https://api.github.com/users/JasonGross/gists{/gist_id}","starred_url":"https://api.github.com/users/JasonGross/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JasonGross/subscriptions","organizations_url":"https://api.github.com/users/JasonGross/orgs","repos_url":"https://api.github.com/users/JasonGross/repos","events_url":"https://api.github.com/users/JasonGross/events{/privacy}","received_events_url":"https://api.github.com/users/JasonGross/received_events","type":"User","site_admin":false},"created_at":"2017-10-18T14:24:30Z","updated_at":"2017-10-18T14:24:30Z","author_association":"MEMBER","body":"I expect this should be pretty simple to fix (cc @ppedrot @psteckler ?)","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337608632/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337612048","html_url":"https://github.com/coq/coq/issues/5786#issuecomment-337612048","issue_url":"https://api.github.com/repos/coq/coq/issues/5786","id":337612048,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzYxMjA0OA==","user":{"login":"ppedrot","id":1202327,"node_id":"MDQ6VXNlcjEyMDIzMjc=","avatar_url":"https://avatars.githubusercontent.com/u/1202327?v=4","gravatar_id":"","url":"https://api.github.com/users/ppedrot","html_url":"https://github.com/ppedrot","followers_url":"https://api.github.com/users/ppedrot/followers","following_url":"https://api.github.com/users/ppedrot/following{/other_user}","gists_url":"https://api.github.com/users/ppedrot/gists{/gist_id}","starred_url":"https://api.github.com/users/ppedrot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ppedrot/subscriptions","organizations_url":"https://api.github.com/users/ppedrot/orgs","repos_url":"https://api.github.com/users/ppedrot/repos","events_url":"https://api.github.com/users/ppedrot/events{/privacy}","received_events_url":"https://api.github.com/users/ppedrot/received_events","type":"User","site_admin":false},"created_at":"2017-10-18T14:34:30Z","updated_at":"2017-10-18T14:34:30Z","author_association":"MEMBER","body":"Well, you need to define a generic printer for toplevel Ltac values. Not complicated, but not trivial either. This would be a good thing though, as it would simplify the implementation of `Tacinterp.message_of_value`. Interestingly there is this nice comment in the code:\r\n```\r\n    let tag = pr_argument_type v in\r\n    Ftactic.return (str \"<\" ++ tag ++ str \">\") (** TODO *)\r\n```","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337612048/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337625312","html_url":"https://github.com/coq/coq/issues/5786#issuecomment-337625312","issue_url":"https://api.github.com/repos/coq/coq/issues/5786","id":337625312,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzYyNTMxMg==","user":{"login":"herbelin","id":460771,"node_id":"MDQ6VXNlcjQ2MDc3MQ==","avatar_url":"https://avatars.githubusercontent.com/u/460771?v=4","gravatar_id":"","url":"https://api.github.com/users/herbelin","html_url":"https://github.com/herbelin","followers_url":"https://api.github.com/users/herbelin/followers","following_url":"https://api.github.com/users/herbelin/following{/other_user}","gists_url":"https://api.github.com/users/herbelin/gists{/gist_id}","starred_url":"https://api.github.com/users/herbelin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/herbelin/subscriptions","organizations_url":"https://api.github.com/users/herbelin/orgs","repos_url":"https://api.github.com/users/herbelin/repos","events_url":"https://api.github.com/users/herbelin/events{/privacy}","received_events_url":"https://api.github.com/users/herbelin/received_events","type":"User","site_admin":false},"created_at":"2017-10-18T15:14:12Z","updated_at":"2017-10-18T15:14:12Z","author_association":"MEMBER","body":"@ppedrot: I actually started to support registering printers for `Tacinterp.message_of_value` in the context of #982. I had a problem though, which is that values do not carry (anymore) an `ExtraArg` key. So I was hesitating between keeping a wit there or having yet a different table for registering printer of values (vague remembering of the problem). If you have an opinion, don't hesitate to tell, otherwise, I shall certainly take a decision at some time so that it eventually works.","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337625312/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337628442","html_url":"https://github.com/coq/coq/issues/5786#issuecomment-337628442","issue_url":"https://api.github.com/repos/coq/coq/issues/5786","id":337628442,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzYyODQ0Mg==","user":{"login":"ppedrot","id":1202327,"node_id":"MDQ6VXNlcjEyMDIzMjc=","avatar_url":"https://avatars.githubusercontent.com/u/1202327?v=4","gravatar_id":"","url":"https://api.github.com/users/ppedrot","html_url":"https://github.com/ppedrot","followers_url":"https://api.github.com/users/ppedrot/followers","following_url":"https://api.github.com/users/ppedrot/following{/other_user}","gists_url":"https://api.github.com/users/ppedrot/gists{/gist_id}","starred_url":"https://api.github.com/users/ppedrot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ppedrot/subscriptions","organizations_url":"https://api.github.com/users/ppedrot/orgs","repos_url":"https://api.github.com/users/ppedrot/repos","events_url":"https://api.github.com/users/ppedrot/events{/privacy}","received_events_url":"https://api.github.com/users/ppedrot/received_events","type":"User","site_admin":false},"created_at":"2017-10-18T15:23:37Z","updated_at":"2017-10-18T15:23:37Z","author_association":"MEMBER","body":"@herbelin I'd go for a separate table, although you can modify the EXTEND registering of genargs so that it also declares the corresponding printer for values. Note also that there is everything in the Dyn API to define maps over dynamic types, but it is unluckily not exported in Geninterp.Val.","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337628442/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/340469633","html_url":"https://github.com/coq/coq/issues/5786#issuecomment-340469633","issue_url":"https://api.github.com/repos/coq/coq/issues/5786","id":340469633,"node_id":"MDEyOklzc3VlQ29tbWVudDM0MDQ2OTYzMw==","user":{"login":"herbelin","id":460771,"node_id":"MDQ6VXNlcjQ2MDc3MQ==","avatar_url":"https://avatars.githubusercontent.com/u/460771?v=4","gravatar_id":"","url":"https://api.github.com/users/herbelin","html_url":"https://github.com/herbelin","followers_url":"https://api.github.com/users/herbelin/followers","following_url":"https://api.github.com/users/herbelin/following{/other_user}","gists_url":"https://api.github.com/users/herbelin/gists{/gist_id}","starred_url":"https://api.github.com/users/herbelin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/herbelin/subscriptions","organizations_url":"https://api.github.com/users/herbelin/orgs","repos_url":"https://api.github.com/users/herbelin/repos","events_url":"https://api.github.com/users/herbelin/events{/privacy}","received_events_url":"https://api.github.com/users/herbelin/received_events","type":"User","site_admin":false},"created_at":"2017-10-30T14:56:02Z","updated_at":"2017-10-30T14:56:02Z","author_association":"MEMBER","body":"@jasongross: Actually, I'm a bit confused about the generality of the request. I have a temporary fix, but I don't know what to do in the general case. E.g., if I do:\r\n```coq\r\nTactic Notation \"f\" orient(b) := idtac b. (* orient is the grammar entry for -> and <- *)\r\nGoal True.\r\nf ->\r\n```\r\nWhat do I expect? Do I expect to see written `->`, or do I expect to see written `true` (which is the internal representation of `->` as a Boolean)?\r\n\r\nNote that a similar dilemma exists in OCaml:\r\n```ocaml\r\ntype mybool = bool;;\r\nlet print (b:mybool) = Printf.printf (if b then \"->\" else \"<-\");;\r\n#install_printer print;;\r\n(true:mybool);; (* ->- : bool = *)\r\n(true:bool);;  (* ->- : bool = *)\r\n```\r\nMoreover, in a context with richer datatypes and extended primitives such as `Ltac2`, I suspect that this dilemma will be even more common. For instance, if I take the `not` of an `orient`, do I expect to get something to be printed as an `orient` or as a `bool`?\r\n\r\nOf course, one could also use a dedicated type `orient = L2R | R2L` to ensure the absence of collision, but then, we loose the existing library on `bool`. Another common dilemma...\r\n\r\n[By the way, that OCaml prints \"->\" before \"- : bool =\" seems like a bug.]","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/340469633/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/340477591","html_url":"https://github.com/coq/coq/issues/5786#issuecomment-340477591","issue_url":"https://api.github.com/repos/coq/coq/issues/5786","id":340477591,"node_id":"MDEyOklzc3VlQ29tbWVudDM0MDQ3NzU5MQ==","user":{"login":"herbelin","id":460771,"node_id":"MDQ6VXNlcjQ2MDc3MQ==","avatar_url":"https://avatars.githubusercontent.com/u/460771?v=4","gravatar_id":"","url":"https://api.github.com/users/herbelin","html_url":"https://github.com/herbelin","followers_url":"https://api.github.com/users/herbelin/followers","following_url":"https://api.github.com/users/herbelin/following{/other_user}","gists_url":"https://api.github.com/users/herbelin/gists{/gist_id}","starred_url":"https://api.github.com/users/herbelin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/herbelin/subscriptions","organizations_url":"https://api.github.com/users/herbelin/orgs","repos_url":"https://api.github.com/users/herbelin/repos","events_url":"https://api.github.com/users/herbelin/events{/privacy}","received_events_url":"https://api.github.com/users/herbelin/received_events","type":"User","site_admin":false},"created_at":"2017-10-30T15:19:31Z","updated_at":"2017-10-30T15:19:31Z","author_association":"MEMBER","body":"Maybe a proposal: by default, an `orient` would be printed as a Boolean, i.e. `true` or `false`, but one could provide a syntax, say `idtac orient:(b)` to tell explicitly when one wants a Boolean to be printed as an `orient`?? What do you think?","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/340477591/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/340481448","html_url":"https://github.com/coq/coq/issues/5786#issuecomment-340481448","issue_url":"https://api.github.com/repos/coq/coq/issues/5786","id":340481448,"node_id":"MDEyOklzc3VlQ29tbWVudDM0MDQ4MTQ0OA==","user":{"login":"ppedrot","id":1202327,"node_id":"MDQ6VXNlcjEyMDIzMjc=","avatar_url":"https://avatars.githubusercontent.com/u/1202327?v=4","gravatar_id":"","url":"https://api.github.com/users/ppedrot","html_url":"https://github.com/ppedrot","followers_url":"https://api.github.com/users/ppedrot/followers","following_url":"https://api.github.com/users/ppedrot/following{/other_user}","gists_url":"https://api.github.com/users/ppedrot/gists{/gist_id}","starred_url":"https://api.github.com/users/ppedrot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ppedrot/subscriptions","organizations_url":"https://api.github.com/users/ppedrot/orgs","repos_url":"https://api.github.com/users/ppedrot/repos","events_url":"https://api.github.com/users/ppedrot/events{/privacy}","received_events_url":"https://api.github.com/users/ppedrot/received_events","type":"User","site_admin":false},"created_at":"2017-10-30T15:31:08Z","updated_at":"2017-10-30T15:31:36Z","author_association":"MEMBER","body":"@herbelin I'm afraid that you're just pinpointing at the nonsensical interpretation of tactic notations, i.e. that there exists objects in the semantics that have no syntactical counterpart and thus that cannot be printed whatsoever.\r\n\r\nAs far as Ltac2 is concerned, notations are merely syntactical devices that disappear at parsing time, which I'm deeply convinced is the only sensible thing one can do. So when one writes in Ltac2:\r\n```\r\nLtac2 foo x h :=\r\n  rewrite <- $x in $h.\r\n```\r\nthis is desugared to the following quite-ugly-but-meaningful\r\n```\r\nPrint Ltac2 foo.\r\nfoo : constr -> ident -> unit\r\nfoo :=\r\n  fun x h =>\r\n  let tac := None with cl :=\r\n    Some { Std.on_hyps := Some [h, Std.AllOccurrences, Std.InHyp]; Std.on_concl := Std.NoOccurrences } with rw :=\r\n    [{\r\n     Std.rew_orient\r\n     :=\r\n     Some Std.RTL;\r\n     Std.rew_repeat\r\n     :=\r\n     Std.Precisely 1;\r\n     Std.rew_equatn\r\n     :=\r\n     (fun _ => open_constr:(_), Std.NoBindings)\r\n     }] in\r\n  rewrite0 false rw cl tac\r\n```\r\nObviously this is not very palatable, but the only thing one can hope is that we find some clever way to refactor terms that fall in the right fragment and leave others as-is.","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/340481448/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/340566457","html_url":"https://github.com/coq/coq/issues/5786#issuecomment-340566457","issue_url":"https://api.github.com/repos/coq/coq/issues/5786","id":340566457,"node_id":"MDEyOklzc3VlQ29tbWVudDM0MDU2NjQ1Nw==","user":{"login":"herbelin","id":460771,"node_id":"MDQ6VXNlcjQ2MDc3MQ==","avatar_url":"https://avatars.githubusercontent.com/u/460771?v=4","gravatar_id":"","url":"https://api.github.com/users/herbelin","html_url":"https://github.com/herbelin","followers_url":"https://api.github.com/users/herbelin/followers","following_url":"https://api.github.com/users/herbelin/following{/other_user}","gists_url":"https://api.github.com/users/herbelin/gists{/gist_id}","starred_url":"https://api.github.com/users/herbelin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/herbelin/subscriptions","organizations_url":"https://api.github.com/users/herbelin/orgs","repos_url":"https://api.github.com/users/herbelin/repos","events_url":"https://api.github.com/users/herbelin/events{/privacy}","received_events_url":"https://api.github.com/users/herbelin/received_events","type":"User","site_admin":false},"created_at":"2017-10-30T20:00:58Z","updated_at":"2017-10-30T20:00:58Z","author_association":"MEMBER","body":"> I'm afraid that you're just pinpointing at the nonsensical interpretation of tactic notations, i.e. that there exists objects in the semantics that have no syntactical counterpart and thus that cannot be printed whatsoever.\r\n\r\nI don't think that this is different from what I've shown in OCaml. If there is no syntactical counterpart, we use a canonical printer. If there is a specific printer, we can use it, no?\r\n\r\n> As far as Ltac2 is concerned, notations are merely syntactical devices that disappear at parsing time, which I'm deeply convinced is the only sensible thing one can do. So when one writes in Ltac2:\r\n> ```\r\n> Ltac2 foo x h :=\r\n>  rewrite <- $x in $h.\r\n> ```\r\n> this is desugared to the following quite-ugly-but-meaningful\r\n> ```\r\n> Print Ltac2 foo.\r\n> ```\r\n\r\nInteresting example. I just upgraded to the last version of Ltac2, this is extremely impressive job. If I understand correctly, you have the applicative and custom syntaxes of more than 75 primitive tactics already ported (is that the totality?).\r\n\r\nAbout the notations, it seems that, for `constr`, there is a will to go towards preserving more of the original syntactic structure, so I guess it would also be possible to do so for `Ltac2` in one wishes to. If I understand correctly, this could be done, e.g., by surrounding the expanded code by a capsule which memoizes the original syntax of the expansion, right?\r\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/340566457/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/341664785","html_url":"https://github.com/coq/coq/issues/5786#issuecomment-341664785","issue_url":"https://api.github.com/repos/coq/coq/issues/5786","id":341664785,"node_id":"MDEyOklzc3VlQ29tbWVudDM0MTY2NDc4NQ==","user":{"login":"Zimmi48","id":1108325,"node_id":"MDQ6VXNlcjExMDgzMjU=","avatar_url":"https://avatars.githubusercontent.com/u/1108325?v=4","gravatar_id":"","url":"https://api.github.com/users/Zimmi48","html_url":"https://github.com/Zimmi48","followers_url":"https://api.github.com/users/Zimmi48/followers","following_url":"https://api.github.com/users/Zimmi48/following{/other_user}","gists_url":"https://api.github.com/users/Zimmi48/gists{/gist_id}","starred_url":"https://api.github.com/users/Zimmi48/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Zimmi48/subscriptions","organizations_url":"https://api.github.com/users/Zimmi48/orgs","repos_url":"https://api.github.com/users/Zimmi48/repos","events_url":"https://api.github.com/users/Zimmi48/events{/privacy}","received_events_url":"https://api.github.com/users/Zimmi48/received_events","type":"User","site_admin":false},"created_at":"2017-11-03T10:17:41Z","updated_at":"2017-11-03T10:17:41Z","author_association":"MEMBER","body":"I think the merge of #6047 closes this but please reopen if I'm wrong.","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/341664785/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]