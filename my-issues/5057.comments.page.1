[{"url":"https://api.github.com/repos/coq/coq/issues/comments/337546873","html_url":"https://github.com/coq/coq/issues/5057#issuecomment-337546873","issue_url":"https://api.github.com/repos/coq/coq/issues/5057","id":337546873,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0Njg3Mw==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-08-31T17:59:44Z","updated_at":"2017-10-18T10:40:08Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nGoal True.\n  Info 1 refine I. (* refine I;<unknown>;shelve_unifiable *)\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337546873/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337546874","html_url":"https://github.com/coq/coq/issues/5057#issuecomment-337546874","issue_url":"https://api.github.com/repos/coq/coq/issues/5057","id":337546874,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0Njg3NA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-09-01T06:37:21Z","updated_at":"2017-10-18T10:40:08Z","author_association":"CONTRIBUTOR","body":"Comment author: @silene\n\nI am not sure what should be done there. The \"<unknown>\" part corresponds to an actual tactic (meaning that it is a proper function in the new tactic monad). But since it does not have a user-accessible name, there is nothing meaningful to display here. I guess we could replace <unknown> with <implementation-detail>.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337546874/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337546875","html_url":"https://github.com/coq/coq/issues/5057#issuecomment-337546875","issue_url":"https://api.github.com/repos/coq/coq/issues/5057","id":337546875,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0Njg3NQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-09-01T07:18:05Z","updated_at":"2017-10-18T10:40:09Z","author_association":"CONTRIBUTOR","body":"Comment author: @herbelin\n\nMy understanding is that the expected output should be \"simple refine I; lazy beta iota; shelve_unifiable\".\n\nIn 8.6, Info 1 seems a bit broken as I get <extratactics::refine@ 0>, probably because of a new level of indirection between refine and what it calls. \n\nJason's message is relative to 8.5 I think. At this time, \"lazy\" was not fully in the monad, hence the <unknown>.\n\nIn 8.6, Info 2 gives the more meaningful \"refine I;shelve_unifiable\" but the call to lazy is missing.\n\nMy understanding  is that there should be a \"lazy beta iota\" to witness the call to the function Tactics.reduce_after_refine. I would suspect that some call to \"Proofview.Trace.name_tactic\" is missing somewhere, but I don't know what is the intent of Arnaud here. Should it be put at the level of \"reduce\" or at an other level in the sequence of calls going from reduce_after_refine to convert_concl? Maybe should it be put at both the reduce and convert_concl levels, so that increasing the level on reduce gives convert_concl??\n\nBTW, \"refine\" should be \"simple refine\" in Info 1 / Info 2, I just pushed a fix for it (in v8.5).\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337546875/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337546876","html_url":"https://github.com/coq/coq/issues/5057#issuecomment-337546876","issue_url":"https://api.github.com/repos/coq/coq/issues/5057","id":337546876,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0Njg3Ng==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-09-01T08:11:23Z","updated_at":"2017-10-18T10:40:09Z","author_association":"CONTRIBUTOR","body":"Comment author: @herbelin\n\nI finally found a comment from Arnaud in tacinterp.ml (TacReduce) somehow telling how to attach Info on \"lazy\". I moved the code towards the more primitive location of Tactics.reduce, which allowed to find another bug of refine, calling \"lazy in *\" instead of \"lazy\".\n\nThis is respectively pushed to v8.6 and v8.5. When merged, \"Info 2\" will give the following in v8.6, which I think is the exact reproducible output.\n\nsimple refine I;lazy beta iota;shelve_unifiable\n\nTwo coqdev questions:\n\n- should we log convert_concl too?\n- name_tactic worked before enter but not inside the scope of enter - did not try to understand why, but as the result I could not get the \"official\" env to pass to the tactic printer; what did I do wrong?\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337546876/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337546877","html_url":"https://github.com/coq/coq/issues/5057#issuecomment-337546877","issue_url":"https://api.github.com/repos/coq/coq/issues/5057","id":337546877,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0Njg3Nw==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-09-01T12:54:31Z","updated_at":"2017-10-18T10:40:09Z","author_association":"CONTRIBUTOR","body":"Comment author: @ppedrot\n\nI'm pretty sure that we should not hardwire debugging information in ML-side tactics like Hugo did in 18046e2, for various reasons. The first one that comes to my mind is efficiency. Debugging has a cost, and it is not reasonable to expect that all users should pay for a unusual operation. The second one is that it is mostly meaningless, that is, it gives access to implementation details the Ltac user is not aware of, and should not anyway. I think that the granularity of the debugging trace should be defined by Ltac-side constructions, i.e. a proper Ltac definition, or a primitive TACTIC EXTEND, or a notation, but it should never ever mention ML functions.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337546877/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337546881","html_url":"https://github.com/coq/coq/issues/5057#issuecomment-337546881","issue_url":"https://api.github.com/repos/coq/coq/issues/5057","id":337546881,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0Njg4MQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-09-01T12:55:53Z","updated_at":"2017-10-18T10:40:09Z","author_association":"CONTRIBUTOR","body":"Comment author: @ppedrot\n\nIn particular, in the provided example, one should get:\n\nGoal True.\n  Info 1 refine I. (* refine I *)\n\nas there is no underlying implementation bits that make sense to the tactic user.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337546881/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337546883","html_url":"https://github.com/coq/coq/issues/5057#issuecomment-337546883","issue_url":"https://api.github.com/repos/coq/coq/issues/5057","id":337546883,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0Njg4Mw==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-09-01T17:28:15Z","updated_at":"2017-10-18T10:40:09Z","author_association":"CONTRIBUTOR","body":"Comment author: @herbelin\n\nFor efficiency, is it really noticeable? In the absence of Info, nothing is recorded, and, when recording, recording is moreover done lazily.\n\nThe question of what is a meaningful information to give is however a key question. What to propose to address the current (unstable) situation?\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337546883/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337546885","html_url":"https://github.com/coq/coq/issues/5057#issuecomment-337546885","issue_url":"https://api.github.com/repos/coq/coq/issues/5057","id":337546885,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0Njg4NQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-09-01T17:37:35Z","updated_at":"2017-10-18T10:40:10Z","author_association":"CONTRIBUTOR","body":"Comment author: @ppedrot\n\n(In reply to Hugo Herbelin from comment [BZ#6](https://github.com/coq/coq/issues?q=is%3Aissue%20%22Original%20bug%20ID%3A%20BZ%236%22))\n> For efficiency, is it really noticeable? In the absence of Info, nothing is\n> recorded, and, when recording, recording is moreover done lazily.\n\nIt is true that it may be hardly noticeable by now, but I am afraid that adding debugging instructions in many basic tactics may end up accumulating and costing in the long run.\n\n> The question of what is a meaningful information to give is however a key\n> question. What to propose to address the current (unstable) situation?\n\nWhat do users think about my proposal above (definitions, notations and EXTEND)? I think it is easy to implement by instrumenting the relevant pieces of code.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337546885/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337546886","html_url":"https://github.com/coq/coq/issues/5057#issuecomment-337546886","issue_url":"https://api.github.com/repos/coq/coq/issues/5057","id":337546886,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0Njg4Ng==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-09-01T17:53:56Z","updated_at":"2017-10-18T10:40:10Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nI don't think I've ever had a tactic script where there were enough tactics run that the overhead of checking a boolean would be too costly, and I don't think a slowdown of a few percent matters much when I'm actually using [Info].  Perhaps typeclass instance search is an exception, but even there, trying to gain a few percent by not instrumenting low-level tactic formers seems silly when there is the potential for factors of 2 or more by being smarter about how to search.\n\n> The second one is that it is mostly meaningless, that is, it gives access to\n> implementation details the Ltac user is not aware of, and should not anyway.\n> I think that the granularity of the debugging trace should be defined by Ltac-side\n> constructions, i.e. a proper Ltac definition, or a primitive TACTIC EXTEND, or a \n> notation, but it should never ever mention ML functions.\n\nI agree that it should not mention ML functions which cannot be called by the user, but I disagree that the bottom level should be defined by TACTIC EXTEND.  For example, in [autorewrite] and [rewrite_strat], I want to have access to the individual rewrites run, and the tactics called to solve the side-conditions.  In [eauto] and [auto] and [typeclasses eauto], I want to know what hints / lemmas were applied, and how.  Even in [rewrite], I think it would be interesting to see what [refine]s or [pattern]s were done.  If [refine term] does the equivalent of [simple refine term; lazy beta iota in *; shelve_unifiable], I think this is interesting and useful information, and should show up if you give [Info] the right arguments.  My model of Ltac is that everything bottoms out at [simple refine] and [clear] (and maybe [clearbody] and [move] and [shelve] and [cycle]) at the bottom, at it'd be nice to be able to use [Info] to get a good sense of how accurate this is.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337546886/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337546887","html_url":"https://github.com/coq/coq/issues/5057#issuecomment-337546887","issue_url":"https://api.github.com/repos/coq/coq/issues/5057","id":337546887,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0Njg4Nw==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-09-08T17:08:04Z","updated_at":"2017-10-18T10:40:10Z","author_association":"CONTRIBUTOR","body":"Comment author: @ppedrot\n\nThe problem is that most of the time, the ML-facing tactics differ subtly from the user-facing ones, in the sense that, even assuming reparsability, there is a lot of case where the semantics of the info output is not the one of the whole tactic. And this is not a bug, because there is no reason for ML tactics to be in one-to-one correspondence with Ltac tactics, this is implementation details.\n\nI agree that we need to have a better debugging support for Ltac, but I believe it is nonsensical to forcibly write it in terms of Ltac primitives. In particular, inserting Ltac terms in ML traces is hardwiring the use of Ltac as the holy omnipresent tactic language, which is precisely what I'm currently struggling against. Would you be happy with a better debugger even though it doesn't pretend it is Ltac?\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337546887/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337546890","html_url":"https://github.com/coq/coq/issues/5057#issuecomment-337546890","issue_url":"https://api.github.com/repos/coq/coq/issues/5057","id":337546890,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0Njg5MA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-09-12T18:27:30Z","updated_at":"2017-10-18T10:40:10Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nSure, I'd be mostly happy with a good debugger that doesn't pretend to be Ltac.\n\nUntil we have that, though, it'd be nice to be able to see, at least, what \ndecisions are made by things like [auto], [eauto], [autorewrite], [autounfold], \nand [rewrite_strat], with something like Info\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337546890/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337546891","html_url":"https://github.com/coq/coq/issues/5057#issuecomment-337546891","issue_url":"https://api.github.com/repos/coq/coq/issues/5057","id":337546891,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0Njg5MQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-09-15T15:50:24Z","updated_at":"2017-10-18T10:40:10Z","author_association":"CONTRIBUTOR","body":"Comment author: @herbelin\n\n(In reply to Pierre-Marie Pédrot from comment [BZ#9](https://github.com/coq/coq/issues?q=is%3Aissue%20%22Original%20bug%20ID%3A%20BZ%239%22))\n> The problem is that most of the time, the ML-facing tactics differ subtly\n> from the user-facing ones, in the sense that, even assuming reparsability,\n> there is a lot of case where the semantics of the info output is not the one\n> of the whole tactic. And this is not a bug, because there is no reason for\n> ML tactics to be in one-to-one correspondence with Ltac tactics, this is\n> implementation details.\n\nIsn't a compromise possible? At least in the current case, we are using the syntax of tactics (shelve_unifiable, lazy, simple_refine) for what seems to fit the ML implementation, no? Or are there details I'm overlooking?\n\n> In particular, inserting Ltac terms in ML traces is hardwiring the use of\n> Ltac as the holy omnipresent tactic language\n\nI don't see why inserting Ltac terms in ML traces is hardwiring the use of\nLtac as the holy omnipresent tactic language. Would some or all tactics change, then Info will change too. The question of decomposing a complex tactic into more elementary components is different from the question of having components expressed in Ltac or in another language, no?\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337546891/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337546893","html_url":"https://github.com/coq/coq/issues/5057#issuecomment-337546893","issue_url":"https://api.github.com/repos/coq/coq/issues/5057","id":337546893,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0Njg5Mw==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-09-15T17:13:10Z","updated_at":"2017-10-18T10:40:10Z","author_association":"CONTRIBUTOR","body":"Comment author: @ppedrot\n\n(In reply to Hugo Herbelin from comment [BZ#11](https://github.com/coq/coq/issues?q=is%3Aissue%20%22Original%20bug%20ID%3A%20BZ%2311%22))\n> Isn't a compromise possible? At least in the current case, we are using the\n> syntax of tactics (shelve_unifiable, lazy, simple_refine) for what seems to\n> fit the ML implementation, no? Or are there details I'm overlooking?\n\nThis is what worries me, actually. Should we have to tell the users \"look, this looks like regular Ltac invocations, but it is not\"? If we start mixing Ltac and something-that-looks-like-it-but-is-not, I'm foreseeing a mess of miscomprehensions, and people starting asking for features I don't really wish to see landing in the proof engine.\n\n> I don't see why inserting Ltac terms in ML traces is hardwiring the use of\n> Ltac as the holy omnipresent tactic language. Would some or all tactics\n> change, then Info will change too. The question of decomposing a complex\n> tactic into more elementary components is different from the question of\n> having components expressed in Ltac or in another language, no?\n\nYes, but in this case, we need to come up with a grammar that reflects the ML implementation, rather that piggybacking on an Ltac syntax that has a close but subtly distinct behaviour. In particular, we should not rely on Ltac printers. Remember, we want to make Coq Ltac-agnostic.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337546893/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337546896","html_url":"https://github.com/coq/coq/issues/5057#issuecomment-337546896","issue_url":"https://api.github.com/repos/coq/coq/issues/5057","id":337546896,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0Njg5Ng==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-09-15T17:22:00Z","updated_at":"2017-10-18T10:40:11Z","author_association":"CONTRIBUTOR","body":"Comment author: @herbelin\n\n(In reply to Pierre-Marie Pédrot from comment [BZ#12](https://github.com/coq/coq/issues?q=is%3Aissue%20%22Original%20bug%20ID%3A%20BZ%2312%22))\n> (In reply to Hugo Herbelin from comment [BZ#11](https://github.com/coq/coq/issues?q=is%3Aissue%20%22Original%20bug%20ID%3A%20BZ%2311%22))\n> > Isn't a compromise possible? At least in the current case, we are using the\n> > syntax of tactics (shelve_unifiable, lazy, simple_refine) for what seems to\n> > fit the ML implementation, no? Or are there details I'm overlooking?\n> \n> This is what worries me, actually. Should we have to tell the users \"look,\n> this looks like regular Ltac invocations, but it is not\"? If we start mixing\n> Ltac and something-that-looks-like-it-but-is-not, I'm foreseeing a mess of\n> miscomprehensions, and people starting asking for features I don't really\n> wish to see landing in the proof engine.\n> \n> > I don't see why inserting Ltac terms in ML traces is hardwiring the use of\n> > Ltac as the holy omnipresent tactic language. Would some or all tactics\n> > change, then Info will change too. The question of decomposing a complex\n> > tactic into more elementary components is different from the question of\n> > having components expressed in Ltac or in another language, no?\n> \n> Yes, but in this case, we need to come up with a grammar that reflects the\n> ML implementation, rather that piggybacking on an Ltac syntax that has a\n> close but subtly distinct behaviour. In particular, we should not rely on\n> Ltac printers. Remember, we want to make Coq Ltac-agnostic.\n\nI don't see why we could not see Info as coming with the tactic language. Info for another tactic language will use printers of this other tactic language (and not give infos if there is no meaningful infos to give).\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337546896/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337546898","html_url":"https://github.com/coq/coq/issues/5057#issuecomment-337546898","issue_url":"https://api.github.com/repos/coq/coq/issues/5057","id":337546898,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0Njg5OA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-09-15T17:48:18Z","updated_at":"2017-10-18T10:40:11Z","author_association":"CONTRIBUTOR","body":"Comment author: @ppedrot\n\n(In reply to Hugo Herbelin from comment [BZ#13](https://github.com/coq/coq/issues?q=is%3Aissue%20%22Original%20bug%20ID%3A%20BZ%2313%22))\n> I don't see why we could not see Info as coming with the tactic language.\n> Info for another tactic language will use printers of this other tactic\n> language (and not give infos if there is no meaningful infos to give).\n\nWhich brings us back to the start of this discussion: tactic traces should be given at the level of the user-facing language (including subcalls like in auto, as discussed before), not at the level of primitive ML tactics.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337546898/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337546899","html_url":"https://github.com/coq/coq/issues/5057#issuecomment-337546899","issue_url":"https://api.github.com/repos/coq/coq/issues/5057","id":337546899,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0Njg5OQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-09-15T17:58:31Z","updated_at":"2017-10-18T10:40:11Z","author_association":"CONTRIBUTOR","body":"Comment author: @herbelin\n\n(In reply to Pierre-Marie Pédrot from comment [BZ#14](https://github.com/coq/coq/issues?q=is%3Aissue%20%22Original%20bug%20ID%3A%20BZ%2314%22))\n> (In reply to Hugo Herbelin from comment [BZ#13](https://github.com/coq/coq/issues?q=is%3Aissue%20%22Original%20bug%20ID%3A%20BZ%2313%22))\n> > I don't see why we could not see Info as coming with the tactic language.\n> > Info for another tactic language will use printers of this other tactic\n> > language (and not give infos if there is no meaningful infos to give).\n> \n> Which brings us back to the start of this discussion: tactic traces should\n> be given at the level of the user-facing language (including subcalls like\n> in auto, as discussed before), not at the level of primitive ML tactics.\n\nSo, your proposal would be that the Info tree is not built by simple_refine and co themselves but by refine at the time of calling simple_refine and co (assuming of course that this decomposition is interesting)? I think I'm fine with that.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337546899/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337546901","html_url":"https://github.com/coq/coq/issues/5057#issuecomment-337546901","issue_url":"https://api.github.com/repos/coq/coq/issues/5057","id":337546901,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0NjkwMQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-09-15T18:00:44Z","updated_at":"2017-10-18T10:40:11Z","author_association":"CONTRIBUTOR","body":"Comment author: @ppedrot\n\n(In reply to Hugo Herbelin from comment [BZ#15](https://github.com/coq/coq/issues?q=is%3Aissue%20%22Original%20bug%20ID%3A%20BZ%2315%22))\n> So, your proposal would be that the Info tree is not built by simple_refine\n> and co themselves but by refine at the time of calling simple_refine and co\n> (assuming of course that this decomposition is interesting)? I think I'm\n> fine with that.\n\nYour message is not really clear, but I think we do agree on the intended semantics.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337546901/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337546903","html_url":"https://github.com/coq/coq/issues/5057#issuecomment-337546903","issue_url":"https://api.github.com/repos/coq/coq/issues/5057","id":337546903,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0NjkwMw==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-09-15T18:05:00Z","updated_at":"2017-10-18T10:40:11Z","author_association":"CONTRIBUTOR","body":"Comment author: @herbelin\n\nI mean having the Proofview.Trace.name_tactic not in Refine.refine but in the code of Extratactics.refine_tac surrounding the call to Refine.refine.\n\nWhat does Arnaud think about that?\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337546903/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337546904","html_url":"https://github.com/coq/coq/issues/5057#issuecomment-337546904","issue_url":"https://api.github.com/repos/coq/coq/issues/5057","id":337546904,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0NjkwNA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-09-27T20:18:41Z","updated_at":"2017-10-18T10:40:12Z","author_association":"CONTRIBUTOR","body":"Comment author: @herbelin\n\nI'm personally satisfied with the current situation (as in comment 3), which \"fixes\" the \"unknown\". What was pending is not strictly speaking the resolution of the \"unknown\" but the granularity to give to Info in general. So, if PMP agrees, we can maybe close this bug, and open a discussion on Info on another medium.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337546904/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]