[{"url":"https://api.github.com/repos/coq/coq/issues/comments/337527971","html_url":"https://github.com/coq/coq/issues/3846#issuecomment-337527971","issue_url":"https://api.github.com/repos/coq/coq/issues/3846","id":337527971,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyNzk3MQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-12-10T00:05:47Z","updated_at":"2017-10-18T09:42:42Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nThis occurs in both 8.4 and trunk:\n\n$ cat A.v\nRecord aR := { aF : nat ; another : nat }.\n\n$ cat B.v\nRequire Import A.\n\nModule Bar.\n  Definition foo (x : aR) := x.(aF).\nEnd Bar.\n\nModule Application.\n  Include A.\n  Include Bar.\nEnd Application.\n\nExtraction \"B\" Application.\n\n$ coq_makefile -R . Top A.v B.v B.ml B.mli | make -f - all COQSRCLIBS=\nocamldep -slash  \"B.mli\" > \"B.mli.d\" || ( RV=$?; rm -f \"B.mli.d\"; exit ${RV} )\nocamldep -slash  \"B.ml\" > \"B.ml.d\" || ( RV=$?; rm -f \"B.ml.d\"; exit ${RV} )\n\"coqdep\" -c -R \".\" Top \"B.v\" > \"B.v.d\" || ( RV=$?; rm -f \"B.v.d\"; exit ${RV} )\n\"coqdep\" -c -R \".\" Top \"A.v\" > \"A.v.d\" || ( RV=$?; rm -f \"A.v.d\"; exit ${RV} )\n\"coqc\"  -q  -R \".\" Top   A\n\"coqc\"  -q  -R \".\" Top   B\nocamlc -c -rectypes -thread    -I /afs/csail.mit.edu/u/j/jgross/.local64/lib/ocaml/camlp5 B.mli\nocamlc -c -rectypes -thread    -I /afs/csail.mit.edu/u/j/jgross/.local64/lib/ocaml/camlp5 B.ml\nFile \"B.ml\", line 34, characters 6-15:\nError: Unbound record field Coq__2.aF\nmake: *** [B.cmo] Error 2\n\n$ cat B.ml\ntype nat =\n| O\n| S of nat\n\nmodule Coq__1 = struct\n type aR = { aF : nat; another : nat }\nend\ntype aR = Coq__1.aR = { aF : nat; another : nat }\n\nmodule Coq__2 = struct\n (** val aF : aR -> nat **)\n\n let aF x = x.aF\nend\nlet aF = Coq__2.aF\n\nmodule Application =\n struct\n  type aR = Coq__1.aR = { aF : nat; another : nat }\n\n  (** val aF : aR -> nat **)\n\n  let aF a =\n    a.aF\n\n  (** val another : aR -> nat **)\n\n  let another a =\n    a.another\n\n  (** val foo : Coq__1.aR -> nat **)\n\n  let foo x =\n    x.Coq__2.aF\n end\n\n\n\n\nFrom what I can tell, Coq decides to wrap top-level file-modules in their own generate modules when they are later [Include]d (why does Coq do this?).  It incorrectly decides to prefix record field names with the name of the generated module when they are later used.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337527971/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]