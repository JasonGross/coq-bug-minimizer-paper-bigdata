[{"url":"https://api.github.com/repos/coq/coq/issues/comments/337517043","html_url":"https://github.com/coq/coq/issues/3191#issuecomment-337517043","issue_url":"https://api.github.com/repos/coq/coq/issues/3191","id":337517043,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxNzA0Mw==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2013-12-19T01:47:25Z","updated_at":"2017-10-18T09:11:24Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nA match construct of the form\n\n  match H as H' in (T x) return (T' x H' -> T'' x H') with\n    | con1 a1 => fun _ => r1 a1\n    | con2 a2 => fun _ => r2 a2\n  end arg1\n\nshould reduce to\n\n  match H as H' in (T x) return (T'' x H') with\n    | con1 a1 => r1 a1\n    | con2 a2 => r2 a2\n  end\n\nThat is, if all of the return branches are of the form [fun _ => ...] (i.e., the ... doesn't mention the argument), and the return type of the match doesn't depend on the argument (it's an arrow and not a forall), then the argument should be \"eaten\".\n\nI'm sure this rule has a more general form (it may be a special case of the commutation rule in https://coq.inria.fr/bugs/show_bug.cgi?id=3119#c1, but I think it is one of the most useful instances), but I request this special case because it is one of the components I need to extract the components of, e.g., a path between dependent pairs, using only unification.\n\nI'm a bit worried that this will break the private inductive types hack which allows encoding computational higher inductive types via axioms in Coq.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337517043/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337517045","html_url":"https://github.com/coq/coq/issues/3191#issuecomment-337517045","issue_url":"https://api.github.com/repos/coq/coq/issues/3191","id":337517045,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxNzA0NQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2013-12-20T10:12:18Z","updated_at":"2017-10-18T09:11:24Z","author_association":"CONTRIBUTOR","body":"Comment author: @pirbo\n\nIf you want that the reduction of the kernel does such reductions, it is an unrealistic wish.\nIf you ask for a way in the pretypper to rewrite such terms generated by tactics before sending them to the kernel. I agree and this is on the long term todo list.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337517045/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337517046","html_url":"https://github.com/coq/coq/issues/3191#issuecomment-337517046","issue_url":"https://api.github.com/repos/coq/coq/issues/3191","id":337517046,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxNzA0Ng==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2013-12-20T19:55:49Z","updated_at":"2017-10-18T09:11:24Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nIt would be nice for a way to have the kernel do such reductions (though perhaps via something like CoqMT, where it is up to the user or extension-writer to come up with and justify such rules).\n\nI would settle for a way to deal more quickly and nicely with proof obligations involving such terms.  The problem I am running in to is that by the time I unfold enough definitions to see places where I could apply these rules, the goal is so big that using [rewrite] is very, very slow.  So I have to write lemmas about intermediate steps, and then use something like [autorewrite] with a large number of intermediate lemmas, and it is still rather slow.\n\nThe problem with just having the pre-typer rewrite such cases is that the cases I care about are often the result of composing other lemmas; I don't want them to always show up as unfolded, as would have to be the case if the pretyper rewrote things, but when they can simplify, I would like them to, and quickly.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337517046/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337517047","html_url":"https://github.com/coq/coq/issues/3191#issuecomment-337517047","issue_url":"https://api.github.com/repos/coq/coq/issues/3191","id":337517047,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxNzA0Nw==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-01-02T15:19:23Z","updated_at":"2017-10-18T09:11:24Z","author_association":"CONTRIBUTOR","body":"Comment author: @ppedrot\n\nClosed like bug [BZ#3190](https://github.com/coq/coq/issues?q=is%3Aissue%20%22Original%20bug%20ID%3A%20BZ%233190%22), waiting for greener times.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337517047/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]