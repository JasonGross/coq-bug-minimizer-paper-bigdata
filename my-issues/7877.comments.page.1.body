I don't understand why you say that, once you know where the Qed is, walking back until you find Proof is hard. But I agree Coq should provide a tool to turn proof using suggestions into actual text edits.

Unfortunately it is not easy to attach the proof using suggestion to the Proof sentence, since the message is generated when Qed is executed, deep into the kernel, while only the STM (a very external component) known where the corresponding Proof statement is.

I guess one could restore the printing of module names, I actually don't know why it was removed.
It's not deep in the kernel any more, it's in lemmas.

Gaëtan Gilbert

On 20/06/2018 19:24, Enrico wrote:
> I don't understand why you say that, once you know where the Qed is, 
> walking back until you find Proof is hard. But I agree Coq should 
> provide a tool to turn proof using suggestions into actual text edits.
> 
> Unfortunately it is not easy to attach the proof using suggestion to the 
> Proof sentence, since the message is generated when Qed is executed, 
> deep into the kernel, while only the STM (a very external component) 
> known where the corresponding Proof statement is.
> 
> I guess one could restore the printing of module names, I actually don't 
> know why it was removed.
> 
> —
> You are receiving this because you are subscribed to this thread.
> Reply to this email directly, view it on GitHub 
> <https://github.com/coq/coq/issues/7877#issuecomment-398830637>, or mute 
> the thread 
> <https://github.com/notifications/unsubscribe-auth/ACWQ7BkMVTjWw1aj_F40eWH3ILoHuMo-ks5t-oVdgaJpZM4UvoWQ>.
> 

> I guess one could restore the printing of module names, I actually don't know why it was removed.

Previously this feature was using a debug printer so it printed raw terms, now it is using the normal printer. Anyways what Jason suggests is not robust so please let's not go this route.

If you want to talk with Coq from a script please use a tool that is designed to do that.
> I don't understand why you say that, once you know where the Qed is, walking back until you find Proof is hard. But I agree Coq should provide a tool to turn proof using suggestions into actual text edits.

This does not work if there are nested lemmas, and requires parsing the Coq document.  Consider, for example, the code
```coq

Set Suggest Proof Using.
Section foo.
  Context (v : True).
  Section a.
    Local Ltac Goal x := idtac.
    Local Ltac Qed := idtac.
    Definition Goal x : Set := x.
    Goal True.
      ltac:(Goal True).
      ltac:(Qed).
      exact v.
    Qed.
    Goal True.
      ltac:(Goal True).
      exact v.
    Qed.
    Definition foo: True.
      ltac:(Goal True).
      exact v.
    Qed.
    Definition bar : True.
      ltac:(Goal True).
      ltac:(Qed).
      exact v.
    Qed.
    Definition baz : True.
      Goal True.
        exact I.
      Qed.
      exact v.
    Qed.
    Definition qux : True.
      Time Goal True.
        exact I.
      Qed.
      exact v.
    Qed.
    Definition quxx : True.
      Time (Goal True).
      exact v.
    Qed.
    Definition quxxx : True.
      Check Goal True.
      exact v.
    Qed.
  End a.
End foo.
```

If I wanted to make my script robust to such silly things, I'd need to know which vernacular commands resulted in constr mode vs vernacular mode vs tactic mode (e.g., `Check` vs `Time` vs `Time (...)`), and I'd need to parse comments and strings, and it'd be a mess.  Also dealing with whether or not `Instance :=` open proof mode.

Can't the .aux file get an extra bit of info in the suggest_proof_using lines which has the end-of-line location of the vernac which introduced the constant which is being added by the Qed?
 > ltac:(Goal True). ltac:(Qed).

At the risk of looking dumb, is this valid Coq?


Sure 
~~~coq

Ltac Goal _ := idtac.
Ltac Qed := idtac.

Goal True.
  ltac:(Goal True). ltac:(Qed). 
~~~
I did, in fact, run the code I used here through Coq 8.8 before commenting.  I wouldn't trust myself to get the corner cases right otherwise.  (e.g., I believe `Definition Goal := True` passes but `Definition Theorem := True` fails.)
OK for the trivia, I think I will collect some ideas I have on the .aux topic and mention this issue there
If the print is now in Lemmas I think I can print the full kernel name of the object using a high level pretty printer.
Strictly speaking the print is in vernac/proof_using, but since it's only called from lemmas that's the only upper constraint on its position.
@gares Do you intend to work on that for 8.9? Or should the milestone be moved?
Move the milestone plz
I tried to fix this but I couldn't figure out what the proper printers are.
>I tried to fix this but I couldn't figure out what the proper printers are.

Note the the issue title seems to be just about proof using but then the issue OP says
>It'd be quite useful to have an annotation in the .aux file that gives the location of the . at the end of the Theorem/Definition/Next Obligation./... vernacular. 
I think that if you want to do programmatic manipulation of v files is better to use tools that support that use case such as serapi instead of relying on text hacks, but I dunno.
I agree, the message in question is for user consumption. For that use case, I believe it is quiet OK.

IIRC the .aux file contains a more machine friendly version of the suggestion, that one could be used for tools.
