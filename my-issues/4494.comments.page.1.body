Comment author: @JasonGross

The occurrence numbering of [replace], unlike [set], ignores binders, does not error on invalid locations, and is unreasonably slow.

Require Import Coq.Setoids.Setoid.
Hint Extern 0 => solve [apply reflexivity] : typeclass_instances.
Goal forall x y : nat, (forall k, x = k) = (x = x).
  clear; intros x y.
  Time replace x with y at 1. (* Finished transaction in 6. secs (5.884u,0.092s) *)
  (* gives (forall k : nat, x = k) = (y = x); this is not the first occurrence! *)

This is terrible.  Here's a better version (in 8.4, replace hyp_list with hyp, since set doesn't like hyp_list in 8.4pl6):

Ltac replace_with_at_by x y set_tac tac :=
  let H := fresh in
  let x' := fresh in
  set_tac x' x;
  assert (H : x' = y) by (subst x'; tac);
  clearbody x'; subst x'.
Ltac replace_with_at x y set_tac :=
  let H := fresh in
  let x' := fresh in
  set_tac x' x;
  cut (x' = y);
  [ intro H; clearbody x'; subst x'
  | subst x' ].
Tactic Notation "replace" constr(x) "with" constr(y) := 
  replace_with_at x y ltac:(fun x' x => set (x' := x) ).
Tactic Notation "replace" constr(x) "with" constr(y) "at" ne_integer_list(n) :=
  replace_with_at x y ltac:(fun x' x => set (x' := x) at n ).
Tactic Notation "replace" constr(x) "with" constr(y) "in" "*" :=
  replace_with_at x y ltac:(fun x' x => set (x' := x) in * ).
Tactic Notation "replace" constr(x) "with" constr(y) "in" "*" "at" ne_integer_list(n) :=
  replace_with_at x y ltac:(fun x' x => set (x' := x) in * at n ).
Tactic Notation "replace" constr(x) "with" constr(y) "in" "*" "|-" :=
  replace_with_at x y ltac:(fun x' x => set (x' := x) in * |- ).
Tactic Notation "replace" constr(x) "with" constr(y) "in" "*" "|-" "*" :=
  replace_with_at x y ltac:(fun x' x => set (x' := x) in * |- * ).
Tactic Notation "replace" constr(x) "with" constr(y) "in" "*" "|-" "*" "at" ne_integer_list(n) :=
  replace_with_at x y ltac:(fun x' x => set (x' := x) in * |- * at n ).
Tactic Notation "replace" constr(x) "with" constr(y) "in" hyp_list(H) "|-" "*" :=
  replace_with_at x y ltac:(fun x' x => set (x' := x) in H |- * ).
Tactic Notation "replace" constr(x) "with" constr(y) "in" hyp_list(H) "|-" "*" "at" ne_integer_list(n) :=
  replace_with_at x y ltac:(fun x' x => set (x' := x) in H |- * at n ).
Tactic Notation "replace" constr(x) "with" constr(y) "in" hyp_list(H) "|-" :=
  replace_with_at x y ltac:(fun x' x => set (x' := x) in H |- ).
Tactic Notation "replace" constr(x) "with" constr(y) "in" hyp_list(H) :=
  replace_with_at x y ltac:(fun x' x => set (x' := x) in H ).
Tactic Notation "replace" constr(x) "with" constr(y) "in" hyp_list(H) "at" ne_integer_list(n) :=
  replace_with_at x y ltac:(fun x' x => set (x' := x) in H at n ).
Tactic Notation "replace" constr(x) "with" constr(y) "by" tactic3(tac) := 
  replace_with_at_by x y ltac:(fun x' x => set (x' := x) ) tac.
Tactic Notation "replace" constr(x) "with" constr(y) "at" ne_integer_list(n) "by" tactic3(tac) :=
  replace_with_at_by x y ltac:(fun x' x => set (x' := x) at n ) tac.
Tactic Notation "replace" constr(x) "with" constr(y) "in" "*" "by" tactic3(tac) :=
  replace_with_at_by x y ltac:(fun x' x => set (x' := x) in * ) tac.
Tactic Notation "replace" constr(x) "with" constr(y) "in" "*" "at" ne_integer_list(n) "by" tactic3(tac) :=
  replace_with_at_by x y ltac:(fun x' x => set (x' := x) in * at n ) tac.
Tactic Notation "replace" constr(x) "with" constr(y) "in" "*" "|-" "by" tactic3(tac) :=
  replace_with_at_by x y ltac:(fun x' x => set (x' := x) in * |- ) tac.
Tactic Notation "replace" constr(x) "with" constr(y) "in" "*" "|-" "*" "by" tactic3(tac) :=
  replace_with_at_by x y ltac:(fun x' x => set (x' := x) in * |- * ) tac.
Tactic Notation "replace" constr(x) "with" constr(y) "in" "*" "|-" "*" "at" ne_integer_list(n) "by" tactic3(tac) :=
  replace_with_at_by x y ltac:(fun x' x => set (x' := x) in * |- * at n ) tac.
Tactic Notation "replace" constr(x) "with" constr(y) "in" hyp_list(H) "|-" "*" "by" tactic3(tac) :=
  replace_with_at_by x y ltac:(fun x' x => set (x' := x) in H |- * ) tac.
Tactic Notation "replace" constr(x) "with" constr(y) "in" hyp_list(H) "|-" "*" "at" ne_integer_list(n) "by" tactic3(tac) :=
  replace_with_at_by x y ltac:(fun x' x => set (x' := x) in H |- * at n ) tac.
Tactic Notation "replace" constr(x) "with" constr(y) "in" hyp_list(H) "|-" "by" tactic3(tac) :=
  replace_with_at_by x y ltac:(fun x' x => set (x' := x) in H |- ) tac.
Tactic Notation "replace" constr(x) "with" constr(y) "in" hyp_list(H) "by" tactic3(tac) :=
  replace_with_at_by x y ltac:(fun x' x => set (x' := x) in H ) tac.
Tactic Notation "replace" constr(x) "with" constr(y) "in" hyp_list(H) "at" ne_integer_list(n) "by" tactic3(tac) :=
  replace_with_at_by x y ltac:(fun x' x => set (x' := x) in H at n ) tac.



Presumably there should be a backward compatibility layer that removes this definition, or something.


Comment author: @JasonGross

Oops, replace [subst x'] with [symmetry in H; destruct H].

Test case that passed with built-in [replace] that failed with the version given, but is fixed by this:


Goal forall x y z : nat, x = y -> z = y.
Proof.
  intros x y z H.
  replace x with z in H; [ exact H | ].


Comment author: @JasonGross

Better, here's one that generates the same proof term up to beta zeta reduction:

Ltac replace_with_at_by x y set_tac tac :=
  let H := fresh in
  let x' := fresh in
  set_tac x' x;
  assert (H : y = x') by (subst x'; tac);
  clearbody x'; induction H.
Ltac replace_with_at x y set_tac :=
  let H := fresh in
  let x' := fresh in
  set_tac x' x;
  cut (y = x');
  [ intro H; induction H
  | subst x' ].


Comment author: @herbelin

This is not specifically a problem of replace but a general problem of computation of occurrences in setoid_rewrite.

Require Import Coq.Setoids.Setoid.
Goal forall x y : nat, x=y -> (forall k, x = k) = (x = x).
intros x y H.
rewrite H at 1.
(* (forall k : nat, x = k) = (y = x) *)


Comment author: @JasonGross

Why is replace using setoid machinery?  And what is being done with setoids that takes five seconds?


Comment author: @herbelin

The clause "at" of replace and rewrite has been historically first supported by setoid_rewrite, so there is a switch to setoid_rewrite whenever there is an "at" clause, whatever rewriting problem it is.

I believe the whole set of rewriting tactics deserve a cleaning phase as discussed last year on coqdev a but I don't know what Matthieu is thinking about it.


