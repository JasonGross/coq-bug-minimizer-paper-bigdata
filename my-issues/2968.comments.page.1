[{"url":"https://api.github.com/repos/coq/coq/issues/comments/337513414","html_url":"https://github.com/coq/coq/issues/2968#issuecomment-337513414","issue_url":"https://api.github.com/repos/coq/coq/issues/2968","id":337513414,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxMzQxNA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2013-01-27T19:41:22Z","updated_at":"2017-10-18T09:00:41Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nI do not think that [try t] should ever fail if [t] is a valid tactic.  In particular, if the code [Ltac t := ... .] succeeds, then [try t] should never fail in the context of a goal.  The following code causes [try t] to fail with\n\"\"\"\nToplevel input, characters 29-30:\nIn nested Ltac calls to \"t\" and\n\"(E = (fun _ xyz => (fst (fst xyz), (snd (fst xyz), snd xyz))))\" (with\nE:=?354, H:=H), last term evaluation failed.\nError: The type of this term is a product while it is expected to be\n \"(T0 * T1 * T)%type\".\n\"\"\"\n\n      Local Ltac t := \n        match goal with\n          | [ |- appcontext[?E] ] => is_evar E;\n                                    let H := fresh in\n                                    first [ assert (H : E = (fun _ xyz => (fst (fst xyz), (snd (fst xyz), snd xyz)))) by reflexivity\n                                          | assert (H : E = (fun _ xyz => ((fst xyz, fst (snd xyz)), snd (snd xyz)))) by reflexivity\n                                          | assert (H : E = (fun xyz => (fst (fst xyz), (snd (fst xyz), snd xyz)))) by reflexivity\n                                          | assert (H : E = (fun xyz => ((fst xyz, fst (snd xyz)), snd (snd xyz)))) by reflexivity ];\n                                      clear H\n        end.\n\n      Goal forall T0 T1 T : Type,\n           exists (H : T0 * (T1 * T) -> T0 * T1 * T) (H0 : forall c : Type * Type * Type,\n                                                             fst (fst c) * snd (fst c) * snd c ->\n                                                             fst (fst c) * (snd (fst c) * snd c)),\n             (fun x : T0 * T1 * T => H (H0 (T0, T1, T) x)) = (fun x : T0 * T1 * T => x).\n      intros; repeat esplit.\n      try t.\n\nNote that removing the first two branches of the [first] fixes this problem.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337513414/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337513416","html_url":"https://github.com/coq/coq/issues/2968#issuecomment-337513416","issue_url":"https://api.github.com/repos/coq/coq/issues/2968","id":337513416,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxMzQxNg==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2013-03-14T17:53:27Z","updated_at":"2017-10-18T09:00:42Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nI've found another instance of what I presume to be the same bug, where a branch of a match failing with \"Error: Found type \"Empty_set\" where \"CObject C\" was expected.\" causes the remaining branches of the match to not get tried.\n\nHere's a small test case:\n\nSection foo.\n  Record Functor (objC objD : Type) := { }.\n  Record NT objC objD (F G : @ Functor objC objD) := { CO :> objC -> Type }.\n  Ltac t := match goal with\n              | [ |- NT ?F ?G ] =>\n                (exact (Build_NT F G (fun x : Empty_set => match x with end)))\n              | _ => idtac\n            end.\n  Goal forall objC (F : Functor objC objC),\n         NT F F.\n  intros.\n  t. (* Toplevel input, characters 0-1:\nIn nested Ltac calls to \"t\" and\n\"{| CO := fun x : Empty_set => match x with\n                               end |}\" (with G:=F, F:=F), last term\nevaluation failed.\nError: Found type \"Empty_set\" where \"objC\" was expected. *)\n\n\nI suspect the problem is that there are some cases in which Coq's backtracking mechanism fails to be triggered when there are type errors in constructing the terms.  In particular, I think the kernel assumes that all type errors about functions mean that the Ltac is wrong, or something like that.\n\nHere's another interesting example:\n\nGoal Empty_set.\n  try exact (@ id (true : bool)).\n  try exact true.\n  try exact (@ id unit).\n  try exact (@ id).\n  try exact (let f := (fun x : unit => x) in f).\n  (* everything up to here succeeds, but makes no progress on the goal, as expected *)\n  try exact (fun x : unit => x).\n  (* Toplevel input, characters 11-28:\nError: The type of this term is a product while it is expected to be\n \"Empty_set\". *)\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337513416/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337513418","html_url":"https://github.com/coq/coq/issues/2968#issuecomment-337513418","issue_url":"https://api.github.com/repos/coq/coq/issues/2968","id":337513418,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxMzQxOA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2013-04-16T18:37:32Z","updated_at":"2017-10-18T09:00:42Z","author_association":"CONTRIBUTOR","body":"Comment author: @ppedrot\n\nFixed, but I don't really trust the fixing patch. Specifying what Ltac may catch is a long-term issue.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337513418/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337513419","html_url":"https://github.com/coq/coq/issues/2968#issuecomment-337513419","issue_url":"https://api.github.com/repos/coq/coq/issues/2968","id":337513419,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxMzQxOQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2015-12-18T00:09:27Z","updated_at":"2017-10-18T09:00:42Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nFor future reference, here is a much smaller example that is broken in 8.4pl6 (but is fixed in 8.5):\n\nLtac foo f' :=\n  idtac;\n  let x := constr:(f' (fun x : unit = unit => True)) in idtac.\n\nGoal forall (f' : forall (P : (nat = nat) -> Prop), P = P), True.\n  intro f'.\n  repeat foo f'.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337513419/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]