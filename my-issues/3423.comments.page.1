[{"url":"https://api.github.com/repos/coq/coq/issues/comments/337520920","html_url":"https://github.com/coq/coq/issues/3423#issuecomment-337520920","issue_url":"https://api.github.com/repos/coq/coq/issues/3423","id":337520920,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyMDkyMA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-07-15T10:59:42Z","updated_at":"2022-04-11T21:42:49Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\r\n```coq\r\nSet Universe Polymorphism.\r\nSet Printing Universes.\r\nCheck Type. (* Type@ {Top.65}\r\n     : Type@ {Top.65+1}\r\n(* Top.65 |=  *) *)\r\nCheck ltac:(exact Type). (* Type@ {Top.67}\r\n     : Type@ {Top.67+1}\r\n(* Top.67\r\n   Top.68 |= Top.67 < Top.68\r\n               *) *)\r\n```\r\nIt would be nice to have a way to construct a term on the fly without the extra universe.  For example, say I want to define a notation for Type_1, which should be strictly greater than Set.  I can do\r\n```coq\r\nNotation Type1 := ltac:(let U := constr:(let U := (Type) in let gt := (Set : U) in U) in exact U) (only parsing).\r\n```\r\nbut then I get an extra universe.  Or I can do \r\n```coq\r\nDefinition Type1 := Eval simpl in let U := Type in let gt := (Set : U) in U.\r\n```\r\nbut then I sometimes have to unfold it.\r\n\r\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337520920/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/1095599438","html_url":"https://github.com/coq/coq/issues/3423#issuecomment-1095599438","issue_url":"https://api.github.com/repos/coq/coq/issues/3423","id":1095599438,"node_id":"IC_kwDOABUDh85BTYVO","user":{"login":"Alizter","id":8614547,"node_id":"MDQ6VXNlcjg2MTQ1NDc=","avatar_url":"https://avatars.githubusercontent.com/u/8614547?v=4","gravatar_id":"","url":"https://api.github.com/users/Alizter","html_url":"https://github.com/Alizter","followers_url":"https://api.github.com/users/Alizter/followers","following_url":"https://api.github.com/users/Alizter/following{/other_user}","gists_url":"https://api.github.com/users/Alizter/gists{/gist_id}","starred_url":"https://api.github.com/users/Alizter/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Alizter/subscriptions","organizations_url":"https://api.github.com/users/Alizter/orgs","repos_url":"https://api.github.com/users/Alizter/repos","events_url":"https://api.github.com/users/Alizter/events{/privacy}","received_events_url":"https://api.github.com/users/Alizter/received_events","type":"User","site_admin":false},"created_at":"2022-04-11T21:47:01Z","updated_at":"2022-04-11T21:47:41Z","author_association":"CONTRIBUTOR","body":"FTR, regarding the later part of this issue. We have:\r\n\r\n```coq\r\nCheck Type@{Set}. (* Set : Type@{Set+1} *)\r\nCheck Type@{Set+1}. (*Type@{Set+1} : Type@{Set+2} *)\r\nFail Check Type@{Set+2}.\r\n```\r\n\r\nI don't know what can be done about ltac introducing an extra universe however.","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/1095599438/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/1095602954","html_url":"https://github.com/coq/coq/issues/3423#issuecomment-1095602954","issue_url":"https://api.github.com/repos/coq/coq/issues/3423","id":1095602954,"node_id":"IC_kwDOABUDh85BTZMK","user":{"login":"SkySkimmer","id":2461932,"node_id":"MDQ6VXNlcjI0NjE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/2461932?v=4","gravatar_id":"","url":"https://api.github.com/users/SkySkimmer","html_url":"https://github.com/SkySkimmer","followers_url":"https://api.github.com/users/SkySkimmer/followers","following_url":"https://api.github.com/users/SkySkimmer/following{/other_user}","gists_url":"https://api.github.com/users/SkySkimmer/gists{/gist_id}","starred_url":"https://api.github.com/users/SkySkimmer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/SkySkimmer/subscriptions","organizations_url":"https://api.github.com/users/SkySkimmer/orgs","repos_url":"https://api.github.com/users/SkySkimmer/repos","events_url":"https://api.github.com/users/SkySkimmer/events{/privacy}","received_events_url":"https://api.github.com/users/SkySkimmer/received_events","type":"User","site_admin":false},"created_at":"2022-04-11T21:51:23Z","updated_at":"2022-04-11T21:51:23Z","author_association":"CONTRIBUTOR","body":"`Check ltac:(exact Type).` does not display the type of the temporary evar which is filled by exact. It is that type which needs the extra level.\r\nMaybe we should run universe restriction for Check?","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/1095602954/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/1095606736","html_url":"https://github.com/coq/coq/issues/3423#issuecomment-1095606736","issue_url":"https://api.github.com/repos/coq/coq/issues/3423","id":1095606736,"node_id":"IC_kwDOABUDh85BTaHQ","user":{"login":"Alizter","id":8614547,"node_id":"MDQ6VXNlcjg2MTQ1NDc=","avatar_url":"https://avatars.githubusercontent.com/u/8614547?v=4","gravatar_id":"","url":"https://api.github.com/users/Alizter","html_url":"https://github.com/Alizter","followers_url":"https://api.github.com/users/Alizter/followers","following_url":"https://api.github.com/users/Alizter/following{/other_user}","gists_url":"https://api.github.com/users/Alizter/gists{/gist_id}","starred_url":"https://api.github.com/users/Alizter/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Alizter/subscriptions","organizations_url":"https://api.github.com/users/Alizter/orgs","repos_url":"https://api.github.com/users/Alizter/repos","events_url":"https://api.github.com/users/Alizter/events{/privacy}","received_events_url":"https://api.github.com/users/Alizter/received_events","type":"User","site_admin":false},"created_at":"2022-04-11T21:55:44Z","updated_at":"2022-04-11T21:58:53Z","author_association":"CONTRIBUTOR","body":"On the other hand `Type ltac:(exact Type).` gives:\r\n```coq\r\nType@{issue_3423.2}\r\n     : Type@{issue_3423.2+1}\r\n(* {issue_3423.3 issue_3423.2 issue_3423.1} |=\r\n     issue_3423.2 < issue_3423.3\r\n     issue_3423.3 < issue_3423.1 *)\r\n```\r\n\r\nThat's more universes than I expected.\r\n\r\nThat's the kind of output I would expect from\r\n```coq\r\nType (Type : Type : Type).\r\n```\r\nrather than\r\n```coq\r\nType (Type : Type).\r\n```\r\nthough they should really be\r\n```coq\r\nType Type.\r\n```\r\nSorry for the Type command being confusing here 0:-).","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/1095606736/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/1095612772","html_url":"https://github.com/coq/coq/issues/3423#issuecomment-1095612772","issue_url":"https://api.github.com/repos/coq/coq/issues/3423","id":1095612772,"node_id":"IC_kwDOABUDh85BTblk","user":{"login":"Alizter","id":8614547,"node_id":"MDQ6VXNlcjg2MTQ1NDc=","avatar_url":"https://avatars.githubusercontent.com/u/8614547?v=4","gravatar_id":"","url":"https://api.github.com/users/Alizter","html_url":"https://github.com/Alizter","followers_url":"https://api.github.com/users/Alizter/followers","following_url":"https://api.github.com/users/Alizter/following{/other_user}","gists_url":"https://api.github.com/users/Alizter/gists{/gist_id}","starred_url":"https://api.github.com/users/Alizter/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Alizter/subscriptions","organizations_url":"https://api.github.com/users/Alizter/orgs","repos_url":"https://api.github.com/users/Alizter/repos","events_url":"https://api.github.com/users/Alizter/events{/privacy}","received_events_url":"https://api.github.com/users/Alizter/received_events","type":"User","site_admin":false},"created_at":"2022-04-11T22:00:35Z","updated_at":"2022-04-11T22:00:35Z","author_association":"CONTRIBUTOR","body":"@SkySkimmer Regarding what we run for `Check`. I think it would be useful to have attributes to control what we actually do in a `Check`. Being able to control typeclasses, coercions, evars and universes seperately would help in many cases.","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/1095612772/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/1095614569","html_url":"https://github.com/coq/coq/issues/3423#issuecomment-1095614569","issue_url":"https://api.github.com/repos/coq/coq/issues/3423","id":1095614569,"node_id":"IC_kwDOABUDh85BTcBp","user":{"login":"SkySkimmer","id":2461932,"node_id":"MDQ6VXNlcjI0NjE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/2461932?v=4","gravatar_id":"","url":"https://api.github.com/users/SkySkimmer","html_url":"https://github.com/SkySkimmer","followers_url":"https://api.github.com/users/SkySkimmer/followers","following_url":"https://api.github.com/users/SkySkimmer/following{/other_user}","gists_url":"https://api.github.com/users/SkySkimmer/gists{/gist_id}","starred_url":"https://api.github.com/users/SkySkimmer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/SkySkimmer/subscriptions","organizations_url":"https://api.github.com/users/SkySkimmer/orgs","repos_url":"https://api.github.com/users/SkySkimmer/repos","events_url":"https://api.github.com/users/SkySkimmer/events{/privacy}","received_events_url":"https://api.github.com/users/SkySkimmer/received_events","type":"User","site_admin":false},"created_at":"2022-04-11T22:02:31Z","updated_at":"2022-04-11T22:02:31Z","author_association":"CONTRIBUTOR","body":"Being able to skip minimization would be interesting too.\r\nActually it looks like Type doesn't minimize (Vernacentries.vernac_global_check)","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/1095614569/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]