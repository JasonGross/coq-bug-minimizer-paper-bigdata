[{"url":"https://api.github.com/repos/coq/coq/issues/comments/337537489","html_url":"https://github.com/coq/coq/issues/4415#issuecomment-337537489","issue_url":"https://api.github.com/repos/coq/coq/issues/4415","id":337537489,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUzNzQ4OQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2015-11-08T23:31:42Z","updated_at":"2021-07-18T08:45:13Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\r\n\r\nI'll work on making a test case, but the error message is:\r\n```\r\nToplevel input, characters 21-33:\r\nError:\r\nIn environment\r\nChar : Type\r\nHSL : StringLike Char\r\nHSLP : StringLikeProperties Char\r\nls : list (string * productions Char)\r\nsplitdata : split_dataT\r\nconstT : Type\r\nvarT : Type\r\nstrC : str_carrier constT varT\r\ndata := {| predata := rdp_list_predata; split_data := splitdata |}\r\n     : boolean_parser_dataT\r\nstr : String\r\nnt : string\r\na : nat * nat\r\nx,\r\ny : forall x : nat * nat,\r\n    prod_relation lt lt x a ->\r\n    list nat ->\r\n    varT ->\r\n    forall x2 : nat, x2 <= fst x -> rdp_list_nonterminal_carrierT -> bool\r\nH : forall (a0 : nat * nat) (a : prod_relation lt lt a0 a)\r\n      (a1 : list nat) (a2 : varT) (a3 : nat) (a4 : a3 <= fst a0)\r\n      (a5 : rdp_list_nonterminal_carrierT),\r\n    x a0 a a1 a2 a3 a4 a5 = y a0 a a1 a2 a3 a4 a5\r\na0 : list nat\r\na1 : varT\r\na2 : nat\r\na3 : a2 <= fst a\r\na4 : rdp_list_nonterminal_carrierT\r\nH0 := sumbool_rect (fun _ : {a2 < fst a} + {~ a2 < fst a} => bool)\r\n        (fun x0 : a2 < fst a => ?X2798) (fun x0 : ~ a2 < fst a => ?b)\r\n        (lt_dec a2 (fst a)) : bool\r\ne := @ pull_sumbool_rect_dep\r\n  : forall (L R : Prop) (A B : {L} + {R} -> Type)\r\n      (P : forall b : {L} + {R}, A b -> B b) (a : forall x : L, A in_left)\r\n      (a' : forall x : R, A in_right) (b : {L} + {R}),\r\n    P b (sumbool_rect A a a' b) =\r\n    sumbool_rect B (fun x : L => P in_left (a x))\r\n      (fun x : R => P in_right (a' x)) b\r\nx0 : ~ a2 < fst a\r\nUnable to unify \"?b1@ {c':=lt_dec a2 (fst a)}\" with\r\n\"?b\".\r\n```\r\n\r\nWhat could possibly make the unification engine think that these two are not unifiable? (Coq 95a4fcf8cd36e29034e886682ed3a6e2914ce04f).\r\n\r\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337537489/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337537491","html_url":"https://github.com/coq/coq/issues/4415#issuecomment-337537491","issue_url":"https://api.github.com/repos/coq/coq/issues/4415","id":337537491,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUzNzQ5MQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2015-11-08T23:53:19Z","updated_at":"2020-02-06T23:00:34Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\r\n\r\nTest code:\r\n```coq\r\nGoal forall y : sumbool True True, exists x, x = sumbool_rect (fun _ => bool) (fun _ => true) (fun _ => true) y.\r\n  eexists.\r\n  let x := match goal with |- ?x = _ => constr:x end in\r\n  let k := fresh in\r\n  set (k := x);\r\n    match goal with\r\n      | [ |- _ = sumbool_rect ?T (fun b => _) (fun c => _) ?v ]\r\n        => refine (_ : sumbool_rect T (fun b => _) (fun c => _) v = _)\r\n    end;\r\n    match goal with\r\n      | [ |- _ = sumbool_rect ?T (fun b => _) (fun c => _) ?v ]\r\n        => refine (sumbool_rect\r\n                     (fun sb => sumbool_rect T _ _ sb = sumbool_rect T _ _ sb)\r\n                     _\r\n                     _\r\n                     v);\r\n          try intro; simpl sumbool_rect\r\n      | [ |- bool ] => idtac\r\n    end.\r\n  Fail reflexivity. (* Toplevel input, characters 0-12:\r\nError:\r\nIn environment\r\ny : {True} + {True}\r\nH := sumbool_rect (fun _ : {True} + {True} => bool)\r\n       (fun a : True => ?X31) (fun b : True => ?b) y : bool\r\nb : True\r\nUnable to unify \"?b0@ {y:=y; sb:=y}\" with \"?b\".\r\n *)\r\n(* What is Coq trying to do?! *)\r\n  Undo 2.\r\n  match goal with\r\n    | [ |- _ = sumbool_rect ?T (fun b => _) (fun c => _) ?v ]\r\n      => refine (_ : sumbool_rect T (fun b => _) (fun c => _) v = _)\r\n  end; (* we need [try] to work around bug [BZ#4416](https://github.com/coq/coq/issues?q=is%3Aissue%20%22Original%20bug%20ID%3A%20BZ%234416%22) *)\r\n  try match goal with\r\n    | [ |- bool ] => idtac\r\n    | [ |- _ = sumbool_rect ?T (fun b => _) (fun c => _) ?v ]\r\n      => refine (sumbool_rect\r\n                   (fun sb => sumbool_rect T _ _ sb = sumbool_rect T _ _ sb)\r\n                   _\r\n                   _\r\n                   v);\r\n        try intro; simpl sumbool_rect\r\n    | [ |- ?G ] => idtac G\r\n  end.\r\n  reflexivity. (* success *)\r\n  reflexivity. (* success *)\r\nDefined.\r\n```\r\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337537491/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337537494","html_url":"https://github.com/coq/coq/issues/4415#issuecomment-337537494","issue_url":"https://api.github.com/repos/coq/coq/issues/4415","id":337537494,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUzNzQ5NA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2015-11-25T06:43:12Z","updated_at":"2021-07-18T08:46:00Z","author_association":"CONTRIBUTOR","body":"Comment author: @silene\r\n\r\nNote that the issue is deeper than `reflexivity`, since even `exact` fails.\r\n```coq\r\nGoal exists x, x = true.\r\nevar (a : bool).\r\nexists a.\r\nrefine (unit_rec (fun s => unit_rec _ _ s = _) _ tt).\r\nexact true.\r\n```\r\n\r\n```\r\nError: In environment\r\na := ?X5 : bool\r\nUnable to unify \"?y1\" with \"?y@ {s:=tt}\".\r\n```\r\nStrangely enough, `refine true` succeeds.\r\n\r\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337537494/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337537496","html_url":"https://github.com/coq/coq/issues/4415#issuecomment-337537496","issue_url":"https://api.github.com/repos/coq/coq/issues/4415","id":337537496,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUzNzQ5Ng==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2015-11-27T12:47:43Z","updated_at":"2017-10-18T10:10:30Z","author_association":"CONTRIBUTOR","body":"Comment author: @ppedrot\n\nThat's not strange. The exact tactic still uses the old engine. We can update it trivially, but it may probably change its semantics (e.g. making exact behave just as eexact).\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337537496/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337537498","html_url":"https://github.com/coq/coq/issues/4415#issuecomment-337537498","issue_url":"https://api.github.com/repos/coq/coq/issues/4415","id":337537498,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUzNzQ5OA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-01-06T21:32:08Z","updated_at":"2021-07-18T08:56:35Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\r\n\r\nAre there any cases where `exact` fails but `eexact` succeeds?  I can't recall ever running into one, and `exact` is generally happy to instantiate evars.  The reference manual says, of `eexact`, \"This tactic behaves like exact but is able to handle terms and goals with meta-variables.\"  I assume it means evars, because, of `eassumption`, it says, \"This tactic behaves like assumption but is able to handle goals with meta-variables,\" and I know `eassumption` will instantiate evars that `assumption` will not.  So, at the very least, the reference manual seems wrong, because this code works fine:\r\n```coq\r\nGoal (exists x y, x = 1 -> 1 = y).\r\n  do 2 eexists; intro H.\r\n  exact H.\r\n```\r\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337537498/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337537499","html_url":"https://github.com/coq/coq/issues/4415#issuecomment-337537499","issue_url":"https://api.github.com/repos/coq/coq/issues/4415","id":337537499,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUzNzQ5OQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-01-06T22:12:11Z","updated_at":"2021-07-18T08:54:52Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\r\n\r\nNote that this code succeeds:\r\n```coq\r\nGoal forall y : sumbool True True, exists x, x = sumbool_rect (fun _ => bool) (fun _ => true) (fun _ => true) y.\r\n  eexists.\r\n  let x := match goal with |- ?x = _ => constr:x end in\r\n  let k := fresh in\r\n  set (k := x);\r\n    let A' := fresh in\r\n    let B' := fresh in\r\n    match goal with\r\n      | [ |- _ = sumbool_rect ?T ?A ?B ?v ]\r\n        => let TA := type of A in\r\n           let TB := type of B in\r\n           evar (A' : TA); evar (B' : TB);\r\n           refine (_ : sumbool_rect T A' B' v = _)\r\n    end;\r\n    match goal with\r\n      | [ |- _ = sumbool_rect ?T (fun b => _) (fun c => _) ?v ]\r\n        => refine (sumbool_rect\r\n                     (fun sb => sumbool_rect T _ _ sb = sumbool_rect T _ _ sb)\r\n                     _\r\n                     _\r\n                     v);\r\n          subst A' B';\r\n          try intro; simpl sumbool_rect\r\n      | [ |- bool ] => idtac\r\n    end.\r\n  reflexivity.\r\n```\r\n\r\nBut if we put the `subst A' B'` in between the two `match` statements, rather than in the second one, `reflexivity` goes back to failing.  So something is messing up the evars (and, moreover, in the actual code that I'm dealing with, I can get to a point where a goal is uniquely determined by the constraints, but Coq still makes me solve it, and complains when I get it wrong...)\r\n\r\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337537499/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337537501","html_url":"https://github.com/coq/coq/issues/4415#issuecomment-337537501","issue_url":"https://api.github.com/repos/coq/coq/issues/4415","id":337537501,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUzNzUwMQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-01-13T21:03:05Z","updated_at":"2021-07-18T11:03:15Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\r\n\r\nIf this is an issue with tactics coded in the old proof engine, then this seems to be a major flaw in the compatibility layer (since, e.g, `assert True`) also fails:\r\n```coq\r\nGoal exists x, x = true.\r\nProof.\r\n  evar (a : bool).\r\n  exists a.\r\n  refine (unit_rec (fun s => unit_rec _ _ s = _) _ tt).\r\n  assert True. (* Error: In environment\r\na := ?X5 : bool\r\nUnable to unify \"?y1\" with \"?y@ {s:=tt}\". *)\r\n```\r\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337537501/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337537502","html_url":"https://github.com/coq/coq/issues/4415#issuecomment-337537502","issue_url":"https://api.github.com/repos/coq/coq/issues/4415","id":337537502,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUzNzUwMg==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-01-13T21:04:55Z","updated_at":"2021-07-18T08:55:28Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\r\n\r\nAlso, note that `eexact true` also fails:\r\n```\r\nGoal exists x, x = true.\r\nProof.\r\n  evar (a : bool).\r\n  exists a.\r\n  unshelve refine (unit_rec (fun s => unit_rec _ _ s = _) _ tt).\r\n  eexact true.\r\n```\r\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337537502/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337537505","html_url":"https://github.com/coq/coq/issues/4415#issuecomment-337537505","issue_url":"https://api.github.com/repos/coq/coq/issues/4415","id":337537505,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUzNzUwNQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-01-13T22:14:31Z","updated_at":"2021-07-18T08:51:16Z","author_association":"CONTRIBUTOR","body":"Comment author: @herbelin\r\n\r\nAs far as I could debug, in\r\n```coq\r\nGoal exists x, x = true.\r\nProof.\r\n  evar (a : bool).\r\n  exists a.\r\n  refine (unit_rec (fun s => unit_rec _ _ s = _) _ tt).\r\n  (* ... any tactic with a term A to interpret with \"interp_constr\" ... *)\r\n```\r\n`refine` has left conversion problems unresolved.\r\n\r\nIs this what we expect?\r\n\r\nIn particular, the message\r\n\r\n```\r\nIn environment\r\na := ?X5 : bool\r\nUnable to unify \"?y1\" with \"?y@{s:=tt}\".\r\n```\r\ncomes from one of the two pending conversion problems, which the evaluation of the term A tries to solve, without success.\r\n\r\nOne sees `?X5` because `nf_enter` normalizes the goal but the postponed problems are not normalized so ?X5 has not yet been instantiated with `unit_rec (fun _ : unit => bool) ?y1 tt` in the postponed problem.\r\n\r\nArnaud, Pierre-Marie, any hints on what to do?\r\n\r\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337537505/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337537509","html_url":"https://github.com/coq/coq/issues/4415#issuecomment-337537509","issue_url":"https://api.github.com/repos/coq/coq/issues/4415","id":337537509,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUzNzUwOQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-01-13T22:18:03Z","updated_at":"2021-07-18T08:48:16Z","author_association":"CONTRIBUTOR","body":"Comment author: @herbelin\r\n\r\nThe problem seems to be the same in the bigger example (comment 2) where the error message, as hinted by the unnormalized evar `?X31` in the error message, comes from an unresolved postponed problem which refine left pending.\r\n\r\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337537509/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337537510","html_url":"https://github.com/coq/coq/issues/4415#issuecomment-337537510","issue_url":"https://api.github.com/repos/coq/coq/issues/4415","id":337537510,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUzNzUxMA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-03-21T14:06:16Z","updated_at":"2017-10-18T10:10:31Z","author_association":"CONTRIBUTOR","body":"Comment author: @maximedenes\n\nIt may be not clear from the bug report, but comment 1 is actually a regression from 8.4. Changing refine to simple refine doesn't solve it. Would PMP or Arnaud have a clue what is going on?\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337537510/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/882019227","html_url":"https://github.com/coq/coq/issues/4415#issuecomment-882019227","issue_url":"https://api.github.com/repos/coq/coq/issues/4415","id":882019227,"node_id":"IC_kwDOABUDh840koub","user":{"login":"SkySkimmer","id":2461932,"node_id":"MDQ6VXNlcjI0NjE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/2461932?v=4","gravatar_id":"","url":"https://api.github.com/users/SkySkimmer","html_url":"https://github.com/SkySkimmer","followers_url":"https://api.github.com/users/SkySkimmer/followers","following_url":"https://api.github.com/users/SkySkimmer/following{/other_user}","gists_url":"https://api.github.com/users/SkySkimmer/gists{/gist_id}","starred_url":"https://api.github.com/users/SkySkimmer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/SkySkimmer/subscriptions","organizations_url":"https://api.github.com/users/SkySkimmer/orgs","repos_url":"https://api.github.com/users/SkySkimmer/repos","events_url":"https://api.github.com/users/SkySkimmer/events{/privacy}","received_events_url":"https://api.github.com/users/SkySkimmer/received_events","type":"User","site_admin":false},"created_at":"2021-07-18T08:20:39Z","updated_at":"2021-07-18T08:20:39Z","author_association":"CONTRIBUTOR","body":"The \"refine unit_rec\" lines in the small examples and the \"refine sumbool_rect\" in the large example fail in modern Coq.","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/882019227/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/882040792","html_url":"https://github.com/coq/coq/issues/4415#issuecomment-882040792","issue_url":"https://api.github.com/repos/coq/coq/issues/4415","id":882040792,"node_id":"IC_kwDOABUDh840kt_Y","user":{"login":"herbelin","id":460771,"node_id":"MDQ6VXNlcjQ2MDc3MQ==","avatar_url":"https://avatars.githubusercontent.com/u/460771?v=4","gravatar_id":"","url":"https://api.github.com/users/herbelin","html_url":"https://github.com/herbelin","followers_url":"https://api.github.com/users/herbelin/followers","following_url":"https://api.github.com/users/herbelin/following{/other_user}","gists_url":"https://api.github.com/users/herbelin/gists{/gist_id}","starred_url":"https://api.github.com/users/herbelin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/herbelin/subscriptions","organizations_url":"https://api.github.com/users/herbelin/orgs","repos_url":"https://api.github.com/users/herbelin/repos","events_url":"https://api.github.com/users/herbelin/events{/privacy}","received_events_url":"https://api.github.com/users/herbelin/received_events","type":"User","site_admin":false},"created_at":"2021-07-18T11:17:28Z","updated_at":"2021-07-18T11:17:28Z","author_association":"MEMBER","body":"The failing conversion problem (resulting from `?P tt == (a = 0)` after setting `?P:=fun y => ?b@{a:=a; y:=tt} = 0`) is of the form:\r\n```\r\nEvars:\r\n                                                         |- ?x : bool\r\na := unit_rec (fun _ : unit => bool) ?x tt = _, y : unit |- ?b : bool \r\n\r\nConstraint:\r\na := unit_rec (fun _ : unit => bool) ?x tt |- ?b@{a:=a; y:=tt} == ?x\r\n```\r\nMorally, the constraint actually simplifies to:\r\n```\r\na := ?x |- ?b@{a:=a; y:=tt} == ?x\r\n```\r\nThere are several possible solutions for `?b`, e.g. `?b:=a`, or `?b:=match y with tt => a end`, etc., exploiting the information that `a` is convertible to `?x`, or we can prefer to instantiate `?x := ?b'@{y:=t}` for a restriction `?b'` of `?b` which forces it to not use `a` (because of the circularity of `?x` in `a`, if we don't want `b` to be instantiated now to break the circularity).\r\n\r\nThe second solution does not lose solutions up to convertibility, though it looses some syntactic solutions, and this is why (from memory) it is not adopted by default. However, in the final heuristic phase where the priority is to find a solution, I believe it is ok to favor it.\r\n\r\nSo I made PR #14673 for that purpose.\r\n\r\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/882040792/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]