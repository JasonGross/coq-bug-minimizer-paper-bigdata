Would that be solved by having a way to iterate over a hint database in Ltac (as in https://stackoverflow.com/questions/42709641/is-is-possible-to-implement-a-coq-tactic-that-inspects-a-hintdb-if-so-how)?
No.  Well, maybe, but I'm dubious.  I'd need numerous calls to `constr_eq` (or Ltac's `context`) to check whether or not progress was made, because `cbv delta [foo bar]` will unfold both `foo` and `bar` regardless of whether or not one is defined in terms of the other (unlike `cbv delta [foo]; cbv delta [bar]`).  And I'd need to first issue all the `cbv delta` calls, followed by a single call to `cbv beta iota zeta`, and hope that the term I get by running a lot of `cbv delta` isn't too big.... The underlying issue here, in some sense, is that there's no way to build `cbv [foo bar]` from `cbv [foo]` and `cbv [bar]` without sacrificing a lot in performance.
@JasonGross Already accessible in the Ltac2 API btw.
