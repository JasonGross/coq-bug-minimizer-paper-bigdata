[{"url":"https://api.github.com/repos/coq/coq/issues/comments/337537280","html_url":"https://github.com/coq/coq/issues/4400#issuecomment-337537280","issue_url":"https://api.github.com/repos/coq/coq/issues/4400","id":337537280,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUzNzI4MA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2015-11-03T19:07:04Z","updated_at":"2017-10-18T10:09:50Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\n(* -*- coq-prog-args: (\"-emacs\" \"-require\" \"Coq.Compat.Coq84\" \"-compat\" \"8.4\") -*- *)\nRequire Import Coq.Lists.List Coq.Logic.JMeq.\nSet Printing Universes.\nInductive Foo (I : Type -> Type) (A : Type) : Type :=\n| foo (B : Type) : A -> I B -> Foo I A.\nDefinition Family := Type -> Type.\nDefinition FooToo : Family -> Family := Foo.\nDefinition optionize (I : Type -> Type) (A : Type) := option (I A).\nDefinition bar (I : Type -> Type) (A : Type) : A -> option (I A) -> Foo(optionize I) A := foo (optionize I) A A.\nRecord Rec (I : Type -> Type) := { rec : forall A : Type, A -> I A -> Foo I A }.\nDefinition barRec : Rec (optionize id) := {| rec := bar id |}.\nInductive Empty {T} : T -> Prop := .\nTheorem empty (family : Family) (a : fold_right prod unit (map (Foo family)\nnil)) (b : unit) :\n  Empty (a, b) -> False.\nProof.\n  intro e.\n  Fail generalize_eqs_vars e. (*\nThe command has indeed failed with message:\nRefiner was given an argument \"Foo family\" of type\n \"Type@ {Coq.Init.Datatypes.23} -> Type@ {Coq.Init.Datatypes.23}\" instead of\n \"Type@ {Top.3} -> Type@ {Coq.Init.Datatypes.23}\". *)\n  let t := match type of prod with ?T -> _ => constr:T end in\n  let t' := match type of foo with forall (x : _) (y : ?T), _ => constr:T end in\n  (*pose (t -> t);\n  pose (t' -> t);*)\n  pose (Foo family : t' -> t).\n  (* gives:\n(Foo family : Type@ {Top.3} -> Type@ {Coq.Init.Datatypes.23})\n    : Type@ {Top.3} -> Type@ {Coq.Init.Datatypes.23} *)\n\n\nThis is based on https://coq.inria.fr/bugs/show_bug.cgi?id=4394#c4.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337537280/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337537283","html_url":"https://github.com/coq/coq/issues/4400#issuecomment-337537283","issue_url":"https://api.github.com/repos/coq/coq/issues/4400","id":337537283,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUzNzI4Mw==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2015-11-03T19:12:55Z","updated_at":"2017-10-18T10:09:51Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nResponding to https://coq.inria.fr/bugs/show_bug.cgi?id=4394#c4 here:\n\nFor whatever reason, generalize_eq_vars is trying to unify [Type@ {Coq.Init.Datatypes.23} -> Type@ {Coq.Init.Datatypes.23}] with [Type@ {Top.3} -> Type@ {Coq.Init.Datatypes.23}] in Coq 8.5, but not in Coq 8.4.  The behavior you were seeing is mostly (all?) an artifact of this.  The following code fails in both 8.4 and 8.5 (universe inconsistency: Cannot enforce Coq.Init.Datatypes.23 = Top.3 because Top.3 < Coq.Init.Datatypes.23):\n\n(* -*- coq-prog-args: (\"-emacs\" \"-require\" \"Coq.Compat.Coq84\" \"-compat\" \"8.4\") -*- *)\nRequire Import Coq.Lists.List Coq.Logic.JMeq.\nSet Printing Universes.\nInductive Foo (I : Type -> Type) (A : Type) : Type :=\n| foo (B : Type) : A -> I B -> Foo I A.\nDefinition Family := Type -> Type.\nDefinition FooToo : Family -> Family := Foo.\nDefinition optionize (I : Type -> Type) (A : Type) := option (I A).\nDefinition bar (I : Type -> Type) (A : Type) : A -> option (I A) -> Foo(optionize I) A := foo (optionize I) A A.\nRecord Rec (I : Type -> Type) := { rec : forall A : Type, A -> I A -> Foo I A }.\nDefinition barRec : Rec (optionize id) := {| rec := bar id |}.\nInductive Empty {T} : T -> Prop := .\nTheorem empty (family : Family) (a : fold_right prod unit (map (Foo family)\nnil)) (b : unit) :\n  Empty (a, b) -> False.\nProof.\n  intro e.\n  let t := match type of prod with ?T -> _ => constr:T end in\n  let t' := match type of foo with forall (x : _) (y : ?T), _ => constr:T end in\n  pose (eq_refl : (t -> t) = (t' -> t)); admit. (* N.B. 8.5 catches the universe inconsistency on [pose], 8.4 only catches it on [admit] *)\n\nRemoving either [FooToo] or [barRec] makes this command succeed in both 8.4 and 8.5.  I suspect most of the other changes (modulo removing [A] from [Foo], which is essential to this test) also behave the same here between 8.4 and 8.5.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337537283/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337537284","html_url":"https://github.com/coq/coq/issues/4400#issuecomment-337537284","issue_url":"https://api.github.com/repos/coq/coq/issues/4400","id":337537284,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUzNzI4NA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2015-11-03T22:32:15Z","updated_at":"2017-10-18T10:09:51Z","author_association":"CONTRIBUTOR","body":"Comment author: @mattam82\n\nFix upcoming in 8.5, it was actually an issue with the refiner not retyping the polymorphic inductive applications right.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337537284/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337537286","html_url":"https://github.com/coq/coq/issues/4400#issuecomment-337537286","issue_url":"https://api.github.com/repos/coq/coq/issues/4400","id":337537286,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUzNzI4Ng==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2015-11-04T08:17:19Z","updated_at":"2017-10-18T10:09:51Z","author_association":"CONTRIBUTOR","body":"Comment author: @maximedenes\n\nIsn't the first example still failing with the current 8.5 branch?\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337537286/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]