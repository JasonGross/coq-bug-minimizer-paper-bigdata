[{"url":"https://api.github.com/repos/coq/coq/issues/comments/337526327","html_url":"https://github.com/coq/coq/issues/3750#issuecomment-337526327","issue_url":"https://api.github.com/repos/coq/coq/issues/3750","id":337526327,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyNjMyNw==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-10-18T08:04:03Z","updated_at":"2017-10-18T09:37:44Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nHere is code that works in 8.4 but not trunk:\n\nDefinition foo := nat.\nTactic Notation \"myunfold\" reference(x) := unfold x.\nGoal foo.\n  myunfold foo. (* Error: Ltac variable x is bound to a value of type ref which cannot be\ncoerced to an evaluable reference. *)\n  match goal with\n    | [ |- nat ] => idtac\n  end.\n\nAlso, why does trunk say that \"x is bound to a value of type intropattern\" (intropattern?!) if I replace [reference] with [ident]?\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337526327/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337526329","html_url":"https://github.com/coq/coq/issues/3750#issuecomment-337526329","issue_url":"https://api.github.com/repos/coq/coq/issues/3750","id":337526329,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyNjMyOQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-10-18T16:40:15Z","updated_at":"2017-10-18T09:37:45Z","author_association":"CONTRIBUTOR","body":"Comment author: @ppedrot\n\nAs a general rule of thumb, do not rely on the (lack of) semantics of Tactic Notation. One day, it will be cleaned up (and the day after that, it'll be raining 100â‚¬ banknotes).\n\nAbout your legitimate question, Tactic Notation, as well as tactic internalization, lack any way to speak of true variables, making Ltac the only functional language with (kind of) closures but without variables. Together with application, that's two thirds of the mighty lambda-calculus, how could that be wrong? To work around this unbearable void, Ltac has to dynamically recognize things that look like variables, and it tends to use single-variable intro patterns to encode such objects. I suspect what you observe is a consequence of this fact.\n\nAnd yes, the right solution would be to use true variables, but this is actually rather convoluted and changes a quite big code base, surely implying more retro-incompatibility.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337526329/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337526330","html_url":"https://github.com/coq/coq/issues/3750#issuecomment-337526330","issue_url":"https://api.github.com/repos/coq/coq/issues/3750","id":337526330,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyNjMzMA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2015-02-13T14:04:02Z","updated_at":"2017-10-18T09:37:45Z","author_association":"CONTRIBUTOR","body":"Comment author: @silene\n\nIt seems to be working now. Please reopen if not.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337526330/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]