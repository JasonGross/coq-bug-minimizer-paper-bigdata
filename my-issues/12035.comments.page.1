[{"url":"https://api.github.com/repos/coq/coq/issues/comments/610576089","html_url":"https://github.com/coq/coq/issues/12035#issuecomment-610576089","issue_url":"https://api.github.com/repos/coq/coq/issues/12035","id":610576089,"node_id":"MDEyOklzc3VlQ29tbWVudDYxMDU3NjA4OQ==","user":{"login":"proux01","id":15833376,"node_id":"MDQ6VXNlcjE1ODMzMzc2","avatar_url":"https://avatars.githubusercontent.com/u/15833376?v=4","gravatar_id":"","url":"https://api.github.com/users/proux01","html_url":"https://github.com/proux01","followers_url":"https://api.github.com/users/proux01/followers","following_url":"https://api.github.com/users/proux01/following{/other_user}","gists_url":"https://api.github.com/users/proux01/gists{/gist_id}","starred_url":"https://api.github.com/users/proux01/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/proux01/subscriptions","organizations_url":"https://api.github.com/users/proux01/orgs","repos_url":"https://api.github.com/users/proux01/repos","events_url":"https://api.github.com/users/proux01/events{/privacy}","received_events_url":"https://api.github.com/users/proux01/received_events","type":"User","site_admin":false},"created_at":"2020-04-07T19:27:00Z","updated_at":"2020-04-07T19:27:00Z","author_association":"CONTRIBUTOR","body":"> We could say that the hnf of the string/numeral notation type has to be an inductive type family, and we use the constructors of that type as entry points.\r\n\r\nThat sounds reasonnable.\r\n\r\n> Separately, there is the question of if we should support non-fully-instantiated type families.\r\n\r\nThat would be nice but indeed seems to require more work.\r\n\r\n> Or we could create an extension to string/numeral notations where the user can explicitly give the entry points as a list of references, and this is required whenever the hnf of the type is not an inductive type family.\r\n\r\nDo you have any use case / example in mind ?\r\n\r\nCurrently, there are two non numeral notations remaining (grepping `register_rawnumeral_interpretation`):\r\n* primitive floats\r\n* reals\r\n\r\nI could maybe devise something similar to primitive integers for the first case. The second case is more interesting. Here are a few thoughts. Recall that real number constants are\r\n```\r\nIZR <Z>  (integers)\r\nRdiv (IZR <Z>) (IZR (Z.pow_pos 10%Z <positive>))  (e.g. 1.23 is 123 / 10^2)\r\nRmult (IZR <Z>) (IZR (Z.pow_pos 10%Z <positive>)) (e.g. 12e3 is 12 * 10^3)\r\n```\r\nthis raises two issues:\r\n* entry points for uninterpretation that are not constructors of an inductive type\r\n* uninterpreter function need some way to \"match\" its input\r\n\r\nThe first point could be fixed as you offer by providing explicitly entry points.\r\nThe second sounds more difficult. A proposal would be to use some ltac code but that sounds like a sledgehammer to crunch a fly. Maybe would it be simpler to use a kind of \"preprocessing\" to translate the input into an inductive type that would then be processed by the uninterpreter.\r\nFor instance, for reals, the inductive type could be something like\r\n```Coq\r\nInductive IR :=\r\n  | IRZ : Z -> IR\r\n  | IRmult : IR -> IR -> IR\r\n  | IRdiv : IR -> IR -> IR\r\n  | IRpow : Z -> positive -> IR.\r\n```\r\nWe would then need a way to produce values of this type from above terms. I don't know what would be the best solution here:\r\n* providing a list of entry points with a corresponding constructor for each one?\r\n* allowing a very simple function from the inductive type to the non inductive one and attempt to derive the preprocessor by reverting it? like\r\n```Coq\r\nFixpoint pp (i : IR) : R :=\r\n  match i with\r\n  | IRZ z => IZR z\r\n  | IRmult i i' => Rmult (pp i) (pp i')\r\n  | IRdiv i i' => Rdiv (pp i) (pp i')\r\n  | IRpow z p => IZR (Z.pow_pos z p)\r\n  end.\r\n```\r\n\r\nI hope I'm not hijacking your issue.\r\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/610576089/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/610591184","html_url":"https://github.com/coq/coq/issues/12035#issuecomment-610591184","issue_url":"https://api.github.com/repos/coq/coq/issues/12035","id":610591184,"node_id":"MDEyOklzc3VlQ29tbWVudDYxMDU5MTE4NA==","user":{"login":"JasonGross","id":396076,"node_id":"MDQ6VXNlcjM5NjA3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/396076?v=4","gravatar_id":"","url":"https://api.github.com/users/JasonGross","html_url":"https://github.com/JasonGross","followers_url":"https://api.github.com/users/JasonGross/followers","following_url":"https://api.github.com/users/JasonGross/following{/other_user}","gists_url":"https://api.github.com/users/JasonGross/gists{/gist_id}","starred_url":"https://api.github.com/users/JasonGross/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JasonGross/subscriptions","organizations_url":"https://api.github.com/users/JasonGross/orgs","repos_url":"https://api.github.com/users/JasonGross/repos","events_url":"https://api.github.com/users/JasonGross/events{/privacy}","received_events_url":"https://api.github.com/users/JasonGross/received_events","type":"User","site_admin":false},"created_at":"2020-04-07T20:00:13Z","updated_at":"2020-04-07T20:00:52Z","author_association":"MEMBER","body":"> I hope I'm not hijacking your issue.\r\n\r\nNot at all!\r\n\r\nWhat about the following proposal:\r\nInstead of providing a list of entry points, the user provides an uninterpretation \"function\" as a list of `pattern => constr` rules.  So the one for reals would look like\r\n```coq\r\n(\r\n IZR z => Z.to_int z,\r\n Rdiv (IZR c) (IZR (Z.pow_pos 10%Z e)) => ...,\r\n Rmult (IZR c) (IZR (Z.pow_pos 10%Z e)) => ...\r\n)\r\n```\r\nThe idea would be to parse the rules like branches of a `match`, but allow things that are not constructors, and do the appropriate match on `glob_constr`.  And the head constants of each branch would be the entry points.","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/610591184/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/610894887","html_url":"https://github.com/coq/coq/issues/12035#issuecomment-610894887","issue_url":"https://api.github.com/repos/coq/coq/issues/12035","id":610894887,"node_id":"MDEyOklzc3VlQ29tbWVudDYxMDg5NDg4Nw==","user":{"login":"proux01","id":15833376,"node_id":"MDQ6VXNlcjE1ODMzMzc2","avatar_url":"https://avatars.githubusercontent.com/u/15833376?v=4","gravatar_id":"","url":"https://api.github.com/users/proux01","html_url":"https://github.com/proux01","followers_url":"https://api.github.com/users/proux01/followers","following_url":"https://api.github.com/users/proux01/following{/other_user}","gists_url":"https://api.github.com/users/proux01/gists{/gist_id}","starred_url":"https://api.github.com/users/proux01/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/proux01/subscriptions","organizations_url":"https://api.github.com/users/proux01/orgs","repos_url":"https://api.github.com/users/proux01/repos","events_url":"https://api.github.com/users/proux01/events{/privacy}","received_events_url":"https://api.github.com/users/proux01/received_events","type":"User","site_admin":false},"created_at":"2020-04-08T11:06:01Z","updated_at":"2020-04-08T11:06:01Z","author_association":"CONTRIBUTOR","body":"Looks nice! Just two questions (one on syntax, the other maybe more fundamental):\r\n\r\n* how do we distinguish constants from variables? shouldn't we use a syntax Ã  la Ltac (`IZR ?z => ...`)\r\n* would this handle recursion? for instance, before 8.7, real constants were plain sums and products of `R0` and `R1`\r\n\r\nThere are points I definitely like in your proposal:\r\n\r\n* it looks nice and intuitive\r\n* implementation should be reasonnable\r\n\r\nbut other things I less appreciate:\r\n\r\n* if feels a bit like reimplementing a small subset of Ltac and implementation would probably still require some work\r\n* there is no longer a single printing function, which makes proofs that print and parse are in \"bijection\" (as in `theories/Numbers/Decimal*.v`) harder and less convincing\r\n\r\nHere is yet another proposal: Use an actual (mutual) inductive type that maps what you want to uninterpret and just translate from/to the actual type to this inductive type as a preprocessing of uninterpreting / a postprocessing of interpreting. One would then just have to provide a mapping from globrefs of the actual type to constructors of the inductive type. Constructors of the (first when mutual) inductive type would be used as triggers.\r\n\r\nFor instance, for reals, that could look something like\r\n```Coq\r\nInductive IR :=\r\n| IRZ : IZ -> IR\r\n| IRdiv : IR -> IR -> IR\r\n| IRmult : IR -> IR -> IR\r\nwith IZ :=\r\n| IZpow_pos : Z -> positive -> IZ\r\n| IZ0 : IZ\r\n| IZpos : positive -> IZ\r\n| IZneg : positive -> IZ.\r\n\r\nNumeral Notation R (IZR IRZ, Rdiv IRdiv, Rmult IRmult, Z.pow_pos IZpow_pos, Z0 IZ0, Zpos IZpos, Zneg IZneg) decimal_to_IR IR_to_decimal : R_scope.\r\n```\r\n\r\nAs a nice side effect, this could allow a finer control on what gets reduced or not when parsing (for instance here, `Z.pow_pos` would not be reduced avoiding blow up for large exponents).\r\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/610894887/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/610995129","html_url":"https://github.com/coq/coq/issues/12035#issuecomment-610995129","issue_url":"https://api.github.com/repos/coq/coq/issues/12035","id":610995129,"node_id":"MDEyOklzc3VlQ29tbWVudDYxMDk5NTEyOQ==","user":{"login":"JasonGross","id":396076,"node_id":"MDQ6VXNlcjM5NjA3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/396076?v=4","gravatar_id":"","url":"https://api.github.com/users/JasonGross","html_url":"https://github.com/JasonGross","followers_url":"https://api.github.com/users/JasonGross/followers","following_url":"https://api.github.com/users/JasonGross/following{/other_user}","gists_url":"https://api.github.com/users/JasonGross/gists{/gist_id}","starred_url":"https://api.github.com/users/JasonGross/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JasonGross/subscriptions","organizations_url":"https://api.github.com/users/JasonGross/orgs","repos_url":"https://api.github.com/users/JasonGross/repos","events_url":"https://api.github.com/users/JasonGross/events{/privacy}","received_events_url":"https://api.github.com/users/JasonGross/received_events","type":"User","site_admin":false},"created_at":"2020-04-08T14:33:43Z","updated_at":"2020-04-08T14:33:43Z","author_association":"MEMBER","body":"Ooh, I like that proposal.  Two questions / thoughts:\r\n1. Maybe there should be some syntactic way of distinguishing entry points from bits of the translation that only get used internally?  \"Constructors of the (first when mutual) inductive type would be used as triggers.\" seems rather convoluted (there's no reason to make the inductive mutual a priori), though it could work (note that it's not the constructors themselves, but the things you map them to).  Why not just allow something like `Numeral Notation R [ via IR using (IZR IRZ, Rdiv IRdiv, Rmult IRmult, Z.pow_pos IZpow_pos, Z0 IZ0, Zpos IZpos, Zneg IZneg) ] decimal_to_IR IR_to_decimal : R_scope.` and then you can use as entry points any of the terms which map to constructors of the given inductive.\r\n2. I guess at each step of the translation, the machinery has to decide whether to keep going recursively, or to just insert the constr as-is, and this is keyed on the type of the constructor?  (An alternative would be to require that each type is either fully embedded or else fully replaced; this would require replacing `Z` with `IZ` in the type of `IZpow_pos`.). The \"smart\" version seems a tiny bit nicer from a usability perspective (and debugging these numeral notations is going to be quite hard*), but the more uniform version might be both easier to implement and easier to understand.\r\n\r\n*Because there's no error message when numeral notations fail printing, it might be useful to have a vernacular `Print Numeral` with optional ways of specifying the scope and the type, which will print out the relevant error message rather than silently failing.  I'll go make a separate feature request for this.","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/610995129/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/611096046","html_url":"https://github.com/coq/coq/issues/12035#issuecomment-611096046","issue_url":"https://api.github.com/repos/coq/coq/issues/12035","id":611096046,"node_id":"MDEyOklzc3VlQ29tbWVudDYxMTA5NjA0Ng==","user":{"login":"proux01","id":15833376,"node_id":"MDQ6VXNlcjE1ODMzMzc2","avatar_url":"https://avatars.githubusercontent.com/u/15833376?v=4","gravatar_id":"","url":"https://api.github.com/users/proux01","html_url":"https://github.com/proux01","followers_url":"https://api.github.com/users/proux01/followers","following_url":"https://api.github.com/users/proux01/following{/other_user}","gists_url":"https://api.github.com/users/proux01/gists{/gist_id}","starred_url":"https://api.github.com/users/proux01/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/proux01/subscriptions","organizations_url":"https://api.github.com/users/proux01/orgs","repos_url":"https://api.github.com/users/proux01/repos","events_url":"https://api.github.com/users/proux01/events{/privacy}","received_events_url":"https://api.github.com/users/proux01/received_events","type":"User","site_admin":false},"created_at":"2020-04-08T17:42:40Z","updated_at":"2020-04-08T17:42:40Z","author_association":"CONTRIBUTOR","body":"For 1., I agree, no need for mutual inductives, the types to translate can be deduced from the list of (globref, constructor) pairs.\r\n\r\nFor 2., I don't know, the more uniform version may indeed be simpler to implement.\r\n\r\nI agree debugging won't be comfortable but fortunately enough, one doesn't write this kind of notations everyday. So having debugging tools may be nice but maybe not worth too much effort.\r\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/611096046/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]