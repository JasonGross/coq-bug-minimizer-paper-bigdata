[{"url":"https://api.github.com/repos/coq/coq/issues/comments/337541149","html_url":"https://github.com/coq/coq/issues/4639#issuecomment-337541149","issue_url":"https://api.github.com/repos/coq/coq/issues/4639","id":337541149,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0MTE0OQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-03-21T21:44:17Z","updated_at":"2017-10-18T10:21:25Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nI want a way to say \"unfold this constant only when some of its arguments have exposed constructors in the head positions, and *don't do any other unfolding*\".  Neither [simpl @ fst] nor [cbn [fst]] nor [cbv [fst]] work; the first two simplify the arguments to [fst], while the third unfolds all instances of [fst].\n\nExample: I want a way to unfold the first [fst] but not the second one and not [twos] in the following, without needing to list occurrence numbers (and preferably without needing to walk the tactic myself).\n\nFixpoint twos n (T : Set) := match n with\n                             | 0 => T\n                             | S n' => twos n' (T * T)\n                             end.\n\nGoal forall (x : Set * Set) (y : Set), fst (twos 15 nat * y, twos 15 nat)%type = fst x.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337541149/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337541150","html_url":"https://github.com/coq/coq/issues/4639#issuecomment-337541150","issue_url":"https://api.github.com/repos/coq/coq/issues/4639","id":337541150,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0MTE1MA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-06-04T06:36:34Z","updated_at":"2017-10-18T10:21:26Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nCreated attachment 719\ndevelopment where `simpl @ snd` takes over 3 hours in src/Parsers/Refinement/SharpenedJSONDebug.v\n\nHere's a development (src/Parsers/Refinement/SharpenedJSONDebug.v) where I want this.  I have a `simpl @ snd` that is still running after 3 hours, and all I really want to do is change (snd (?x, ?y)) with y in *.\n\n> Attached file: [slow_simpl.zip](https://coq.inria.fr/bugfiles/attachment.cgi?id=719) (application/zip, 415441 bytes)\n> Description:   development where `simpl @snd` takes over 3 hours in src/Parsers/Refinement/SharpenedJSONDebug.v\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337541150/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337541153","html_url":"https://github.com/coq/coq/issues/4639#issuecomment-337541153","issue_url":"https://api.github.com/repos/coq/coq/issues/4639","id":337541153,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0MTE1Mw==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-07-09T21:58:52Z","updated_at":"2017-10-18T10:21:26Z","author_association":"CONTRIBUTOR","body":"Comment author: @jonleivent\n\nI raised a somewhat related issue in 4916, then answered it myself in a way that perhaps answers this as well:\n\nFixpoint twos n (T : Set) := match n with\n                             | 0 => T\n                             | S n' => twos n' (T * T)\n                             end.\n\nDefinition fst' := Eval cbv delta [fst] in @ fst.\nArguments fst' : simpl nomatch.\n\nGoal forall (x : Set * Set) (y : Set), fst (twos 15 nat * y, twos 15 nat)%type = fst x.\ncbv [fst].\nUndo.\nchange @ fst with @ fst'.\ncbn [fst'].\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337541153/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337541154","html_url":"https://github.com/coq/coq/issues/4639#issuecomment-337541154","issue_url":"https://api.github.com/repos/coq/coq/issues/4639","id":337541154,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0MTE1NA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-07-10T02:14:16Z","updated_at":"2017-10-18T10:21:26Z","author_association":"CONTRIBUTOR","body":"Comment author: @jonleivent\n\nActually, it looks like in the small example you gave \"cbn [fst]\" already does what you want.\n\nHowever, the point is the same - define clones of the functions you want to selectively reduce with cbn/simpl rules like \"Arguments fst' : simpl nomatch\", and also with whatever transparent/opaque/strategy you want, change into them, reduce them with cbn [clone], then change any remaining ones back.\n\nAdmittedly, it is cumbersome.  There's no way for a tactic to discover a constant it wants to selectively reduce and define such a clone for it within Ltac, because argument decorations and opacity only exist for top-level symbols.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337541154/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337541155","html_url":"https://github.com/coq/coq/issues/4639#issuecomment-337541155","issue_url":"https://api.github.com/repos/coq/coq/issues/4639","id":337541155,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0MTE1NQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-07-10T13:23:42Z","updated_at":"2017-10-18T10:21:26Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nSo [cbn] is significantly better than [simpl].  Great!  This might be good enough for my purposes, though it's not quite what I actually want.  Here's a thing that [cbn] doesn't handle:\n\nGoal forall (x : Set * Set) (y : Set), fst (twos 15 nat * y, twos 15 nat)%type = fst x.\n  intros.\n  change (twos 15 nat) with (let v := twos 15 nat in match 0 with 0 => v | S _ => (v * v)%type end).\n  cbn [fst].\n\n(Note that it reduces the match and the [let].)\n\nThe problem with your change/unfold suggestion is that I need to beta-iota reduce to figure out which ones disappear, and once I beta-reduce, I can't revert the ones under binders.\n\nHere's a hack to do things without cbn:\n\nDefinition ufst {A B} x := Eval compute in @ fst A B x.\nDefinition nfst := @ fst.\n\nLtac unfold_fst :=\n  repeat (change @ fst with @ ufst at 1;\n          match goal with\n          | [ |- appcontext[@ ufst _ _ (_, _)] ]\n            => cbv beta iota delta [ufst]\n          | _ => change @ ufst with @ nfst\n          end);\n  change @ nfst with @ fst.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337541155/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337541156","html_url":"https://github.com/coq/coq/issues/4639#issuecomment-337541156","issue_url":"https://api.github.com/repos/coq/coq/issues/4639","id":337541156,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0MTE1Ng==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-07-10T14:40:47Z","updated_at":"2017-10-18T10:21:27Z","author_association":"CONTRIBUTOR","body":"Comment author: @jonleivent\n\nWell, I would probably be as grateful as you if someone developed something like a reduce_strat tactic with similar precise control as rewrite_strat, and somehow make it efficient.  I've written several different attempts at precision-reducers using various hacks, include exactly one step beta and zeta reducers (nice for those going-under-binders tactics that end up with a single beta or zeta addition to a term that one otherwise wishes not to disturb) - if those would help you I can send them along.  Unlike most of my hacks, they got an actual developer's seal of approval (Arnaud, IIRC).\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337541156/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]