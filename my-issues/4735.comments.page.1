[{"url":"https://api.github.com/repos/coq/coq/issues/comments/337542512","html_url":"https://github.com/coq/coq/issues/4735#issuecomment-337542512","issue_url":"https://api.github.com/repos/coq/coq/issues/4735","id":337542512,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0MjUxMg==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-05-14T04:00:50Z","updated_at":"2022-01-13T16:09:48Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\r\n\r\nHere is some code that worked in 8.4 but fails in 8.5.  What's going on?\r\n```coq\r\nRequire Import Coq.Classes.Morphisms Coq.Relations.Relation_Definitions.\r\n\r\nInductive TypeCode : Set :=\r\n| cnat\r\n| carrow (A B : TypeCode).\r\n\r\nFixpoint interp_TypeCode (t : TypeCode) : Set\r\n  := match t with\r\n     | cnat => nat\r\n     | carrow A B => interp_TypeCode A -> interp_TypeCode B\r\n     end%type.\r\n\r\nFixpoint Proper_relation_for (T : TypeCode) : relation (interp_TypeCode T)\r\n  := match T return relation (interp_TypeCode T) with\r\n     | carrow A B => (Proper_relation_for A ==> Proper_relation_for B)%signature\r\n     | _ => eq\r\n     end.\r\n\r\nGoal Proper_relation_for (carrow cnat cnat) (fun x => x) (fun x => x).\r\n  intros ???.\r\n  progress subst.\r\n```\r\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337542512/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337542513","html_url":"https://github.com/coq/coq/issues/4735#issuecomment-337542513","issue_url":"https://api.github.com/repos/coq/coq/issues/4735","id":337542513,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0MjUxMw==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-05-14T17:56:24Z","updated_at":"2017-10-18T10:25:51Z","author_association":"CONTRIBUTOR","body":"Comment author: @herbelin\n\nThere are more places where, when unfolding a constant hiding a fixpoint, the recursive call is reusing the constant name rather than using the \"fix\" expression. Apparently, intros is using this change, and, therefore, \"Proper_relation_for cnat\" is not anymore unfolded.\n\nThe change was requested by several users and is natural. It can be compensated in your case by using e.g. simpl before intros.\n\nOf course, this raises again the question of how much can Coq be improved (and reusing a name rather than the underlying \"fix\" construction is commonly considered to be an improvement) while not strongly breaking scripts.\n\nThe rest of this comment is thinking aloud...\n\nThere are different approaches in general (compatibility flags, translators, etc.) but in the case of reasoning up to convertibility, and here, this is somehow what it is about (as e.g. also in recent [BZ#4717](https://github.com/coq/coq/issues?q=is%3Aissue%20%22Original%20bug%20ID%3A%20BZ%234717%22)) it looks to me that noone has a good answer. Typically, who should be responsible of unfolding \"Proper_relation_for cnat\" in your example? Should it be \"intros\"? Should it be the user? Should \"subst\" recognize that \"Proper_relation_for cna\" hides an equality?\n\nOne side question: in your original example, is \"intros\" part of an ltac definition or at toplevel. For instance, a general feeling about ltac definitions seems to be that they use only clearly specified not too smart tactics.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337542513/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337542514","html_url":"https://github.com/coq/coq/issues/4735#issuecomment-337542514","issue_url":"https://api.github.com/repos/coq/coq/issues/4735","id":337542514,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzU0MjUxNA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-05-14T19:59:18Z","updated_at":"2017-10-18T10:25:51Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nIn my actual use-case, the workaround was to selectively [unfold Proper_relation_for at 1] before [intro]; [simpl] does way too much.\n\nI ran into another case of what is probably the same underlying issue; a [Definition] that in 8.4 inferred a type for a binder that had a bare fixpoint applied to a constructor, while in 8.5 the inferred type was the name of the fixpoint applied to the constructor.  This broke one of my ltac pattern matches that I wrote to handle the unfolded definition.  The workaround was to change the pattern match and explicitly give the binder the 8.5 annotation.\n\nI agree that this is an improvement, but it's yet another incompatibility.  Even just having a script that automatically flags precisely when there are any differences in execution between 8.4 and 8.5 (be they differently inferred types, different paths of tactic execution, different interpretations, etc.) would already be a huge help in tracking down these issues.\n\nUnless this change in the conversion algorithm deserves a compatibility option/flag (which it might), perhaps the resolution to this is \"invalid\", and the only change required is to note this in the CHANGELOG and in COMPATIBILITY.\n\n\nRegarding your thinking: \nIn this case, I'd say the [intros] is responsible for the unfolding, whatever that means.  It should definitely not be [subst]; that would make [subst] unreasonably slow in cases where you have hypotheses which are slow to put in head normal form.\n\nIn my original example, the [intro] is part of a big [repeat match goal with ... | _ => intro | ... end].\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337542514/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/1012121063","html_url":"https://github.com/coq/coq/issues/4735#issuecomment-1012121063","issue_url":"https://api.github.com/repos/coq/coq/issues/4735","id":1012121063,"node_id":"IC_kwDOABUDh848U73n","user":{"login":"ppedrot","id":1202327,"node_id":"MDQ6VXNlcjEyMDIzMjc=","avatar_url":"https://avatars.githubusercontent.com/u/1202327?v=4","gravatar_id":"","url":"https://api.github.com/users/ppedrot","html_url":"https://github.com/ppedrot","followers_url":"https://api.github.com/users/ppedrot/followers","following_url":"https://api.github.com/users/ppedrot/following{/other_user}","gists_url":"https://api.github.com/users/ppedrot/gists{/gist_id}","starred_url":"https://api.github.com/users/ppedrot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ppedrot/subscriptions","organizations_url":"https://api.github.com/users/ppedrot/orgs","repos_url":"https://api.github.com/users/ppedrot/repos","events_url":"https://api.github.com/users/ppedrot/events{/privacy}","received_events_url":"https://api.github.com/users/ppedrot/received_events","type":"User","site_admin":false},"created_at":"2022-01-13T13:08:40Z","updated_at":"2022-01-13T13:08:40Z","author_association":"MEMBER","body":"Old incompatibility that has sedimented since, let's close.","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/1012121063/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]