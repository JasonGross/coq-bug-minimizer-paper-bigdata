[{"url":"https://api.github.com/repos/coq/coq/issues/comments/415053508","html_url":"https://github.com/coq/coq/issues/8153#issuecomment-415053508","issue_url":"https://api.github.com/repos/coq/coq/issues/8153","id":415053508,"node_id":"MDEyOklzc3VlQ29tbWVudDQxNTA1MzUwOA==","user":{"login":"SkySkimmer","id":2461932,"node_id":"MDQ6VXNlcjI0NjE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/2461932?v=4","gravatar_id":"","url":"https://api.github.com/users/SkySkimmer","html_url":"https://github.com/SkySkimmer","followers_url":"https://api.github.com/users/SkySkimmer/followers","following_url":"https://api.github.com/users/SkySkimmer/following{/other_user}","gists_url":"https://api.github.com/users/SkySkimmer/gists{/gist_id}","starred_url":"https://api.github.com/users/SkySkimmer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/SkySkimmer/subscriptions","organizations_url":"https://api.github.com/users/SkySkimmer/orgs","repos_url":"https://api.github.com/users/SkySkimmer/repos","events_url":"https://api.github.com/users/SkySkimmer/events{/privacy}","received_events_url":"https://api.github.com/users/SkySkimmer/received_events","type":"User","site_admin":false},"created_at":"2018-08-22T14:33:00Z","updated_at":"2018-08-22T14:33:00Z","author_association":"CONTRIBUTOR","body":"Duplicate of #8154.","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/415053508/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/415786485","html_url":"https://github.com/coq/coq/issues/8153#issuecomment-415786485","issue_url":"https://api.github.com/repos/coq/coq/issues/8153","id":415786485,"node_id":"MDEyOklzc3VlQ29tbWVudDQxNTc4NjQ4NQ==","user":{"login":"JasonGross","id":396076,"node_id":"MDQ6VXNlcjM5NjA3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/396076?v=4","gravatar_id":"","url":"https://api.github.com/users/JasonGross","html_url":"https://github.com/JasonGross","followers_url":"https://api.github.com/users/JasonGross/followers","following_url":"https://api.github.com/users/JasonGross/following{/other_user}","gists_url":"https://api.github.com/users/JasonGross/gists{/gist_id}","starred_url":"https://api.github.com/users/JasonGross/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JasonGross/subscriptions","organizations_url":"https://api.github.com/users/JasonGross/orgs","repos_url":"https://api.github.com/users/JasonGross/repos","events_url":"https://api.github.com/users/JasonGross/events{/privacy}","received_events_url":"https://api.github.com/users/JasonGross/received_events","type":"User","site_admin":false},"created_at":"2018-08-24T15:02:08Z","updated_at":"2018-08-24T15:02:08Z","author_association":"MEMBER","body":"No, I don't think this is a duplicate, even if the same commit is responsible for both.  In particular, this is very clearly a bug that makes developing some things much more annoying, while #8154 is closer to a disagreement with the current spec.  Also, it is theoretically possible to separate the behavior, and have `Set Proof Using Clear Unused` not clear let-bound definitions, while still fixing this bug.\r\n\r\ncc'ing @gares here","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/415786485/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/449491007","html_url":"https://github.com/coq/coq/issues/8153#issuecomment-449491007","issue_url":"https://api.github.com/repos/coq/coq/issues/8153","id":449491007,"node_id":"MDEyOklzc3VlQ29tbWVudDQ0OTQ5MTAwNw==","user":{"login":"SkySkimmer","id":2461932,"node_id":"MDQ6VXNlcjI0NjE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/2461932?v=4","gravatar_id":"","url":"https://api.github.com/users/SkySkimmer","html_url":"https://github.com/SkySkimmer","followers_url":"https://api.github.com/users/SkySkimmer/followers","following_url":"https://api.github.com/users/SkySkimmer/following{/other_user}","gists_url":"https://api.github.com/users/SkySkimmer/gists{/gist_id}","starred_url":"https://api.github.com/users/SkySkimmer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/SkySkimmer/subscriptions","organizations_url":"https://api.github.com/users/SkySkimmer/orgs","repos_url":"https://api.github.com/users/SkySkimmer/repos","events_url":"https://api.github.com/users/SkySkimmer/events{/privacy}","received_events_url":"https://api.github.com/users/SkySkimmer/received_events","type":"User","site_admin":false},"created_at":"2018-12-21T20:30:03Z","updated_at":"2018-12-21T20:30:03Z","author_association":"CONTRIBUTOR","body":">Also, it is theoretically possible to separate the behavior, and have Set Proof Using Clear Unused not clear let-bound definitions, while still fixing this bug.\r\n\r\nI don't think that makes sense. If you allow `y` in the body of `foo` what's supposed to happen if I unfold `foo` somewhere which doesn't have access to `y`?","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/449491007/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/449492986","html_url":"https://github.com/coq/coq/issues/8153#issuecomment-449492986","issue_url":"https://api.github.com/repos/coq/coq/issues/8153","id":449492986,"node_id":"MDEyOklzc3VlQ29tbWVudDQ0OTQ5Mjk4Ng==","user":{"login":"SkySkimmer","id":2461932,"node_id":"MDQ6VXNlcjI0NjE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/2461932?v=4","gravatar_id":"","url":"https://api.github.com/users/SkySkimmer","html_url":"https://github.com/SkySkimmer","followers_url":"https://api.github.com/users/SkySkimmer/followers","following_url":"https://api.github.com/users/SkySkimmer/following{/other_user}","gists_url":"https://api.github.com/users/SkySkimmer/gists{/gist_id}","starred_url":"https://api.github.com/users/SkySkimmer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/SkySkimmer/subscriptions","organizations_url":"https://api.github.com/users/SkySkimmer/orgs","repos_url":"https://api.github.com/users/SkySkimmer/repos","events_url":"https://api.github.com/users/SkySkimmer/events{/privacy}","received_events_url":"https://api.github.com/users/SkySkimmer/received_events","type":"User","site_admin":false},"created_at":"2018-12-21T20:39:54Z","updated_at":"2018-12-21T20:39:54Z","author_association":"CONTRIBUTOR","body":"I guess if `foo` is opaque it could work, but we still have to check that `y` doesn't appear in its type somehow.","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/449492986/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/932398855","html_url":"https://github.com/coq/coq/issues/8153#issuecomment-932398855","issue_url":"https://api.github.com/repos/coq/coq/issues/8153","id":932398855,"node_id":"IC_kwDOABUDh843k0cH","user":{"login":"JasonGross","id":396076,"node_id":"MDQ6VXNlcjM5NjA3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/396076?v=4","gravatar_id":"","url":"https://api.github.com/users/JasonGross","html_url":"https://github.com/JasonGross","followers_url":"https://api.github.com/users/JasonGross/followers","following_url":"https://api.github.com/users/JasonGross/following{/other_user}","gists_url":"https://api.github.com/users/JasonGross/gists{/gist_id}","starred_url":"https://api.github.com/users/JasonGross/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JasonGross/subscriptions","organizations_url":"https://api.github.com/users/JasonGross/orgs","repos_url":"https://api.github.com/users/JasonGross/repos","events_url":"https://api.github.com/users/JasonGross/events{/privacy}","received_events_url":"https://api.github.com/users/JasonGross/received_events","type":"User","site_admin":false},"created_at":"2021-10-01T17:03:29Z","updated_at":"2021-10-01T17:03:29Z","author_association":"MEMBER","body":"The issue is that there's a disagreement between different parts of `Proof using` about the status of let binders.  In the example, `Proof using Type` for `foo` apparently allows access to all let binders depending only on variables in the type, under the (correct) presumption that using them doesn't require introducing additional variable dependencies.  However, this logic is backwards for checking the use of such lemmas, where it's incorrect to presume that access to let's is required.  One way to fix this is to give Let's the status of variables for the purposes of Proof using analysis (change the behavior of `Proof using Type`).  Another is to actually track dependency of proofs on Let's (change the behavior of `Qed`, I think)","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/932398855/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]