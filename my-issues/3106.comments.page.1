[{"url":"https://api.github.com/repos/coq/coq/issues/comments/337515548","html_url":"https://github.com/coq/coq/issues/3106#issuecomment-337515548","issue_url":"https://api.github.com/repos/coq/coq/issues/3106","id":337515548,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxNTU0OA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2013-08-04T18:03:08Z","updated_at":"2017-10-18T09:06:59Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nI would like to be able to define [eapply] in Ltac using [refine].  I have tried the two following approaches, but my understanding is that [Tactic Notations] are desugared before tactics are run, and that [Ltac]s only accept constrs, not open_constrs (though I'm not quite sure how the desugaring of tactic notations works if this is the case), and hence that recursive tactics taking open_constrs cannot presently be defined.\n\nLtac eapply' term :=\n  first [ refine term\n        | eapply' (term _) ].\n\n(*\nTactic Notation \"eapply''0\" open_constr(term) tactic(tac) :=\n  first [ refine term\n        | tac (term _) tac ].\n\nTactic Notation \"eapply''\" open_constr(term) := eapply'0 term eapply'0.\n*)\n\nAxiom uip : forall T (x y : T) (pf1 pf2 : x = y), pf1 = pf2.\n\nGoal forall T (x y : T) (pf1 pf2 : x = y), pf1 = pf2.\nintros.\neapply' uip. (* In nested Ltac calls to \"eapply'\", last call failed.                                                                                        \nError: in Refiner.tclFAIL_s: No applicable tactic. *)\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337515548/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337515551","html_url":"https://github.com/coq/coq/issues/3106#issuecomment-337515551","issue_url":"https://api.github.com/repos/coq/coq/issues/3106","id":337515551,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxNTU1MQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2013-08-04T19:29:48Z","updated_at":"2017-10-18T09:06:59Z","author_association":"CONTRIBUTOR","body":"Comment author: @ppedrot\n\nThat's... complicated to say the least.\n\nYou're currently flirting on the fringes of the expressivity of Ltac, which was not conceived to do what you mean to. Maybe one day, when I or some fellow have cleaned up the mess which is the handling of Ltac arguments. But for now, I am afraid that You Just Can't Do Thatâ„¢.\n\n(Maybe you'll find a side path that'll work, but I guess it would be more a bug than anything else.)\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337515551/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337515553","html_url":"https://github.com/coq/coq/issues/3106#issuecomment-337515553","issue_url":"https://api.github.com/repos/coq/coq/issues/3106","id":337515553,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxNTU1Mw==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2013-08-06T11:55:35Z","updated_at":"2017-10-18T09:06:59Z","author_association":"CONTRIBUTOR","body":"Comment author: @ppedrot\n\n\n\n*** This bug has been marked as a duplicate of bug [BZ#1258](https://github.com/coq/coq/issues?q=is%3Aissue%20%22Original%20bug%20ID%3A%20BZ%231258%22) ***\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337515553/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337515554","html_url":"https://github.com/coq/coq/issues/3106#issuecomment-337515554","issue_url":"https://api.github.com/repos/coq/coq/issues/3106","id":337515554,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxNTU1NA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2013-08-06T16:12:25Z","updated_at":"2017-10-18T09:06:59Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nI do not think this is a duplicate of Bug [BZ#1258](https://github.com/coq/coq/issues?q=is%3Aissue%20%22Original%20bug%20ID%3A%20BZ%231258%22); unless I am mis-understanding something, the present abilities of \"Tactic Notation\" are sufficient to implement the wishlist in that bug, which does not require recursing with open terms.  I have commented there to that effect, and reopened this bug.  If my interpretation is incorrect, feel free to remark this bug as a duplicate.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337515554/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337515555","html_url":"https://github.com/coq/coq/issues/3106#issuecomment-337515555","issue_url":"https://api.github.com/repos/coq/coq/issues/3106","id":337515555,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxNTU1NQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2016-05-03T18:36:20Z","updated_at":"2017-10-18T09:06:59Z","author_association":"CONTRIBUTOR","body":"Comment author: @ppedrot\n\nYou'll be happy to know that in current trunk, you can already implement what you wish as follows:\n\nLtac eapply' term :=\n  first [ refine term\n        | eapply' open_constr:(term _) ].\n\nFor now, this is not documented, but it will be before the 8.6 release.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337515555/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]