[{"url":"https://api.github.com/repos/coq/coq/issues/comments/841317385","html_url":"https://github.com/coq/coq/issues/14321#issuecomment-841317385","issue_url":"https://api.github.com/repos/coq/coq/issues/14321","id":841317385,"node_id":"MDEyOklzc3VlQ29tbWVudDg0MTMxNzM4NQ==","user":{"login":"jfehrle","id":1253341,"node_id":"MDQ6VXNlcjEyNTMzNDE=","avatar_url":"https://avatars.githubusercontent.com/u/1253341?v=4","gravatar_id":"","url":"https://api.github.com/users/jfehrle","html_url":"https://github.com/jfehrle","followers_url":"https://api.github.com/users/jfehrle/followers","following_url":"https://api.github.com/users/jfehrle/following{/other_user}","gists_url":"https://api.github.com/users/jfehrle/gists{/gist_id}","starred_url":"https://api.github.com/users/jfehrle/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jfehrle/subscriptions","organizations_url":"https://api.github.com/users/jfehrle/orgs","repos_url":"https://api.github.com/users/jfehrle/repos","events_url":"https://api.github.com/users/jfehrle/events{/privacy}","received_events_url":"https://api.github.com/users/jfehrle/received_events","type":"User","site_admin":false},"created_at":"2021-05-14T15:31:38Z","updated_at":"2021-05-14T15:32:24Z","author_association":"CONTRIBUTOR","body":"I've been thinking about use cases such as yours.  My preliminary thoughts (simplest to hardest):\r\n- Provide a way for the user to view the proof state as of just before the last N backtracking operations.  (The implementation is probably just saving the stack at the right moment plus GUI to make it usable.)\r\n- A similar feature that keeps the last N tactics that were applied.\r\n- Let the user reset the proof to one of those prior states so they can continue execution from that state.\r\n- At breakpoints, let the user enter tactics in the debugger panel outside of the proof script as a way of experimenting with fixes.  The user would decide whether to include or omit the related proof state changes in the \r\nproof being debugged.","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/841317385/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/841332487","html_url":"https://github.com/coq/coq/issues/14321#issuecomment-841332487","issue_url":"https://api.github.com/repos/coq/coq/issues/14321","id":841332487,"node_id":"MDEyOklzc3VlQ29tbWVudDg0MTMzMjQ4Nw==","user":{"login":"JasonGross","id":396076,"node_id":"MDQ6VXNlcjM5NjA3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/396076?v=4","gravatar_id":"","url":"https://api.github.com/users/JasonGross","html_url":"https://github.com/JasonGross","followers_url":"https://api.github.com/users/JasonGross/followers","following_url":"https://api.github.com/users/JasonGross/following{/other_user}","gists_url":"https://api.github.com/users/JasonGross/gists{/gist_id}","starred_url":"https://api.github.com/users/JasonGross/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JasonGross/subscriptions","organizations_url":"https://api.github.com/users/JasonGross/orgs","repos_url":"https://api.github.com/users/JasonGross/repos","events_url":"https://api.github.com/users/JasonGross/events{/privacy}","received_events_url":"https://api.github.com/users/JasonGross/received_events","type":"User","site_admin":false},"created_at":"2021-05-14T15:54:50Z","updated_at":"2021-05-14T15:54:50Z","author_association":"MEMBER","body":"The first two are sufficient, as long as I can view things with `Set Printing All` so I can copy/paste the goal and context and play around with it.  Importantly, I'd also like to be able to explore backwards from the failure point, so I can see the proof state before that.\r\n\r\n> Let the user reset the proof to one of those prior states so they can continue execution from that state.\r\n\r\nThis would be useful, though I think you'd need to emit an error at Qed about the proof having been generated via interaction with the debugger.","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/841332487/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/1018720494","html_url":"https://github.com/coq/coq/issues/14321#issuecomment-1018720494","issue_url":"https://api.github.com/repos/coq/coq/issues/14321","id":1018720494,"node_id":"IC_kwDOABUDh848uHDu","user":{"login":"samuelgruetter","id":2394355,"node_id":"MDQ6VXNlcjIzOTQzNTU=","avatar_url":"https://avatars.githubusercontent.com/u/2394355?v=4","gravatar_id":"","url":"https://api.github.com/users/samuelgruetter","html_url":"https://github.com/samuelgruetter","followers_url":"https://api.github.com/users/samuelgruetter/followers","following_url":"https://api.github.com/users/samuelgruetter/following{/other_user}","gists_url":"https://api.github.com/users/samuelgruetter/gists{/gist_id}","starred_url":"https://api.github.com/users/samuelgruetter/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/samuelgruetter/subscriptions","organizations_url":"https://api.github.com/users/samuelgruetter/orgs","repos_url":"https://api.github.com/users/samuelgruetter/repos","events_url":"https://api.github.com/users/samuelgruetter/events{/privacy}","received_events_url":"https://api.github.com/users/samuelgruetter/received_events","type":"User","site_admin":false},"created_at":"2022-01-21T17:34:43Z","updated_at":"2022-01-21T17:34:43Z","author_association":"CONTRIBUTOR","body":"A related/alternative feature achieving a similar goal would be a setting that causes top-level failures to keep the proof state changes made by the tactic so far, instead of rolling them back.\r\n\r\nFor example, the following script\r\n\r\n```coq\r\nLtac a := set (A1 := 3); fail; set (A2 := 4).\r\nLtac b := set (B1 := 2); a; set (B2 := 5).\r\nLtac c := set (C1 := 1); b; set (C2 := 6).\r\nGoal False.\r\n  Unset Ltac Rollback On Failure.\r\n  c.\r\n```\r\n\r\nwould result in\r\n\r\n```\r\n  C1 := 1 : nat\r\n  B1 := 2 : nat\r\n  A1 := 3 : nat\r\n  ============================\r\n  False\r\n```\r\n\r\nIf after such a non-rolled-back failure, it would still be possible to enter and execute further Ltac commands in the toplevel proof script, that would be quite a powerful debugging mechanism, without even having to start/use the debugger.\r\n\r\nDo you think that would be hard to implement?","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/1018720494/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/1018731531","html_url":"https://github.com/coq/coq/issues/14321#issuecomment-1018731531","issue_url":"https://api.github.com/repos/coq/coq/issues/14321","id":1018731531,"node_id":"IC_kwDOABUDh848uJwL","user":{"login":"JasonGross","id":396076,"node_id":"MDQ6VXNlcjM5NjA3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/396076?v=4","gravatar_id":"","url":"https://api.github.com/users/JasonGross","html_url":"https://github.com/JasonGross","followers_url":"https://api.github.com/users/JasonGross/followers","following_url":"https://api.github.com/users/JasonGross/following{/other_user}","gists_url":"https://api.github.com/users/JasonGross/gists{/gist_id}","starred_url":"https://api.github.com/users/JasonGross/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JasonGross/subscriptions","organizations_url":"https://api.github.com/users/JasonGross/orgs","repos_url":"https://api.github.com/users/JasonGross/repos","events_url":"https://api.github.com/users/JasonGross/events{/privacy}","received_events_url":"https://api.github.com/users/JasonGross/received_events","type":"User","site_admin":false},"created_at":"2022-01-21T17:51:04Z","updated_at":"2022-01-21T17:51:04Z","author_association":"MEMBER","body":"@samuelgruetter I'm not sure how to make technical sense of your request.  If the first branch of a `match` statement fails, should the tactic quit?  If you have `match goal with _ => rewrite a; fail | _ => rewrite b end`, do we get the rewrite from the first branch, or the rewrite from the second?  If I write `try (a; fail)`, should `a` persist?  What about `(a; fail) + idtac`?","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/1018731531/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/1018734659","html_url":"https://github.com/coq/coq/issues/14321#issuecomment-1018734659","issue_url":"https://api.github.com/repos/coq/coq/issues/14321","id":1018734659,"node_id":"IC_kwDOABUDh848uKhD","user":{"login":"JasonGross","id":396076,"node_id":"MDQ6VXNlcjM5NjA3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/396076?v=4","gravatar_id":"","url":"https://api.github.com/users/JasonGross","html_url":"https://github.com/JasonGross","followers_url":"https://api.github.com/users/JasonGross/followers","following_url":"https://api.github.com/users/JasonGross/following{/other_user}","gists_url":"https://api.github.com/users/JasonGross/gists{/gist_id}","starred_url":"https://api.github.com/users/JasonGross/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JasonGross/subscriptions","organizations_url":"https://api.github.com/users/JasonGross/orgs","repos_url":"https://api.github.com/users/JasonGross/repos","events_url":"https://api.github.com/users/JasonGross/events{/privacy}","received_events_url":"https://api.github.com/users/JasonGross/received_events","type":"User","site_admin":false},"created_at":"2022-01-21T17:55:48Z","updated_at":"2022-01-21T17:55:48Z","author_association":"MEMBER","body":"I guess you said \"top-level failure\", but I don't think that's really sensible concept in the tactic monad.  If you have the moral equivalent of `try (tac1; tac2; fail e) with e -> (tac3; reraise e)`, should `tac1` and `tac2` be rolled back, or not?  What about `try (tac1; tac2; fail e) with e -> reraise e`?  What about `try (tac1; tac2; fail e) with e -> fail e'`?","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/1018734659/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/1018737362","html_url":"https://github.com/coq/coq/issues/14321#issuecomment-1018737362","issue_url":"https://api.github.com/repos/coq/coq/issues/14321","id":1018737362,"node_id":"IC_kwDOABUDh848uLLS","user":{"login":"SkySkimmer","id":2461932,"node_id":"MDQ6VXNlcjI0NjE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/2461932?v=4","gravatar_id":"","url":"https://api.github.com/users/SkySkimmer","html_url":"https://github.com/SkySkimmer","followers_url":"https://api.github.com/users/SkySkimmer/followers","following_url":"https://api.github.com/users/SkySkimmer/following{/other_user}","gists_url":"https://api.github.com/users/SkySkimmer/gists{/gist_id}","starred_url":"https://api.github.com/users/SkySkimmer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/SkySkimmer/subscriptions","organizations_url":"https://api.github.com/users/SkySkimmer/orgs","repos_url":"https://api.github.com/users/SkySkimmer/repos","events_url":"https://api.github.com/users/SkySkimmer/events{/privacy}","received_events_url":"https://api.github.com/users/SkySkimmer/received_events","type":"User","site_admin":false},"created_at":"2022-01-21T17:59:32Z","updated_at":"2022-01-21T17:59:32Z","author_association":"CONTRIBUTOR","body":">Do you think that would be hard to implement?\r\n\r\nBasically impossible.","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/1018737362/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/1018752895","html_url":"https://github.com/coq/coq/issues/14321#issuecomment-1018752895","issue_url":"https://api.github.com/repos/coq/coq/issues/14321","id":1018752895,"node_id":"IC_kwDOABUDh848uO9_","user":{"login":"samuelgruetter","id":2394355,"node_id":"MDQ6VXNlcjIzOTQzNTU=","avatar_url":"https://avatars.githubusercontent.com/u/2394355?v=4","gravatar_id":"","url":"https://api.github.com/users/samuelgruetter","html_url":"https://github.com/samuelgruetter","followers_url":"https://api.github.com/users/samuelgruetter/followers","following_url":"https://api.github.com/users/samuelgruetter/following{/other_user}","gists_url":"https://api.github.com/users/samuelgruetter/gists{/gist_id}","starred_url":"https://api.github.com/users/samuelgruetter/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/samuelgruetter/subscriptions","organizations_url":"https://api.github.com/users/samuelgruetter/orgs","repos_url":"https://api.github.com/users/samuelgruetter/repos","events_url":"https://api.github.com/users/samuelgruetter/events{/privacy}","received_events_url":"https://api.github.com/users/samuelgruetter/received_events","type":"User","site_admin":false},"created_at":"2022-01-21T18:21:31Z","updated_at":"2022-01-21T18:21:31Z","author_association":"CONTRIBUTOR","body":"> I guess you said \"top-level failure\", but I don't think that's really sensible concept in the tactic monad.\r\n\r\nYou're the one who introduced this concept at the beginning of this thread, @JasonGross :wink: And intuitively, it makes sense to me... What I mean is, if the user processes `my_tac.` in interactive proof mode, and the tactic would fail with an error `e`, make it a success instead, and in the goal buffer, display the proof state just as is was before `e` was (re-)raised the last time.","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/1018752895/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/1018794278","html_url":"https://github.com/coq/coq/issues/14321#issuecomment-1018794278","issue_url":"https://api.github.com/repos/coq/coq/issues/14321","id":1018794278,"node_id":"IC_kwDOABUDh848uZEm","user":{"login":"JasonGross","id":396076,"node_id":"MDQ6VXNlcjM5NjA3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/396076?v=4","gravatar_id":"","url":"https://api.github.com/users/JasonGross","html_url":"https://github.com/JasonGross","followers_url":"https://api.github.com/users/JasonGross/followers","following_url":"https://api.github.com/users/JasonGross/following{/other_user}","gists_url":"https://api.github.com/users/JasonGross/gists{/gist_id}","starred_url":"https://api.github.com/users/JasonGross/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JasonGross/subscriptions","organizations_url":"https://api.github.com/users/JasonGross/orgs","repos_url":"https://api.github.com/users/JasonGross/repos","events_url":"https://api.github.com/users/JasonGross/events{/privacy}","received_events_url":"https://api.github.com/users/JasonGross/received_events","type":"User","site_admin":false},"created_at":"2022-01-21T19:23:54Z","updated_at":"2022-01-21T19:23:54Z","author_association":"MEMBER","body":"@samuelgruetter I guess that's true.  It seems feasible to imagine an approximate implementation of this, something like, \"when the overall tactic fails, drop into the debugger and automatically step backwards, with a handful of known constructions that constitute 'propagating the failure'\".  I guess you could do the same thing without the debugger?  But it's always going to be a heuristic process, and without the ability to step forwards and backwards, it seems like the heuristic getting it wrong is going to be much more painful.","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/1018794278/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/1018817663","html_url":"https://github.com/coq/coq/issues/14321#issuecomment-1018817663","issue_url":"https://api.github.com/repos/coq/coq/issues/14321","id":1018817663,"node_id":"IC_kwDOABUDh848uex_","user":{"login":"jfehrle","id":1253341,"node_id":"MDQ6VXNlcjEyNTMzNDE=","avatar_url":"https://avatars.githubusercontent.com/u/1253341?v=4","gravatar_id":"","url":"https://api.github.com/users/jfehrle","html_url":"https://github.com/jfehrle","followers_url":"https://api.github.com/users/jfehrle/followers","following_url":"https://api.github.com/users/jfehrle/following{/other_user}","gists_url":"https://api.github.com/users/jfehrle/gists{/gist_id}","starred_url":"https://api.github.com/users/jfehrle/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jfehrle/subscriptions","organizations_url":"https://api.github.com/users/jfehrle/orgs","repos_url":"https://api.github.com/users/jfehrle/repos","events_url":"https://api.github.com/users/jfehrle/events{/privacy}","received_events_url":"https://api.github.com/users/jfehrle/received_events","type":"User","site_admin":false},"created_at":"2022-01-21T19:59:15Z","updated_at":"2022-01-21T19:59:15Z","author_association":"CONTRIBUTOR","body":"I agree with @SkySkimmer: It's unlikely we would want to support such a feature within the tactic monad, but we should be able to do something in the debugger.  For example, the debugger can remember the context and stack for the last successful tactic, which could then be recreated somehow after a top-level failure as a separate proof to allow the user to experiment with alternative tactics.  Users would want to see the call stack and the defined variables from that last tactic.  A richer system would probably save history about the last N failures/backtracking events and/or be smarter about what gets saved to make debugging more efficient.\r\n\r\nIn the basic form of such a feature, the user would be able to experiment with the context, but wouldn't be able to complete the original failing proof.  If the debugger can efficiently save the partial proof term then it _may_ be possible to permit completing the original proof.\r\n\r\nThe user would need to be in the debugger to do this, which had a performance cost of about 20-25% the one time I measured it.  Saving history data could use large amounts of memory.  No free lunch, but the cost is likely  affordable.","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/1018817663/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/1020474485","html_url":"https://github.com/coq/coq/issues/14321#issuecomment-1020474485","issue_url":"https://api.github.com/repos/coq/coq/issues/14321","id":1020474485,"node_id":"IC_kwDOABUDh8480zR1","user":{"login":"jfehrle","id":1253341,"node_id":"MDQ6VXNlcjEyNTMzNDE=","avatar_url":"https://avatars.githubusercontent.com/u/1253341?v=4","gravatar_id":"","url":"https://api.github.com/users/jfehrle","html_url":"https://github.com/jfehrle","followers_url":"https://api.github.com/users/jfehrle/followers","following_url":"https://api.github.com/users/jfehrle/following{/other_user}","gists_url":"https://api.github.com/users/jfehrle/gists{/gist_id}","starred_url":"https://api.github.com/users/jfehrle/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jfehrle/subscriptions","organizations_url":"https://api.github.com/users/jfehrle/orgs","repos_url":"https://api.github.com/users/jfehrle/repos","events_url":"https://api.github.com/users/jfehrle/events{/privacy}","received_events_url":"https://api.github.com/users/jfehrle/received_events","type":"User","site_admin":false},"created_at":"2022-01-24T19:41:21Z","updated_at":"2022-01-24T19:41:21Z","author_association":"CONTRIBUTOR","body":"> @samuelgruetter A related/alternative feature achieving a similar goal would be a setting that causes top-level failures to keep the proof state changes made by the tactic so far, instead of rolling them back.\r\n\r\nIs that flexible enough?  Suppose you have multiple backtracking points and there's a failure in the innermost one that cascdes to a top-level failure.  I think you'd want to be able to use the proof state from the innermost backtracking point, which might require keeping the proof term in the history.\r\n\r\nOTOH, maybe supporting this only at the top-level would cover the most common case.  That could be supplemented by a debugger command that lets you interrupt the proof while keeping the proof state changes.\r\n\r\nSamuel, how long do your scripts run before they get top-level failures?  How much time would this feature save you?\r\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/1020474485/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/1020634847","html_url":"https://github.com/coq/coq/issues/14321#issuecomment-1020634847","issue_url":"https://api.github.com/repos/coq/coq/issues/14321","id":1020634847,"node_id":"IC_kwDOABUDh8481abf","user":{"login":"samuelgruetter","id":2394355,"node_id":"MDQ6VXNlcjIzOTQzNTU=","avatar_url":"https://avatars.githubusercontent.com/u/2394355?v=4","gravatar_id":"","url":"https://api.github.com/users/samuelgruetter","html_url":"https://github.com/samuelgruetter","followers_url":"https://api.github.com/users/samuelgruetter/followers","following_url":"https://api.github.com/users/samuelgruetter/following{/other_user}","gists_url":"https://api.github.com/users/samuelgruetter/gists{/gist_id}","starred_url":"https://api.github.com/users/samuelgruetter/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/samuelgruetter/subscriptions","organizations_url":"https://api.github.com/users/samuelgruetter/orgs","repos_url":"https://api.github.com/users/samuelgruetter/repos","events_url":"https://api.github.com/users/samuelgruetter/events{/privacy}","received_events_url":"https://api.github.com/users/samuelgruetter/received_events","type":"User","site_admin":false},"created_at":"2022-01-24T23:00:53Z","updated_at":"2022-01-24T23:00:53Z","author_association":"CONTRIBUTOR","body":"> Is that flexible enough? Suppose you have multiple backtracking points and there's a failure in the innermost one that cascdes to a top-level failure. \r\n\r\nAre you talking about examples like the following?\r\n\r\n```coq\r\ntac1; first [ tac2 | tac3 ]\r\n```\r\n\r\nIf `tac2` and `tac3` both fail, `first` will fail too, and the displayed error will be a generic `No applicable tactic` produced by `first`, so I'd say the \"top-level failure\" is the failure of `first`, and the proof state to be displayed should be the one reached after `tac1`.\r\n\r\n> Samuel, how long do your scripts run before they get top-level failures? How much time would this feature save you?\r\n\r\nMy scripts are (currently) quite fast, and I also usually have a clear idea of which part needs debugging, but the feature I'm really missing is being able to interactively try out (and undo) new commands in a proof state that's reached somewhere deep down an Ltac call stack (https://github.com/coq/coq/issues/15066).\r\n\r\nMy current workaround is [this hack](https://github.com/samuelgruetter/coq/commit/d1a1263d2c4b7bd986af493407ac0893954df62b) that modifies the core definition of the tactic monad (which I think is not the right way of doing it, but it was fun, and might be useful to me right now), so if I know which tactic I want to debug, I can just redefine it as `::= halt`:\r\n\r\n```coq\r\nLtac needs_debugging := fail.\r\n\r\nLtac a := set (A1 := 3); needs_debugging; set (A2 := 4).\r\nLtac b := set (B1 := 2); a; set (B2 := 5).\r\nLtac c := set (C1 := 1); b; set (C2 := 6).\r\n\r\nGoal False.\r\n  Ltac needs_debugging ::= halt.\r\n  c.\r\n```\r\n\r\nresults in\r\n\r\n```\r\n  C1 := 1 : nat\r\n  B1 := 2 : nat\r\n  A1 := 3 : nat\r\n  ============================\r\n  False\r\n```\r\n\r\nso I can now interactively try out various alternative implementations of `needs_debugging`.","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/1020634847/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/1021575487","html_url":"https://github.com/coq/coq/issues/14321#issuecomment-1021575487","issue_url":"https://api.github.com/repos/coq/coq/issues/14321","id":1021575487,"node_id":"IC_kwDOABUDh8485AE_","user":{"login":"jfehrle","id":1253341,"node_id":"MDQ6VXNlcjEyNTMzNDE=","avatar_url":"https://avatars.githubusercontent.com/u/1253341?v=4","gravatar_id":"","url":"https://api.github.com/users/jfehrle","html_url":"https://github.com/jfehrle","followers_url":"https://api.github.com/users/jfehrle/followers","following_url":"https://api.github.com/users/jfehrle/following{/other_user}","gists_url":"https://api.github.com/users/jfehrle/gists{/gist_id}","starred_url":"https://api.github.com/users/jfehrle/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jfehrle/subscriptions","organizations_url":"https://api.github.com/users/jfehrle/orgs","repos_url":"https://api.github.com/users/jfehrle/repos","events_url":"https://api.github.com/users/jfehrle/events{/privacy}","received_events_url":"https://api.github.com/users/jfehrle/received_events","type":"User","site_admin":false},"created_at":"2022-01-25T20:22:36Z","updated_at":"2022-01-25T20:22:36Z","author_association":"CONTRIBUTOR","body":"I was thinking about a case more like:\r\n\r\n`tac1; first [ tac2 | tac3 ]; long_ltac_tactic; first [ tac4; tac5 ]`\r\n\r\nin which the root cause of the failure is in `first [ tac2 | tac3 ]` that leads to an ultimate failure in `first [ tac4; tac5 ]`.\r\nMaybe that's not a realistic (or perhaps even possible) case.  Plenty of time to ponder before I implement anything.","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/1021575487/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]