[{"url":"https://api.github.com/repos/coq/coq/issues/comments/337524622","html_url":"https://github.com/coq/coq/issues/3648#issuecomment-337524622","issue_url":"https://api.github.com/repos/coq/coq/issues/3648","id":337524622,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyNDYyMg==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-09-19T09:00:48Z","updated_at":"2017-10-18T09:32:59Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\n(* File reduced by coq-bug-finder from original input, then from 8808 lines to 424 lines, then from 432 lines to 196 lines, then from\\\n 145 lines to 82 lines *)\n(* coqc version trunk (September 2014) compiled on Sep 18 2014 21:0:5 with OCaml 4.01.0\n   coqtop version cagnode16:/afs/csail.mit.edu/u/j/jgross/coq-trunk,trunk (07e4438bd758c2ced8caf09a6961ccd77d84e42b) *)\n\nReserved Infix \"o\" (at level 40, left associativity).\nGlobal Set Primitive Projections.\n\nDelimit Scope morphism_scope with morphism.\nDelimit Scope category_scope with category.\nDelimit Scope object_scope with object.\n\nRecord PreCategory :=\n  { object :> Type;\n    morphism : object -> object -> Type;\n\n    identity : forall x, morphism x x;\n    compose : forall s d d',\n                morphism d d'\n                -> morphism s d\n                -> morphism s d'\n    where \"f 'o' g\" := (compose f g)\n  }.\nArguments identity {!C%category} / x%object : rename.\n\nInfix \"o\" := (@ compose _ _ _ _) : morphism_scope.\n\nLocal Open Scope morphism_scope.\nDefinition prodC (C D : PreCategory) : PreCategory.\n  refine (@ Build_PreCategory\n            (C * D)%type\n            (fun s d => (morphism C (fst s) (fst d)\n                         * morphism D (snd s) (snd d))%type)\n            (fun x => (identity (fst x), identity (snd x)))\n            (fun s d d' m2 m1 => (fst m2 o fst m1, snd m2 o snd m1))).\nDefined.\n\nLocal Infix \"*\" := prodC : category_scope.\n\nDelimit Scope functor_scope with functor.\n\nRecord Functor (C D : PreCategory) :=\n  {\n    object_of :> C -> D;\n    morphism_of : forall s d, morphism C s d\n                              -> morphism D (object_of s) (object_of d);\n    identity_of : forall x, morphism_of _ _ (identity x)\n                            = identity (object_of x)\n  }.\nArguments morphism_of [C%category] [D%category] F%functor [s%object d%object] m%morphism : rename, simpl nomatch.\nNotation \"F '_1' m\" := (morphism_of F m) (at level 10, no associativity) : morphism_scope.\n\nRecord NaturalTransformation C D (F G : Functor C D) := { components_of :> forall c, morphism D (F c) (G c) }.\nDefinition functor_category (C D : PreCategory) : PreCategory.\n  exact (@ Build_PreCategory (Functor C D)\n                            (@ NaturalTransformation C D)\n                            $(admit)$\n                            $(admit)$).\nDefined.\n\nLocal Notation \"C -> D\" := (functor_category C D) : category_scope.\nVariable C1 : PreCategory.\nVariable C2 : PreCategory.\nVariable D : PreCategory.\n\nDefinition functor_object_of\nDefinition functor_object_of\n: (C1 -> (C2 -> D))%category -> (C1 * C2 -> D)%category.\nProof.\n  intro F; hnf in F |- *.\n  refine (Build_Functor\n            (prodC C1 C2) D\n            (fun c1c2 => F (fst c1c2) (snd c1c2))\n            (fun s d m => F (fst d) _1 (snd m) o (F _1 (fst m)) (snd s))\n            _).\n  intros.\n  rewrite identity_of.\n  cbn.\n  rewrite (identity_of _ _ F (fst x)). (* Toplevel input, characters 20-55:\nError:\nFound no subterm matching \"F _1 (identity (fst x))\" in the current goal. *)\n  rewrite identity_of. (* Toplevel input, characters 15-34:\nError:\nFound no subterm matching \"morphism_of ?202 (identity ?203)\" in the current goal. *)\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337524622/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337524623","html_url":"https://github.com/coq/coq/issues/3648#issuecomment-337524623","issue_url":"https://api.github.com/repos/coq/coq/issues/3648","id":337524623,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyNDYyMw==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-09-19T19:24:45Z","updated_at":"2017-10-18T09:32:59Z","author_association":"CONTRIBUTOR","body":"Comment author: @mattam82\n\nYep, I know. I've pushed a few fixes that make this work. One of them for [change] is only temporary, as what you're seing is that rewrite is not working up to conversion of an eta-expanded version of a projection and it's primitive form. In HoTT this happened in some cases where replacing an argument with an underscore would make it work because if the subterm has existentials conversion is tried instead of syntactic matching... one more example where subterm selection up to syntactic head matching modulo an equivalence class + full conversion would be welcome, hopefully I can concentrate on that and universe naming in the coming weeks. BTW, HoTT from tuesday now compiles entirely with the trunk.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337524623/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]