[{"url":"https://api.github.com/repos/coq/coq/issues/comments/401185406","html_url":"https://github.com/coq/coq/issues/7954#issuecomment-401185406","issue_url":"https://api.github.com/repos/coq/coq/issues/7954","id":401185406,"node_id":"MDEyOklzc3VlQ29tbWVudDQwMTE4NTQwNg==","user":{"login":"SkySkimmer","id":2461932,"node_id":"MDQ6VXNlcjI0NjE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/2461932?v=4","gravatar_id":"","url":"https://api.github.com/users/SkySkimmer","html_url":"https://github.com/SkySkimmer","followers_url":"https://api.github.com/users/SkySkimmer/followers","following_url":"https://api.github.com/users/SkySkimmer/following{/other_user}","gists_url":"https://api.github.com/users/SkySkimmer/gists{/gist_id}","starred_url":"https://api.github.com/users/SkySkimmer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/SkySkimmer/subscriptions","organizations_url":"https://api.github.com/users/SkySkimmer/orgs","repos_url":"https://api.github.com/users/SkySkimmer/repos","events_url":"https://api.github.com/users/SkySkimmer/events{/privacy}","received_events_url":"https://api.github.com/users/SkySkimmer/received_events","type":"User","site_admin":false},"created_at":"2018-06-28T21:55:39Z","updated_at":"2018-06-28T21:55:39Z","author_association":"CONTRIBUTOR","body":"`recognize_3arg_2ref_ident` has weak type variables in its type (see https://caml.inria.fr/pub/docs/manual-ocaml/polymorphism.html). \r\nPart of the arguments isn't used (eg the `_` in `let '((s, _), ((e1v, (e1, r1)), ((e2v, (e2, r2)), tt))) := args in`) so that part of the type is unconstrained, but it's blocked from generalizing by the letin in the parameters `(t:=(base.type.Z -> base.type.Z -> base.type.Z -> base.type.Z * base.type.Z)%etype)`.\r\n\r\nExtraction is printing the expected type\r\n~~~\r\n(** val recognize_3arg_2ref_ident :\r\n    Language.Compilers.Coq_ident.ident ->\r\n    (Coq_int.coq_type option * Coq_int.coq_type option)\r\n    -> (((Language.Compilers.Coq_base.Coq_type.coq_type,\r\n    Language.Compilers.Coq_ident.ident, var_data)\r\n    Language.Compilers.Coq_expr.expr * (arith_expr * Coq_int.coq_type\r\n    option)) * (((Language.Compilers.Coq_base.Coq_type.coq_type,\r\n    Language.Compilers.Coq_ident.ident, var_data)\r\n    Language.Compilers.Coq_expr.expr * (arith_expr * Coq_int.coq_type\r\n    option)) * (((Language.Compilers.Coq_base.Coq_type.coq_type,\r\n    Language.Compilers.Coq_ident.ident, var_data)\r\n    Language.Compilers.Coq_expr.expr * (arith_expr * Coq_int.coq_type\r\n    option)) * __))) -> (arith_expr -> expr, char list\r\n    list) sum **)\r\n~~~\r\nso you could just cast to that (add `let recognize_3arg_2ref_ident : ... = recognize_3arg_2ref_ident` after the definition, or use the `val` in a mli), I don't know why we don't do that automatically.\r\n\r\nHere's a simpler example:\r\n~~~coq\r\nRequire Import Extraction.\r\n\r\nDefinition id (A:Type) (x:A) := x.\r\n\r\nDefinition foobar := id _ (@id nat).\r\n\r\nRecursive Extraction foobar.\r\n~~~\r\nproduces \r\n~~~ocaml\r\ntype nat =\r\n| O\r\n| S of nat\r\n\r\n(** val id : 'a1 -> 'a1 **)\r\n\r\nlet id x =\r\n  x\r\n\r\n(** val foobar : nat -> nat **)\r\n\r\nlet foobar =\r\n  id id\r\n~~~\r\nand compilation says\r\n~~~\r\nFile \"foo.ml\", line 12, characters 4-10:\r\nError: The type of this expression, '_weak1 -> '_weak1,\r\n       contains type variables that cannot be generalized\r\n~~~","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/401185406/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/401198565","html_url":"https://github.com/coq/coq/issues/7954#issuecomment-401198565","issue_url":"https://api.github.com/repos/coq/coq/issues/7954","id":401198565,"node_id":"MDEyOklzc3VlQ29tbWVudDQwMTE5ODU2NQ==","user":{"login":"JasonGross","id":396076,"node_id":"MDQ6VXNlcjM5NjA3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/396076?v=4","gravatar_id":"","url":"https://api.github.com/users/JasonGross","html_url":"https://github.com/JasonGross","followers_url":"https://api.github.com/users/JasonGross/followers","following_url":"https://api.github.com/users/JasonGross/following{/other_user}","gists_url":"https://api.github.com/users/JasonGross/gists{/gist_id}","starred_url":"https://api.github.com/users/JasonGross/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JasonGross/subscriptions","organizations_url":"https://api.github.com/users/JasonGross/orgs","repos_url":"https://api.github.com/users/JasonGross/repos","events_url":"https://api.github.com/users/JasonGross/events{/privacy}","received_events_url":"https://api.github.com/users/JasonGross/received_events","type":"User","site_admin":false},"created_at":"2018-06-28T23:02:57Z","updated_at":"2018-06-28T23:02:57Z","author_association":"MEMBER","body":"> I don't know why we don't do that automatically.\r\n\r\nI think, at the very least, there should be an option to automatically annotate `let`s with their types in extracted code.","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/401198565/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/405798011","html_url":"https://github.com/coq/coq/issues/7954#issuecomment-405798011","issue_url":"https://api.github.com/repos/coq/coq/issues/7954","id":405798011,"node_id":"MDEyOklzc3VlQ29tbWVudDQwNTc5ODAxMQ==","user":{"login":"JasonGross","id":396076,"node_id":"MDQ6VXNlcjM5NjA3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/396076?v=4","gravatar_id":"","url":"https://api.github.com/users/JasonGross","html_url":"https://github.com/JasonGross","followers_url":"https://api.github.com/users/JasonGross/followers","following_url":"https://api.github.com/users/JasonGross/following{/other_user}","gists_url":"https://api.github.com/users/JasonGross/gists{/gist_id}","starred_url":"https://api.github.com/users/JasonGross/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JasonGross/subscriptions","organizations_url":"https://api.github.com/users/JasonGross/orgs","repos_url":"https://api.github.com/users/JasonGross/repos","events_url":"https://api.github.com/users/JasonGross/events{/privacy}","received_events_url":"https://api.github.com/users/JasonGross/received_events","type":"User","site_admin":false},"created_at":"2018-07-18T03:32:22Z","updated_at":"2018-07-18T03:32:22Z","author_association":"MEMBER","body":"I've just hit this again, and it's very frustrating.  I have a 73MB source file that fails to compile with\r\n```\r\nFile \"src/Experiments/NewPipeline/ExtractionOCaml/word_by_word_montgomery.ml\", line 950242, characters 1-6324549:\r\nError: The type of this module,\r\n       sig\r\n         val mul_gen :\r\n           (Compilers.Coq_base.Coq_type.coq_type, Compilers.Coq_ident.ident,\r\n            'a)\r\n           Compilers.Coq_expr.expr\r\n         val square_gen :\r\n           (Compilers.Coq_base.Coq_type.coq_type, 'a, '_b)\r\n           Compilers.Coq_expr.expr\r\n         val add_gen :\r\n           (Compilers.Coq_base.Coq_type.coq_type, Compilers.Coq_ident.ident,\r\n            'a)\r\n           Compilers.Coq_expr.expr\r\n         val sub_gen :\r\n           (Compilers.Coq_base.Coq_type.coq_type, Compilers.Coq_ident.ident,\r\n            'a)\r\n           Compilers.Coq_expr.expr\r\n         val opp_gen :\r\n           (Compilers.Coq_base.Coq_type.coq_type, Compilers.Coq_ident.ident,\r\n            'a)\r\n           Compilers.Coq_expr.expr\r\n         val from_montgomery_gen :\r\n           (Compilers.Coq_base.Coq_type.coq_type, 'a, '_b)\r\n           Compilers.Coq_expr.expr\r\n         val nonzero_gen :\r\n           (Compilers.Coq_base.Coq_type.coq_type, Compilers.Coq_ident.ident,\r\n            'a)\r\n           Compilers.Coq_expr.expr\r\n         val prime_bytes_bounds : z -> (z * z) list -> z -> 'a\r\n         val saturated_bounds : z -> z -> 'a\r\n         val m_enc : z -> (z * z) list -> z -> z list\r\n         val relax_zrange_of_machine_wordsize : z -> zrange -> zrange option\r\n         val relax_zrange_of_machine_wordsize_with_bytes :\r\n           z -> zrange -> zrange option\r\n         val bounds : z -> (z * z) list -> z -> 'a list\r\n         val check_args :\r\n           z ->\r\n           (z * z) list ->\r\n           z ->\r\n           (Pipeline.coq_ErrorMessage, 'a) errorT ->\r\n           (Pipeline.coq_ErrorMessage, 'a) errorT\r\n         val srmul :\r\n           z ->\r\n           (z * z) list ->\r\n           z ->\r\n           char list ->\r\n           char list *\r\n           (Pipeline.coq_ErrorMessage,\r\n            char list list * Coq3_Compilers.ToString.C.ident_infos)\r\n           errorT\r\n         val srsquare :\r\n           z ->\r\n           (z * z) list ->\r\n           z ->\r\n           char list ->\r\n           char list *\r\n           (Pipeline.coq_ErrorMessage,\r\n            char list list * Coq3_Compilers.ToString.C.ident_infos)\r\n           errorT\r\n         val sradd :\r\n           z ->\r\n           (z * z) list ->\r\n           z ->\r\n           char list ->\r\n           char list *\r\n           (Pipeline.coq_ErrorMessage,\r\n            char list list * Coq3_Compilers.ToString.C.ident_infos)\r\n           errorT\r\n         val srsub :\r\n           z ->\r\n           (z * z) list ->\r\n           z ->\r\n           char list ->\r\n           char list *\r\n           (Pipeline.coq_ErrorMessage,\r\n            char list list * Coq3_Compilers.ToString.C.ident_infos)\r\n           errorT\r\n         val sropp :\r\n           z ->\r\n           (z * z) list ->\r\n           z ->\r\n           char list ->\r\n           char list *\r\n           (Pipeline.coq_ErrorMessage,\r\n            char list list * Coq3_Compilers.ToString.C.ident_infos)\r\n           errorT\r\n         val srfrom_montgomery :\r\n           z ->\r\n           (z * z) list ->\r\n           z ->\r\n           char list ->\r\n           char list *\r\n           (Pipeline.coq_ErrorMessage,\r\n            char list list * Coq3_Compilers.ToString.C.ident_infos)\r\n           errorT\r\n         val srnonzero :\r\n           z ->\r\n           (z * z) list ->\r\n           z ->\r\n           char list ->\r\n           char list *\r\n           (Pipeline.coq_ErrorMessage,\r\n            char list list * Coq3_Compilers.ToString.C.ident_infos)\r\n           errorT\r\n         val srselectznz :\r\n           z ->\r\n           z ->\r\n           char list ->\r\n           char list *\r\n           (Pipeline.coq_ErrorMessage,\r\n            char list list * Coq3_Compilers.ToString.C.ident_infos)\r\n           errorT\r\n         val srto_bytes :\r\n           z ->\r\n           (z * z) list ->\r\n           z ->\r\n           char list ->\r\n           char list *\r\n           (Pipeline.coq_ErrorMessage,\r\n            char list list * Coq3_Compilers.ToString.C.ident_infos)\r\n           errorT\r\n         val srfrom_bytes :\r\n           z ->\r\n           (z * z) list ->\r\n           z ->\r\n           char list ->\r\n           char list *\r\n           (Pipeline.coq_ErrorMessage,\r\n            char list list * Coq3_Compilers.ToString.C.ident_infos)\r\n           errorT\r\n         val aggregate_infos :\r\n           ('a * ('b, 'c * Coq3_Compilers.ToString.C.ident_infos) errorT)\r\n           list -> Coq3_Compilers.ToString.C.ident_infos\r\n         val extra_synthesis :\r\n           z ->\r\n           char list ->\r\n           Coq3_Compilers.ToString.C.ident_infos ->\r\n           (char list * (Pipeline.coq_ErrorMessage, char list list) errorT)\r\n           list * PositiveSet.t\r\n         val known_functions :\r\n           z ->\r\n           (z * z) list ->\r\n           z ->\r\n           (char list *\r\n            (char list ->\r\n             char list *\r\n             (Pipeline.coq_ErrorMessage,\r\n              char list list * Coq3_Compilers.ToString.C.ident_infos)\r\n             errorT))\r\n           list\r\n         val synthesize_of_name :\r\n           z ->\r\n           (z * z) list ->\r\n           z ->\r\n           char list ->\r\n           char list ->\r\n           char list *\r\n           (Pipeline.coq_ErrorMessage,\r\n            char list list * Coq3_Compilers.ToString.C.ident_infos)\r\n           errorT\r\n         val coq_Synthesize :\r\n           z ->\r\n           (z * z) list ->\r\n           z ->\r\n           char list ->\r\n           char list list ->\r\n           (char list * (Pipeline.coq_ErrorMessage, char list list) errorT)\r\n           list * PositiveSet.t\r\n       end, contains type variables that cannot be generalized\r\nCommand exited with non-zero status 2\r\n```\r\nand basically no idea why this is erroring like this >.<","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/405798011/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/599087506","html_url":"https://github.com/coq/coq/issues/7954#issuecomment-599087506","issue_url":"https://api.github.com/repos/coq/coq/issues/7954","id":599087506,"node_id":"MDEyOklzc3VlQ29tbWVudDU5OTA4NzUwNg==","user":{"login":"JasonGross","id":396076,"node_id":"MDQ6VXNlcjM5NjA3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/396076?v=4","gravatar_id":"","url":"https://api.github.com/users/JasonGross","html_url":"https://github.com/JasonGross","followers_url":"https://api.github.com/users/JasonGross/followers","following_url":"https://api.github.com/users/JasonGross/following{/other_user}","gists_url":"https://api.github.com/users/JasonGross/gists{/gist_id}","starred_url":"https://api.github.com/users/JasonGross/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JasonGross/subscriptions","organizations_url":"https://api.github.com/users/JasonGross/orgs","repos_url":"https://api.github.com/users/JasonGross/repos","events_url":"https://api.github.com/users/JasonGross/events{/privacy}","received_events_url":"https://api.github.com/users/JasonGross/received_events","type":"User","site_admin":false},"created_at":"2020-03-14T16:08:51Z","updated_at":"2020-03-14T16:08:51Z","author_association":"MEMBER","body":"Is this related to #4875?","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/599087506/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/599087640","html_url":"https://github.com/coq/coq/issues/7954#issuecomment-599087640","issue_url":"https://api.github.com/repos/coq/coq/issues/7954","id":599087640,"node_id":"MDEyOklzc3VlQ29tbWVudDU5OTA4NzY0MA==","user":{"login":"JasonGross","id":396076,"node_id":"MDQ6VXNlcjM5NjA3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/396076?v=4","gravatar_id":"","url":"https://api.github.com/users/JasonGross","html_url":"https://github.com/JasonGross","followers_url":"https://api.github.com/users/JasonGross/followers","following_url":"https://api.github.com/users/JasonGross/following{/other_user}","gists_url":"https://api.github.com/users/JasonGross/gists{/gist_id}","starred_url":"https://api.github.com/users/JasonGross/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JasonGross/subscriptions","organizations_url":"https://api.github.com/users/JasonGross/orgs","repos_url":"https://api.github.com/users/JasonGross/repos","events_url":"https://api.github.com/users/JasonGross/events{/privacy}","received_events_url":"https://api.github.com/users/JasonGross/received_events","type":"User","site_admin":false},"created_at":"2020-03-14T16:09:28Z","updated_at":"2020-03-14T16:09:28Z","author_association":"MEMBER","body":"Also, this continues to be frustrating.  A co-worker of mine just hit this.","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/599087640/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/599101724","html_url":"https://github.com/coq/coq/issues/7954#issuecomment-599101724","issue_url":"https://api.github.com/repos/coq/coq/issues/7954","id":599101724,"node_id":"MDEyOklzc3VlQ29tbWVudDU5OTEwMTcyNA==","user":{"login":"JasonGross","id":396076,"node_id":"MDQ6VXNlcjM5NjA3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/396076?v=4","gravatar_id":"","url":"https://api.github.com/users/JasonGross","html_url":"https://github.com/JasonGross","followers_url":"https://api.github.com/users/JasonGross/followers","following_url":"https://api.github.com/users/JasonGross/following{/other_user}","gists_url":"https://api.github.com/users/JasonGross/gists{/gist_id}","starred_url":"https://api.github.com/users/JasonGross/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JasonGross/subscriptions","organizations_url":"https://api.github.com/users/JasonGross/orgs","repos_url":"https://api.github.com/users/JasonGross/repos","events_url":"https://api.github.com/users/JasonGross/events{/privacy}","received_events_url":"https://api.github.com/users/JasonGross/received_events","type":"User","site_admin":false},"created_at":"2020-03-14T17:14:05Z","updated_at":"2020-03-14T17:14:05Z","author_association":"MEMBER","body":"https://github.com/mit-plv/fiat-crypto/pull/686/checks?check_run_id=507813092","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/599101724/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/808103070","html_url":"https://github.com/coq/coq/issues/7954#issuecomment-808103070","issue_url":"https://api.github.com/repos/coq/coq/issues/7954","id":808103070,"node_id":"MDEyOklzc3VlQ29tbWVudDgwODEwMzA3MA==","user":{"login":"haselwarter","id":847386,"node_id":"MDQ6VXNlcjg0NzM4Ng==","avatar_url":"https://avatars.githubusercontent.com/u/847386?v=4","gravatar_id":"","url":"https://api.github.com/users/haselwarter","html_url":"https://github.com/haselwarter","followers_url":"https://api.github.com/users/haselwarter/followers","following_url":"https://api.github.com/users/haselwarter/following{/other_user}","gists_url":"https://api.github.com/users/haselwarter/gists{/gist_id}","starred_url":"https://api.github.com/users/haselwarter/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/haselwarter/subscriptions","organizations_url":"https://api.github.com/users/haselwarter/orgs","repos_url":"https://api.github.com/users/haselwarter/repos","events_url":"https://api.github.com/users/haselwarter/events{/privacy}","received_events_url":"https://api.github.com/users/haselwarter/received_events","type":"User","site_admin":false},"created_at":"2021-03-26T10:27:49Z","updated_at":"2021-03-26T11:01:08Z","author_association":"NONE","body":"> > I don't know why we don't do that automatically.\r\n> \r\n> I think, at the very least, there should be an option to automatically annotate `let`s with their types in extracted code.\r\n\r\nI just hit this issue when trying to extract code from SSProve/ssprove, and most instances are indeed fixed by adding the type annotation from the comment to the `let`. Can Coq do this for me now?","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/808103070/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/1152839210","html_url":"https://github.com/coq/coq/issues/7954#issuecomment-1152839210","issue_url":"https://api.github.com/repos/coq/coq/issues/7954","id":1152839210,"node_id":"IC_kwDOABUDh85Etu4q","user":{"login":"JasonGross","id":396076,"node_id":"MDQ6VXNlcjM5NjA3Ng==","avatar_url":"https://avatars.githubusercontent.com/u/396076?v=4","gravatar_id":"","url":"https://api.github.com/users/JasonGross","html_url":"https://github.com/JasonGross","followers_url":"https://api.github.com/users/JasonGross/followers","following_url":"https://api.github.com/users/JasonGross/following{/other_user}","gists_url":"https://api.github.com/users/JasonGross/gists{/gist_id}","starred_url":"https://api.github.com/users/JasonGross/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JasonGross/subscriptions","organizations_url":"https://api.github.com/users/JasonGross/orgs","repos_url":"https://api.github.com/users/JasonGross/repos","events_url":"https://api.github.com/users/JasonGross/events{/privacy}","received_events_url":"https://api.github.com/users/JasonGross/received_events","type":"User","site_admin":false},"created_at":"2022-06-11T02:38:39Z","updated_at":"2022-06-11T02:44:01Z","author_association":"MEMBER","body":"And I've now hit this again in fiat-crypto, this time with functors\r\n```\r\nFile \"src/ExtractionOCaml/bedrock2_base_conversion.ml\", line 16297, characters 14-61:\r\n16297 | module NMap = IsoS(OptionPositiveMap)(NIsoOptionPositiveOrig)\r\n                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\nError: The functor application is ill-typed.\r\n       These arguments:\r\n         OptionPositiveMap NIsoOptionPositiveOrig\r\n       do not match these parameters:\r\n         functor (S' : S) (E' : ...) -> ...\r\n       1. Modules do not match:\r\n            OptionPositiveMap :\r\n            sig\r\n              module Outer = OptionPositiveMap.Outer\r\n              module E = OptionPositiveMap.E\r\n              module ECompat = OptionPositiveMap.ECompat\r\n              module Inner = OptionPositiveMap.Inner\r\n              module E' = Inner.E'\r\n              type key = E.t\r\n              type 'elt t = 'elt Outer.OptionWSfun.M1.t * 'elt PositiveMap.t\r\n              module Coq__Extra1 = Inner.Coq__Extra1\r\n              val empty : 'a option * '_weak1 PositiveMap.t\r\n              val is_empty : 'a option * 'b PositiveMap.t -> bool\r\n              val add :\r\n                PositiveMap.key option ->\r\n                'a ->\r\n                'a option * 'a PositiveMap.t -> 'a option * 'a PositiveMap.t\r\n              val find :\r\n                PositiveMap.key option ->\r\n                'a option * 'a PositiveMap.t -> 'a option\r\n              val remove :\r\n                PositiveMap.key option ->\r\n                'a option * 'b PositiveMap.t -> 'a option * 'b PositiveMap.t\r\n              val mem :\r\n                PositiveMap.key option ->\r\n                'a option * 'b PositiveMap.t -> bool\r\n              val map :\r\n                ('a -> 'b) ->\r\n                'a option * 'a PositiveMap.t -> 'b option * 'b PositiveMap.t\r\n              val mapi :\r\n                (PositiveMap.key option -> 'a -> 'b) ->\r\n                'a option * 'a PositiveMap.t -> 'b option * 'b PositiveMap.t\r\n              val map2 :\r\n                ('a option -> 'b option -> 'c option) ->\r\n                'a option * 'a PositiveMap.t ->\r\n                'b option * 'b PositiveMap.t -> 'c option * 'c PositiveMap.t\r\n              val elements :\r\n                'a option * 'a PositiveMap.t ->\r\n                (PositiveMap.key option * 'a) list\r\n              val cardinal : 'a option * 'b PositiveMap.t -> nat\r\n              val fold :\r\n                (PositiveMap.key option -> 'a -> 'b -> 'b) ->\r\n                'a option * 'a PositiveMap.t -> 'b -> 'b\r\n              val equal :\r\n                ('a -> 'a -> bool) ->\r\n                'a option * 'a PositiveMap.t ->\r\n                'a option * 'a PositiveMap.t -> bool\r\n              module Coq__Extra2 = Inner.Coq__Extra2\r\n            end\r\n          is not included in\r\n            S\r\n          Values do not match:\r\n            val empty : 'a option * '_weak1 PositiveMap.t\r\n          is not included in\r\n            val empty : 'a1 t\r\n          File \"src/ExtractionOCaml/bedrock2_base_conversion.ml\", line 13726, characters 2-19:\r\n            Expected declaration\r\n          File \"src/ExtractionOCaml/bedrock2_base_conversion.ml\", line 16098, characters 6-11:\r\n            Actual declaration\r\n       2. Module NIsoOptionPositiveOrig matches the expected module type\r\n```\r\n(Full code [here](https://github.com/mit-plv/fiat-crypto/tree/asm-more-efficient), build target `standalone-ocaml`) ","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/1152839210/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/1152894046","html_url":"https://github.com/coq/coq/issues/7954#issuecomment-1152894046","issue_url":"https://api.github.com/repos/coq/coq/issues/7954","id":1152894046,"node_id":"IC_kwDOABUDh85Et8Re","user":{"login":"ejgallego","id":7192257,"node_id":"MDQ6VXNlcjcxOTIyNTc=","avatar_url":"https://avatars.githubusercontent.com/u/7192257?v=4","gravatar_id":"","url":"https://api.github.com/users/ejgallego","html_url":"https://github.com/ejgallego","followers_url":"https://api.github.com/users/ejgallego/followers","following_url":"https://api.github.com/users/ejgallego/following{/other_user}","gists_url":"https://api.github.com/users/ejgallego/gists{/gist_id}","starred_url":"https://api.github.com/users/ejgallego/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ejgallego/subscriptions","organizations_url":"https://api.github.com/users/ejgallego/orgs","repos_url":"https://api.github.com/users/ejgallego/repos","events_url":"https://api.github.com/users/ejgallego/events{/privacy}","received_events_url":"https://api.github.com/users/ejgallego/received_events","type":"User","site_admin":false},"created_at":"2022-06-11T10:14:21Z","updated_at":"2022-06-11T10:14:21Z","author_association":"MEMBER","body":"These extraction bugs do affect a lot of users with large projects, IMHO we should make fixing them a priority.","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/1152894046/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]