[{"url":"https://api.github.com/repos/coq/coq/issues/comments/337523940","html_url":"https://github.com/coq/coq/issues/3602#issuecomment-337523940","issue_url":"https://api.github.com/repos/coq/coq/issues/3602","id":337523940,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyMzk0MA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-09-09T16:38:06Z","updated_at":"2017-10-18T09:30:58Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nOften, there are instances are hints that we only want to trigger if they're filling in an already constrained class/goal.  It would be nice to be able to declare a variant of hint that automatically ran something equivalent to [match goal with |- ?G => try (has_evar G; fail 1) end] before using the hint.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337523940/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337523942","html_url":"https://github.com/coq/coq/issues/3602#issuecomment-337523942","issue_url":"https://api.github.com/repos/coq/coq/issues/3602","id":337523942,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUyMzk0Mg==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-09-09T21:41:28Z","updated_at":"2017-10-18T09:30:58Z","author_association":"CONTRIBUTOR","body":"Comment author: @mikeshulman\n\nIf you'd like a specific example, there are some instances of IsEquiv in the HoTT library that should not trigger in this way.  For instance, `transport idmap` is an equivalence, but if this is an ordinary instance then `refine (BuildEquiv _ _ _ _)` guesses it and presents the user with the goal to prove an equality of types, which is very confusing.\n\nFor maximum configurability, one could imagine (1) a different sort of Instance declaration that makes this happen, e.g. `Instance NoEvar`, (2) a setting on a class definition, like `Class NoEvar` which makes all of its instances behave this way (at least by default), and (3) a global setting like `Set NoEvar` which makes all instances behave this way (by default).  But a way to mark individual instances for this behavior would be a good start, and as Jason points out it might be almost as easy as modifying the hints that `Instance` adds to the database.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337523942/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/1047256377","html_url":"https://github.com/coq/coq/issues/3602#issuecomment-1047256377","issue_url":"https://api.github.com/repos/coq/coq/issues/3602","id":1047256377,"node_id":"IC_kwDOABUDh84-a905","user":{"login":"ppedrot","id":1202327,"node_id":"MDQ6VXNlcjEyMDIzMjc=","avatar_url":"https://avatars.githubusercontent.com/u/1202327?v=4","gravatar_id":"","url":"https://api.github.com/users/ppedrot","html_url":"https://github.com/ppedrot","followers_url":"https://api.github.com/users/ppedrot/followers","following_url":"https://api.github.com/users/ppedrot/following{/other_user}","gists_url":"https://api.github.com/users/ppedrot/gists{/gist_id}","starred_url":"https://api.github.com/users/ppedrot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ppedrot/subscriptions","organizations_url":"https://api.github.com/users/ppedrot/orgs","repos_url":"https://api.github.com/users/ppedrot/repos","events_url":"https://api.github.com/users/ppedrot/events{/privacy}","received_events_url":"https://api.github.com/users/ppedrot/received_events","type":"User","site_admin":false},"created_at":"2022-02-21T22:02:36Z","updated_at":"2022-02-21T22:02:36Z","author_association":"MEMBER","body":"This was solved by modes, AFAICT.","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/1047256377/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/1047260386","html_url":"https://github.com/coq/coq/issues/3602#issuecomment-1047260386","issue_url":"https://api.github.com/repos/coq/coq/issues/3602","id":1047260386,"node_id":"IC_kwDOABUDh84-a-zi","user":{"login":"mikeshulman","id":646600,"node_id":"MDQ6VXNlcjY0NjYwMA==","avatar_url":"https://avatars.githubusercontent.com/u/646600?v=4","gravatar_id":"","url":"https://api.github.com/users/mikeshulman","html_url":"https://github.com/mikeshulman","followers_url":"https://api.github.com/users/mikeshulman/followers","following_url":"https://api.github.com/users/mikeshulman/following{/other_user}","gists_url":"https://api.github.com/users/mikeshulman/gists{/gist_id}","starred_url":"https://api.github.com/users/mikeshulman/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikeshulman/subscriptions","organizations_url":"https://api.github.com/users/mikeshulman/orgs","repos_url":"https://api.github.com/users/mikeshulman/repos","events_url":"https://api.github.com/users/mikeshulman/events{/privacy}","received_events_url":"https://api.github.com/users/mikeshulman/received_events","type":"User","site_admin":false},"created_at":"2022-02-21T22:09:51Z","updated_at":"2022-02-21T22:09:51Z","author_association":"NONE","body":"Can modes be configured on a per-instance basis?  I thought they were per-class.","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/1047260386/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]