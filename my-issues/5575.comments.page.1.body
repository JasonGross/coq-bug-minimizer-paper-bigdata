Comment author: @JasonGross

Require Import Coq.Classes.RelationClasses Coq.Classes.Morphisms 
Coq.Setoids.Setoid.
Axiom sr : subrelation eq (Basics.flip Basics.impl).
Existing Instance sr.
Axiom silly : True = False.
Axiom P : Prop -> Prop.
Goal P True.
  Typeclasses eauto := debug.
  pose proof (_ : Proper (eq ==> Basics.flip Basics.impl) P).
  (* Debug: 1: looking for (Proper (eq ==> Basics.flip Basics.impl) P) without 
backtracking
Debug: 1.1: (*external*) proper_reflexive on (Proper (eq ==> Basics.flip 
Basics.impl) P), 1 subgoal(s)
Debug: 1.1.2 : (Reflexive (eq ==> Basics.flip Basics.impl)%signature)
Debug: 1.1.2: looking for (Reflexive (eq ==> Basics.flip 
Basics.impl)%signature) without backtracking
Debug: 1.1.2.1: simple apply @ reflexive_eq_dom_reflexive on (Reflexive (eq ==> 
Basics.flip Basics.impl)%signature), 1 subgoal(s)
Debug: 1.1.2.1.2 : (Reflexive (Basics.flip Basics.impl))
Debug: 1.1.2.1.2: looking for (Reflexive (Basics.flip Basics.impl)) without 
backtracking
Debug: 1.1.2.1.2.1: simple apply @ Equivalence_Reflexive on (Reflexive 
(Basics.flip Basics.impl)), 1 subgoal(s)
Debug: 1.1.2.1.2.1.2 : (Equivalence (Basics.flip Basics.impl))
Debug: 1.1.2.1.2.1.2: looking for (Equivalence (Basics.flip Basics.impl)) 
without backtracking
Debug: 1.1.2.1.2.1.2: no match for (Equivalence (Basics.flip Basics.impl)) , 0 
possibilities
Debug: 1.1.2.1.2.2: simple apply @ PreOrder_Reflexive on (Reflexive (Basics.flip 
Basics.impl)), 1 subgoal(s)
Debug: 1.1.2.1.2.2.2 : (PreOrder (Basics.flip Basics.impl))
Debug: 1.1.2.1.2.2.2: looking for (PreOrder (Basics.flip Basics.impl)) without 
backtracking
Debug: 1.1.2.1.2.2.2.1: (*external*) (class_apply @ flip_PreOrder) on (PreOrder 
(Basics.flip Basics.impl)), 1 subgoal(s)
Debug: 1.1.2.1.2.2.2.1.2 : (PreOrder Basics.impl)
Debug: 1.1.2.1.2.2.2.1.2: looking for (PreOrder Basics.impl) without 
backtracking
Debug: 1.1.2.1.2.2.2.1.2.1: simple apply @ Equivalence_PreOrder on (PreOrder 
Basics.impl), 1 subgoal(s)
Debug: 1.1.2.1.2.2.2.1.2.1.2 : (Equivalence Basics.impl)
Debug: 1.1.2.1.2.2.2.1.2.1.2: looking for (Equivalence Basics.impl) without 
backtracking
Debug: 1.1.2.1.2.2.2.1.2.1.2: no match for (Equivalence Basics.impl) , 0 
possibilities
Debug: 1.1.2.1.2.2.2.2: simple apply @ Equivalence_PreOrder on (PreOrder 
(Basics.flip Basics.impl)), 1 subgoal(s)
Debug: 1.1.2.1.2.2.2.2.2 : (Equivalence (Basics.flip Basics.impl))
Debug: 1.1.2.1.2.2.2.2.2: looking for (Equivalence (Basics.flip Basics.impl)) 
without backtracking
Debug: 1.1.2.1.2.2.2.2.2: no match for (Equivalence (Basics.flip Basics.impl)) 
, 0 possibilities
Debug: 1: looking for (Reflexive Basics.impl) without backtracking
Debug: 1.1: exact impl_Reflexive on (Reflexive Basics.impl), 0 subgoal(s)
Debug: 1.1.2.1.2.3: (*external*) (apply flip_Reflexive) on (Reflexive 
(Basics.flip Basics.impl)), 0 subgoal(s)
 *)
  Undo.
  setoid_rewrite silly. (* Debug: 1: looking for (Proper (eq ==> Basics.flip 
Basics.impl) P) without backtracking
Debug: 1.1: (*external*) proper_subrelation on (Proper (eq ==> Basics.flip 
Basics.impl) P), 3 subgoal(s)
Debug: 1.1.4 : (Proper ?R' P)
Debug: 1.1.4: looking for (Proper ?R' P) with backtracking
Debug: 1.1.4.1: (*external*) proper_reflexive on (Proper ?R' P), 0 subgoal(s)
Debug: 1.1.4 : (Unconvertible (relation (Prop -> Prop)) (eq ==> Basics.flip 
Basics.impl)%signature eq)
Debug:
1.1.4: looking for (Unconvertible (relation (Prop -> Prop)) (eq ==> Basics.flip 
Basics.impl)%signature eq) without backtracking
Debug: 1.1.4.1: (*external*) unconvertible on
(Unconvertible (relation (Prop -> Prop)) (eq ==> Basics.flip 
Basics.impl)%signature eq), 0 subgoal(s)
Debug: 1.1.4 : (subrelation eq (eq ==> Basics.flip Basics.impl)%signature)
Debug: 1.1.4: looking for (subrelation eq (eq ==> Basics.flip 
Basics.impl)%signature) without backtracking
Debug: 1.1.4: no match for (subrelation eq (eq ==> Basics.flip 
Basics.impl)%signature) , 1 possibilities
Debug: 1.2: (*external*) proper_normalization on (Proper (eq ==> Basics.flip 
Basics.impl) P), 2 subgoal(s)
Debug: 1.2.3 : (Normalizes (Prop -> Prop) (eq ==> Basics.flip 
Basics.impl)%signature ?R1)
Debug: 1.2.3: looking for (Normalizes (Prop -> Prop) (eq ==> Basics.flip 
Basics.impl)%signature ?R1) with backtracking
Debug: 1.2.3.1: (*external*) normalizes on (Normalizes (Prop -> Prop) (eq ==> 
Basics.flip Basics.impl)%signature ?R1), 2 subgoal(s)
Debug: 1.2.3.1.3 : (Normalizes Prop eq (Basics.flip ?Goal1))
Debug: 1.2.3.1.3: looking for (Normalizes Prop eq (Basics.flip ?Goal1)) with 
backtracking
Debug: 1.2.3.1.3.1: (*external*) normalizes on (Normalizes Prop eq (Basics.flip 
?Goal1)), 0 subgoal(s)
Debug: 1.2.3.1.3 : (Normalizes Prop (Basics.flip Basics.impl) (Basics.flip 
?Goal1))
Debug: 1.2.3.1.3: looking for (Normalizes Prop (Basics.flip Basics.impl) 
(Basics.flip ?Goal1)) with backtracking
Debug: 1.2.3.1.3.1: (*external*) normalizes on (Normalizes Prop (Basics.flip 
Basics.impl) (Basics.flip ?Goal1)), 0 subgoal(s)
Debug: 1.2.3 : (Proper (Basics.flip (eq --> Basics.flip (Basics.flip 
Basics.impl))%signature) P)
Debug: 1.2.3: looking for (Proper (Basics.flip (eq --> Basics.flip (Basics.flip 
Basics.impl))%signature) P) without backtracking
Debug: 1.2.3.1: (*external*) (class_apply @ proper_flip_proper) on
(Proper (Basics.flip (eq --> Basics.flip (Basics.flip Basics.impl))%signature) 
P), 1 subgoal(s)
Debug: 1.2.3.1.2 : (Proper (eq --> Basics.flip (Basics.flip Basics.impl)) P)
Debug: 1.2.3.1.2: looking for (Proper (eq --> Basics.flip (Basics.flip 
Basics.impl)) P) without backtracking
Debug: 1.2.3.1.2.1: (*external*) proper_subrelation on (Proper (eq --> 
Basics.flip (Basics.flip Basics.impl)) P), 3 subgoal(s)
Debug: 1.2.3.1.2.1.4 : (Proper ?R' P)
Debug: 1.2.3.1.2.1.4: looking for (Proper ?R' P) with backtracking
Debug: 1.2.3.1.2.1.4: no match for (Proper ?R' P) , 17 possibilities
Debug: 1.2.3.2: (*external*) proper_subrelation on
(Proper (Basics.flip (eq --> Basics.flip (Basics.flip Basics.impl))%signature) 
P), 3 subgoal(s)
Debug: 1.2.3.2.4 : (Proper ?R' P)
Debug: 1.2.3.2.4: looking for (Proper ?R' P) with backtracking
Debug: 1.2.3.2.4: no match for (Proper ?R' P) , 17 possibilities
Debug: 1.3: (*external*) proper_reflexive on (Proper (eq ==> Basics.flip 
Basics.impl) P), 1 subgoal(s)
Debug: 1.3.2 : (Reflexive (eq ==> Basics.flip Basics.impl)%signature)
Debug: 1.3.2: looking for (Reflexive (eq ==> Basics.flip 
Basics.impl)%signature) without backtracking
Debug: 1.3.2.1: simple apply @ reflexive_eq_dom_reflexive on (Reflexive (eq ==> 
Basics.flip Basics.impl)%signature), 1 subgoal(s)
Debug: 1.3.2.1.2 : (Reflexive (Basics.flip Basics.impl))
Debug: 1.3.2.1.2: looking for (Reflexive (Basics.flip Basics.impl)) without 
backtracking
Debug: 1.3.2.1.2.1: simple apply @ Equivalence_Reflexive on (Reflexive 
(Basics.flip Basics.impl)), 1 subgoal(s)
Debug: 1.3.2.1.2.1.2 : (Equivalence (Basics.flip Basics.impl))
Debug: 1.3.2.1.2.1.2: looking for (Equivalence (Basics.flip Basics.impl)) 
without backtracking
Debug: 1.3.2.1.2.1.2: no match for (Equivalence (Basics.flip Basics.impl)) , 0 
possibilities
Debug: 1.3.2.1.2.2: simple apply @ PreOrder_Reflexive on (Reflexive (Basics.flip 
Basics.impl)), 1 subgoal(s)
Debug: 1.3.2.1.2.2.2 : (PreOrder (Basics.flip Basics.impl))
Debug: 1.3.2.1.2.2.2: looking for (PreOrder (Basics.flip Basics.impl)) without 
backtracking
Debug: 1.3.2.1.2.2.2.1: (*external*) (class_apply @ flip_PreOrder) on (PreOrder 
(Basics.flip Basics.impl)), 1 subgoal(s)
Debug: 1.3.2.1.2.2.2.1.2 : (PreOrder Basics.impl)
Debug: 1.3.2.1.2.2.2.1.2: looking for (PreOrder Basics.impl) without 
backtracking
Debug: 1.3.2.1.2.2.2.1.2.1: simple apply @ Equivalence_PreOrder on (PreOrder 
Basics.impl), 1 subgoal(s)
Debug: 1.3.2.1.2.2.2.1.2.1.2 : (Equivalence Basics.impl)
Debug: 1.3.2.1.2.2.2.1.2.1.2: looking for (Equivalence Basics.impl) without 
backtracking
Debug: 1.3.2.1.2.2.2.1.2.1.2: no match for (Equivalence Basics.impl) , 0 
possibilities
Debug: 1.3.2.1.2.2.2.2: simple apply @ Equivalence_PreOrder on (PreOrder 
(Basics.flip Basics.impl)), 1 subgoal(s)
Debug: 1.3.2.1.2.2.2.2.2 : (Equivalence (Basics.flip Basics.impl))
Debug: 1.3.2.1.2.2.2.2.2: looking for (Equivalence (Basics.flip Basics.impl)) 
without backtracking
Debug: 1.3.2.1.2.2.2.2.2: no match for (Equivalence (Basics.flip Basics.impl)) 
, 0 possibilities
Debug: 1: looking for (Reflexive Basics.impl) without backtracking
Debug: 1.1: exact impl_Reflexive on (Reflexive Basics.impl), 0 subgoal(s)
Debug: 1.3.2.1.2.3: (*external*) (apply flip_Reflexive) on (Reflexive 
(Basics.flip Basics.impl)), 0 subgoal(s)
*)

Notice that [pose proof] tries [proper_reflexive] first (level 7), while 
[setoid_rewrite] tries [proper_subrelation] first (level 5).  I suspect this is 
part of what causes setoid_rewrite to sometimes be slow.

What's going on here?

Fixing this (if it is a bug) will certainly break backwards compatibility, so 
it may be best to put it under some sort of compatibility option.


Comment author: @mattam82

setoid_rewrite does not generate exactly the same goal, it adds a do_subrelation hypothesis to the goals, that allows to fire the "subtyping" rule proper_subrelation (only once) first, while for pose proof this hint is not applicable (it's not in the trace as you can see). There is certainly a compromise to choose between the reflexive or subrelation instances, we favor the later as its usually the one you want for morphisms introduced by the user, it finds directly the declared instances and test if they give rise to subrelations of the inferred relation, while proper_reflexive can wastefully check for a reflexivity proof of a relation that is all but reflexive.


Comment author: @JasonGross

> while proper_reflexive can wastefully check for a reflexivity proof of a relation that is all but reflexive

That actually seems exactly backwards to me; frequently there will be multiple Proper instances for a given connective (e.g., `Proper (eq ==> eq ==> eq) impl` and `Proper (iff ==> iff ==> iff) impl` and `Proper (impl ==> flip impl ==> flip impl) impl` and `Proper (flip impl ==> impl ==> impl) impl`), and it takes time to check all of them, and even if one is found that is a subrelation, that might make future subgoals impossible because the evars were instantiated wrong.  On the other hand, checking for reflexivity is typically quick, and involves minimal backtracking.

Question: Under what conditions do multiple tc Proper subgoals share evars in the relations?


