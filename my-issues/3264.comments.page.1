[{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518329","html_url":"https://github.com/coq/coq/issues/3264#issuecomment-337518329","issue_url":"https://api.github.com/repos/coq/coq/issues/3264","id":337518329,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxODMyOQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-03-24T21:13:25Z","updated_at":"2017-10-18T09:14:56Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nIn my quest to recreate directory structure within a single file, I have discovered that the proof term resulting from the rewriting machinery depends on what modules are available, even if they have not been imported.  Here is some code that would work if each top-level module were it's own file:\n\nModule File1.\n  Module Export DirA.\n    Module A.\n      Inductive paths {A : Type} (a : A) : A -> Type :=\n        idpath : paths a a.\n\n      Arguments idpath {A a} , [A] a.\n\n      Notation \"x = y :> A\" := (@ paths A x y) : type_scope.\n      Notation \"x = y\" := (x = y :>_) : type_scope.\n    End A.\n  End DirA.\nEnd File1.\n\nModule File2.\n  Module Export DirA.\n    Module B.\n      Import File1.\n      Export A.\n      Lemma foo : forall x y : Type, x = y -> y = x.\n      Proof.\n        intros x y H.\n        rewrite <- H.\n        constructor.\n      Qed.\n    End B.\n  End DirA.\nEnd File2.\n\nModule File3.\n  Module Export DirA.\n    Module C.\n      Import File1.\n      Export A.\n      Lemma bar : forall x y : Type, x = y -> y = x.\n      Proof.\n        intros x y H.\n        rewrite <- H.\n        constructor.\n      Defined.\n      Definition bar'\n        := Eval cbv beta iota zeta delta [bar internal_paths_rew] in bar.\n    End C.\n  End DirA.\nEnd File3.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518329/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518331","html_url":"https://github.com/coq/coq/issues/3264#issuecomment-337518331","issue_url":"https://api.github.com/repos/coq/coq/issues/3264","id":337518331,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxODMzMQ==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-03-25T09:19:13Z","updated_at":"2017-10-18T09:14:56Z","author_association":"CONTRIBUTOR","body":"Comment author: @silene\n\nFor wha\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518331/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518332","html_url":"https://github.com/coq/coq/issues/3264#issuecomment-337518332","issue_url":"https://api.github.com/repos/coq/coq/issues/3264","id":337518332,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxODMzMg==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-03-25T09:24:22Z","updated_at":"2017-10-18T09:14:56Z","author_association":"CONTRIBUTOR","body":"Comment author: @silene\n\n(Automatically submitting a reply when pressing 'tab' is an interesting feature...)\n\nFor what is worth, it works with trunk. But I kind of prefer the 8.4 behavior, I don't see much point in reproving internal_paths_rew in every submodule, as is done in trunk. I think it was a good idea to reuse already proved instances of rewriting lemmas rather than proving them again.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518332/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518333","html_url":"https://github.com/coq/coq/issues/3264#issuecomment-337518333","issue_url":"https://api.github.com/repos/coq/coq/issues/3264","id":337518333,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxODMzMw==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-03-25T12:13:57Z","updated_at":"2017-10-18T09:14:56Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nI agree that it is a good idea to reuse lemmas, but I think it should only be done if the constant is \"in scope\".  In particular, I am strongly against [Require] changing the behavior of proof scripts.  So, for example, I think the following should reuse the lemma from [Module B]:\n\nModule File1.\n  Module Export DirA.\n    Module A.\n      Inductive paths {A : Type} (a : A) : A -> Type :=\n        idpath : paths a a.\n\n      Arguments idpath {A a} , [A] a.\n\n      Notation \"x = y :> A\" := (@ paths A x y) : type_scope.\n      Notation \"x = y\" := (x = y :>_) : type_scope.\n    End A.\n  End DirA.\nEnd File1.\n\nModule File2.\n  Module Export DirA.\n    Module B.\n      Import File1.\n      Export A.\n      Lemma foo : forall x y : Type, x = y -> y = x.\n      Proof.\n        intros x y H.\n        rewrite <- H.\n        constructor.\n      Qed.\n    End B.\n  End DirA.\nEnd File2.\n\nModule File3.\n  Module Export DirA.\n    Module C.\n      Import File1 File2.\n      Export A B.\n      Lemma bar : forall x y : Type, x = y -> y = x.\n      Proof.\n        intros x y H.\n        rewrite <- H.\n        constructor.\n      Defined.\n      Definition bar'\n        := Eval cbv beta iota zeta delta [bar B.internal_paths_rew] in bar.\n      Print bar'. (* bar' = \nfun (x y : Type) (H : x = y) =>\nmatch H in (_ = y0) return (y0 = x) with\n| idpath => idpath\nend\n     : forall x y : Type, x = y -> y = x *)\n    End C.\n  End DirA.\nEnd File3.\n\n\n\nI am, in principle, fine with reusing qualified constants, so long as the constants brought in by [Require] are not used, and there is a way to mimic the behavior of [Require] with namespaces or modules or something, in a single file.\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518333/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null},{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518334","html_url":"https://github.com/coq/coq/issues/3264#issuecomment-337518334","issue_url":"https://api.github.com/repos/coq/coq/issues/3264","id":337518334,"node_id":"MDEyOklzc3VlQ29tbWVudDMzNzUxODMzNA==","user":{"login":"coqbot","id":13040781,"node_id":"MDQ6VXNlcjEzMDQwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/13040781?v=4","gravatar_id":"","url":"https://api.github.com/users/coqbot","html_url":"https://github.com/coqbot","followers_url":"https://api.github.com/users/coqbot/followers","following_url":"https://api.github.com/users/coqbot/following{/other_user}","gists_url":"https://api.github.com/users/coqbot/gists{/gist_id}","starred_url":"https://api.github.com/users/coqbot/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/coqbot/subscriptions","organizations_url":"https://api.github.com/users/coqbot/orgs","repos_url":"https://api.github.com/users/coqbot/repos","events_url":"https://api.github.com/users/coqbot/events{/privacy}","received_events_url":"https://api.github.com/users/coqbot/received_events","type":"User","site_admin":false},"created_at":"2014-06-23T00:13:38Z","updated_at":"2017-10-18T09:14:56Z","author_association":"CONTRIBUTOR","body":"Comment author: @JasonGross\n\nAs Guillaume said, this is fixed in trunk.  (The submit-on-tab behavior also seems to be gone, at least for me.)\n\n","reactions":{"url":"https://api.github.com/repos/coq/coq/issues/comments/337518334/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null}]