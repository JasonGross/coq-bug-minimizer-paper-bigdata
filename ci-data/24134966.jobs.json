{"id":75871963,"status":"failed","stage":"build","name":"build:edge","ref":"pr-6218","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-19T11:26:46.075Z","started_at":"2018-06-19T11:26:46.330Z","finished_at":"2018-06-19T11:30:42.865Z","duration":236.534571,"queued_duration":0.20539,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"3c49b012610a5518b7448175018631eb2658f05e","short_id":"3c49b012","created_at":"2018-06-19T12:21:43.000+01:00","parent_ids":["981864d47efca1d42f43dc5b7c5439638a86f315"],"title":"Fix #5197, handling of algebraic universes","message":"Fix #5197, handling of algebraic universes\n\nThey were allowed to stay in terms in some cases. We now ensure that if\nan evar is defined as e.g. fun x => Type@{foo}, foo is properly\nrefreshed to be non-algebraic as it could otherwise appear in the term\nand break the invariant.\n\nAlso cleanup the implementation of refresh_universes to avoid using a\nmutable reference and simply rely on the Constr.map smartmap idiom\ninstead.\n\nThis might have compatibility issues, e.g. in HoTT where maybe more\nnon-algebraic proxy universes could be generated, we'll see.\n\nFor the bug report proper, there is a lack of bidirectional\ntype-checking that makes the initial definition fail (there's a\nnon-canonical choice of dependency if we don't consider the typing\nconstraint). With the Program bidir hint it passes.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-19T12:09:58.000+01:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-19T12:21:43.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/3c49b012610a5518b7448175018631eb2658f05e"},"pipeline":{"id":24134966,"iid":1514,"project_id":6138686,"sha":"3c49b012610a5518b7448175018631eb2658f05e","ref":"pr-6218","status":"failed","source":"push","created_at":"2018-06-19T11:22:18.938Z","updated_at":"2018-06-19T11:30:44.673Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24134966"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/75871963","artifacts":[{"file_type":"trace","size":41577,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":75871816,"status":"failed","stage":"build","name":"build:edge+flambda","ref":"pr-6218","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-19T11:26:01.671Z","started_at":"2018-06-19T11:26:02.411Z","finished_at":"2018-06-19T11:30:16.132Z","duration":253.721246,"queued_duration":0.697763,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"3c49b012610a5518b7448175018631eb2658f05e","short_id":"3c49b012","created_at":"2018-06-19T12:21:43.000+01:00","parent_ids":["981864d47efca1d42f43dc5b7c5439638a86f315"],"title":"Fix #5197, handling of algebraic universes","message":"Fix #5197, handling of algebraic universes\n\nThey were allowed to stay in terms in some cases. We now ensure that if\nan evar is defined as e.g. fun x => Type@{foo}, foo is properly\nrefreshed to be non-algebraic as it could otherwise appear in the term\nand break the invariant.\n\nAlso cleanup the implementation of refresh_universes to avoid using a\nmutable reference and simply rely on the Constr.map smartmap idiom\ninstead.\n\nThis might have compatibility issues, e.g. in HoTT where maybe more\nnon-algebraic proxy universes could be generated, we'll see.\n\nFor the bug report proper, there is a lack of bidirectional\ntype-checking that makes the initial definition fail (there's a\nnon-canonical choice of dependency if we don't consider the typing\nconstraint). With the Program bidir hint it passes.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-19T12:09:58.000+01:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-19T12:21:43.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/3c49b012610a5518b7448175018631eb2658f05e"},"pipeline":{"id":24134966,"iid":1514,"project_id":6138686,"sha":"3c49b012610a5518b7448175018631eb2658f05e","ref":"pr-6218","status":"failed","source":"push","created_at":"2018-06-19T11:22:18.938Z","updated_at":"2018-06-19T11:30:44.673Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24134966"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/75871816","artifacts":[{"file_type":"trace","size":42749,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":75871791,"status":"failed","stage":"build","name":"build:base","ref":"pr-6218","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-19T11:25:53.871Z","started_at":"2018-06-19T11:25:54.251Z","finished_at":"2018-06-19T11:28:33.463Z","duration":159.211617,"queued_duration":0.335843,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"3c49b012610a5518b7448175018631eb2658f05e","short_id":"3c49b012","created_at":"2018-06-19T12:21:43.000+01:00","parent_ids":["981864d47efca1d42f43dc5b7c5439638a86f315"],"title":"Fix #5197, handling of algebraic universes","message":"Fix #5197, handling of algebraic universes\n\nThey were allowed to stay in terms in some cases. We now ensure that if\nan evar is defined as e.g. fun x => Type@{foo}, foo is properly\nrefreshed to be non-algebraic as it could otherwise appear in the term\nand break the invariant.\n\nAlso cleanup the implementation of refresh_universes to avoid using a\nmutable reference and simply rely on the Constr.map smartmap idiom\ninstead.\n\nThis might have compatibility issues, e.g. in HoTT where maybe more\nnon-algebraic proxy universes could be generated, we'll see.\n\nFor the bug report proper, there is a lack of bidirectional\ntype-checking that makes the initial definition fail (there's a\nnon-canonical choice of dependency if we don't consider the typing\nconstraint). With the Program bidir hint it passes.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-19T12:09:58.000+01:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-19T12:21:43.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/3c49b012610a5518b7448175018631eb2658f05e"},"pipeline":{"id":24134966,"iid":1514,"project_id":6138686,"sha":"3c49b012610a5518b7448175018631eb2658f05e","ref":"pr-6218","status":"failed","source":"push","created_at":"2018-06-19T11:22:18.938Z","updated_at":"2018-06-19T11:30:44.673Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24134966"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/75871791","artifacts":[{"file_type":"trace","size":43638,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":75871667,"status":"failed","stage":"build","name":"build:base+32bit","ref":"pr-6218","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-19T11:25:03.479Z","started_at":"2018-06-19T11:25:03.764Z","finished_at":"2018-06-19T11:29:18.726Z","duration":254.962194,"queued_duration":0.189974,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"3c49b012610a5518b7448175018631eb2658f05e","short_id":"3c49b012","created_at":"2018-06-19T12:21:43.000+01:00","parent_ids":["981864d47efca1d42f43dc5b7c5439638a86f315"],"title":"Fix #5197, handling of algebraic universes","message":"Fix #5197, handling of algebraic universes\n\nThey were allowed to stay in terms in some cases. We now ensure that if\nan evar is defined as e.g. fun x => Type@{foo}, foo is properly\nrefreshed to be non-algebraic as it could otherwise appear in the term\nand break the invariant.\n\nAlso cleanup the implementation of refresh_universes to avoid using a\nmutable reference and simply rely on the Constr.map smartmap idiom\ninstead.\n\nThis might have compatibility issues, e.g. in HoTT where maybe more\nnon-algebraic proxy universes could be generated, we'll see.\n\nFor the bug report proper, there is a lack of bidirectional\ntype-checking that makes the initial definition fail (there's a\nnon-canonical choice of dependency if we don't consider the typing\nconstraint). With the Program bidir hint it passes.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-19T12:09:58.000+01:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-19T12:21:43.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/3c49b012610a5518b7448175018631eb2658f05e"},"pipeline":{"id":24134966,"iid":1514,"project_id":6138686,"sha":"3c49b012610a5518b7448175018631eb2658f05e","ref":"pr-6218","status":"failed","source":"push","created_at":"2018-06-19T11:22:18.938Z","updated_at":"2018-06-19T11:30:44.673Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24134966"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/75871667","artifacts":[{"file_type":"trace","size":39777,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":75871086,"status":"skipped","stage":"test","name":"ci-vst","ref":"pr-6218","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-19T11:22:20.159Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"3c49b012610a5518b7448175018631eb2658f05e","short_id":"3c49b012","created_at":"2018-06-19T12:21:43.000+01:00","parent_ids":["981864d47efca1d42f43dc5b7c5439638a86f315"],"title":"Fix #5197, handling of algebraic universes","message":"Fix #5197, handling of algebraic universes\n\nThey were allowed to stay in terms in some cases. We now ensure that if\nan evar is defined as e.g. fun x => Type@{foo}, foo is properly\nrefreshed to be non-algebraic as it could otherwise appear in the term\nand break the invariant.\n\nAlso cleanup the implementation of refresh_universes to avoid using a\nmutable reference and simply rely on the Constr.map smartmap idiom\ninstead.\n\nThis might have compatibility issues, e.g. in HoTT where maybe more\nnon-algebraic proxy universes could be generated, we'll see.\n\nFor the bug report proper, there is a lack of bidirectional\ntype-checking that makes the initial definition fail (there's a\nnon-canonical choice of dependency if we don't consider the typing\nconstraint). With the Program bidir hint it passes.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-19T12:09:58.000+01:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-19T12:21:43.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/3c49b012610a5518b7448175018631eb2658f05e"},"pipeline":{"id":24134966,"iid":1514,"project_id":6138686,"sha":"3c49b012610a5518b7448175018631eb2658f05e","ref":"pr-6218","status":"failed","source":"push","created_at":"2018-06-19T11:22:18.938Z","updated_at":"2018-06-19T11:30:44.673Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24134966"},"web_url":"https://gitlab.com/coq/coq/-/jobs/75871086","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":75871084,"status":"skipped","stage":"test","name":"ci-unimath","ref":"pr-6218","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-19T11:22:20.132Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"3c49b012610a5518b7448175018631eb2658f05e","short_id":"3c49b012","created_at":"2018-06-19T12:21:43.000+01:00","parent_ids":["981864d47efca1d42f43dc5b7c5439638a86f315"],"title":"Fix #5197, handling of algebraic universes","message":"Fix #5197, handling of algebraic universes\n\nThey were allowed to stay in terms in some cases. We now ensure that if\nan evar is defined as e.g. fun x => Type@{foo}, foo is properly\nrefreshed to be non-algebraic as it could otherwise appear in the term\nand break the invariant.\n\nAlso cleanup the implementation of refresh_universes to avoid using a\nmutable reference and simply rely on the Constr.map smartmap idiom\ninstead.\n\nThis might have compatibility issues, e.g. in HoTT where maybe more\nnon-algebraic proxy universes could be generated, we'll see.\n\nFor the bug report proper, there is a lack of bidirectional\ntype-checking that makes the initial definition fail (there's a\nnon-canonical choice of dependency if we don't consider the typing\nconstraint). With the Program bidir hint it passes.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-19T12:09:58.000+01:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-19T12:21:43.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/3c49b012610a5518b7448175018631eb2658f05e"},"pipeline":{"id":24134966,"iid":1514,"project_id":6138686,"sha":"3c49b012610a5518b7448175018631eb2658f05e","ref":"pr-6218","status":"failed","source":"push","created_at":"2018-06-19T11:22:18.938Z","updated_at":"2018-06-19T11:30:44.673Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24134966"},"web_url":"https://gitlab.com/coq/coq/-/jobs/75871084","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":75871081,"status":"skipped","stage":"test","name":"ci-sf","ref":"pr-6218","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-19T11:22:20.099Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"3c49b012610a5518b7448175018631eb2658f05e","short_id":"3c49b012","created_at":"2018-06-19T12:21:43.000+01:00","parent_ids":["981864d47efca1d42f43dc5b7c5439638a86f315"],"title":"Fix #5197, handling of algebraic universes","message":"Fix #5197, handling of algebraic universes\n\nThey were allowed to stay in terms in some cases. We now ensure that if\nan evar is defined as e.g. fun x => Type@{foo}, foo is properly\nrefreshed to be non-algebraic as it could otherwise appear in the term\nand break the invariant.\n\nAlso cleanup the implementation of refresh_universes to avoid using a\nmutable reference and simply rely on the Constr.map smartmap idiom\ninstead.\n\nThis might have compatibility issues, e.g. in HoTT where maybe more\nnon-algebraic proxy universes could be generated, we'll see.\n\nFor the bug report proper, there is a lack of bidirectional\ntype-checking that makes the initial definition fail (there's a\nnon-canonical choice of dependency if we don't consider the typing\nconstraint). With the Program bidir hint it passes.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-19T12:09:58.000+01:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-19T12:21:43.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/3c49b012610a5518b7448175018631eb2658f05e"},"pipeline":{"id":24134966,"iid":1514,"project_id":6138686,"sha":"3c49b012610a5518b7448175018631eb2658f05e","ref":"pr-6218","status":"failed","source":"push","created_at":"2018-06-19T11:22:18.938Z","updated_at":"2018-06-19T11:30:44.673Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24134966"},"web_url":"https://gitlab.com/coq/coq/-/jobs/75871081","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":75871079,"status":"skipped","stage":"test","name":"ci-quickchick","ref":"pr-6218","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-19T11:22:20.070Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"3c49b012610a5518b7448175018631eb2658f05e","short_id":"3c49b012","created_at":"2018-06-19T12:21:43.000+01:00","parent_ids":["981864d47efca1d42f43dc5b7c5439638a86f315"],"title":"Fix #5197, handling of algebraic universes","message":"Fix #5197, handling of algebraic universes\n\nThey were allowed to stay in terms in some cases. We now ensure that if\nan evar is defined as e.g. fun x => Type@{foo}, foo is properly\nrefreshed to be non-algebraic as it could otherwise appear in the term\nand break the invariant.\n\nAlso cleanup the implementation of refresh_universes to avoid using a\nmutable reference and simply rely on the Constr.map smartmap idiom\ninstead.\n\nThis might have compatibility issues, e.g. in HoTT where maybe more\nnon-algebraic proxy universes could be generated, we'll see.\n\nFor the bug report proper, there is a lack of bidirectional\ntype-checking that makes the initial definition fail (there's a\nnon-canonical choice of dependency if we don't consider the typing\nconstraint). With the Program bidir hint it passes.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-19T12:09:58.000+01:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-19T12:21:43.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/3c49b012610a5518b7448175018631eb2658f05e"},"pipeline":{"id":24134966,"iid":1514,"project_id":6138686,"sha":"3c49b012610a5518b7448175018631eb2658f05e","ref":"pr-6218","status":"failed","source":"push","created_at":"2018-06-19T11:22:18.938Z","updated_at":"2018-06-19T11:30:44.673Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24134966"},"web_url":"https://gitlab.com/coq/coq/-/jobs/75871079","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":75871078,"status":"skipped","stage":"test","name":"ci-pidetop","ref":"pr-6218","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-19T11:22:20.040Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"3c49b012610a5518b7448175018631eb2658f05e","short_id":"3c49b012","created_at":"2018-06-19T12:21:43.000+01:00","parent_ids":["981864d47efca1d42f43dc5b7c5439638a86f315"],"title":"Fix #5197, handling of algebraic universes","message":"Fix #5197, handling of algebraic universes\n\nThey were allowed to stay in terms in some cases. We now ensure that if\nan evar is defined as e.g. fun x => Type@{foo}, foo is properly\nrefreshed to be non-algebraic as it could otherwise appear in the term\nand break the invariant.\n\nAlso cleanup the implementation of refresh_universes to avoid using a\nmutable reference and simply rely on the Constr.map smartmap idiom\ninstead.\n\nThis might have compatibility issues, e.g. in HoTT where maybe more\nnon-algebraic proxy universes could be generated, we'll see.\n\nFor the bug report proper, there is a lack of bidirectional\ntype-checking that makes the initial definition fail (there's a\nnon-canonical choice of dependency if we don't consider the typing\nconstraint). With the Program bidir hint it passes.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-19T12:09:58.000+01:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-19T12:21:43.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/3c49b012610a5518b7448175018631eb2658f05e"},"pipeline":{"id":24134966,"iid":1514,"project_id":6138686,"sha":"3c49b012610a5518b7448175018631eb2658f05e","ref":"pr-6218","status":"failed","source":"push","created_at":"2018-06-19T11:22:18.938Z","updated_at":"2018-06-19T11:30:44.673Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24134966"},"web_url":"https://gitlab.com/coq/coq/-/jobs/75871078","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":75871077,"status":"skipped","stage":"test","name":"ci-mtac2","ref":"pr-6218","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-19T11:22:20.003Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"3c49b012610a5518b7448175018631eb2658f05e","short_id":"3c49b012","created_at":"2018-06-19T12:21:43.000+01:00","parent_ids":["981864d47efca1d42f43dc5b7c5439638a86f315"],"title":"Fix #5197, handling of algebraic universes","message":"Fix #5197, handling of algebraic universes\n\nThey were allowed to stay in terms in some cases. We now ensure that if\nan evar is defined as e.g. fun x => Type@{foo}, foo is properly\nrefreshed to be non-algebraic as it could otherwise appear in the term\nand break the invariant.\n\nAlso cleanup the implementation of refresh_universes to avoid using a\nmutable reference and simply rely on the Constr.map smartmap idiom\ninstead.\n\nThis might have compatibility issues, e.g. in HoTT where maybe more\nnon-algebraic proxy universes could be generated, we'll see.\n\nFor the bug report proper, there is a lack of bidirectional\ntype-checking that makes the initial definition fail (there's a\nnon-canonical choice of dependency if we don't consider the typing\nconstraint). With the Program bidir hint it passes.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-19T12:09:58.000+01:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-19T12:21:43.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/3c49b012610a5518b7448175018631eb2658f05e"},"pipeline":{"id":24134966,"iid":1514,"project_id":6138686,"sha":"3c49b012610a5518b7448175018631eb2658f05e","ref":"pr-6218","status":"failed","source":"push","created_at":"2018-06-19T11:22:18.938Z","updated_at":"2018-06-19T11:30:44.673Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24134966"},"web_url":"https://gitlab.com/coq/coq/-/jobs/75871077","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":75871075,"status":"skipped","stage":"test","name":"ci-math-comp","ref":"pr-6218","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-19T11:22:19.961Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"3c49b012610a5518b7448175018631eb2658f05e","short_id":"3c49b012","created_at":"2018-06-19T12:21:43.000+01:00","parent_ids":["981864d47efca1d42f43dc5b7c5439638a86f315"],"title":"Fix #5197, handling of algebraic universes","message":"Fix #5197, handling of algebraic universes\n\nThey were allowed to stay in terms in some cases. We now ensure that if\nan evar is defined as e.g. fun x => Type@{foo}, foo is properly\nrefreshed to be non-algebraic as it could otherwise appear in the term\nand break the invariant.\n\nAlso cleanup the implementation of refresh_universes to avoid using a\nmutable reference and simply rely on the Constr.map smartmap idiom\ninstead.\n\nThis might have compatibility issues, e.g. in HoTT where maybe more\nnon-algebraic proxy universes could be generated, we'll see.\n\nFor the bug report proper, there is a lack of bidirectional\ntype-checking that makes the initial definition fail (there's a\nnon-canonical choice of dependency if we don't consider the typing\nconstraint). With the Program bidir hint it passes.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-19T12:09:58.000+01:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-19T12:21:43.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/3c49b012610a5518b7448175018631eb2658f05e"},"pipeline":{"id":24134966,"iid":1514,"project_id":6138686,"sha":"3c49b012610a5518b7448175018631eb2658f05e","ref":"pr-6218","status":"failed","source":"push","created_at":"2018-06-19T11:22:18.938Z","updated_at":"2018-06-19T11:30:44.673Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24134966"},"web_url":"https://gitlab.com/coq/coq/-/jobs/75871075","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":75871074,"status":"skipped","stage":"test","name":"ci-ltac2","ref":"pr-6218","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-19T11:22:19.934Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"3c49b012610a5518b7448175018631eb2658f05e","short_id":"3c49b012","created_at":"2018-06-19T12:21:43.000+01:00","parent_ids":["981864d47efca1d42f43dc5b7c5439638a86f315"],"title":"Fix #5197, handling of algebraic universes","message":"Fix #5197, handling of algebraic universes\n\nThey were allowed to stay in terms in some cases. We now ensure that if\nan evar is defined as e.g. fun x => Type@{foo}, foo is properly\nrefreshed to be non-algebraic as it could otherwise appear in the term\nand break the invariant.\n\nAlso cleanup the implementation of refresh_universes to avoid using a\nmutable reference and simply rely on the Constr.map smartmap idiom\ninstead.\n\nThis might have compatibility issues, e.g. in HoTT where maybe more\nnon-algebraic proxy universes could be generated, we'll see.\n\nFor the bug report proper, there is a lack of bidirectional\ntype-checking that makes the initial definition fail (there's a\nnon-canonical choice of dependency if we don't consider the typing\nconstraint). With the Program bidir hint it passes.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-19T12:09:58.000+01:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-19T12:21:43.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/3c49b012610a5518b7448175018631eb2658f05e"},"pipeline":{"id":24134966,"iid":1514,"project_id":6138686,"sha":"3c49b012610a5518b7448175018631eb2658f05e","ref":"pr-6218","status":"failed","source":"push","created_at":"2018-06-19T11:22:18.938Z","updated_at":"2018-06-19T11:30:44.673Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24134966"},"web_url":"https://gitlab.com/coq/coq/-/jobs/75871074","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":75871073,"status":"skipped","stage":"test","name":"ci-iris-lambda-rust","ref":"pr-6218","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-19T11:22:19.889Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"3c49b012610a5518b7448175018631eb2658f05e","short_id":"3c49b012","created_at":"2018-06-19T12:21:43.000+01:00","parent_ids":["981864d47efca1d42f43dc5b7c5439638a86f315"],"title":"Fix #5197, handling of algebraic universes","message":"Fix #5197, handling of algebraic universes\n\nThey were allowed to stay in terms in some cases. We now ensure that if\nan evar is defined as e.g. fun x => Type@{foo}, foo is properly\nrefreshed to be non-algebraic as it could otherwise appear in the term\nand break the invariant.\n\nAlso cleanup the implementation of refresh_universes to avoid using a\nmutable reference and simply rely on the Constr.map smartmap idiom\ninstead.\n\nThis might have compatibility issues, e.g. in HoTT where maybe more\nnon-algebraic proxy universes could be generated, we'll see.\n\nFor the bug report proper, there is a lack of bidirectional\ntype-checking that makes the initial definition fail (there's a\nnon-canonical choice of dependency if we don't consider the typing\nconstraint). With the Program bidir hint it passes.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-19T12:09:58.000+01:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-19T12:21:43.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/3c49b012610a5518b7448175018631eb2658f05e"},"pipeline":{"id":24134966,"iid":1514,"project_id":6138686,"sha":"3c49b012610a5518b7448175018631eb2658f05e","ref":"pr-6218","status":"failed","source":"push","created_at":"2018-06-19T11:22:18.938Z","updated_at":"2018-06-19T11:30:44.673Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24134966"},"web_url":"https://gitlab.com/coq/coq/-/jobs/75871073","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":75871072,"status":"skipped","stage":"test","name":"ci-hott","ref":"pr-6218","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-19T11:22:19.850Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"3c49b012610a5518b7448175018631eb2658f05e","short_id":"3c49b012","created_at":"2018-06-19T12:21:43.000+01:00","parent_ids":["981864d47efca1d42f43dc5b7c5439638a86f315"],"title":"Fix #5197, handling of algebraic universes","message":"Fix #5197, handling of algebraic universes\n\nThey were allowed to stay in terms in some cases. We now ensure that if\nan evar is defined as e.g. fun x => Type@{foo}, foo is properly\nrefreshed to be non-algebraic as it could otherwise appear in the term\nand break the invariant.\n\nAlso cleanup the implementation of refresh_universes to avoid using a\nmutable reference and simply rely on the Constr.map smartmap idiom\ninstead.\n\nThis might have compatibility issues, e.g. in HoTT where maybe more\nnon-algebraic proxy universes could be generated, we'll see.\n\nFor the bug report proper, there is a lack of bidirectional\ntype-checking that makes the initial definition fail (there's a\nnon-canonical choice of dependency if we don't consider the typing\nconstraint). With the Program bidir hint it passes.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-19T12:09:58.000+01:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-19T12:21:43.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/3c49b012610a5518b7448175018631eb2658f05e"},"pipeline":{"id":24134966,"iid":1514,"project_id":6138686,"sha":"3c49b012610a5518b7448175018631eb2658f05e","ref":"pr-6218","status":"failed","source":"push","created_at":"2018-06-19T11:22:18.938Z","updated_at":"2018-06-19T11:30:44.673Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24134966"},"web_url":"https://gitlab.com/coq/coq/-/jobs/75871072","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":75871071,"status":"skipped","stage":"test","name":"ci-geocoq","ref":"pr-6218","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-19T11:22:19.817Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"3c49b012610a5518b7448175018631eb2658f05e","short_id":"3c49b012","created_at":"2018-06-19T12:21:43.000+01:00","parent_ids":["981864d47efca1d42f43dc5b7c5439638a86f315"],"title":"Fix #5197, handling of algebraic universes","message":"Fix #5197, handling of algebraic universes\n\nThey were allowed to stay in terms in some cases. We now ensure that if\nan evar is defined as e.g. fun x => Type@{foo}, foo is properly\nrefreshed to be non-algebraic as it could otherwise appear in the term\nand break the invariant.\n\nAlso cleanup the implementation of refresh_universes to avoid using a\nmutable reference and simply rely on the Constr.map smartmap idiom\ninstead.\n\nThis might have compatibility issues, e.g. in HoTT where maybe more\nnon-algebraic proxy universes could be generated, we'll see.\n\nFor the bug report proper, there is a lack of bidirectional\ntype-checking that makes the initial definition fail (there's a\nnon-canonical choice of dependency if we don't consider the typing\nconstraint). With the Program bidir hint it passes.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-19T12:09:58.000+01:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-19T12:21:43.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/3c49b012610a5518b7448175018631eb2658f05e"},"pipeline":{"id":24134966,"iid":1514,"project_id":6138686,"sha":"3c49b012610a5518b7448175018631eb2658f05e","ref":"pr-6218","status":"failed","source":"push","created_at":"2018-06-19T11:22:18.938Z","updated_at":"2018-06-19T11:30:44.673Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24134966"},"web_url":"https://gitlab.com/coq/coq/-/jobs/75871071","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":75871070,"status":"skipped","stage":"test","name":"ci-formal-topology","ref":"pr-6218","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-19T11:22:19.794Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"3c49b012610a5518b7448175018631eb2658f05e","short_id":"3c49b012","created_at":"2018-06-19T12:21:43.000+01:00","parent_ids":["981864d47efca1d42f43dc5b7c5439638a86f315"],"title":"Fix #5197, handling of algebraic universes","message":"Fix #5197, handling of algebraic universes\n\nThey were allowed to stay in terms in some cases. We now ensure that if\nan evar is defined as e.g. fun x => Type@{foo}, foo is properly\nrefreshed to be non-algebraic as it could otherwise appear in the term\nand break the invariant.\n\nAlso cleanup the implementation of refresh_universes to avoid using a\nmutable reference and simply rely on the Constr.map smartmap idiom\ninstead.\n\nThis might have compatibility issues, e.g. in HoTT where maybe more\nnon-algebraic proxy universes could be generated, we'll see.\n\nFor the bug report proper, there is a lack of bidirectional\ntype-checking that makes the initial definition fail (there's a\nnon-canonical choice of dependency if we don't consider the typing\nconstraint). With the Program bidir hint it passes.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-19T12:09:58.000+01:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-19T12:21:43.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/3c49b012610a5518b7448175018631eb2658f05e"},"pipeline":{"id":24134966,"iid":1514,"project_id":6138686,"sha":"3c49b012610a5518b7448175018631eb2658f05e","ref":"pr-6218","status":"failed","source":"push","created_at":"2018-06-19T11:22:18.938Z","updated_at":"2018-06-19T11:30:44.673Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24134966"},"web_url":"https://gitlab.com/coq/coq/-/jobs/75871070","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":75871069,"status":"skipped","stage":"test","name":"ci-flocq","ref":"pr-6218","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-19T11:22:19.772Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"3c49b012610a5518b7448175018631eb2658f05e","short_id":"3c49b012","created_at":"2018-06-19T12:21:43.000+01:00","parent_ids":["981864d47efca1d42f43dc5b7c5439638a86f315"],"title":"Fix #5197, handling of algebraic universes","message":"Fix #5197, handling of algebraic universes\n\nThey were allowed to stay in terms in some cases. We now ensure that if\nan evar is defined as e.g. fun x => Type@{foo}, foo is properly\nrefreshed to be non-algebraic as it could otherwise appear in the term\nand break the invariant.\n\nAlso cleanup the implementation of refresh_universes to avoid using a\nmutable reference and simply rely on the Constr.map smartmap idiom\ninstead.\n\nThis might have compatibility issues, e.g. in HoTT where maybe more\nnon-algebraic proxy universes could be generated, we'll see.\n\nFor the bug report proper, there is a lack of bidirectional\ntype-checking that makes the initial definition fail (there's a\nnon-canonical choice of dependency if we don't consider the typing\nconstraint). With the Program bidir hint it passes.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-19T12:09:58.000+01:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-19T12:21:43.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/3c49b012610a5518b7448175018631eb2658f05e"},"pipeline":{"id":24134966,"iid":1514,"project_id":6138686,"sha":"3c49b012610a5518b7448175018631eb2658f05e","ref":"pr-6218","status":"failed","source":"push","created_at":"2018-06-19T11:22:18.938Z","updated_at":"2018-06-19T11:30:44.673Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24134966"},"web_url":"https://gitlab.com/coq/coq/-/jobs/75871069","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":75871068,"status":"skipped","stage":"test","name":"ci-fiat-parsers","ref":"pr-6218","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-19T11:22:19.741Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"3c49b012610a5518b7448175018631eb2658f05e","short_id":"3c49b012","created_at":"2018-06-19T12:21:43.000+01:00","parent_ids":["981864d47efca1d42f43dc5b7c5439638a86f315"],"title":"Fix #5197, handling of algebraic universes","message":"Fix #5197, handling of algebraic universes\n\nThey were allowed to stay in terms in some cases. We now ensure that if\nan evar is defined as e.g. fun x => Type@{foo}, foo is properly\nrefreshed to be non-algebraic as it could otherwise appear in the term\nand break the invariant.\n\nAlso cleanup the implementation of refresh_universes to avoid using a\nmutable reference and simply rely on the Constr.map smartmap idiom\ninstead.\n\nThis might have compatibility issues, e.g. in HoTT where maybe more\nnon-algebraic proxy universes could be generated, we'll see.\n\nFor the bug report proper, there is a lack of bidirectional\ntype-checking that makes the initial definition fail (there's a\nnon-canonical choice of dependency if we don't consider the typing\nconstraint). With the Program bidir hint it passes.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-19T12:09:58.000+01:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-19T12:21:43.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/3c49b012610a5518b7448175018631eb2658f05e"},"pipeline":{"id":24134966,"iid":1514,"project_id":6138686,"sha":"3c49b012610a5518b7448175018631eb2658f05e","ref":"pr-6218","status":"failed","source":"push","created_at":"2018-06-19T11:22:18.938Z","updated_at":"2018-06-19T11:30:44.673Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24134966"},"web_url":"https://gitlab.com/coq/coq/-/jobs/75871068","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":75871067,"status":"skipped","stage":"test","name":"ci-fiat-crypto","ref":"pr-6218","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-19T11:22:19.716Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"3c49b012610a5518b7448175018631eb2658f05e","short_id":"3c49b012","created_at":"2018-06-19T12:21:43.000+01:00","parent_ids":["981864d47efca1d42f43dc5b7c5439638a86f315"],"title":"Fix #5197, handling of algebraic universes","message":"Fix #5197, handling of algebraic universes\n\nThey were allowed to stay in terms in some cases. We now ensure that if\nan evar is defined as e.g. fun x => Type@{foo}, foo is properly\nrefreshed to be non-algebraic as it could otherwise appear in the term\nand break the invariant.\n\nAlso cleanup the implementation of refresh_universes to avoid using a\nmutable reference and simply rely on the Constr.map smartmap idiom\ninstead.\n\nThis might have compatibility issues, e.g. in HoTT where maybe more\nnon-algebraic proxy universes could be generated, we'll see.\n\nFor the bug report proper, there is a lack of bidirectional\ntype-checking that makes the initial definition fail (there's a\nnon-canonical choice of dependency if we don't consider the typing\nconstraint). With the Program bidir hint it passes.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-19T12:09:58.000+01:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-19T12:21:43.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/3c49b012610a5518b7448175018631eb2658f05e"},"pipeline":{"id":24134966,"iid":1514,"project_id":6138686,"sha":"3c49b012610a5518b7448175018631eb2658f05e","ref":"pr-6218","status":"failed","source":"push","created_at":"2018-06-19T11:22:18.938Z","updated_at":"2018-06-19T11:30:44.673Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24134966"},"web_url":"https://gitlab.com/coq/coq/-/jobs/75871067","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":75871066,"status":"skipped","stage":"test","name":"ci-fcsl-pcm","ref":"pr-6218","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-19T11:22:19.693Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"3c49b012610a5518b7448175018631eb2658f05e","short_id":"3c49b012","created_at":"2018-06-19T12:21:43.000+01:00","parent_ids":["981864d47efca1d42f43dc5b7c5439638a86f315"],"title":"Fix #5197, handling of algebraic universes","message":"Fix #5197, handling of algebraic universes\n\nThey were allowed to stay in terms in some cases. We now ensure that if\nan evar is defined as e.g. fun x => Type@{foo}, foo is properly\nrefreshed to be non-algebraic as it could otherwise appear in the term\nand break the invariant.\n\nAlso cleanup the implementation of refresh_universes to avoid using a\nmutable reference and simply rely on the Constr.map smartmap idiom\ninstead.\n\nThis might have compatibility issues, e.g. in HoTT where maybe more\nnon-algebraic proxy universes could be generated, we'll see.\n\nFor the bug report proper, there is a lack of bidirectional\ntype-checking that makes the initial definition fail (there's a\nnon-canonical choice of dependency if we don't consider the typing\nconstraint). With the Program bidir hint it passes.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-19T12:09:58.000+01:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-19T12:21:43.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/3c49b012610a5518b7448175018631eb2658f05e"},"pipeline":{"id":24134966,"iid":1514,"project_id":6138686,"sha":"3c49b012610a5518b7448175018631eb2658f05e","ref":"pr-6218","status":"failed","source":"push","created_at":"2018-06-19T11:22:18.938Z","updated_at":"2018-06-19T11:30:44.673Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24134966"},"web_url":"https://gitlab.com/coq/coq/-/jobs/75871066","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":75871065,"status":"skipped","stage":"test","name":"ci-equations","ref":"pr-6218","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-19T11:22:19.669Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"3c49b012610a5518b7448175018631eb2658f05e","short_id":"3c49b012","created_at":"2018-06-19T12:21:43.000+01:00","parent_ids":["981864d47efca1d42f43dc5b7c5439638a86f315"],"title":"Fix #5197, handling of algebraic universes","message":"Fix #5197, handling of algebraic universes\n\nThey were allowed to stay in terms in some cases. We now ensure that if\nan evar is defined as e.g. fun x => Type@{foo}, foo is properly\nrefreshed to be non-algebraic as it could otherwise appear in the term\nand break the invariant.\n\nAlso cleanup the implementation of refresh_universes to avoid using a\nmutable reference and simply rely on the Constr.map smartmap idiom\ninstead.\n\nThis might have compatibility issues, e.g. in HoTT where maybe more\nnon-algebraic proxy universes could be generated, we'll see.\n\nFor the bug report proper, there is a lack of bidirectional\ntype-checking that makes the initial definition fail (there's a\nnon-canonical choice of dependency if we don't consider the typing\nconstraint). With the Program bidir hint it passes.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-19T12:09:58.000+01:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-19T12:21:43.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/3c49b012610a5518b7448175018631eb2658f05e"},"pipeline":{"id":24134966,"iid":1514,"project_id":6138686,"sha":"3c49b012610a5518b7448175018631eb2658f05e","ref":"pr-6218","status":"failed","source":"push","created_at":"2018-06-19T11:22:18.938Z","updated_at":"2018-06-19T11:30:44.673Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24134966"},"web_url":"https://gitlab.com/coq/coq/-/jobs/75871065","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":75871064,"status":"skipped","stage":"test","name":"ci-elpi","ref":"pr-6218","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-19T11:22:19.641Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"3c49b012610a5518b7448175018631eb2658f05e","short_id":"3c49b012","created_at":"2018-06-19T12:21:43.000+01:00","parent_ids":["981864d47efca1d42f43dc5b7c5439638a86f315"],"title":"Fix #5197, handling of algebraic universes","message":"Fix #5197, handling of algebraic universes\n\nThey were allowed to stay in terms in some cases. We now ensure that if\nan evar is defined as e.g. fun x => Type@{foo}, foo is properly\nrefreshed to be non-algebraic as it could otherwise appear in the term\nand break the invariant.\n\nAlso cleanup the implementation of refresh_universes to avoid using a\nmutable reference and simply rely on the Constr.map smartmap idiom\ninstead.\n\nThis might have compatibility issues, e.g. in HoTT where maybe more\nnon-algebraic proxy universes could be generated, we'll see.\n\nFor the bug report proper, there is a lack of bidirectional\ntype-checking that makes the initial definition fail (there's a\nnon-canonical choice of dependency if we don't consider the typing\nconstraint). With the Program bidir hint it passes.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-19T12:09:58.000+01:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-19T12:21:43.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/3c49b012610a5518b7448175018631eb2658f05e"},"pipeline":{"id":24134966,"iid":1514,"project_id":6138686,"sha":"3c49b012610a5518b7448175018631eb2658f05e","ref":"pr-6218","status":"failed","source":"push","created_at":"2018-06-19T11:22:18.938Z","updated_at":"2018-06-19T11:30:44.673Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24134966"},"web_url":"https://gitlab.com/coq/coq/-/jobs/75871064","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":75871063,"status":"skipped","stage":"test","name":"ci-cross-crypto","ref":"pr-6218","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-19T11:22:19.551Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"3c49b012610a5518b7448175018631eb2658f05e","short_id":"3c49b012","created_at":"2018-06-19T12:21:43.000+01:00","parent_ids":["981864d47efca1d42f43dc5b7c5439638a86f315"],"title":"Fix #5197, handling of algebraic universes","message":"Fix #5197, handling of algebraic universes\n\nThey were allowed to stay in terms in some cases. We now ensure that if\nan evar is defined as e.g. fun x => Type@{foo}, foo is properly\nrefreshed to be non-algebraic as it could otherwise appear in the term\nand break the invariant.\n\nAlso cleanup the implementation of refresh_universes to avoid using a\nmutable reference and simply rely on the Constr.map smartmap idiom\ninstead.\n\nThis might have compatibility issues, e.g. in HoTT where maybe more\nnon-algebraic proxy universes could be generated, we'll see.\n\nFor the bug report proper, there is a lack of bidirectional\ntype-checking that makes the initial definition fail (there's a\nnon-canonical choice of dependency if we don't consider the typing\nconstraint). With the Program bidir hint it passes.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-19T12:09:58.000+01:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-19T12:21:43.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/3c49b012610a5518b7448175018631eb2658f05e"},"pipeline":{"id":24134966,"iid":1514,"project_id":6138686,"sha":"3c49b012610a5518b7448175018631eb2658f05e","ref":"pr-6218","status":"failed","source":"push","created_at":"2018-06-19T11:22:18.938Z","updated_at":"2018-06-19T11:30:44.673Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24134966"},"web_url":"https://gitlab.com/coq/coq/-/jobs/75871063","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":75871062,"status":"skipped","stage":"test","name":"ci-coquelicot","ref":"pr-6218","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-19T11:22:19.514Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"3c49b012610a5518b7448175018631eb2658f05e","short_id":"3c49b012","created_at":"2018-06-19T12:21:43.000+01:00","parent_ids":["981864d47efca1d42f43dc5b7c5439638a86f315"],"title":"Fix #5197, handling of algebraic universes","message":"Fix #5197, handling of algebraic universes\n\nThey were allowed to stay in terms in some cases. We now ensure that if\nan evar is defined as e.g. fun x => Type@{foo}, foo is properly\nrefreshed to be non-algebraic as it could otherwise appear in the term\nand break the invariant.\n\nAlso cleanup the implementation of refresh_universes to avoid using a\nmutable reference and simply rely on the Constr.map smartmap idiom\ninstead.\n\nThis might have compatibility issues, e.g. in HoTT where maybe more\nnon-algebraic proxy universes could be generated, we'll see.\n\nFor the bug report proper, there is a lack of bidirectional\ntype-checking that makes the initial definition fail (there's a\nnon-canonical choice of dependency if we don't consider the typing\nconstraint). With the Program bidir hint it passes.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-19T12:09:58.000+01:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-19T12:21:43.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/3c49b012610a5518b7448175018631eb2658f05e"},"pipeline":{"id":24134966,"iid":1514,"project_id":6138686,"sha":"3c49b012610a5518b7448175018631eb2658f05e","ref":"pr-6218","status":"failed","source":"push","created_at":"2018-06-19T11:22:18.938Z","updated_at":"2018-06-19T11:30:44.673Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24134966"},"web_url":"https://gitlab.com/coq/coq/-/jobs/75871062","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":75871061,"status":"skipped","stage":"test","name":"ci-coq-dpdgraph","ref":"pr-6218","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-19T11:22:19.473Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"3c49b012610a5518b7448175018631eb2658f05e","short_id":"3c49b012","created_at":"2018-06-19T12:21:43.000+01:00","parent_ids":["981864d47efca1d42f43dc5b7c5439638a86f315"],"title":"Fix #5197, handling of algebraic universes","message":"Fix #5197, handling of algebraic universes\n\nThey were allowed to stay in terms in some cases. We now ensure that if\nan evar is defined as e.g. fun x => Type@{foo}, foo is properly\nrefreshed to be non-algebraic as it could otherwise appear in the term\nand break the invariant.\n\nAlso cleanup the implementation of refresh_universes to avoid using a\nmutable reference and simply rely on the Constr.map smartmap idiom\ninstead.\n\nThis might have compatibility issues, e.g. in HoTT where maybe more\nnon-algebraic proxy universes could be generated, we'll see.\n\nFor the bug report proper, there is a lack of bidirectional\ntype-checking that makes the initial definition fail (there's a\nnon-canonical choice of dependency if we don't consider the typing\nconstraint). With the Program bidir hint it passes.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-19T12:09:58.000+01:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-19T12:21:43.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/3c49b012610a5518b7448175018631eb2658f05e"},"pipeline":{"id":24134966,"iid":1514,"project_id":6138686,"sha":"3c49b012610a5518b7448175018631eb2658f05e","ref":"pr-6218","status":"failed","source":"push","created_at":"2018-06-19T11:22:18.938Z","updated_at":"2018-06-19T11:30:44.673Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24134966"},"web_url":"https://gitlab.com/coq/coq/-/jobs/75871061","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":75871060,"status":"skipped","stage":"test","name":"ci-compcert","ref":"pr-6218","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-19T11:22:19.451Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"3c49b012610a5518b7448175018631eb2658f05e","short_id":"3c49b012","created_at":"2018-06-19T12:21:43.000+01:00","parent_ids":["981864d47efca1d42f43dc5b7c5439638a86f315"],"title":"Fix #5197, handling of algebraic universes","message":"Fix #5197, handling of algebraic universes\n\nThey were allowed to stay in terms in some cases. We now ensure that if\nan evar is defined as e.g. fun x => Type@{foo}, foo is properly\nrefreshed to be non-algebraic as it could otherwise appear in the term\nand break the invariant.\n\nAlso cleanup the implementation of refresh_universes to avoid using a\nmutable reference and simply rely on the Constr.map smartmap idiom\ninstead.\n\nThis might have compatibility issues, e.g. in HoTT where maybe more\nnon-algebraic proxy universes could be generated, we'll see.\n\nFor the bug report proper, there is a lack of bidirectional\ntype-checking that makes the initial definition fail (there's a\nnon-canonical choice of dependency if we don't consider the typing\nconstraint). With the Program bidir hint it passes.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-19T12:09:58.000+01:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-19T12:21:43.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/3c49b012610a5518b7448175018631eb2658f05e"},"pipeline":{"id":24134966,"iid":1514,"project_id":6138686,"sha":"3c49b012610a5518b7448175018631eb2658f05e","ref":"pr-6218","status":"failed","source":"push","created_at":"2018-06-19T11:22:18.938Z","updated_at":"2018-06-19T11:30:44.673Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24134966"},"web_url":"https://gitlab.com/coq/coq/-/jobs/75871060","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":75871059,"status":"skipped","stage":"test","name":"ci-color","ref":"pr-6218","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-19T11:22:19.427Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"3c49b012610a5518b7448175018631eb2658f05e","short_id":"3c49b012","created_at":"2018-06-19T12:21:43.000+01:00","parent_ids":["981864d47efca1d42f43dc5b7c5439638a86f315"],"title":"Fix #5197, handling of algebraic universes","message":"Fix #5197, handling of algebraic universes\n\nThey were allowed to stay in terms in some cases. We now ensure that if\nan evar is defined as e.g. fun x => Type@{foo}, foo is properly\nrefreshed to be non-algebraic as it could otherwise appear in the term\nand break the invariant.\n\nAlso cleanup the implementation of refresh_universes to avoid using a\nmutable reference and simply rely on the Constr.map smartmap idiom\ninstead.\n\nThis might have compatibility issues, e.g. in HoTT where maybe more\nnon-algebraic proxy universes could be generated, we'll see.\n\nFor the bug report proper, there is a lack of bidirectional\ntype-checking that makes the initial definition fail (there's a\nnon-canonical choice of dependency if we don't consider the typing\nconstraint). With the Program bidir hint it passes.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-19T12:09:58.000+01:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-19T12:21:43.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/3c49b012610a5518b7448175018631eb2658f05e"},"pipeline":{"id":24134966,"iid":1514,"project_id":6138686,"sha":"3c49b012610a5518b7448175018631eb2658f05e","ref":"pr-6218","status":"failed","source":"push","created_at":"2018-06-19T11:22:18.938Z","updated_at":"2018-06-19T11:30:44.673Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24134966"},"web_url":"https://gitlab.com/coq/coq/-/jobs/75871059","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":75871058,"status":"skipped","stage":"test","name":"ci-bignums","ref":"pr-6218","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-19T11:22:19.405Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"3c49b012610a5518b7448175018631eb2658f05e","short_id":"3c49b012","created_at":"2018-06-19T12:21:43.000+01:00","parent_ids":["981864d47efca1d42f43dc5b7c5439638a86f315"],"title":"Fix #5197, handling of algebraic universes","message":"Fix #5197, handling of algebraic universes\n\nThey were allowed to stay in terms in some cases. We now ensure that if\nan evar is defined as e.g. fun x => Type@{foo}, foo is properly\nrefreshed to be non-algebraic as it could otherwise appear in the term\nand break the invariant.\n\nAlso cleanup the implementation of refresh_universes to avoid using a\nmutable reference and simply rely on the Constr.map smartmap idiom\ninstead.\n\nThis might have compatibility issues, e.g. in HoTT where maybe more\nnon-algebraic proxy universes could be generated, we'll see.\n\nFor the bug report proper, there is a lack of bidirectional\ntype-checking that makes the initial definition fail (there's a\nnon-canonical choice of dependency if we don't consider the typing\nconstraint). With the Program bidir hint it passes.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-19T12:09:58.000+01:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-19T12:21:43.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/3c49b012610a5518b7448175018631eb2658f05e"},"pipeline":{"id":24134966,"iid":1514,"project_id":6138686,"sha":"3c49b012610a5518b7448175018631eb2658f05e","ref":"pr-6218","status":"failed","source":"push","created_at":"2018-06-19T11:22:18.938Z","updated_at":"2018-06-19T11:30:44.673Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24134966"},"web_url":"https://gitlab.com/coq/coq/-/jobs/75871058","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":75871057,"status":"skipped","stage":"test","name":"validate:edge+flambda","ref":"pr-6218","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-19T11:22:19.382Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"3c49b012610a5518b7448175018631eb2658f05e","short_id":"3c49b012","created_at":"2018-06-19T12:21:43.000+01:00","parent_ids":["981864d47efca1d42f43dc5b7c5439638a86f315"],"title":"Fix #5197, handling of algebraic universes","message":"Fix #5197, handling of algebraic universes\n\nThey were allowed to stay in terms in some cases. We now ensure that if\nan evar is defined as e.g. fun x => Type@{foo}, foo is properly\nrefreshed to be non-algebraic as it could otherwise appear in the term\nand break the invariant.\n\nAlso cleanup the implementation of refresh_universes to avoid using a\nmutable reference and simply rely on the Constr.map smartmap idiom\ninstead.\n\nThis might have compatibility issues, e.g. in HoTT where maybe more\nnon-algebraic proxy universes could be generated, we'll see.\n\nFor the bug report proper, there is a lack of bidirectional\ntype-checking that makes the initial definition fail (there's a\nnon-canonical choice of dependency if we don't consider the typing\nconstraint). With the Program bidir hint it passes.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-19T12:09:58.000+01:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-19T12:21:43.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/3c49b012610a5518b7448175018631eb2658f05e"},"pipeline":{"id":24134966,"iid":1514,"project_id":6138686,"sha":"3c49b012610a5518b7448175018631eb2658f05e","ref":"pr-6218","status":"failed","source":"push","created_at":"2018-06-19T11:22:18.938Z","updated_at":"2018-06-19T11:30:44.673Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24134966"},"web_url":"https://gitlab.com/coq/coq/-/jobs/75871057","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":75871056,"status":"skipped","stage":"test","name":"validate:edge","ref":"pr-6218","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-19T11:22:19.359Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"3c49b012610a5518b7448175018631eb2658f05e","short_id":"3c49b012","created_at":"2018-06-19T12:21:43.000+01:00","parent_ids":["981864d47efca1d42f43dc5b7c5439638a86f315"],"title":"Fix #5197, handling of algebraic universes","message":"Fix #5197, handling of algebraic universes\n\nThey were allowed to stay in terms in some cases. We now ensure that if\nan evar is defined as e.g. fun x => Type@{foo}, foo is properly\nrefreshed to be non-algebraic as it could otherwise appear in the term\nand break the invariant.\n\nAlso cleanup the implementation of refresh_universes to avoid using a\nmutable reference and simply rely on the Constr.map smartmap idiom\ninstead.\n\nThis might have compatibility issues, e.g. in HoTT where maybe more\nnon-algebraic proxy universes could be generated, we'll see.\n\nFor the bug report proper, there is a lack of bidirectional\ntype-checking that makes the initial definition fail (there's a\nnon-canonical choice of dependency if we don't consider the typing\nconstraint). With the Program bidir hint it passes.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-19T12:09:58.000+01:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-19T12:21:43.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/3c49b012610a5518b7448175018631eb2658f05e"},"pipeline":{"id":24134966,"iid":1514,"project_id":6138686,"sha":"3c49b012610a5518b7448175018631eb2658f05e","ref":"pr-6218","status":"failed","source":"push","created_at":"2018-06-19T11:22:18.938Z","updated_at":"2018-06-19T11:30:44.673Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24134966"},"web_url":"https://gitlab.com/coq/coq/-/jobs/75871056","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":75871055,"status":"skipped","stage":"test","name":"validate:base+32bit","ref":"pr-6218","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-19T11:22:19.337Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"3c49b012610a5518b7448175018631eb2658f05e","short_id":"3c49b012","created_at":"2018-06-19T12:21:43.000+01:00","parent_ids":["981864d47efca1d42f43dc5b7c5439638a86f315"],"title":"Fix #5197, handling of algebraic universes","message":"Fix #5197, handling of algebraic universes\n\nThey were allowed to stay in terms in some cases. We now ensure that if\nan evar is defined as e.g. fun x => Type@{foo}, foo is properly\nrefreshed to be non-algebraic as it could otherwise appear in the term\nand break the invariant.\n\nAlso cleanup the implementation of refresh_universes to avoid using a\nmutable reference and simply rely on the Constr.map smartmap idiom\ninstead.\n\nThis might have compatibility issues, e.g. in HoTT where maybe more\nnon-algebraic proxy universes could be generated, we'll see.\n\nFor the bug report proper, there is a lack of bidirectional\ntype-checking that makes the initial definition fail (there's a\nnon-canonical choice of dependency if we don't consider the typing\nconstraint). With the Program bidir hint it passes.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-19T12:09:58.000+01:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-19T12:21:43.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/3c49b012610a5518b7448175018631eb2658f05e"},"pipeline":{"id":24134966,"iid":1514,"project_id":6138686,"sha":"3c49b012610a5518b7448175018631eb2658f05e","ref":"pr-6218","status":"failed","source":"push","created_at":"2018-06-19T11:22:18.938Z","updated_at":"2018-06-19T11:30:44.673Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24134966"},"web_url":"https://gitlab.com/coq/coq/-/jobs/75871055","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":75871054,"status":"skipped","stage":"test","name":"validate:base","ref":"pr-6218","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-19T11:22:19.314Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"3c49b012610a5518b7448175018631eb2658f05e","short_id":"3c49b012","created_at":"2018-06-19T12:21:43.000+01:00","parent_ids":["981864d47efca1d42f43dc5b7c5439638a86f315"],"title":"Fix #5197, handling of algebraic universes","message":"Fix #5197, handling of algebraic universes\n\nThey were allowed to stay in terms in some cases. We now ensure that if\nan evar is defined as e.g. fun x => Type@{foo}, foo is properly\nrefreshed to be non-algebraic as it could otherwise appear in the term\nand break the invariant.\n\nAlso cleanup the implementation of refresh_universes to avoid using a\nmutable reference and simply rely on the Constr.map smartmap idiom\ninstead.\n\nThis might have compatibility issues, e.g. in HoTT where maybe more\nnon-algebraic proxy universes could be generated, we'll see.\n\nFor the bug report proper, there is a lack of bidirectional\ntype-checking that makes the initial definition fail (there's a\nnon-canonical choice of dependency if we don't consider the typing\nconstraint). With the Program bidir hint it passes.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-19T12:09:58.000+01:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-19T12:21:43.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/3c49b012610a5518b7448175018631eb2658f05e"},"pipeline":{"id":24134966,"iid":1514,"project_id":6138686,"sha":"3c49b012610a5518b7448175018631eb2658f05e","ref":"pr-6218","status":"failed","source":"push","created_at":"2018-06-19T11:22:18.938Z","updated_at":"2018-06-19T11:30:44.673Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24134966"},"web_url":"https://gitlab.com/coq/coq/-/jobs/75871054","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":75871053,"status":"skipped","stage":"test","name":"test-suite:edge+flambda","ref":"pr-6218","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-19T11:22:19.291Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"3c49b012610a5518b7448175018631eb2658f05e","short_id":"3c49b012","created_at":"2018-06-19T12:21:43.000+01:00","parent_ids":["981864d47efca1d42f43dc5b7c5439638a86f315"],"title":"Fix #5197, handling of algebraic universes","message":"Fix #5197, handling of algebraic universes\n\nThey were allowed to stay in terms in some cases. We now ensure that if\nan evar is defined as e.g. fun x => Type@{foo}, foo is properly\nrefreshed to be non-algebraic as it could otherwise appear in the term\nand break the invariant.\n\nAlso cleanup the implementation of refresh_universes to avoid using a\nmutable reference and simply rely on the Constr.map smartmap idiom\ninstead.\n\nThis might have compatibility issues, e.g. in HoTT where maybe more\nnon-algebraic proxy universes could be generated, we'll see.\n\nFor the bug report proper, there is a lack of bidirectional\ntype-checking that makes the initial definition fail (there's a\nnon-canonical choice of dependency if we don't consider the typing\nconstraint). With the Program bidir hint it passes.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-19T12:09:58.000+01:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-19T12:21:43.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/3c49b012610a5518b7448175018631eb2658f05e"},"pipeline":{"id":24134966,"iid":1514,"project_id":6138686,"sha":"3c49b012610a5518b7448175018631eb2658f05e","ref":"pr-6218","status":"failed","source":"push","created_at":"2018-06-19T11:22:18.938Z","updated_at":"2018-06-19T11:30:44.673Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24134966"},"web_url":"https://gitlab.com/coq/coq/-/jobs/75871053","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":75871052,"status":"skipped","stage":"test","name":"test-suite:edge","ref":"pr-6218","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-19T11:22:19.269Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"3c49b012610a5518b7448175018631eb2658f05e","short_id":"3c49b012","created_at":"2018-06-19T12:21:43.000+01:00","parent_ids":["981864d47efca1d42f43dc5b7c5439638a86f315"],"title":"Fix #5197, handling of algebraic universes","message":"Fix #5197, handling of algebraic universes\n\nThey were allowed to stay in terms in some cases. We now ensure that if\nan evar is defined as e.g. fun x => Type@{foo}, foo is properly\nrefreshed to be non-algebraic as it could otherwise appear in the term\nand break the invariant.\n\nAlso cleanup the implementation of refresh_universes to avoid using a\nmutable reference and simply rely on the Constr.map smartmap idiom\ninstead.\n\nThis might have compatibility issues, e.g. in HoTT where maybe more\nnon-algebraic proxy universes could be generated, we'll see.\n\nFor the bug report proper, there is a lack of bidirectional\ntype-checking that makes the initial definition fail (there's a\nnon-canonical choice of dependency if we don't consider the typing\nconstraint). With the Program bidir hint it passes.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-19T12:09:58.000+01:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-19T12:21:43.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/3c49b012610a5518b7448175018631eb2658f05e"},"pipeline":{"id":24134966,"iid":1514,"project_id":6138686,"sha":"3c49b012610a5518b7448175018631eb2658f05e","ref":"pr-6218","status":"failed","source":"push","created_at":"2018-06-19T11:22:18.938Z","updated_at":"2018-06-19T11:30:44.673Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24134966"},"web_url":"https://gitlab.com/coq/coq/-/jobs/75871052","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":75871051,"status":"skipped","stage":"test","name":"test-suite:base+32bit","ref":"pr-6218","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-19T11:22:19.243Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"3c49b012610a5518b7448175018631eb2658f05e","short_id":"3c49b012","created_at":"2018-06-19T12:21:43.000+01:00","parent_ids":["981864d47efca1d42f43dc5b7c5439638a86f315"],"title":"Fix #5197, handling of algebraic universes","message":"Fix #5197, handling of algebraic universes\n\nThey were allowed to stay in terms in some cases. We now ensure that if\nan evar is defined as e.g. fun x => Type@{foo}, foo is properly\nrefreshed to be non-algebraic as it could otherwise appear in the term\nand break the invariant.\n\nAlso cleanup the implementation of refresh_universes to avoid using a\nmutable reference and simply rely on the Constr.map smartmap idiom\ninstead.\n\nThis might have compatibility issues, e.g. in HoTT where maybe more\nnon-algebraic proxy universes could be generated, we'll see.\n\nFor the bug report proper, there is a lack of bidirectional\ntype-checking that makes the initial definition fail (there's a\nnon-canonical choice of dependency if we don't consider the typing\nconstraint). With the Program bidir hint it passes.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-19T12:09:58.000+01:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-19T12:21:43.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/3c49b012610a5518b7448175018631eb2658f05e"},"pipeline":{"id":24134966,"iid":1514,"project_id":6138686,"sha":"3c49b012610a5518b7448175018631eb2658f05e","ref":"pr-6218","status":"failed","source":"push","created_at":"2018-06-19T11:22:18.938Z","updated_at":"2018-06-19T11:30:44.673Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24134966"},"web_url":"https://gitlab.com/coq/coq/-/jobs/75871051","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":75871050,"status":"skipped","stage":"test","name":"test-suite:base","ref":"pr-6218","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-19T11:22:19.216Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"3c49b012610a5518b7448175018631eb2658f05e","short_id":"3c49b012","created_at":"2018-06-19T12:21:43.000+01:00","parent_ids":["981864d47efca1d42f43dc5b7c5439638a86f315"],"title":"Fix #5197, handling of algebraic universes","message":"Fix #5197, handling of algebraic universes\n\nThey were allowed to stay in terms in some cases. We now ensure that if\nan evar is defined as e.g. fun x => Type@{foo}, foo is properly\nrefreshed to be non-algebraic as it could otherwise appear in the term\nand break the invariant.\n\nAlso cleanup the implementation of refresh_universes to avoid using a\nmutable reference and simply rely on the Constr.map smartmap idiom\ninstead.\n\nThis might have compatibility issues, e.g. in HoTT where maybe more\nnon-algebraic proxy universes could be generated, we'll see.\n\nFor the bug report proper, there is a lack of bidirectional\ntype-checking that makes the initial definition fail (there's a\nnon-canonical choice of dependency if we don't consider the typing\nconstraint). With the Program bidir hint it passes.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-19T12:09:58.000+01:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-19T12:21:43.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/3c49b012610a5518b7448175018631eb2658f05e"},"pipeline":{"id":24134966,"iid":1514,"project_id":6138686,"sha":"3c49b012610a5518b7448175018631eb2658f05e","ref":"pr-6218","status":"failed","source":"push","created_at":"2018-06-19T11:22:18.938Z","updated_at":"2018-06-19T11:30:44.673Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24134966"},"web_url":"https://gitlab.com/coq/coq/-/jobs/75871050","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":75871049,"status":"skipped","stage":"test","name":"documentation","ref":"pr-6218","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-19T11:22:19.188Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"3c49b012610a5518b7448175018631eb2658f05e","short_id":"3c49b012","created_at":"2018-06-19T12:21:43.000+01:00","parent_ids":["981864d47efca1d42f43dc5b7c5439638a86f315"],"title":"Fix #5197, handling of algebraic universes","message":"Fix #5197, handling of algebraic universes\n\nThey were allowed to stay in terms in some cases. We now ensure that if\nan evar is defined as e.g. fun x => Type@{foo}, foo is properly\nrefreshed to be non-algebraic as it could otherwise appear in the term\nand break the invariant.\n\nAlso cleanup the implementation of refresh_universes to avoid using a\nmutable reference and simply rely on the Constr.map smartmap idiom\ninstead.\n\nThis might have compatibility issues, e.g. in HoTT where maybe more\nnon-algebraic proxy universes could be generated, we'll see.\n\nFor the bug report proper, there is a lack of bidirectional\ntype-checking that makes the initial definition fail (there's a\nnon-canonical choice of dependency if we don't consider the typing\nconstraint). With the Program bidir hint it passes.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-19T12:09:58.000+01:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-19T12:21:43.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/3c49b012610a5518b7448175018631eb2658f05e"},"pipeline":{"id":24134966,"iid":1514,"project_id":6138686,"sha":"3c49b012610a5518b7448175018631eb2658f05e","ref":"pr-6218","status":"failed","source":"push","created_at":"2018-06-19T11:22:18.938Z","updated_at":"2018-06-19T11:30:44.673Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24134966"},"web_url":"https://gitlab.com/coq/coq/-/jobs/75871049","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":75871048,"status":"skipped","stage":"test","name":"warnings:edge","ref":"pr-6218","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-19T11:22:19.158Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"3c49b012610a5518b7448175018631eb2658f05e","short_id":"3c49b012","created_at":"2018-06-19T12:21:43.000+01:00","parent_ids":["981864d47efca1d42f43dc5b7c5439638a86f315"],"title":"Fix #5197, handling of algebraic universes","message":"Fix #5197, handling of algebraic universes\n\nThey were allowed to stay in terms in some cases. We now ensure that if\nan evar is defined as e.g. fun x => Type@{foo}, foo is properly\nrefreshed to be non-algebraic as it could otherwise appear in the term\nand break the invariant.\n\nAlso cleanup the implementation of refresh_universes to avoid using a\nmutable reference and simply rely on the Constr.map smartmap idiom\ninstead.\n\nThis might have compatibility issues, e.g. in HoTT where maybe more\nnon-algebraic proxy universes could be generated, we'll see.\n\nFor the bug report proper, there is a lack of bidirectional\ntype-checking that makes the initial definition fail (there's a\nnon-canonical choice of dependency if we don't consider the typing\nconstraint). With the Program bidir hint it passes.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-19T12:09:58.000+01:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-19T12:21:43.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/3c49b012610a5518b7448175018631eb2658f05e"},"pipeline":{"id":24134966,"iid":1514,"project_id":6138686,"sha":"3c49b012610a5518b7448175018631eb2658f05e","ref":"pr-6218","status":"failed","source":"push","created_at":"2018-06-19T11:22:18.938Z","updated_at":"2018-06-19T11:30:44.673Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24134966"},"web_url":"https://gitlab.com/coq/coq/-/jobs/75871048","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":75871047,"status":"skipped","stage":"test","name":"warnings:base","ref":"pr-6218","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-19T11:22:19.134Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"3c49b012610a5518b7448175018631eb2658f05e","short_id":"3c49b012","created_at":"2018-06-19T12:21:43.000+01:00","parent_ids":["981864d47efca1d42f43dc5b7c5439638a86f315"],"title":"Fix #5197, handling of algebraic universes","message":"Fix #5197, handling of algebraic universes\n\nThey were allowed to stay in terms in some cases. We now ensure that if\nan evar is defined as e.g. fun x => Type@{foo}, foo is properly\nrefreshed to be non-algebraic as it could otherwise appear in the term\nand break the invariant.\n\nAlso cleanup the implementation of refresh_universes to avoid using a\nmutable reference and simply rely on the Constr.map smartmap idiom\ninstead.\n\nThis might have compatibility issues, e.g. in HoTT where maybe more\nnon-algebraic proxy universes could be generated, we'll see.\n\nFor the bug report proper, there is a lack of bidirectional\ntype-checking that makes the initial definition fail (there's a\nnon-canonical choice of dependency if we don't consider the typing\nconstraint). With the Program bidir hint it passes.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-19T12:09:58.000+01:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-19T12:21:43.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/3c49b012610a5518b7448175018631eb2658f05e"},"pipeline":{"id":24134966,"iid":1514,"project_id":6138686,"sha":"3c49b012610a5518b7448175018631eb2658f05e","ref":"pr-6218","status":"failed","source":"push","created_at":"2018-06-19T11:22:18.938Z","updated_at":"2018-06-19T11:30:44.673Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24134966"},"web_url":"https://gitlab.com/coq/coq/-/jobs/75871047","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":75871046,"status":"skipped","stage":"test","name":"windows32","ref":"pr-6218","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-19T11:22:19.104Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"3c49b012610a5518b7448175018631eb2658f05e","short_id":"3c49b012","created_at":"2018-06-19T12:21:43.000+01:00","parent_ids":["981864d47efca1d42f43dc5b7c5439638a86f315"],"title":"Fix #5197, handling of algebraic universes","message":"Fix #5197, handling of algebraic universes\n\nThey were allowed to stay in terms in some cases. We now ensure that if\nan evar is defined as e.g. fun x => Type@{foo}, foo is properly\nrefreshed to be non-algebraic as it could otherwise appear in the term\nand break the invariant.\n\nAlso cleanup the implementation of refresh_universes to avoid using a\nmutable reference and simply rely on the Constr.map smartmap idiom\ninstead.\n\nThis might have compatibility issues, e.g. in HoTT where maybe more\nnon-algebraic proxy universes could be generated, we'll see.\n\nFor the bug report proper, there is a lack of bidirectional\ntype-checking that makes the initial definition fail (there's a\nnon-canonical choice of dependency if we don't consider the typing\nconstraint). With the Program bidir hint it passes.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-19T12:09:58.000+01:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-19T12:21:43.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/3c49b012610a5518b7448175018631eb2658f05e"},"pipeline":{"id":24134966,"iid":1514,"project_id":6138686,"sha":"3c49b012610a5518b7448175018631eb2658f05e","ref":"pr-6218","status":"failed","source":"push","created_at":"2018-06-19T11:22:18.938Z","updated_at":"2018-06-19T11:30:44.673Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24134966"},"web_url":"https://gitlab.com/coq/coq/-/jobs/75871046","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":["windows"]}
{"id":75871045,"status":"skipped","stage":"test","name":"windows64","ref":"pr-6218","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-19T11:22:19.066Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"3c49b012610a5518b7448175018631eb2658f05e","short_id":"3c49b012","created_at":"2018-06-19T12:21:43.000+01:00","parent_ids":["981864d47efca1d42f43dc5b7c5439638a86f315"],"title":"Fix #5197, handling of algebraic universes","message":"Fix #5197, handling of algebraic universes\n\nThey were allowed to stay in terms in some cases. We now ensure that if\nan evar is defined as e.g. fun x => Type@{foo}, foo is properly\nrefreshed to be non-algebraic as it could otherwise appear in the term\nand break the invariant.\n\nAlso cleanup the implementation of refresh_universes to avoid using a\nmutable reference and simply rely on the Constr.map smartmap idiom\ninstead.\n\nThis might have compatibility issues, e.g. in HoTT where maybe more\nnon-algebraic proxy universes could be generated, we'll see.\n\nFor the bug report proper, there is a lack of bidirectional\ntype-checking that makes the initial definition fail (there's a\nnon-canonical choice of dependency if we don't consider the typing\nconstraint). With the Program bidir hint it passes.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-19T12:09:58.000+01:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-19T12:21:43.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/3c49b012610a5518b7448175018631eb2658f05e"},"pipeline":{"id":24134966,"iid":1514,"project_id":6138686,"sha":"3c49b012610a5518b7448175018631eb2658f05e","ref":"pr-6218","status":"failed","source":"push","created_at":"2018-06-19T11:22:18.938Z","updated_at":"2018-06-19T11:30:44.673Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24134966"},"web_url":"https://gitlab.com/coq/coq/-/jobs/75871045","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":["windows"]}
