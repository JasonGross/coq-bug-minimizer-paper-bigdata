{"id":117156756,"status":"success","stage":"test","name":"ci-vst","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-06T17:32:30.942Z","started_at":"2018-11-06T18:04:50.984Z","finished_at":"2018-11-06T19:19:13.105Z","duration":4462.120353,"queued_duration":57.643227,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"f84db466eb7c2c764e0d9dc6789dcc795eecc273","short_id":"f84db466","created_at":"2018-11-06T18:32:05.000+01:00","parent_ids":["f6033667bd9b8069308d4bcba420c4ce0771e44f"],"title":"ssr: extended intro patterns","message":"ssr: extended intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-11-06T18:32:05.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/f84db466eb7c2c764e0d9dc6789dcc795eecc273"},"pipeline":{"id":35633592,"iid":4995,"project_id":6138686,"sha":"f84db466eb7c2c764e0d9dc6789dcc795eecc273","ref":"pr-6705","status":"success","source":"push","created_at":"2018-11-06T17:32:29.744Z","updated_at":"2018-11-06T19:35:14.548Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/35633592"},"web_url":"https://gitlab.com/coq/coq/-/jobs/117156756","artifacts":[{"file_type":"trace","size":224255,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":117156755,"status":"success","stage":"test","name":"ci-unimath","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-06T17:32:30.915Z","started_at":"2018-11-06T18:04:46.697Z","finished_at":"2018-11-06T18:57:13.659Z","duration":3146.961474,"queued_duration":53.264621,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"f84db466eb7c2c764e0d9dc6789dcc795eecc273","short_id":"f84db466","created_at":"2018-11-06T18:32:05.000+01:00","parent_ids":["f6033667bd9b8069308d4bcba420c4ce0771e44f"],"title":"ssr: extended intro patterns","message":"ssr: extended intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-11-06T18:32:05.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/f84db466eb7c2c764e0d9dc6789dcc795eecc273"},"pipeline":{"id":35633592,"iid":4995,"project_id":6138686,"sha":"f84db466eb7c2c764e0d9dc6789dcc795eecc273","ref":"pr-6705","status":"success","source":"push","created_at":"2018-11-06T17:32:29.744Z","updated_at":"2018-11-06T19:35:14.548Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/35633592"},"web_url":"https://gitlab.com/coq/coq/-/jobs/117156755","artifacts":[{"file_type":"trace","size":163765,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":117156754,"status":"success","stage":"test","name":"ci-sf","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-06T17:32:30.892Z","started_at":"2018-11-06T18:04:42.929Z","finished_at":"2018-11-06T18:22:00.767Z","duration":1037.838172,"queued_duration":49.437926,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"f84db466eb7c2c764e0d9dc6789dcc795eecc273","short_id":"f84db466","created_at":"2018-11-06T18:32:05.000+01:00","parent_ids":["f6033667bd9b8069308d4bcba420c4ce0771e44f"],"title":"ssr: extended intro patterns","message":"ssr: extended intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-11-06T18:32:05.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/f84db466eb7c2c764e0d9dc6789dcc795eecc273"},"pipeline":{"id":35633592,"iid":4995,"project_id":6138686,"sha":"f84db466eb7c2c764e0d9dc6789dcc795eecc273","ref":"pr-6705","status":"success","source":"push","created_at":"2018-11-06T17:32:29.744Z","updated_at":"2018-11-06T19:35:14.548Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/35633592"},"web_url":"https://gitlab.com/coq/coq/-/jobs/117156754","artifacts":[{"file_type":"trace","size":271387,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":117156753,"status":"success","stage":"test","name":"ci-quickchick","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-06T17:32:30.867Z","started_at":"2018-11-06T18:04:36.884Z","finished_at":"2018-11-06T18:22:12.351Z","duration":1055.466483,"queued_duration":43.350836,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"f84db466eb7c2c764e0d9dc6789dcc795eecc273","short_id":"f84db466","created_at":"2018-11-06T18:32:05.000+01:00","parent_ids":["f6033667bd9b8069308d4bcba420c4ce0771e44f"],"title":"ssr: extended intro patterns","message":"ssr: extended intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-11-06T18:32:05.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/f84db466eb7c2c764e0d9dc6789dcc795eecc273"},"pipeline":{"id":35633592,"iid":4995,"project_id":6138686,"sha":"f84db466eb7c2c764e0d9dc6789dcc795eecc273","ref":"pr-6705","status":"success","source":"push","created_at":"2018-11-06T17:32:29.744Z","updated_at":"2018-11-06T19:35:14.548Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/35633592"},"web_url":"https://gitlab.com/coq/coq/-/jobs/117156753","artifacts":[{"file_type":"trace","size":270266,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":117156752,"status":"success","stage":"test","name":"ci-plugin-tutorial","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-06T17:32:30.842Z","started_at":"2018-11-06T18:04:36.810Z","finished_at":"2018-11-06T18:19:04.659Z","duration":867.848999,"queued_duration":43.237859,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"f84db466eb7c2c764e0d9dc6789dcc795eecc273","short_id":"f84db466","created_at":"2018-11-06T18:32:05.000+01:00","parent_ids":["f6033667bd9b8069308d4bcba420c4ce0771e44f"],"title":"ssr: extended intro patterns","message":"ssr: extended intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-11-06T18:32:05.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/f84db466eb7c2c764e0d9dc6789dcc795eecc273"},"pipeline":{"id":35633592,"iid":4995,"project_id":6138686,"sha":"f84db466eb7c2c764e0d9dc6789dcc795eecc273","ref":"pr-6705","status":"success","source":"push","created_at":"2018-11-06T17:32:29.744Z","updated_at":"2018-11-06T19:35:14.548Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/35633592"},"web_url":"https://gitlab.com/coq/coq/-/jobs/117156752","artifacts":[{"file_type":"trace","size":37385,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":117156751,"status":"success","stage":"test","name":"ci-pidetop","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-06T17:32:30.817Z","started_at":"2018-11-06T18:04:35.905Z","finished_at":"2018-11-06T18:18:14.079Z","duration":818.173668,"queued_duration":42.299128,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"f84db466eb7c2c764e0d9dc6789dcc795eecc273","short_id":"f84db466","created_at":"2018-11-06T18:32:05.000+01:00","parent_ids":["f6033667bd9b8069308d4bcba420c4ce0771e44f"],"title":"ssr: extended intro patterns","message":"ssr: extended intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-11-06T18:32:05.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/f84db466eb7c2c764e0d9dc6789dcc795eecc273"},"pipeline":{"id":35633592,"iid":4995,"project_id":6138686,"sha":"f84db466eb7c2c764e0d9dc6789dcc795eecc273","ref":"pr-6705","status":"success","source":"push","created_at":"2018-11-06T17:32:29.744Z","updated_at":"2018-11-06T19:35:14.548Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/35633592"},"web_url":"https://gitlab.com/coq/coq/-/jobs/117156751","artifacts":[{"file_type":"trace","size":30451,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":117156750,"status":"success","stage":"test","name":"ci-mtac2","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-06T17:32:30.792Z","started_at":"2018-11-06T18:04:35.125Z","finished_at":"2018-11-06T18:21:28.672Z","duration":1013.546956,"queued_duration":41.483224,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"f84db466eb7c2c764e0d9dc6789dcc795eecc273","short_id":"f84db466","created_at":"2018-11-06T18:32:05.000+01:00","parent_ids":["f6033667bd9b8069308d4bcba420c4ce0771e44f"],"title":"ssr: extended intro patterns","message":"ssr: extended intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-11-06T18:32:05.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/f84db466eb7c2c764e0d9dc6789dcc795eecc273"},"pipeline":{"id":35633592,"iid":4995,"project_id":6138686,"sha":"f84db466eb7c2c764e0d9dc6789dcc795eecc273","ref":"pr-6705","status":"success","source":"push","created_at":"2018-11-06T17:32:29.744Z","updated_at":"2018-11-06T19:35:14.548Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/35633592"},"web_url":"https://gitlab.com/coq/coq/-/jobs/117156750","artifacts":[{"file_type":"trace","size":173885,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":117156749,"status":"success","stage":"test","name":"ci-math-comp","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-06T17:32:30.766Z","started_at":"2018-11-06T18:04:34.057Z","finished_at":"2018-11-06T19:12:26.414Z","duration":4072.35626,"queued_duration":40.386184,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"f84db466eb7c2c764e0d9dc6789dcc795eecc273","short_id":"f84db466","created_at":"2018-11-06T18:32:05.000+01:00","parent_ids":["f6033667bd9b8069308d4bcba420c4ce0771e44f"],"title":"ssr: extended intro patterns","message":"ssr: extended intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-11-06T18:32:05.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/f84db466eb7c2c764e0d9dc6789dcc795eecc273"},"pipeline":{"id":35633592,"iid":4995,"project_id":6138686,"sha":"f84db466eb7c2c764e0d9dc6789dcc795eecc273","ref":"pr-6705","status":"success","source":"push","created_at":"2018-11-06T17:32:29.744Z","updated_at":"2018-11-06T19:35:14.548Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/35633592"},"web_url":"https://gitlab.com/coq/coq/-/jobs/117156749","artifacts":[{"file_type":"trace","size":363787,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":117156748,"status":"success","stage":"test","name":"ci-ltac2","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-06T17:32:30.741Z","started_at":"2018-11-06T18:04:33.806Z","finished_at":"2018-11-06T18:16:14.897Z","duration":701.09126,"queued_duration":40.089714,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"f84db466eb7c2c764e0d9dc6789dcc795eecc273","short_id":"f84db466","created_at":"2018-11-06T18:32:05.000+01:00","parent_ids":["f6033667bd9b8069308d4bcba420c4ce0771e44f"],"title":"ssr: extended intro patterns","message":"ssr: extended intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-11-06T18:32:05.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/f84db466eb7c2c764e0d9dc6789dcc795eecc273"},"pipeline":{"id":35633592,"iid":4995,"project_id":6138686,"sha":"f84db466eb7c2c764e0d9dc6789dcc795eecc273","ref":"pr-6705","status":"success","source":"push","created_at":"2018-11-06T17:32:29.744Z","updated_at":"2018-11-06T19:35:14.548Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/35633592"},"web_url":"https://gitlab.com/coq/coq/-/jobs/117156748","artifacts":[{"file_type":"trace","size":41666,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":117156747,"status":"success","stage":"test","name":"ci-iris-lambda-rust","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-06T17:32:30.718Z","started_at":"2018-11-06T18:04:33.503Z","finished_at":"2018-11-06T19:35:14.391Z","duration":5440.888887,"queued_duration":39.743652,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"f84db466eb7c2c764e0d9dc6789dcc795eecc273","short_id":"f84db466","created_at":"2018-11-06T18:32:05.000+01:00","parent_ids":["f6033667bd9b8069308d4bcba420c4ce0771e44f"],"title":"ssr: extended intro patterns","message":"ssr: extended intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-11-06T18:32:05.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/f84db466eb7c2c764e0d9dc6789dcc795eecc273"},"pipeline":{"id":35633592,"iid":4995,"project_id":6138686,"sha":"f84db466eb7c2c764e0d9dc6789dcc795eecc273","ref":"pr-6705","status":"success","source":"push","created_at":"2018-11-06T17:32:29.744Z","updated_at":"2018-11-06T19:35:14.548Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/35633592"},"web_url":"https://gitlab.com/coq/coq/-/jobs/117156747","artifacts":[{"file_type":"trace","size":294315,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":117156746,"status":"success","stage":"test","name":"ci-hott","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-06T17:32:30.696Z","started_at":"2018-11-06T18:04:33.400Z","finished_at":"2018-11-06T18:30:37.294Z","duration":1563.8943,"queued_duration":39.602953,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"f84db466eb7c2c764e0d9dc6789dcc795eecc273","short_id":"f84db466","created_at":"2018-11-06T18:32:05.000+01:00","parent_ids":["f6033667bd9b8069308d4bcba420c4ce0771e44f"],"title":"ssr: extended intro patterns","message":"ssr: extended intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-11-06T18:32:05.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/f84db466eb7c2c764e0d9dc6789dcc795eecc273"},"pipeline":{"id":35633592,"iid":4995,"project_id":6138686,"sha":"f84db466eb7c2c764e0d9dc6789dcc795eecc273","ref":"pr-6705","status":"success","source":"push","created_at":"2018-11-06T17:32:29.744Z","updated_at":"2018-11-06T19:35:14.548Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/35633592"},"web_url":"https://gitlab.com/coq/coq/-/jobs/117156746","artifacts":[{"file_type":"trace","size":97720,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":117156745,"status":"success","stage":"test","name":"ci-geocoq","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-06T17:32:30.672Z","started_at":"2018-11-06T18:04:33.114Z","finished_at":"2018-11-06T18:55:25.505Z","duration":3052.391088,"queued_duration":39.282856,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"f84db466eb7c2c764e0d9dc6789dcc795eecc273","short_id":"f84db466","created_at":"2018-11-06T18:32:05.000+01:00","parent_ids":["f6033667bd9b8069308d4bcba420c4ce0771e44f"],"title":"ssr: extended intro patterns","message":"ssr: extended intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-11-06T18:32:05.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/f84db466eb7c2c764e0d9dc6789dcc795eecc273"},"pipeline":{"id":35633592,"iid":4995,"project_id":6138686,"sha":"f84db466eb7c2c764e0d9dc6789dcc795eecc273","ref":"pr-6705","status":"success","source":"push","created_at":"2018-11-06T17:32:29.744Z","updated_at":"2018-11-06T19:35:14.548Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/35633592"},"web_url":"https://gitlab.com/coq/coq/-/jobs/117156745","artifacts":[{"file_type":"trace","size":341199,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":117156744,"status":"success","stage":"test","name":"ci-formal-topology","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-06T17:32:30.648Z","started_at":"2018-11-06T18:04:33.061Z","finished_at":"2018-11-06T18:57:57.406Z","duration":3204.344297,"queued_duration":39.183391,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"f84db466eb7c2c764e0d9dc6789dcc795eecc273","short_id":"f84db466","created_at":"2018-11-06T18:32:05.000+01:00","parent_ids":["f6033667bd9b8069308d4bcba420c4ce0771e44f"],"title":"ssr: extended intro patterns","message":"ssr: extended intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-11-06T18:32:05.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/f84db466eb7c2c764e0d9dc6789dcc795eecc273"},"pipeline":{"id":35633592,"iid":4995,"project_id":6138686,"sha":"f84db466eb7c2c764e0d9dc6789dcc795eecc273","ref":"pr-6705","status":"success","source":"push","created_at":"2018-11-06T17:32:29.744Z","updated_at":"2018-11-06T19:35:14.548Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/35633592"},"web_url":"https://gitlab.com/coq/coq/-/jobs/117156744","artifacts":[{"file_type":"trace","size":582915,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":117156743,"status":"success","stage":"test","name":"ci-flocq","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-06T17:32:30.625Z","started_at":"2018-11-06T18:04:32.563Z","finished_at":"2018-11-06T18:26:35.685Z","duration":1323.122403,"queued_duration":38.653248,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"f84db466eb7c2c764e0d9dc6789dcc795eecc273","short_id":"f84db466","created_at":"2018-11-06T18:32:05.000+01:00","parent_ids":["f6033667bd9b8069308d4bcba420c4ce0771e44f"],"title":"ssr: extended intro patterns","message":"ssr: extended intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-11-06T18:32:05.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/f84db466eb7c2c764e0d9dc6789dcc795eecc273"},"pipeline":{"id":35633592,"iid":4995,"project_id":6138686,"sha":"f84db466eb7c2c764e0d9dc6789dcc795eecc273","ref":"pr-6705","status":"success","source":"push","created_at":"2018-11-06T17:32:29.744Z","updated_at":"2018-11-06T19:35:14.548Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/35633592"},"web_url":"https://gitlab.com/coq/coq/-/jobs/117156743","artifacts":[{"file_type":"trace","size":35266,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":117156742,"status":"success","stage":"test","name":"ci-fiat-parsers","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-06T17:32:30.602Z","started_at":"2018-11-06T18:04:32.438Z","finished_at":"2018-11-06T18:41:01.996Z","duration":2189.558113,"queued_duration":38.494287,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"f84db466eb7c2c764e0d9dc6789dcc795eecc273","short_id":"f84db466","created_at":"2018-11-06T18:32:05.000+01:00","parent_ids":["f6033667bd9b8069308d4bcba420c4ce0771e44f"],"title":"ssr: extended intro patterns","message":"ssr: extended intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-11-06T18:32:05.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/f84db466eb7c2c764e0d9dc6789dcc795eecc273"},"pipeline":{"id":35633592,"iid":4995,"project_id":6138686,"sha":"f84db466eb7c2c764e0d9dc6789dcc795eecc273","ref":"pr-6705","status":"success","source":"push","created_at":"2018-11-06T17:32:29.744Z","updated_at":"2018-11-06T19:35:14.548Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/35633592"},"web_url":"https://gitlab.com/coq/coq/-/jobs/117156742","artifacts":[{"file_type":"trace","size":239251,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":117156741,"status":"success","stage":"test","name":"ci-fiat-crypto-legacy","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-06T17:32:30.578Z","started_at":"2018-11-06T18:04:32.136Z","finished_at":"2018-11-06T19:28:18.502Z","duration":5026.366444,"queued_duration":38.142671,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"f84db466eb7c2c764e0d9dc6789dcc795eecc273","short_id":"f84db466","created_at":"2018-11-06T18:32:05.000+01:00","parent_ids":["f6033667bd9b8069308d4bcba420c4ce0771e44f"],"title":"ssr: extended intro patterns","message":"ssr: extended intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-11-06T18:32:05.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/f84db466eb7c2c764e0d9dc6789dcc795eecc273"},"pipeline":{"id":35633592,"iid":4995,"project_id":6138686,"sha":"f84db466eb7c2c764e0d9dc6789dcc795eecc273","ref":"pr-6705","status":"success","source":"push","created_at":"2018-11-06T17:32:29.744Z","updated_at":"2018-11-06T19:35:14.548Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/35633592"},"web_url":"https://gitlab.com/coq/coq/-/jobs/117156741","artifacts":[{"file_type":"trace","size":659343,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":117156740,"status":"success","stage":"test","name":"ci-fiat-crypto","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-06T17:32:30.556Z","started_at":"2018-11-06T18:04:31.795Z","finished_at":"2018-11-06T19:12:20.636Z","duration":4068.841022,"queued_duration":37.746848,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"f84db466eb7c2c764e0d9dc6789dcc795eecc273","short_id":"f84db466","created_at":"2018-11-06T18:32:05.000+01:00","parent_ids":["f6033667bd9b8069308d4bcba420c4ce0771e44f"],"title":"ssr: extended intro patterns","message":"ssr: extended intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-11-06T18:32:05.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/f84db466eb7c2c764e0d9dc6789dcc795eecc273"},"pipeline":{"id":35633592,"iid":4995,"project_id":6138686,"sha":"f84db466eb7c2c764e0d9dc6789dcc795eecc273","ref":"pr-6705","status":"success","source":"push","created_at":"2018-11-06T17:32:29.744Z","updated_at":"2018-11-06T19:35:14.548Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/35633592"},"web_url":"https://gitlab.com/coq/coq/-/jobs/117156740","artifacts":[{"file_type":"trace","size":872235,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":117156739,"status":"success","stage":"test","name":"ci-fcsl-pcm","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-06T17:32:30.532Z","started_at":"2018-11-06T18:04:31.736Z","finished_at":"2018-11-06T18:24:18.646Z","duration":1186.910128,"queued_duration":37.654629,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"f84db466eb7c2c764e0d9dc6789dcc795eecc273","short_id":"f84db466","created_at":"2018-11-06T18:32:05.000+01:00","parent_ids":["f6033667bd9b8069308d4bcba420c4ce0771e44f"],"title":"ssr: extended intro patterns","message":"ssr: extended intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-11-06T18:32:05.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/f84db466eb7c2c764e0d9dc6789dcc795eecc273"},"pipeline":{"id":35633592,"iid":4995,"project_id":6138686,"sha":"f84db466eb7c2c764e0d9dc6789dcc795eecc273","ref":"pr-6705","status":"success","source":"push","created_at":"2018-11-06T17:32:29.744Z","updated_at":"2018-11-06T19:35:14.548Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/35633592"},"web_url":"https://gitlab.com/coq/coq/-/jobs/117156739","artifacts":[{"file_type":"trace","size":133306,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":117156738,"status":"success","stage":"test","name":"ci-equations","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-06T17:32:30.508Z","started_at":"2018-11-06T18:04:31.512Z","finished_at":"2018-11-06T18:20:32.730Z","duration":961.217897,"queued_duration":37.397652,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"f84db466eb7c2c764e0d9dc6789dcc795eecc273","short_id":"f84db466","created_at":"2018-11-06T18:32:05.000+01:00","parent_ids":["f6033667bd9b8069308d4bcba420c4ce0771e44f"],"title":"ssr: extended intro patterns","message":"ssr: extended intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-11-06T18:32:05.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/f84db466eb7c2c764e0d9dc6789dcc795eecc273"},"pipeline":{"id":35633592,"iid":4995,"project_id":6138686,"sha":"f84db466eb7c2c764e0d9dc6789dcc795eecc273","ref":"pr-6705","status":"success","source":"push","created_at":"2018-11-06T17:32:29.744Z","updated_at":"2018-11-06T19:35:14.548Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/35633592"},"web_url":"https://gitlab.com/coq/coq/-/jobs/117156738","artifacts":[{"file_type":"trace","size":67836,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":117156737,"status":"success","stage":"test","name":"ci-elpi","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-06T17:32:30.484Z","started_at":"2018-11-06T18:04:30.166Z","finished_at":"2018-11-06T18:22:17.009Z","duration":1066.843096,"queued_duration":36.011651,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"f84db466eb7c2c764e0d9dc6789dcc795eecc273","short_id":"f84db466","created_at":"2018-11-06T18:32:05.000+01:00","parent_ids":["f6033667bd9b8069308d4bcba420c4ce0771e44f"],"title":"ssr: extended intro patterns","message":"ssr: extended intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-11-06T18:32:05.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/f84db466eb7c2c764e0d9dc6789dcc795eecc273"},"pipeline":{"id":35633592,"iid":4995,"project_id":6138686,"sha":"f84db466eb7c2c764e0d9dc6789dcc795eecc273","ref":"pr-6705","status":"success","source":"push","created_at":"2018-11-06T17:32:29.744Z","updated_at":"2018-11-06T19:35:14.548Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/35633592"},"web_url":"https://gitlab.com/coq/coq/-/jobs/117156737","artifacts":[{"file_type":"trace","size":417406,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":117156736,"status":"success","stage":"test","name":"ci-cross-crypto","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-06T17:32:30.461Z","started_at":"2018-11-06T18:04:29.958Z","finished_at":"2018-11-06T18:57:08.325Z","duration":3158.367266,"queued_duration":35.764788,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"f84db466eb7c2c764e0d9dc6789dcc795eecc273","short_id":"f84db466","created_at":"2018-11-06T18:32:05.000+01:00","parent_ids":["f6033667bd9b8069308d4bcba420c4ce0771e44f"],"title":"ssr: extended intro patterns","message":"ssr: extended intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-11-06T18:32:05.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/f84db466eb7c2c764e0d9dc6789dcc795eecc273"},"pipeline":{"id":35633592,"iid":4995,"project_id":6138686,"sha":"f84db466eb7c2c764e0d9dc6789dcc795eecc273","ref":"pr-6705","status":"success","source":"push","created_at":"2018-11-06T17:32:29.744Z","updated_at":"2018-11-06T19:35:14.548Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/35633592"},"web_url":"https://gitlab.com/coq/coq/-/jobs/117156736","artifacts":[{"file_type":"trace","size":44821,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":117156735,"status":"success","stage":"test","name":"ci-coquelicot","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-06T17:32:30.437Z","started_at":"2018-11-06T18:04:29.483Z","finished_at":"2018-11-06T18:23:06.265Z","duration":1116.781981,"queued_duration":35.250567,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"f84db466eb7c2c764e0d9dc6789dcc795eecc273","short_id":"f84db466","created_at":"2018-11-06T18:32:05.000+01:00","parent_ids":["f6033667bd9b8069308d4bcba420c4ce0771e44f"],"title":"ssr: extended intro patterns","message":"ssr: extended intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-11-06T18:32:05.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/f84db466eb7c2c764e0d9dc6789dcc795eecc273"},"pipeline":{"id":35633592,"iid":4995,"project_id":6138686,"sha":"f84db466eb7c2c764e0d9dc6789dcc795eecc273","ref":"pr-6705","status":"success","source":"push","created_at":"2018-11-06T17:32:29.744Z","updated_at":"2018-11-06T19:35:14.548Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/35633592"},"web_url":"https://gitlab.com/coq/coq/-/jobs/117156735","artifacts":[{"file_type":"trace","size":135765,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":117156734,"status":"success","stage":"test","name":"ci-coq-dpdgraph","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-06T17:32:30.413Z","started_at":"2018-11-06T18:04:29.310Z","finished_at":"2018-11-06T18:21:33.325Z","duration":1024.015431,"queued_duration":35.037143,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"f84db466eb7c2c764e0d9dc6789dcc795eecc273","short_id":"f84db466","created_at":"2018-11-06T18:32:05.000+01:00","parent_ids":["f6033667bd9b8069308d4bcba420c4ce0771e44f"],"title":"ssr: extended intro patterns","message":"ssr: extended intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-11-06T18:32:05.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/f84db466eb7c2c764e0d9dc6789dcc795eecc273"},"pipeline":{"id":35633592,"iid":4995,"project_id":6138686,"sha":"f84db466eb7c2c764e0d9dc6789dcc795eecc273","ref":"pr-6705","status":"success","source":"push","created_at":"2018-11-06T17:32:29.744Z","updated_at":"2018-11-06T19:35:14.548Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/35633592"},"web_url":"https://gitlab.com/coq/coq/-/jobs/117156734","artifacts":[{"file_type":"trace","size":42083,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":117156733,"status":"success","stage":"test","name":"ci-compcert","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-06T17:32:30.388Z","started_at":"2018-11-06T18:04:28.688Z","finished_at":"2018-11-06T18:51:11.657Z","duration":2802.969206,"queued_duration":34.372818,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"f84db466eb7c2c764e0d9dc6789dcc795eecc273","short_id":"f84db466","created_at":"2018-11-06T18:32:05.000+01:00","parent_ids":["f6033667bd9b8069308d4bcba420c4ce0771e44f"],"title":"ssr: extended intro patterns","message":"ssr: extended intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-11-06T18:32:05.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/f84db466eb7c2c764e0d9dc6789dcc795eecc273"},"pipeline":{"id":35633592,"iid":4995,"project_id":6138686,"sha":"f84db466eb7c2c764e0d9dc6789dcc795eecc273","ref":"pr-6705","status":"success","source":"push","created_at":"2018-11-06T17:32:29.744Z","updated_at":"2018-11-06T19:35:14.548Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/35633592"},"web_url":"https://gitlab.com/coq/coq/-/jobs/117156733","artifacts":[{"file_type":"trace","size":2046887,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":117156732,"status":"success","stage":"test","name":"ci-color","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-06T17:32:30.363Z","started_at":"2018-11-06T18:04:27.649Z","finished_at":"2018-11-06T18:30:29.790Z","duration":1562.140567,"queued_duration":33.289103,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"f84db466eb7c2c764e0d9dc6789dcc795eecc273","short_id":"f84db466","created_at":"2018-11-06T18:32:05.000+01:00","parent_ids":["f6033667bd9b8069308d4bcba420c4ce0771e44f"],"title":"ssr: extended intro patterns","message":"ssr: extended intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-11-06T18:32:05.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/f84db466eb7c2c764e0d9dc6789dcc795eecc273"},"pipeline":{"id":35633592,"iid":4995,"project_id":6138686,"sha":"f84db466eb7c2c764e0d9dc6789dcc795eecc273","ref":"pr-6705","status":"success","source":"push","created_at":"2018-11-06T17:32:29.744Z","updated_at":"2018-11-06T19:35:14.548Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/35633592"},"web_url":"https://gitlab.com/coq/coq/-/jobs/117156732","artifacts":[{"file_type":"trace","size":226317,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":117156731,"status":"success","stage":"test","name":"ci-bignums","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-06T17:32:30.338Z","started_at":"2018-11-06T18:04:27.528Z","finished_at":"2018-11-06T18:22:04.385Z","duration":1056.856672,"queued_duration":33.096976,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"f84db466eb7c2c764e0d9dc6789dcc795eecc273","short_id":"f84db466","created_at":"2018-11-06T18:32:05.000+01:00","parent_ids":["f6033667bd9b8069308d4bcba420c4ce0771e44f"],"title":"ssr: extended intro patterns","message":"ssr: extended intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-11-06T18:32:05.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/f84db466eb7c2c764e0d9dc6789dcc795eecc273"},"pipeline":{"id":35633592,"iid":4995,"project_id":6138686,"sha":"f84db466eb7c2c764e0d9dc6789dcc795eecc273","ref":"pr-6705","status":"success","source":"push","created_at":"2018-11-06T17:32:29.744Z","updated_at":"2018-11-06T19:35:14.548Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/35633592"},"web_url":"https://gitlab.com/coq/coq/-/jobs/117156731","artifacts":[{"file_type":"trace","size":55462,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":117156730,"status":"failed","stage":"test","name":"ci-bedrock2","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":true,"created_at":"2018-11-06T17:32:30.312Z","started_at":"2018-11-06T18:04:26.790Z","finished_at":"2018-11-06T18:34:36.970Z","duration":1810.180045,"queued_duration":32.312842,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"f84db466eb7c2c764e0d9dc6789dcc795eecc273","short_id":"f84db466","created_at":"2018-11-06T18:32:05.000+01:00","parent_ids":["f6033667bd9b8069308d4bcba420c4ce0771e44f"],"title":"ssr: extended intro patterns","message":"ssr: extended intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-11-06T18:32:05.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/f84db466eb7c2c764e0d9dc6789dcc795eecc273"},"pipeline":{"id":35633592,"iid":4995,"project_id":6138686,"sha":"f84db466eb7c2c764e0d9dc6789dcc795eecc273","ref":"pr-6705","status":"success","source":"push","created_at":"2018-11-06T17:32:29.744Z","updated_at":"2018-11-06T19:35:14.548Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/35633592"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/117156730","artifacts":[{"file_type":"trace","size":41710,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":117156728,"status":"success","stage":"test","name":"ci-aac-tactics","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-06T17:32:30.286Z","started_at":"2018-11-06T18:04:26.724Z","finished_at":"2018-11-06T18:21:41.656Z","duration":1034.931798,"queued_duration":32.213979,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"f84db466eb7c2c764e0d9dc6789dcc795eecc273","short_id":"f84db466","created_at":"2018-11-06T18:32:05.000+01:00","parent_ids":["f6033667bd9b8069308d4bcba420c4ce0771e44f"],"title":"ssr: extended intro patterns","message":"ssr: extended intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-11-06T18:32:05.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/f84db466eb7c2c764e0d9dc6789dcc795eecc273"},"pipeline":{"id":35633592,"iid":4995,"project_id":6138686,"sha":"f84db466eb7c2c764e0d9dc6789dcc795eecc273","ref":"pr-6705","status":"success","source":"push","created_at":"2018-11-06T17:32:29.744Z","updated_at":"2018-11-06T19:35:14.548Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/35633592"},"web_url":"https://gitlab.com/coq/coq/-/jobs/117156728","artifacts":[{"file_type":"trace","size":52940,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":117156726,"status":"success","stage":"test","name":"validate:edge+flambda","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-06T17:32:30.262Z","started_at":"2018-11-06T18:04:24.510Z","finished_at":"2018-11-06T18:32:59.663Z","duration":1715.15358,"queued_duration":29.929168,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"f84db466eb7c2c764e0d9dc6789dcc795eecc273","short_id":"f84db466","created_at":"2018-11-06T18:32:05.000+01:00","parent_ids":["f6033667bd9b8069308d4bcba420c4ce0771e44f"],"title":"ssr: extended intro patterns","message":"ssr: extended intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-11-06T18:32:05.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/f84db466eb7c2c764e0d9dc6789dcc795eecc273"},"pipeline":{"id":35633592,"iid":4995,"project_id":6138686,"sha":"f84db466eb7c2c764e0d9dc6789dcc795eecc273","ref":"pr-6705","status":"success","source":"push","created_at":"2018-11-06T17:32:29.744Z","updated_at":"2018-11-06T19:35:14.548Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/35633592"},"web_url":"https://gitlab.com/coq/coq/-/jobs/117156726","artifacts":[{"file_type":"trace","size":21663,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":117156725,"status":"success","stage":"test","name":"validate:edge","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-06T17:32:30.238Z","started_at":"2018-11-06T18:04:24.386Z","finished_at":"2018-11-06T18:22:53.744Z","duration":1109.357948,"queued_duration":29.773198,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"f84db466eb7c2c764e0d9dc6789dcc795eecc273","short_id":"f84db466","created_at":"2018-11-06T18:32:05.000+01:00","parent_ids":["f6033667bd9b8069308d4bcba420c4ce0771e44f"],"title":"ssr: extended intro patterns","message":"ssr: extended intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-11-06T18:32:05.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/f84db466eb7c2c764e0d9dc6789dcc795eecc273"},"pipeline":{"id":35633592,"iid":4995,"project_id":6138686,"sha":"f84db466eb7c2c764e0d9dc6789dcc795eecc273","ref":"pr-6705","status":"success","source":"push","created_at":"2018-11-06T17:32:29.744Z","updated_at":"2018-11-06T19:35:14.548Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/35633592"},"web_url":"https://gitlab.com/coq/coq/-/jobs/117156725","artifacts":[{"file_type":"trace","size":20623,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":117156724,"status":"success","stage":"test","name":"validate:base+32bit","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-06T17:32:30.216Z","started_at":"2018-11-06T18:04:23.195Z","finished_at":"2018-11-06T18:18:33.433Z","duration":850.237575,"queued_duration":28.549341,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"f84db466eb7c2c764e0d9dc6789dcc795eecc273","short_id":"f84db466","created_at":"2018-11-06T18:32:05.000+01:00","parent_ids":["f6033667bd9b8069308d4bcba420c4ce0771e44f"],"title":"ssr: extended intro patterns","message":"ssr: extended intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-11-06T18:32:05.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/f84db466eb7c2c764e0d9dc6789dcc795eecc273"},"pipeline":{"id":35633592,"iid":4995,"project_id":6138686,"sha":"f84db466eb7c2c764e0d9dc6789dcc795eecc273","ref":"pr-6705","status":"success","source":"push","created_at":"2018-11-06T17:32:29.744Z","updated_at":"2018-11-06T19:35:14.548Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/35633592"},"web_url":"https://gitlab.com/coq/coq/-/jobs/117156724","artifacts":[{"file_type":"trace","size":19962,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":117156723,"status":"success","stage":"test","name":"validate:base","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-06T17:32:30.194Z","started_at":"2018-11-06T18:04:20.183Z","finished_at":"2018-11-06T18:19:28.481Z","duration":908.298337,"queued_duration":25.499434,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"f84db466eb7c2c764e0d9dc6789dcc795eecc273","short_id":"f84db466","created_at":"2018-11-06T18:32:05.000+01:00","parent_ids":["f6033667bd9b8069308d4bcba420c4ce0771e44f"],"title":"ssr: extended intro patterns","message":"ssr: extended intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-11-06T18:32:05.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/f84db466eb7c2c764e0d9dc6789dcc795eecc273"},"pipeline":{"id":35633592,"iid":4995,"project_id":6138686,"sha":"f84db466eb7c2c764e0d9dc6789dcc795eecc273","ref":"pr-6705","status":"success","source":"push","created_at":"2018-11-06T17:32:29.744Z","updated_at":"2018-11-06T19:35:14.548Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/35633592"},"web_url":"https://gitlab.com/coq/coq/-/jobs/117156723","artifacts":[{"file_type":"trace","size":21006,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":117156722,"status":"success","stage":"test","name":"test-suite:egde:dune:dev","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-06T17:32:30.170Z","started_at":"2018-11-06T18:04:20.006Z","finished_at":"2018-11-06T18:45:32.026Z","duration":2472.020014,"queued_duration":25.288381,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"f84db466eb7c2c764e0d9dc6789dcc795eecc273","short_id":"f84db466","created_at":"2018-11-06T18:32:05.000+01:00","parent_ids":["f6033667bd9b8069308d4bcba420c4ce0771e44f"],"title":"ssr: extended intro patterns","message":"ssr: extended intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-11-06T18:32:05.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/f84db466eb7c2c764e0d9dc6789dcc795eecc273"},"pipeline":{"id":35633592,"iid":4995,"project_id":6138686,"sha":"f84db466eb7c2c764e0d9dc6789dcc795eecc273","ref":"pr-6705","status":"success","source":"push","created_at":"2018-11-06T17:32:29.744Z","updated_at":"2018-11-06T19:35:14.548Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/35633592"},"web_url":"https://gitlab.com/coq/coq/-/jobs/117156722","artifacts":[{"file_type":"trace","size":70011,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":117156721,"status":"success","stage":"test","name":"test-suite:edge+flambda","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-06T17:32:30.145Z","started_at":"2018-11-06T18:03:56.672Z","finished_at":"2018-11-06T18:40:05.369Z","duration":2168.697113,"queued_duration":1.92071,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"f84db466eb7c2c764e0d9dc6789dcc795eecc273","short_id":"f84db466","created_at":"2018-11-06T18:32:05.000+01:00","parent_ids":["f6033667bd9b8069308d4bcba420c4ce0771e44f"],"title":"ssr: extended intro patterns","message":"ssr: extended intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-11-06T18:32:05.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/f84db466eb7c2c764e0d9dc6789dcc795eecc273"},"pipeline":{"id":35633592,"iid":4995,"project_id":6138686,"sha":"f84db466eb7c2c764e0d9dc6789dcc795eecc273","ref":"pr-6705","status":"success","source":"push","created_at":"2018-11-06T17:32:29.744Z","updated_at":"2018-11-06T19:35:14.548Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/35633592"},"web_url":"https://gitlab.com/coq/coq/-/jobs/117156721","artifacts":[{"file_type":"trace","size":71162,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":117156720,"status":"success","stage":"test","name":"test-suite:edge","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-06T17:32:30.118Z","started_at":"2018-11-06T18:03:56.627Z","finished_at":"2018-11-06T18:20:39.470Z","duration":1002.843412,"queued_duration":1.836917,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"f84db466eb7c2c764e0d9dc6789dcc795eecc273","short_id":"f84db466","created_at":"2018-11-06T18:32:05.000+01:00","parent_ids":["f6033667bd9b8069308d4bcba420c4ce0771e44f"],"title":"ssr: extended intro patterns","message":"ssr: extended intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-11-06T18:32:05.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/f84db466eb7c2c764e0d9dc6789dcc795eecc273"},"pipeline":{"id":35633592,"iid":4995,"project_id":6138686,"sha":"f84db466eb7c2c764e0d9dc6789dcc795eecc273","ref":"pr-6705","status":"success","source":"push","created_at":"2018-11-06T17:32:29.744Z","updated_at":"2018-11-06T19:35:14.548Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/35633592"},"web_url":"https://gitlab.com/coq/coq/-/jobs/117156720","artifacts":[{"file_type":"trace","size":70122,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":117156719,"status":"success","stage":"test","name":"test-suite:base+32bit","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-06T17:32:30.094Z","started_at":"2018-11-06T18:03:56.459Z","finished_at":"2018-11-06T18:24:34.725Z","duration":1238.265084,"queued_duration":1.620909,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"f84db466eb7c2c764e0d9dc6789dcc795eecc273","short_id":"f84db466","created_at":"2018-11-06T18:32:05.000+01:00","parent_ids":["f6033667bd9b8069308d4bcba420c4ce0771e44f"],"title":"ssr: extended intro patterns","message":"ssr: extended intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-11-06T18:32:05.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/f84db466eb7c2c764e0d9dc6789dcc795eecc273"},"pipeline":{"id":35633592,"iid":4995,"project_id":6138686,"sha":"f84db466eb7c2c764e0d9dc6789dcc795eecc273","ref":"pr-6705","status":"success","source":"push","created_at":"2018-11-06T17:32:29.744Z","updated_at":"2018-11-06T19:35:14.548Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/35633592"},"web_url":"https://gitlab.com/coq/coq/-/jobs/117156719","artifacts":[{"file_type":"trace","size":69398,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":117156718,"status":"success","stage":"test","name":"test-suite:base","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-06T17:32:30.069Z","started_at":"2018-11-06T18:03:56.402Z","finished_at":"2018-11-06T18:29:13.897Z","duration":1517.494228,"queued_duration":1.524158,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"f84db466eb7c2c764e0d9dc6789dcc795eecc273","short_id":"f84db466","created_at":"2018-11-06T18:32:05.000+01:00","parent_ids":["f6033667bd9b8069308d4bcba420c4ce0771e44f"],"title":"ssr: extended intro patterns","message":"ssr: extended intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-11-06T18:32:05.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/f84db466eb7c2c764e0d9dc6789dcc795eecc273"},"pipeline":{"id":35633592,"iid":4995,"project_id":6138686,"sha":"f84db466eb7c2c764e0d9dc6789dcc795eecc273","ref":"pr-6705","status":"success","source":"push","created_at":"2018-11-06T17:32:29.744Z","updated_at":"2018-11-06T19:35:14.548Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/35633592"},"web_url":"https://gitlab.com/coq/coq/-/jobs/117156718","artifacts":[{"file_type":"trace","size":70442,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":117156717,"status":"success","stage":"test","name":"doc:ml-api:odoc","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-06T17:32:30.046Z","started_at":"2018-11-06T18:03:56.392Z","finished_at":"2018-11-06T18:15:48.382Z","duration":711.989827,"queued_duration":1.473883,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"f84db466eb7c2c764e0d9dc6789dcc795eecc273","short_id":"f84db466","created_at":"2018-11-06T18:32:05.000+01:00","parent_ids":["f6033667bd9b8069308d4bcba420c4ce0771e44f"],"title":"ssr: extended intro patterns","message":"ssr: extended intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-11-06T18:32:05.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/f84db466eb7c2c764e0d9dc6789dcc795eecc273"},"pipeline":{"id":35633592,"iid":4995,"project_id":6138686,"sha":"f84db466eb7c2c764e0d9dc6789dcc795eecc273","ref":"pr-6705","status":"success","source":"push","created_at":"2018-11-06T17:32:29.744Z","updated_at":"2018-11-06T19:35:14.548Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/35633592"},"web_url":"https://gitlab.com/coq/coq/-/jobs/117156717","artifacts":[{"file_type":"trace","size":82608,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":117156715,"status":"success","stage":"test","name":"doc:refman","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-06T17:32:30.020Z","started_at":"2018-11-06T18:03:56.343Z","finished_at":"2018-11-06T18:24:28.349Z","duration":1232.006659,"queued_duration":1.382881,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"f84db466eb7c2c764e0d9dc6789dcc795eecc273","short_id":"f84db466","created_at":"2018-11-06T18:32:05.000+01:00","parent_ids":["f6033667bd9b8069308d4bcba420c4ce0771e44f"],"title":"ssr: extended intro patterns","message":"ssr: extended intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-11-06T18:32:05.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/f84db466eb7c2c764e0d9dc6789dcc795eecc273"},"pipeline":{"id":35633592,"iid":4995,"project_id":6138686,"sha":"f84db466eb7c2c764e0d9dc6789dcc795eecc273","ref":"pr-6705","status":"success","source":"push","created_at":"2018-11-06T17:32:29.744Z","updated_at":"2018-11-06T19:35:14.548Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/35633592"},"web_url":"https://gitlab.com/coq/coq/-/jobs/117156715","artifacts":[{"file_type":"trace","size":956439,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":117156714,"status":"success","stage":"test","name":"pkg:nix","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-06T17:32:29.994Z","started_at":"2018-11-06T18:03:56.271Z","finished_at":"2018-11-06T18:37:17.778Z","duration":2001.507536,"queued_duration":1.274479,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"f84db466eb7c2c764e0d9dc6789dcc795eecc273","short_id":"f84db466","created_at":"2018-11-06T18:32:05.000+01:00","parent_ids":["f6033667bd9b8069308d4bcba420c4ce0771e44f"],"title":"ssr: extended intro patterns","message":"ssr: extended intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-11-06T18:32:05.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/f84db466eb7c2c764e0d9dc6789dcc795eecc273"},"pipeline":{"id":35633592,"iid":4995,"project_id":6138686,"sha":"f84db466eb7c2c764e0d9dc6789dcc795eecc273","ref":"pr-6705","status":"success","source":"push","created_at":"2018-11-06T17:32:29.744Z","updated_at":"2018-11-06T19:35:14.548Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/35633592"},"web_url":"https://gitlab.com/coq/coq/-/jobs/117156714","artifacts":[{"file_type":"trace","size":646552,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":117156713,"status":"success","stage":"test","name":"pkg:opam","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-06T17:32:29.969Z","started_at":"2018-11-06T18:03:55.393Z","finished_at":"2018-11-06T18:22:23.568Z","duration":1108.175055,"queued_duration":0.348163,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"f84db466eb7c2c764e0d9dc6789dcc795eecc273","short_id":"f84db466","created_at":"2018-11-06T18:32:05.000+01:00","parent_ids":["f6033667bd9b8069308d4bcba420c4ce0771e44f"],"title":"ssr: extended intro patterns","message":"ssr: extended intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-11-06T18:32:05.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/f84db466eb7c2c764e0d9dc6789dcc795eecc273"},"pipeline":{"id":35633592,"iid":4995,"project_id":6138686,"sha":"f84db466eb7c2c764e0d9dc6789dcc795eecc273","ref":"pr-6705","status":"success","source":"push","created_at":"2018-11-06T17:32:29.744Z","updated_at":"2018-11-06T19:35:14.548Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/35633592"},"web_url":"https://gitlab.com/coq/coq/-/jobs/117156713","artifacts":[{"file_type":"trace","size":19234,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":117156712,"status":"success","stage":"test","name":"windows64","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-06T17:32:29.938Z","started_at":"2018-11-06T18:31:09.755Z","finished_at":"2018-11-06T19:25:47.967Z","duration":3278.211845,"queued_duration":1634.634715,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"f84db466eb7c2c764e0d9dc6789dcc795eecc273","short_id":"f84db466","created_at":"2018-11-06T18:32:05.000+01:00","parent_ids":["f6033667bd9b8069308d4bcba420c4ce0771e44f"],"title":"ssr: extended intro patterns","message":"ssr: extended intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-11-06T18:32:05.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/f84db466eb7c2c764e0d9dc6789dcc795eecc273"},"pipeline":{"id":35633592,"iid":4995,"project_id":6138686,"sha":"f84db466eb7c2c764e0d9dc6789dcc795eecc273","ref":"pr-6705","status":"success","source":"push","created_at":"2018-11-06T17:32:29.744Z","updated_at":"2018-11-06T19:35:14.548Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/35633592"},"web_url":"https://gitlab.com/coq/coq/-/jobs/117156712","artifacts":[{"file_type":"trace","size":373468,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":"2018-11-13T19:25:42.938Z","tag_list":["windows"]}
{"id":117156711,"status":"success","stage":"build","name":"build:egde:dune:dev","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-06T17:32:29.903Z","started_at":"2018-11-06T17:32:33.655Z","finished_at":"2018-11-06T17:43:37.067Z","duration":663.411206,"queued_duration":2.499045,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"f84db466eb7c2c764e0d9dc6789dcc795eecc273","short_id":"f84db466","created_at":"2018-11-06T18:32:05.000+01:00","parent_ids":["f6033667bd9b8069308d4bcba420c4ce0771e44f"],"title":"ssr: extended intro patterns","message":"ssr: extended intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-11-06T18:32:05.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/f84db466eb7c2c764e0d9dc6789dcc795eecc273"},"pipeline":{"id":35633592,"iid":4995,"project_id":6138686,"sha":"f84db466eb7c2c764e0d9dc6789dcc795eecc273","ref":"pr-6705","status":"success","source":"push","created_at":"2018-11-06T17:32:29.744Z","updated_at":"2018-11-06T19:35:14.548Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/35633592"},"web_url":"https://gitlab.com/coq/coq/-/jobs/117156711","artifacts":[{"file_type":"trace","size":48147,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":"2018-11-13T17:43:31.393Z","tag_list":[]}
{"id":117156710,"status":"success","stage":"build","name":"build:edge+flambda","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-06T17:32:29.843Z","started_at":"2018-11-06T17:32:33.099Z","finished_at":"2018-11-06T18:03:51.777Z","duration":1878.677981,"queued_duration":1.913236,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"f84db466eb7c2c764e0d9dc6789dcc795eecc273","short_id":"f84db466","created_at":"2018-11-06T18:32:05.000+01:00","parent_ids":["f6033667bd9b8069308d4bcba420c4ce0771e44f"],"title":"ssr: extended intro patterns","message":"ssr: extended intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-11-06T18:32:05.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/f84db466eb7c2c764e0d9dc6789dcc795eecc273"},"pipeline":{"id":35633592,"iid":4995,"project_id":6138686,"sha":"f84db466eb7c2c764e0d9dc6789dcc795eecc273","ref":"pr-6705","status":"success","source":"push","created_at":"2018-11-06T17:32:29.744Z","updated_at":"2018-11-06T19:35:14.548Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/35633592"},"web_url":"https://gitlab.com/coq/coq/-/jobs/117156710","artifacts":[{"file_type":"trace","size":233121,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2018-11-13T18:03:44.907Z","tag_list":[]}
{"id":117156709,"status":"success","stage":"build","name":"build:edge","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-06T17:32:29.814Z","started_at":"2018-11-06T17:32:33.034Z","finished_at":"2018-11-06T17:53:10.896Z","duration":1237.862631,"queued_duration":1.81247,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"f84db466eb7c2c764e0d9dc6789dcc795eecc273","short_id":"f84db466","created_at":"2018-11-06T18:32:05.000+01:00","parent_ids":["f6033667bd9b8069308d4bcba420c4ce0771e44f"],"title":"ssr: extended intro patterns","message":"ssr: extended intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-11-06T18:32:05.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/f84db466eb7c2c764e0d9dc6789dcc795eecc273"},"pipeline":{"id":35633592,"iid":4995,"project_id":6138686,"sha":"f84db466eb7c2c764e0d9dc6789dcc795eecc273","ref":"pr-6705","status":"success","source":"push","created_at":"2018-11-06T17:32:29.744Z","updated_at":"2018-11-06T19:35:14.548Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/35633592"},"web_url":"https://gitlab.com/coq/coq/-/jobs/117156709","artifacts":[{"file_type":"trace","size":261929,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":"2018-11-13T17:53:05.331Z","tag_list":[]}
{"id":117156708,"status":"success","stage":"build","name":"build:base+32bit","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-06T17:32:29.786Z","started_at":"2018-11-06T17:32:31.489Z","finished_at":"2018-11-06T17:49:07.972Z","duration":996.48271,"queued_duration":0.22735,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"f84db466eb7c2c764e0d9dc6789dcc795eecc273","short_id":"f84db466","created_at":"2018-11-06T18:32:05.000+01:00","parent_ids":["f6033667bd9b8069308d4bcba420c4ce0771e44f"],"title":"ssr: extended intro patterns","message":"ssr: extended intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-11-06T18:32:05.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/f84db466eb7c2c764e0d9dc6789dcc795eecc273"},"pipeline":{"id":35633592,"iid":4995,"project_id":6138686,"sha":"f84db466eb7c2c764e0d9dc6789dcc795eecc273","ref":"pr-6705","status":"success","source":"push","created_at":"2018-11-06T17:32:29.744Z","updated_at":"2018-11-06T19:35:14.548Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/35633592"},"web_url":"https://gitlab.com/coq/coq/-/jobs/117156708","artifacts":[{"file_type":"trace","size":226843,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2018-11-13T17:49:02.839Z","tag_list":[]}
{"id":117156707,"status":"success","stage":"build","name":"build:base","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-06T17:32:29.758Z","started_at":"2018-11-06T17:32:32.427Z","finished_at":"2018-11-06T17:53:30.046Z","duration":1257.61888,"queued_duration":1.130637,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"f84db466eb7c2c764e0d9dc6789dcc795eecc273","short_id":"f84db466","created_at":"2018-11-06T18:32:05.000+01:00","parent_ids":["f6033667bd9b8069308d4bcba420c4ce0771e44f"],"title":"ssr: extended intro patterns","message":"ssr: extended intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-11-06T18:32:05.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/f84db466eb7c2c764e0d9dc6789dcc795eecc273"},"pipeline":{"id":35633592,"iid":4995,"project_id":6138686,"sha":"f84db466eb7c2c764e0d9dc6789dcc795eecc273","ref":"pr-6705","status":"success","source":"push","created_at":"2018-11-06T17:32:29.744Z","updated_at":"2018-11-06T19:35:14.548Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/35633592"},"web_url":"https://gitlab.com/coq/coq/-/jobs/117156707","artifacts":[{"file_type":"trace","size":304869,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":"2018-11-13T17:53:25.407Z","tag_list":[]}
