{"id":69213333,"status":"success","stage":"test","name":"ci-fiat-crypto","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-18T20:25:19.213Z","started_at":"2018-05-18T20:31:35.247Z","finished_at":"2018-05-18T21:34:18.209Z","duration":3762.962337,"queued_duration":375.990288,"user":{"id":400418,"username":"ejgallego","name":"Emilio Jesús Gallego Arias","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/400418/avatar.png","web_url":"https://gitlab.com/ejgallego","created_at":"2016-02-07T00:36:59.511Z","bio":"“La perfection est atteinte, non pas lorsqu'il n'y a plus rien à ajouter, mais lorsqu'il n'y a plus rien à retirer.”","location":"","public_email":"e@x80.org","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"168bad5cd72da15c5cc6eaa6bc382e6e41703620","short_id":"168bad5c","created_at":"2018-05-18T16:34:44.000+02:00","parent_ids":["98f1f4ed81b1a2800b57d448e3e2b1f626bd9d41"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-18T16:34:44.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/168bad5cd72da15c5cc6eaa6bc382e6e41703620"},"pipeline":{"id":22271526,"iid":null,"project_id":6138686,"sha":"168bad5cd72da15c5cc6eaa6bc382e6e41703620","ref":"pr-6857","status":"success","source":"push","created_at":"2018-05-18T16:02:48.949Z","updated_at":"2018-05-18T21:34:18.606Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22271526"},"web_url":"https://gitlab.com/coq/coq/-/jobs/69213333","artifacts":[{"file_type":"trace","size":686615,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":69213328,"status":"success","stage":"test","name":"ci-sf","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-18T20:25:15.206Z","started_at":"2018-05-18T20:31:33.386Z","finished_at":"2018-05-18T20:38:08.676Z","duration":395.290291,"queued_duration":378.137185,"user":{"id":400418,"username":"ejgallego","name":"Emilio Jesús Gallego Arias","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/400418/avatar.png","web_url":"https://gitlab.com/ejgallego","created_at":"2016-02-07T00:36:59.511Z","bio":"“La perfection est atteinte, non pas lorsqu'il n'y a plus rien à ajouter, mais lorsqu'il n'y a plus rien à retirer.”","location":"","public_email":"e@x80.org","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"168bad5cd72da15c5cc6eaa6bc382e6e41703620","short_id":"168bad5c","created_at":"2018-05-18T16:34:44.000+02:00","parent_ids":["98f1f4ed81b1a2800b57d448e3e2b1f626bd9d41"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-18T16:34:44.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/168bad5cd72da15c5cc6eaa6bc382e6e41703620"},"pipeline":{"id":22271526,"iid":null,"project_id":6138686,"sha":"168bad5cd72da15c5cc6eaa6bc382e6e41703620","ref":"pr-6857","status":"success","source":"push","created_at":"2018-05-18T16:02:48.949Z","updated_at":"2018-05-18T21:34:18.606Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22271526"},"web_url":"https://gitlab.com/coq/coq/-/jobs/69213328","artifacts":[{"file_type":"trace","size":267335,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":69173603,"status":"success","stage":"test","name":"ci-vst","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-18T16:02:50.406Z","started_at":"2018-05-18T19:34:18.073Z","finished_at":"2018-05-18T21:02:28.640Z","duration":5290.567484,"queued_duration":1205.12744,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"168bad5cd72da15c5cc6eaa6bc382e6e41703620","short_id":"168bad5c","created_at":"2018-05-18T16:34:44.000+02:00","parent_ids":["98f1f4ed81b1a2800b57d448e3e2b1f626bd9d41"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-18T16:34:44.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/168bad5cd72da15c5cc6eaa6bc382e6e41703620"},"pipeline":{"id":22271526,"iid":null,"project_id":6138686,"sha":"168bad5cd72da15c5cc6eaa6bc382e6e41703620","ref":"pr-6857","status":"success","source":"push","created_at":"2018-05-18T16:02:48.949Z","updated_at":"2018-05-18T21:34:18.606Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22271526"},"web_url":"https://gitlab.com/coq/coq/-/jobs/69173603","artifacts":[{"file_type":"trace","size":171005,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":69173602,"status":"success","stage":"test","name":"ci-unimath","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-18T16:02:50.371Z","started_at":"2018-05-18T19:33:47.917Z","finished_at":"2018-05-18T20:02:12.159Z","duration":1704.24165,"queued_duration":1174.806785,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"168bad5cd72da15c5cc6eaa6bc382e6e41703620","short_id":"168bad5c","created_at":"2018-05-18T16:34:44.000+02:00","parent_ids":["98f1f4ed81b1a2800b57d448e3e2b1f626bd9d41"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-18T16:34:44.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/168bad5cd72da15c5cc6eaa6bc382e6e41703620"},"pipeline":{"id":22271526,"iid":null,"project_id":6138686,"sha":"168bad5cd72da15c5cc6eaa6bc382e6e41703620","ref":"pr-6857","status":"success","source":"push","created_at":"2018-05-18T16:02:48.949Z","updated_at":"2018-05-18T21:34:18.606Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22271526"},"web_url":"https://gitlab.com/coq/coq/-/jobs/69173602","artifacts":[{"file_type":"trace","size":115387,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":69173600,"status":"success","stage":"test","name":"ci-pidetop","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-18T16:02:50.296Z","started_at":"2018-05-18T19:33:36.266Z","finished_at":"2018-05-18T19:38:19.467Z","duration":283.201558,"queued_duration":1162.83327,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"168bad5cd72da15c5cc6eaa6bc382e6e41703620","short_id":"168bad5c","created_at":"2018-05-18T16:34:44.000+02:00","parent_ids":["98f1f4ed81b1a2800b57d448e3e2b1f626bd9d41"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-18T16:34:44.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/168bad5cd72da15c5cc6eaa6bc382e6e41703620"},"pipeline":{"id":22271526,"iid":null,"project_id":6138686,"sha":"168bad5cd72da15c5cc6eaa6bc382e6e41703620","ref":"pr-6857","status":"success","source":"push","created_at":"2018-05-18T16:02:48.949Z","updated_at":"2018-05-18T21:34:18.606Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22271526"},"web_url":"https://gitlab.com/coq/coq/-/jobs/69173600","artifacts":[{"file_type":"trace","size":30106,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":69173599,"status":"success","stage":"test","name":"ci-mtac2","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-18T16:02:50.259Z","started_at":"2018-05-18T19:33:15.217Z","finished_at":"2018-05-18T19:38:15.494Z","duration":300.276839,"queued_duration":1141.653705,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"168bad5cd72da15c5cc6eaa6bc382e6e41703620","short_id":"168bad5c","created_at":"2018-05-18T16:34:44.000+02:00","parent_ids":["98f1f4ed81b1a2800b57d448e3e2b1f626bd9d41"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-18T16:34:44.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/168bad5cd72da15c5cc6eaa6bc382e6e41703620"},"pipeline":{"id":22271526,"iid":null,"project_id":6138686,"sha":"168bad5cd72da15c5cc6eaa6bc382e6e41703620","ref":"pr-6857","status":"success","source":"push","created_at":"2018-05-18T16:02:48.949Z","updated_at":"2018-05-18T21:34:18.606Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22271526"},"web_url":"https://gitlab.com/coq/coq/-/jobs/69173599","artifacts":[{"file_type":"trace","size":86258,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":69173598,"status":"success","stage":"test","name":"ci-math-comp","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-18T16:02:50.222Z","started_at":"2018-05-18T19:33:14.865Z","finished_at":"2018-05-18T20:27:26.692Z","duration":3251.826982,"queued_duration":1141.094908,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"168bad5cd72da15c5cc6eaa6bc382e6e41703620","short_id":"168bad5c","created_at":"2018-05-18T16:34:44.000+02:00","parent_ids":["98f1f4ed81b1a2800b57d448e3e2b1f626bd9d41"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-18T16:34:44.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/168bad5cd72da15c5cc6eaa6bc382e6e41703620"},"pipeline":{"id":22271526,"iid":null,"project_id":6138686,"sha":"168bad5cd72da15c5cc6eaa6bc382e6e41703620","ref":"pr-6857","status":"success","source":"push","created_at":"2018-05-18T16:02:48.949Z","updated_at":"2018-05-18T21:34:18.606Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22271526"},"web_url":"https://gitlab.com/coq/coq/-/jobs/69173598","artifacts":[{"file_type":"trace","size":310726,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":69173596,"status":"success","stage":"test","name":"ci-ltac2","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-18T16:02:50.184Z","started_at":"2018-05-18T19:33:00.065Z","finished_at":"2018-05-18T19:37:10.825Z","duration":250.760133,"queued_duration":1126.14854,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"168bad5cd72da15c5cc6eaa6bc382e6e41703620","short_id":"168bad5c","created_at":"2018-05-18T16:34:44.000+02:00","parent_ids":["98f1f4ed81b1a2800b57d448e3e2b1f626bd9d41"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-18T16:34:44.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/168bad5cd72da15c5cc6eaa6bc382e6e41703620"},"pipeline":{"id":22271526,"iid":null,"project_id":6138686,"sha":"168bad5cd72da15c5cc6eaa6bc382e6e41703620","ref":"pr-6857","status":"success","source":"push","created_at":"2018-05-18T16:02:48.949Z","updated_at":"2018-05-18T21:34:18.606Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22271526"},"web_url":"https://gitlab.com/coq/coq/-/jobs/69173596","artifacts":[{"file_type":"trace","size":43439,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":69173595,"status":"success","stage":"test","name":"ci-iris-lambda-rust","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-18T16:02:50.142Z","started_at":"2018-05-18T19:32:59.771Z","finished_at":"2018-05-18T20:30:46.980Z","duration":3467.209038,"queued_duration":1125.758683,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"168bad5cd72da15c5cc6eaa6bc382e6e41703620","short_id":"168bad5c","created_at":"2018-05-18T16:34:44.000+02:00","parent_ids":["98f1f4ed81b1a2800b57d448e3e2b1f626bd9d41"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-18T16:34:44.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/168bad5cd72da15c5cc6eaa6bc382e6e41703620"},"pipeline":{"id":22271526,"iid":null,"project_id":6138686,"sha":"168bad5cd72da15c5cc6eaa6bc382e6e41703620","ref":"pr-6857","status":"success","source":"push","created_at":"2018-05-18T16:02:48.949Z","updated_at":"2018-05-18T21:34:18.606Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22271526"},"web_url":"https://gitlab.com/coq/coq/-/jobs/69173595","artifacts":[{"file_type":"trace","size":191009,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":69173594,"status":"success","stage":"test","name":"ci-hott","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-18T16:02:50.116Z","started_at":"2018-05-18T19:32:56.739Z","finished_at":"2018-05-18T19:44:31.745Z","duration":695.005922,"queued_duration":1122.640537,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"168bad5cd72da15c5cc6eaa6bc382e6e41703620","short_id":"168bad5c","created_at":"2018-05-18T16:34:44.000+02:00","parent_ids":["98f1f4ed81b1a2800b57d448e3e2b1f626bd9d41"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-18T16:34:44.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/168bad5cd72da15c5cc6eaa6bc382e6e41703620"},"pipeline":{"id":22271526,"iid":null,"project_id":6138686,"sha":"168bad5cd72da15c5cc6eaa6bc382e6e41703620","ref":"pr-6857","status":"success","source":"push","created_at":"2018-05-18T16:02:48.949Z","updated_at":"2018-05-18T21:34:18.606Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22271526"},"web_url":"https://gitlab.com/coq/coq/-/jobs/69173594","artifacts":[{"file_type":"trace","size":63628,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":69173593,"status":"success","stage":"test","name":"ci-geocoq","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-18T16:02:50.061Z","started_at":"2018-05-18T19:32:56.434Z","finished_at":"2018-05-18T20:38:58.332Z","duration":3961.897476,"queued_duration":1122.268295,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"168bad5cd72da15c5cc6eaa6bc382e6e41703620","short_id":"168bad5c","created_at":"2018-05-18T16:34:44.000+02:00","parent_ids":["98f1f4ed81b1a2800b57d448e3e2b1f626bd9d41"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-18T16:34:44.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/168bad5cd72da15c5cc6eaa6bc382e6e41703620"},"pipeline":{"id":22271526,"iid":null,"project_id":6138686,"sha":"168bad5cd72da15c5cc6eaa6bc382e6e41703620","ref":"pr-6857","status":"success","source":"push","created_at":"2018-05-18T16:02:48.949Z","updated_at":"2018-05-18T21:34:18.606Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22271526"},"web_url":"https://gitlab.com/coq/coq/-/jobs/69173593","artifacts":[{"file_type":"trace","size":133825,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":69173592,"status":"success","stage":"test","name":"ci-formal-topology","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-18T16:02:50.035Z","started_at":"2018-05-18T19:32:44.415Z","finished_at":"2018-05-18T20:16:12.480Z","duration":2608.064392,"queued_duration":1110.157944,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"168bad5cd72da15c5cc6eaa6bc382e6e41703620","short_id":"168bad5c","created_at":"2018-05-18T16:34:44.000+02:00","parent_ids":["98f1f4ed81b1a2800b57d448e3e2b1f626bd9d41"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-18T16:34:44.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/168bad5cd72da15c5cc6eaa6bc382e6e41703620"},"pipeline":{"id":22271526,"iid":null,"project_id":6138686,"sha":"168bad5cd72da15c5cc6eaa6bc382e6e41703620","ref":"pr-6857","status":"success","source":"push","created_at":"2018-05-18T16:02:48.949Z","updated_at":"2018-05-18T21:34:18.606Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22271526"},"web_url":"https://gitlab.com/coq/coq/-/jobs/69173592","artifacts":[{"file_type":"trace","size":566464,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":69173591,"status":"success","stage":"test","name":"ci-flocq","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-18T16:02:50.004Z","started_at":"2018-05-18T19:32:44.209Z","finished_at":"2018-05-18T19:44:00.839Z","duration":676.63018,"queued_duration":1109.906972,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"168bad5cd72da15c5cc6eaa6bc382e6e41703620","short_id":"168bad5c","created_at":"2018-05-18T16:34:44.000+02:00","parent_ids":["98f1f4ed81b1a2800b57d448e3e2b1f626bd9d41"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-18T16:34:44.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/168bad5cd72da15c5cc6eaa6bc382e6e41703620"},"pipeline":{"id":22271526,"iid":null,"project_id":6138686,"sha":"168bad5cd72da15c5cc6eaa6bc382e6e41703620","ref":"pr-6857","status":"success","source":"push","created_at":"2018-05-18T16:02:48.949Z","updated_at":"2018-05-18T21:34:18.606Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22271526"},"web_url":"https://gitlab.com/coq/coq/-/jobs/69173591","artifacts":[{"file_type":"trace","size":651753,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":69173590,"status":"success","stage":"test","name":"ci-fiat-parsers","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-18T16:02:49.974Z","started_at":"2018-05-18T19:32:42.091Z","finished_at":"2018-05-18T19:55:25.281Z","duration":1363.190359,"queued_duration":1107.679652,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"168bad5cd72da15c5cc6eaa6bc382e6e41703620","short_id":"168bad5c","created_at":"2018-05-18T16:34:44.000+02:00","parent_ids":["98f1f4ed81b1a2800b57d448e3e2b1f626bd9d41"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-18T16:34:44.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/168bad5cd72da15c5cc6eaa6bc382e6e41703620"},"pipeline":{"id":22271526,"iid":null,"project_id":6138686,"sha":"168bad5cd72da15c5cc6eaa6bc382e6e41703620","ref":"pr-6857","status":"success","source":"push","created_at":"2018-05-18T16:02:48.949Z","updated_at":"2018-05-18T21:34:18.606Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22271526"},"web_url":"https://gitlab.com/coq/coq/-/jobs/69173590","artifacts":[{"file_type":"trace","size":234555,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":69173587,"status":"success","stage":"test","name":"ci-fcsl-pcm","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-18T16:02:49.880Z","started_at":"2018-05-18T19:31:46.046Z","finished_at":"2018-05-18T19:37:35.374Z","duration":349.327785,"queued_duration":1051.23964,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"168bad5cd72da15c5cc6eaa6bc382e6e41703620","short_id":"168bad5c","created_at":"2018-05-18T16:34:44.000+02:00","parent_ids":["98f1f4ed81b1a2800b57d448e3e2b1f626bd9d41"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-18T16:34:44.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/168bad5cd72da15c5cc6eaa6bc382e6e41703620"},"pipeline":{"id":22271526,"iid":null,"project_id":6138686,"sha":"168bad5cd72da15c5cc6eaa6bc382e6e41703620","ref":"pr-6857","status":"success","source":"push","created_at":"2018-05-18T16:02:48.949Z","updated_at":"2018-05-18T21:34:18.606Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22271526"},"web_url":"https://gitlab.com/coq/coq/-/jobs/69173587","artifacts":[{"file_type":"trace","size":75287,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":69173586,"status":"success","stage":"test","name":"ci-equations","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-18T16:02:49.842Z","started_at":"2018-05-18T19:31:41.894Z","finished_at":"2018-05-18T19:40:27.459Z","duration":525.564925,"queued_duration":1046.924702,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"168bad5cd72da15c5cc6eaa6bc382e6e41703620","short_id":"168bad5c","created_at":"2018-05-18T16:34:44.000+02:00","parent_ids":["98f1f4ed81b1a2800b57d448e3e2b1f626bd9d41"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-18T16:34:44.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/168bad5cd72da15c5cc6eaa6bc382e6e41703620"},"pipeline":{"id":22271526,"iid":null,"project_id":6138686,"sha":"168bad5cd72da15c5cc6eaa6bc382e6e41703620","ref":"pr-6857","status":"success","source":"push","created_at":"2018-05-18T16:02:48.949Z","updated_at":"2018-05-18T21:34:18.606Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22271526"},"web_url":"https://gitlab.com/coq/coq/-/jobs/69173586","artifacts":[{"file_type":"trace","size":72796,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":69173585,"status":"success","stage":"test","name":"ci-elpi","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-18T16:02:49.815Z","started_at":"2018-05-18T19:31:40.361Z","finished_at":"2018-05-18T19:36:35.326Z","duration":294.964195,"queued_duration":1045.073622,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"168bad5cd72da15c5cc6eaa6bc382e6e41703620","short_id":"168bad5c","created_at":"2018-05-18T16:34:44.000+02:00","parent_ids":["98f1f4ed81b1a2800b57d448e3e2b1f626bd9d41"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-18T16:34:44.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/168bad5cd72da15c5cc6eaa6bc382e6e41703620"},"pipeline":{"id":22271526,"iid":null,"project_id":6138686,"sha":"168bad5cd72da15c5cc6eaa6bc382e6e41703620","ref":"pr-6857","status":"success","source":"push","created_at":"2018-05-18T16:02:48.949Z","updated_at":"2018-05-18T21:34:18.606Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22271526"},"web_url":"https://gitlab.com/coq/coq/-/jobs/69173585","artifacts":[{"file_type":"trace","size":380098,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":69173584,"status":"success","stage":"test","name":"ci-cross-crypto","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-18T16:02:49.742Z","started_at":"2018-05-18T19:31:40.253Z","finished_at":"2018-05-18T19:46:27.911Z","duration":887.657715,"queued_duration":1044.722581,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"168bad5cd72da15c5cc6eaa6bc382e6e41703620","short_id":"168bad5c","created_at":"2018-05-18T16:34:44.000+02:00","parent_ids":["98f1f4ed81b1a2800b57d448e3e2b1f626bd9d41"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-18T16:34:44.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/168bad5cd72da15c5cc6eaa6bc382e6e41703620"},"pipeline":{"id":22271526,"iid":null,"project_id":6138686,"sha":"168bad5cd72da15c5cc6eaa6bc382e6e41703620","ref":"pr-6857","status":"success","source":"push","created_at":"2018-05-18T16:02:48.949Z","updated_at":"2018-05-18T21:34:18.606Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22271526"},"web_url":"https://gitlab.com/coq/coq/-/jobs/69173584","artifacts":[{"file_type":"trace","size":77339,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":69173583,"status":"success","stage":"test","name":"ci-coquelicot","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-18T16:02:49.706Z","started_at":"2018-05-18T19:31:40.054Z","finished_at":"2018-05-18T19:39:18.087Z","duration":458.033395,"queued_duration":1044.115618,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"168bad5cd72da15c5cc6eaa6bc382e6e41703620","short_id":"168bad5c","created_at":"2018-05-18T16:34:44.000+02:00","parent_ids":["98f1f4ed81b1a2800b57d448e3e2b1f626bd9d41"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-18T16:34:44.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/168bad5cd72da15c5cc6eaa6bc382e6e41703620"},"pipeline":{"id":22271526,"iid":null,"project_id":6138686,"sha":"168bad5cd72da15c5cc6eaa6bc382e6e41703620","ref":"pr-6857","status":"success","source":"push","created_at":"2018-05-18T16:02:48.949Z","updated_at":"2018-05-18T21:34:18.606Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22271526"},"web_url":"https://gitlab.com/coq/coq/-/jobs/69173583","artifacts":[{"file_type":"trace","size":78598,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":69173581,"status":"success","stage":"test","name":"ci-coq-dpdgraph","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-18T16:02:49.665Z","started_at":"2018-05-18T19:31:38.752Z","finished_at":"2018-05-18T19:35:27.058Z","duration":228.306073,"queued_duration":1042.537352,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"168bad5cd72da15c5cc6eaa6bc382e6e41703620","short_id":"168bad5c","created_at":"2018-05-18T16:34:44.000+02:00","parent_ids":["98f1f4ed81b1a2800b57d448e3e2b1f626bd9d41"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-18T16:34:44.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/168bad5cd72da15c5cc6eaa6bc382e6e41703620"},"pipeline":{"id":22271526,"iid":null,"project_id":6138686,"sha":"168bad5cd72da15c5cc6eaa6bc382e6e41703620","ref":"pr-6857","status":"success","source":"push","created_at":"2018-05-18T16:02:48.949Z","updated_at":"2018-05-18T21:34:18.606Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22271526"},"web_url":"https://gitlab.com/coq/coq/-/jobs/69173581","artifacts":[{"file_type":"trace","size":40878,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":69173579,"status":"success","stage":"test","name":"ci-compcert","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-18T16:02:49.610Z","started_at":"2018-05-18T19:31:09.108Z","finished_at":"2018-05-18T20:01:14.717Z","duration":1805.609039,"queued_duration":1012.778961,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"168bad5cd72da15c5cc6eaa6bc382e6e41703620","short_id":"168bad5c","created_at":"2018-05-18T16:34:44.000+02:00","parent_ids":["98f1f4ed81b1a2800b57d448e3e2b1f626bd9d41"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-18T16:34:44.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/168bad5cd72da15c5cc6eaa6bc382e6e41703620"},"pipeline":{"id":22271526,"iid":null,"project_id":6138686,"sha":"168bad5cd72da15c5cc6eaa6bc382e6e41703620","ref":"pr-6857","status":"success","source":"push","created_at":"2018-05-18T16:02:48.949Z","updated_at":"2018-05-18T21:34:18.606Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22271526"},"web_url":"https://gitlab.com/coq/coq/-/jobs/69173579","artifacts":[{"file_type":"trace","size":1997661,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":69173577,"status":"success","stage":"test","name":"ci-color","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-18T16:02:49.584Z","started_at":"2018-05-18T19:31:08.111Z","finished_at":"2018-05-18T19:50:28.781Z","duration":1160.670805,"queued_duration":1011.710067,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"168bad5cd72da15c5cc6eaa6bc382e6e41703620","short_id":"168bad5c","created_at":"2018-05-18T16:34:44.000+02:00","parent_ids":["98f1f4ed81b1a2800b57d448e3e2b1f626bd9d41"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-18T16:34:44.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/168bad5cd72da15c5cc6eaa6bc382e6e41703620"},"pipeline":{"id":22271526,"iid":null,"project_id":6138686,"sha":"168bad5cd72da15c5cc6eaa6bc382e6e41703620","ref":"pr-6857","status":"success","source":"push","created_at":"2018-05-18T16:02:48.949Z","updated_at":"2018-05-18T21:34:18.606Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22271526"},"web_url":"https://gitlab.com/coq/coq/-/jobs/69173577","artifacts":[{"file_type":"trace","size":285455,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":69173576,"status":"success","stage":"test","name":"ci-bignums","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-18T16:02:49.561Z","started_at":"2018-05-18T19:30:51.040Z","finished_at":"2018-05-18T19:36:48.501Z","duration":357.461208,"queued_duration":994.473273,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"168bad5cd72da15c5cc6eaa6bc382e6e41703620","short_id":"168bad5c","created_at":"2018-05-18T16:34:44.000+02:00","parent_ids":["98f1f4ed81b1a2800b57d448e3e2b1f626bd9d41"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-18T16:34:44.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/168bad5cd72da15c5cc6eaa6bc382e6e41703620"},"pipeline":{"id":22271526,"iid":null,"project_id":6138686,"sha":"168bad5cd72da15c5cc6eaa6bc382e6e41703620","ref":"pr-6857","status":"success","source":"push","created_at":"2018-05-18T16:02:48.949Z","updated_at":"2018-05-18T21:34:18.606Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22271526"},"web_url":"https://gitlab.com/coq/coq/-/jobs/69173576","artifacts":[{"file_type":"trace","size":41395,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":69173574,"status":"success","stage":"test","name":"validate:edge+flambda","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-18T16:02:49.517Z","started_at":"2018-05-18T19:30:50.188Z","finished_at":"2018-05-18T19:40:16.344Z","duration":566.156191,"queued_duration":993.443831,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"168bad5cd72da15c5cc6eaa6bc382e6e41703620","short_id":"168bad5c","created_at":"2018-05-18T16:34:44.000+02:00","parent_ids":["98f1f4ed81b1a2800b57d448e3e2b1f626bd9d41"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-18T16:34:44.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/168bad5cd72da15c5cc6eaa6bc382e6e41703620"},"pipeline":{"id":22271526,"iid":null,"project_id":6138686,"sha":"168bad5cd72da15c5cc6eaa6bc382e6e41703620","ref":"pr-6857","status":"success","source":"push","created_at":"2018-05-18T16:02:48.949Z","updated_at":"2018-05-18T21:34:18.606Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22271526"},"web_url":"https://gitlab.com/coq/coq/-/jobs/69173574","artifacts":[{"file_type":"trace","size":27019,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":69173573,"status":"success","stage":"test","name":"validate:edge","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-18T16:02:49.494Z","started_at":"2018-05-18T19:30:50.027Z","finished_at":"2018-05-18T19:41:32.172Z","duration":642.1455,"queued_duration":993.036175,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"168bad5cd72da15c5cc6eaa6bc382e6e41703620","short_id":"168bad5c","created_at":"2018-05-18T16:34:44.000+02:00","parent_ids":["98f1f4ed81b1a2800b57d448e3e2b1f626bd9d41"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-18T16:34:44.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/168bad5cd72da15c5cc6eaa6bc382e6e41703620"},"pipeline":{"id":22271526,"iid":null,"project_id":6138686,"sha":"168bad5cd72da15c5cc6eaa6bc382e6e41703620","ref":"pr-6857","status":"success","source":"push","created_at":"2018-05-18T16:02:48.949Z","updated_at":"2018-05-18T21:34:18.606Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22271526"},"web_url":"https://gitlab.com/coq/coq/-/jobs/69173573","artifacts":[{"file_type":"trace","size":24938,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":69173572,"status":"success","stage":"test","name":"validate:base+32bit","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-18T16:02:49.427Z","started_at":"2018-05-18T19:30:13.555Z","finished_at":"2018-05-18T19:34:57.251Z","duration":283.695409,"queued_duration":956.421759,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"168bad5cd72da15c5cc6eaa6bc382e6e41703620","short_id":"168bad5c","created_at":"2018-05-18T16:34:44.000+02:00","parent_ids":["98f1f4ed81b1a2800b57d448e3e2b1f626bd9d41"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-18T16:34:44.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/168bad5cd72da15c5cc6eaa6bc382e6e41703620"},"pipeline":{"id":22271526,"iid":null,"project_id":6138686,"sha":"168bad5cd72da15c5cc6eaa6bc382e6e41703620","ref":"pr-6857","status":"success","source":"push","created_at":"2018-05-18T16:02:48.949Z","updated_at":"2018-05-18T21:34:18.606Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22271526"},"web_url":"https://gitlab.com/coq/coq/-/jobs/69173572","artifacts":[{"file_type":"trace","size":33141,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":69173571,"status":"success","stage":"test","name":"validate:base","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-18T16:02:49.402Z","started_at":"2018-05-18T19:30:09.044Z","finished_at":"2018-05-18T19:39:57.465Z","duration":588.420764,"queued_duration":951.724471,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"168bad5cd72da15c5cc6eaa6bc382e6e41703620","short_id":"168bad5c","created_at":"2018-05-18T16:34:44.000+02:00","parent_ids":["98f1f4ed81b1a2800b57d448e3e2b1f626bd9d41"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-18T16:34:44.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/168bad5cd72da15c5cc6eaa6bc382e6e41703620"},"pipeline":{"id":22271526,"iid":null,"project_id":6138686,"sha":"168bad5cd72da15c5cc6eaa6bc382e6e41703620","ref":"pr-6857","status":"success","source":"push","created_at":"2018-05-18T16:02:48.949Z","updated_at":"2018-05-18T21:34:18.606Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22271526"},"web_url":"https://gitlab.com/coq/coq/-/jobs/69173571","artifacts":[{"file_type":"trace","size":25964,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":69173570,"status":"success","stage":"test","name":"test-suite:edge+flambda","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-18T16:02:49.368Z","started_at":"2018-05-18T19:29:58.735Z","finished_at":"2018-05-18T19:42:06.662Z","duration":727.927287,"queued_duration":941.267737,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"168bad5cd72da15c5cc6eaa6bc382e6e41703620","short_id":"168bad5c","created_at":"2018-05-18T16:34:44.000+02:00","parent_ids":["98f1f4ed81b1a2800b57d448e3e2b1f626bd9d41"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-18T16:34:44.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/168bad5cd72da15c5cc6eaa6bc382e6e41703620"},"pipeline":{"id":22271526,"iid":null,"project_id":6138686,"sha":"168bad5cd72da15c5cc6eaa6bc382e6e41703620","ref":"pr-6857","status":"success","source":"push","created_at":"2018-05-18T16:02:48.949Z","updated_at":"2018-05-18T21:34:18.606Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22271526"},"web_url":"https://gitlab.com/coq/coq/-/jobs/69173570","artifacts":[{"file_type":"trace","size":68295,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":69173569,"status":"success","stage":"test","name":"test-suite:edge","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-18T16:02:49.327Z","started_at":"2018-05-18T19:29:56.926Z","finished_at":"2018-05-18T19:41:23.236Z","duration":686.310071,"queued_duration":939.287718,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"168bad5cd72da15c5cc6eaa6bc382e6e41703620","short_id":"168bad5c","created_at":"2018-05-18T16:34:44.000+02:00","parent_ids":["98f1f4ed81b1a2800b57d448e3e2b1f626bd9d41"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-18T16:34:44.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/168bad5cd72da15c5cc6eaa6bc382e6e41703620"},"pipeline":{"id":22271526,"iid":null,"project_id":6138686,"sha":"168bad5cd72da15c5cc6eaa6bc382e6e41703620","ref":"pr-6857","status":"success","source":"push","created_at":"2018-05-18T16:02:48.949Z","updated_at":"2018-05-18T21:34:18.606Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22271526"},"web_url":"https://gitlab.com/coq/coq/-/jobs/69173569","artifacts":[{"file_type":"trace","size":67238,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":69173568,"status":"success","stage":"test","name":"test-suite:base+32bit","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-18T16:02:49.300Z","started_at":"2018-05-18T19:29:56.694Z","finished_at":"2018-05-18T19:42:12.526Z","duration":735.831691,"queued_duration":938.876747,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"168bad5cd72da15c5cc6eaa6bc382e6e41703620","short_id":"168bad5c","created_at":"2018-05-18T16:34:44.000+02:00","parent_ids":["98f1f4ed81b1a2800b57d448e3e2b1f626bd9d41"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-18T16:34:44.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/168bad5cd72da15c5cc6eaa6bc382e6e41703620"},"pipeline":{"id":22271526,"iid":null,"project_id":6138686,"sha":"168bad5cd72da15c5cc6eaa6bc382e6e41703620","ref":"pr-6857","status":"success","source":"push","created_at":"2018-05-18T16:02:48.949Z","updated_at":"2018-05-18T21:34:18.606Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22271526"},"web_url":"https://gitlab.com/coq/coq/-/jobs/69173568","artifacts":[{"file_type":"trace","size":68113,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":69173566,"status":"success","stage":"test","name":"test-suite:base","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-18T16:02:49.275Z","started_at":"2018-05-18T19:29:54.611Z","finished_at":"2018-05-18T19:38:46.895Z","duration":532.283697,"queued_duration":936.67945,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"168bad5cd72da15c5cc6eaa6bc382e6e41703620","short_id":"168bad5c","created_at":"2018-05-18T16:34:44.000+02:00","parent_ids":["98f1f4ed81b1a2800b57d448e3e2b1f626bd9d41"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-18T16:34:44.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/168bad5cd72da15c5cc6eaa6bc382e6e41703620"},"pipeline":{"id":22271526,"iid":null,"project_id":6138686,"sha":"168bad5cd72da15c5cc6eaa6bc382e6e41703620","ref":"pr-6857","status":"success","source":"push","created_at":"2018-05-18T16:02:48.949Z","updated_at":"2018-05-18T21:34:18.606Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22271526"},"web_url":"https://gitlab.com/coq/coq/-/jobs/69173566","artifacts":[{"file_type":"trace","size":69288,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":69173565,"status":"success","stage":"test","name":"warnings:edge","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-18T16:02:49.249Z","started_at":"2018-05-18T19:29:53.537Z","finished_at":"2018-05-18T19:35:56.797Z","duration":363.259929,"queued_duration":935.536556,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"168bad5cd72da15c5cc6eaa6bc382e6e41703620","short_id":"168bad5c","created_at":"2018-05-18T16:34:44.000+02:00","parent_ids":["98f1f4ed81b1a2800b57d448e3e2b1f626bd9d41"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-18T16:34:44.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/168bad5cd72da15c5cc6eaa6bc382e6e41703620"},"pipeline":{"id":22271526,"iid":null,"project_id":6138686,"sha":"168bad5cd72da15c5cc6eaa6bc382e6e41703620","ref":"pr-6857","status":"success","source":"push","created_at":"2018-05-18T16:02:48.949Z","updated_at":"2018-05-18T21:34:18.606Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22271526"},"web_url":"https://gitlab.com/coq/coq/-/jobs/69173565","artifacts":[{"file_type":"trace","size":70178,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":69173564,"status":"success","stage":"test","name":"warnings:base","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-18T16:02:49.218Z","started_at":"2018-05-18T19:29:46.120Z","finished_at":"2018-05-18T19:36:56.449Z","duration":430.328378,"queued_duration":928.052814,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"168bad5cd72da15c5cc6eaa6bc382e6e41703620","short_id":"168bad5c","created_at":"2018-05-18T16:34:44.000+02:00","parent_ids":["98f1f4ed81b1a2800b57d448e3e2b1f626bd9d41"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-18T16:34:44.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/168bad5cd72da15c5cc6eaa6bc382e6e41703620"},"pipeline":{"id":22271526,"iid":null,"project_id":6138686,"sha":"168bad5cd72da15c5cc6eaa6bc382e6e41703620","ref":"pr-6857","status":"success","source":"push","created_at":"2018-05-18T16:02:48.949Z","updated_at":"2018-05-18T21:34:18.606Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22271526"},"web_url":"https://gitlab.com/coq/coq/-/jobs/69173564","artifacts":[{"file_type":"trace","size":70138,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":69173563,"status":"success","stage":"test","name":"windows32","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-18T16:02:49.161Z","started_at":"2018-05-18T19:14:54.196Z","finished_at":"2018-05-18T20:33:47.897Z","duration":4733.701174,"queued_duration":36.062713,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"168bad5cd72da15c5cc6eaa6bc382e6e41703620","short_id":"168bad5c","created_at":"2018-05-18T16:34:44.000+02:00","parent_ids":["98f1f4ed81b1a2800b57d448e3e2b1f626bd9d41"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-18T16:34:44.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/168bad5cd72da15c5cc6eaa6bc382e6e41703620"},"pipeline":{"id":22271526,"iid":null,"project_id":6138686,"sha":"168bad5cd72da15c5cc6eaa6bc382e6e41703620","ref":"pr-6857","status":"success","source":"push","created_at":"2018-05-18T16:02:48.949Z","updated_at":"2018-05-18T21:34:18.606Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22271526"},"web_url":"https://gitlab.com/coq/coq/-/jobs/69173563","artifacts":[{"file_type":"trace","size":3476884,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":"2018-05-25T20:33:20.119Z","tag_list":["windows"]}
{"id":69173562,"status":"success","stage":"test","name":"windows64","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-18T16:02:49.129Z","started_at":"2018-05-18T19:14:19.215Z","finished_at":"2018-05-18T20:23:06.137Z","duration":4126.922004,"queued_duration":0.970221,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"168bad5cd72da15c5cc6eaa6bc382e6e41703620","short_id":"168bad5c","created_at":"2018-05-18T16:34:44.000+02:00","parent_ids":["98f1f4ed81b1a2800b57d448e3e2b1f626bd9d41"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-18T16:34:44.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/168bad5cd72da15c5cc6eaa6bc382e6e41703620"},"pipeline":{"id":22271526,"iid":null,"project_id":6138686,"sha":"168bad5cd72da15c5cc6eaa6bc382e6e41703620","ref":"pr-6857","status":"success","source":"push","created_at":"2018-05-18T16:02:48.949Z","updated_at":"2018-05-18T21:34:18.606Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22271526"},"web_url":"https://gitlab.com/coq/coq/-/jobs/69173562","artifacts":[{"file_type":"trace","size":3495361,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":"2018-05-25T20:22:39.043Z","tag_list":["windows"]}
{"id":69173560,"status":"success","stage":"build","name":"build:dune","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-18T16:02:49.087Z","started_at":"2018-05-18T18:42:24.686Z","finished_at":"2018-05-18T18:55:54.407Z","duration":809.721337,"queued_duration":9573.999056,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"168bad5cd72da15c5cc6eaa6bc382e6e41703620","short_id":"168bad5c","created_at":"2018-05-18T16:34:44.000+02:00","parent_ids":["98f1f4ed81b1a2800b57d448e3e2b1f626bd9d41"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-18T16:34:44.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/168bad5cd72da15c5cc6eaa6bc382e6e41703620"},"pipeline":{"id":22271526,"iid":null,"project_id":6138686,"sha":"168bad5cd72da15c5cc6eaa6bc382e6e41703620","ref":"pr-6857","status":"success","source":"push","created_at":"2018-05-18T16:02:48.949Z","updated_at":"2018-05-18T21:34:18.606Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22271526"},"web_url":"https://gitlab.com/coq/coq/-/jobs/69173560","artifacts":[{"file_type":"trace","size":23720,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":69173559,"status":"success","stage":"build","name":"build:edge+flambda","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-18T16:02:49.061Z","started_at":"2018-05-18T18:41:59.698Z","finished_at":"2018-05-18T19:14:12.699Z","duration":1933.000908,"queued_duration":9548.975475,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"168bad5cd72da15c5cc6eaa6bc382e6e41703620","short_id":"168bad5c","created_at":"2018-05-18T16:34:44.000+02:00","parent_ids":["98f1f4ed81b1a2800b57d448e3e2b1f626bd9d41"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-18T16:34:44.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/168bad5cd72da15c5cc6eaa6bc382e6e41703620"},"pipeline":{"id":22271526,"iid":null,"project_id":6138686,"sha":"168bad5cd72da15c5cc6eaa6bc382e6e41703620","ref":"pr-6857","status":"success","source":"push","created_at":"2018-05-18T16:02:48.949Z","updated_at":"2018-05-18T21:34:18.606Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22271526"},"web_url":"https://gitlab.com/coq/coq/-/jobs/69173559","artifacts":[{"file_type":"trace","size":339583,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2018-05-25T19:14:02.729Z","tag_list":[]}
{"id":69173558,"status":"success","stage":"build","name":"build:edge","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-18T16:02:49.019Z","started_at":"2018-05-18T18:40:07.761Z","finished_at":"2018-05-18T18:58:17.441Z","duration":1089.679482,"queued_duration":9436.996944,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"168bad5cd72da15c5cc6eaa6bc382e6e41703620","short_id":"168bad5c","created_at":"2018-05-18T16:34:44.000+02:00","parent_ids":["98f1f4ed81b1a2800b57d448e3e2b1f626bd9d41"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-18T16:34:44.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/168bad5cd72da15c5cc6eaa6bc382e6e41703620"},"pipeline":{"id":22271526,"iid":null,"project_id":6138686,"sha":"168bad5cd72da15c5cc6eaa6bc382e6e41703620","ref":"pr-6857","status":"success","source":"push","created_at":"2018-05-18T16:02:48.949Z","updated_at":"2018-05-18T21:34:18.606Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22271526"},"web_url":"https://gitlab.com/coq/coq/-/jobs/69173558","artifacts":[{"file_type":"trace","size":230714,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2018-05-25T18:58:13.909Z","tag_list":[]}
{"id":69173557,"status":"success","stage":"build","name":"build:base+32bit","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-18T16:02:48.991Z","started_at":"2018-05-18T18:40:07.442Z","finished_at":"2018-05-18T19:00:23.560Z","duration":1216.117203,"queued_duration":9436.634459,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"168bad5cd72da15c5cc6eaa6bc382e6e41703620","short_id":"168bad5c","created_at":"2018-05-18T16:34:44.000+02:00","parent_ids":["98f1f4ed81b1a2800b57d448e3e2b1f626bd9d41"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-18T16:34:44.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/168bad5cd72da15c5cc6eaa6bc382e6e41703620"},"pipeline":{"id":22271526,"iid":null,"project_id":6138686,"sha":"168bad5cd72da15c5cc6eaa6bc382e6e41703620","ref":"pr-6857","status":"success","source":"push","created_at":"2018-05-18T16:02:48.949Z","updated_at":"2018-05-18T21:34:18.606Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22271526"},"web_url":"https://gitlab.com/coq/coq/-/jobs/69173557","artifacts":[{"file_type":"trace","size":226857,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2018-05-25T19:00:22.209Z","tag_list":[]}
{"id":69173556,"status":"success","stage":"build","name":"build:base","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-18T16:02:48.964Z","started_at":"2018-05-18T18:38:25.531Z","finished_at":"2018-05-18T18:48:31.361Z","duration":605.830052,"queued_duration":9334.690343,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"168bad5cd72da15c5cc6eaa6bc382e6e41703620","short_id":"168bad5c","created_at":"2018-05-18T16:34:44.000+02:00","parent_ids":["98f1f4ed81b1a2800b57d448e3e2b1f626bd9d41"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-18T16:34:44.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/168bad5cd72da15c5cc6eaa6bc382e6e41703620"},"pipeline":{"id":22271526,"iid":null,"project_id":6138686,"sha":"168bad5cd72da15c5cc6eaa6bc382e6e41703620","ref":"pr-6857","status":"success","source":"push","created_at":"2018-05-18T16:02:48.949Z","updated_at":"2018-05-18T21:34:18.606Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22271526"},"web_url":"https://gitlab.com/coq/coq/-/jobs/69173556","artifacts":[{"file_type":"trace","size":401115,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":"2018-05-25T18:48:26.239Z","tag_list":[]}
