{"id":99712650,"status":"success","stage":"test","name":"ci-vst","ref":"pr-8509","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-20T11:44:36.345Z","started_at":"2018-09-20T12:11:48.595Z","finished_at":"2018-09-20T13:20:35.535Z","duration":4126.940901,"queued_duration":2.1882,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"61a487baf5769dac8ceceedc32eb54a141afec56","short_id":"61a487ba","created_at":"2018-09-20T13:32:08.000+02:00","parent_ids":["c534c93d1697996cb189d668fdd323bdc38cabee"],"title":"Scheme Equality: preparing to more solid uniformity.","message":"Scheme Equality: preparing to more solid uniformity.\n\nThere was code to partially support situations like:\n\nVariable A:Type.\nVariable eq_A:A->A->bool.\nInductive I := c : A -> I.\nScheme Equality for I.\n\nThis was working for variables, not for parameters, and in a fragile\nway, failing badly if the types were not the correct ones.\n\nWe prefere to deactivate it completely. Maybe a solution better than\nlooking dynamically in the environment would be that the Scheme\nEquality takes the relevant eq_A functions as explicit arguments of\nthe command.\n","author_name":"Hugo Herbelin","author_email":"Hugo.Herbelin@inria.fr","authored_date":"2018-09-20T13:32:08.000+02:00","committer_name":"Hugo Herbelin","committer_email":"Hugo.Herbelin@inria.fr","committed_date":"2018-09-20T13:32:08.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/61a487baf5769dac8ceceedc32eb54a141afec56"},"pipeline":{"id":30712805,"iid":3354,"project_id":6138686,"sha":"61a487baf5769dac8ceceedc32eb54a141afec56","ref":"pr-8509","status":"failed","source":"push","created_at":"2018-09-20T11:44:35.207Z","updated_at":"2018-09-20T14:13:31.460Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/30712805"},"web_url":"https://gitlab.com/coq/coq/-/jobs/99712650","artifacts":[{"file_type":"trace","size":219390,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":99712649,"status":"success","stage":"test","name":"ci-unimath","ref":"pr-8509","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-20T11:44:36.323Z","started_at":"2018-09-20T12:11:48.413Z","finished_at":"2018-09-20T12:29:24.693Z","duration":1056.279548,"queued_duration":1.937079,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"61a487baf5769dac8ceceedc32eb54a141afec56","short_id":"61a487ba","created_at":"2018-09-20T13:32:08.000+02:00","parent_ids":["c534c93d1697996cb189d668fdd323bdc38cabee"],"title":"Scheme Equality: preparing to more solid uniformity.","message":"Scheme Equality: preparing to more solid uniformity.\n\nThere was code to partially support situations like:\n\nVariable A:Type.\nVariable eq_A:A->A->bool.\nInductive I := c : A -> I.\nScheme Equality for I.\n\nThis was working for variables, not for parameters, and in a fragile\nway, failing badly if the types were not the correct ones.\n\nWe prefere to deactivate it completely. Maybe a solution better than\nlooking dynamically in the environment would be that the Scheme\nEquality takes the relevant eq_A functions as explicit arguments of\nthe command.\n","author_name":"Hugo Herbelin","author_email":"Hugo.Herbelin@inria.fr","authored_date":"2018-09-20T13:32:08.000+02:00","committer_name":"Hugo Herbelin","committer_email":"Hugo.Herbelin@inria.fr","committed_date":"2018-09-20T13:32:08.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/61a487baf5769dac8ceceedc32eb54a141afec56"},"pipeline":{"id":30712805,"iid":3354,"project_id":6138686,"sha":"61a487baf5769dac8ceceedc32eb54a141afec56","ref":"pr-8509","status":"failed","source":"push","created_at":"2018-09-20T11:44:35.207Z","updated_at":"2018-09-20T14:13:31.460Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/30712805"},"web_url":"https://gitlab.com/coq/coq/-/jobs/99712649","artifacts":[{"file_type":"trace","size":157559,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":99712648,"status":"success","stage":"test","name":"ci-sf","ref":"pr-8509","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-20T11:44:36.300Z","started_at":"2018-09-20T12:11:48.300Z","finished_at":"2018-09-20T12:16:34.428Z","duration":286.127977,"queued_duration":1.724155,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"61a487baf5769dac8ceceedc32eb54a141afec56","short_id":"61a487ba","created_at":"2018-09-20T13:32:08.000+02:00","parent_ids":["c534c93d1697996cb189d668fdd323bdc38cabee"],"title":"Scheme Equality: preparing to more solid uniformity.","message":"Scheme Equality: preparing to more solid uniformity.\n\nThere was code to partially support situations like:\n\nVariable A:Type.\nVariable eq_A:A->A->bool.\nInductive I := c : A -> I.\nScheme Equality for I.\n\nThis was working for variables, not for parameters, and in a fragile\nway, failing badly if the types were not the correct ones.\n\nWe prefere to deactivate it completely. Maybe a solution better than\nlooking dynamically in the environment would be that the Scheme\nEquality takes the relevant eq_A functions as explicit arguments of\nthe command.\n","author_name":"Hugo Herbelin","author_email":"Hugo.Herbelin@inria.fr","authored_date":"2018-09-20T13:32:08.000+02:00","committer_name":"Hugo Herbelin","committer_email":"Hugo.Herbelin@inria.fr","committed_date":"2018-09-20T13:32:08.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/61a487baf5769dac8ceceedc32eb54a141afec56"},"pipeline":{"id":30712805,"iid":3354,"project_id":6138686,"sha":"61a487baf5769dac8ceceedc32eb54a141afec56","ref":"pr-8509","status":"failed","source":"push","created_at":"2018-09-20T11:44:35.207Z","updated_at":"2018-09-20T14:13:31.460Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/30712805"},"web_url":"https://gitlab.com/coq/coq/-/jobs/99712648","artifacts":[{"file_type":"trace","size":265611,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":99712647,"status":"success","stage":"test","name":"ci-quickchick","ref":"pr-8509","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-20T11:44:36.277Z","started_at":"2018-09-20T12:11:46.996Z","finished_at":"2018-09-20T12:17:35.767Z","duration":348.771179,"queued_duration":0.35798,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"61a487baf5769dac8ceceedc32eb54a141afec56","short_id":"61a487ba","created_at":"2018-09-20T13:32:08.000+02:00","parent_ids":["c534c93d1697996cb189d668fdd323bdc38cabee"],"title":"Scheme Equality: preparing to more solid uniformity.","message":"Scheme Equality: preparing to more solid uniformity.\n\nThere was code to partially support situations like:\n\nVariable A:Type.\nVariable eq_A:A->A->bool.\nInductive I := c : A -> I.\nScheme Equality for I.\n\nThis was working for variables, not for parameters, and in a fragile\nway, failing badly if the types were not the correct ones.\n\nWe prefere to deactivate it completely. Maybe a solution better than\nlooking dynamically in the environment would be that the Scheme\nEquality takes the relevant eq_A functions as explicit arguments of\nthe command.\n","author_name":"Hugo Herbelin","author_email":"Hugo.Herbelin@inria.fr","authored_date":"2018-09-20T13:32:08.000+02:00","committer_name":"Hugo Herbelin","committer_email":"Hugo.Herbelin@inria.fr","committed_date":"2018-09-20T13:32:08.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/61a487baf5769dac8ceceedc32eb54a141afec56"},"pipeline":{"id":30712805,"iid":3354,"project_id":6138686,"sha":"61a487baf5769dac8ceceedc32eb54a141afec56","ref":"pr-8509","status":"failed","source":"push","created_at":"2018-09-20T11:44:35.207Z","updated_at":"2018-09-20T14:13:31.460Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/30712805"},"web_url":"https://gitlab.com/coq/coq/-/jobs/99712647","artifacts":[{"file_type":"trace","size":260451,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":99712646,"status":"success","stage":"test","name":"ci-pidetop","ref":"pr-8509","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-20T11:44:36.256Z","started_at":"2018-09-20T12:11:46.873Z","finished_at":"2018-09-20T12:14:44.356Z","duration":177.482482,"queued_duration":0.187794,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"61a487baf5769dac8ceceedc32eb54a141afec56","short_id":"61a487ba","created_at":"2018-09-20T13:32:08.000+02:00","parent_ids":["c534c93d1697996cb189d668fdd323bdc38cabee"],"title":"Scheme Equality: preparing to more solid uniformity.","message":"Scheme Equality: preparing to more solid uniformity.\n\nThere was code to partially support situations like:\n\nVariable A:Type.\nVariable eq_A:A->A->bool.\nInductive I := c : A -> I.\nScheme Equality for I.\n\nThis was working for variables, not for parameters, and in a fragile\nway, failing badly if the types were not the correct ones.\n\nWe prefere to deactivate it completely. Maybe a solution better than\nlooking dynamically in the environment would be that the Scheme\nEquality takes the relevant eq_A functions as explicit arguments of\nthe command.\n","author_name":"Hugo Herbelin","author_email":"Hugo.Herbelin@inria.fr","authored_date":"2018-09-20T13:32:08.000+02:00","committer_name":"Hugo Herbelin","committer_email":"Hugo.Herbelin@inria.fr","committed_date":"2018-09-20T13:32:08.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/61a487baf5769dac8ceceedc32eb54a141afec56"},"pipeline":{"id":30712805,"iid":3354,"project_id":6138686,"sha":"61a487baf5769dac8ceceedc32eb54a141afec56","ref":"pr-8509","status":"failed","source":"push","created_at":"2018-09-20T11:44:35.207Z","updated_at":"2018-09-20T14:13:31.460Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/30712805"},"web_url":"https://gitlab.com/coq/coq/-/jobs/99712646","artifacts":[{"file_type":"trace","size":25300,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":99712645,"status":"success","stage":"test","name":"ci-mtac2","ref":"pr-8509","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-20T11:44:36.234Z","started_at":"2018-09-20T12:11:46.904Z","finished_at":"2018-09-20T12:15:37.029Z","duration":230.125108,"queued_duration":0.166679,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"61a487baf5769dac8ceceedc32eb54a141afec56","short_id":"61a487ba","created_at":"2018-09-20T13:32:08.000+02:00","parent_ids":["c534c93d1697996cb189d668fdd323bdc38cabee"],"title":"Scheme Equality: preparing to more solid uniformity.","message":"Scheme Equality: preparing to more solid uniformity.\n\nThere was code to partially support situations like:\n\nVariable A:Type.\nVariable eq_A:A->A->bool.\nInductive I := c : A -> I.\nScheme Equality for I.\n\nThis was working for variables, not for parameters, and in a fragile\nway, failing badly if the types were not the correct ones.\n\nWe prefere to deactivate it completely. Maybe a solution better than\nlooking dynamically in the environment would be that the Scheme\nEquality takes the relevant eq_A functions as explicit arguments of\nthe command.\n","author_name":"Hugo Herbelin","author_email":"Hugo.Herbelin@inria.fr","authored_date":"2018-09-20T13:32:08.000+02:00","committer_name":"Hugo Herbelin","committer_email":"Hugo.Herbelin@inria.fr","committed_date":"2018-09-20T13:32:08.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/61a487baf5769dac8ceceedc32eb54a141afec56"},"pipeline":{"id":30712805,"iid":3354,"project_id":6138686,"sha":"61a487baf5769dac8ceceedc32eb54a141afec56","ref":"pr-8509","status":"failed","source":"push","created_at":"2018-09-20T11:44:35.207Z","updated_at":"2018-09-20T14:13:31.460Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/30712805"},"web_url":"https://gitlab.com/coq/coq/-/jobs/99712645","artifacts":[{"file_type":"trace","size":161734,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":99712644,"status":"success","stage":"test","name":"ci-math-comp","ref":"pr-8509","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-20T11:44:36.210Z","started_at":"2018-09-20T12:11:47.094Z","finished_at":"2018-09-20T13:05:27.195Z","duration":3220.101121,"queued_duration":0.241434,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"61a487baf5769dac8ceceedc32eb54a141afec56","short_id":"61a487ba","created_at":"2018-09-20T13:32:08.000+02:00","parent_ids":["c534c93d1697996cb189d668fdd323bdc38cabee"],"title":"Scheme Equality: preparing to more solid uniformity.","message":"Scheme Equality: preparing to more solid uniformity.\n\nThere was code to partially support situations like:\n\nVariable A:Type.\nVariable eq_A:A->A->bool.\nInductive I := c : A -> I.\nScheme Equality for I.\n\nThis was working for variables, not for parameters, and in a fragile\nway, failing badly if the types were not the correct ones.\n\nWe prefere to deactivate it completely. Maybe a solution better than\nlooking dynamically in the environment would be that the Scheme\nEquality takes the relevant eq_A functions as explicit arguments of\nthe command.\n","author_name":"Hugo Herbelin","author_email":"Hugo.Herbelin@inria.fr","authored_date":"2018-09-20T13:32:08.000+02:00","committer_name":"Hugo Herbelin","committer_email":"Hugo.Herbelin@inria.fr","committed_date":"2018-09-20T13:32:08.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/61a487baf5769dac8ceceedc32eb54a141afec56"},"pipeline":{"id":30712805,"iid":3354,"project_id":6138686,"sha":"61a487baf5769dac8ceceedc32eb54a141afec56","ref":"pr-8509","status":"failed","source":"push","created_at":"2018-09-20T11:44:35.207Z","updated_at":"2018-09-20T14:13:31.460Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/30712805"},"web_url":"https://gitlab.com/coq/coq/-/jobs/99712644","artifacts":[{"file_type":"trace","size":359030,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":99712643,"status":"success","stage":"test","name":"ci-ltac2","ref":"pr-8509","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-20T11:44:36.185Z","started_at":"2018-09-20T12:11:47.023Z","finished_at":"2018-09-20T12:23:32.252Z","duration":705.228959,"queued_duration":0.115544,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"61a487baf5769dac8ceceedc32eb54a141afec56","short_id":"61a487ba","created_at":"2018-09-20T13:32:08.000+02:00","parent_ids":["c534c93d1697996cb189d668fdd323bdc38cabee"],"title":"Scheme Equality: preparing to more solid uniformity.","message":"Scheme Equality: preparing to more solid uniformity.\n\nThere was code to partially support situations like:\n\nVariable A:Type.\nVariable eq_A:A->A->bool.\nInductive I := c : A -> I.\nScheme Equality for I.\n\nThis was working for variables, not for parameters, and in a fragile\nway, failing badly if the types were not the correct ones.\n\nWe prefere to deactivate it completely. Maybe a solution better than\nlooking dynamically in the environment would be that the Scheme\nEquality takes the relevant eq_A functions as explicit arguments of\nthe command.\n","author_name":"Hugo Herbelin","author_email":"Hugo.Herbelin@inria.fr","authored_date":"2018-09-20T13:32:08.000+02:00","committer_name":"Hugo Herbelin","committer_email":"Hugo.Herbelin@inria.fr","committed_date":"2018-09-20T13:32:08.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/61a487baf5769dac8ceceedc32eb54a141afec56"},"pipeline":{"id":30712805,"iid":3354,"project_id":6138686,"sha":"61a487baf5769dac8ceceedc32eb54a141afec56","ref":"pr-8509","status":"failed","source":"push","created_at":"2018-09-20T11:44:35.207Z","updated_at":"2018-09-20T14:13:31.460Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/30712805"},"web_url":"https://gitlab.com/coq/coq/-/jobs/99712643","artifacts":[{"file_type":"trace","size":37725,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":99712642,"status":"success","stage":"test","name":"ci-iris-lambda-rust","ref":"pr-8509","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-20T11:44:36.162Z","started_at":"2018-09-20T12:11:47.832Z","finished_at":"2018-09-20T13:22:12.910Z","duration":4225.078392,"queued_duration":0.875048,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"61a487baf5769dac8ceceedc32eb54a141afec56","short_id":"61a487ba","created_at":"2018-09-20T13:32:08.000+02:00","parent_ids":["c534c93d1697996cb189d668fdd323bdc38cabee"],"title":"Scheme Equality: preparing to more solid uniformity.","message":"Scheme Equality: preparing to more solid uniformity.\n\nThere was code to partially support situations like:\n\nVariable A:Type.\nVariable eq_A:A->A->bool.\nInductive I := c : A -> I.\nScheme Equality for I.\n\nThis was working for variables, not for parameters, and in a fragile\nway, failing badly if the types were not the correct ones.\n\nWe prefere to deactivate it completely. Maybe a solution better than\nlooking dynamically in the environment would be that the Scheme\nEquality takes the relevant eq_A functions as explicit arguments of\nthe command.\n","author_name":"Hugo Herbelin","author_email":"Hugo.Herbelin@inria.fr","authored_date":"2018-09-20T13:32:08.000+02:00","committer_name":"Hugo Herbelin","committer_email":"Hugo.Herbelin@inria.fr","committed_date":"2018-09-20T13:32:08.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/61a487baf5769dac8ceceedc32eb54a141afec56"},"pipeline":{"id":30712805,"iid":3354,"project_id":6138686,"sha":"61a487baf5769dac8ceceedc32eb54a141afec56","ref":"pr-8509","status":"failed","source":"push","created_at":"2018-09-20T11:44:35.207Z","updated_at":"2018-09-20T14:13:31.460Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/30712805"},"web_url":"https://gitlab.com/coq/coq/-/jobs/99712642","artifacts":[{"file_type":"trace","size":287277,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":99712641,"status":"success","stage":"test","name":"ci-hott","ref":"pr-8509","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-20T11:44:36.140Z","started_at":"2018-09-20T12:11:47.779Z","finished_at":"2018-09-20T12:33:04.004Z","duration":1276.225547,"queued_duration":0.788002,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"61a487baf5769dac8ceceedc32eb54a141afec56","short_id":"61a487ba","created_at":"2018-09-20T13:32:08.000+02:00","parent_ids":["c534c93d1697996cb189d668fdd323bdc38cabee"],"title":"Scheme Equality: preparing to more solid uniformity.","message":"Scheme Equality: preparing to more solid uniformity.\n\nThere was code to partially support situations like:\n\nVariable A:Type.\nVariable eq_A:A->A->bool.\nInductive I := c : A -> I.\nScheme Equality for I.\n\nThis was working for variables, not for parameters, and in a fragile\nway, failing badly if the types were not the correct ones.\n\nWe prefere to deactivate it completely. Maybe a solution better than\nlooking dynamically in the environment would be that the Scheme\nEquality takes the relevant eq_A functions as explicit arguments of\nthe command.\n","author_name":"Hugo Herbelin","author_email":"Hugo.Herbelin@inria.fr","authored_date":"2018-09-20T13:32:08.000+02:00","committer_name":"Hugo Herbelin","committer_email":"Hugo.Herbelin@inria.fr","committed_date":"2018-09-20T13:32:08.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/61a487baf5769dac8ceceedc32eb54a141afec56"},"pipeline":{"id":30712805,"iid":3354,"project_id":6138686,"sha":"61a487baf5769dac8ceceedc32eb54a141afec56","ref":"pr-8509","status":"failed","source":"push","created_at":"2018-09-20T11:44:35.207Z","updated_at":"2018-09-20T14:13:31.460Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/30712805"},"web_url":"https://gitlab.com/coq/coq/-/jobs/99712641","artifacts":[{"file_type":"trace","size":93787,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":99712640,"status":"success","stage":"test","name":"ci-geocoq","ref":"pr-8509","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-20T11:44:36.119Z","started_at":"2018-09-20T12:11:47.646Z","finished_at":"2018-09-20T13:15:45.094Z","duration":3837.447378,"queued_duration":0.597246,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"61a487baf5769dac8ceceedc32eb54a141afec56","short_id":"61a487ba","created_at":"2018-09-20T13:32:08.000+02:00","parent_ids":["c534c93d1697996cb189d668fdd323bdc38cabee"],"title":"Scheme Equality: preparing to more solid uniformity.","message":"Scheme Equality: preparing to more solid uniformity.\n\nThere was code to partially support situations like:\n\nVariable A:Type.\nVariable eq_A:A->A->bool.\nInductive I := c : A -> I.\nScheme Equality for I.\n\nThis was working for variables, not for parameters, and in a fragile\nway, failing badly if the types were not the correct ones.\n\nWe prefere to deactivate it completely. Maybe a solution better than\nlooking dynamically in the environment would be that the Scheme\nEquality takes the relevant eq_A functions as explicit arguments of\nthe command.\n","author_name":"Hugo Herbelin","author_email":"Hugo.Herbelin@inria.fr","authored_date":"2018-09-20T13:32:08.000+02:00","committer_name":"Hugo Herbelin","committer_email":"Hugo.Herbelin@inria.fr","committed_date":"2018-09-20T13:32:08.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/61a487baf5769dac8ceceedc32eb54a141afec56"},"pipeline":{"id":30712805,"iid":3354,"project_id":6138686,"sha":"61a487baf5769dac8ceceedc32eb54a141afec56","ref":"pr-8509","status":"failed","source":"push","created_at":"2018-09-20T11:44:35.207Z","updated_at":"2018-09-20T14:13:31.460Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/30712805"},"web_url":"https://gitlab.com/coq/coq/-/jobs/99712640","artifacts":[{"file_type":"trace","size":334497,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":99712639,"status":"success","stage":"test","name":"ci-formal-topology","ref":"pr-8509","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-20T11:44:36.096Z","started_at":"2018-09-20T12:11:47.254Z","finished_at":"2018-09-20T12:54:22.206Z","duration":2554.952136,"queued_duration":0.137156,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"61a487baf5769dac8ceceedc32eb54a141afec56","short_id":"61a487ba","created_at":"2018-09-20T13:32:08.000+02:00","parent_ids":["c534c93d1697996cb189d668fdd323bdc38cabee"],"title":"Scheme Equality: preparing to more solid uniformity.","message":"Scheme Equality: preparing to more solid uniformity.\n\nThere was code to partially support situations like:\n\nVariable A:Type.\nVariable eq_A:A->A->bool.\nInductive I := c : A -> I.\nScheme Equality for I.\n\nThis was working for variables, not for parameters, and in a fragile\nway, failing badly if the types were not the correct ones.\n\nWe prefere to deactivate it completely. Maybe a solution better than\nlooking dynamically in the environment would be that the Scheme\nEquality takes the relevant eq_A functions as explicit arguments of\nthe command.\n","author_name":"Hugo Herbelin","author_email":"Hugo.Herbelin@inria.fr","authored_date":"2018-09-20T13:32:08.000+02:00","committer_name":"Hugo Herbelin","committer_email":"Hugo.Herbelin@inria.fr","committed_date":"2018-09-20T13:32:08.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/61a487baf5769dac8ceceedc32eb54a141afec56"},"pipeline":{"id":30712805,"iid":3354,"project_id":6138686,"sha":"61a487baf5769dac8ceceedc32eb54a141afec56","ref":"pr-8509","status":"failed","source":"push","created_at":"2018-09-20T11:44:35.207Z","updated_at":"2018-09-20T14:13:31.460Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/30712805"},"web_url":"https://gitlab.com/coq/coq/-/jobs/99712639","artifacts":[{"file_type":"trace","size":739707,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":99712638,"status":"success","stage":"test","name":"ci-flocq","ref":"pr-8509","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-20T11:44:36.075Z","started_at":"2018-09-20T12:11:47.337Z","finished_at":"2018-09-20T12:26:51.143Z","duration":903.805479,"queued_duration":0.160997,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"61a487baf5769dac8ceceedc32eb54a141afec56","short_id":"61a487ba","created_at":"2018-09-20T13:32:08.000+02:00","parent_ids":["c534c93d1697996cb189d668fdd323bdc38cabee"],"title":"Scheme Equality: preparing to more solid uniformity.","message":"Scheme Equality: preparing to more solid uniformity.\n\nThere was code to partially support situations like:\n\nVariable A:Type.\nVariable eq_A:A->A->bool.\nInductive I := c : A -> I.\nScheme Equality for I.\n\nThis was working for variables, not for parameters, and in a fragile\nway, failing badly if the types were not the correct ones.\n\nWe prefere to deactivate it completely. Maybe a solution better than\nlooking dynamically in the environment would be that the Scheme\nEquality takes the relevant eq_A functions as explicit arguments of\nthe command.\n","author_name":"Hugo Herbelin","author_email":"Hugo.Herbelin@inria.fr","authored_date":"2018-09-20T13:32:08.000+02:00","committer_name":"Hugo Herbelin","committer_email":"Hugo.Herbelin@inria.fr","committed_date":"2018-09-20T13:32:08.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/61a487baf5769dac8ceceedc32eb54a141afec56"},"pipeline":{"id":30712805,"iid":3354,"project_id":6138686,"sha":"61a487baf5769dac8ceceedc32eb54a141afec56","ref":"pr-8509","status":"failed","source":"push","created_at":"2018-09-20T11:44:35.207Z","updated_at":"2018-09-20T14:13:31.460Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/30712805"},"web_url":"https://gitlab.com/coq/coq/-/jobs/99712638","artifacts":[{"file_type":"trace","size":616461,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":99712637,"status":"success","stage":"test","name":"ci-fiat-parsers","ref":"pr-8509","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-20T11:44:36.054Z","started_at":"2018-09-20T12:11:47.376Z","finished_at":"2018-09-20T12:34:25.339Z","duration":1357.962319,"queued_duration":0.163364,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"61a487baf5769dac8ceceedc32eb54a141afec56","short_id":"61a487ba","created_at":"2018-09-20T13:32:08.000+02:00","parent_ids":["c534c93d1697996cb189d668fdd323bdc38cabee"],"title":"Scheme Equality: preparing to more solid uniformity.","message":"Scheme Equality: preparing to more solid uniformity.\n\nThere was code to partially support situations like:\n\nVariable A:Type.\nVariable eq_A:A->A->bool.\nInductive I := c : A -> I.\nScheme Equality for I.\n\nThis was working for variables, not for parameters, and in a fragile\nway, failing badly if the types were not the correct ones.\n\nWe prefere to deactivate it completely. Maybe a solution better than\nlooking dynamically in the environment would be that the Scheme\nEquality takes the relevant eq_A functions as explicit arguments of\nthe command.\n","author_name":"Hugo Herbelin","author_email":"Hugo.Herbelin@inria.fr","authored_date":"2018-09-20T13:32:08.000+02:00","committer_name":"Hugo Herbelin","committer_email":"Hugo.Herbelin@inria.fr","committed_date":"2018-09-20T13:32:08.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/61a487baf5769dac8ceceedc32eb54a141afec56"},"pipeline":{"id":30712805,"iid":3354,"project_id":6138686,"sha":"61a487baf5769dac8ceceedc32eb54a141afec56","ref":"pr-8509","status":"failed","source":"push","created_at":"2018-09-20T11:44:35.207Z","updated_at":"2018-09-20T14:13:31.460Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/30712805"},"web_url":"https://gitlab.com/coq/coq/-/jobs/99712637","artifacts":[{"file_type":"trace","size":237721,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":99712636,"status":"success","stage":"test","name":"ci-fiat-crypto-legacy","ref":"pr-8509","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-20T11:44:36.034Z","started_at":"2018-09-20T12:11:47.471Z","finished_at":"2018-09-20T14:13:31.297Z","duration":7303.825556,"queued_duration":0.165094,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"61a487baf5769dac8ceceedc32eb54a141afec56","short_id":"61a487ba","created_at":"2018-09-20T13:32:08.000+02:00","parent_ids":["c534c93d1697996cb189d668fdd323bdc38cabee"],"title":"Scheme Equality: preparing to more solid uniformity.","message":"Scheme Equality: preparing to more solid uniformity.\n\nThere was code to partially support situations like:\n\nVariable A:Type.\nVariable eq_A:A->A->bool.\nInductive I := c : A -> I.\nScheme Equality for I.\n\nThis was working for variables, not for parameters, and in a fragile\nway, failing badly if the types were not the correct ones.\n\nWe prefere to deactivate it completely. Maybe a solution better than\nlooking dynamically in the environment would be that the Scheme\nEquality takes the relevant eq_A functions as explicit arguments of\nthe command.\n","author_name":"Hugo Herbelin","author_email":"Hugo.Herbelin@inria.fr","authored_date":"2018-09-20T13:32:08.000+02:00","committer_name":"Hugo Herbelin","committer_email":"Hugo.Herbelin@inria.fr","committed_date":"2018-09-20T13:32:08.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/61a487baf5769dac8ceceedc32eb54a141afec56"},"pipeline":{"id":30712805,"iid":3354,"project_id":6138686,"sha":"61a487baf5769dac8ceceedc32eb54a141afec56","ref":"pr-8509","status":"failed","source":"push","created_at":"2018-09-20T11:44:35.207Z","updated_at":"2018-09-20T14:13:31.460Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/30712805"},"web_url":"https://gitlab.com/coq/coq/-/jobs/99712636","artifacts":[{"file_type":"trace","size":654134,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":99712635,"status":"success","stage":"test","name":"ci-fiat-crypto","ref":"pr-8509","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-20T11:44:36.010Z","started_at":"2018-09-20T12:11:47.544Z","finished_at":"2018-09-20T12:56:06.949Z","duration":2659.404429,"queued_duration":0.125885,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"61a487baf5769dac8ceceedc32eb54a141afec56","short_id":"61a487ba","created_at":"2018-09-20T13:32:08.000+02:00","parent_ids":["c534c93d1697996cb189d668fdd323bdc38cabee"],"title":"Scheme Equality: preparing to more solid uniformity.","message":"Scheme Equality: preparing to more solid uniformity.\n\nThere was code to partially support situations like:\n\nVariable A:Type.\nVariable eq_A:A->A->bool.\nInductive I := c : A -> I.\nScheme Equality for I.\n\nThis was working for variables, not for parameters, and in a fragile\nway, failing badly if the types were not the correct ones.\n\nWe prefere to deactivate it completely. Maybe a solution better than\nlooking dynamically in the environment would be that the Scheme\nEquality takes the relevant eq_A functions as explicit arguments of\nthe command.\n","author_name":"Hugo Herbelin","author_email":"Hugo.Herbelin@inria.fr","authored_date":"2018-09-20T13:32:08.000+02:00","committer_name":"Hugo Herbelin","committer_email":"Hugo.Herbelin@inria.fr","committed_date":"2018-09-20T13:32:08.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/61a487baf5769dac8ceceedc32eb54a141afec56"},"pipeline":{"id":30712805,"iid":3354,"project_id":6138686,"sha":"61a487baf5769dac8ceceedc32eb54a141afec56","ref":"pr-8509","status":"failed","source":"push","created_at":"2018-09-20T11:44:35.207Z","updated_at":"2018-09-20T14:13:31.460Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/30712805"},"web_url":"https://gitlab.com/coq/coq/-/jobs/99712635","artifacts":[{"file_type":"trace","size":867226,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":99712634,"status":"success","stage":"test","name":"ci-fcsl-pcm","ref":"pr-8509","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-20T11:44:35.974Z","started_at":"2018-09-20T12:11:47.709Z","finished_at":"2018-09-20T12:22:20.831Z","duration":633.12183,"queued_duration":0.207166,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"61a487baf5769dac8ceceedc32eb54a141afec56","short_id":"61a487ba","created_at":"2018-09-20T13:32:08.000+02:00","parent_ids":["c534c93d1697996cb189d668fdd323bdc38cabee"],"title":"Scheme Equality: preparing to more solid uniformity.","message":"Scheme Equality: preparing to more solid uniformity.\n\nThere was code to partially support situations like:\n\nVariable A:Type.\nVariable eq_A:A->A->bool.\nInductive I := c : A -> I.\nScheme Equality for I.\n\nThis was working for variables, not for parameters, and in a fragile\nway, failing badly if the types were not the correct ones.\n\nWe prefere to deactivate it completely. Maybe a solution better than\nlooking dynamically in the environment would be that the Scheme\nEquality takes the relevant eq_A functions as explicit arguments of\nthe command.\n","author_name":"Hugo Herbelin","author_email":"Hugo.Herbelin@inria.fr","authored_date":"2018-09-20T13:32:08.000+02:00","committer_name":"Hugo Herbelin","committer_email":"Hugo.Herbelin@inria.fr","committed_date":"2018-09-20T13:32:08.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/61a487baf5769dac8ceceedc32eb54a141afec56"},"pipeline":{"id":30712805,"iid":3354,"project_id":6138686,"sha":"61a487baf5769dac8ceceedc32eb54a141afec56","ref":"pr-8509","status":"failed","source":"push","created_at":"2018-09-20T11:44:35.207Z","updated_at":"2018-09-20T14:13:31.460Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/30712805"},"web_url":"https://gitlab.com/coq/coq/-/jobs/99712634","artifacts":[{"file_type":"trace","size":128600,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":99712633,"status":"success","stage":"test","name":"ci-equations","ref":"pr-8509","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-20T11:44:35.906Z","started_at":"2018-09-20T12:11:47.743Z","finished_at":"2018-09-20T12:18:38.822Z","duration":411.078905,"queued_duration":0.130429,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"61a487baf5769dac8ceceedc32eb54a141afec56","short_id":"61a487ba","created_at":"2018-09-20T13:32:08.000+02:00","parent_ids":["c534c93d1697996cb189d668fdd323bdc38cabee"],"title":"Scheme Equality: preparing to more solid uniformity.","message":"Scheme Equality: preparing to more solid uniformity.\n\nThere was code to partially support situations like:\n\nVariable A:Type.\nVariable eq_A:A->A->bool.\nInductive I := c : A -> I.\nScheme Equality for I.\n\nThis was working for variables, not for parameters, and in a fragile\nway, failing badly if the types were not the correct ones.\n\nWe prefere to deactivate it completely. Maybe a solution better than\nlooking dynamically in the environment would be that the Scheme\nEquality takes the relevant eq_A functions as explicit arguments of\nthe command.\n","author_name":"Hugo Herbelin","author_email":"Hugo.Herbelin@inria.fr","authored_date":"2018-09-20T13:32:08.000+02:00","committer_name":"Hugo Herbelin","committer_email":"Hugo.Herbelin@inria.fr","committed_date":"2018-09-20T13:32:08.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/61a487baf5769dac8ceceedc32eb54a141afec56"},"pipeline":{"id":30712805,"iid":3354,"project_id":6138686,"sha":"61a487baf5769dac8ceceedc32eb54a141afec56","ref":"pr-8509","status":"failed","source":"push","created_at":"2018-09-20T11:44:35.207Z","updated_at":"2018-09-20T14:13:31.460Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/30712805"},"web_url":"https://gitlab.com/coq/coq/-/jobs/99712633","artifacts":[{"file_type":"trace","size":62294,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":99712632,"status":"success","stage":"test","name":"ci-elpi","ref":"pr-8509","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-20T11:44:35.874Z","started_at":"2018-09-20T12:11:48.220Z","finished_at":"2018-09-20T12:15:52.096Z","duration":243.875987,"queued_duration":0.511944,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"61a487baf5769dac8ceceedc32eb54a141afec56","short_id":"61a487ba","created_at":"2018-09-20T13:32:08.000+02:00","parent_ids":["c534c93d1697996cb189d668fdd323bdc38cabee"],"title":"Scheme Equality: preparing to more solid uniformity.","message":"Scheme Equality: preparing to more solid uniformity.\n\nThere was code to partially support situations like:\n\nVariable A:Type.\nVariable eq_A:A->A->bool.\nInductive I := c : A -> I.\nScheme Equality for I.\n\nThis was working for variables, not for parameters, and in a fragile\nway, failing badly if the types were not the correct ones.\n\nWe prefere to deactivate it completely. Maybe a solution better than\nlooking dynamically in the environment would be that the Scheme\nEquality takes the relevant eq_A functions as explicit arguments of\nthe command.\n","author_name":"Hugo Herbelin","author_email":"Hugo.Herbelin@inria.fr","authored_date":"2018-09-20T13:32:08.000+02:00","committer_name":"Hugo Herbelin","committer_email":"Hugo.Herbelin@inria.fr","committed_date":"2018-09-20T13:32:08.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/61a487baf5769dac8ceceedc32eb54a141afec56"},"pipeline":{"id":30712805,"iid":3354,"project_id":6138686,"sha":"61a487baf5769dac8ceceedc32eb54a141afec56","ref":"pr-8509","status":"failed","source":"push","created_at":"2018-09-20T11:44:35.207Z","updated_at":"2018-09-20T14:13:31.460Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/30712805"},"web_url":"https://gitlab.com/coq/coq/-/jobs/99712632","artifacts":[{"file_type":"trace","size":462757,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":99712631,"status":"success","stage":"test","name":"ci-cross-crypto","ref":"pr-8509","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-20T11:44:35.845Z","started_at":"2018-09-20T12:11:48.091Z","finished_at":"2018-09-20T12:52:39.258Z","duration":2451.16753,"queued_duration":0.324206,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"61a487baf5769dac8ceceedc32eb54a141afec56","short_id":"61a487ba","created_at":"2018-09-20T13:32:08.000+02:00","parent_ids":["c534c93d1697996cb189d668fdd323bdc38cabee"],"title":"Scheme Equality: preparing to more solid uniformity.","message":"Scheme Equality: preparing to more solid uniformity.\n\nThere was code to partially support situations like:\n\nVariable A:Type.\nVariable eq_A:A->A->bool.\nInductive I := c : A -> I.\nScheme Equality for I.\n\nThis was working for variables, not for parameters, and in a fragile\nway, failing badly if the types were not the correct ones.\n\nWe prefere to deactivate it completely. Maybe a solution better than\nlooking dynamically in the environment would be that the Scheme\nEquality takes the relevant eq_A functions as explicit arguments of\nthe command.\n","author_name":"Hugo Herbelin","author_email":"Hugo.Herbelin@inria.fr","authored_date":"2018-09-20T13:32:08.000+02:00","committer_name":"Hugo Herbelin","committer_email":"Hugo.Herbelin@inria.fr","committed_date":"2018-09-20T13:32:08.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/61a487baf5769dac8ceceedc32eb54a141afec56"},"pipeline":{"id":30712805,"iid":3354,"project_id":6138686,"sha":"61a487baf5769dac8ceceedc32eb54a141afec56","ref":"pr-8509","status":"failed","source":"push","created_at":"2018-09-20T11:44:35.207Z","updated_at":"2018-09-20T14:13:31.460Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/30712805"},"web_url":"https://gitlab.com/coq/coq/-/jobs/99712631","artifacts":[{"file_type":"trace","size":39246,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":99712630,"status":"success","stage":"test","name":"ci-coquelicot","ref":"pr-8509","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-20T11:44:35.809Z","started_at":"2018-09-20T12:11:48.137Z","finished_at":"2018-09-20T12:17:11.694Z","duration":323.556335,"queued_duration":0.33036,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"61a487baf5769dac8ceceedc32eb54a141afec56","short_id":"61a487ba","created_at":"2018-09-20T13:32:08.000+02:00","parent_ids":["c534c93d1697996cb189d668fdd323bdc38cabee"],"title":"Scheme Equality: preparing to more solid uniformity.","message":"Scheme Equality: preparing to more solid uniformity.\n\nThere was code to partially support situations like:\n\nVariable A:Type.\nVariable eq_A:A->A->bool.\nInductive I := c : A -> I.\nScheme Equality for I.\n\nThis was working for variables, not for parameters, and in a fragile\nway, failing badly if the types were not the correct ones.\n\nWe prefere to deactivate it completely. Maybe a solution better than\nlooking dynamically in the environment would be that the Scheme\nEquality takes the relevant eq_A functions as explicit arguments of\nthe command.\n","author_name":"Hugo Herbelin","author_email":"Hugo.Herbelin@inria.fr","authored_date":"2018-09-20T13:32:08.000+02:00","committer_name":"Hugo Herbelin","committer_email":"Hugo.Herbelin@inria.fr","committed_date":"2018-09-20T13:32:08.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/61a487baf5769dac8ceceedc32eb54a141afec56"},"pipeline":{"id":30712805,"iid":3354,"project_id":6138686,"sha":"61a487baf5769dac8ceceedc32eb54a141afec56","ref":"pr-8509","status":"failed","source":"push","created_at":"2018-09-20T11:44:35.207Z","updated_at":"2018-09-20T14:13:31.460Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/30712805"},"web_url":"https://gitlab.com/coq/coq/-/jobs/99712630","artifacts":[{"file_type":"trace","size":129682,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":99712629,"status":"success","stage":"test","name":"ci-coq-dpdgraph","ref":"pr-8509","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-20T11:44:35.779Z","started_at":"2018-09-20T12:11:48.089Z","finished_at":"2018-09-20T12:19:47.084Z","duration":478.995544,"queued_duration":0.243954,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"61a487baf5769dac8ceceedc32eb54a141afec56","short_id":"61a487ba","created_at":"2018-09-20T13:32:08.000+02:00","parent_ids":["c534c93d1697996cb189d668fdd323bdc38cabee"],"title":"Scheme Equality: preparing to more solid uniformity.","message":"Scheme Equality: preparing to more solid uniformity.\n\nThere was code to partially support situations like:\n\nVariable A:Type.\nVariable eq_A:A->A->bool.\nInductive I := c : A -> I.\nScheme Equality for I.\n\nThis was working for variables, not for parameters, and in a fragile\nway, failing badly if the types were not the correct ones.\n\nWe prefere to deactivate it completely. Maybe a solution better than\nlooking dynamically in the environment would be that the Scheme\nEquality takes the relevant eq_A functions as explicit arguments of\nthe command.\n","author_name":"Hugo Herbelin","author_email":"Hugo.Herbelin@inria.fr","authored_date":"2018-09-20T13:32:08.000+02:00","committer_name":"Hugo Herbelin","committer_email":"Hugo.Herbelin@inria.fr","committed_date":"2018-09-20T13:32:08.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/61a487baf5769dac8ceceedc32eb54a141afec56"},"pipeline":{"id":30712805,"iid":3354,"project_id":6138686,"sha":"61a487baf5769dac8ceceedc32eb54a141afec56","ref":"pr-8509","status":"failed","source":"push","created_at":"2018-09-20T11:44:35.207Z","updated_at":"2018-09-20T14:13:31.460Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/30712805"},"web_url":"https://gitlab.com/coq/coq/-/jobs/99712629","artifacts":[{"file_type":"trace","size":37208,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":99712628,"status":"success","stage":"test","name":"ci-compcert","ref":"pr-8509","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-20T11:44:35.755Z","started_at":"2018-09-20T12:11:48.042Z","finished_at":"2018-09-20T12:40:56.313Z","duration":1748.270709,"queued_duration":0.141407,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"61a487baf5769dac8ceceedc32eb54a141afec56","short_id":"61a487ba","created_at":"2018-09-20T13:32:08.000+02:00","parent_ids":["c534c93d1697996cb189d668fdd323bdc38cabee"],"title":"Scheme Equality: preparing to more solid uniformity.","message":"Scheme Equality: preparing to more solid uniformity.\n\nThere was code to partially support situations like:\n\nVariable A:Type.\nVariable eq_A:A->A->bool.\nInductive I := c : A -> I.\nScheme Equality for I.\n\nThis was working for variables, not for parameters, and in a fragile\nway, failing badly if the types were not the correct ones.\n\nWe prefere to deactivate it completely. Maybe a solution better than\nlooking dynamically in the environment would be that the Scheme\nEquality takes the relevant eq_A functions as explicit arguments of\nthe command.\n","author_name":"Hugo Herbelin","author_email":"Hugo.Herbelin@inria.fr","authored_date":"2018-09-20T13:32:08.000+02:00","committer_name":"Hugo Herbelin","committer_email":"Hugo.Herbelin@inria.fr","committed_date":"2018-09-20T13:32:08.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/61a487baf5769dac8ceceedc32eb54a141afec56"},"pipeline":{"id":30712805,"iid":3354,"project_id":6138686,"sha":"61a487baf5769dac8ceceedc32eb54a141afec56","ref":"pr-8509","status":"failed","source":"push","created_at":"2018-09-20T11:44:35.207Z","updated_at":"2018-09-20T14:13:31.460Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/30712805"},"web_url":"https://gitlab.com/coq/coq/-/jobs/99712628","artifacts":[{"file_type":"trace","size":2035852,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":99712627,"status":"success","stage":"test","name":"ci-color","ref":"pr-8509","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-20T11:44:35.732Z","started_at":"2018-09-20T12:11:48.347Z","finished_at":"2018-09-20T12:32:04.433Z","duration":1216.085687,"queued_duration":0.335858,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"61a487baf5769dac8ceceedc32eb54a141afec56","short_id":"61a487ba","created_at":"2018-09-20T13:32:08.000+02:00","parent_ids":["c534c93d1697996cb189d668fdd323bdc38cabee"],"title":"Scheme Equality: preparing to more solid uniformity.","message":"Scheme Equality: preparing to more solid uniformity.\n\nThere was code to partially support situations like:\n\nVariable A:Type.\nVariable eq_A:A->A->bool.\nInductive I := c : A -> I.\nScheme Equality for I.\n\nThis was working for variables, not for parameters, and in a fragile\nway, failing badly if the types were not the correct ones.\n\nWe prefere to deactivate it completely. Maybe a solution better than\nlooking dynamically in the environment would be that the Scheme\nEquality takes the relevant eq_A functions as explicit arguments of\nthe command.\n","author_name":"Hugo Herbelin","author_email":"Hugo.Herbelin@inria.fr","authored_date":"2018-09-20T13:32:08.000+02:00","committer_name":"Hugo Herbelin","committer_email":"Hugo.Herbelin@inria.fr","committed_date":"2018-09-20T13:32:08.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/61a487baf5769dac8ceceedc32eb54a141afec56"},"pipeline":{"id":30712805,"iid":3354,"project_id":6138686,"sha":"61a487baf5769dac8ceceedc32eb54a141afec56","ref":"pr-8509","status":"failed","source":"push","created_at":"2018-09-20T11:44:35.207Z","updated_at":"2018-09-20T14:13:31.460Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/30712805"},"web_url":"https://gitlab.com/coq/coq/-/jobs/99712627","artifacts":[{"file_type":"trace","size":222287,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":99712626,"status":"success","stage":"test","name":"ci-bignums","ref":"pr-8509","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-20T11:44:35.708Z","started_at":"2018-09-20T12:11:48.657Z","finished_at":"2018-09-20T12:16:01.843Z","duration":253.186535,"queued_duration":0.30496,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"61a487baf5769dac8ceceedc32eb54a141afec56","short_id":"61a487ba","created_at":"2018-09-20T13:32:08.000+02:00","parent_ids":["c534c93d1697996cb189d668fdd323bdc38cabee"],"title":"Scheme Equality: preparing to more solid uniformity.","message":"Scheme Equality: preparing to more solid uniformity.\n\nThere was code to partially support situations like:\n\nVariable A:Type.\nVariable eq_A:A->A->bool.\nInductive I := c : A -> I.\nScheme Equality for I.\n\nThis was working for variables, not for parameters, and in a fragile\nway, failing badly if the types were not the correct ones.\n\nWe prefere to deactivate it completely. Maybe a solution better than\nlooking dynamically in the environment would be that the Scheme\nEquality takes the relevant eq_A functions as explicit arguments of\nthe command.\n","author_name":"Hugo Herbelin","author_email":"Hugo.Herbelin@inria.fr","authored_date":"2018-09-20T13:32:08.000+02:00","committer_name":"Hugo Herbelin","committer_email":"Hugo.Herbelin@inria.fr","committed_date":"2018-09-20T13:32:08.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/61a487baf5769dac8ceceedc32eb54a141afec56"},"pipeline":{"id":30712805,"iid":3354,"project_id":6138686,"sha":"61a487baf5769dac8ceceedc32eb54a141afec56","ref":"pr-8509","status":"failed","source":"push","created_at":"2018-09-20T11:44:35.207Z","updated_at":"2018-09-20T14:13:31.460Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/30712805"},"web_url":"https://gitlab.com/coq/coq/-/jobs/99712626","artifacts":[{"file_type":"trace","size":50557,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":99712625,"status":"success","stage":"test","name":"ci-bedrock2","ref":"pr-8509","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-20T11:44:35.684Z","started_at":"2018-09-20T12:11:49.108Z","finished_at":"2018-09-20T12:35:41.715Z","duration":1432.606776,"queued_duration":0.340028,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"61a487baf5769dac8ceceedc32eb54a141afec56","short_id":"61a487ba","created_at":"2018-09-20T13:32:08.000+02:00","parent_ids":["c534c93d1697996cb189d668fdd323bdc38cabee"],"title":"Scheme Equality: preparing to more solid uniformity.","message":"Scheme Equality: preparing to more solid uniformity.\n\nThere was code to partially support situations like:\n\nVariable A:Type.\nVariable eq_A:A->A->bool.\nInductive I := c : A -> I.\nScheme Equality for I.\n\nThis was working for variables, not for parameters, and in a fragile\nway, failing badly if the types were not the correct ones.\n\nWe prefere to deactivate it completely. Maybe a solution better than\nlooking dynamically in the environment would be that the Scheme\nEquality takes the relevant eq_A functions as explicit arguments of\nthe command.\n","author_name":"Hugo Herbelin","author_email":"Hugo.Herbelin@inria.fr","authored_date":"2018-09-20T13:32:08.000+02:00","committer_name":"Hugo Herbelin","committer_email":"Hugo.Herbelin@inria.fr","committed_date":"2018-09-20T13:32:08.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/61a487baf5769dac8ceceedc32eb54a141afec56"},"pipeline":{"id":30712805,"iid":3354,"project_id":6138686,"sha":"61a487baf5769dac8ceceedc32eb54a141afec56","ref":"pr-8509","status":"failed","source":"push","created_at":"2018-09-20T11:44:35.207Z","updated_at":"2018-09-20T14:13:31.460Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/30712805"},"web_url":"https://gitlab.com/coq/coq/-/jobs/99712625","artifacts":[{"file_type":"trace","size":99784,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":99712624,"status":"success","stage":"test","name":"validate:edge+flambda","ref":"pr-8509","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-20T11:44:35.663Z","started_at":"2018-09-20T12:11:49.246Z","finished_at":"2018-09-20T12:20:00.927Z","duration":491.681624,"queued_duration":0.184701,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"61a487baf5769dac8ceceedc32eb54a141afec56","short_id":"61a487ba","created_at":"2018-09-20T13:32:08.000+02:00","parent_ids":["c534c93d1697996cb189d668fdd323bdc38cabee"],"title":"Scheme Equality: preparing to more solid uniformity.","message":"Scheme Equality: preparing to more solid uniformity.\n\nThere was code to partially support situations like:\n\nVariable A:Type.\nVariable eq_A:A->A->bool.\nInductive I := c : A -> I.\nScheme Equality for I.\n\nThis was working for variables, not for parameters, and in a fragile\nway, failing badly if the types were not the correct ones.\n\nWe prefere to deactivate it completely. Maybe a solution better than\nlooking dynamically in the environment would be that the Scheme\nEquality takes the relevant eq_A functions as explicit arguments of\nthe command.\n","author_name":"Hugo Herbelin","author_email":"Hugo.Herbelin@inria.fr","authored_date":"2018-09-20T13:32:08.000+02:00","committer_name":"Hugo Herbelin","committer_email":"Hugo.Herbelin@inria.fr","committed_date":"2018-09-20T13:32:08.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/61a487baf5769dac8ceceedc32eb54a141afec56"},"pipeline":{"id":30712805,"iid":3354,"project_id":6138686,"sha":"61a487baf5769dac8ceceedc32eb54a141afec56","ref":"pr-8509","status":"failed","source":"push","created_at":"2018-09-20T11:44:35.207Z","updated_at":"2018-09-20T14:13:31.460Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/30712805"},"web_url":"https://gitlab.com/coq/coq/-/jobs/99712624","artifacts":[{"file_type":"trace","size":19915,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":99712623,"status":"success","stage":"test","name":"validate:edge","ref":"pr-8509","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-20T11:44:35.641Z","started_at":"2018-09-20T12:11:50.639Z","finished_at":"2018-09-20T12:20:28.950Z","duration":518.311084,"queued_duration":1.412722,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"61a487baf5769dac8ceceedc32eb54a141afec56","short_id":"61a487ba","created_at":"2018-09-20T13:32:08.000+02:00","parent_ids":["c534c93d1697996cb189d668fdd323bdc38cabee"],"title":"Scheme Equality: preparing to more solid uniformity.","message":"Scheme Equality: preparing to more solid uniformity.\n\nThere was code to partially support situations like:\n\nVariable A:Type.\nVariable eq_A:A->A->bool.\nInductive I := c : A -> I.\nScheme Equality for I.\n\nThis was working for variables, not for parameters, and in a fragile\nway, failing badly if the types were not the correct ones.\n\nWe prefere to deactivate it completely. Maybe a solution better than\nlooking dynamically in the environment would be that the Scheme\nEquality takes the relevant eq_A functions as explicit arguments of\nthe command.\n","author_name":"Hugo Herbelin","author_email":"Hugo.Herbelin@inria.fr","authored_date":"2018-09-20T13:32:08.000+02:00","committer_name":"Hugo Herbelin","committer_email":"Hugo.Herbelin@inria.fr","committed_date":"2018-09-20T13:32:08.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/61a487baf5769dac8ceceedc32eb54a141afec56"},"pipeline":{"id":30712805,"iid":3354,"project_id":6138686,"sha":"61a487baf5769dac8ceceedc32eb54a141afec56","ref":"pr-8509","status":"failed","source":"push","created_at":"2018-09-20T11:44:35.207Z","updated_at":"2018-09-20T14:13:31.460Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/30712805"},"web_url":"https://gitlab.com/coq/coq/-/jobs/99712623","artifacts":[{"file_type":"trace","size":19118,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":99712622,"status":"success","stage":"test","name":"validate:base+32bit","ref":"pr-8509","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-20T11:44:35.619Z","started_at":"2018-09-20T12:11:50.468Z","finished_at":"2018-09-20T12:24:20.625Z","duration":750.156803,"queued_duration":1.133917,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"61a487baf5769dac8ceceedc32eb54a141afec56","short_id":"61a487ba","created_at":"2018-09-20T13:32:08.000+02:00","parent_ids":["c534c93d1697996cb189d668fdd323bdc38cabee"],"title":"Scheme Equality: preparing to more solid uniformity.","message":"Scheme Equality: preparing to more solid uniformity.\n\nThere was code to partially support situations like:\n\nVariable A:Type.\nVariable eq_A:A->A->bool.\nInductive I := c : A -> I.\nScheme Equality for I.\n\nThis was working for variables, not for parameters, and in a fragile\nway, failing badly if the types were not the correct ones.\n\nWe prefere to deactivate it completely. Maybe a solution better than\nlooking dynamically in the environment would be that the Scheme\nEquality takes the relevant eq_A functions as explicit arguments of\nthe command.\n","author_name":"Hugo Herbelin","author_email":"Hugo.Herbelin@inria.fr","authored_date":"2018-09-20T13:32:08.000+02:00","committer_name":"Hugo Herbelin","committer_email":"Hugo.Herbelin@inria.fr","committed_date":"2018-09-20T13:32:08.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/61a487baf5769dac8ceceedc32eb54a141afec56"},"pipeline":{"id":30712805,"iid":3354,"project_id":6138686,"sha":"61a487baf5769dac8ceceedc32eb54a141afec56","ref":"pr-8509","status":"failed","source":"push","created_at":"2018-09-20T11:44:35.207Z","updated_at":"2018-09-20T14:13:31.460Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/30712805"},"web_url":"https://gitlab.com/coq/coq/-/jobs/99712622","artifacts":[{"file_type":"trace","size":18568,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":99712621,"status":"success","stage":"test","name":"validate:base","ref":"pr-8509","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-20T11:44:35.599Z","started_at":"2018-09-20T12:11:49.570Z","finished_at":"2018-09-20T12:20:20.492Z","duration":510.921618,"queued_duration":0.193557,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"61a487baf5769dac8ceceedc32eb54a141afec56","short_id":"61a487ba","created_at":"2018-09-20T13:32:08.000+02:00","parent_ids":["c534c93d1697996cb189d668fdd323bdc38cabee"],"title":"Scheme Equality: preparing to more solid uniformity.","message":"Scheme Equality: preparing to more solid uniformity.\n\nThere was code to partially support situations like:\n\nVariable A:Type.\nVariable eq_A:A->A->bool.\nInductive I := c : A -> I.\nScheme Equality for I.\n\nThis was working for variables, not for parameters, and in a fragile\nway, failing badly if the types were not the correct ones.\n\nWe prefere to deactivate it completely. Maybe a solution better than\nlooking dynamically in the environment would be that the Scheme\nEquality takes the relevant eq_A functions as explicit arguments of\nthe command.\n","author_name":"Hugo Herbelin","author_email":"Hugo.Herbelin@inria.fr","authored_date":"2018-09-20T13:32:08.000+02:00","committer_name":"Hugo Herbelin","committer_email":"Hugo.Herbelin@inria.fr","committed_date":"2018-09-20T13:32:08.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/61a487baf5769dac8ceceedc32eb54a141afec56"},"pipeline":{"id":30712805,"iid":3354,"project_id":6138686,"sha":"61a487baf5769dac8ceceedc32eb54a141afec56","ref":"pr-8509","status":"failed","source":"push","created_at":"2018-09-20T11:44:35.207Z","updated_at":"2018-09-20T14:13:31.460Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/30712805"},"web_url":"https://gitlab.com/coq/coq/-/jobs/99712621","artifacts":[{"file_type":"trace","size":18213,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":99712620,"status":"success","stage":"test","name":"test-suite:edge+flambda","ref":"pr-8509","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-20T11:44:35.577Z","started_at":"2018-09-20T12:11:49.529Z","finished_at":"2018-09-20T12:24:23.928Z","duration":754.399433,"queued_duration":0.121332,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"61a487baf5769dac8ceceedc32eb54a141afec56","short_id":"61a487ba","created_at":"2018-09-20T13:32:08.000+02:00","parent_ids":["c534c93d1697996cb189d668fdd323bdc38cabee"],"title":"Scheme Equality: preparing to more solid uniformity.","message":"Scheme Equality: preparing to more solid uniformity.\n\nThere was code to partially support situations like:\n\nVariable A:Type.\nVariable eq_A:A->A->bool.\nInductive I := c : A -> I.\nScheme Equality for I.\n\nThis was working for variables, not for parameters, and in a fragile\nway, failing badly if the types were not the correct ones.\n\nWe prefere to deactivate it completely. Maybe a solution better than\nlooking dynamically in the environment would be that the Scheme\nEquality takes the relevant eq_A functions as explicit arguments of\nthe command.\n","author_name":"Hugo Herbelin","author_email":"Hugo.Herbelin@inria.fr","authored_date":"2018-09-20T13:32:08.000+02:00","committer_name":"Hugo Herbelin","committer_email":"Hugo.Herbelin@inria.fr","committed_date":"2018-09-20T13:32:08.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/61a487baf5769dac8ceceedc32eb54a141afec56"},"pipeline":{"id":30712805,"iid":3354,"project_id":6138686,"sha":"61a487baf5769dac8ceceedc32eb54a141afec56","ref":"pr-8509","status":"failed","source":"push","created_at":"2018-09-20T11:44:35.207Z","updated_at":"2018-09-20T14:13:31.460Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/30712805"},"web_url":"https://gitlab.com/coq/coq/-/jobs/99712620","artifacts":[{"file_type":"trace","size":64700,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":99712619,"status":"success","stage":"test","name":"test-suite:edge","ref":"pr-8509","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-20T11:44:35.554Z","started_at":"2018-09-20T12:11:50.393Z","finished_at":"2018-09-20T12:22:17.261Z","duration":626.86764,"queued_duration":0.954545,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"61a487baf5769dac8ceceedc32eb54a141afec56","short_id":"61a487ba","created_at":"2018-09-20T13:32:08.000+02:00","parent_ids":["c534c93d1697996cb189d668fdd323bdc38cabee"],"title":"Scheme Equality: preparing to more solid uniformity.","message":"Scheme Equality: preparing to more solid uniformity.\n\nThere was code to partially support situations like:\n\nVariable A:Type.\nVariable eq_A:A->A->bool.\nInductive I := c : A -> I.\nScheme Equality for I.\n\nThis was working for variables, not for parameters, and in a fragile\nway, failing badly if the types were not the correct ones.\n\nWe prefere to deactivate it completely. Maybe a solution better than\nlooking dynamically in the environment would be that the Scheme\nEquality takes the relevant eq_A functions as explicit arguments of\nthe command.\n","author_name":"Hugo Herbelin","author_email":"Hugo.Herbelin@inria.fr","authored_date":"2018-09-20T13:32:08.000+02:00","committer_name":"Hugo Herbelin","committer_email":"Hugo.Herbelin@inria.fr","committed_date":"2018-09-20T13:32:08.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/61a487baf5769dac8ceceedc32eb54a141afec56"},"pipeline":{"id":30712805,"iid":3354,"project_id":6138686,"sha":"61a487baf5769dac8ceceedc32eb54a141afec56","ref":"pr-8509","status":"failed","source":"push","created_at":"2018-09-20T11:44:35.207Z","updated_at":"2018-09-20T14:13:31.460Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/30712805"},"web_url":"https://gitlab.com/coq/coq/-/jobs/99712619","artifacts":[{"file_type":"trace","size":63903,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":99712618,"status":"success","stage":"test","name":"test-suite:base+32bit","ref":"pr-8509","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-20T11:44:35.532Z","started_at":"2018-09-20T12:11:50.350Z","finished_at":"2018-09-20T12:21:44.487Z","duration":594.13685,"queued_duration":0.874084,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"61a487baf5769dac8ceceedc32eb54a141afec56","short_id":"61a487ba","created_at":"2018-09-20T13:32:08.000+02:00","parent_ids":["c534c93d1697996cb189d668fdd323bdc38cabee"],"title":"Scheme Equality: preparing to more solid uniformity.","message":"Scheme Equality: preparing to more solid uniformity.\n\nThere was code to partially support situations like:\n\nVariable A:Type.\nVariable eq_A:A->A->bool.\nInductive I := c : A -> I.\nScheme Equality for I.\n\nThis was working for variables, not for parameters, and in a fragile\nway, failing badly if the types were not the correct ones.\n\nWe prefere to deactivate it completely. Maybe a solution better than\nlooking dynamically in the environment would be that the Scheme\nEquality takes the relevant eq_A functions as explicit arguments of\nthe command.\n","author_name":"Hugo Herbelin","author_email":"Hugo.Herbelin@inria.fr","authored_date":"2018-09-20T13:32:08.000+02:00","committer_name":"Hugo Herbelin","committer_email":"Hugo.Herbelin@inria.fr","committed_date":"2018-09-20T13:32:08.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/61a487baf5769dac8ceceedc32eb54a141afec56"},"pipeline":{"id":30712805,"iid":3354,"project_id":6138686,"sha":"61a487baf5769dac8ceceedc32eb54a141afec56","ref":"pr-8509","status":"failed","source":"push","created_at":"2018-09-20T11:44:35.207Z","updated_at":"2018-09-20T14:13:31.460Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/30712805"},"web_url":"https://gitlab.com/coq/coq/-/jobs/99712618","artifacts":[{"file_type":"trace","size":62085,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":99712617,"status":"success","stage":"test","name":"test-suite:base","ref":"pr-8509","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-20T11:44:35.510Z","started_at":"2018-09-20T12:11:50.212Z","finished_at":"2018-09-20T12:23:31.855Z","duration":701.643568,"queued_duration":0.684613,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"61a487baf5769dac8ceceedc32eb54a141afec56","short_id":"61a487ba","created_at":"2018-09-20T13:32:08.000+02:00","parent_ids":["c534c93d1697996cb189d668fdd323bdc38cabee"],"title":"Scheme Equality: preparing to more solid uniformity.","message":"Scheme Equality: preparing to more solid uniformity.\n\nThere was code to partially support situations like:\n\nVariable A:Type.\nVariable eq_A:A->A->bool.\nInductive I := c : A -> I.\nScheme Equality for I.\n\nThis was working for variables, not for parameters, and in a fragile\nway, failing badly if the types were not the correct ones.\n\nWe prefere to deactivate it completely. Maybe a solution better than\nlooking dynamically in the environment would be that the Scheme\nEquality takes the relevant eq_A functions as explicit arguments of\nthe command.\n","author_name":"Hugo Herbelin","author_email":"Hugo.Herbelin@inria.fr","authored_date":"2018-09-20T13:32:08.000+02:00","committer_name":"Hugo Herbelin","committer_email":"Hugo.Herbelin@inria.fr","committed_date":"2018-09-20T13:32:08.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/61a487baf5769dac8ceceedc32eb54a141afec56"},"pipeline":{"id":30712805,"iid":3354,"project_id":6138686,"sha":"61a487baf5769dac8ceceedc32eb54a141afec56","ref":"pr-8509","status":"failed","source":"push","created_at":"2018-09-20T11:44:35.207Z","updated_at":"2018-09-20T14:13:31.460Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/30712805"},"web_url":"https://gitlab.com/coq/coq/-/jobs/99712617","artifacts":[{"file_type":"trace","size":63061,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":99712616,"status":"success","stage":"test","name":"doc:ml-api:odoc","ref":"pr-8509","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-20T11:44:35.487Z","started_at":"2018-09-20T12:11:49.735Z","finished_at":"2018-09-20T12:18:44.083Z","duration":414.347396,"queued_duration":0.155528,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"61a487baf5769dac8ceceedc32eb54a141afec56","short_id":"61a487ba","created_at":"2018-09-20T13:32:08.000+02:00","parent_ids":["c534c93d1697996cb189d668fdd323bdc38cabee"],"title":"Scheme Equality: preparing to more solid uniformity.","message":"Scheme Equality: preparing to more solid uniformity.\n\nThere was code to partially support situations like:\n\nVariable A:Type.\nVariable eq_A:A->A->bool.\nInductive I := c : A -> I.\nScheme Equality for I.\n\nThis was working for variables, not for parameters, and in a fragile\nway, failing badly if the types were not the correct ones.\n\nWe prefere to deactivate it completely. Maybe a solution better than\nlooking dynamically in the environment would be that the Scheme\nEquality takes the relevant eq_A functions as explicit arguments of\nthe command.\n","author_name":"Hugo Herbelin","author_email":"Hugo.Herbelin@inria.fr","authored_date":"2018-09-20T13:32:08.000+02:00","committer_name":"Hugo Herbelin","committer_email":"Hugo.Herbelin@inria.fr","committed_date":"2018-09-20T13:32:08.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/61a487baf5769dac8ceceedc32eb54a141afec56"},"pipeline":{"id":30712805,"iid":3354,"project_id":6138686,"sha":"61a487baf5769dac8ceceedc32eb54a141afec56","ref":"pr-8509","status":"failed","source":"push","created_at":"2018-09-20T11:44:35.207Z","updated_at":"2018-09-20T14:13:31.460Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/30712805"},"web_url":"https://gitlab.com/coq/coq/-/jobs/99712616","artifacts":[{"file_type":"trace","size":18008,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":99712615,"status":"success","stage":"test","name":"doc:ml-api:ocamldoc","ref":"pr-8509","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-20T11:44:35.462Z","started_at":"2018-09-20T12:11:50.167Z","finished_at":"2018-09-20T12:16:23.553Z","duration":273.38648,"queued_duration":0.528321,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"61a487baf5769dac8ceceedc32eb54a141afec56","short_id":"61a487ba","created_at":"2018-09-20T13:32:08.000+02:00","parent_ids":["c534c93d1697996cb189d668fdd323bdc38cabee"],"title":"Scheme Equality: preparing to more solid uniformity.","message":"Scheme Equality: preparing to more solid uniformity.\n\nThere was code to partially support situations like:\n\nVariable A:Type.\nVariable eq_A:A->A->bool.\nInductive I := c : A -> I.\nScheme Equality for I.\n\nThis was working for variables, not for parameters, and in a fragile\nway, failing badly if the types were not the correct ones.\n\nWe prefere to deactivate it completely. Maybe a solution better than\nlooking dynamically in the environment would be that the Scheme\nEquality takes the relevant eq_A functions as explicit arguments of\nthe command.\n","author_name":"Hugo Herbelin","author_email":"Hugo.Herbelin@inria.fr","authored_date":"2018-09-20T13:32:08.000+02:00","committer_name":"Hugo Herbelin","committer_email":"Hugo.Herbelin@inria.fr","committed_date":"2018-09-20T13:32:08.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/61a487baf5769dac8ceceedc32eb54a141afec56"},"pipeline":{"id":30712805,"iid":3354,"project_id":6138686,"sha":"61a487baf5769dac8ceceedc32eb54a141afec56","ref":"pr-8509","status":"failed","source":"push","created_at":"2018-09-20T11:44:35.207Z","updated_at":"2018-09-20T14:13:31.460Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/30712805"},"web_url":"https://gitlab.com/coq/coq/-/jobs/99712615","artifacts":[{"file_type":"trace","size":79699,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":99712614,"status":"success","stage":"test","name":"doc:refman","ref":"pr-8509","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-20T11:44:35.439Z","started_at":"2018-09-20T12:11:50.108Z","finished_at":"2018-09-20T12:23:39.537Z","duration":709.429255,"queued_duration":0.402687,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"61a487baf5769dac8ceceedc32eb54a141afec56","short_id":"61a487ba","created_at":"2018-09-20T13:32:08.000+02:00","parent_ids":["c534c93d1697996cb189d668fdd323bdc38cabee"],"title":"Scheme Equality: preparing to more solid uniformity.","message":"Scheme Equality: preparing to more solid uniformity.\n\nThere was code to partially support situations like:\n\nVariable A:Type.\nVariable eq_A:A->A->bool.\nInductive I := c : A -> I.\nScheme Equality for I.\n\nThis was working for variables, not for parameters, and in a fragile\nway, failing badly if the types were not the correct ones.\n\nWe prefere to deactivate it completely. Maybe a solution better than\nlooking dynamically in the environment would be that the Scheme\nEquality takes the relevant eq_A functions as explicit arguments of\nthe command.\n","author_name":"Hugo Herbelin","author_email":"Hugo.Herbelin@inria.fr","authored_date":"2018-09-20T13:32:08.000+02:00","committer_name":"Hugo Herbelin","committer_email":"Hugo.Herbelin@inria.fr","committed_date":"2018-09-20T13:32:08.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/61a487baf5769dac8ceceedc32eb54a141afec56"},"pipeline":{"id":30712805,"iid":3354,"project_id":6138686,"sha":"61a487baf5769dac8ceceedc32eb54a141afec56","ref":"pr-8509","status":"failed","source":"push","created_at":"2018-09-20T11:44:35.207Z","updated_at":"2018-09-20T14:13:31.460Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/30712805"},"web_url":"https://gitlab.com/coq/coq/-/jobs/99712614","artifacts":[{"file_type":"trace","size":25776,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":99712613,"status":"success","stage":"test","name":"pkg:nix","ref":"pr-8509","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-20T11:44:35.415Z","started_at":"2018-09-20T12:11:49.975Z","finished_at":"2018-09-20T12:42:46.018Z","duration":1856.042882,"queued_duration":0.213269,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"61a487baf5769dac8ceceedc32eb54a141afec56","short_id":"61a487ba","created_at":"2018-09-20T13:32:08.000+02:00","parent_ids":["c534c93d1697996cb189d668fdd323bdc38cabee"],"title":"Scheme Equality: preparing to more solid uniformity.","message":"Scheme Equality: preparing to more solid uniformity.\n\nThere was code to partially support situations like:\n\nVariable A:Type.\nVariable eq_A:A->A->bool.\nInductive I := c : A -> I.\nScheme Equality for I.\n\nThis was working for variables, not for parameters, and in a fragile\nway, failing badly if the types were not the correct ones.\n\nWe prefere to deactivate it completely. Maybe a solution better than\nlooking dynamically in the environment would be that the Scheme\nEquality takes the relevant eq_A functions as explicit arguments of\nthe command.\n","author_name":"Hugo Herbelin","author_email":"Hugo.Herbelin@inria.fr","authored_date":"2018-09-20T13:32:08.000+02:00","committer_name":"Hugo Herbelin","committer_email":"Hugo.Herbelin@inria.fr","committed_date":"2018-09-20T13:32:08.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/61a487baf5769dac8ceceedc32eb54a141afec56"},"pipeline":{"id":30712805,"iid":3354,"project_id":6138686,"sha":"61a487baf5769dac8ceceedc32eb54a141afec56","ref":"pr-8509","status":"failed","source":"push","created_at":"2018-09-20T11:44:35.207Z","updated_at":"2018-09-20T14:13:31.460Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/30712805"},"web_url":"https://gitlab.com/coq/coq/-/jobs/99712613","artifacts":[{"file_type":"trace","size":473684,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":99712612,"status":"success","stage":"test","name":"pkg:dune-release","ref":"pr-8509","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-20T11:44:35.389Z","started_at":"2018-09-20T12:11:49.906Z","finished_at":"2018-09-20T12:25:19.881Z","duration":809.975721,"queued_duration":0.106916,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"61a487baf5769dac8ceceedc32eb54a141afec56","short_id":"61a487ba","created_at":"2018-09-20T13:32:08.000+02:00","parent_ids":["c534c93d1697996cb189d668fdd323bdc38cabee"],"title":"Scheme Equality: preparing to more solid uniformity.","message":"Scheme Equality: preparing to more solid uniformity.\n\nThere was code to partially support situations like:\n\nVariable A:Type.\nVariable eq_A:A->A->bool.\nInductive I := c : A -> I.\nScheme Equality for I.\n\nThis was working for variables, not for parameters, and in a fragile\nway, failing badly if the types were not the correct ones.\n\nWe prefere to deactivate it completely. Maybe a solution better than\nlooking dynamically in the environment would be that the Scheme\nEquality takes the relevant eq_A functions as explicit arguments of\nthe command.\n","author_name":"Hugo Herbelin","author_email":"Hugo.Herbelin@inria.fr","authored_date":"2018-09-20T13:32:08.000+02:00","committer_name":"Hugo Herbelin","committer_email":"Hugo.Herbelin@inria.fr","committed_date":"2018-09-20T13:32:08.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/61a487baf5769dac8ceceedc32eb54a141afec56"},"pipeline":{"id":30712805,"iid":3354,"project_id":6138686,"sha":"61a487baf5769dac8ceceedc32eb54a141afec56","ref":"pr-8509","status":"failed","source":"push","created_at":"2018-09-20T11:44:35.207Z","updated_at":"2018-09-20T14:13:31.460Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/30712805"},"web_url":"https://gitlab.com/coq/coq/-/jobs/99712612","artifacts":[{"file_type":"trace","size":18058,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2018-09-27T12:25:14.547Z","tag_list":[]}
{"id":99712611,"status":"failed","stage":"test","name":"windows64","ref":"pr-8509","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-20T11:44:35.356Z","started_at":"2018-09-20T12:11:50.067Z","finished_at":"2018-09-20T12:26:01.663Z","duration":851.596262,"queued_duration":0.234591,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"61a487baf5769dac8ceceedc32eb54a141afec56","short_id":"61a487ba","created_at":"2018-09-20T13:32:08.000+02:00","parent_ids":["c534c93d1697996cb189d668fdd323bdc38cabee"],"title":"Scheme Equality: preparing to more solid uniformity.","message":"Scheme Equality: preparing to more solid uniformity.\n\nThere was code to partially support situations like:\n\nVariable A:Type.\nVariable eq_A:A->A->bool.\nInductive I := c : A -> I.\nScheme Equality for I.\n\nThis was working for variables, not for parameters, and in a fragile\nway, failing badly if the types were not the correct ones.\n\nWe prefere to deactivate it completely. Maybe a solution better than\nlooking dynamically in the environment would be that the Scheme\nEquality takes the relevant eq_A functions as explicit arguments of\nthe command.\n","author_name":"Hugo Herbelin","author_email":"Hugo.Herbelin@inria.fr","authored_date":"2018-09-20T13:32:08.000+02:00","committer_name":"Hugo Herbelin","committer_email":"Hugo.Herbelin@inria.fr","committed_date":"2018-09-20T13:32:08.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/61a487baf5769dac8ceceedc32eb54a141afec56"},"pipeline":{"id":30712805,"iid":3354,"project_id":6138686,"sha":"61a487baf5769dac8ceceedc32eb54a141afec56","ref":"pr-8509","status":"failed","source":"push","created_at":"2018-09-20T11:44:35.207Z","updated_at":"2018-09-20T14:13:31.460Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/30712805"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/99712611","artifacts":[{"file_type":"trace","size":1637465,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":["windows"]}
{"id":99712609,"status":"success","stage":"build","name":"build:egde:dune:dev","ref":"pr-8509","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-20T11:44:35.322Z","started_at":"2018-09-20T11:44:37.355Z","finished_at":"2018-09-20T11:59:41.208Z","duration":903.853102,"queued_duration":0.794702,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"61a487baf5769dac8ceceedc32eb54a141afec56","short_id":"61a487ba","created_at":"2018-09-20T13:32:08.000+02:00","parent_ids":["c534c93d1697996cb189d668fdd323bdc38cabee"],"title":"Scheme Equality: preparing to more solid uniformity.","message":"Scheme Equality: preparing to more solid uniformity.\n\nThere was code to partially support situations like:\n\nVariable A:Type.\nVariable eq_A:A->A->bool.\nInductive I := c : A -> I.\nScheme Equality for I.\n\nThis was working for variables, not for parameters, and in a fragile\nway, failing badly if the types were not the correct ones.\n\nWe prefere to deactivate it completely. Maybe a solution better than\nlooking dynamically in the environment would be that the Scheme\nEquality takes the relevant eq_A functions as explicit arguments of\nthe command.\n","author_name":"Hugo Herbelin","author_email":"Hugo.Herbelin@inria.fr","authored_date":"2018-09-20T13:32:08.000+02:00","committer_name":"Hugo Herbelin","committer_email":"Hugo.Herbelin@inria.fr","committed_date":"2018-09-20T13:32:08.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/61a487baf5769dac8ceceedc32eb54a141afec56"},"pipeline":{"id":30712805,"iid":3354,"project_id":6138686,"sha":"61a487baf5769dac8ceceedc32eb54a141afec56","ref":"pr-8509","status":"failed","source":"push","created_at":"2018-09-20T11:44:35.207Z","updated_at":"2018-09-20T14:13:31.460Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/30712805"},"web_url":"https://gitlab.com/coq/coq/-/jobs/99712609","artifacts":[{"file_type":"trace","size":18066,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2018-09-27T11:59:35.930Z","tag_list":[]}
{"id":99712608,"status":"success","stage":"build","name":"build:edge+flambda","ref":"pr-8509","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-20T11:44:35.296Z","started_at":"2018-09-20T11:44:37.080Z","finished_at":"2018-09-20T12:11:46.314Z","duration":1629.234223,"queued_duration":0.480499,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"61a487baf5769dac8ceceedc32eb54a141afec56","short_id":"61a487ba","created_at":"2018-09-20T13:32:08.000+02:00","parent_ids":["c534c93d1697996cb189d668fdd323bdc38cabee"],"title":"Scheme Equality: preparing to more solid uniformity.","message":"Scheme Equality: preparing to more solid uniformity.\n\nThere was code to partially support situations like:\n\nVariable A:Type.\nVariable eq_A:A->A->bool.\nInductive I := c : A -> I.\nScheme Equality for I.\n\nThis was working for variables, not for parameters, and in a fragile\nway, failing badly if the types were not the correct ones.\n\nWe prefere to deactivate it completely. Maybe a solution better than\nlooking dynamically in the environment would be that the Scheme\nEquality takes the relevant eq_A functions as explicit arguments of\nthe command.\n","author_name":"Hugo Herbelin","author_email":"Hugo.Herbelin@inria.fr","authored_date":"2018-09-20T13:32:08.000+02:00","committer_name":"Hugo Herbelin","committer_email":"Hugo.Herbelin@inria.fr","committed_date":"2018-09-20T13:32:08.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/61a487baf5769dac8ceceedc32eb54a141afec56"},"pipeline":{"id":30712805,"iid":3354,"project_id":6138686,"sha":"61a487baf5769dac8ceceedc32eb54a141afec56","ref":"pr-8509","status":"failed","source":"push","created_at":"2018-09-20T11:44:35.207Z","updated_at":"2018-09-20T14:13:31.460Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/30712805"},"web_url":"https://gitlab.com/coq/coq/-/jobs/99712608","artifacts":[{"file_type":"trace","size":231089,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2018-09-27T12:11:36.686Z","tag_list":[]}
{"id":99712606,"status":"success","stage":"build","name":"build:edge","ref":"pr-8509","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-20T11:44:35.270Z","started_at":"2018-09-20T11:44:37.177Z","finished_at":"2018-09-20T12:02:08.597Z","duration":1051.419652,"queued_duration":0.548935,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"61a487baf5769dac8ceceedc32eb54a141afec56","short_id":"61a487ba","created_at":"2018-09-20T13:32:08.000+02:00","parent_ids":["c534c93d1697996cb189d668fdd323bdc38cabee"],"title":"Scheme Equality: preparing to more solid uniformity.","message":"Scheme Equality: preparing to more solid uniformity.\n\nThere was code to partially support situations like:\n\nVariable A:Type.\nVariable eq_A:A->A->bool.\nInductive I := c : A -> I.\nScheme Equality for I.\n\nThis was working for variables, not for parameters, and in a fragile\nway, failing badly if the types were not the correct ones.\n\nWe prefere to deactivate it completely. Maybe a solution better than\nlooking dynamically in the environment would be that the Scheme\nEquality takes the relevant eq_A functions as explicit arguments of\nthe command.\n","author_name":"Hugo Herbelin","author_email":"Hugo.Herbelin@inria.fr","authored_date":"2018-09-20T13:32:08.000+02:00","committer_name":"Hugo Herbelin","committer_email":"Hugo.Herbelin@inria.fr","committed_date":"2018-09-20T13:32:08.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/61a487baf5769dac8ceceedc32eb54a141afec56"},"pipeline":{"id":30712805,"iid":3354,"project_id":6138686,"sha":"61a487baf5769dac8ceceedc32eb54a141afec56","ref":"pr-8509","status":"failed","source":"push","created_at":"2018-09-20T11:44:35.207Z","updated_at":"2018-09-20T14:13:31.460Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/30712805"},"web_url":"https://gitlab.com/coq/coq/-/jobs/99712606","artifacts":[{"file_type":"trace","size":230224,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2018-09-27T12:02:03.543Z","tag_list":[]}
{"id":99712605,"status":"success","stage":"build","name":"build:base+32bit","ref":"pr-8509","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-20T11:44:35.245Z","started_at":"2018-09-20T11:44:37.037Z","finished_at":"2018-09-20T11:58:40.575Z","duration":843.537698,"queued_duration":0.335668,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"61a487baf5769dac8ceceedc32eb54a141afec56","short_id":"61a487ba","created_at":"2018-09-20T13:32:08.000+02:00","parent_ids":["c534c93d1697996cb189d668fdd323bdc38cabee"],"title":"Scheme Equality: preparing to more solid uniformity.","message":"Scheme Equality: preparing to more solid uniformity.\n\nThere was code to partially support situations like:\n\nVariable A:Type.\nVariable eq_A:A->A->bool.\nInductive I := c : A -> I.\nScheme Equality for I.\n\nThis was working for variables, not for parameters, and in a fragile\nway, failing badly if the types were not the correct ones.\n\nWe prefere to deactivate it completely. Maybe a solution better than\nlooking dynamically in the environment would be that the Scheme\nEquality takes the relevant eq_A functions as explicit arguments of\nthe command.\n","author_name":"Hugo Herbelin","author_email":"Hugo.Herbelin@inria.fr","authored_date":"2018-09-20T13:32:08.000+02:00","committer_name":"Hugo Herbelin","committer_email":"Hugo.Herbelin@inria.fr","committed_date":"2018-09-20T13:32:08.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/61a487baf5769dac8ceceedc32eb54a141afec56"},"pipeline":{"id":30712805,"iid":3354,"project_id":6138686,"sha":"61a487baf5769dac8ceceedc32eb54a141afec56","ref":"pr-8509","status":"failed","source":"push","created_at":"2018-09-20T11:44:35.207Z","updated_at":"2018-09-20T14:13:31.460Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/30712805"},"web_url":"https://gitlab.com/coq/coq/-/jobs/99712605","artifacts":[{"file_type":"trace","size":224132,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2018-09-27T11:58:36.922Z","tag_list":[]}
{"id":99712604,"status":"success","stage":"build","name":"build:base","ref":"pr-8509","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-20T11:44:35.221Z","started_at":"2018-09-20T11:44:37.077Z","finished_at":"2018-09-20T12:00:25.402Z","duration":948.32561,"queued_duration":0.205268,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"61a487baf5769dac8ceceedc32eb54a141afec56","short_id":"61a487ba","created_at":"2018-09-20T13:32:08.000+02:00","parent_ids":["c534c93d1697996cb189d668fdd323bdc38cabee"],"title":"Scheme Equality: preparing to more solid uniformity.","message":"Scheme Equality: preparing to more solid uniformity.\n\nThere was code to partially support situations like:\n\nVariable A:Type.\nVariable eq_A:A->A->bool.\nInductive I := c : A -> I.\nScheme Equality for I.\n\nThis was working for variables, not for parameters, and in a fragile\nway, failing badly if the types were not the correct ones.\n\nWe prefere to deactivate it completely. Maybe a solution better than\nlooking dynamically in the environment would be that the Scheme\nEquality takes the relevant eq_A functions as explicit arguments of\nthe command.\n","author_name":"Hugo Herbelin","author_email":"Hugo.Herbelin@inria.fr","authored_date":"2018-09-20T13:32:08.000+02:00","committer_name":"Hugo Herbelin","committer_email":"Hugo.Herbelin@inria.fr","committed_date":"2018-09-20T13:32:08.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/61a487baf5769dac8ceceedc32eb54a141afec56"},"pipeline":{"id":30712805,"iid":3354,"project_id":6138686,"sha":"61a487baf5769dac8ceceedc32eb54a141afec56","ref":"pr-8509","status":"failed","source":"push","created_at":"2018-09-20T11:44:35.207Z","updated_at":"2018-09-20T14:13:31.460Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/30712805"},"web_url":"https://gitlab.com/coq/coq/-/jobs/99712604","artifacts":[{"file_type":"trace","size":275440,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2018-09-27T12:00:20.457Z","tag_list":[]}
