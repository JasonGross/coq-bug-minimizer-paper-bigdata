{"id":170552528,"status":"canceled","stage":"test","name":"plugin:ci-relation-algebra","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:33:44.738Z","started_at":null,"finished_at":"2019-03-02T19:47:01.610Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"61eafa92fe04d7ed815111103daf745ac1863db6","short_id":"61eafa92","created_at":"2019-03-02T20:33:30.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:33:30.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/61eafa92fe04d7ed815111103daf745ac1863db6"},"pipeline":{"id":49996846,"iid":7614,"project_id":6138686,"sha":"61eafa92fe04d7ed815111103daf745ac1863db6","ref":"pr-9047","status":"canceled","source":"push","created_at":"2019-03-02T19:33:43.921Z","updated_at":"2019-03-02T19:47:01.614Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552528","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":170552527,"status":"canceled","stage":"test","name":"plugin:ci-quickchick","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:33:44.721Z","started_at":null,"finished_at":"2019-03-02T19:47:01.589Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"61eafa92fe04d7ed815111103daf745ac1863db6","short_id":"61eafa92","created_at":"2019-03-02T20:33:30.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:33:30.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/61eafa92fe04d7ed815111103daf745ac1863db6"},"pipeline":{"id":49996846,"iid":7614,"project_id":6138686,"sha":"61eafa92fe04d7ed815111103daf745ac1863db6","ref":"pr-9047","status":"canceled","source":"push","created_at":"2019-03-02T19:33:43.921Z","updated_at":"2019-03-02T19:47:01.614Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552527","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":170552526,"status":"canceled","stage":"test","name":"plugin:plugin-tutorial","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:33:44.704Z","started_at":null,"finished_at":"2019-03-02T19:47:01.569Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"61eafa92fe04d7ed815111103daf745ac1863db6","short_id":"61eafa92","created_at":"2019-03-02T20:33:30.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:33:30.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/61eafa92fe04d7ed815111103daf745ac1863db6"},"pipeline":{"id":49996846,"iid":7614,"project_id":6138686,"sha":"61eafa92fe04d7ed815111103daf745ac1863db6","ref":"pr-9047","status":"canceled","source":"push","created_at":"2019-03-02T19:33:43.921Z","updated_at":"2019-03-02T19:47:01.614Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552526","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":170552525,"status":"canceled","stage":"test","name":"plugin:ci-paramcoq","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:33:44.688Z","started_at":null,"finished_at":"2019-03-02T19:47:01.548Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"61eafa92fe04d7ed815111103daf745ac1863db6","short_id":"61eafa92","created_at":"2019-03-02T20:33:30.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:33:30.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/61eafa92fe04d7ed815111103daf745ac1863db6"},"pipeline":{"id":49996846,"iid":7614,"project_id":6138686,"sha":"61eafa92fe04d7ed815111103daf745ac1863db6","ref":"pr-9047","status":"canceled","source":"push","created_at":"2019-03-02T19:33:43.921Z","updated_at":"2019-03-02T19:47:01.614Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552525","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":170552524,"status":"canceled","stage":"test","name":"plugin:ci-mtac2","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:33:44.676Z","started_at":null,"finished_at":"2019-03-02T19:47:01.527Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"61eafa92fe04d7ed815111103daf745ac1863db6","short_id":"61eafa92","created_at":"2019-03-02T20:33:30.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:33:30.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/61eafa92fe04d7ed815111103daf745ac1863db6"},"pipeline":{"id":49996846,"iid":7614,"project_id":6138686,"sha":"61eafa92fe04d7ed815111103daf745ac1863db6","ref":"pr-9047","status":"canceled","source":"push","created_at":"2019-03-02T19:33:43.921Z","updated_at":"2019-03-02T19:47:01.614Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552524","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":170552523,"status":"canceled","stage":"test","name":"plugin:ci-ltac2","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:33:44.664Z","started_at":null,"finished_at":"2019-03-02T19:47:01.506Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"61eafa92fe04d7ed815111103daf745ac1863db6","short_id":"61eafa92","created_at":"2019-03-02T20:33:30.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:33:30.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/61eafa92fe04d7ed815111103daf745ac1863db6"},"pipeline":{"id":49996846,"iid":7614,"project_id":6138686,"sha":"61eafa92fe04d7ed815111103daf745ac1863db6","ref":"pr-9047","status":"canceled","source":"push","created_at":"2019-03-02T19:33:43.921Z","updated_at":"2019-03-02T19:47:01.614Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552523","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":170552522,"status":"canceled","stage":"test","name":"plugin:ci-fiat_parsers","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:33:44.650Z","started_at":null,"finished_at":"2019-03-02T19:47:01.489Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"61eafa92fe04d7ed815111103daf745ac1863db6","short_id":"61eafa92","created_at":"2019-03-02T20:33:30.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:33:30.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/61eafa92fe04d7ed815111103daf745ac1863db6"},"pipeline":{"id":49996846,"iid":7614,"project_id":6138686,"sha":"61eafa92fe04d7ed815111103daf745ac1863db6","ref":"pr-9047","status":"canceled","source":"push","created_at":"2019-03-02T19:33:43.921Z","updated_at":"2019-03-02T19:47:01.614Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552522","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":170552521,"status":"canceled","stage":"test","name":"plugin:ci-equations","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:33:44.638Z","started_at":null,"finished_at":"2019-03-02T19:47:01.470Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"61eafa92fe04d7ed815111103daf745ac1863db6","short_id":"61eafa92","created_at":"2019-03-02T20:33:30.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:33:30.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/61eafa92fe04d7ed815111103daf745ac1863db6"},"pipeline":{"id":49996846,"iid":7614,"project_id":6138686,"sha":"61eafa92fe04d7ed815111103daf745ac1863db6","ref":"pr-9047","status":"canceled","source":"push","created_at":"2019-03-02T19:33:43.921Z","updated_at":"2019-03-02T19:47:01.614Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552521","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":170552520,"status":"canceled","stage":"test","name":"plugin:ci-elpi","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:33:44.624Z","started_at":null,"finished_at":"2019-03-02T19:47:01.451Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"61eafa92fe04d7ed815111103daf745ac1863db6","short_id":"61eafa92","created_at":"2019-03-02T20:33:30.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:33:30.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/61eafa92fe04d7ed815111103daf745ac1863db6"},"pipeline":{"id":49996846,"iid":7614,"project_id":6138686,"sha":"61eafa92fe04d7ed815111103daf745ac1863db6","ref":"pr-9047","status":"canceled","source":"push","created_at":"2019-03-02T19:33:43.921Z","updated_at":"2019-03-02T19:47:01.614Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552520","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":170552519,"status":"canceled","stage":"test","name":"plugin:ci-coqhammer","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:33:44.612Z","started_at":null,"finished_at":"2019-03-02T19:47:01.430Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"61eafa92fe04d7ed815111103daf745ac1863db6","short_id":"61eafa92","created_at":"2019-03-02T20:33:30.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:33:30.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/61eafa92fe04d7ed815111103daf745ac1863db6"},"pipeline":{"id":49996846,"iid":7614,"project_id":6138686,"sha":"61eafa92fe04d7ed815111103daf745ac1863db6","ref":"pr-9047","status":"canceled","source":"push","created_at":"2019-03-02T19:33:43.921Z","updated_at":"2019-03-02T19:47:01.614Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552519","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":170552518,"status":"canceled","stage":"test","name":"plugin:ci-coq_dpdgraph","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:33:44.597Z","started_at":null,"finished_at":"2019-03-02T19:47:01.412Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"61eafa92fe04d7ed815111103daf745ac1863db6","short_id":"61eafa92","created_at":"2019-03-02T20:33:30.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:33:30.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/61eafa92fe04d7ed815111103daf745ac1863db6"},"pipeline":{"id":49996846,"iid":7614,"project_id":6138686,"sha":"61eafa92fe04d7ed815111103daf745ac1863db6","ref":"pr-9047","status":"canceled","source":"push","created_at":"2019-03-02T19:33:43.921Z","updated_at":"2019-03-02T19:47:01.614Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552518","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":170552517,"status":"canceled","stage":"test","name":"plugin:ci-bignums","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:33:44.584Z","started_at":null,"finished_at":"2019-03-02T19:47:01.393Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"61eafa92fe04d7ed815111103daf745ac1863db6","short_id":"61eafa92","created_at":"2019-03-02T20:33:30.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:33:30.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/61eafa92fe04d7ed815111103daf745ac1863db6"},"pipeline":{"id":49996846,"iid":7614,"project_id":6138686,"sha":"61eafa92fe04d7ed815111103daf745ac1863db6","ref":"pr-9047","status":"canceled","source":"push","created_at":"2019-03-02T19:33:43.921Z","updated_at":"2019-03-02T19:47:01.614Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552517","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":170552516,"status":"canceled","stage":"test","name":"plugin:ci-aac_tactics","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:33:44.570Z","started_at":null,"finished_at":"2019-03-02T19:47:01.373Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"61eafa92fe04d7ed815111103daf745ac1863db6","short_id":"61eafa92","created_at":"2019-03-02T20:33:30.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:33:30.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/61eafa92fe04d7ed815111103daf745ac1863db6"},"pipeline":{"id":49996846,"iid":7614,"project_id":6138686,"sha":"61eafa92fe04d7ed815111103daf745ac1863db6","ref":"pr-9047","status":"canceled","source":"push","created_at":"2019-03-02T19:33:43.921Z","updated_at":"2019-03-02T19:47:01.614Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552516","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":170552515,"status":"canceled","stage":"test","name":"library:ci-vst","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:33:44.554Z","started_at":null,"finished_at":"2019-03-02T19:47:01.354Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"61eafa92fe04d7ed815111103daf745ac1863db6","short_id":"61eafa92","created_at":"2019-03-02T20:33:30.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:33:30.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/61eafa92fe04d7ed815111103daf745ac1863db6"},"pipeline":{"id":49996846,"iid":7614,"project_id":6138686,"sha":"61eafa92fe04d7ed815111103daf745ac1863db6","ref":"pr-9047","status":"canceled","source":"push","created_at":"2019-03-02T19:33:43.921Z","updated_at":"2019-03-02T19:47:01.614Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552515","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":170552514,"status":"canceled","stage":"test","name":"library:ci-verdi-raft","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:33:44.541Z","started_at":null,"finished_at":"2019-03-02T19:47:01.330Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"61eafa92fe04d7ed815111103daf745ac1863db6","short_id":"61eafa92","created_at":"2019-03-02T20:33:30.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:33:30.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/61eafa92fe04d7ed815111103daf745ac1863db6"},"pipeline":{"id":49996846,"iid":7614,"project_id":6138686,"sha":"61eafa92fe04d7ed815111103daf745ac1863db6","ref":"pr-9047","status":"canceled","source":"push","created_at":"2019-03-02T19:33:43.921Z","updated_at":"2019-03-02T19:47:01.614Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552514","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":170552513,"status":"canceled","stage":"test","name":"library:ci-unimath","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:33:44.526Z","started_at":null,"finished_at":"2019-03-02T19:47:01.308Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"61eafa92fe04d7ed815111103daf745ac1863db6","short_id":"61eafa92","created_at":"2019-03-02T20:33:30.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:33:30.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/61eafa92fe04d7ed815111103daf745ac1863db6"},"pipeline":{"id":49996846,"iid":7614,"project_id":6138686,"sha":"61eafa92fe04d7ed815111103daf745ac1863db6","ref":"pr-9047","status":"canceled","source":"push","created_at":"2019-03-02T19:33:43.921Z","updated_at":"2019-03-02T19:47:01.614Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552513","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":170552512,"status":"canceled","stage":"test","name":"library:ci-sf","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:33:44.511Z","started_at":null,"finished_at":"2019-03-02T19:47:01.290Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"61eafa92fe04d7ed815111103daf745ac1863db6","short_id":"61eafa92","created_at":"2019-03-02T20:33:30.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:33:30.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/61eafa92fe04d7ed815111103daf745ac1863db6"},"pipeline":{"id":49996846,"iid":7614,"project_id":6138686,"sha":"61eafa92fe04d7ed815111103daf745ac1863db6","ref":"pr-9047","status":"canceled","source":"push","created_at":"2019-03-02T19:33:43.921Z","updated_at":"2019-03-02T19:47:01.614Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552512","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":170552511,"status":"canceled","stage":"test","name":"library:ci-math-comp","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:33:44.499Z","started_at":null,"finished_at":"2019-03-02T19:47:01.270Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"61eafa92fe04d7ed815111103daf745ac1863db6","short_id":"61eafa92","created_at":"2019-03-02T20:33:30.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:33:30.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/61eafa92fe04d7ed815111103daf745ac1863db6"},"pipeline":{"id":49996846,"iid":7614,"project_id":6138686,"sha":"61eafa92fe04d7ed815111103daf745ac1863db6","ref":"pr-9047","status":"canceled","source":"push","created_at":"2019-03-02T19:33:43.921Z","updated_at":"2019-03-02T19:47:01.614Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552511","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":170552510,"status":"canceled","stage":"test","name":"library:ci-iris-lambda-rust","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:33:44.486Z","started_at":null,"finished_at":"2019-03-02T19:47:01.248Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"61eafa92fe04d7ed815111103daf745ac1863db6","short_id":"61eafa92","created_at":"2019-03-02T20:33:30.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:33:30.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/61eafa92fe04d7ed815111103daf745ac1863db6"},"pipeline":{"id":49996846,"iid":7614,"project_id":6138686,"sha":"61eafa92fe04d7ed815111103daf745ac1863db6","ref":"pr-9047","status":"canceled","source":"push","created_at":"2019-03-02T19:33:43.921Z","updated_at":"2019-03-02T19:47:01.614Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552510","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":170552509,"status":"canceled","stage":"test","name":"library:ci-hott","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:33:44.472Z","started_at":null,"finished_at":"2019-03-02T19:47:01.222Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"61eafa92fe04d7ed815111103daf745ac1863db6","short_id":"61eafa92","created_at":"2019-03-02T20:33:30.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:33:30.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/61eafa92fe04d7ed815111103daf745ac1863db6"},"pipeline":{"id":49996846,"iid":7614,"project_id":6138686,"sha":"61eafa92fe04d7ed815111103daf745ac1863db6","ref":"pr-9047","status":"canceled","source":"push","created_at":"2019-03-02T19:33:43.921Z","updated_at":"2019-03-02T19:47:01.614Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552509","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":170552508,"status":"canceled","stage":"test","name":"library:ci-geocoq","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:33:44.458Z","started_at":null,"finished_at":"2019-03-02T19:47:01.196Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"61eafa92fe04d7ed815111103daf745ac1863db6","short_id":"61eafa92","created_at":"2019-03-02T20:33:30.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:33:30.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/61eafa92fe04d7ed815111103daf745ac1863db6"},"pipeline":{"id":49996846,"iid":7614,"project_id":6138686,"sha":"61eafa92fe04d7ed815111103daf745ac1863db6","ref":"pr-9047","status":"canceled","source":"push","created_at":"2019-03-02T19:33:43.921Z","updated_at":"2019-03-02T19:47:01.614Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552508","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":170552507,"status":"canceled","stage":"test","name":"library:ci-corn","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:33:44.444Z","started_at":null,"finished_at":"2019-03-02T19:47:01.169Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"61eafa92fe04d7ed815111103daf745ac1863db6","short_id":"61eafa92","created_at":"2019-03-02T20:33:30.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:33:30.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/61eafa92fe04d7ed815111103daf745ac1863db6"},"pipeline":{"id":49996846,"iid":7614,"project_id":6138686,"sha":"61eafa92fe04d7ed815111103daf745ac1863db6","ref":"pr-9047","status":"canceled","source":"push","created_at":"2019-03-02T19:33:43.921Z","updated_at":"2019-03-02T19:47:01.614Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552507","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":170552506,"status":"canceled","stage":"test","name":"library:ci-flocq","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:33:44.429Z","started_at":null,"finished_at":"2019-03-02T19:47:01.144Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"61eafa92fe04d7ed815111103daf745ac1863db6","short_id":"61eafa92","created_at":"2019-03-02T20:33:30.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:33:30.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/61eafa92fe04d7ed815111103daf745ac1863db6"},"pipeline":{"id":49996846,"iid":7614,"project_id":6138686,"sha":"61eafa92fe04d7ed815111103daf745ac1863db6","ref":"pr-9047","status":"canceled","source":"push","created_at":"2019-03-02T19:33:43.921Z","updated_at":"2019-03-02T19:47:01.614Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552506","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":170552505,"status":"canceled","stage":"test","name":"library:ci-fiat-crypto-legacy","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:33:44.415Z","started_at":null,"finished_at":"2019-03-02T19:47:01.115Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"61eafa92fe04d7ed815111103daf745ac1863db6","short_id":"61eafa92","created_at":"2019-03-02T20:33:30.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:33:30.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/61eafa92fe04d7ed815111103daf745ac1863db6"},"pipeline":{"id":49996846,"iid":7614,"project_id":6138686,"sha":"61eafa92fe04d7ed815111103daf745ac1863db6","ref":"pr-9047","status":"canceled","source":"push","created_at":"2019-03-02T19:33:43.921Z","updated_at":"2019-03-02T19:47:01.614Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552505","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":170552504,"status":"canceled","stage":"test","name":"library:ci-fiat-crypto","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:33:44.400Z","started_at":null,"finished_at":"2019-03-02T19:47:01.092Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"61eafa92fe04d7ed815111103daf745ac1863db6","short_id":"61eafa92","created_at":"2019-03-02T20:33:30.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:33:30.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/61eafa92fe04d7ed815111103daf745ac1863db6"},"pipeline":{"id":49996846,"iid":7614,"project_id":6138686,"sha":"61eafa92fe04d7ed815111103daf745ac1863db6","ref":"pr-9047","status":"canceled","source":"push","created_at":"2019-03-02T19:33:43.921Z","updated_at":"2019-03-02T19:47:01.614Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552504","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":170552503,"status":"canceled","stage":"test","name":"library:ci-fcsl-pcm","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:33:44.386Z","started_at":null,"finished_at":"2019-03-02T19:47:01.068Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"61eafa92fe04d7ed815111103daf745ac1863db6","short_id":"61eafa92","created_at":"2019-03-02T20:33:30.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:33:30.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/61eafa92fe04d7ed815111103daf745ac1863db6"},"pipeline":{"id":49996846,"iid":7614,"project_id":6138686,"sha":"61eafa92fe04d7ed815111103daf745ac1863db6","ref":"pr-9047","status":"canceled","source":"push","created_at":"2019-03-02T19:33:43.921Z","updated_at":"2019-03-02T19:47:01.614Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552503","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":170552502,"status":"canceled","stage":"test","name":"library:ci-cross-crypto","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:33:44.371Z","started_at":null,"finished_at":"2019-03-02T19:47:01.046Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"61eafa92fe04d7ed815111103daf745ac1863db6","short_id":"61eafa92","created_at":"2019-03-02T20:33:30.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:33:30.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/61eafa92fe04d7ed815111103daf745ac1863db6"},"pipeline":{"id":49996846,"iid":7614,"project_id":6138686,"sha":"61eafa92fe04d7ed815111103daf745ac1863db6","ref":"pr-9047","status":"canceled","source":"push","created_at":"2019-03-02T19:33:43.921Z","updated_at":"2019-03-02T19:47:01.614Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552502","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":170552501,"status":"canceled","stage":"test","name":"library:ci-coquelicot","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:33:44.357Z","started_at":null,"finished_at":"2019-03-02T19:47:00.965Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"61eafa92fe04d7ed815111103daf745ac1863db6","short_id":"61eafa92","created_at":"2019-03-02T20:33:30.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:33:30.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/61eafa92fe04d7ed815111103daf745ac1863db6"},"pipeline":{"id":49996846,"iid":7614,"project_id":6138686,"sha":"61eafa92fe04d7ed815111103daf745ac1863db6","ref":"pr-9047","status":"canceled","source":"push","created_at":"2019-03-02T19:33:43.921Z","updated_at":"2019-03-02T19:47:01.614Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552501","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":170552500,"status":"canceled","stage":"test","name":"library:ci-compcert","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:33:44.343Z","started_at":null,"finished_at":"2019-03-02T19:47:00.933Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"61eafa92fe04d7ed815111103daf745ac1863db6","short_id":"61eafa92","created_at":"2019-03-02T20:33:30.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:33:30.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/61eafa92fe04d7ed815111103daf745ac1863db6"},"pipeline":{"id":49996846,"iid":7614,"project_id":6138686,"sha":"61eafa92fe04d7ed815111103daf745ac1863db6","ref":"pr-9047","status":"canceled","source":"push","created_at":"2019-03-02T19:33:43.921Z","updated_at":"2019-03-02T19:47:01.614Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552500","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":170552499,"status":"canceled","stage":"test","name":"library:ci-color","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:33:44.329Z","started_at":null,"finished_at":"2019-03-02T19:47:00.900Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"61eafa92fe04d7ed815111103daf745ac1863db6","short_id":"61eafa92","created_at":"2019-03-02T20:33:30.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:33:30.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/61eafa92fe04d7ed815111103daf745ac1863db6"},"pipeline":{"id":49996846,"iid":7614,"project_id":6138686,"sha":"61eafa92fe04d7ed815111103daf745ac1863db6","ref":"pr-9047","status":"canceled","source":"push","created_at":"2019-03-02T19:33:43.921Z","updated_at":"2019-03-02T19:47:01.614Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552499","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":170552498,"status":"canceled","stage":"test","name":"library:ci-bedrock2","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:33:44.313Z","started_at":null,"finished_at":"2019-03-02T19:47:00.875Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"61eafa92fe04d7ed815111103daf745ac1863db6","short_id":"61eafa92","created_at":"2019-03-02T20:33:30.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:33:30.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/61eafa92fe04d7ed815111103daf745ac1863db6"},"pipeline":{"id":49996846,"iid":7614,"project_id":6138686,"sha":"61eafa92fe04d7ed815111103daf745ac1863db6","ref":"pr-9047","status":"canceled","source":"push","created_at":"2019-03-02T19:33:43.921Z","updated_at":"2019-03-02T19:47:01.614Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552498","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":170552497,"status":"canceled","stage":"test","name":"validate:quick","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:33:44.298Z","started_at":null,"finished_at":"2019-03-02T19:47:00.851Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"61eafa92fe04d7ed815111103daf745ac1863db6","short_id":"61eafa92","created_at":"2019-03-02T20:33:30.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:33:30.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/61eafa92fe04d7ed815111103daf745ac1863db6"},"pipeline":{"id":49996846,"iid":7614,"project_id":6138686,"sha":"61eafa92fe04d7ed815111103daf745ac1863db6","ref":"pr-9047","status":"canceled","source":"push","created_at":"2019-03-02T19:33:43.921Z","updated_at":"2019-03-02T19:47:01.614Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552497","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":170552496,"status":"canceled","stage":"test","name":"validate:edge+flambda","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:33:44.283Z","started_at":null,"finished_at":"2019-03-02T19:47:00.823Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"61eafa92fe04d7ed815111103daf745ac1863db6","short_id":"61eafa92","created_at":"2019-03-02T20:33:30.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:33:30.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/61eafa92fe04d7ed815111103daf745ac1863db6"},"pipeline":{"id":49996846,"iid":7614,"project_id":6138686,"sha":"61eafa92fe04d7ed815111103daf745ac1863db6","ref":"pr-9047","status":"canceled","source":"push","created_at":"2019-03-02T19:33:43.921Z","updated_at":"2019-03-02T19:47:01.614Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552496","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":170552495,"status":"canceled","stage":"test","name":"validate:base+32bit","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:33:44.270Z","started_at":null,"finished_at":"2019-03-02T19:47:00.799Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"61eafa92fe04d7ed815111103daf745ac1863db6","short_id":"61eafa92","created_at":"2019-03-02T20:33:30.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:33:30.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/61eafa92fe04d7ed815111103daf745ac1863db6"},"pipeline":{"id":49996846,"iid":7614,"project_id":6138686,"sha":"61eafa92fe04d7ed815111103daf745ac1863db6","ref":"pr-9047","status":"canceled","source":"push","created_at":"2019-03-02T19:33:43.921Z","updated_at":"2019-03-02T19:47:01.614Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552495","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":170552494,"status":"canceled","stage":"test","name":"validate:base","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:33:44.255Z","started_at":null,"finished_at":"2019-03-02T19:47:00.773Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"61eafa92fe04d7ed815111103daf745ac1863db6","short_id":"61eafa92","created_at":"2019-03-02T20:33:30.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:33:30.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/61eafa92fe04d7ed815111103daf745ac1863db6"},"pipeline":{"id":49996846,"iid":7614,"project_id":6138686,"sha":"61eafa92fe04d7ed815111103daf745ac1863db6","ref":"pr-9047","status":"canceled","source":"push","created_at":"2019-03-02T19:33:43.921Z","updated_at":"2019-03-02T19:47:01.614Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552494","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":170552493,"status":"canceled","stage":"test","name":"test-suite:base+async","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:33:44.240Z","started_at":null,"finished_at":"2019-03-02T19:47:00.745Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"61eafa92fe04d7ed815111103daf745ac1863db6","short_id":"61eafa92","created_at":"2019-03-02T20:33:30.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:33:30.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/61eafa92fe04d7ed815111103daf745ac1863db6"},"pipeline":{"id":49996846,"iid":7614,"project_id":6138686,"sha":"61eafa92fe04d7ed815111103daf745ac1863db6","ref":"pr-9047","status":"canceled","source":"push","created_at":"2019-03-02T19:33:43.921Z","updated_at":"2019-03-02T19:47:01.614Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552493","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":170552492,"status":"canceled","stage":"test","name":"test-suite:edge+trunk+dune","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":true,"created_at":"2019-03-02T19:33:44.226Z","started_at":null,"finished_at":"2019-03-02T19:47:00.724Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"61eafa92fe04d7ed815111103daf745ac1863db6","short_id":"61eafa92","created_at":"2019-03-02T20:33:30.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:33:30.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/61eafa92fe04d7ed815111103daf745ac1863db6"},"pipeline":{"id":49996846,"iid":7614,"project_id":6138686,"sha":"61eafa92fe04d7ed815111103daf745ac1863db6","ref":"pr-9047","status":"canceled","source":"push","created_at":"2019-03-02T19:33:43.921Z","updated_at":"2019-03-02T19:47:01.614Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552492","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":170552491,"status":"canceled","stage":"test","name":"test-suite:edge+trunk+make","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":true,"created_at":"2019-03-02T19:33:44.211Z","started_at":null,"finished_at":"2019-03-02T19:47:00.700Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"61eafa92fe04d7ed815111103daf745ac1863db6","short_id":"61eafa92","created_at":"2019-03-02T20:33:30.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:33:30.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/61eafa92fe04d7ed815111103daf745ac1863db6"},"pipeline":{"id":49996846,"iid":7614,"project_id":6138686,"sha":"61eafa92fe04d7ed815111103daf745ac1863db6","ref":"pr-9047","status":"canceled","source":"push","created_at":"2019-03-02T19:33:43.921Z","updated_at":"2019-03-02T19:47:01.614Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552491","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":170552490,"status":"canceled","stage":"test","name":"test-suite:egde:dune:dev","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:33:44.197Z","started_at":null,"finished_at":"2019-03-02T19:47:00.680Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"61eafa92fe04d7ed815111103daf745ac1863db6","short_id":"61eafa92","created_at":"2019-03-02T20:33:30.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:33:30.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/61eafa92fe04d7ed815111103daf745ac1863db6"},"pipeline":{"id":49996846,"iid":7614,"project_id":6138686,"sha":"61eafa92fe04d7ed815111103daf745ac1863db6","ref":"pr-9047","status":"canceled","source":"push","created_at":"2019-03-02T19:33:43.921Z","updated_at":"2019-03-02T19:47:01.614Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552490","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":170552489,"status":"canceled","stage":"test","name":"test-suite:edge+flambda","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:33:44.183Z","started_at":null,"finished_at":"2019-03-02T19:47:00.661Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"61eafa92fe04d7ed815111103daf745ac1863db6","short_id":"61eafa92","created_at":"2019-03-02T20:33:30.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:33:30.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/61eafa92fe04d7ed815111103daf745ac1863db6"},"pipeline":{"id":49996846,"iid":7614,"project_id":6138686,"sha":"61eafa92fe04d7ed815111103daf745ac1863db6","ref":"pr-9047","status":"canceled","source":"push","created_at":"2019-03-02T19:33:43.921Z","updated_at":"2019-03-02T19:47:01.614Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552489","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":170552488,"status":"canceled","stage":"test","name":"test-suite:base+32bit","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:33:44.169Z","started_at":null,"finished_at":"2019-03-02T19:47:00.640Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"61eafa92fe04d7ed815111103daf745ac1863db6","short_id":"61eafa92","created_at":"2019-03-02T20:33:30.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:33:30.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/61eafa92fe04d7ed815111103daf745ac1863db6"},"pipeline":{"id":49996846,"iid":7614,"project_id":6138686,"sha":"61eafa92fe04d7ed815111103daf745ac1863db6","ref":"pr-9047","status":"canceled","source":"push","created_at":"2019-03-02T19:33:43.921Z","updated_at":"2019-03-02T19:47:01.614Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552488","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":170552487,"status":"canceled","stage":"test","name":"test-suite:base","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:33:44.155Z","started_at":null,"finished_at":"2019-03-02T19:47:00.621Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"61eafa92fe04d7ed815111103daf745ac1863db6","short_id":"61eafa92","created_at":"2019-03-02T20:33:30.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:33:30.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/61eafa92fe04d7ed815111103daf745ac1863db6"},"pipeline":{"id":49996846,"iid":7614,"project_id":6138686,"sha":"61eafa92fe04d7ed815111103daf745ac1863db6","ref":"pr-9047","status":"canceled","source":"push","created_at":"2019-03-02T19:33:43.921Z","updated_at":"2019-03-02T19:47:01.614Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552487","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":170552486,"status":"canceled","stage":"test","name":"doc:ml-api:odoc","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:33:44.140Z","started_at":null,"finished_at":"2019-03-02T19:47:00.602Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"61eafa92fe04d7ed815111103daf745ac1863db6","short_id":"61eafa92","created_at":"2019-03-02T20:33:30.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:33:30.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/61eafa92fe04d7ed815111103daf745ac1863db6"},"pipeline":{"id":49996846,"iid":7614,"project_id":6138686,"sha":"61eafa92fe04d7ed815111103daf745ac1863db6","ref":"pr-9047","status":"canceled","source":"push","created_at":"2019-03-02T19:33:43.921Z","updated_at":"2019-03-02T19:47:01.614Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552486","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":170552485,"status":"canceled","stage":"test","name":"doc:stdlib:dune","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:33:44.124Z","started_at":null,"finished_at":"2019-03-02T19:47:00.583Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"61eafa92fe04d7ed815111103daf745ac1863db6","short_id":"61eafa92","created_at":"2019-03-02T20:33:30.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:33:30.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/61eafa92fe04d7ed815111103daf745ac1863db6"},"pipeline":{"id":49996846,"iid":7614,"project_id":6138686,"sha":"61eafa92fe04d7ed815111103daf745ac1863db6","ref":"pr-9047","status":"canceled","source":"push","created_at":"2019-03-02T19:33:43.921Z","updated_at":"2019-03-02T19:47:01.614Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552485","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":170552484,"status":"canceled","stage":"test","name":"doc:refman:dune","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:33:44.108Z","started_at":null,"finished_at":"2019-03-02T19:47:00.564Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"61eafa92fe04d7ed815111103daf745ac1863db6","short_id":"61eafa92","created_at":"2019-03-02T20:33:30.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:33:30.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/61eafa92fe04d7ed815111103daf745ac1863db6"},"pipeline":{"id":49996846,"iid":7614,"project_id":6138686,"sha":"61eafa92fe04d7ed815111103daf745ac1863db6","ref":"pr-9047","status":"canceled","source":"push","created_at":"2019-03-02T19:33:43.921Z","updated_at":"2019-03-02T19:47:01.614Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552484","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":170552483,"status":"canceled","stage":"test","name":"doc:refman","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:33:44.095Z","started_at":null,"finished_at":"2019-03-02T19:47:00.546Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"61eafa92fe04d7ed815111103daf745ac1863db6","short_id":"61eafa92","created_at":"2019-03-02T20:33:30.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:33:30.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/61eafa92fe04d7ed815111103daf745ac1863db6"},"pipeline":{"id":49996846,"iid":7614,"project_id":6138686,"sha":"61eafa92fe04d7ed815111103daf745ac1863db6","ref":"pr-9047","status":"canceled","source":"push","created_at":"2019-03-02T19:33:43.921Z","updated_at":"2019-03-02T19:47:01.614Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552483","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":170552482,"status":"canceled","stage":"test","name":"pkg:nix","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:33:44.080Z","started_at":null,"finished_at":"2019-03-02T19:47:00.526Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"61eafa92fe04d7ed815111103daf745ac1863db6","short_id":"61eafa92","created_at":"2019-03-02T20:33:30.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:33:30.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/61eafa92fe04d7ed815111103daf745ac1863db6"},"pipeline":{"id":49996846,"iid":7614,"project_id":6138686,"sha":"61eafa92fe04d7ed815111103daf745ac1863db6","ref":"pr-9047","status":"canceled","source":"push","created_at":"2019-03-02T19:33:43.921Z","updated_at":"2019-03-02T19:47:01.614Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552482","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":170552481,"status":"canceled","stage":"test","name":"pkg:opam","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:33:44.067Z","started_at":null,"finished_at":"2019-03-02T19:47:00.509Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"61eafa92fe04d7ed815111103daf745ac1863db6","short_id":"61eafa92","created_at":"2019-03-02T20:33:30.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:33:30.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/61eafa92fe04d7ed815111103daf745ac1863db6"},"pipeline":{"id":49996846,"iid":7614,"project_id":6138686,"sha":"61eafa92fe04d7ed815111103daf745ac1863db6","ref":"pr-9047","status":"canceled","source":"push","created_at":"2019-03-02T19:33:43.921Z","updated_at":"2019-03-02T19:47:01.614Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552481","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":170552480,"status":"canceled","stage":"test","name":"lint","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:33:44.053Z","started_at":null,"finished_at":"2019-03-02T19:47:00.492Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"61eafa92fe04d7ed815111103daf745ac1863db6","short_id":"61eafa92","created_at":"2019-03-02T20:33:30.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:33:30.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/61eafa92fe04d7ed815111103daf745ac1863db6"},"pipeline":{"id":49996846,"iid":7614,"project_id":6138686,"sha":"61eafa92fe04d7ed815111103daf745ac1863db6","ref":"pr-9047","status":"canceled","source":"push","created_at":"2019-03-02T19:33:43.921Z","updated_at":"2019-03-02T19:47:01.614Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552480","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":170552479,"status":"canceled","stage":"test","name":"windows64","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:33:44.035Z","started_at":null,"finished_at":"2019-03-02T19:47:00.473Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"61eafa92fe04d7ed815111103daf745ac1863db6","short_id":"61eafa92","created_at":"2019-03-02T20:33:30.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:33:30.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/61eafa92fe04d7ed815111103daf745ac1863db6"},"pipeline":{"id":49996846,"iid":7614,"project_id":6138686,"sha":"61eafa92fe04d7ed815111103daf745ac1863db6","ref":"pr-9047","status":"canceled","source":"push","created_at":"2019-03-02T19:33:43.921Z","updated_at":"2019-03-02T19:47:01.614Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552479","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":["windows"]}
{"id":170552478,"status":"canceled","stage":"test","name":"build:base+async","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:33:44.019Z","started_at":null,"finished_at":"2019-03-02T19:47:00.454Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"61eafa92fe04d7ed815111103daf745ac1863db6","short_id":"61eafa92","created_at":"2019-03-02T20:33:30.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:33:30.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/61eafa92fe04d7ed815111103daf745ac1863db6"},"pipeline":{"id":49996846,"iid":7614,"project_id":6138686,"sha":"61eafa92fe04d7ed815111103daf745ac1863db6","ref":"pr-9047","status":"canceled","source":"push","created_at":"2019-03-02T19:33:43.921Z","updated_at":"2019-03-02T19:47:01.614Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552478","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":170552477,"status":"canceled","stage":"build","name":"build:quick","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:33:43.993Z","started_at":"2019-03-02T19:33:49.276Z","finished_at":"2019-03-02T19:47:00.434Z","duration":791.15779,"queued_duration":4.337793,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"61eafa92fe04d7ed815111103daf745ac1863db6","short_id":"61eafa92","created_at":"2019-03-02T20:33:30.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:33:30.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/61eafa92fe04d7ed815111103daf745ac1863db6"},"pipeline":{"id":49996846,"iid":7614,"project_id":6138686,"sha":"61eafa92fe04d7ed815111103daf745ac1863db6","ref":"pr-9047","status":"canceled","source":"push","created_at":"2019-03-02T19:33:43.921Z","updated_at":"2019-03-02T19:47:01.614Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552477","artifacts":[{"file_type":"trace","size":132194,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":170552476,"status":"success","stage":"build","name":"build:edge+flambda:dune:dev","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:33:43.976Z","started_at":"2019-03-02T19:33:48.995Z","finished_at":"2019-03-02T19:41:36.799Z","duration":467.80388,"queued_duration":4.005219,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"61eafa92fe04d7ed815111103daf745ac1863db6","short_id":"61eafa92","created_at":"2019-03-02T20:33:30.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:33:30.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/61eafa92fe04d7ed815111103daf745ac1863db6"},"pipeline":{"id":49996846,"iid":7614,"project_id":6138686,"sha":"61eafa92fe04d7ed815111103daf745ac1863db6","ref":"pr-9047","status":"canceled","source":"push","created_at":"2019-03-02T19:33:43.921Z","updated_at":"2019-03-02T19:47:01.614Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552476","artifacts":[{"file_type":"trace","size":183638,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":"2019-03-09T19:41:29.662Z","tag_list":[]}
{"id":170552475,"status":"canceled","stage":"build","name":"build:edge+flambda","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:33:43.961Z","started_at":"2019-03-02T19:33:48.687Z","finished_at":"2019-03-02T19:47:00.413Z","duration":791.726244,"queued_duration":3.671914,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"61eafa92fe04d7ed815111103daf745ac1863db6","short_id":"61eafa92","created_at":"2019-03-02T20:33:30.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:33:30.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/61eafa92fe04d7ed815111103daf745ac1863db6"},"pipeline":{"id":49996846,"iid":7614,"project_id":6138686,"sha":"61eafa92fe04d7ed815111103daf745ac1863db6","ref":"pr-9047","status":"canceled","source":"push","created_at":"2019-03-02T19:33:43.921Z","updated_at":"2019-03-02T19:47:01.614Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552475","artifacts":[{"file_type":"trace","size":196758,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":170552474,"status":"success","stage":"build","name":"build:base+32bit","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:33:43.947Z","started_at":"2019-03-02T19:33:48.408Z","finished_at":"2019-03-02T19:46:32.815Z","duration":764.407022,"queued_duration":3.368626,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"61eafa92fe04d7ed815111103daf745ac1863db6","short_id":"61eafa92","created_at":"2019-03-02T20:33:30.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:33:30.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/61eafa92fe04d7ed815111103daf745ac1863db6"},"pipeline":{"id":49996846,"iid":7614,"project_id":6138686,"sha":"61eafa92fe04d7ed815111103daf745ac1863db6","ref":"pr-9047","status":"canceled","source":"push","created_at":"2019-03-02T19:33:43.921Z","updated_at":"2019-03-02T19:47:01.614Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552474","artifacts":[{"file_type":"trace","size":384535,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":"2019-03-09T19:46:27.182Z","tag_list":[]}
{"id":170552473,"status":"canceled","stage":"build","name":"build:base","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:33:43.931Z","started_at":"2019-03-02T19:33:48.162Z","finished_at":"2019-03-02T19:47:00.391Z","duration":792.229363,"queued_duration":3.097215,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"61eafa92fe04d7ed815111103daf745ac1863db6","short_id":"61eafa92","created_at":"2019-03-02T20:33:30.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:33:30.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/61eafa92fe04d7ed815111103daf745ac1863db6"},"pipeline":{"id":49996846,"iid":7614,"project_id":6138686,"sha":"61eafa92fe04d7ed815111103daf745ac1863db6","ref":"pr-9047","status":"canceled","source":"push","created_at":"2019-03-02T19:33:43.921Z","updated_at":"2019-03-02T19:47:01.614Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552473","artifacts":[{"file_type":"trace","size":273560,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
