{"id":346296005,"status":"success","stage":"stage-2","name":"doc:refman","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-09T11:39:33.865Z","started_at":"2019-11-09T11:39:34.265Z","finished_at":"2019-11-09T11:47:15.793Z","duration":461.527848,"queued_duration":0.376025,"user":{"id":2335054,"username":"ppedrot","name":"Pierre-Marie Pédrot","state":"active","avatar_url":"https://secure.gravatar.com/avatar/37d965b25a1290e4049e01c7911ef415?s=80&d=identicon","web_url":"https://gitlab.com/ppedrot","created_at":"2018-05-24T14:18:40.091Z","bio":"","location":null,"public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":null,"job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","short_id":"24dcc3e2","created_at":"2019-11-08T16:29:16.000+01:00","parent_ids":["f70ec9d4279f7b4b943eb28f15d6e4244bb82fc5"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-08T16:29:16.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe"},"pipeline":{"id":94667214,"iid":11865,"project_id":6138686,"sha":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-08T15:29:30.788Z","updated_at":"2019-11-09T11:47:15.866Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/94667214"},"web_url":"https://gitlab.com/coq/coq/-/jobs/346296005","artifacts":[{"file_type":"trace","size":1223266,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2020-01-08T11:47:14.400Z","tag_list":[]}
{"id":345887339,"status":"success","stage":"stage-2","name":"library:ci-fiat-crypto","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-08T16:41:07.442Z","started_at":"2019-11-08T16:41:07.947Z","finished_at":"2019-11-08T17:55:44.740Z","duration":4476.792539,"queued_duration":0.483739,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","short_id":"24dcc3e2","created_at":"2019-11-08T16:29:16.000+01:00","parent_ids":["f70ec9d4279f7b4b943eb28f15d6e4244bb82fc5"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-08T16:29:16.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe"},"pipeline":{"id":94667214,"iid":11865,"project_id":6138686,"sha":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-08T15:29:30.788Z","updated_at":"2019-11-09T11:47:15.866Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/94667214"},"web_url":"https://gitlab.com/coq/coq/-/jobs/345887339","artifacts":[{"file_type":"trace","size":1247865,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":345803203,"status":"success","stage":"stage-4","name":"library:ci-corn","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-08T15:29:32.680Z","started_at":"2019-11-08T16:18:46.570Z","finished_at":"2019-11-08T16:39:15.419Z","duration":1228.84941,"queued_duration":0.297606,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","short_id":"24dcc3e2","created_at":"2019-11-08T16:29:16.000+01:00","parent_ids":["f70ec9d4279f7b4b943eb28f15d6e4244bb82fc5"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-08T16:29:16.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe"},"pipeline":{"id":94667214,"iid":11865,"project_id":6138686,"sha":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-08T15:29:30.788Z","updated_at":"2019-11-09T11:47:15.866Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/94667214"},"web_url":"https://gitlab.com/coq/coq/-/jobs/345803203","artifacts":[{"file_type":"trace","size":413242,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":345803202,"status":"success","stage":"stage-3","name":"library:ci-math-classes","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-08T15:29:32.657Z","started_at":"2019-11-08T16:04:31.349Z","finished_at":"2019-11-08T16:18:46.175Z","duration":854.825891,"queued_duration":0.727977,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","short_id":"24dcc3e2","created_at":"2019-11-08T16:29:16.000+01:00","parent_ids":["f70ec9d4279f7b4b943eb28f15d6e4244bb82fc5"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-08T16:29:16.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe"},"pipeline":{"id":94667214,"iid":11865,"project_id":6138686,"sha":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-08T15:29:30.788Z","updated_at":"2019-11-09T11:47:15.866Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/94667214"},"web_url":"https://gitlab.com/coq/coq/-/jobs/345803202","artifacts":[{"file_type":"trace","size":186520,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":345803201,"status":"success","stage":"stage-3","name":"library:ci-color","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-08T15:29:32.638Z","started_at":"2019-11-08T16:04:31.229Z","finished_at":"2019-11-08T16:56:37.435Z","duration":3126.205528,"queued_duration":0.678672,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","short_id":"24dcc3e2","created_at":"2019-11-08T16:29:16.000+01:00","parent_ids":["f70ec9d4279f7b4b943eb28f15d6e4244bb82fc5"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-08T16:29:16.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe"},"pipeline":{"id":94667214,"iid":11865,"project_id":6138686,"sha":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-08T15:29:30.788Z","updated_at":"2019-11-09T11:47:15.866Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/94667214"},"web_url":"https://gitlab.com/coq/coq/-/jobs/345803201","artifacts":[{"file_type":"trace","size":235006,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":345803200,"status":"success","stage":"stage-2","name":"plugin:ci-relation_algebra","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-08T15:29:32.608Z","started_at":"2019-11-08T15:49:11.720Z","finished_at":"2019-11-08T15:56:56.740Z","duration":465.020633,"queued_duration":3.832529,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","short_id":"24dcc3e2","created_at":"2019-11-08T16:29:16.000+01:00","parent_ids":["f70ec9d4279f7b4b943eb28f15d6e4244bb82fc5"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-08T16:29:16.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe"},"pipeline":{"id":94667214,"iid":11865,"project_id":6138686,"sha":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-08T15:29:30.788Z","updated_at":"2019-11-09T11:47:15.866Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/94667214"},"web_url":"https://gitlab.com/coq/coq/-/jobs/345803200","artifacts":[{"file_type":"trace","size":60633,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":345803198,"status":"success","stage":"stage-2","name":"plugin:ci-quickchick","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-08T15:29:32.584Z","started_at":"2019-11-08T16:00:06.367Z","finished_at":"2019-11-08T16:07:34.397Z","duration":448.029598,"queued_duration":2.39672,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","short_id":"24dcc3e2","created_at":"2019-11-08T16:29:16.000+01:00","parent_ids":["f70ec9d4279f7b4b943eb28f15d6e4244bb82fc5"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-08T16:29:16.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe"},"pipeline":{"id":94667214,"iid":11865,"project_id":6138686,"sha":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-08T15:29:30.788Z","updated_at":"2019-11-09T11:47:15.866Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/94667214"},"web_url":"https://gitlab.com/coq/coq/-/jobs/345803198","artifacts":[{"file_type":"trace","size":254818,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":345803197,"status":"success","stage":"stage-2","name":"plugin:ci-perennial","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-08T15:29:32.564Z","started_at":"2019-11-08T16:00:06.297Z","finished_at":"2019-11-08T16:35:07.033Z","duration":2100.73603,"queued_duration":2.388621,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","short_id":"24dcc3e2","created_at":"2019-11-08T16:29:16.000+01:00","parent_ids":["f70ec9d4279f7b4b943eb28f15d6e4244bb82fc5"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-08T16:29:16.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe"},"pipeline":{"id":94667214,"iid":11865,"project_id":6138686,"sha":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-08T15:29:30.788Z","updated_at":"2019-11-09T11:47:15.866Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/94667214"},"web_url":"https://gitlab.com/coq/coq/-/jobs/345803197","artifacts":[{"file_type":"trace","size":37872,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":345803195,"status":"success","stage":"stage-2","name":"plugin:ci-paramcoq","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-08T15:29:32.542Z","started_at":"2019-11-08T15:49:11.659Z","finished_at":"2019-11-08T15:52:16.718Z","duration":185.059207,"queued_duration":3.829264,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","short_id":"24dcc3e2","created_at":"2019-11-08T16:29:16.000+01:00","parent_ids":["f70ec9d4279f7b4b943eb28f15d6e4244bb82fc5"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-08T16:29:16.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe"},"pipeline":{"id":94667214,"iid":11865,"project_id":6138686,"sha":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-08T15:29:30.788Z","updated_at":"2019-11-09T11:47:15.866Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/94667214"},"web_url":"https://gitlab.com/coq/coq/-/jobs/345803195","artifacts":[{"file_type":"trace","size":86672,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":345803194,"status":"success","stage":"stage-2","name":"plugin:ci-mtac2","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-08T15:29:32.519Z","started_at":"2019-11-08T15:49:11.604Z","finished_at":"2019-11-08T15:53:54.134Z","duration":282.5299,"queued_duration":3.824161,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","short_id":"24dcc3e2","created_at":"2019-11-08T16:29:16.000+01:00","parent_ids":["f70ec9d4279f7b4b943eb28f15d6e4244bb82fc5"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-08T16:29:16.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe"},"pipeline":{"id":94667214,"iid":11865,"project_id":6138686,"sha":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-08T15:29:30.788Z","updated_at":"2019-11-09T11:47:15.866Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/94667214"},"web_url":"https://gitlab.com/coq/coq/-/jobs/345803194","artifacts":[{"file_type":"trace","size":144466,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":345803192,"status":"success","stage":"stage-2","name":"plugin:ci-fiat_parsers","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-08T15:29:32.496Z","started_at":"2019-11-08T15:49:11.552Z","finished_at":"2019-11-08T16:10:17.409Z","duration":1265.85696,"queued_duration":3.833025,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","short_id":"24dcc3e2","created_at":"2019-11-08T16:29:16.000+01:00","parent_ids":["f70ec9d4279f7b4b943eb28f15d6e4244bb82fc5"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-08T16:29:16.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe"},"pipeline":{"id":94667214,"iid":11865,"project_id":6138686,"sha":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-08T15:29:30.788Z","updated_at":"2019-11-09T11:47:15.866Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/94667214"},"web_url":"https://gitlab.com/coq/coq/-/jobs/345803192","artifacts":[{"file_type":"trace","size":264538,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":345803191,"status":"success","stage":"stage-2","name":"plugin:ci-equations","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-08T15:29:32.459Z","started_at":"2019-11-08T15:49:11.497Z","finished_at":"2019-11-08T15:56:36.673Z","duration":445.175948,"queued_duration":3.832332,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","short_id":"24dcc3e2","created_at":"2019-11-08T16:29:16.000+01:00","parent_ids":["f70ec9d4279f7b4b943eb28f15d6e4244bb82fc5"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-08T16:29:16.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe"},"pipeline":{"id":94667214,"iid":11865,"project_id":6138686,"sha":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-08T15:29:30.788Z","updated_at":"2019-11-09T11:47:15.866Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/94667214"},"web_url":"https://gitlab.com/coq/coq/-/jobs/345803191","artifacts":[{"file_type":"trace","size":106010,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":345803190,"status":"success","stage":"stage-2","name":"plugin:ci-elpi","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-08T15:29:32.437Z","started_at":"2019-11-08T15:49:11.440Z","finished_at":"2019-11-08T15:53:10.765Z","duration":239.324594,"queued_duration":3.842642,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","short_id":"24dcc3e2","created_at":"2019-11-08T16:29:16.000+01:00","parent_ids":["f70ec9d4279f7b4b943eb28f15d6e4244bb82fc5"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-08T16:29:16.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe"},"pipeline":{"id":94667214,"iid":11865,"project_id":6138686,"sha":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-08T15:29:30.788Z","updated_at":"2019-11-09T11:47:15.866Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/94667214"},"web_url":"https://gitlab.com/coq/coq/-/jobs/345803190","artifacts":[{"file_type":"trace","size":385252,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":345803189,"status":"success","stage":"stage-2","name":"plugin:ci-coqhammer","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-08T15:29:32.414Z","started_at":"2019-11-08T15:49:11.390Z","finished_at":"2019-11-08T15:52:41.017Z","duration":209.626553,"queued_duration":3.98204,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","short_id":"24dcc3e2","created_at":"2019-11-08T16:29:16.000+01:00","parent_ids":["f70ec9d4279f7b4b943eb28f15d6e4244bb82fc5"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-08T16:29:16.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe"},"pipeline":{"id":94667214,"iid":11865,"project_id":6138686,"sha":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-08T15:29:30.788Z","updated_at":"2019-11-09T11:47:15.866Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/94667214"},"web_url":"https://gitlab.com/coq/coq/-/jobs/345803189","artifacts":[{"file_type":"trace","size":69106,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":345803188,"status":"success","stage":"stage-2","name":"plugin:ci-coq_dpdgraph","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-08T15:29:32.385Z","started_at":"2019-11-08T15:49:11.342Z","finished_at":"2019-11-08T15:52:00.541Z","duration":169.198349,"queued_duration":3.99468,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","short_id":"24dcc3e2","created_at":"2019-11-08T16:29:16.000+01:00","parent_ids":["f70ec9d4279f7b4b943eb28f15d6e4244bb82fc5"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-08T16:29:16.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe"},"pipeline":{"id":94667214,"iid":11865,"project_id":6138686,"sha":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-08T15:29:30.788Z","updated_at":"2019-11-09T11:47:15.866Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/94667214"},"web_url":"https://gitlab.com/coq/coq/-/jobs/345803188","artifacts":[{"file_type":"trace","size":45436,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":345803187,"status":"success","stage":"stage-2","name":"plugin:ci-bignums","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-08T15:29:32.353Z","started_at":"2019-11-08T16:00:06.240Z","finished_at":"2019-11-08T16:04:30.427Z","duration":264.186918,"queued_duration":2.379272,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","short_id":"24dcc3e2","created_at":"2019-11-08T16:29:16.000+01:00","parent_ids":["f70ec9d4279f7b4b943eb28f15d6e4244bb82fc5"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-08T16:29:16.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe"},"pipeline":{"id":94667214,"iid":11865,"project_id":6138686,"sha":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-08T15:29:30.788Z","updated_at":"2019-11-09T11:47:15.866Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/94667214"},"web_url":"https://gitlab.com/coq/coq/-/jobs/345803187","artifacts":[{"file_type":"trace","size":48410,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":345803186,"status":"success","stage":"stage-2","name":"plugin:ci-aac_tactics","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-08T15:29:32.327Z","started_at":"2019-11-08T15:49:11.290Z","finished_at":"2019-11-08T15:52:11.013Z","duration":179.722783,"queued_duration":4.004813,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","short_id":"24dcc3e2","created_at":"2019-11-08T16:29:16.000+01:00","parent_ids":["f70ec9d4279f7b4b943eb28f15d6e4244bb82fc5"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-08T16:29:16.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe"},"pipeline":{"id":94667214,"iid":11865,"project_id":6138686,"sha":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-08T15:29:30.788Z","updated_at":"2019-11-09T11:47:15.866Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/94667214"},"web_url":"https://gitlab.com/coq/coq/-/jobs/345803186","artifacts":[{"file_type":"trace","size":51477,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":345803185,"status":"failed","stage":"stage-2","name":"library:ci-vst","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-08T15:29:32.306Z","started_at":"2019-11-08T16:00:06.034Z","finished_at":"2019-11-08T16:03:12.076Z","duration":186.041142,"queued_duration":2.232834,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","short_id":"24dcc3e2","created_at":"2019-11-08T16:29:16.000+01:00","parent_ids":["f70ec9d4279f7b4b943eb28f15d6e4244bb82fc5"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-08T16:29:16.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe"},"pipeline":{"id":94667214,"iid":11865,"project_id":6138686,"sha":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-08T15:29:30.788Z","updated_at":"2019-11-09T11:47:15.866Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/94667214"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/345803185","artifacts":[{"file_type":"trace","size":154572,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":345803184,"status":"success","stage":"stage-2","name":"library:ci-verdi-raft","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-08T15:29:32.277Z","started_at":"2019-11-08T16:00:05.942Z","finished_at":"2019-11-08T16:22:58.813Z","duration":1372.870895,"queued_duration":2.225645,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","short_id":"24dcc3e2","created_at":"2019-11-08T16:29:16.000+01:00","parent_ids":["f70ec9d4279f7b4b943eb28f15d6e4244bb82fc5"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-08T16:29:16.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe"},"pipeline":{"id":94667214,"iid":11865,"project_id":6138686,"sha":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-08T15:29:30.788Z","updated_at":"2019-11-09T11:47:15.866Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/94667214"},"web_url":"https://gitlab.com/coq/coq/-/jobs/345803184","artifacts":[{"file_type":"trace","size":209502,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":345803183,"status":"success","stage":"stage-2","name":"library:ci-unimath","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-08T15:29:32.251Z","started_at":"2019-11-08T16:00:05.853Z","finished_at":"2019-11-08T17:17:04.422Z","duration":4618.568948,"queued_duration":2.285576,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","short_id":"24dcc3e2","created_at":"2019-11-08T16:29:16.000+01:00","parent_ids":["f70ec9d4279f7b4b943eb28f15d6e4244bb82fc5"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-08T16:29:16.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe"},"pipeline":{"id":94667214,"iid":11865,"project_id":6138686,"sha":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-08T15:29:30.788Z","updated_at":"2019-11-09T11:47:15.866Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/94667214"},"web_url":"https://gitlab.com/coq/coq/-/jobs/345803183","artifacts":[{"file_type":"trace","size":206356,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":345803182,"status":"success","stage":"stage-2","name":"library:ci-stdlib2","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-08T15:29:32.226Z","started_at":"2019-11-08T16:00:05.796Z","finished_at":"2019-11-08T16:03:08.879Z","duration":183.083277,"queued_duration":2.303072,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","short_id":"24dcc3e2","created_at":"2019-11-08T16:29:16.000+01:00","parent_ids":["f70ec9d4279f7b4b943eb28f15d6e4244bb82fc5"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-08T16:29:16.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe"},"pipeline":{"id":94667214,"iid":11865,"project_id":6138686,"sha":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-08T15:29:30.788Z","updated_at":"2019-11-09T11:47:15.866Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/94667214"},"web_url":"https://gitlab.com/coq/coq/-/jobs/345803182","artifacts":[{"file_type":"trace","size":43162,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":345803181,"status":"failed","stage":"stage-2","name":"library:ci-sf","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":true,"created_at":"2019-11-08T15:29:32.199Z","started_at":"2019-11-08T15:49:11.234Z","finished_at":"2019-11-08T15:52:11.054Z","duration":179.820242,"queued_duration":3.997796,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","short_id":"24dcc3e2","created_at":"2019-11-08T16:29:16.000+01:00","parent_ids":["f70ec9d4279f7b4b943eb28f15d6e4244bb82fc5"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-08T16:29:16.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe"},"pipeline":{"id":94667214,"iid":11865,"project_id":6138686,"sha":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-08T15:29:30.788Z","updated_at":"2019-11-09T11:47:15.866Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/94667214"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/345803181","artifacts":[{"file_type":"trace","size":96826,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":345803179,"status":"success","stage":"stage-2","name":"library:ci-math-comp","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-08T15:29:32.157Z","started_at":"2019-11-08T16:00:05.606Z","finished_at":"2019-11-08T17:32:32.599Z","duration":5546.992445,"queued_duration":2.181962,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","short_id":"24dcc3e2","created_at":"2019-11-08T16:29:16.000+01:00","parent_ids":["f70ec9d4279f7b4b943eb28f15d6e4244bb82fc5"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-08T16:29:16.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe"},"pipeline":{"id":94667214,"iid":11865,"project_id":6138686,"sha":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-08T15:29:30.788Z","updated_at":"2019-11-09T11:47:15.866Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/94667214"},"web_url":"https://gitlab.com/coq/coq/-/jobs/345803179","artifacts":[{"file_type":"trace","size":508403,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":345803176,"status":"success","stage":"stage-2","name":"library:ci-iris-lambda-rust","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-08T15:29:32.129Z","started_at":"2019-11-08T16:00:05.492Z","finished_at":"2019-11-08T16:49:03.042Z","duration":2937.549951,"queued_duration":2.121269,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","short_id":"24dcc3e2","created_at":"2019-11-08T16:29:16.000+01:00","parent_ids":["f70ec9d4279f7b4b943eb28f15d6e4244bb82fc5"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-08T16:29:16.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe"},"pipeline":{"id":94667214,"iid":11865,"project_id":6138686,"sha":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-08T15:29:30.788Z","updated_at":"2019-11-09T11:47:15.866Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/94667214"},"web_url":"https://gitlab.com/coq/coq/-/jobs/345803176","artifacts":[{"file_type":"trace","size":298657,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":345803175,"status":"success","stage":"stage-2","name":"library:ci-hott","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-08T15:29:32.092Z","started_at":"2019-11-08T15:49:11.172Z","finished_at":"2019-11-08T16:03:05.222Z","duration":834.049823,"queued_duration":3.987949,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","short_id":"24dcc3e2","created_at":"2019-11-08T16:29:16.000+01:00","parent_ids":["f70ec9d4279f7b4b943eb28f15d6e4244bb82fc5"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-08T16:29:16.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe"},"pipeline":{"id":94667214,"iid":11865,"project_id":6138686,"sha":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-08T15:29:30.788Z","updated_at":"2019-11-09T11:47:15.866Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/94667214"},"web_url":"https://gitlab.com/coq/coq/-/jobs/345803175","artifacts":[{"file_type":"trace","size":117109,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":345803171,"status":"success","stage":"stage-2","name":"library:ci-geocoq","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-08T15:29:32.057Z","started_at":"2019-11-08T16:00:05.427Z","finished_at":"2019-11-08T16:45:07.235Z","duration":2701.807715,"queued_duration":2.119193,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","short_id":"24dcc3e2","created_at":"2019-11-08T16:29:16.000+01:00","parent_ids":["f70ec9d4279f7b4b943eb28f15d6e4244bb82fc5"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-08T16:29:16.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe"},"pipeline":{"id":94667214,"iid":11865,"project_id":6138686,"sha":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-08T15:29:30.788Z","updated_at":"2019-11-09T11:47:15.866Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/94667214"},"web_url":"https://gitlab.com/coq/coq/-/jobs/345803171","artifacts":[{"file_type":"trace","size":505348,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":345803166,"status":"success","stage":"stage-2","name":"library:ci-flocq","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-08T15:29:32.024Z","started_at":"2019-11-08T15:49:11.101Z","finished_at":"2019-11-08T15:57:16.887Z","duration":485.786273,"queued_duration":3.968957,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","short_id":"24dcc3e2","created_at":"2019-11-08T16:29:16.000+01:00","parent_ids":["f70ec9d4279f7b4b943eb28f15d6e4244bb82fc5"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-08T16:29:16.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe"},"pipeline":{"id":94667214,"iid":11865,"project_id":6138686,"sha":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-08T15:29:30.788Z","updated_at":"2019-11-09T11:47:15.866Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/94667214"},"web_url":"https://gitlab.com/coq/coq/-/jobs/345803166","artifacts":[{"file_type":"trace","size":34438,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":345803163,"status":"success","stage":"stage-2","name":"library:ci-fiat-crypto-legacy","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-08T15:29:31.994Z","started_at":"2019-11-08T16:00:05.322Z","finished_at":"2019-11-08T17:16:12.833Z","duration":4567.510601,"queued_duration":2.075154,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","short_id":"24dcc3e2","created_at":"2019-11-08T16:29:16.000+01:00","parent_ids":["f70ec9d4279f7b4b943eb28f15d6e4244bb82fc5"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-08T16:29:16.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe"},"pipeline":{"id":94667214,"iid":11865,"project_id":6138686,"sha":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-08T15:29:30.788Z","updated_at":"2019-11-09T11:47:15.866Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/94667214"},"web_url":"https://gitlab.com/coq/coq/-/jobs/345803163","artifacts":[{"file_type":"trace","size":531475,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":345803160,"status":"success","stage":"stage-2","name":"library:ci-fcsl-pcm","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-08T15:29:31.936Z","started_at":"2019-11-08T15:49:11.050Z","finished_at":"2019-11-08T15:53:29.190Z","duration":258.140845,"queued_duration":3.98273,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","short_id":"24dcc3e2","created_at":"2019-11-08T16:29:16.000+01:00","parent_ids":["f70ec9d4279f7b4b943eb28f15d6e4244bb82fc5"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-08T16:29:16.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe"},"pipeline":{"id":94667214,"iid":11865,"project_id":6138686,"sha":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-08T15:29:30.788Z","updated_at":"2019-11-09T11:47:15.866Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/94667214"},"web_url":"https://gitlab.com/coq/coq/-/jobs/345803160","artifacts":[{"file_type":"trace","size":107924,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":345803159,"status":"success","stage":"stage-2","name":"library:ci-cross-crypto","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-08T15:29:31.720Z","started_at":"2019-11-08T15:49:10.984Z","finished_at":"2019-11-08T16:27:20.455Z","duration":2289.471009,"queued_duration":3.969561,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","short_id":"24dcc3e2","created_at":"2019-11-08T16:29:16.000+01:00","parent_ids":["f70ec9d4279f7b4b943eb28f15d6e4244bb82fc5"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-08T16:29:16.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe"},"pipeline":{"id":94667214,"iid":11865,"project_id":6138686,"sha":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-08T15:29:30.788Z","updated_at":"2019-11-09T11:47:15.866Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/94667214"},"web_url":"https://gitlab.com/coq/coq/-/jobs/345803159","artifacts":[{"file_type":"trace","size":34393,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":345803158,"status":"success","stage":"stage-2","name":"library:ci-coquelicot","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-08T15:29:31.688Z","started_at":"2019-11-08T15:49:10.927Z","finished_at":"2019-11-08T15:55:18.544Z","duration":367.616523,"queued_duration":3.972177,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","short_id":"24dcc3e2","created_at":"2019-11-08T16:29:16.000+01:00","parent_ids":["f70ec9d4279f7b4b943eb28f15d6e4244bb82fc5"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-08T16:29:16.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe"},"pipeline":{"id":94667214,"iid":11865,"project_id":6138686,"sha":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-08T15:29:30.788Z","updated_at":"2019-11-09T11:47:15.866Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/94667214"},"web_url":"https://gitlab.com/coq/coq/-/jobs/345803158","artifacts":[{"file_type":"trace","size":167221,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":345803157,"status":"success","stage":"stage-2","name":"library:ci-compcert","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-08T15:29:31.650Z","started_at":"2019-11-08T16:00:05.057Z","finished_at":"2019-11-08T16:18:40.175Z","duration":1115.118245,"queued_duration":1.942615,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","short_id":"24dcc3e2","created_at":"2019-11-08T16:29:16.000+01:00","parent_ids":["f70ec9d4279f7b4b943eb28f15d6e4244bb82fc5"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-08T16:29:16.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe"},"pipeline":{"id":94667214,"iid":11865,"project_id":6138686,"sha":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-08T15:29:30.788Z","updated_at":"2019-11-09T11:47:15.866Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/94667214"},"web_url":"https://gitlab.com/coq/coq/-/jobs/345803157","artifacts":[{"file_type":"trace","size":4194360,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":345803156,"status":"success","stage":"stage-2","name":"library:ci-bedrock2","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-08T15:29:31.614Z","started_at":"2019-11-08T15:49:10.874Z","finished_at":"2019-11-08T17:32:47.480Z","duration":6216.606464,"queued_duration":3.963854,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","short_id":"24dcc3e2","created_at":"2019-11-08T16:29:16.000+01:00","parent_ids":["f70ec9d4279f7b4b943eb28f15d6e4244bb82fc5"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-08T16:29:16.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe"},"pipeline":{"id":94667214,"iid":11865,"project_id":6138686,"sha":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-08T15:29:30.788Z","updated_at":"2019-11-09T11:47:15.866Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/94667214"},"web_url":"https://gitlab.com/coq/coq/-/jobs/345803156","artifacts":[{"file_type":"trace","size":184877,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":345803155,"status":"success","stage":"stage-2","name":"library:ci-argosy","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-08T15:29:31.583Z","started_at":"2019-11-08T15:49:10.800Z","finished_at":"2019-11-08T15:52:53.377Z","duration":222.57749,"queued_duration":3.944026,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","short_id":"24dcc3e2","created_at":"2019-11-08T16:29:16.000+01:00","parent_ids":["f70ec9d4279f7b4b943eb28f15d6e4244bb82fc5"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-08T16:29:16.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe"},"pipeline":{"id":94667214,"iid":11865,"project_id":6138686,"sha":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-08T15:29:30.788Z","updated_at":"2019-11-09T11:47:15.866Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/94667214"},"web_url":"https://gitlab.com/coq/coq/-/jobs/345803155","artifacts":[{"file_type":"trace","size":28899,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":345803154,"status":"success","stage":"stage-2","name":"validate:quick","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-08T15:29:31.556Z","started_at":"2019-11-08T15:49:10.536Z","finished_at":"2019-11-08T15:56:32.769Z","duration":442.233754,"queued_duration":1.160911,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","short_id":"24dcc3e2","created_at":"2019-11-08T16:29:16.000+01:00","parent_ids":["f70ec9d4279f7b4b943eb28f15d6e4244bb82fc5"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-08T16:29:16.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe"},"pipeline":{"id":94667214,"iid":11865,"project_id":6138686,"sha":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-08T15:29:30.788Z","updated_at":"2019-11-09T11:47:15.866Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/94667214"},"web_url":"https://gitlab.com/coq/coq/-/jobs/345803154","artifacts":[{"file_type":"trace","size":278018,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":"2020-01-07T15:56:29.687Z","tag_list":[]}
{"id":345803153,"status":"success","stage":"stage-2","name":"validate:edge+flambda","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-08T15:29:31.529Z","started_at":"2019-11-08T16:00:04.881Z","finished_at":"2019-11-08T16:05:42.307Z","duration":337.426603,"queued_duration":1.831418,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","short_id":"24dcc3e2","created_at":"2019-11-08T16:29:16.000+01:00","parent_ids":["f70ec9d4279f7b4b943eb28f15d6e4244bb82fc5"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-08T16:29:16.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe"},"pipeline":{"id":94667214,"iid":11865,"project_id":6138686,"sha":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-08T15:29:30.788Z","updated_at":"2019-11-09T11:47:15.866Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/94667214"},"web_url":"https://gitlab.com/coq/coq/-/jobs/345803153","artifacts":[{"file_type":"trace","size":64849,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2020-01-07T16:05:40.791Z","tag_list":[]}
{"id":345803152,"status":"success","stage":"stage-2","name":"validate:base+32bit","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-08T15:29:31.510Z","started_at":"2019-11-08T15:45:33.859Z","finished_at":"2019-11-08T15:51:29.821Z","duration":355.962098,"queued_duration":0.314183,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","short_id":"24dcc3e2","created_at":"2019-11-08T16:29:16.000+01:00","parent_ids":["f70ec9d4279f7b4b943eb28f15d6e4244bb82fc5"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-08T16:29:16.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe"},"pipeline":{"id":94667214,"iid":11865,"project_id":6138686,"sha":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-08T15:29:30.788Z","updated_at":"2019-11-09T11:47:15.866Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/94667214"},"web_url":"https://gitlab.com/coq/coq/-/jobs/345803152","artifacts":[{"file_type":"trace","size":63279,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2020-01-07T15:51:27.862Z","tag_list":[]}
{"id":345803150,"status":"success","stage":"stage-2","name":"validate:base","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-08T15:29:31.487Z","started_at":"2019-11-08T15:49:10.166Z","finished_at":"2019-11-08T15:56:21.632Z","duration":431.466128,"queued_duration":3.35667,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","short_id":"24dcc3e2","created_at":"2019-11-08T16:29:16.000+01:00","parent_ids":["f70ec9d4279f7b4b943eb28f15d6e4244bb82fc5"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-08T16:29:16.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe"},"pipeline":{"id":94667214,"iid":11865,"project_id":6138686,"sha":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-08T15:29:30.788Z","updated_at":"2019-11-09T11:47:15.866Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/94667214"},"web_url":"https://gitlab.com/coq/coq/-/jobs/345803150","artifacts":[{"file_type":"trace","size":109295,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":"2020-01-07T15:56:18.777Z","tag_list":[]}
{"id":345803148,"status":"failed","stage":"stage-2","name":"test-suite:base+async","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":true,"created_at":"2019-11-08T15:29:31.463Z","started_at":"2019-11-08T15:49:09.969Z","finished_at":"2019-11-08T16:25:34.399Z","duration":2184.430399,"queued_duration":3.206919,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","short_id":"24dcc3e2","created_at":"2019-11-08T16:29:16.000+01:00","parent_ids":["f70ec9d4279f7b4b943eb28f15d6e4244bb82fc5"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-08T16:29:16.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe"},"pipeline":{"id":94667214,"iid":11865,"project_id":6138686,"sha":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-08T15:29:30.788Z","updated_at":"2019-11-09T11:47:15.866Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/94667214"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/345803148","artifacts":[{"file_type":"trace","size":92546,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":345803146,"status":"success","stage":"stage-2","name":"test-suite:egde:dune:dev","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-08T15:29:31.440Z","started_at":"2019-11-08T15:48:18.258Z","finished_at":"2019-11-08T16:12:14.271Z","duration":1436.012351,"queued_duration":2.63918,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","short_id":"24dcc3e2","created_at":"2019-11-08T16:29:16.000+01:00","parent_ids":["f70ec9d4279f7b4b943eb28f15d6e4244bb82fc5"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-08T16:29:16.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe"},"pipeline":{"id":94667214,"iid":11865,"project_id":6138686,"sha":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-08T15:29:30.788Z","updated_at":"2019-11-09T11:47:15.866Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/94667214"},"web_url":"https://gitlab.com/coq/coq/-/jobs/345803146","artifacts":[{"file_type":"trace","size":122798,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":345803142,"status":"success","stage":"stage-2","name":"test-suite:edge+flambda","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-08T15:29:31.406Z","started_at":"2019-11-08T16:00:03.332Z","finished_at":"2019-11-08T16:15:30.386Z","duration":927.054025,"queued_duration":0.351861,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","short_id":"24dcc3e2","created_at":"2019-11-08T16:29:16.000+01:00","parent_ids":["f70ec9d4279f7b4b943eb28f15d6e4244bb82fc5"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-08T16:29:16.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe"},"pipeline":{"id":94667214,"iid":11865,"project_id":6138686,"sha":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-08T15:29:30.788Z","updated_at":"2019-11-09T11:47:15.866Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/94667214"},"web_url":"https://gitlab.com/coq/coq/-/jobs/345803142","artifacts":[{"file_type":"trace","size":491769,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":345803138,"status":"success","stage":"stage-2","name":"test-suite:base+32bit","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-08T15:29:31.383Z","started_at":"2019-11-08T15:45:33.812Z","finished_at":"2019-11-08T16:06:23.114Z","duration":1249.301677,"queued_duration":0.319423,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","short_id":"24dcc3e2","created_at":"2019-11-08T16:29:16.000+01:00","parent_ids":["f70ec9d4279f7b4b943eb28f15d6e4244bb82fc5"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-08T16:29:16.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe"},"pipeline":{"id":94667214,"iid":11865,"project_id":6138686,"sha":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-08T15:29:30.788Z","updated_at":"2019-11-09T11:47:15.866Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/94667214"},"web_url":"https://gitlab.com/coq/coq/-/jobs/345803138","artifacts":[{"file_type":"trace","size":90451,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":345803137,"status":"success","stage":"stage-2","name":"test-suite:base","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-08T15:29:31.366Z","started_at":"2019-11-08T15:49:09.914Z","finished_at":"2019-11-08T16:12:50.021Z","duration":1420.107682,"queued_duration":3.205466,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","short_id":"24dcc3e2","created_at":"2019-11-08T16:29:16.000+01:00","parent_ids":["f70ec9d4279f7b4b943eb28f15d6e4244bb82fc5"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-08T16:29:16.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe"},"pipeline":{"id":94667214,"iid":11865,"project_id":6138686,"sha":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-08T15:29:30.788Z","updated_at":"2019-11-09T11:47:15.866Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/94667214"},"web_url":"https://gitlab.com/coq/coq/-/jobs/345803137","artifacts":[{"file_type":"trace","size":91926,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":345803134,"status":"success","stage":"stage-2","name":"doc:ml-api:odoc","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-08T15:29:31.339Z","started_at":"2019-11-08T15:48:18.076Z","finished_at":"2019-11-08T15:53:01.842Z","duration":283.766562,"queued_duration":2.508131,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","short_id":"24dcc3e2","created_at":"2019-11-08T16:29:16.000+01:00","parent_ids":["f70ec9d4279f7b4b943eb28f15d6e4244bb82fc5"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-08T16:29:16.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe"},"pipeline":{"id":94667214,"iid":11865,"project_id":6138686,"sha":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-08T15:29:30.788Z","updated_at":"2019-11-09T11:47:15.866Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/94667214"},"web_url":"https://gitlab.com/coq/coq/-/jobs/345803134","artifacts":[{"file_type":"trace","size":99506,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":"2020-01-07T15:52:59.486Z","tag_list":[]}
{"id":345803133,"status":"success","stage":"stage-2","name":"doc:stdlib:dune","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-08T15:29:31.317Z","started_at":"2019-11-08T15:48:17.648Z","finished_at":"2019-11-08T15:58:01.524Z","duration":583.876459,"queued_duration":2.124561,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","short_id":"24dcc3e2","created_at":"2019-11-08T16:29:16.000+01:00","parent_ids":["f70ec9d4279f7b4b943eb28f15d6e4244bb82fc5"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-08T16:29:16.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe"},"pipeline":{"id":94667214,"iid":11865,"project_id":6138686,"sha":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-08T15:29:30.788Z","updated_at":"2019-11-09T11:47:15.866Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/94667214"},"web_url":"https://gitlab.com/coq/coq/-/jobs/345803133","artifacts":[{"file_type":"trace","size":50965,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":"2020-01-07T15:57:58.501Z","tag_list":[]}
{"id":345803131,"status":"success","stage":"stage-2","name":"doc:refman:dune","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-08T15:29:31.283Z","started_at":"2019-11-08T15:48:17.308Z","finished_at":"2019-11-08T15:59:48.572Z","duration":691.264319,"queued_duration":1.83537,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","short_id":"24dcc3e2","created_at":"2019-11-08T16:29:16.000+01:00","parent_ids":["f70ec9d4279f7b4b943eb28f15d6e4244bb82fc5"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-08T16:29:16.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe"},"pipeline":{"id":94667214,"iid":11865,"project_id":6138686,"sha":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-08T15:29:30.788Z","updated_at":"2019-11-09T11:47:15.866Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/94667214"},"web_url":"https://gitlab.com/coq/coq/-/jobs/345803131","artifacts":[{"file_type":"trace","size":49426,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":"2020-01-07T15:59:46.720Z","tag_list":[]}
{"id":345803129,"status":"success","stage":"stage-1","name":"plugin:plugin-tutorial","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-08T15:29:31.205Z","started_at":"2019-11-08T15:29:34.891Z","finished_at":"2019-11-08T15:33:25.048Z","duration":230.156748,"queued_duration":1.710499,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","short_id":"24dcc3e2","created_at":"2019-11-08T16:29:16.000+01:00","parent_ids":["f70ec9d4279f7b4b943eb28f15d6e4244bb82fc5"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-08T16:29:16.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe"},"pipeline":{"id":94667214,"iid":11865,"project_id":6138686,"sha":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-08T15:29:30.788Z","updated_at":"2019-11-09T11:47:15.866Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/94667214"},"web_url":"https://gitlab.com/coq/coq/-/jobs/345803129","artifacts":[{"file_type":"trace","size":57612,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":345803128,"status":"success","stage":"stage-1","name":"pkg:nix","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-08T15:29:31.174Z","started_at":"2019-11-08T15:29:34.830Z","finished_at":"2019-11-08T16:12:52.179Z","duration":2597.348352,"queued_duration":1.680235,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","short_id":"24dcc3e2","created_at":"2019-11-08T16:29:16.000+01:00","parent_ids":["f70ec9d4279f7b4b943eb28f15d6e4244bb82fc5"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-08T16:29:16.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe"},"pipeline":{"id":94667214,"iid":11865,"project_id":6138686,"sha":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-08T15:29:30.788Z","updated_at":"2019-11-09T11:47:15.866Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/94667214"},"web_url":"https://gitlab.com/coq/coq/-/jobs/345803128","artifacts":[{"file_type":"trace","size":575238,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":345803127,"status":"success","stage":"stage-1","name":"pkg:opam","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-08T15:29:31.114Z","started_at":"2019-11-08T15:29:34.647Z","finished_at":"2019-11-08T15:53:13.525Z","duration":1418.878101,"queued_duration":1.519873,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","short_id":"24dcc3e2","created_at":"2019-11-08T16:29:16.000+01:00","parent_ids":["f70ec9d4279f7b4b943eb28f15d6e4244bb82fc5"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-08T16:29:16.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe"},"pipeline":{"id":94667214,"iid":11865,"project_id":6138686,"sha":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-08T15:29:30.788Z","updated_at":"2019-11-09T11:47:15.866Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/94667214"},"web_url":"https://gitlab.com/coq/coq/-/jobs/345803127","artifacts":[{"file_type":"trace","size":18544,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":345803126,"status":"success","stage":"stage-1","name":"lint","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-08T15:29:31.085Z","started_at":"2019-11-08T15:29:34.598Z","finished_at":"2019-11-08T15:34:18.523Z","duration":283.925026,"queued_duration":1.502797,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","short_id":"24dcc3e2","created_at":"2019-11-08T16:29:16.000+01:00","parent_ids":["f70ec9d4279f7b4b943eb28f15d6e4244bb82fc5"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-08T16:29:16.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe"},"pipeline":{"id":94667214,"iid":11865,"project_id":6138686,"sha":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-08T15:29:30.788Z","updated_at":"2019-11-09T11:47:15.866Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/94667214"},"web_url":"https://gitlab.com/coq/coq/-/jobs/345803126","artifacts":[{"file_type":"trace","size":34345,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":345803125,"status":"success","stage":"stage-1","name":"windows64","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-08T15:29:31.035Z","started_at":"2019-11-09T09:59:59.272Z","finished_at":"2019-11-09T11:07:42.376Z","duration":4063.103601,"queued_duration":66626.213702,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","short_id":"24dcc3e2","created_at":"2019-11-08T16:29:16.000+01:00","parent_ids":["f70ec9d4279f7b4b943eb28f15d6e4244bb82fc5"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-08T16:29:16.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe"},"pipeline":{"id":94667214,"iid":11865,"project_id":6138686,"sha":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-08T15:29:30.788Z","updated_at":"2019-11-09T11:47:15.866Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/94667214"},"web_url":"https://gitlab.com/coq/coq/-/jobs/345803125","artifacts":[{"file_type":"trace","size":275794,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":"2019-11-16T11:07:40.468Z","tag_list":["windows"]}
{"id":345803124,"status":"success","stage":"stage-1","name":"build:quick","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":true,"created_at":"2019-11-08T15:29:30.996Z","started_at":"2019-11-08T15:29:34.543Z","finished_at":"2019-11-08T15:49:09.277Z","duration":1174.73396,"queued_duration":1.513671,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","short_id":"24dcc3e2","created_at":"2019-11-08T16:29:16.000+01:00","parent_ids":["f70ec9d4279f7b4b943eb28f15d6e4244bb82fc5"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-08T16:29:16.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe"},"pipeline":{"id":94667214,"iid":11865,"project_id":6138686,"sha":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-08T15:29:30.788Z","updated_at":"2019-11-09T11:47:15.866Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/94667214"},"web_url":"https://gitlab.com/coq/coq/-/jobs/345803124","artifacts":[{"file_type":"trace","size":238463,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2019-11-15T15:49:07.763Z","tag_list":[]}
{"id":345803122,"status":"success","stage":"stage-1","name":"build:base+async","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":true,"created_at":"2019-11-08T15:29:30.939Z","started_at":"2019-11-08T15:29:34.347Z","finished_at":"2019-11-08T16:39:44.832Z","duration":4210.485268,"queued_duration":1.345949,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","short_id":"24dcc3e2","created_at":"2019-11-08T16:29:16.000+01:00","parent_ids":["f70ec9d4279f7b4b943eb28f15d6e4244bb82fc5"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-08T16:29:16.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe"},"pipeline":{"id":94667214,"iid":11865,"project_id":6138686,"sha":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-08T15:29:30.788Z","updated_at":"2019-11-09T11:47:15.866Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/94667214"},"web_url":"https://gitlab.com/coq/coq/-/jobs/345803122","artifacts":[{"file_type":"trace","size":277727,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2019-11-15T16:39:42.343Z","tag_list":[]}
{"id":345803120,"status":"success","stage":"stage-1","name":"build:edge+flambda:dune:dev","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-08T15:29:30.908Z","started_at":"2019-11-08T15:29:34.293Z","finished_at":"2019-11-08T15:48:15.376Z","duration":1121.083852,"queued_duration":1.336905,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","short_id":"24dcc3e2","created_at":"2019-11-08T16:29:16.000+01:00","parent_ids":["f70ec9d4279f7b4b943eb28f15d6e4244bb82fc5"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-08T16:29:16.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe"},"pipeline":{"id":94667214,"iid":11865,"project_id":6138686,"sha":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-08T15:29:30.788Z","updated_at":"2019-11-09T11:47:15.866Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/94667214"},"web_url":"https://gitlab.com/coq/coq/-/jobs/345803120","artifacts":[{"file_type":"trace","size":20441,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2019-11-15T15:48:13.751Z","tag_list":[]}
{"id":345803119,"status":"success","stage":"stage-1","name":"build:edge+flambda","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-08T15:29:30.866Z","started_at":"2019-11-08T15:29:34.236Z","finished_at":"2019-11-08T16:00:02.830Z","duration":1828.594397,"queued_duration":1.319003,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","short_id":"24dcc3e2","created_at":"2019-11-08T16:29:16.000+01:00","parent_ids":["f70ec9d4279f7b4b943eb28f15d6e4244bb82fc5"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-08T16:29:16.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe"},"pipeline":{"id":94667214,"iid":11865,"project_id":6138686,"sha":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-08T15:29:30.788Z","updated_at":"2019-11-09T11:47:15.866Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/94667214"},"web_url":"https://gitlab.com/coq/coq/-/jobs/345803119","artifacts":[{"file_type":"trace","size":279558,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2019-11-15T16:00:00.049Z","tag_list":[]}
{"id":345803117,"status":"success","stage":"stage-1","name":"build:base+32bit","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-08T15:29:30.844Z","started_at":"2019-11-08T15:29:34.097Z","finished_at":"2019-11-08T15:45:33.406Z","duration":959.309036,"queued_duration":1.205993,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","short_id":"24dcc3e2","created_at":"2019-11-08T16:29:16.000+01:00","parent_ids":["f70ec9d4279f7b4b943eb28f15d6e4244bb82fc5"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-08T16:29:16.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe"},"pipeline":{"id":94667214,"iid":11865,"project_id":6138686,"sha":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-08T15:29:30.788Z","updated_at":"2019-11-09T11:47:15.866Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/94667214"},"web_url":"https://gitlab.com/coq/coq/-/jobs/345803117","artifacts":[{"file_type":"trace","size":271706,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2019-11-15T15:45:31.867Z","tag_list":[]}
{"id":345803116,"status":"success","stage":"stage-1","name":"build:base","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-08T15:29:30.822Z","started_at":"2019-11-08T15:29:33.966Z","finished_at":"2019-11-08T15:49:06.520Z","duration":1172.553955,"queued_duration":1.101916,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","short_id":"24dcc3e2","created_at":"2019-11-08T16:29:16.000+01:00","parent_ids":["f70ec9d4279f7b4b943eb28f15d6e4244bb82fc5"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-08T16:29:16.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe"},"pipeline":{"id":94667214,"iid":11865,"project_id":6138686,"sha":"24dcc3e2aaa94ac42480c73a6e7e74f8a4aee3fe","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-08T15:29:30.788Z","updated_at":"2019-11-09T11:47:15.866Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/94667214"},"web_url":"https://gitlab.com/coq/coq/-/jobs/345803116","artifacts":[{"file_type":"trace","size":321587,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2019-11-15T15:49:05.220Z","tag_list":[]}
