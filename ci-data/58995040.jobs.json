{"id":204446319,"status":"success","stage":"test","name":"plugin:ci-relation_algebra","ref":"pr-9995","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-04-29T16:27:58.064Z","started_at":"2019-04-29T16:46:20.541Z","finished_at":"2019-04-29T16:52:24.675Z","duration":364.134106,"queued_duration":3.68221,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","short_id":"ab73036c","created_at":"2019-04-29T18:12:15.000+02:00","parent_ids":["61a1b4c46e4584e9337f9298b5f0053858a03c93"],"title":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface","message":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface\n\n** Changed definition of `simpl_rel` to `T -> `simpl_pred T`, so that\n`inE` will now expand `a \\in r b`, when `r := [rel x y | R]` to `R{b/x,\na/y}`, as the expanding coercion is now only inserted in the _last_\napplication.\nThe old definition made it possible to have a `simpl_rel >-> rel`\ncoercion that does not block expansion, but this can now be achieved\nmore economically with the `Arguments … /.` annotation.\n**  Deleted the `[rel of P]` notation which is no longer needed with\nthe new `simpl_rel` definition, and was broken anyway.\n** Added `relpre f R` definition of functional preimage of a notation.\n** `comp` and `idfun` are now proper definitions, using the `Arguments\n… /.` annotation to specify simplification on application.\n** Added `{pred T}` syntax for the alias of `pred T` in the `pred_sort`\ncoercion class; deleted the `pred_class` alias: one should either\nuse `pred_sort` in `Coercion` declarations, or `{pred T}` in type casts.\nUsed `{pred T}` as appropriate in localised predicate (`{in …, …}`) theory.\nExtended and corrected `pred` coercion internal documentation.\n** Simplified the `predType` structure by removing the redundant\nexplicit `mem_pred` subfield, and replacing it with an interlocked\nprojection; deleted `mkPredType`, now replaced by `PredType`.\n** Added (and extensively documented) a `nonPropType` interface\nmatching types that do _not_ have sort `Prop`, and used it to remove\nthe non-standard maximal implicits annotation on `Some_inj` introduced\nin #6911 by @anton-trumov; included `test-suite` entry for `nonPropType`.\n** Documented the design of the four structures used to control the\nmatching of `inE` and related predicate rewriting lemmas; added `test-suite`\nentry covering the `pred` rewriting control idioms.\n** Used `only printing` annotations to get rid of token concatenation\nhacks.\n** Fixed boolean and general `if b return t then …` notation so that\n`b` is bound in `t`. This is a minor source of incompatibility for\nmisuses of this syntax when `b` is _not_ bound in `t`, and `(if b then\n…) : t` should have been used instead.\n** Reserved all `ssreflect`, `ssrfun` and `ssrbool` notation at the top\nof the file, adding some printing boxes, and removing some spurious\n`[pred .. => ..]` reserved notation.\n** Fixed parsing precedence and format of `<hidden n>` notation, and\ndeclared and put it in an explicit `ssr_scope`.\n** Used module-and-functor idiom to ensure that the `simpl_pred T >-\npred T` _and_ `simpl_pred T >-> {pred T}` coercions are realised by the\n_same_ Gallina constant.\n** Updated `CREDITS`.\nThe policy implied by this PR: that `{pred T}` should systematically\nbe used as the generic collective predicate type, was implemented in MathComp\nmath-comp/math-comp#237. As a result  `simpl_pred >-> pred_sort` coercions\nbecame more frequent, as it turned out they were not, as incorrectly stated\nin `ssrbool` internal comments, impossible: while the `simplPredType`\ncanonical instance does solve all `simpl_pred T =~= pred_sort ?pT`\ninstances, it does _not_ solve `simpl_pred T =~= {pred T}`, and so the\ncoercion will be used in that case. However it appeared that having two\ndifferent coercion constants confused the SSReflect keyed matching\nheuristic, hence the fix introduced here. This has entailed some\nrearrangement of `ssrbool`: the large  `Predicates` section had to be\nbroken up as the module-functor idiom for aliasing coercions cannot be\nused inside a section.\n","author_name":"Georges Gonthier","author_email":"georges.gonthier@inria.fr","authored_date":"2019-04-24T23:02:08.000+02:00","committer_name":"Georges Gonthier","committer_email":"georges.gonthier@inria.fr","committed_date":"2019-04-29T18:12:15.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ab73036c4d5c46759335647b380dde1b1ea0f1ff"},"pipeline":{"id":58995040,"iid":8663,"project_id":6138686,"sha":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","ref":"pr-9995","status":"failed","source":"push","created_at":"2019-04-29T16:27:55.342Z","updated_at":"2019-04-29T18:04:16.591Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/58995040"},"web_url":"https://gitlab.com/coq/coq/-/jobs/204446319","artifacts":[{"file_type":"trace","size":59683,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":204446317,"status":"failed","stage":"test","name":"plugin:ci-quickchick","ref":"pr-9995","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-04-29T16:27:57.992Z","started_at":"2019-04-29T16:46:17.756Z","finished_at":"2019-04-29T16:50:21.092Z","duration":243.336165,"queued_duration":0.682173,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","short_id":"ab73036c","created_at":"2019-04-29T18:12:15.000+02:00","parent_ids":["61a1b4c46e4584e9337f9298b5f0053858a03c93"],"title":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface","message":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface\n\n** Changed definition of `simpl_rel` to `T -> `simpl_pred T`, so that\n`inE` will now expand `a \\in r b`, when `r := [rel x y | R]` to `R{b/x,\na/y}`, as the expanding coercion is now only inserted in the _last_\napplication.\nThe old definition made it possible to have a `simpl_rel >-> rel`\ncoercion that does not block expansion, but this can now be achieved\nmore economically with the `Arguments … /.` annotation.\n**  Deleted the `[rel of P]` notation which is no longer needed with\nthe new `simpl_rel` definition, and was broken anyway.\n** Added `relpre f R` definition of functional preimage of a notation.\n** `comp` and `idfun` are now proper definitions, using the `Arguments\n… /.` annotation to specify simplification on application.\n** Added `{pred T}` syntax for the alias of `pred T` in the `pred_sort`\ncoercion class; deleted the `pred_class` alias: one should either\nuse `pred_sort` in `Coercion` declarations, or `{pred T}` in type casts.\nUsed `{pred T}` as appropriate in localised predicate (`{in …, …}`) theory.\nExtended and corrected `pred` coercion internal documentation.\n** Simplified the `predType` structure by removing the redundant\nexplicit `mem_pred` subfield, and replacing it with an interlocked\nprojection; deleted `mkPredType`, now replaced by `PredType`.\n** Added (and extensively documented) a `nonPropType` interface\nmatching types that do _not_ have sort `Prop`, and used it to remove\nthe non-standard maximal implicits annotation on `Some_inj` introduced\nin #6911 by @anton-trumov; included `test-suite` entry for `nonPropType`.\n** Documented the design of the four structures used to control the\nmatching of `inE` and related predicate rewriting lemmas; added `test-suite`\nentry covering the `pred` rewriting control idioms.\n** Used `only printing` annotations to get rid of token concatenation\nhacks.\n** Fixed boolean and general `if b return t then …` notation so that\n`b` is bound in `t`. This is a minor source of incompatibility for\nmisuses of this syntax when `b` is _not_ bound in `t`, and `(if b then\n…) : t` should have been used instead.\n** Reserved all `ssreflect`, `ssrfun` and `ssrbool` notation at the top\nof the file, adding some printing boxes, and removing some spurious\n`[pred .. => ..]` reserved notation.\n** Fixed parsing precedence and format of `<hidden n>` notation, and\ndeclared and put it in an explicit `ssr_scope`.\n** Used module-and-functor idiom to ensure that the `simpl_pred T >-\npred T` _and_ `simpl_pred T >-> {pred T}` coercions are realised by the\n_same_ Gallina constant.\n** Updated `CREDITS`.\nThe policy implied by this PR: that `{pred T}` should systematically\nbe used as the generic collective predicate type, was implemented in MathComp\nmath-comp/math-comp#237. As a result  `simpl_pred >-> pred_sort` coercions\nbecame more frequent, as it turned out they were not, as incorrectly stated\nin `ssrbool` internal comments, impossible: while the `simplPredType`\ncanonical instance does solve all `simpl_pred T =~= pred_sort ?pT`\ninstances, it does _not_ solve `simpl_pred T =~= {pred T}`, and so the\ncoercion will be used in that case. However it appeared that having two\ndifferent coercion constants confused the SSReflect keyed matching\nheuristic, hence the fix introduced here. This has entailed some\nrearrangement of `ssrbool`: the large  `Predicates` section had to be\nbroken up as the module-functor idiom for aliasing coercions cannot be\nused inside a section.\n","author_name":"Georges Gonthier","author_email":"georges.gonthier@inria.fr","authored_date":"2019-04-24T23:02:08.000+02:00","committer_name":"Georges Gonthier","committer_email":"georges.gonthier@inria.fr","committed_date":"2019-04-29T18:12:15.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ab73036c4d5c46759335647b380dde1b1ea0f1ff"},"pipeline":{"id":58995040,"iid":8663,"project_id":6138686,"sha":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","ref":"pr-9995","status":"failed","source":"push","created_at":"2019-04-29T16:27:55.342Z","updated_at":"2019-04-29T18:04:16.591Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/58995040"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/204446317","artifacts":[{"file_type":"trace","size":190100,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":204446316,"status":"success","stage":"test","name":"plugin:plugin-tutorial","ref":"pr-9995","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-04-29T16:27:57.961Z","started_at":"2019-04-29T16:46:17.710Z","finished_at":"2019-04-29T16:50:07.370Z","duration":229.659756,"queued_duration":0.523603,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","short_id":"ab73036c","created_at":"2019-04-29T18:12:15.000+02:00","parent_ids":["61a1b4c46e4584e9337f9298b5f0053858a03c93"],"title":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface","message":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface\n\n** Changed definition of `simpl_rel` to `T -> `simpl_pred T`, so that\n`inE` will now expand `a \\in r b`, when `r := [rel x y | R]` to `R{b/x,\na/y}`, as the expanding coercion is now only inserted in the _last_\napplication.\nThe old definition made it possible to have a `simpl_rel >-> rel`\ncoercion that does not block expansion, but this can now be achieved\nmore economically with the `Arguments … /.` annotation.\n**  Deleted the `[rel of P]` notation which is no longer needed with\nthe new `simpl_rel` definition, and was broken anyway.\n** Added `relpre f R` definition of functional preimage of a notation.\n** `comp` and `idfun` are now proper definitions, using the `Arguments\n… /.` annotation to specify simplification on application.\n** Added `{pred T}` syntax for the alias of `pred T` in the `pred_sort`\ncoercion class; deleted the `pred_class` alias: one should either\nuse `pred_sort` in `Coercion` declarations, or `{pred T}` in type casts.\nUsed `{pred T}` as appropriate in localised predicate (`{in …, …}`) theory.\nExtended and corrected `pred` coercion internal documentation.\n** Simplified the `predType` structure by removing the redundant\nexplicit `mem_pred` subfield, and replacing it with an interlocked\nprojection; deleted `mkPredType`, now replaced by `PredType`.\n** Added (and extensively documented) a `nonPropType` interface\nmatching types that do _not_ have sort `Prop`, and used it to remove\nthe non-standard maximal implicits annotation on `Some_inj` introduced\nin #6911 by @anton-trumov; included `test-suite` entry for `nonPropType`.\n** Documented the design of the four structures used to control the\nmatching of `inE` and related predicate rewriting lemmas; added `test-suite`\nentry covering the `pred` rewriting control idioms.\n** Used `only printing` annotations to get rid of token concatenation\nhacks.\n** Fixed boolean and general `if b return t then …` notation so that\n`b` is bound in `t`. This is a minor source of incompatibility for\nmisuses of this syntax when `b` is _not_ bound in `t`, and `(if b then\n…) : t` should have been used instead.\n** Reserved all `ssreflect`, `ssrfun` and `ssrbool` notation at the top\nof the file, adding some printing boxes, and removing some spurious\n`[pred .. => ..]` reserved notation.\n** Fixed parsing precedence and format of `<hidden n>` notation, and\ndeclared and put it in an explicit `ssr_scope`.\n** Used module-and-functor idiom to ensure that the `simpl_pred T >-\npred T` _and_ `simpl_pred T >-> {pred T}` coercions are realised by the\n_same_ Gallina constant.\n** Updated `CREDITS`.\nThe policy implied by this PR: that `{pred T}` should systematically\nbe used as the generic collective predicate type, was implemented in MathComp\nmath-comp/math-comp#237. As a result  `simpl_pred >-> pred_sort` coercions\nbecame more frequent, as it turned out they were not, as incorrectly stated\nin `ssrbool` internal comments, impossible: while the `simplPredType`\ncanonical instance does solve all `simpl_pred T =~= pred_sort ?pT`\ninstances, it does _not_ solve `simpl_pred T =~= {pred T}`, and so the\ncoercion will be used in that case. However it appeared that having two\ndifferent coercion constants confused the SSReflect keyed matching\nheuristic, hence the fix introduced here. This has entailed some\nrearrangement of `ssrbool`: the large  `Predicates` section had to be\nbroken up as the module-functor idiom for aliasing coercions cannot be\nused inside a section.\n","author_name":"Georges Gonthier","author_email":"georges.gonthier@inria.fr","authored_date":"2019-04-24T23:02:08.000+02:00","committer_name":"Georges Gonthier","committer_email":"georges.gonthier@inria.fr","committed_date":"2019-04-29T18:12:15.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ab73036c4d5c46759335647b380dde1b1ea0f1ff"},"pipeline":{"id":58995040,"iid":8663,"project_id":6138686,"sha":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","ref":"pr-9995","status":"failed","source":"push","created_at":"2019-04-29T16:27:55.342Z","updated_at":"2019-04-29T18:04:16.591Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/58995040"},"web_url":"https://gitlab.com/coq/coq/-/jobs/204446316","artifacts":[{"file_type":"trace","size":58452,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":204446313,"status":"success","stage":"test","name":"plugin:ci-paramcoq","ref":"pr-9995","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-04-29T16:27:57.923Z","started_at":"2019-04-29T16:46:19.779Z","finished_at":"2019-04-29T16:49:24.353Z","duration":184.573872,"queued_duration":2.491451,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","short_id":"ab73036c","created_at":"2019-04-29T18:12:15.000+02:00","parent_ids":["61a1b4c46e4584e9337f9298b5f0053858a03c93"],"title":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface","message":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface\n\n** Changed definition of `simpl_rel` to `T -> `simpl_pred T`, so that\n`inE` will now expand `a \\in r b`, when `r := [rel x y | R]` to `R{b/x,\na/y}`, as the expanding coercion is now only inserted in the _last_\napplication.\nThe old definition made it possible to have a `simpl_rel >-> rel`\ncoercion that does not block expansion, but this can now be achieved\nmore economically with the `Arguments … /.` annotation.\n**  Deleted the `[rel of P]` notation which is no longer needed with\nthe new `simpl_rel` definition, and was broken anyway.\n** Added `relpre f R` definition of functional preimage of a notation.\n** `comp` and `idfun` are now proper definitions, using the `Arguments\n… /.` annotation to specify simplification on application.\n** Added `{pred T}` syntax for the alias of `pred T` in the `pred_sort`\ncoercion class; deleted the `pred_class` alias: one should either\nuse `pred_sort` in `Coercion` declarations, or `{pred T}` in type casts.\nUsed `{pred T}` as appropriate in localised predicate (`{in …, …}`) theory.\nExtended and corrected `pred` coercion internal documentation.\n** Simplified the `predType` structure by removing the redundant\nexplicit `mem_pred` subfield, and replacing it with an interlocked\nprojection; deleted `mkPredType`, now replaced by `PredType`.\n** Added (and extensively documented) a `nonPropType` interface\nmatching types that do _not_ have sort `Prop`, and used it to remove\nthe non-standard maximal implicits annotation on `Some_inj` introduced\nin #6911 by @anton-trumov; included `test-suite` entry for `nonPropType`.\n** Documented the design of the four structures used to control the\nmatching of `inE` and related predicate rewriting lemmas; added `test-suite`\nentry covering the `pred` rewriting control idioms.\n** Used `only printing` annotations to get rid of token concatenation\nhacks.\n** Fixed boolean and general `if b return t then …` notation so that\n`b` is bound in `t`. This is a minor source of incompatibility for\nmisuses of this syntax when `b` is _not_ bound in `t`, and `(if b then\n…) : t` should have been used instead.\n** Reserved all `ssreflect`, `ssrfun` and `ssrbool` notation at the top\nof the file, adding some printing boxes, and removing some spurious\n`[pred .. => ..]` reserved notation.\n** Fixed parsing precedence and format of `<hidden n>` notation, and\ndeclared and put it in an explicit `ssr_scope`.\n** Used module-and-functor idiom to ensure that the `simpl_pred T >-\npred T` _and_ `simpl_pred T >-> {pred T}` coercions are realised by the\n_same_ Gallina constant.\n** Updated `CREDITS`.\nThe policy implied by this PR: that `{pred T}` should systematically\nbe used as the generic collective predicate type, was implemented in MathComp\nmath-comp/math-comp#237. As a result  `simpl_pred >-> pred_sort` coercions\nbecame more frequent, as it turned out they were not, as incorrectly stated\nin `ssrbool` internal comments, impossible: while the `simplPredType`\ncanonical instance does solve all `simpl_pred T =~= pred_sort ?pT`\ninstances, it does _not_ solve `simpl_pred T =~= {pred T}`, and so the\ncoercion will be used in that case. However it appeared that having two\ndifferent coercion constants confused the SSReflect keyed matching\nheuristic, hence the fix introduced here. This has entailed some\nrearrangement of `ssrbool`: the large  `Predicates` section had to be\nbroken up as the module-functor idiom for aliasing coercions cannot be\nused inside a section.\n","author_name":"Georges Gonthier","author_email":"georges.gonthier@inria.fr","authored_date":"2019-04-24T23:02:08.000+02:00","committer_name":"Georges Gonthier","committer_email":"georges.gonthier@inria.fr","committed_date":"2019-04-29T18:12:15.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ab73036c4d5c46759335647b380dde1b1ea0f1ff"},"pipeline":{"id":58995040,"iid":8663,"project_id":6138686,"sha":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","ref":"pr-9995","status":"failed","source":"push","created_at":"2019-04-29T16:27:55.342Z","updated_at":"2019-04-29T18:04:16.591Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/58995040"},"web_url":"https://gitlab.com/coq/coq/-/jobs/204446313","artifacts":[{"file_type":"trace","size":86538,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":204446310,"status":"success","stage":"test","name":"plugin:ci-mtac2","ref":"pr-9995","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-04-29T16:27:57.894Z","started_at":"2019-04-29T16:46:18.180Z","finished_at":"2019-04-29T16:50:34.765Z","duration":256.584279,"queued_duration":0.769097,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","short_id":"ab73036c","created_at":"2019-04-29T18:12:15.000+02:00","parent_ids":["61a1b4c46e4584e9337f9298b5f0053858a03c93"],"title":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface","message":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface\n\n** Changed definition of `simpl_rel` to `T -> `simpl_pred T`, so that\n`inE` will now expand `a \\in r b`, when `r := [rel x y | R]` to `R{b/x,\na/y}`, as the expanding coercion is now only inserted in the _last_\napplication.\nThe old definition made it possible to have a `simpl_rel >-> rel`\ncoercion that does not block expansion, but this can now be achieved\nmore economically with the `Arguments … /.` annotation.\n**  Deleted the `[rel of P]` notation which is no longer needed with\nthe new `simpl_rel` definition, and was broken anyway.\n** Added `relpre f R` definition of functional preimage of a notation.\n** `comp` and `idfun` are now proper definitions, using the `Arguments\n… /.` annotation to specify simplification on application.\n** Added `{pred T}` syntax for the alias of `pred T` in the `pred_sort`\ncoercion class; deleted the `pred_class` alias: one should either\nuse `pred_sort` in `Coercion` declarations, or `{pred T}` in type casts.\nUsed `{pred T}` as appropriate in localised predicate (`{in …, …}`) theory.\nExtended and corrected `pred` coercion internal documentation.\n** Simplified the `predType` structure by removing the redundant\nexplicit `mem_pred` subfield, and replacing it with an interlocked\nprojection; deleted `mkPredType`, now replaced by `PredType`.\n** Added (and extensively documented) a `nonPropType` interface\nmatching types that do _not_ have sort `Prop`, and used it to remove\nthe non-standard maximal implicits annotation on `Some_inj` introduced\nin #6911 by @anton-trumov; included `test-suite` entry for `nonPropType`.\n** Documented the design of the four structures used to control the\nmatching of `inE` and related predicate rewriting lemmas; added `test-suite`\nentry covering the `pred` rewriting control idioms.\n** Used `only printing` annotations to get rid of token concatenation\nhacks.\n** Fixed boolean and general `if b return t then …` notation so that\n`b` is bound in `t`. This is a minor source of incompatibility for\nmisuses of this syntax when `b` is _not_ bound in `t`, and `(if b then\n…) : t` should have been used instead.\n** Reserved all `ssreflect`, `ssrfun` and `ssrbool` notation at the top\nof the file, adding some printing boxes, and removing some spurious\n`[pred .. => ..]` reserved notation.\n** Fixed parsing precedence and format of `<hidden n>` notation, and\ndeclared and put it in an explicit `ssr_scope`.\n** Used module-and-functor idiom to ensure that the `simpl_pred T >-\npred T` _and_ `simpl_pred T >-> {pred T}` coercions are realised by the\n_same_ Gallina constant.\n** Updated `CREDITS`.\nThe policy implied by this PR: that `{pred T}` should systematically\nbe used as the generic collective predicate type, was implemented in MathComp\nmath-comp/math-comp#237. As a result  `simpl_pred >-> pred_sort` coercions\nbecame more frequent, as it turned out they were not, as incorrectly stated\nin `ssrbool` internal comments, impossible: while the `simplPredType`\ncanonical instance does solve all `simpl_pred T =~= pred_sort ?pT`\ninstances, it does _not_ solve `simpl_pred T =~= {pred T}`, and so the\ncoercion will be used in that case. However it appeared that having two\ndifferent coercion constants confused the SSReflect keyed matching\nheuristic, hence the fix introduced here. This has entailed some\nrearrangement of `ssrbool`: the large  `Predicates` section had to be\nbroken up as the module-functor idiom for aliasing coercions cannot be\nused inside a section.\n","author_name":"Georges Gonthier","author_email":"georges.gonthier@inria.fr","authored_date":"2019-04-24T23:02:08.000+02:00","committer_name":"Georges Gonthier","committer_email":"georges.gonthier@inria.fr","committed_date":"2019-04-29T18:12:15.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ab73036c4d5c46759335647b380dde1b1ea0f1ff"},"pipeline":{"id":58995040,"iid":8663,"project_id":6138686,"sha":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","ref":"pr-9995","status":"failed","source":"push","created_at":"2019-04-29T16:27:55.342Z","updated_at":"2019-04-29T18:04:16.591Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/58995040"},"web_url":"https://gitlab.com/coq/coq/-/jobs/204446310","artifacts":[{"file_type":"trace","size":148391,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":204446307,"status":"success","stage":"test","name":"plugin:ci-ltac2","ref":"pr-9995","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-04-29T16:27:57.864Z","started_at":"2019-04-29T16:46:17.754Z","finished_at":"2019-04-29T16:52:21.131Z","duration":363.376783,"queued_duration":0.192828,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","short_id":"ab73036c","created_at":"2019-04-29T18:12:15.000+02:00","parent_ids":["61a1b4c46e4584e9337f9298b5f0053858a03c93"],"title":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface","message":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface\n\n** Changed definition of `simpl_rel` to `T -> `simpl_pred T`, so that\n`inE` will now expand `a \\in r b`, when `r := [rel x y | R]` to `R{b/x,\na/y}`, as the expanding coercion is now only inserted in the _last_\napplication.\nThe old definition made it possible to have a `simpl_rel >-> rel`\ncoercion that does not block expansion, but this can now be achieved\nmore economically with the `Arguments … /.` annotation.\n**  Deleted the `[rel of P]` notation which is no longer needed with\nthe new `simpl_rel` definition, and was broken anyway.\n** Added `relpre f R` definition of functional preimage of a notation.\n** `comp` and `idfun` are now proper definitions, using the `Arguments\n… /.` annotation to specify simplification on application.\n** Added `{pred T}` syntax for the alias of `pred T` in the `pred_sort`\ncoercion class; deleted the `pred_class` alias: one should either\nuse `pred_sort` in `Coercion` declarations, or `{pred T}` in type casts.\nUsed `{pred T}` as appropriate in localised predicate (`{in …, …}`) theory.\nExtended and corrected `pred` coercion internal documentation.\n** Simplified the `predType` structure by removing the redundant\nexplicit `mem_pred` subfield, and replacing it with an interlocked\nprojection; deleted `mkPredType`, now replaced by `PredType`.\n** Added (and extensively documented) a `nonPropType` interface\nmatching types that do _not_ have sort `Prop`, and used it to remove\nthe non-standard maximal implicits annotation on `Some_inj` introduced\nin #6911 by @anton-trumov; included `test-suite` entry for `nonPropType`.\n** Documented the design of the four structures used to control the\nmatching of `inE` and related predicate rewriting lemmas; added `test-suite`\nentry covering the `pred` rewriting control idioms.\n** Used `only printing` annotations to get rid of token concatenation\nhacks.\n** Fixed boolean and general `if b return t then …` notation so that\n`b` is bound in `t`. This is a minor source of incompatibility for\nmisuses of this syntax when `b` is _not_ bound in `t`, and `(if b then\n…) : t` should have been used instead.\n** Reserved all `ssreflect`, `ssrfun` and `ssrbool` notation at the top\nof the file, adding some printing boxes, and removing some spurious\n`[pred .. => ..]` reserved notation.\n** Fixed parsing precedence and format of `<hidden n>` notation, and\ndeclared and put it in an explicit `ssr_scope`.\n** Used module-and-functor idiom to ensure that the `simpl_pred T >-\npred T` _and_ `simpl_pred T >-> {pred T}` coercions are realised by the\n_same_ Gallina constant.\n** Updated `CREDITS`.\nThe policy implied by this PR: that `{pred T}` should systematically\nbe used as the generic collective predicate type, was implemented in MathComp\nmath-comp/math-comp#237. As a result  `simpl_pred >-> pred_sort` coercions\nbecame more frequent, as it turned out they were not, as incorrectly stated\nin `ssrbool` internal comments, impossible: while the `simplPredType`\ncanonical instance does solve all `simpl_pred T =~= pred_sort ?pT`\ninstances, it does _not_ solve `simpl_pred T =~= {pred T}`, and so the\ncoercion will be used in that case. However it appeared that having two\ndifferent coercion constants confused the SSReflect keyed matching\nheuristic, hence the fix introduced here. This has entailed some\nrearrangement of `ssrbool`: the large  `Predicates` section had to be\nbroken up as the module-functor idiom for aliasing coercions cannot be\nused inside a section.\n","author_name":"Georges Gonthier","author_email":"georges.gonthier@inria.fr","authored_date":"2019-04-24T23:02:08.000+02:00","committer_name":"Georges Gonthier","committer_email":"georges.gonthier@inria.fr","committed_date":"2019-04-29T18:12:15.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ab73036c4d5c46759335647b380dde1b1ea0f1ff"},"pipeline":{"id":58995040,"iid":8663,"project_id":6138686,"sha":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","ref":"pr-9995","status":"failed","source":"push","created_at":"2019-04-29T16:27:55.342Z","updated_at":"2019-04-29T18:04:16.591Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/58995040"},"web_url":"https://gitlab.com/coq/coq/-/jobs/204446307","artifacts":[{"file_type":"trace","size":71046,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":204446303,"status":"success","stage":"test","name":"plugin:ci-fiat_parsers","ref":"pr-9995","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-04-29T16:27:57.834Z","started_at":"2019-04-29T16:46:18.097Z","finished_at":"2019-04-29T17:07:33.110Z","duration":1275.012087,"queued_duration":0.395306,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","short_id":"ab73036c","created_at":"2019-04-29T18:12:15.000+02:00","parent_ids":["61a1b4c46e4584e9337f9298b5f0053858a03c93"],"title":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface","message":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface\n\n** Changed definition of `simpl_rel` to `T -> `simpl_pred T`, so that\n`inE` will now expand `a \\in r b`, when `r := [rel x y | R]` to `R{b/x,\na/y}`, as the expanding coercion is now only inserted in the _last_\napplication.\nThe old definition made it possible to have a `simpl_rel >-> rel`\ncoercion that does not block expansion, but this can now be achieved\nmore economically with the `Arguments … /.` annotation.\n**  Deleted the `[rel of P]` notation which is no longer needed with\nthe new `simpl_rel` definition, and was broken anyway.\n** Added `relpre f R` definition of functional preimage of a notation.\n** `comp` and `idfun` are now proper definitions, using the `Arguments\n… /.` annotation to specify simplification on application.\n** Added `{pred T}` syntax for the alias of `pred T` in the `pred_sort`\ncoercion class; deleted the `pred_class` alias: one should either\nuse `pred_sort` in `Coercion` declarations, or `{pred T}` in type casts.\nUsed `{pred T}` as appropriate in localised predicate (`{in …, …}`) theory.\nExtended and corrected `pred` coercion internal documentation.\n** Simplified the `predType` structure by removing the redundant\nexplicit `mem_pred` subfield, and replacing it with an interlocked\nprojection; deleted `mkPredType`, now replaced by `PredType`.\n** Added (and extensively documented) a `nonPropType` interface\nmatching types that do _not_ have sort `Prop`, and used it to remove\nthe non-standard maximal implicits annotation on `Some_inj` introduced\nin #6911 by @anton-trumov; included `test-suite` entry for `nonPropType`.\n** Documented the design of the four structures used to control the\nmatching of `inE` and related predicate rewriting lemmas; added `test-suite`\nentry covering the `pred` rewriting control idioms.\n** Used `only printing` annotations to get rid of token concatenation\nhacks.\n** Fixed boolean and general `if b return t then …` notation so that\n`b` is bound in `t`. This is a minor source of incompatibility for\nmisuses of this syntax when `b` is _not_ bound in `t`, and `(if b then\n…) : t` should have been used instead.\n** Reserved all `ssreflect`, `ssrfun` and `ssrbool` notation at the top\nof the file, adding some printing boxes, and removing some spurious\n`[pred .. => ..]` reserved notation.\n** Fixed parsing precedence and format of `<hidden n>` notation, and\ndeclared and put it in an explicit `ssr_scope`.\n** Used module-and-functor idiom to ensure that the `simpl_pred T >-\npred T` _and_ `simpl_pred T >-> {pred T}` coercions are realised by the\n_same_ Gallina constant.\n** Updated `CREDITS`.\nThe policy implied by this PR: that `{pred T}` should systematically\nbe used as the generic collective predicate type, was implemented in MathComp\nmath-comp/math-comp#237. As a result  `simpl_pred >-> pred_sort` coercions\nbecame more frequent, as it turned out they were not, as incorrectly stated\nin `ssrbool` internal comments, impossible: while the `simplPredType`\ncanonical instance does solve all `simpl_pred T =~= pred_sort ?pT`\ninstances, it does _not_ solve `simpl_pred T =~= {pred T}`, and so the\ncoercion will be used in that case. However it appeared that having two\ndifferent coercion constants confused the SSReflect keyed matching\nheuristic, hence the fix introduced here. This has entailed some\nrearrangement of `ssrbool`: the large  `Predicates` section had to be\nbroken up as the module-functor idiom for aliasing coercions cannot be\nused inside a section.\n","author_name":"Georges Gonthier","author_email":"georges.gonthier@inria.fr","authored_date":"2019-04-24T23:02:08.000+02:00","committer_name":"Georges Gonthier","committer_email":"georges.gonthier@inria.fr","committed_date":"2019-04-29T18:12:15.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ab73036c4d5c46759335647b380dde1b1ea0f1ff"},"pipeline":{"id":58995040,"iid":8663,"project_id":6138686,"sha":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","ref":"pr-9995","status":"failed","source":"push","created_at":"2019-04-29T16:27:55.342Z","updated_at":"2019-04-29T18:04:16.591Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/58995040"},"web_url":"https://gitlab.com/coq/coq/-/jobs/204446303","artifacts":[{"file_type":"trace","size":242542,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":204446300,"status":"success","stage":"test","name":"plugin:ci-equations","ref":"pr-9995","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-04-29T16:27:57.806Z","started_at":"2019-04-29T16:46:18.840Z","finished_at":"2019-04-29T16:54:59.395Z","duration":520.555163,"queued_duration":1.040838,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","short_id":"ab73036c","created_at":"2019-04-29T18:12:15.000+02:00","parent_ids":["61a1b4c46e4584e9337f9298b5f0053858a03c93"],"title":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface","message":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface\n\n** Changed definition of `simpl_rel` to `T -> `simpl_pred T`, so that\n`inE` will now expand `a \\in r b`, when `r := [rel x y | R]` to `R{b/x,\na/y}`, as the expanding coercion is now only inserted in the _last_\napplication.\nThe old definition made it possible to have a `simpl_rel >-> rel`\ncoercion that does not block expansion, but this can now be achieved\nmore economically with the `Arguments … /.` annotation.\n**  Deleted the `[rel of P]` notation which is no longer needed with\nthe new `simpl_rel` definition, and was broken anyway.\n** Added `relpre f R` definition of functional preimage of a notation.\n** `comp` and `idfun` are now proper definitions, using the `Arguments\n… /.` annotation to specify simplification on application.\n** Added `{pred T}` syntax for the alias of `pred T` in the `pred_sort`\ncoercion class; deleted the `pred_class` alias: one should either\nuse `pred_sort` in `Coercion` declarations, or `{pred T}` in type casts.\nUsed `{pred T}` as appropriate in localised predicate (`{in …, …}`) theory.\nExtended and corrected `pred` coercion internal documentation.\n** Simplified the `predType` structure by removing the redundant\nexplicit `mem_pred` subfield, and replacing it with an interlocked\nprojection; deleted `mkPredType`, now replaced by `PredType`.\n** Added (and extensively documented) a `nonPropType` interface\nmatching types that do _not_ have sort `Prop`, and used it to remove\nthe non-standard maximal implicits annotation on `Some_inj` introduced\nin #6911 by @anton-trumov; included `test-suite` entry for `nonPropType`.\n** Documented the design of the four structures used to control the\nmatching of `inE` and related predicate rewriting lemmas; added `test-suite`\nentry covering the `pred` rewriting control idioms.\n** Used `only printing` annotations to get rid of token concatenation\nhacks.\n** Fixed boolean and general `if b return t then …` notation so that\n`b` is bound in `t`. This is a minor source of incompatibility for\nmisuses of this syntax when `b` is _not_ bound in `t`, and `(if b then\n…) : t` should have been used instead.\n** Reserved all `ssreflect`, `ssrfun` and `ssrbool` notation at the top\nof the file, adding some printing boxes, and removing some spurious\n`[pred .. => ..]` reserved notation.\n** Fixed parsing precedence and format of `<hidden n>` notation, and\ndeclared and put it in an explicit `ssr_scope`.\n** Used module-and-functor idiom to ensure that the `simpl_pred T >-\npred T` _and_ `simpl_pred T >-> {pred T}` coercions are realised by the\n_same_ Gallina constant.\n** Updated `CREDITS`.\nThe policy implied by this PR: that `{pred T}` should systematically\nbe used as the generic collective predicate type, was implemented in MathComp\nmath-comp/math-comp#237. As a result  `simpl_pred >-> pred_sort` coercions\nbecame more frequent, as it turned out they were not, as incorrectly stated\nin `ssrbool` internal comments, impossible: while the `simplPredType`\ncanonical instance does solve all `simpl_pred T =~= pred_sort ?pT`\ninstances, it does _not_ solve `simpl_pred T =~= {pred T}`, and so the\ncoercion will be used in that case. However it appeared that having two\ndifferent coercion constants confused the SSReflect keyed matching\nheuristic, hence the fix introduced here. This has entailed some\nrearrangement of `ssrbool`: the large  `Predicates` section had to be\nbroken up as the module-functor idiom for aliasing coercions cannot be\nused inside a section.\n","author_name":"Georges Gonthier","author_email":"georges.gonthier@inria.fr","authored_date":"2019-04-24T23:02:08.000+02:00","committer_name":"Georges Gonthier","committer_email":"georges.gonthier@inria.fr","committed_date":"2019-04-29T18:12:15.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ab73036c4d5c46759335647b380dde1b1ea0f1ff"},"pipeline":{"id":58995040,"iid":8663,"project_id":6138686,"sha":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","ref":"pr-9995","status":"failed","source":"push","created_at":"2019-04-29T16:27:55.342Z","updated_at":"2019-04-29T18:04:16.591Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/58995040"},"web_url":"https://gitlab.com/coq/coq/-/jobs/204446300","artifacts":[{"file_type":"trace","size":111671,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":204446298,"status":"success","stage":"test","name":"plugin:ci-elpi","ref":"pr-9995","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-04-29T16:27:57.775Z","started_at":"2019-04-29T16:46:18.362Z","finished_at":"2019-04-29T16:51:12.363Z","duration":294.001437,"queued_duration":0.505213,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","short_id":"ab73036c","created_at":"2019-04-29T18:12:15.000+02:00","parent_ids":["61a1b4c46e4584e9337f9298b5f0053858a03c93"],"title":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface","message":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface\n\n** Changed definition of `simpl_rel` to `T -> `simpl_pred T`, so that\n`inE` will now expand `a \\in r b`, when `r := [rel x y | R]` to `R{b/x,\na/y}`, as the expanding coercion is now only inserted in the _last_\napplication.\nThe old definition made it possible to have a `simpl_rel >-> rel`\ncoercion that does not block expansion, but this can now be achieved\nmore economically with the `Arguments … /.` annotation.\n**  Deleted the `[rel of P]` notation which is no longer needed with\nthe new `simpl_rel` definition, and was broken anyway.\n** Added `relpre f R` definition of functional preimage of a notation.\n** `comp` and `idfun` are now proper definitions, using the `Arguments\n… /.` annotation to specify simplification on application.\n** Added `{pred T}` syntax for the alias of `pred T` in the `pred_sort`\ncoercion class; deleted the `pred_class` alias: one should either\nuse `pred_sort` in `Coercion` declarations, or `{pred T}` in type casts.\nUsed `{pred T}` as appropriate in localised predicate (`{in …, …}`) theory.\nExtended and corrected `pred` coercion internal documentation.\n** Simplified the `predType` structure by removing the redundant\nexplicit `mem_pred` subfield, and replacing it with an interlocked\nprojection; deleted `mkPredType`, now replaced by `PredType`.\n** Added (and extensively documented) a `nonPropType` interface\nmatching types that do _not_ have sort `Prop`, and used it to remove\nthe non-standard maximal implicits annotation on `Some_inj` introduced\nin #6911 by @anton-trumov; included `test-suite` entry for `nonPropType`.\n** Documented the design of the four structures used to control the\nmatching of `inE` and related predicate rewriting lemmas; added `test-suite`\nentry covering the `pred` rewriting control idioms.\n** Used `only printing` annotations to get rid of token concatenation\nhacks.\n** Fixed boolean and general `if b return t then …` notation so that\n`b` is bound in `t`. This is a minor source of incompatibility for\nmisuses of this syntax when `b` is _not_ bound in `t`, and `(if b then\n…) : t` should have been used instead.\n** Reserved all `ssreflect`, `ssrfun` and `ssrbool` notation at the top\nof the file, adding some printing boxes, and removing some spurious\n`[pred .. => ..]` reserved notation.\n** Fixed parsing precedence and format of `<hidden n>` notation, and\ndeclared and put it in an explicit `ssr_scope`.\n** Used module-and-functor idiom to ensure that the `simpl_pred T >-\npred T` _and_ `simpl_pred T >-> {pred T}` coercions are realised by the\n_same_ Gallina constant.\n** Updated `CREDITS`.\nThe policy implied by this PR: that `{pred T}` should systematically\nbe used as the generic collective predicate type, was implemented in MathComp\nmath-comp/math-comp#237. As a result  `simpl_pred >-> pred_sort` coercions\nbecame more frequent, as it turned out they were not, as incorrectly stated\nin `ssrbool` internal comments, impossible: while the `simplPredType`\ncanonical instance does solve all `simpl_pred T =~= pred_sort ?pT`\ninstances, it does _not_ solve `simpl_pred T =~= {pred T}`, and so the\ncoercion will be used in that case. However it appeared that having two\ndifferent coercion constants confused the SSReflect keyed matching\nheuristic, hence the fix introduced here. This has entailed some\nrearrangement of `ssrbool`: the large  `Predicates` section had to be\nbroken up as the module-functor idiom for aliasing coercions cannot be\nused inside a section.\n","author_name":"Georges Gonthier","author_email":"georges.gonthier@inria.fr","authored_date":"2019-04-24T23:02:08.000+02:00","committer_name":"Georges Gonthier","committer_email":"georges.gonthier@inria.fr","committed_date":"2019-04-29T18:12:15.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ab73036c4d5c46759335647b380dde1b1ea0f1ff"},"pipeline":{"id":58995040,"iid":8663,"project_id":6138686,"sha":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","ref":"pr-9995","status":"failed","source":"push","created_at":"2019-04-29T16:27:55.342Z","updated_at":"2019-04-29T18:04:16.591Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/58995040"},"web_url":"https://gitlab.com/coq/coq/-/jobs/204446298","artifacts":[{"file_type":"trace","size":2119478,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":204446293,"status":"success","stage":"test","name":"plugin:ci-coqhammer","ref":"pr-9995","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-04-29T16:27:57.683Z","started_at":"2019-04-29T16:46:18.308Z","finished_at":"2019-04-29T16:49:31.677Z","duration":193.369533,"queued_duration":0.381541,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","short_id":"ab73036c","created_at":"2019-04-29T18:12:15.000+02:00","parent_ids":["61a1b4c46e4584e9337f9298b5f0053858a03c93"],"title":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface","message":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface\n\n** Changed definition of `simpl_rel` to `T -> `simpl_pred T`, so that\n`inE` will now expand `a \\in r b`, when `r := [rel x y | R]` to `R{b/x,\na/y}`, as the expanding coercion is now only inserted in the _last_\napplication.\nThe old definition made it possible to have a `simpl_rel >-> rel`\ncoercion that does not block expansion, but this can now be achieved\nmore economically with the `Arguments … /.` annotation.\n**  Deleted the `[rel of P]` notation which is no longer needed with\nthe new `simpl_rel` definition, and was broken anyway.\n** Added `relpre f R` definition of functional preimage of a notation.\n** `comp` and `idfun` are now proper definitions, using the `Arguments\n… /.` annotation to specify simplification on application.\n** Added `{pred T}` syntax for the alias of `pred T` in the `pred_sort`\ncoercion class; deleted the `pred_class` alias: one should either\nuse `pred_sort` in `Coercion` declarations, or `{pred T}` in type casts.\nUsed `{pred T}` as appropriate in localised predicate (`{in …, …}`) theory.\nExtended and corrected `pred` coercion internal documentation.\n** Simplified the `predType` structure by removing the redundant\nexplicit `mem_pred` subfield, and replacing it with an interlocked\nprojection; deleted `mkPredType`, now replaced by `PredType`.\n** Added (and extensively documented) a `nonPropType` interface\nmatching types that do _not_ have sort `Prop`, and used it to remove\nthe non-standard maximal implicits annotation on `Some_inj` introduced\nin #6911 by @anton-trumov; included `test-suite` entry for `nonPropType`.\n** Documented the design of the four structures used to control the\nmatching of `inE` and related predicate rewriting lemmas; added `test-suite`\nentry covering the `pred` rewriting control idioms.\n** Used `only printing` annotations to get rid of token concatenation\nhacks.\n** Fixed boolean and general `if b return t then …` notation so that\n`b` is bound in `t`. This is a minor source of incompatibility for\nmisuses of this syntax when `b` is _not_ bound in `t`, and `(if b then\n…) : t` should have been used instead.\n** Reserved all `ssreflect`, `ssrfun` and `ssrbool` notation at the top\nof the file, adding some printing boxes, and removing some spurious\n`[pred .. => ..]` reserved notation.\n** Fixed parsing precedence and format of `<hidden n>` notation, and\ndeclared and put it in an explicit `ssr_scope`.\n** Used module-and-functor idiom to ensure that the `simpl_pred T >-\npred T` _and_ `simpl_pred T >-> {pred T}` coercions are realised by the\n_same_ Gallina constant.\n** Updated `CREDITS`.\nThe policy implied by this PR: that `{pred T}` should systematically\nbe used as the generic collective predicate type, was implemented in MathComp\nmath-comp/math-comp#237. As a result  `simpl_pred >-> pred_sort` coercions\nbecame more frequent, as it turned out they were not, as incorrectly stated\nin `ssrbool` internal comments, impossible: while the `simplPredType`\ncanonical instance does solve all `simpl_pred T =~= pred_sort ?pT`\ninstances, it does _not_ solve `simpl_pred T =~= {pred T}`, and so the\ncoercion will be used in that case. However it appeared that having two\ndifferent coercion constants confused the SSReflect keyed matching\nheuristic, hence the fix introduced here. This has entailed some\nrearrangement of `ssrbool`: the large  `Predicates` section had to be\nbroken up as the module-functor idiom for aliasing coercions cannot be\nused inside a section.\n","author_name":"Georges Gonthier","author_email":"georges.gonthier@inria.fr","authored_date":"2019-04-24T23:02:08.000+02:00","committer_name":"Georges Gonthier","committer_email":"georges.gonthier@inria.fr","committed_date":"2019-04-29T18:12:15.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ab73036c4d5c46759335647b380dde1b1ea0f1ff"},"pipeline":{"id":58995040,"iid":8663,"project_id":6138686,"sha":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","ref":"pr-9995","status":"failed","source":"push","created_at":"2019-04-29T16:27:55.342Z","updated_at":"2019-04-29T18:04:16.591Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/58995040"},"web_url":"https://gitlab.com/coq/coq/-/jobs/204446293","artifacts":[{"file_type":"trace","size":38791,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":204446289,"status":"success","stage":"test","name":"plugin:ci-coq_dpdgraph","ref":"pr-9995","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-04-29T16:27:57.643Z","started_at":"2019-04-29T16:46:18.667Z","finished_at":"2019-04-29T16:49:13.797Z","duration":175.130237,"queued_duration":0.695158,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","short_id":"ab73036c","created_at":"2019-04-29T18:12:15.000+02:00","parent_ids":["61a1b4c46e4584e9337f9298b5f0053858a03c93"],"title":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface","message":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface\n\n** Changed definition of `simpl_rel` to `T -> `simpl_pred T`, so that\n`inE` will now expand `a \\in r b`, when `r := [rel x y | R]` to `R{b/x,\na/y}`, as the expanding coercion is now only inserted in the _last_\napplication.\nThe old definition made it possible to have a `simpl_rel >-> rel`\ncoercion that does not block expansion, but this can now be achieved\nmore economically with the `Arguments … /.` annotation.\n**  Deleted the `[rel of P]` notation which is no longer needed with\nthe new `simpl_rel` definition, and was broken anyway.\n** Added `relpre f R` definition of functional preimage of a notation.\n** `comp` and `idfun` are now proper definitions, using the `Arguments\n… /.` annotation to specify simplification on application.\n** Added `{pred T}` syntax for the alias of `pred T` in the `pred_sort`\ncoercion class; deleted the `pred_class` alias: one should either\nuse `pred_sort` in `Coercion` declarations, or `{pred T}` in type casts.\nUsed `{pred T}` as appropriate in localised predicate (`{in …, …}`) theory.\nExtended and corrected `pred` coercion internal documentation.\n** Simplified the `predType` structure by removing the redundant\nexplicit `mem_pred` subfield, and replacing it with an interlocked\nprojection; deleted `mkPredType`, now replaced by `PredType`.\n** Added (and extensively documented) a `nonPropType` interface\nmatching types that do _not_ have sort `Prop`, and used it to remove\nthe non-standard maximal implicits annotation on `Some_inj` introduced\nin #6911 by @anton-trumov; included `test-suite` entry for `nonPropType`.\n** Documented the design of the four structures used to control the\nmatching of `inE` and related predicate rewriting lemmas; added `test-suite`\nentry covering the `pred` rewriting control idioms.\n** Used `only printing` annotations to get rid of token concatenation\nhacks.\n** Fixed boolean and general `if b return t then …` notation so that\n`b` is bound in `t`. This is a minor source of incompatibility for\nmisuses of this syntax when `b` is _not_ bound in `t`, and `(if b then\n…) : t` should have been used instead.\n** Reserved all `ssreflect`, `ssrfun` and `ssrbool` notation at the top\nof the file, adding some printing boxes, and removing some spurious\n`[pred .. => ..]` reserved notation.\n** Fixed parsing precedence and format of `<hidden n>` notation, and\ndeclared and put it in an explicit `ssr_scope`.\n** Used module-and-functor idiom to ensure that the `simpl_pred T >-\npred T` _and_ `simpl_pred T >-> {pred T}` coercions are realised by the\n_same_ Gallina constant.\n** Updated `CREDITS`.\nThe policy implied by this PR: that `{pred T}` should systematically\nbe used as the generic collective predicate type, was implemented in MathComp\nmath-comp/math-comp#237. As a result  `simpl_pred >-> pred_sort` coercions\nbecame more frequent, as it turned out they were not, as incorrectly stated\nin `ssrbool` internal comments, impossible: while the `simplPredType`\ncanonical instance does solve all `simpl_pred T =~= pred_sort ?pT`\ninstances, it does _not_ solve `simpl_pred T =~= {pred T}`, and so the\ncoercion will be used in that case. However it appeared that having two\ndifferent coercion constants confused the SSReflect keyed matching\nheuristic, hence the fix introduced here. This has entailed some\nrearrangement of `ssrbool`: the large  `Predicates` section had to be\nbroken up as the module-functor idiom for aliasing coercions cannot be\nused inside a section.\n","author_name":"Georges Gonthier","author_email":"georges.gonthier@inria.fr","authored_date":"2019-04-24T23:02:08.000+02:00","committer_name":"Georges Gonthier","committer_email":"georges.gonthier@inria.fr","committed_date":"2019-04-29T18:12:15.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ab73036c4d5c46759335647b380dde1b1ea0f1ff"},"pipeline":{"id":58995040,"iid":8663,"project_id":6138686,"sha":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","ref":"pr-9995","status":"failed","source":"push","created_at":"2019-04-29T16:27:55.342Z","updated_at":"2019-04-29T18:04:16.591Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/58995040"},"web_url":"https://gitlab.com/coq/coq/-/jobs/204446289","artifacts":[{"file_type":"trace","size":47553,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":204446287,"status":"success","stage":"test","name":"plugin:ci-bignums","ref":"pr-9995","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-04-29T16:27:57.526Z","started_at":"2019-04-29T16:46:18.619Z","finished_at":"2019-04-29T16:50:50.741Z","duration":272.12248,"queued_duration":0.607105,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","short_id":"ab73036c","created_at":"2019-04-29T18:12:15.000+02:00","parent_ids":["61a1b4c46e4584e9337f9298b5f0053858a03c93"],"title":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface","message":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface\n\n** Changed definition of `simpl_rel` to `T -> `simpl_pred T`, so that\n`inE` will now expand `a \\in r b`, when `r := [rel x y | R]` to `R{b/x,\na/y}`, as the expanding coercion is now only inserted in the _last_\napplication.\nThe old definition made it possible to have a `simpl_rel >-> rel`\ncoercion that does not block expansion, but this can now be achieved\nmore economically with the `Arguments … /.` annotation.\n**  Deleted the `[rel of P]` notation which is no longer needed with\nthe new `simpl_rel` definition, and was broken anyway.\n** Added `relpre f R` definition of functional preimage of a notation.\n** `comp` and `idfun` are now proper definitions, using the `Arguments\n… /.` annotation to specify simplification on application.\n** Added `{pred T}` syntax for the alias of `pred T` in the `pred_sort`\ncoercion class; deleted the `pred_class` alias: one should either\nuse `pred_sort` in `Coercion` declarations, or `{pred T}` in type casts.\nUsed `{pred T}` as appropriate in localised predicate (`{in …, …}`) theory.\nExtended and corrected `pred` coercion internal documentation.\n** Simplified the `predType` structure by removing the redundant\nexplicit `mem_pred` subfield, and replacing it with an interlocked\nprojection; deleted `mkPredType`, now replaced by `PredType`.\n** Added (and extensively documented) a `nonPropType` interface\nmatching types that do _not_ have sort `Prop`, and used it to remove\nthe non-standard maximal implicits annotation on `Some_inj` introduced\nin #6911 by @anton-trumov; included `test-suite` entry for `nonPropType`.\n** Documented the design of the four structures used to control the\nmatching of `inE` and related predicate rewriting lemmas; added `test-suite`\nentry covering the `pred` rewriting control idioms.\n** Used `only printing` annotations to get rid of token concatenation\nhacks.\n** Fixed boolean and general `if b return t then …` notation so that\n`b` is bound in `t`. This is a minor source of incompatibility for\nmisuses of this syntax when `b` is _not_ bound in `t`, and `(if b then\n…) : t` should have been used instead.\n** Reserved all `ssreflect`, `ssrfun` and `ssrbool` notation at the top\nof the file, adding some printing boxes, and removing some spurious\n`[pred .. => ..]` reserved notation.\n** Fixed parsing precedence and format of `<hidden n>` notation, and\ndeclared and put it in an explicit `ssr_scope`.\n** Used module-and-functor idiom to ensure that the `simpl_pred T >-\npred T` _and_ `simpl_pred T >-> {pred T}` coercions are realised by the\n_same_ Gallina constant.\n** Updated `CREDITS`.\nThe policy implied by this PR: that `{pred T}` should systematically\nbe used as the generic collective predicate type, was implemented in MathComp\nmath-comp/math-comp#237. As a result  `simpl_pred >-> pred_sort` coercions\nbecame more frequent, as it turned out they were not, as incorrectly stated\nin `ssrbool` internal comments, impossible: while the `simplPredType`\ncanonical instance does solve all `simpl_pred T =~= pred_sort ?pT`\ninstances, it does _not_ solve `simpl_pred T =~= {pred T}`, and so the\ncoercion will be used in that case. However it appeared that having two\ndifferent coercion constants confused the SSReflect keyed matching\nheuristic, hence the fix introduced here. This has entailed some\nrearrangement of `ssrbool`: the large  `Predicates` section had to be\nbroken up as the module-functor idiom for aliasing coercions cannot be\nused inside a section.\n","author_name":"Georges Gonthier","author_email":"georges.gonthier@inria.fr","authored_date":"2019-04-24T23:02:08.000+02:00","committer_name":"Georges Gonthier","committer_email":"georges.gonthier@inria.fr","committed_date":"2019-04-29T18:12:15.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ab73036c4d5c46759335647b380dde1b1ea0f1ff"},"pipeline":{"id":58995040,"iid":8663,"project_id":6138686,"sha":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","ref":"pr-9995","status":"failed","source":"push","created_at":"2019-04-29T16:27:55.342Z","updated_at":"2019-04-29T18:04:16.591Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/58995040"},"web_url":"https://gitlab.com/coq/coq/-/jobs/204446287","artifacts":[{"file_type":"trace","size":46188,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":204446283,"status":"success","stage":"test","name":"plugin:ci-aac_tactics","ref":"pr-9995","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-04-29T16:27:57.078Z","started_at":"2019-04-29T16:46:18.221Z","finished_at":"2019-04-29T16:52:20.926Z","duration":362.704585,"queued_duration":0.165016,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","short_id":"ab73036c","created_at":"2019-04-29T18:12:15.000+02:00","parent_ids":["61a1b4c46e4584e9337f9298b5f0053858a03c93"],"title":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface","message":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface\n\n** Changed definition of `simpl_rel` to `T -> `simpl_pred T`, so that\n`inE` will now expand `a \\in r b`, when `r := [rel x y | R]` to `R{b/x,\na/y}`, as the expanding coercion is now only inserted in the _last_\napplication.\nThe old definition made it possible to have a `simpl_rel >-> rel`\ncoercion that does not block expansion, but this can now be achieved\nmore economically with the `Arguments … /.` annotation.\n**  Deleted the `[rel of P]` notation which is no longer needed with\nthe new `simpl_rel` definition, and was broken anyway.\n** Added `relpre f R` definition of functional preimage of a notation.\n** `comp` and `idfun` are now proper definitions, using the `Arguments\n… /.` annotation to specify simplification on application.\n** Added `{pred T}` syntax for the alias of `pred T` in the `pred_sort`\ncoercion class; deleted the `pred_class` alias: one should either\nuse `pred_sort` in `Coercion` declarations, or `{pred T}` in type casts.\nUsed `{pred T}` as appropriate in localised predicate (`{in …, …}`) theory.\nExtended and corrected `pred` coercion internal documentation.\n** Simplified the `predType` structure by removing the redundant\nexplicit `mem_pred` subfield, and replacing it with an interlocked\nprojection; deleted `mkPredType`, now replaced by `PredType`.\n** Added (and extensively documented) a `nonPropType` interface\nmatching types that do _not_ have sort `Prop`, and used it to remove\nthe non-standard maximal implicits annotation on `Some_inj` introduced\nin #6911 by @anton-trumov; included `test-suite` entry for `nonPropType`.\n** Documented the design of the four structures used to control the\nmatching of `inE` and related predicate rewriting lemmas; added `test-suite`\nentry covering the `pred` rewriting control idioms.\n** Used `only printing` annotations to get rid of token concatenation\nhacks.\n** Fixed boolean and general `if b return t then …` notation so that\n`b` is bound in `t`. This is a minor source of incompatibility for\nmisuses of this syntax when `b` is _not_ bound in `t`, and `(if b then\n…) : t` should have been used instead.\n** Reserved all `ssreflect`, `ssrfun` and `ssrbool` notation at the top\nof the file, adding some printing boxes, and removing some spurious\n`[pred .. => ..]` reserved notation.\n** Fixed parsing precedence and format of `<hidden n>` notation, and\ndeclared and put it in an explicit `ssr_scope`.\n** Used module-and-functor idiom to ensure that the `simpl_pred T >-\npred T` _and_ `simpl_pred T >-> {pred T}` coercions are realised by the\n_same_ Gallina constant.\n** Updated `CREDITS`.\nThe policy implied by this PR: that `{pred T}` should systematically\nbe used as the generic collective predicate type, was implemented in MathComp\nmath-comp/math-comp#237. As a result  `simpl_pred >-> pred_sort` coercions\nbecame more frequent, as it turned out they were not, as incorrectly stated\nin `ssrbool` internal comments, impossible: while the `simplPredType`\ncanonical instance does solve all `simpl_pred T =~= pred_sort ?pT`\ninstances, it does _not_ solve `simpl_pred T =~= {pred T}`, and so the\ncoercion will be used in that case. However it appeared that having two\ndifferent coercion constants confused the SSReflect keyed matching\nheuristic, hence the fix introduced here. This has entailed some\nrearrangement of `ssrbool`: the large  `Predicates` section had to be\nbroken up as the module-functor idiom for aliasing coercions cannot be\nused inside a section.\n","author_name":"Georges Gonthier","author_email":"georges.gonthier@inria.fr","authored_date":"2019-04-24T23:02:08.000+02:00","committer_name":"Georges Gonthier","committer_email":"georges.gonthier@inria.fr","committed_date":"2019-04-29T18:12:15.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ab73036c4d5c46759335647b380dde1b1ea0f1ff"},"pipeline":{"id":58995040,"iid":8663,"project_id":6138686,"sha":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","ref":"pr-9995","status":"failed","source":"push","created_at":"2019-04-29T16:27:55.342Z","updated_at":"2019-04-29T18:04:16.591Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/58995040"},"web_url":"https://gitlab.com/coq/coq/-/jobs/204446283","artifacts":[{"file_type":"trace","size":76953,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":204446282,"status":"success","stage":"test","name":"library:ci-vst","ref":"pr-9995","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-04-29T16:27:57.027Z","started_at":"2019-04-29T16:46:18.736Z","finished_at":"2019-04-29T17:58:13.040Z","duration":4314.303934,"queued_duration":0.523414,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","short_id":"ab73036c","created_at":"2019-04-29T18:12:15.000+02:00","parent_ids":["61a1b4c46e4584e9337f9298b5f0053858a03c93"],"title":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface","message":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface\n\n** Changed definition of `simpl_rel` to `T -> `simpl_pred T`, so that\n`inE` will now expand `a \\in r b`, when `r := [rel x y | R]` to `R{b/x,\na/y}`, as the expanding coercion is now only inserted in the _last_\napplication.\nThe old definition made it possible to have a `simpl_rel >-> rel`\ncoercion that does not block expansion, but this can now be achieved\nmore economically with the `Arguments … /.` annotation.\n**  Deleted the `[rel of P]` notation which is no longer needed with\nthe new `simpl_rel` definition, and was broken anyway.\n** Added `relpre f R` definition of functional preimage of a notation.\n** `comp` and `idfun` are now proper definitions, using the `Arguments\n… /.` annotation to specify simplification on application.\n** Added `{pred T}` syntax for the alias of `pred T` in the `pred_sort`\ncoercion class; deleted the `pred_class` alias: one should either\nuse `pred_sort` in `Coercion` declarations, or `{pred T}` in type casts.\nUsed `{pred T}` as appropriate in localised predicate (`{in …, …}`) theory.\nExtended and corrected `pred` coercion internal documentation.\n** Simplified the `predType` structure by removing the redundant\nexplicit `mem_pred` subfield, and replacing it with an interlocked\nprojection; deleted `mkPredType`, now replaced by `PredType`.\n** Added (and extensively documented) a `nonPropType` interface\nmatching types that do _not_ have sort `Prop`, and used it to remove\nthe non-standard maximal implicits annotation on `Some_inj` introduced\nin #6911 by @anton-trumov; included `test-suite` entry for `nonPropType`.\n** Documented the design of the four structures used to control the\nmatching of `inE` and related predicate rewriting lemmas; added `test-suite`\nentry covering the `pred` rewriting control idioms.\n** Used `only printing` annotations to get rid of token concatenation\nhacks.\n** Fixed boolean and general `if b return t then …` notation so that\n`b` is bound in `t`. This is a minor source of incompatibility for\nmisuses of this syntax when `b` is _not_ bound in `t`, and `(if b then\n…) : t` should have been used instead.\n** Reserved all `ssreflect`, `ssrfun` and `ssrbool` notation at the top\nof the file, adding some printing boxes, and removing some spurious\n`[pred .. => ..]` reserved notation.\n** Fixed parsing precedence and format of `<hidden n>` notation, and\ndeclared and put it in an explicit `ssr_scope`.\n** Used module-and-functor idiom to ensure that the `simpl_pred T >-\npred T` _and_ `simpl_pred T >-> {pred T}` coercions are realised by the\n_same_ Gallina constant.\n** Updated `CREDITS`.\nThe policy implied by this PR: that `{pred T}` should systematically\nbe used as the generic collective predicate type, was implemented in MathComp\nmath-comp/math-comp#237. As a result  `simpl_pred >-> pred_sort` coercions\nbecame more frequent, as it turned out they were not, as incorrectly stated\nin `ssrbool` internal comments, impossible: while the `simplPredType`\ncanonical instance does solve all `simpl_pred T =~= pred_sort ?pT`\ninstances, it does _not_ solve `simpl_pred T =~= {pred T}`, and so the\ncoercion will be used in that case. However it appeared that having two\ndifferent coercion constants confused the SSReflect keyed matching\nheuristic, hence the fix introduced here. This has entailed some\nrearrangement of `ssrbool`: the large  `Predicates` section had to be\nbroken up as the module-functor idiom for aliasing coercions cannot be\nused inside a section.\n","author_name":"Georges Gonthier","author_email":"georges.gonthier@inria.fr","authored_date":"2019-04-24T23:02:08.000+02:00","committer_name":"Georges Gonthier","committer_email":"georges.gonthier@inria.fr","committed_date":"2019-04-29T18:12:15.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ab73036c4d5c46759335647b380dde1b1ea0f1ff"},"pipeline":{"id":58995040,"iid":8663,"project_id":6138686,"sha":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","ref":"pr-9995","status":"failed","source":"push","created_at":"2019-04-29T16:27:55.342Z","updated_at":"2019-04-29T18:04:16.591Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/58995040"},"web_url":"https://gitlab.com/coq/coq/-/jobs/204446282","artifacts":[{"file_type":"trace","size":209148,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":204446280,"status":"success","stage":"test","name":"library:ci-verdi-raft","ref":"pr-9995","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-04-29T16:27:56.922Z","started_at":"2019-04-29T16:46:18.891Z","finished_at":"2019-04-29T17:24:15.986Z","duration":2277.095001,"queued_duration":0.50457,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","short_id":"ab73036c","created_at":"2019-04-29T18:12:15.000+02:00","parent_ids":["61a1b4c46e4584e9337f9298b5f0053858a03c93"],"title":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface","message":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface\n\n** Changed definition of `simpl_rel` to `T -> `simpl_pred T`, so that\n`inE` will now expand `a \\in r b`, when `r := [rel x y | R]` to `R{b/x,\na/y}`, as the expanding coercion is now only inserted in the _last_\napplication.\nThe old definition made it possible to have a `simpl_rel >-> rel`\ncoercion that does not block expansion, but this can now be achieved\nmore economically with the `Arguments … /.` annotation.\n**  Deleted the `[rel of P]` notation which is no longer needed with\nthe new `simpl_rel` definition, and was broken anyway.\n** Added `relpre f R` definition of functional preimage of a notation.\n** `comp` and `idfun` are now proper definitions, using the `Arguments\n… /.` annotation to specify simplification on application.\n** Added `{pred T}` syntax for the alias of `pred T` in the `pred_sort`\ncoercion class; deleted the `pred_class` alias: one should either\nuse `pred_sort` in `Coercion` declarations, or `{pred T}` in type casts.\nUsed `{pred T}` as appropriate in localised predicate (`{in …, …}`) theory.\nExtended and corrected `pred` coercion internal documentation.\n** Simplified the `predType` structure by removing the redundant\nexplicit `mem_pred` subfield, and replacing it with an interlocked\nprojection; deleted `mkPredType`, now replaced by `PredType`.\n** Added (and extensively documented) a `nonPropType` interface\nmatching types that do _not_ have sort `Prop`, and used it to remove\nthe non-standard maximal implicits annotation on `Some_inj` introduced\nin #6911 by @anton-trumov; included `test-suite` entry for `nonPropType`.\n** Documented the design of the four structures used to control the\nmatching of `inE` and related predicate rewriting lemmas; added `test-suite`\nentry covering the `pred` rewriting control idioms.\n** Used `only printing` annotations to get rid of token concatenation\nhacks.\n** Fixed boolean and general `if b return t then …` notation so that\n`b` is bound in `t`. This is a minor source of incompatibility for\nmisuses of this syntax when `b` is _not_ bound in `t`, and `(if b then\n…) : t` should have been used instead.\n** Reserved all `ssreflect`, `ssrfun` and `ssrbool` notation at the top\nof the file, adding some printing boxes, and removing some spurious\n`[pred .. => ..]` reserved notation.\n** Fixed parsing precedence and format of `<hidden n>` notation, and\ndeclared and put it in an explicit `ssr_scope`.\n** Used module-and-functor idiom to ensure that the `simpl_pred T >-\npred T` _and_ `simpl_pred T >-> {pred T}` coercions are realised by the\n_same_ Gallina constant.\n** Updated `CREDITS`.\nThe policy implied by this PR: that `{pred T}` should systematically\nbe used as the generic collective predicate type, was implemented in MathComp\nmath-comp/math-comp#237. As a result  `simpl_pred >-> pred_sort` coercions\nbecame more frequent, as it turned out they were not, as incorrectly stated\nin `ssrbool` internal comments, impossible: while the `simplPredType`\ncanonical instance does solve all `simpl_pred T =~= pred_sort ?pT`\ninstances, it does _not_ solve `simpl_pred T =~= {pred T}`, and so the\ncoercion will be used in that case. However it appeared that having two\ndifferent coercion constants confused the SSReflect keyed matching\nheuristic, hence the fix introduced here. This has entailed some\nrearrangement of `ssrbool`: the large  `Predicates` section had to be\nbroken up as the module-functor idiom for aliasing coercions cannot be\nused inside a section.\n","author_name":"Georges Gonthier","author_email":"georges.gonthier@inria.fr","authored_date":"2019-04-24T23:02:08.000+02:00","committer_name":"Georges Gonthier","committer_email":"georges.gonthier@inria.fr","committed_date":"2019-04-29T18:12:15.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ab73036c4d5c46759335647b380dde1b1ea0f1ff"},"pipeline":{"id":58995040,"iid":8663,"project_id":6138686,"sha":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","ref":"pr-9995","status":"failed","source":"push","created_at":"2019-04-29T16:27:55.342Z","updated_at":"2019-04-29T18:04:16.591Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/58995040"},"web_url":"https://gitlab.com/coq/coq/-/jobs/204446280","artifacts":[{"file_type":"trace","size":192914,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":204446279,"status":"success","stage":"test","name":"library:ci-unimath","ref":"pr-9995","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-04-29T16:27:56.895Z","started_at":"2019-04-29T16:46:18.871Z","finished_at":"2019-04-29T17:39:18.205Z","duration":3179.333753,"queued_duration":0.372036,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","short_id":"ab73036c","created_at":"2019-04-29T18:12:15.000+02:00","parent_ids":["61a1b4c46e4584e9337f9298b5f0053858a03c93"],"title":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface","message":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface\n\n** Changed definition of `simpl_rel` to `T -> `simpl_pred T`, so that\n`inE` will now expand `a \\in r b`, when `r := [rel x y | R]` to `R{b/x,\na/y}`, as the expanding coercion is now only inserted in the _last_\napplication.\nThe old definition made it possible to have a `simpl_rel >-> rel`\ncoercion that does not block expansion, but this can now be achieved\nmore economically with the `Arguments … /.` annotation.\n**  Deleted the `[rel of P]` notation which is no longer needed with\nthe new `simpl_rel` definition, and was broken anyway.\n** Added `relpre f R` definition of functional preimage of a notation.\n** `comp` and `idfun` are now proper definitions, using the `Arguments\n… /.` annotation to specify simplification on application.\n** Added `{pred T}` syntax for the alias of `pred T` in the `pred_sort`\ncoercion class; deleted the `pred_class` alias: one should either\nuse `pred_sort` in `Coercion` declarations, or `{pred T}` in type casts.\nUsed `{pred T}` as appropriate in localised predicate (`{in …, …}`) theory.\nExtended and corrected `pred` coercion internal documentation.\n** Simplified the `predType` structure by removing the redundant\nexplicit `mem_pred` subfield, and replacing it with an interlocked\nprojection; deleted `mkPredType`, now replaced by `PredType`.\n** Added (and extensively documented) a `nonPropType` interface\nmatching types that do _not_ have sort `Prop`, and used it to remove\nthe non-standard maximal implicits annotation on `Some_inj` introduced\nin #6911 by @anton-trumov; included `test-suite` entry for `nonPropType`.\n** Documented the design of the four structures used to control the\nmatching of `inE` and related predicate rewriting lemmas; added `test-suite`\nentry covering the `pred` rewriting control idioms.\n** Used `only printing` annotations to get rid of token concatenation\nhacks.\n** Fixed boolean and general `if b return t then …` notation so that\n`b` is bound in `t`. This is a minor source of incompatibility for\nmisuses of this syntax when `b` is _not_ bound in `t`, and `(if b then\n…) : t` should have been used instead.\n** Reserved all `ssreflect`, `ssrfun` and `ssrbool` notation at the top\nof the file, adding some printing boxes, and removing some spurious\n`[pred .. => ..]` reserved notation.\n** Fixed parsing precedence and format of `<hidden n>` notation, and\ndeclared and put it in an explicit `ssr_scope`.\n** Used module-and-functor idiom to ensure that the `simpl_pred T >-\npred T` _and_ `simpl_pred T >-> {pred T}` coercions are realised by the\n_same_ Gallina constant.\n** Updated `CREDITS`.\nThe policy implied by this PR: that `{pred T}` should systematically\nbe used as the generic collective predicate type, was implemented in MathComp\nmath-comp/math-comp#237. As a result  `simpl_pred >-> pred_sort` coercions\nbecame more frequent, as it turned out they were not, as incorrectly stated\nin `ssrbool` internal comments, impossible: while the `simplPredType`\ncanonical instance does solve all `simpl_pred T =~= pred_sort ?pT`\ninstances, it does _not_ solve `simpl_pred T =~= {pred T}`, and so the\ncoercion will be used in that case. However it appeared that having two\ndifferent coercion constants confused the SSReflect keyed matching\nheuristic, hence the fix introduced here. This has entailed some\nrearrangement of `ssrbool`: the large  `Predicates` section had to be\nbroken up as the module-functor idiom for aliasing coercions cannot be\nused inside a section.\n","author_name":"Georges Gonthier","author_email":"georges.gonthier@inria.fr","authored_date":"2019-04-24T23:02:08.000+02:00","committer_name":"Georges Gonthier","committer_email":"georges.gonthier@inria.fr","committed_date":"2019-04-29T18:12:15.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ab73036c4d5c46759335647b380dde1b1ea0f1ff"},"pipeline":{"id":58995040,"iid":8663,"project_id":6138686,"sha":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","ref":"pr-9995","status":"failed","source":"push","created_at":"2019-04-29T16:27:55.342Z","updated_at":"2019-04-29T18:04:16.591Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/58995040"},"web_url":"https://gitlab.com/coq/coq/-/jobs/204446279","artifacts":[{"file_type":"trace","size":207374,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":204446278,"status":"success","stage":"test","name":"library:ci-stdlib2","ref":"pr-9995","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-04-29T16:27:56.850Z","started_at":"2019-04-29T16:46:18.655Z","finished_at":"2019-04-29T16:56:53.587Z","duration":634.93219,"queued_duration":0.066894,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","short_id":"ab73036c","created_at":"2019-04-29T18:12:15.000+02:00","parent_ids":["61a1b4c46e4584e9337f9298b5f0053858a03c93"],"title":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface","message":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface\n\n** Changed definition of `simpl_rel` to `T -> `simpl_pred T`, so that\n`inE` will now expand `a \\in r b`, when `r := [rel x y | R]` to `R{b/x,\na/y}`, as the expanding coercion is now only inserted in the _last_\napplication.\nThe old definition made it possible to have a `simpl_rel >-> rel`\ncoercion that does not block expansion, but this can now be achieved\nmore economically with the `Arguments … /.` annotation.\n**  Deleted the `[rel of P]` notation which is no longer needed with\nthe new `simpl_rel` definition, and was broken anyway.\n** Added `relpre f R` definition of functional preimage of a notation.\n** `comp` and `idfun` are now proper definitions, using the `Arguments\n… /.` annotation to specify simplification on application.\n** Added `{pred T}` syntax for the alias of `pred T` in the `pred_sort`\ncoercion class; deleted the `pred_class` alias: one should either\nuse `pred_sort` in `Coercion` declarations, or `{pred T}` in type casts.\nUsed `{pred T}` as appropriate in localised predicate (`{in …, …}`) theory.\nExtended and corrected `pred` coercion internal documentation.\n** Simplified the `predType` structure by removing the redundant\nexplicit `mem_pred` subfield, and replacing it with an interlocked\nprojection; deleted `mkPredType`, now replaced by `PredType`.\n** Added (and extensively documented) a `nonPropType` interface\nmatching types that do _not_ have sort `Prop`, and used it to remove\nthe non-standard maximal implicits annotation on `Some_inj` introduced\nin #6911 by @anton-trumov; included `test-suite` entry for `nonPropType`.\n** Documented the design of the four structures used to control the\nmatching of `inE` and related predicate rewriting lemmas; added `test-suite`\nentry covering the `pred` rewriting control idioms.\n** Used `only printing` annotations to get rid of token concatenation\nhacks.\n** Fixed boolean and general `if b return t then …` notation so that\n`b` is bound in `t`. This is a minor source of incompatibility for\nmisuses of this syntax when `b` is _not_ bound in `t`, and `(if b then\n…) : t` should have been used instead.\n** Reserved all `ssreflect`, `ssrfun` and `ssrbool` notation at the top\nof the file, adding some printing boxes, and removing some spurious\n`[pred .. => ..]` reserved notation.\n** Fixed parsing precedence and format of `<hidden n>` notation, and\ndeclared and put it in an explicit `ssr_scope`.\n** Used module-and-functor idiom to ensure that the `simpl_pred T >-\npred T` _and_ `simpl_pred T >-> {pred T}` coercions are realised by the\n_same_ Gallina constant.\n** Updated `CREDITS`.\nThe policy implied by this PR: that `{pred T}` should systematically\nbe used as the generic collective predicate type, was implemented in MathComp\nmath-comp/math-comp#237. As a result  `simpl_pred >-> pred_sort` coercions\nbecame more frequent, as it turned out they were not, as incorrectly stated\nin `ssrbool` internal comments, impossible: while the `simplPredType`\ncanonical instance does solve all `simpl_pred T =~= pred_sort ?pT`\ninstances, it does _not_ solve `simpl_pred T =~= {pred T}`, and so the\ncoercion will be used in that case. However it appeared that having two\ndifferent coercion constants confused the SSReflect keyed matching\nheuristic, hence the fix introduced here. This has entailed some\nrearrangement of `ssrbool`: the large  `Predicates` section had to be\nbroken up as the module-functor idiom for aliasing coercions cannot be\nused inside a section.\n","author_name":"Georges Gonthier","author_email":"georges.gonthier@inria.fr","authored_date":"2019-04-24T23:02:08.000+02:00","committer_name":"Georges Gonthier","committer_email":"georges.gonthier@inria.fr","committed_date":"2019-04-29T18:12:15.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ab73036c4d5c46759335647b380dde1b1ea0f1ff"},"pipeline":{"id":58995040,"iid":8663,"project_id":6138686,"sha":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","ref":"pr-9995","status":"failed","source":"push","created_at":"2019-04-29T16:27:55.342Z","updated_at":"2019-04-29T18:04:16.591Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/58995040"},"web_url":"https://gitlab.com/coq/coq/-/jobs/204446278","artifacts":[{"file_type":"trace","size":205079,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":204446277,"status":"success","stage":"test","name":"library:ci-sf","ref":"pr-9995","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-04-29T16:27:56.732Z","started_at":"2019-04-29T16:46:19.477Z","finished_at":"2019-04-29T16:50:45.755Z","duration":266.278359,"queued_duration":0.836816,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","short_id":"ab73036c","created_at":"2019-04-29T18:12:15.000+02:00","parent_ids":["61a1b4c46e4584e9337f9298b5f0053858a03c93"],"title":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface","message":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface\n\n** Changed definition of `simpl_rel` to `T -> `simpl_pred T`, so that\n`inE` will now expand `a \\in r b`, when `r := [rel x y | R]` to `R{b/x,\na/y}`, as the expanding coercion is now only inserted in the _last_\napplication.\nThe old definition made it possible to have a `simpl_rel >-> rel`\ncoercion that does not block expansion, but this can now be achieved\nmore economically with the `Arguments … /.` annotation.\n**  Deleted the `[rel of P]` notation which is no longer needed with\nthe new `simpl_rel` definition, and was broken anyway.\n** Added `relpre f R` definition of functional preimage of a notation.\n** `comp` and `idfun` are now proper definitions, using the `Arguments\n… /.` annotation to specify simplification on application.\n** Added `{pred T}` syntax for the alias of `pred T` in the `pred_sort`\ncoercion class; deleted the `pred_class` alias: one should either\nuse `pred_sort` in `Coercion` declarations, or `{pred T}` in type casts.\nUsed `{pred T}` as appropriate in localised predicate (`{in …, …}`) theory.\nExtended and corrected `pred` coercion internal documentation.\n** Simplified the `predType` structure by removing the redundant\nexplicit `mem_pred` subfield, and replacing it with an interlocked\nprojection; deleted `mkPredType`, now replaced by `PredType`.\n** Added (and extensively documented) a `nonPropType` interface\nmatching types that do _not_ have sort `Prop`, and used it to remove\nthe non-standard maximal implicits annotation on `Some_inj` introduced\nin #6911 by @anton-trumov; included `test-suite` entry for `nonPropType`.\n** Documented the design of the four structures used to control the\nmatching of `inE` and related predicate rewriting lemmas; added `test-suite`\nentry covering the `pred` rewriting control idioms.\n** Used `only printing` annotations to get rid of token concatenation\nhacks.\n** Fixed boolean and general `if b return t then …` notation so that\n`b` is bound in `t`. This is a minor source of incompatibility for\nmisuses of this syntax when `b` is _not_ bound in `t`, and `(if b then\n…) : t` should have been used instead.\n** Reserved all `ssreflect`, `ssrfun` and `ssrbool` notation at the top\nof the file, adding some printing boxes, and removing some spurious\n`[pred .. => ..]` reserved notation.\n** Fixed parsing precedence and format of `<hidden n>` notation, and\ndeclared and put it in an explicit `ssr_scope`.\n** Used module-and-functor idiom to ensure that the `simpl_pred T >-\npred T` _and_ `simpl_pred T >-> {pred T}` coercions are realised by the\n_same_ Gallina constant.\n** Updated `CREDITS`.\nThe policy implied by this PR: that `{pred T}` should systematically\nbe used as the generic collective predicate type, was implemented in MathComp\nmath-comp/math-comp#237. As a result  `simpl_pred >-> pred_sort` coercions\nbecame more frequent, as it turned out they were not, as incorrectly stated\nin `ssrbool` internal comments, impossible: while the `simplPredType`\ncanonical instance does solve all `simpl_pred T =~= pred_sort ?pT`\ninstances, it does _not_ solve `simpl_pred T =~= {pred T}`, and so the\ncoercion will be used in that case. However it appeared that having two\ndifferent coercion constants confused the SSReflect keyed matching\nheuristic, hence the fix introduced here. This has entailed some\nrearrangement of `ssrbool`: the large  `Predicates` section had to be\nbroken up as the module-functor idiom for aliasing coercions cannot be\nused inside a section.\n","author_name":"Georges Gonthier","author_email":"georges.gonthier@inria.fr","authored_date":"2019-04-24T23:02:08.000+02:00","committer_name":"Georges Gonthier","committer_email":"georges.gonthier@inria.fr","committed_date":"2019-04-29T18:12:15.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ab73036c4d5c46759335647b380dde1b1ea0f1ff"},"pipeline":{"id":58995040,"iid":8663,"project_id":6138686,"sha":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","ref":"pr-9995","status":"failed","source":"push","created_at":"2019-04-29T16:27:55.342Z","updated_at":"2019-04-29T18:04:16.591Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/58995040"},"web_url":"https://gitlab.com/coq/coq/-/jobs/204446277","artifacts":[{"file_type":"trace","size":356285,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":204446276,"status":"failed","stage":"test","name":"library:ci-math-comp","ref":"pr-9995","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-04-29T16:27:56.525Z","started_at":"2019-04-29T16:46:19.430Z","finished_at":"2019-04-29T16:49:17.902Z","duration":178.47204,"queued_duration":0.743869,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","short_id":"ab73036c","created_at":"2019-04-29T18:12:15.000+02:00","parent_ids":["61a1b4c46e4584e9337f9298b5f0053858a03c93"],"title":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface","message":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface\n\n** Changed definition of `simpl_rel` to `T -> `simpl_pred T`, so that\n`inE` will now expand `a \\in r b`, when `r := [rel x y | R]` to `R{b/x,\na/y}`, as the expanding coercion is now only inserted in the _last_\napplication.\nThe old definition made it possible to have a `simpl_rel >-> rel`\ncoercion that does not block expansion, but this can now be achieved\nmore economically with the `Arguments … /.` annotation.\n**  Deleted the `[rel of P]` notation which is no longer needed with\nthe new `simpl_rel` definition, and was broken anyway.\n** Added `relpre f R` definition of functional preimage of a notation.\n** `comp` and `idfun` are now proper definitions, using the `Arguments\n… /.` annotation to specify simplification on application.\n** Added `{pred T}` syntax for the alias of `pred T` in the `pred_sort`\ncoercion class; deleted the `pred_class` alias: one should either\nuse `pred_sort` in `Coercion` declarations, or `{pred T}` in type casts.\nUsed `{pred T}` as appropriate in localised predicate (`{in …, …}`) theory.\nExtended and corrected `pred` coercion internal documentation.\n** Simplified the `predType` structure by removing the redundant\nexplicit `mem_pred` subfield, and replacing it with an interlocked\nprojection; deleted `mkPredType`, now replaced by `PredType`.\n** Added (and extensively documented) a `nonPropType` interface\nmatching types that do _not_ have sort `Prop`, and used it to remove\nthe non-standard maximal implicits annotation on `Some_inj` introduced\nin #6911 by @anton-trumov; included `test-suite` entry for `nonPropType`.\n** Documented the design of the four structures used to control the\nmatching of `inE` and related predicate rewriting lemmas; added `test-suite`\nentry covering the `pred` rewriting control idioms.\n** Used `only printing` annotations to get rid of token concatenation\nhacks.\n** Fixed boolean and general `if b return t then …` notation so that\n`b` is bound in `t`. This is a minor source of incompatibility for\nmisuses of this syntax when `b` is _not_ bound in `t`, and `(if b then\n…) : t` should have been used instead.\n** Reserved all `ssreflect`, `ssrfun` and `ssrbool` notation at the top\nof the file, adding some printing boxes, and removing some spurious\n`[pred .. => ..]` reserved notation.\n** Fixed parsing precedence and format of `<hidden n>` notation, and\ndeclared and put it in an explicit `ssr_scope`.\n** Used module-and-functor idiom to ensure that the `simpl_pred T >-\npred T` _and_ `simpl_pred T >-> {pred T}` coercions are realised by the\n_same_ Gallina constant.\n** Updated `CREDITS`.\nThe policy implied by this PR: that `{pred T}` should systematically\nbe used as the generic collective predicate type, was implemented in MathComp\nmath-comp/math-comp#237. As a result  `simpl_pred >-> pred_sort` coercions\nbecame more frequent, as it turned out they were not, as incorrectly stated\nin `ssrbool` internal comments, impossible: while the `simplPredType`\ncanonical instance does solve all `simpl_pred T =~= pred_sort ?pT`\ninstances, it does _not_ solve `simpl_pred T =~= {pred T}`, and so the\ncoercion will be used in that case. However it appeared that having two\ndifferent coercion constants confused the SSReflect keyed matching\nheuristic, hence the fix introduced here. This has entailed some\nrearrangement of `ssrbool`: the large  `Predicates` section had to be\nbroken up as the module-functor idiom for aliasing coercions cannot be\nused inside a section.\n","author_name":"Georges Gonthier","author_email":"georges.gonthier@inria.fr","authored_date":"2019-04-24T23:02:08.000+02:00","committer_name":"Georges Gonthier","committer_email":"georges.gonthier@inria.fr","committed_date":"2019-04-29T18:12:15.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ab73036c4d5c46759335647b380dde1b1ea0f1ff"},"pipeline":{"id":58995040,"iid":8663,"project_id":6138686,"sha":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","ref":"pr-9995","status":"failed","source":"push","created_at":"2019-04-29T16:27:55.342Z","updated_at":"2019-04-29T18:04:16.591Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/58995040"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/204446276","artifacts":[{"file_type":"trace","size":96506,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":204446274,"status":"failed","stage":"test","name":"library:ci-iris-lambda-rust","ref":"pr-9995","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-04-29T16:27:56.465Z","started_at":"2019-04-29T16:46:19.381Z","finished_at":"2019-04-29T16:49:09.516Z","duration":170.135536,"queued_duration":0.623497,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","short_id":"ab73036c","created_at":"2019-04-29T18:12:15.000+02:00","parent_ids":["61a1b4c46e4584e9337f9298b5f0053858a03c93"],"title":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface","message":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface\n\n** Changed definition of `simpl_rel` to `T -> `simpl_pred T`, so that\n`inE` will now expand `a \\in r b`, when `r := [rel x y | R]` to `R{b/x,\na/y}`, as the expanding coercion is now only inserted in the _last_\napplication.\nThe old definition made it possible to have a `simpl_rel >-> rel`\ncoercion that does not block expansion, but this can now be achieved\nmore economically with the `Arguments … /.` annotation.\n**  Deleted the `[rel of P]` notation which is no longer needed with\nthe new `simpl_rel` definition, and was broken anyway.\n** Added `relpre f R` definition of functional preimage of a notation.\n** `comp` and `idfun` are now proper definitions, using the `Arguments\n… /.` annotation to specify simplification on application.\n** Added `{pred T}` syntax for the alias of `pred T` in the `pred_sort`\ncoercion class; deleted the `pred_class` alias: one should either\nuse `pred_sort` in `Coercion` declarations, or `{pred T}` in type casts.\nUsed `{pred T}` as appropriate in localised predicate (`{in …, …}`) theory.\nExtended and corrected `pred` coercion internal documentation.\n** Simplified the `predType` structure by removing the redundant\nexplicit `mem_pred` subfield, and replacing it with an interlocked\nprojection; deleted `mkPredType`, now replaced by `PredType`.\n** Added (and extensively documented) a `nonPropType` interface\nmatching types that do _not_ have sort `Prop`, and used it to remove\nthe non-standard maximal implicits annotation on `Some_inj` introduced\nin #6911 by @anton-trumov; included `test-suite` entry for `nonPropType`.\n** Documented the design of the four structures used to control the\nmatching of `inE` and related predicate rewriting lemmas; added `test-suite`\nentry covering the `pred` rewriting control idioms.\n** Used `only printing` annotations to get rid of token concatenation\nhacks.\n** Fixed boolean and general `if b return t then …` notation so that\n`b` is bound in `t`. This is a minor source of incompatibility for\nmisuses of this syntax when `b` is _not_ bound in `t`, and `(if b then\n…) : t` should have been used instead.\n** Reserved all `ssreflect`, `ssrfun` and `ssrbool` notation at the top\nof the file, adding some printing boxes, and removing some spurious\n`[pred .. => ..]` reserved notation.\n** Fixed parsing precedence and format of `<hidden n>` notation, and\ndeclared and put it in an explicit `ssr_scope`.\n** Used module-and-functor idiom to ensure that the `simpl_pred T >-\npred T` _and_ `simpl_pred T >-> {pred T}` coercions are realised by the\n_same_ Gallina constant.\n** Updated `CREDITS`.\nThe policy implied by this PR: that `{pred T}` should systematically\nbe used as the generic collective predicate type, was implemented in MathComp\nmath-comp/math-comp#237. As a result  `simpl_pred >-> pred_sort` coercions\nbecame more frequent, as it turned out they were not, as incorrectly stated\nin `ssrbool` internal comments, impossible: while the `simplPredType`\ncanonical instance does solve all `simpl_pred T =~= pred_sort ?pT`\ninstances, it does _not_ solve `simpl_pred T =~= {pred T}`, and so the\ncoercion will be used in that case. However it appeared that having two\ndifferent coercion constants confused the SSReflect keyed matching\nheuristic, hence the fix introduced here. This has entailed some\nrearrangement of `ssrbool`: the large  `Predicates` section had to be\nbroken up as the module-functor idiom for aliasing coercions cannot be\nused inside a section.\n","author_name":"Georges Gonthier","author_email":"georges.gonthier@inria.fr","authored_date":"2019-04-24T23:02:08.000+02:00","committer_name":"Georges Gonthier","committer_email":"georges.gonthier@inria.fr","committed_date":"2019-04-29T18:12:15.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ab73036c4d5c46759335647b380dde1b1ea0f1ff"},"pipeline":{"id":58995040,"iid":8663,"project_id":6138686,"sha":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","ref":"pr-9995","status":"failed","source":"push","created_at":"2019-04-29T16:27:55.342Z","updated_at":"2019-04-29T18:04:16.591Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/58995040"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/204446274","artifacts":[{"file_type":"trace","size":96471,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":204446273,"status":"success","stage":"test","name":"library:ci-hott","ref":"pr-9995","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-04-29T16:27:56.423Z","started_at":"2019-04-29T16:46:19.335Z","finished_at":"2019-04-29T16:59:43.103Z","duration":803.768057,"queued_duration":0.541461,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","short_id":"ab73036c","created_at":"2019-04-29T18:12:15.000+02:00","parent_ids":["61a1b4c46e4584e9337f9298b5f0053858a03c93"],"title":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface","message":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface\n\n** Changed definition of `simpl_rel` to `T -> `simpl_pred T`, so that\n`inE` will now expand `a \\in r b`, when `r := [rel x y | R]` to `R{b/x,\na/y}`, as the expanding coercion is now only inserted in the _last_\napplication.\nThe old definition made it possible to have a `simpl_rel >-> rel`\ncoercion that does not block expansion, but this can now be achieved\nmore economically with the `Arguments … /.` annotation.\n**  Deleted the `[rel of P]` notation which is no longer needed with\nthe new `simpl_rel` definition, and was broken anyway.\n** Added `relpre f R` definition of functional preimage of a notation.\n** `comp` and `idfun` are now proper definitions, using the `Arguments\n… /.` annotation to specify simplification on application.\n** Added `{pred T}` syntax for the alias of `pred T` in the `pred_sort`\ncoercion class; deleted the `pred_class` alias: one should either\nuse `pred_sort` in `Coercion` declarations, or `{pred T}` in type casts.\nUsed `{pred T}` as appropriate in localised predicate (`{in …, …}`) theory.\nExtended and corrected `pred` coercion internal documentation.\n** Simplified the `predType` structure by removing the redundant\nexplicit `mem_pred` subfield, and replacing it with an interlocked\nprojection; deleted `mkPredType`, now replaced by `PredType`.\n** Added (and extensively documented) a `nonPropType` interface\nmatching types that do _not_ have sort `Prop`, and used it to remove\nthe non-standard maximal implicits annotation on `Some_inj` introduced\nin #6911 by @anton-trumov; included `test-suite` entry for `nonPropType`.\n** Documented the design of the four structures used to control the\nmatching of `inE` and related predicate rewriting lemmas; added `test-suite`\nentry covering the `pred` rewriting control idioms.\n** Used `only printing` annotations to get rid of token concatenation\nhacks.\n** Fixed boolean and general `if b return t then …` notation so that\n`b` is bound in `t`. This is a minor source of incompatibility for\nmisuses of this syntax when `b` is _not_ bound in `t`, and `(if b then\n…) : t` should have been used instead.\n** Reserved all `ssreflect`, `ssrfun` and `ssrbool` notation at the top\nof the file, adding some printing boxes, and removing some spurious\n`[pred .. => ..]` reserved notation.\n** Fixed parsing precedence and format of `<hidden n>` notation, and\ndeclared and put it in an explicit `ssr_scope`.\n** Used module-and-functor idiom to ensure that the `simpl_pred T >-\npred T` _and_ `simpl_pred T >-> {pred T}` coercions are realised by the\n_same_ Gallina constant.\n** Updated `CREDITS`.\nThe policy implied by this PR: that `{pred T}` should systematically\nbe used as the generic collective predicate type, was implemented in MathComp\nmath-comp/math-comp#237. As a result  `simpl_pred >-> pred_sort` coercions\nbecame more frequent, as it turned out they were not, as incorrectly stated\nin `ssrbool` internal comments, impossible: while the `simplPredType`\ncanonical instance does solve all `simpl_pred T =~= pred_sort ?pT`\ninstances, it does _not_ solve `simpl_pred T =~= {pred T}`, and so the\ncoercion will be used in that case. However it appeared that having two\ndifferent coercion constants confused the SSReflect keyed matching\nheuristic, hence the fix introduced here. This has entailed some\nrearrangement of `ssrbool`: the large  `Predicates` section had to be\nbroken up as the module-functor idiom for aliasing coercions cannot be\nused inside a section.\n","author_name":"Georges Gonthier","author_email":"georges.gonthier@inria.fr","authored_date":"2019-04-24T23:02:08.000+02:00","committer_name":"Georges Gonthier","committer_email":"georges.gonthier@inria.fr","committed_date":"2019-04-29T18:12:15.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ab73036c4d5c46759335647b380dde1b1ea0f1ff"},"pipeline":{"id":58995040,"iid":8663,"project_id":6138686,"sha":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","ref":"pr-9995","status":"failed","source":"push","created_at":"2019-04-29T16:27:55.342Z","updated_at":"2019-04-29T18:04:16.591Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/58995040"},"web_url":"https://gitlab.com/coq/coq/-/jobs/204446273","artifacts":[{"file_type":"trace","size":146197,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":204446272,"status":"failed","stage":"test","name":"library:ci-geocoq","ref":"pr-9995","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-04-29T16:27:56.392Z","started_at":"2019-04-29T16:46:19.272Z","finished_at":"2019-04-29T16:49:11.620Z","duration":172.348135,"queued_duration":0.442333,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","short_id":"ab73036c","created_at":"2019-04-29T18:12:15.000+02:00","parent_ids":["61a1b4c46e4584e9337f9298b5f0053858a03c93"],"title":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface","message":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface\n\n** Changed definition of `simpl_rel` to `T -> `simpl_pred T`, so that\n`inE` will now expand `a \\in r b`, when `r := [rel x y | R]` to `R{b/x,\na/y}`, as the expanding coercion is now only inserted in the _last_\napplication.\nThe old definition made it possible to have a `simpl_rel >-> rel`\ncoercion that does not block expansion, but this can now be achieved\nmore economically with the `Arguments … /.` annotation.\n**  Deleted the `[rel of P]` notation which is no longer needed with\nthe new `simpl_rel` definition, and was broken anyway.\n** Added `relpre f R` definition of functional preimage of a notation.\n** `comp` and `idfun` are now proper definitions, using the `Arguments\n… /.` annotation to specify simplification on application.\n** Added `{pred T}` syntax for the alias of `pred T` in the `pred_sort`\ncoercion class; deleted the `pred_class` alias: one should either\nuse `pred_sort` in `Coercion` declarations, or `{pred T}` in type casts.\nUsed `{pred T}` as appropriate in localised predicate (`{in …, …}`) theory.\nExtended and corrected `pred` coercion internal documentation.\n** Simplified the `predType` structure by removing the redundant\nexplicit `mem_pred` subfield, and replacing it with an interlocked\nprojection; deleted `mkPredType`, now replaced by `PredType`.\n** Added (and extensively documented) a `nonPropType` interface\nmatching types that do _not_ have sort `Prop`, and used it to remove\nthe non-standard maximal implicits annotation on `Some_inj` introduced\nin #6911 by @anton-trumov; included `test-suite` entry for `nonPropType`.\n** Documented the design of the four structures used to control the\nmatching of `inE` and related predicate rewriting lemmas; added `test-suite`\nentry covering the `pred` rewriting control idioms.\n** Used `only printing` annotations to get rid of token concatenation\nhacks.\n** Fixed boolean and general `if b return t then …` notation so that\n`b` is bound in `t`. This is a minor source of incompatibility for\nmisuses of this syntax when `b` is _not_ bound in `t`, and `(if b then\n…) : t` should have been used instead.\n** Reserved all `ssreflect`, `ssrfun` and `ssrbool` notation at the top\nof the file, adding some printing boxes, and removing some spurious\n`[pred .. => ..]` reserved notation.\n** Fixed parsing precedence and format of `<hidden n>` notation, and\ndeclared and put it in an explicit `ssr_scope`.\n** Used module-and-functor idiom to ensure that the `simpl_pred T >-\npred T` _and_ `simpl_pred T >-> {pred T}` coercions are realised by the\n_same_ Gallina constant.\n** Updated `CREDITS`.\nThe policy implied by this PR: that `{pred T}` should systematically\nbe used as the generic collective predicate type, was implemented in MathComp\nmath-comp/math-comp#237. As a result  `simpl_pred >-> pred_sort` coercions\nbecame more frequent, as it turned out they were not, as incorrectly stated\nin `ssrbool` internal comments, impossible: while the `simplPredType`\ncanonical instance does solve all `simpl_pred T =~= pred_sort ?pT`\ninstances, it does _not_ solve `simpl_pred T =~= {pred T}`, and so the\ncoercion will be used in that case. However it appeared that having two\ndifferent coercion constants confused the SSReflect keyed matching\nheuristic, hence the fix introduced here. This has entailed some\nrearrangement of `ssrbool`: the large  `Predicates` section had to be\nbroken up as the module-functor idiom for aliasing coercions cannot be\nused inside a section.\n","author_name":"Georges Gonthier","author_email":"georges.gonthier@inria.fr","authored_date":"2019-04-24T23:02:08.000+02:00","committer_name":"Georges Gonthier","committer_email":"georges.gonthier@inria.fr","committed_date":"2019-04-29T18:12:15.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ab73036c4d5c46759335647b380dde1b1ea0f1ff"},"pipeline":{"id":58995040,"iid":8663,"project_id":6138686,"sha":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","ref":"pr-9995","status":"failed","source":"push","created_at":"2019-04-29T16:27:55.342Z","updated_at":"2019-04-29T18:04:16.591Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/58995040"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/204446272","artifacts":[{"file_type":"trace","size":96440,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":204446271,"status":"success","stage":"test","name":"library:ci-corn","ref":"pr-9995","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-04-29T16:27:56.354Z","started_at":"2019-04-29T16:46:19.533Z","finished_at":"2019-04-29T17:27:36.887Z","duration":2477.353678,"queued_duration":0.647915,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","short_id":"ab73036c","created_at":"2019-04-29T18:12:15.000+02:00","parent_ids":["61a1b4c46e4584e9337f9298b5f0053858a03c93"],"title":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface","message":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface\n\n** Changed definition of `simpl_rel` to `T -> `simpl_pred T`, so that\n`inE` will now expand `a \\in r b`, when `r := [rel x y | R]` to `R{b/x,\na/y}`, as the expanding coercion is now only inserted in the _last_\napplication.\nThe old definition made it possible to have a `simpl_rel >-> rel`\ncoercion that does not block expansion, but this can now be achieved\nmore economically with the `Arguments … /.` annotation.\n**  Deleted the `[rel of P]` notation which is no longer needed with\nthe new `simpl_rel` definition, and was broken anyway.\n** Added `relpre f R` definition of functional preimage of a notation.\n** `comp` and `idfun` are now proper definitions, using the `Arguments\n… /.` annotation to specify simplification on application.\n** Added `{pred T}` syntax for the alias of `pred T` in the `pred_sort`\ncoercion class; deleted the `pred_class` alias: one should either\nuse `pred_sort` in `Coercion` declarations, or `{pred T}` in type casts.\nUsed `{pred T}` as appropriate in localised predicate (`{in …, …}`) theory.\nExtended and corrected `pred` coercion internal documentation.\n** Simplified the `predType` structure by removing the redundant\nexplicit `mem_pred` subfield, and replacing it with an interlocked\nprojection; deleted `mkPredType`, now replaced by `PredType`.\n** Added (and extensively documented) a `nonPropType` interface\nmatching types that do _not_ have sort `Prop`, and used it to remove\nthe non-standard maximal implicits annotation on `Some_inj` introduced\nin #6911 by @anton-trumov; included `test-suite` entry for `nonPropType`.\n** Documented the design of the four structures used to control the\nmatching of `inE` and related predicate rewriting lemmas; added `test-suite`\nentry covering the `pred` rewriting control idioms.\n** Used `only printing` annotations to get rid of token concatenation\nhacks.\n** Fixed boolean and general `if b return t then …` notation so that\n`b` is bound in `t`. This is a minor source of incompatibility for\nmisuses of this syntax when `b` is _not_ bound in `t`, and `(if b then\n…) : t` should have been used instead.\n** Reserved all `ssreflect`, `ssrfun` and `ssrbool` notation at the top\nof the file, adding some printing boxes, and removing some spurious\n`[pred .. => ..]` reserved notation.\n** Fixed parsing precedence and format of `<hidden n>` notation, and\ndeclared and put it in an explicit `ssr_scope`.\n** Used module-and-functor idiom to ensure that the `simpl_pred T >-\npred T` _and_ `simpl_pred T >-> {pred T}` coercions are realised by the\n_same_ Gallina constant.\n** Updated `CREDITS`.\nThe policy implied by this PR: that `{pred T}` should systematically\nbe used as the generic collective predicate type, was implemented in MathComp\nmath-comp/math-comp#237. As a result  `simpl_pred >-> pred_sort` coercions\nbecame more frequent, as it turned out they were not, as incorrectly stated\nin `ssrbool` internal comments, impossible: while the `simplPredType`\ncanonical instance does solve all `simpl_pred T =~= pred_sort ?pT`\ninstances, it does _not_ solve `simpl_pred T =~= {pred T}`, and so the\ncoercion will be used in that case. However it appeared that having two\ndifferent coercion constants confused the SSReflect keyed matching\nheuristic, hence the fix introduced here. This has entailed some\nrearrangement of `ssrbool`: the large  `Predicates` section had to be\nbroken up as the module-functor idiom for aliasing coercions cannot be\nused inside a section.\n","author_name":"Georges Gonthier","author_email":"georges.gonthier@inria.fr","authored_date":"2019-04-24T23:02:08.000+02:00","committer_name":"Georges Gonthier","committer_email":"georges.gonthier@inria.fr","committed_date":"2019-04-29T18:12:15.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ab73036c4d5c46759335647b380dde1b1ea0f1ff"},"pipeline":{"id":58995040,"iid":8663,"project_id":6138686,"sha":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","ref":"pr-9995","status":"failed","source":"push","created_at":"2019-04-29T16:27:55.342Z","updated_at":"2019-04-29T18:04:16.591Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/58995040"},"web_url":"https://gitlab.com/coq/coq/-/jobs/204446271","artifacts":[{"file_type":"trace","size":452754,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":204446269,"status":"success","stage":"test","name":"library:ci-flocq","ref":"pr-9995","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-04-29T16:27:56.313Z","started_at":"2019-04-29T16:46:19.087Z","finished_at":"2019-04-29T17:07:51.669Z","duration":1292.582136,"queued_duration":0.080615,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","short_id":"ab73036c","created_at":"2019-04-29T18:12:15.000+02:00","parent_ids":["61a1b4c46e4584e9337f9298b5f0053858a03c93"],"title":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface","message":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface\n\n** Changed definition of `simpl_rel` to `T -> `simpl_pred T`, so that\n`inE` will now expand `a \\in r b`, when `r := [rel x y | R]` to `R{b/x,\na/y}`, as the expanding coercion is now only inserted in the _last_\napplication.\nThe old definition made it possible to have a `simpl_rel >-> rel`\ncoercion that does not block expansion, but this can now be achieved\nmore economically with the `Arguments … /.` annotation.\n**  Deleted the `[rel of P]` notation which is no longer needed with\nthe new `simpl_rel` definition, and was broken anyway.\n** Added `relpre f R` definition of functional preimage of a notation.\n** `comp` and `idfun` are now proper definitions, using the `Arguments\n… /.` annotation to specify simplification on application.\n** Added `{pred T}` syntax for the alias of `pred T` in the `pred_sort`\ncoercion class; deleted the `pred_class` alias: one should either\nuse `pred_sort` in `Coercion` declarations, or `{pred T}` in type casts.\nUsed `{pred T}` as appropriate in localised predicate (`{in …, …}`) theory.\nExtended and corrected `pred` coercion internal documentation.\n** Simplified the `predType` structure by removing the redundant\nexplicit `mem_pred` subfield, and replacing it with an interlocked\nprojection; deleted `mkPredType`, now replaced by `PredType`.\n** Added (and extensively documented) a `nonPropType` interface\nmatching types that do _not_ have sort `Prop`, and used it to remove\nthe non-standard maximal implicits annotation on `Some_inj` introduced\nin #6911 by @anton-trumov; included `test-suite` entry for `nonPropType`.\n** Documented the design of the four structures used to control the\nmatching of `inE` and related predicate rewriting lemmas; added `test-suite`\nentry covering the `pred` rewriting control idioms.\n** Used `only printing` annotations to get rid of token concatenation\nhacks.\n** Fixed boolean and general `if b return t then …` notation so that\n`b` is bound in `t`. This is a minor source of incompatibility for\nmisuses of this syntax when `b` is _not_ bound in `t`, and `(if b then\n…) : t` should have been used instead.\n** Reserved all `ssreflect`, `ssrfun` and `ssrbool` notation at the top\nof the file, adding some printing boxes, and removing some spurious\n`[pred .. => ..]` reserved notation.\n** Fixed parsing precedence and format of `<hidden n>` notation, and\ndeclared and put it in an explicit `ssr_scope`.\n** Used module-and-functor idiom to ensure that the `simpl_pred T >-\npred T` _and_ `simpl_pred T >-> {pred T}` coercions are realised by the\n_same_ Gallina constant.\n** Updated `CREDITS`.\nThe policy implied by this PR: that `{pred T}` should systematically\nbe used as the generic collective predicate type, was implemented in MathComp\nmath-comp/math-comp#237. As a result  `simpl_pred >-> pred_sort` coercions\nbecame more frequent, as it turned out they were not, as incorrectly stated\nin `ssrbool` internal comments, impossible: while the `simplPredType`\ncanonical instance does solve all `simpl_pred T =~= pred_sort ?pT`\ninstances, it does _not_ solve `simpl_pred T =~= {pred T}`, and so the\ncoercion will be used in that case. However it appeared that having two\ndifferent coercion constants confused the SSReflect keyed matching\nheuristic, hence the fix introduced here. This has entailed some\nrearrangement of `ssrbool`: the large  `Predicates` section had to be\nbroken up as the module-functor idiom for aliasing coercions cannot be\nused inside a section.\n","author_name":"Georges Gonthier","author_email":"georges.gonthier@inria.fr","authored_date":"2019-04-24T23:02:08.000+02:00","committer_name":"Georges Gonthier","committer_email":"georges.gonthier@inria.fr","committed_date":"2019-04-29T18:12:15.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ab73036c4d5c46759335647b380dde1b1ea0f1ff"},"pipeline":{"id":58995040,"iid":8663,"project_id":6138686,"sha":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","ref":"pr-9995","status":"failed","source":"push","created_at":"2019-04-29T16:27:55.342Z","updated_at":"2019-04-29T18:04:16.591Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/58995040"},"web_url":"https://gitlab.com/coq/coq/-/jobs/204446269","artifacts":[{"file_type":"trace","size":61460,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":204446268,"status":"success","stage":"test","name":"library:ci-fiat-crypto-legacy","ref":"pr-9995","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-04-29T16:27:56.269Z","started_at":"2019-04-29T16:46:19.615Z","finished_at":"2019-04-29T18:04:16.534Z","duration":4676.919821,"queued_duration":0.482458,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","short_id":"ab73036c","created_at":"2019-04-29T18:12:15.000+02:00","parent_ids":["61a1b4c46e4584e9337f9298b5f0053858a03c93"],"title":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface","message":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface\n\n** Changed definition of `simpl_rel` to `T -> `simpl_pred T`, so that\n`inE` will now expand `a \\in r b`, when `r := [rel x y | R]` to `R{b/x,\na/y}`, as the expanding coercion is now only inserted in the _last_\napplication.\nThe old definition made it possible to have a `simpl_rel >-> rel`\ncoercion that does not block expansion, but this can now be achieved\nmore economically with the `Arguments … /.` annotation.\n**  Deleted the `[rel of P]` notation which is no longer needed with\nthe new `simpl_rel` definition, and was broken anyway.\n** Added `relpre f R` definition of functional preimage of a notation.\n** `comp` and `idfun` are now proper definitions, using the `Arguments\n… /.` annotation to specify simplification on application.\n** Added `{pred T}` syntax for the alias of `pred T` in the `pred_sort`\ncoercion class; deleted the `pred_class` alias: one should either\nuse `pred_sort` in `Coercion` declarations, or `{pred T}` in type casts.\nUsed `{pred T}` as appropriate in localised predicate (`{in …, …}`) theory.\nExtended and corrected `pred` coercion internal documentation.\n** Simplified the `predType` structure by removing the redundant\nexplicit `mem_pred` subfield, and replacing it with an interlocked\nprojection; deleted `mkPredType`, now replaced by `PredType`.\n** Added (and extensively documented) a `nonPropType` interface\nmatching types that do _not_ have sort `Prop`, and used it to remove\nthe non-standard maximal implicits annotation on `Some_inj` introduced\nin #6911 by @anton-trumov; included `test-suite` entry for `nonPropType`.\n** Documented the design of the four structures used to control the\nmatching of `inE` and related predicate rewriting lemmas; added `test-suite`\nentry covering the `pred` rewriting control idioms.\n** Used `only printing` annotations to get rid of token concatenation\nhacks.\n** Fixed boolean and general `if b return t then …` notation so that\n`b` is bound in `t`. This is a minor source of incompatibility for\nmisuses of this syntax when `b` is _not_ bound in `t`, and `(if b then\n…) : t` should have been used instead.\n** Reserved all `ssreflect`, `ssrfun` and `ssrbool` notation at the top\nof the file, adding some printing boxes, and removing some spurious\n`[pred .. => ..]` reserved notation.\n** Fixed parsing precedence and format of `<hidden n>` notation, and\ndeclared and put it in an explicit `ssr_scope`.\n** Used module-and-functor idiom to ensure that the `simpl_pred T >-\npred T` _and_ `simpl_pred T >-> {pred T}` coercions are realised by the\n_same_ Gallina constant.\n** Updated `CREDITS`.\nThe policy implied by this PR: that `{pred T}` should systematically\nbe used as the generic collective predicate type, was implemented in MathComp\nmath-comp/math-comp#237. As a result  `simpl_pred >-> pred_sort` coercions\nbecame more frequent, as it turned out they were not, as incorrectly stated\nin `ssrbool` internal comments, impossible: while the `simplPredType`\ncanonical instance does solve all `simpl_pred T =~= pred_sort ?pT`\ninstances, it does _not_ solve `simpl_pred T =~= {pred T}`, and so the\ncoercion will be used in that case. However it appeared that having two\ndifferent coercion constants confused the SSReflect keyed matching\nheuristic, hence the fix introduced here. This has entailed some\nrearrangement of `ssrbool`: the large  `Predicates` section had to be\nbroken up as the module-functor idiom for aliasing coercions cannot be\nused inside a section.\n","author_name":"Georges Gonthier","author_email":"georges.gonthier@inria.fr","authored_date":"2019-04-24T23:02:08.000+02:00","committer_name":"Georges Gonthier","committer_email":"georges.gonthier@inria.fr","committed_date":"2019-04-29T18:12:15.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ab73036c4d5c46759335647b380dde1b1ea0f1ff"},"pipeline":{"id":58995040,"iid":8663,"project_id":6138686,"sha":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","ref":"pr-9995","status":"failed","source":"push","created_at":"2019-04-29T16:27:55.342Z","updated_at":"2019-04-29T18:04:16.591Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/58995040"},"web_url":"https://gitlab.com/coq/coq/-/jobs/204446268","artifacts":[{"file_type":"trace","size":692453,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":204446267,"status":"success","stage":"test","name":"library:ci-fiat-crypto","ref":"pr-9995","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-04-29T16:27:56.234Z","started_at":"2019-04-29T16:46:19.976Z","finished_at":"2019-04-29T17:57:10.211Z","duration":4250.234503,"queued_duration":0.71839,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","short_id":"ab73036c","created_at":"2019-04-29T18:12:15.000+02:00","parent_ids":["61a1b4c46e4584e9337f9298b5f0053858a03c93"],"title":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface","message":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface\n\n** Changed definition of `simpl_rel` to `T -> `simpl_pred T`, so that\n`inE` will now expand `a \\in r b`, when `r := [rel x y | R]` to `R{b/x,\na/y}`, as the expanding coercion is now only inserted in the _last_\napplication.\nThe old definition made it possible to have a `simpl_rel >-> rel`\ncoercion that does not block expansion, but this can now be achieved\nmore economically with the `Arguments … /.` annotation.\n**  Deleted the `[rel of P]` notation which is no longer needed with\nthe new `simpl_rel` definition, and was broken anyway.\n** Added `relpre f R` definition of functional preimage of a notation.\n** `comp` and `idfun` are now proper definitions, using the `Arguments\n… /.` annotation to specify simplification on application.\n** Added `{pred T}` syntax for the alias of `pred T` in the `pred_sort`\ncoercion class; deleted the `pred_class` alias: one should either\nuse `pred_sort` in `Coercion` declarations, or `{pred T}` in type casts.\nUsed `{pred T}` as appropriate in localised predicate (`{in …, …}`) theory.\nExtended and corrected `pred` coercion internal documentation.\n** Simplified the `predType` structure by removing the redundant\nexplicit `mem_pred` subfield, and replacing it with an interlocked\nprojection; deleted `mkPredType`, now replaced by `PredType`.\n** Added (and extensively documented) a `nonPropType` interface\nmatching types that do _not_ have sort `Prop`, and used it to remove\nthe non-standard maximal implicits annotation on `Some_inj` introduced\nin #6911 by @anton-trumov; included `test-suite` entry for `nonPropType`.\n** Documented the design of the four structures used to control the\nmatching of `inE` and related predicate rewriting lemmas; added `test-suite`\nentry covering the `pred` rewriting control idioms.\n** Used `only printing` annotations to get rid of token concatenation\nhacks.\n** Fixed boolean and general `if b return t then …` notation so that\n`b` is bound in `t`. This is a minor source of incompatibility for\nmisuses of this syntax when `b` is _not_ bound in `t`, and `(if b then\n…) : t` should have been used instead.\n** Reserved all `ssreflect`, `ssrfun` and `ssrbool` notation at the top\nof the file, adding some printing boxes, and removing some spurious\n`[pred .. => ..]` reserved notation.\n** Fixed parsing precedence and format of `<hidden n>` notation, and\ndeclared and put it in an explicit `ssr_scope`.\n** Used module-and-functor idiom to ensure that the `simpl_pred T >-\npred T` _and_ `simpl_pred T >-> {pred T}` coercions are realised by the\n_same_ Gallina constant.\n** Updated `CREDITS`.\nThe policy implied by this PR: that `{pred T}` should systematically\nbe used as the generic collective predicate type, was implemented in MathComp\nmath-comp/math-comp#237. As a result  `simpl_pred >-> pred_sort` coercions\nbecame more frequent, as it turned out they were not, as incorrectly stated\nin `ssrbool` internal comments, impossible: while the `simplPredType`\ncanonical instance does solve all `simpl_pred T =~= pred_sort ?pT`\ninstances, it does _not_ solve `simpl_pred T =~= {pred T}`, and so the\ncoercion will be used in that case. However it appeared that having two\ndifferent coercion constants confused the SSReflect keyed matching\nheuristic, hence the fix introduced here. This has entailed some\nrearrangement of `ssrbool`: the large  `Predicates` section had to be\nbroken up as the module-functor idiom for aliasing coercions cannot be\nused inside a section.\n","author_name":"Georges Gonthier","author_email":"georges.gonthier@inria.fr","authored_date":"2019-04-24T23:02:08.000+02:00","committer_name":"Georges Gonthier","committer_email":"georges.gonthier@inria.fr","committed_date":"2019-04-29T18:12:15.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ab73036c4d5c46759335647b380dde1b1ea0f1ff"},"pipeline":{"id":58995040,"iid":8663,"project_id":6138686,"sha":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","ref":"pr-9995","status":"failed","source":"push","created_at":"2019-04-29T16:27:55.342Z","updated_at":"2019-04-29T18:04:16.591Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/58995040"},"web_url":"https://gitlab.com/coq/coq/-/jobs/204446267","artifacts":[{"file_type":"trace","size":315451,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":204446266,"status":"failed","stage":"test","name":"library:ci-fcsl-pcm","ref":"pr-9995","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-04-29T16:27:56.195Z","started_at":"2019-04-29T16:46:19.932Z","finished_at":"2019-04-29T16:49:00.363Z","duration":160.430529,"queued_duration":0.554207,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","short_id":"ab73036c","created_at":"2019-04-29T18:12:15.000+02:00","parent_ids":["61a1b4c46e4584e9337f9298b5f0053858a03c93"],"title":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface","message":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface\n\n** Changed definition of `simpl_rel` to `T -> `simpl_pred T`, so that\n`inE` will now expand `a \\in r b`, when `r := [rel x y | R]` to `R{b/x,\na/y}`, as the expanding coercion is now only inserted in the _last_\napplication.\nThe old definition made it possible to have a `simpl_rel >-> rel`\ncoercion that does not block expansion, but this can now be achieved\nmore economically with the `Arguments … /.` annotation.\n**  Deleted the `[rel of P]` notation which is no longer needed with\nthe new `simpl_rel` definition, and was broken anyway.\n** Added `relpre f R` definition of functional preimage of a notation.\n** `comp` and `idfun` are now proper definitions, using the `Arguments\n… /.` annotation to specify simplification on application.\n** Added `{pred T}` syntax for the alias of `pred T` in the `pred_sort`\ncoercion class; deleted the `pred_class` alias: one should either\nuse `pred_sort` in `Coercion` declarations, or `{pred T}` in type casts.\nUsed `{pred T}` as appropriate in localised predicate (`{in …, …}`) theory.\nExtended and corrected `pred` coercion internal documentation.\n** Simplified the `predType` structure by removing the redundant\nexplicit `mem_pred` subfield, and replacing it with an interlocked\nprojection; deleted `mkPredType`, now replaced by `PredType`.\n** Added (and extensively documented) a `nonPropType` interface\nmatching types that do _not_ have sort `Prop`, and used it to remove\nthe non-standard maximal implicits annotation on `Some_inj` introduced\nin #6911 by @anton-trumov; included `test-suite` entry for `nonPropType`.\n** Documented the design of the four structures used to control the\nmatching of `inE` and related predicate rewriting lemmas; added `test-suite`\nentry covering the `pred` rewriting control idioms.\n** Used `only printing` annotations to get rid of token concatenation\nhacks.\n** Fixed boolean and general `if b return t then …` notation so that\n`b` is bound in `t`. This is a minor source of incompatibility for\nmisuses of this syntax when `b` is _not_ bound in `t`, and `(if b then\n…) : t` should have been used instead.\n** Reserved all `ssreflect`, `ssrfun` and `ssrbool` notation at the top\nof the file, adding some printing boxes, and removing some spurious\n`[pred .. => ..]` reserved notation.\n** Fixed parsing precedence and format of `<hidden n>` notation, and\ndeclared and put it in an explicit `ssr_scope`.\n** Used module-and-functor idiom to ensure that the `simpl_pred T >-\npred T` _and_ `simpl_pred T >-> {pred T}` coercions are realised by the\n_same_ Gallina constant.\n** Updated `CREDITS`.\nThe policy implied by this PR: that `{pred T}` should systematically\nbe used as the generic collective predicate type, was implemented in MathComp\nmath-comp/math-comp#237. As a result  `simpl_pred >-> pred_sort` coercions\nbecame more frequent, as it turned out they were not, as incorrectly stated\nin `ssrbool` internal comments, impossible: while the `simplPredType`\ncanonical instance does solve all `simpl_pred T =~= pred_sort ?pT`\ninstances, it does _not_ solve `simpl_pred T =~= {pred T}`, and so the\ncoercion will be used in that case. However it appeared that having two\ndifferent coercion constants confused the SSReflect keyed matching\nheuristic, hence the fix introduced here. This has entailed some\nrearrangement of `ssrbool`: the large  `Predicates` section had to be\nbroken up as the module-functor idiom for aliasing coercions cannot be\nused inside a section.\n","author_name":"Georges Gonthier","author_email":"georges.gonthier@inria.fr","authored_date":"2019-04-24T23:02:08.000+02:00","committer_name":"Georges Gonthier","committer_email":"georges.gonthier@inria.fr","committed_date":"2019-04-29T18:12:15.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ab73036c4d5c46759335647b380dde1b1ea0f1ff"},"pipeline":{"id":58995040,"iid":8663,"project_id":6138686,"sha":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","ref":"pr-9995","status":"failed","source":"push","created_at":"2019-04-29T16:27:55.342Z","updated_at":"2019-04-29T18:04:16.591Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/58995040"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/204446266","artifacts":[{"file_type":"trace","size":95752,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":204446265,"status":"success","stage":"test","name":"library:ci-cross-crypto","ref":"pr-9995","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-04-29T16:27:56.159Z","started_at":"2019-04-29T16:46:19.666Z","finished_at":"2019-04-29T17:26:54.255Z","duration":2434.589405,"queued_duration":0.167374,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","short_id":"ab73036c","created_at":"2019-04-29T18:12:15.000+02:00","parent_ids":["61a1b4c46e4584e9337f9298b5f0053858a03c93"],"title":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface","message":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface\n\n** Changed definition of `simpl_rel` to `T -> `simpl_pred T`, so that\n`inE` will now expand `a \\in r b`, when `r := [rel x y | R]` to `R{b/x,\na/y}`, as the expanding coercion is now only inserted in the _last_\napplication.\nThe old definition made it possible to have a `simpl_rel >-> rel`\ncoercion that does not block expansion, but this can now be achieved\nmore economically with the `Arguments … /.` annotation.\n**  Deleted the `[rel of P]` notation which is no longer needed with\nthe new `simpl_rel` definition, and was broken anyway.\n** Added `relpre f R` definition of functional preimage of a notation.\n** `comp` and `idfun` are now proper definitions, using the `Arguments\n… /.` annotation to specify simplification on application.\n** Added `{pred T}` syntax for the alias of `pred T` in the `pred_sort`\ncoercion class; deleted the `pred_class` alias: one should either\nuse `pred_sort` in `Coercion` declarations, or `{pred T}` in type casts.\nUsed `{pred T}` as appropriate in localised predicate (`{in …, …}`) theory.\nExtended and corrected `pred` coercion internal documentation.\n** Simplified the `predType` structure by removing the redundant\nexplicit `mem_pred` subfield, and replacing it with an interlocked\nprojection; deleted `mkPredType`, now replaced by `PredType`.\n** Added (and extensively documented) a `nonPropType` interface\nmatching types that do _not_ have sort `Prop`, and used it to remove\nthe non-standard maximal implicits annotation on `Some_inj` introduced\nin #6911 by @anton-trumov; included `test-suite` entry for `nonPropType`.\n** Documented the design of the four structures used to control the\nmatching of `inE` and related predicate rewriting lemmas; added `test-suite`\nentry covering the `pred` rewriting control idioms.\n** Used `only printing` annotations to get rid of token concatenation\nhacks.\n** Fixed boolean and general `if b return t then …` notation so that\n`b` is bound in `t`. This is a minor source of incompatibility for\nmisuses of this syntax when `b` is _not_ bound in `t`, and `(if b then\n…) : t` should have been used instead.\n** Reserved all `ssreflect`, `ssrfun` and `ssrbool` notation at the top\nof the file, adding some printing boxes, and removing some spurious\n`[pred .. => ..]` reserved notation.\n** Fixed parsing precedence and format of `<hidden n>` notation, and\ndeclared and put it in an explicit `ssr_scope`.\n** Used module-and-functor idiom to ensure that the `simpl_pred T >-\npred T` _and_ `simpl_pred T >-> {pred T}` coercions are realised by the\n_same_ Gallina constant.\n** Updated `CREDITS`.\nThe policy implied by this PR: that `{pred T}` should systematically\nbe used as the generic collective predicate type, was implemented in MathComp\nmath-comp/math-comp#237. As a result  `simpl_pred >-> pred_sort` coercions\nbecame more frequent, as it turned out they were not, as incorrectly stated\nin `ssrbool` internal comments, impossible: while the `simplPredType`\ncanonical instance does solve all `simpl_pred T =~= pred_sort ?pT`\ninstances, it does _not_ solve `simpl_pred T =~= {pred T}`, and so the\ncoercion will be used in that case. However it appeared that having two\ndifferent coercion constants confused the SSReflect keyed matching\nheuristic, hence the fix introduced here. This has entailed some\nrearrangement of `ssrbool`: the large  `Predicates` section had to be\nbroken up as the module-functor idiom for aliasing coercions cannot be\nused inside a section.\n","author_name":"Georges Gonthier","author_email":"georges.gonthier@inria.fr","authored_date":"2019-04-24T23:02:08.000+02:00","committer_name":"Georges Gonthier","committer_email":"georges.gonthier@inria.fr","committed_date":"2019-04-29T18:12:15.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ab73036c4d5c46759335647b380dde1b1ea0f1ff"},"pipeline":{"id":58995040,"iid":8663,"project_id":6138686,"sha":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","ref":"pr-9995","status":"failed","source":"push","created_at":"2019-04-29T16:27:55.342Z","updated_at":"2019-04-29T18:04:16.591Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/58995040"},"web_url":"https://gitlab.com/coq/coq/-/jobs/204446265","artifacts":[{"file_type":"trace","size":80709,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":204446264,"status":"failed","stage":"test","name":"library:ci-coquelicot","ref":"pr-9995","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-04-29T16:27:56.116Z","started_at":"2019-04-29T16:46:20.270Z","finished_at":"2019-04-29T16:49:04.901Z","duration":164.63044,"queued_duration":0.650888,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","short_id":"ab73036c","created_at":"2019-04-29T18:12:15.000+02:00","parent_ids":["61a1b4c46e4584e9337f9298b5f0053858a03c93"],"title":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface","message":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface\n\n** Changed definition of `simpl_rel` to `T -> `simpl_pred T`, so that\n`inE` will now expand `a \\in r b`, when `r := [rel x y | R]` to `R{b/x,\na/y}`, as the expanding coercion is now only inserted in the _last_\napplication.\nThe old definition made it possible to have a `simpl_rel >-> rel`\ncoercion that does not block expansion, but this can now be achieved\nmore economically with the `Arguments … /.` annotation.\n**  Deleted the `[rel of P]` notation which is no longer needed with\nthe new `simpl_rel` definition, and was broken anyway.\n** Added `relpre f R` definition of functional preimage of a notation.\n** `comp` and `idfun` are now proper definitions, using the `Arguments\n… /.` annotation to specify simplification on application.\n** Added `{pred T}` syntax for the alias of `pred T` in the `pred_sort`\ncoercion class; deleted the `pred_class` alias: one should either\nuse `pred_sort` in `Coercion` declarations, or `{pred T}` in type casts.\nUsed `{pred T}` as appropriate in localised predicate (`{in …, …}`) theory.\nExtended and corrected `pred` coercion internal documentation.\n** Simplified the `predType` structure by removing the redundant\nexplicit `mem_pred` subfield, and replacing it with an interlocked\nprojection; deleted `mkPredType`, now replaced by `PredType`.\n** Added (and extensively documented) a `nonPropType` interface\nmatching types that do _not_ have sort `Prop`, and used it to remove\nthe non-standard maximal implicits annotation on `Some_inj` introduced\nin #6911 by @anton-trumov; included `test-suite` entry for `nonPropType`.\n** Documented the design of the four structures used to control the\nmatching of `inE` and related predicate rewriting lemmas; added `test-suite`\nentry covering the `pred` rewriting control idioms.\n** Used `only printing` annotations to get rid of token concatenation\nhacks.\n** Fixed boolean and general `if b return t then …` notation so that\n`b` is bound in `t`. This is a minor source of incompatibility for\nmisuses of this syntax when `b` is _not_ bound in `t`, and `(if b then\n…) : t` should have been used instead.\n** Reserved all `ssreflect`, `ssrfun` and `ssrbool` notation at the top\nof the file, adding some printing boxes, and removing some spurious\n`[pred .. => ..]` reserved notation.\n** Fixed parsing precedence and format of `<hidden n>` notation, and\ndeclared and put it in an explicit `ssr_scope`.\n** Used module-and-functor idiom to ensure that the `simpl_pred T >-\npred T` _and_ `simpl_pred T >-> {pred T}` coercions are realised by the\n_same_ Gallina constant.\n** Updated `CREDITS`.\nThe policy implied by this PR: that `{pred T}` should systematically\nbe used as the generic collective predicate type, was implemented in MathComp\nmath-comp/math-comp#237. As a result  `simpl_pred >-> pred_sort` coercions\nbecame more frequent, as it turned out they were not, as incorrectly stated\nin `ssrbool` internal comments, impossible: while the `simplPredType`\ncanonical instance does solve all `simpl_pred T =~= pred_sort ?pT`\ninstances, it does _not_ solve `simpl_pred T =~= {pred T}`, and so the\ncoercion will be used in that case. However it appeared that having two\ndifferent coercion constants confused the SSReflect keyed matching\nheuristic, hence the fix introduced here. This has entailed some\nrearrangement of `ssrbool`: the large  `Predicates` section had to be\nbroken up as the module-functor idiom for aliasing coercions cannot be\nused inside a section.\n","author_name":"Georges Gonthier","author_email":"georges.gonthier@inria.fr","authored_date":"2019-04-24T23:02:08.000+02:00","committer_name":"Georges Gonthier","committer_email":"georges.gonthier@inria.fr","committed_date":"2019-04-29T18:12:15.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ab73036c4d5c46759335647b380dde1b1ea0f1ff"},"pipeline":{"id":58995040,"iid":8663,"project_id":6138686,"sha":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","ref":"pr-9995","status":"failed","source":"push","created_at":"2019-04-29T16:27:55.342Z","updated_at":"2019-04-29T18:04:16.591Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/58995040"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/204446264","artifacts":[{"file_type":"trace","size":95699,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":204446263,"status":"success","stage":"test","name":"library:ci-compcert","ref":"pr-9995","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-04-29T16:27:56.037Z","started_at":"2019-04-29T16:46:20.344Z","finished_at":"2019-04-29T17:15:06.234Z","duration":1725.890522,"queued_duration":0.548207,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","short_id":"ab73036c","created_at":"2019-04-29T18:12:15.000+02:00","parent_ids":["61a1b4c46e4584e9337f9298b5f0053858a03c93"],"title":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface","message":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface\n\n** Changed definition of `simpl_rel` to `T -> `simpl_pred T`, so that\n`inE` will now expand `a \\in r b`, when `r := [rel x y | R]` to `R{b/x,\na/y}`, as the expanding coercion is now only inserted in the _last_\napplication.\nThe old definition made it possible to have a `simpl_rel >-> rel`\ncoercion that does not block expansion, but this can now be achieved\nmore economically with the `Arguments … /.` annotation.\n**  Deleted the `[rel of P]` notation which is no longer needed with\nthe new `simpl_rel` definition, and was broken anyway.\n** Added `relpre f R` definition of functional preimage of a notation.\n** `comp` and `idfun` are now proper definitions, using the `Arguments\n… /.` annotation to specify simplification on application.\n** Added `{pred T}` syntax for the alias of `pred T` in the `pred_sort`\ncoercion class; deleted the `pred_class` alias: one should either\nuse `pred_sort` in `Coercion` declarations, or `{pred T}` in type casts.\nUsed `{pred T}` as appropriate in localised predicate (`{in …, …}`) theory.\nExtended and corrected `pred` coercion internal documentation.\n** Simplified the `predType` structure by removing the redundant\nexplicit `mem_pred` subfield, and replacing it with an interlocked\nprojection; deleted `mkPredType`, now replaced by `PredType`.\n** Added (and extensively documented) a `nonPropType` interface\nmatching types that do _not_ have sort `Prop`, and used it to remove\nthe non-standard maximal implicits annotation on `Some_inj` introduced\nin #6911 by @anton-trumov; included `test-suite` entry for `nonPropType`.\n** Documented the design of the four structures used to control the\nmatching of `inE` and related predicate rewriting lemmas; added `test-suite`\nentry covering the `pred` rewriting control idioms.\n** Used `only printing` annotations to get rid of token concatenation\nhacks.\n** Fixed boolean and general `if b return t then …` notation so that\n`b` is bound in `t`. This is a minor source of incompatibility for\nmisuses of this syntax when `b` is _not_ bound in `t`, and `(if b then\n…) : t` should have been used instead.\n** Reserved all `ssreflect`, `ssrfun` and `ssrbool` notation at the top\nof the file, adding some printing boxes, and removing some spurious\n`[pred .. => ..]` reserved notation.\n** Fixed parsing precedence and format of `<hidden n>` notation, and\ndeclared and put it in an explicit `ssr_scope`.\n** Used module-and-functor idiom to ensure that the `simpl_pred T >-\npred T` _and_ `simpl_pred T >-> {pred T}` coercions are realised by the\n_same_ Gallina constant.\n** Updated `CREDITS`.\nThe policy implied by this PR: that `{pred T}` should systematically\nbe used as the generic collective predicate type, was implemented in MathComp\nmath-comp/math-comp#237. As a result  `simpl_pred >-> pred_sort` coercions\nbecame more frequent, as it turned out they were not, as incorrectly stated\nin `ssrbool` internal comments, impossible: while the `simplPredType`\ncanonical instance does solve all `simpl_pred T =~= pred_sort ?pT`\ninstances, it does _not_ solve `simpl_pred T =~= {pred T}`, and so the\ncoercion will be used in that case. However it appeared that having two\ndifferent coercion constants confused the SSReflect keyed matching\nheuristic, hence the fix introduced here. This has entailed some\nrearrangement of `ssrbool`: the large  `Predicates` section had to be\nbroken up as the module-functor idiom for aliasing coercions cannot be\nused inside a section.\n","author_name":"Georges Gonthier","author_email":"georges.gonthier@inria.fr","authored_date":"2019-04-24T23:02:08.000+02:00","committer_name":"Georges Gonthier","committer_email":"georges.gonthier@inria.fr","committed_date":"2019-04-29T18:12:15.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ab73036c4d5c46759335647b380dde1b1ea0f1ff"},"pipeline":{"id":58995040,"iid":8663,"project_id":6138686,"sha":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","ref":"pr-9995","status":"failed","source":"push","created_at":"2019-04-29T16:27:55.342Z","updated_at":"2019-04-29T18:04:16.591Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/58995040"},"web_url":"https://gitlab.com/coq/coq/-/jobs/204446263","artifacts":[{"file_type":"trace","size":4194360,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":204446261,"status":"success","stage":"test","name":"library:ci-color","ref":"pr-9995","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-04-29T16:27:56.006Z","started_at":"2019-04-29T16:46:20.071Z","finished_at":"2019-04-29T17:08:50.732Z","duration":1350.661056,"queued_duration":0.089244,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","short_id":"ab73036c","created_at":"2019-04-29T18:12:15.000+02:00","parent_ids":["61a1b4c46e4584e9337f9298b5f0053858a03c93"],"title":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface","message":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface\n\n** Changed definition of `simpl_rel` to `T -> `simpl_pred T`, so that\n`inE` will now expand `a \\in r b`, when `r := [rel x y | R]` to `R{b/x,\na/y}`, as the expanding coercion is now only inserted in the _last_\napplication.\nThe old definition made it possible to have a `simpl_rel >-> rel`\ncoercion that does not block expansion, but this can now be achieved\nmore economically with the `Arguments … /.` annotation.\n**  Deleted the `[rel of P]` notation which is no longer needed with\nthe new `simpl_rel` definition, and was broken anyway.\n** Added `relpre f R` definition of functional preimage of a notation.\n** `comp` and `idfun` are now proper definitions, using the `Arguments\n… /.` annotation to specify simplification on application.\n** Added `{pred T}` syntax for the alias of `pred T` in the `pred_sort`\ncoercion class; deleted the `pred_class` alias: one should either\nuse `pred_sort` in `Coercion` declarations, or `{pred T}` in type casts.\nUsed `{pred T}` as appropriate in localised predicate (`{in …, …}`) theory.\nExtended and corrected `pred` coercion internal documentation.\n** Simplified the `predType` structure by removing the redundant\nexplicit `mem_pred` subfield, and replacing it with an interlocked\nprojection; deleted `mkPredType`, now replaced by `PredType`.\n** Added (and extensively documented) a `nonPropType` interface\nmatching types that do _not_ have sort `Prop`, and used it to remove\nthe non-standard maximal implicits annotation on `Some_inj` introduced\nin #6911 by @anton-trumov; included `test-suite` entry for `nonPropType`.\n** Documented the design of the four structures used to control the\nmatching of `inE` and related predicate rewriting lemmas; added `test-suite`\nentry covering the `pred` rewriting control idioms.\n** Used `only printing` annotations to get rid of token concatenation\nhacks.\n** Fixed boolean and general `if b return t then …` notation so that\n`b` is bound in `t`. This is a minor source of incompatibility for\nmisuses of this syntax when `b` is _not_ bound in `t`, and `(if b then\n…) : t` should have been used instead.\n** Reserved all `ssreflect`, `ssrfun` and `ssrbool` notation at the top\nof the file, adding some printing boxes, and removing some spurious\n`[pred .. => ..]` reserved notation.\n** Fixed parsing precedence and format of `<hidden n>` notation, and\ndeclared and put it in an explicit `ssr_scope`.\n** Used module-and-functor idiom to ensure that the `simpl_pred T >-\npred T` _and_ `simpl_pred T >-> {pred T}` coercions are realised by the\n_same_ Gallina constant.\n** Updated `CREDITS`.\nThe policy implied by this PR: that `{pred T}` should systematically\nbe used as the generic collective predicate type, was implemented in MathComp\nmath-comp/math-comp#237. As a result  `simpl_pred >-> pred_sort` coercions\nbecame more frequent, as it turned out they were not, as incorrectly stated\nin `ssrbool` internal comments, impossible: while the `simplPredType`\ncanonical instance does solve all `simpl_pred T =~= pred_sort ?pT`\ninstances, it does _not_ solve `simpl_pred T =~= {pred T}`, and so the\ncoercion will be used in that case. However it appeared that having two\ndifferent coercion constants confused the SSReflect keyed matching\nheuristic, hence the fix introduced here. This has entailed some\nrearrangement of `ssrbool`: the large  `Predicates` section had to be\nbroken up as the module-functor idiom for aliasing coercions cannot be\nused inside a section.\n","author_name":"Georges Gonthier","author_email":"georges.gonthier@inria.fr","authored_date":"2019-04-24T23:02:08.000+02:00","committer_name":"Georges Gonthier","committer_email":"georges.gonthier@inria.fr","committed_date":"2019-04-29T18:12:15.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ab73036c4d5c46759335647b380dde1b1ea0f1ff"},"pipeline":{"id":58995040,"iid":8663,"project_id":6138686,"sha":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","ref":"pr-9995","status":"failed","source":"push","created_at":"2019-04-29T16:27:55.342Z","updated_at":"2019-04-29T18:04:16.591Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/58995040"},"web_url":"https://gitlab.com/coq/coq/-/jobs/204446261","artifacts":[{"file_type":"trace","size":258428,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":204446260,"status":"success","stage":"test","name":"library:ci-bedrock2","ref":"pr-9995","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-04-29T16:27:55.975Z","started_at":"2019-04-29T16:46:21.002Z","finished_at":"2019-04-29T17:50:38.783Z","duration":3857.780867,"queued_duration":0.934272,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","short_id":"ab73036c","created_at":"2019-04-29T18:12:15.000+02:00","parent_ids":["61a1b4c46e4584e9337f9298b5f0053858a03c93"],"title":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface","message":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface\n\n** Changed definition of `simpl_rel` to `T -> `simpl_pred T`, so that\n`inE` will now expand `a \\in r b`, when `r := [rel x y | R]` to `R{b/x,\na/y}`, as the expanding coercion is now only inserted in the _last_\napplication.\nThe old definition made it possible to have a `simpl_rel >-> rel`\ncoercion that does not block expansion, but this can now be achieved\nmore economically with the `Arguments … /.` annotation.\n**  Deleted the `[rel of P]` notation which is no longer needed with\nthe new `simpl_rel` definition, and was broken anyway.\n** Added `relpre f R` definition of functional preimage of a notation.\n** `comp` and `idfun` are now proper definitions, using the `Arguments\n… /.` annotation to specify simplification on application.\n** Added `{pred T}` syntax for the alias of `pred T` in the `pred_sort`\ncoercion class; deleted the `pred_class` alias: one should either\nuse `pred_sort` in `Coercion` declarations, or `{pred T}` in type casts.\nUsed `{pred T}` as appropriate in localised predicate (`{in …, …}`) theory.\nExtended and corrected `pred` coercion internal documentation.\n** Simplified the `predType` structure by removing the redundant\nexplicit `mem_pred` subfield, and replacing it with an interlocked\nprojection; deleted `mkPredType`, now replaced by `PredType`.\n** Added (and extensively documented) a `nonPropType` interface\nmatching types that do _not_ have sort `Prop`, and used it to remove\nthe non-standard maximal implicits annotation on `Some_inj` introduced\nin #6911 by @anton-trumov; included `test-suite` entry for `nonPropType`.\n** Documented the design of the four structures used to control the\nmatching of `inE` and related predicate rewriting lemmas; added `test-suite`\nentry covering the `pred` rewriting control idioms.\n** Used `only printing` annotations to get rid of token concatenation\nhacks.\n** Fixed boolean and general `if b return t then …` notation so that\n`b` is bound in `t`. This is a minor source of incompatibility for\nmisuses of this syntax when `b` is _not_ bound in `t`, and `(if b then\n…) : t` should have been used instead.\n** Reserved all `ssreflect`, `ssrfun` and `ssrbool` notation at the top\nof the file, adding some printing boxes, and removing some spurious\n`[pred .. => ..]` reserved notation.\n** Fixed parsing precedence and format of `<hidden n>` notation, and\ndeclared and put it in an explicit `ssr_scope`.\n** Used module-and-functor idiom to ensure that the `simpl_pred T >-\npred T` _and_ `simpl_pred T >-> {pred T}` coercions are realised by the\n_same_ Gallina constant.\n** Updated `CREDITS`.\nThe policy implied by this PR: that `{pred T}` should systematically\nbe used as the generic collective predicate type, was implemented in MathComp\nmath-comp/math-comp#237. As a result  `simpl_pred >-> pred_sort` coercions\nbecame more frequent, as it turned out they were not, as incorrectly stated\nin `ssrbool` internal comments, impossible: while the `simplPredType`\ncanonical instance does solve all `simpl_pred T =~= pred_sort ?pT`\ninstances, it does _not_ solve `simpl_pred T =~= {pred T}`, and so the\ncoercion will be used in that case. However it appeared that having two\ndifferent coercion constants confused the SSReflect keyed matching\nheuristic, hence the fix introduced here. This has entailed some\nrearrangement of `ssrbool`: the large  `Predicates` section had to be\nbroken up as the module-functor idiom for aliasing coercions cannot be\nused inside a section.\n","author_name":"Georges Gonthier","author_email":"georges.gonthier@inria.fr","authored_date":"2019-04-24T23:02:08.000+02:00","committer_name":"Georges Gonthier","committer_email":"georges.gonthier@inria.fr","committed_date":"2019-04-29T18:12:15.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ab73036c4d5c46759335647b380dde1b1ea0f1ff"},"pipeline":{"id":58995040,"iid":8663,"project_id":6138686,"sha":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","ref":"pr-9995","status":"failed","source":"push","created_at":"2019-04-29T16:27:55.342Z","updated_at":"2019-04-29T18:04:16.591Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/58995040"},"web_url":"https://gitlab.com/coq/coq/-/jobs/204446260","artifacts":[{"file_type":"trace","size":201611,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":204446259,"status":"success","stage":"test","name":"library:ci-argosy","ref":"pr-9995","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-04-29T16:27:55.950Z","started_at":"2019-04-29T16:46:20.648Z","finished_at":"2019-04-29T16:50:09.770Z","duration":229.122086,"queued_duration":0.489532,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","short_id":"ab73036c","created_at":"2019-04-29T18:12:15.000+02:00","parent_ids":["61a1b4c46e4584e9337f9298b5f0053858a03c93"],"title":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface","message":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface\n\n** Changed definition of `simpl_rel` to `T -> `simpl_pred T`, so that\n`inE` will now expand `a \\in r b`, when `r := [rel x y | R]` to `R{b/x,\na/y}`, as the expanding coercion is now only inserted in the _last_\napplication.\nThe old definition made it possible to have a `simpl_rel >-> rel`\ncoercion that does not block expansion, but this can now be achieved\nmore economically with the `Arguments … /.` annotation.\n**  Deleted the `[rel of P]` notation which is no longer needed with\nthe new `simpl_rel` definition, and was broken anyway.\n** Added `relpre f R` definition of functional preimage of a notation.\n** `comp` and `idfun` are now proper definitions, using the `Arguments\n… /.` annotation to specify simplification on application.\n** Added `{pred T}` syntax for the alias of `pred T` in the `pred_sort`\ncoercion class; deleted the `pred_class` alias: one should either\nuse `pred_sort` in `Coercion` declarations, or `{pred T}` in type casts.\nUsed `{pred T}` as appropriate in localised predicate (`{in …, …}`) theory.\nExtended and corrected `pred` coercion internal documentation.\n** Simplified the `predType` structure by removing the redundant\nexplicit `mem_pred` subfield, and replacing it with an interlocked\nprojection; deleted `mkPredType`, now replaced by `PredType`.\n** Added (and extensively documented) a `nonPropType` interface\nmatching types that do _not_ have sort `Prop`, and used it to remove\nthe non-standard maximal implicits annotation on `Some_inj` introduced\nin #6911 by @anton-trumov; included `test-suite` entry for `nonPropType`.\n** Documented the design of the four structures used to control the\nmatching of `inE` and related predicate rewriting lemmas; added `test-suite`\nentry covering the `pred` rewriting control idioms.\n** Used `only printing` annotations to get rid of token concatenation\nhacks.\n** Fixed boolean and general `if b return t then …` notation so that\n`b` is bound in `t`. This is a minor source of incompatibility for\nmisuses of this syntax when `b` is _not_ bound in `t`, and `(if b then\n…) : t` should have been used instead.\n** Reserved all `ssreflect`, `ssrfun` and `ssrbool` notation at the top\nof the file, adding some printing boxes, and removing some spurious\n`[pred .. => ..]` reserved notation.\n** Fixed parsing precedence and format of `<hidden n>` notation, and\ndeclared and put it in an explicit `ssr_scope`.\n** Used module-and-functor idiom to ensure that the `simpl_pred T >-\npred T` _and_ `simpl_pred T >-> {pred T}` coercions are realised by the\n_same_ Gallina constant.\n** Updated `CREDITS`.\nThe policy implied by this PR: that `{pred T}` should systematically\nbe used as the generic collective predicate type, was implemented in MathComp\nmath-comp/math-comp#237. As a result  `simpl_pred >-> pred_sort` coercions\nbecame more frequent, as it turned out they were not, as incorrectly stated\nin `ssrbool` internal comments, impossible: while the `simplPredType`\ncanonical instance does solve all `simpl_pred T =~= pred_sort ?pT`\ninstances, it does _not_ solve `simpl_pred T =~= {pred T}`, and so the\ncoercion will be used in that case. However it appeared that having two\ndifferent coercion constants confused the SSReflect keyed matching\nheuristic, hence the fix introduced here. This has entailed some\nrearrangement of `ssrbool`: the large  `Predicates` section had to be\nbroken up as the module-functor idiom for aliasing coercions cannot be\nused inside a section.\n","author_name":"Georges Gonthier","author_email":"georges.gonthier@inria.fr","authored_date":"2019-04-24T23:02:08.000+02:00","committer_name":"Georges Gonthier","committer_email":"georges.gonthier@inria.fr","committed_date":"2019-04-29T18:12:15.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ab73036c4d5c46759335647b380dde1b1ea0f1ff"},"pipeline":{"id":58995040,"iid":8663,"project_id":6138686,"sha":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","ref":"pr-9995","status":"failed","source":"push","created_at":"2019-04-29T16:27:55.342Z","updated_at":"2019-04-29T18:04:16.591Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/58995040"},"web_url":"https://gitlab.com/coq/coq/-/jobs/204446259","artifacts":[{"file_type":"trace","size":32291,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":204446258,"status":"success","stage":"test","name":"validate:quick","ref":"pr-9995","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-04-29T16:27:55.920Z","started_at":"2019-04-29T16:46:20.466Z","finished_at":"2019-04-29T16:54:28.475Z","duration":488.008889,"queued_duration":0.223897,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","short_id":"ab73036c","created_at":"2019-04-29T18:12:15.000+02:00","parent_ids":["61a1b4c46e4584e9337f9298b5f0053858a03c93"],"title":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface","message":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface\n\n** Changed definition of `simpl_rel` to `T -> `simpl_pred T`, so that\n`inE` will now expand `a \\in r b`, when `r := [rel x y | R]` to `R{b/x,\na/y}`, as the expanding coercion is now only inserted in the _last_\napplication.\nThe old definition made it possible to have a `simpl_rel >-> rel`\ncoercion that does not block expansion, but this can now be achieved\nmore economically with the `Arguments … /.` annotation.\n**  Deleted the `[rel of P]` notation which is no longer needed with\nthe new `simpl_rel` definition, and was broken anyway.\n** Added `relpre f R` definition of functional preimage of a notation.\n** `comp` and `idfun` are now proper definitions, using the `Arguments\n… /.` annotation to specify simplification on application.\n** Added `{pred T}` syntax for the alias of `pred T` in the `pred_sort`\ncoercion class; deleted the `pred_class` alias: one should either\nuse `pred_sort` in `Coercion` declarations, or `{pred T}` in type casts.\nUsed `{pred T}` as appropriate in localised predicate (`{in …, …}`) theory.\nExtended and corrected `pred` coercion internal documentation.\n** Simplified the `predType` structure by removing the redundant\nexplicit `mem_pred` subfield, and replacing it with an interlocked\nprojection; deleted `mkPredType`, now replaced by `PredType`.\n** Added (and extensively documented) a `nonPropType` interface\nmatching types that do _not_ have sort `Prop`, and used it to remove\nthe non-standard maximal implicits annotation on `Some_inj` introduced\nin #6911 by @anton-trumov; included `test-suite` entry for `nonPropType`.\n** Documented the design of the four structures used to control the\nmatching of `inE` and related predicate rewriting lemmas; added `test-suite`\nentry covering the `pred` rewriting control idioms.\n** Used `only printing` annotations to get rid of token concatenation\nhacks.\n** Fixed boolean and general `if b return t then …` notation so that\n`b` is bound in `t`. This is a minor source of incompatibility for\nmisuses of this syntax when `b` is _not_ bound in `t`, and `(if b then\n…) : t` should have been used instead.\n** Reserved all `ssreflect`, `ssrfun` and `ssrbool` notation at the top\nof the file, adding some printing boxes, and removing some spurious\n`[pred .. => ..]` reserved notation.\n** Fixed parsing precedence and format of `<hidden n>` notation, and\ndeclared and put it in an explicit `ssr_scope`.\n** Used module-and-functor idiom to ensure that the `simpl_pred T >-\npred T` _and_ `simpl_pred T >-> {pred T}` coercions are realised by the\n_same_ Gallina constant.\n** Updated `CREDITS`.\nThe policy implied by this PR: that `{pred T}` should systematically\nbe used as the generic collective predicate type, was implemented in MathComp\nmath-comp/math-comp#237. As a result  `simpl_pred >-> pred_sort` coercions\nbecame more frequent, as it turned out they were not, as incorrectly stated\nin `ssrbool` internal comments, impossible: while the `simplPredType`\ncanonical instance does solve all `simpl_pred T =~= pred_sort ?pT`\ninstances, it does _not_ solve `simpl_pred T =~= {pred T}`, and so the\ncoercion will be used in that case. However it appeared that having two\ndifferent coercion constants confused the SSReflect keyed matching\nheuristic, hence the fix introduced here. This has entailed some\nrearrangement of `ssrbool`: the large  `Predicates` section had to be\nbroken up as the module-functor idiom for aliasing coercions cannot be\nused inside a section.\n","author_name":"Georges Gonthier","author_email":"georges.gonthier@inria.fr","authored_date":"2019-04-24T23:02:08.000+02:00","committer_name":"Georges Gonthier","committer_email":"georges.gonthier@inria.fr","committed_date":"2019-04-29T18:12:15.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ab73036c4d5c46759335647b380dde1b1ea0f1ff"},"pipeline":{"id":58995040,"iid":8663,"project_id":6138686,"sha":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","ref":"pr-9995","status":"failed","source":"push","created_at":"2019-04-29T16:27:55.342Z","updated_at":"2019-04-29T18:04:16.591Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/58995040"},"web_url":"https://gitlab.com/coq/coq/-/jobs/204446258","artifacts":[{"file_type":"trace","size":58280,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":204446256,"status":"success","stage":"test","name":"validate:edge+flambda","ref":"pr-9995","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-04-29T16:27:55.895Z","started_at":"2019-04-29T16:46:20.937Z","finished_at":"2019-04-29T16:52:29.744Z","duration":368.807038,"queued_duration":0.583961,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","short_id":"ab73036c","created_at":"2019-04-29T18:12:15.000+02:00","parent_ids":["61a1b4c46e4584e9337f9298b5f0053858a03c93"],"title":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface","message":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface\n\n** Changed definition of `simpl_rel` to `T -> `simpl_pred T`, so that\n`inE` will now expand `a \\in r b`, when `r := [rel x y | R]` to `R{b/x,\na/y}`, as the expanding coercion is now only inserted in the _last_\napplication.\nThe old definition made it possible to have a `simpl_rel >-> rel`\ncoercion that does not block expansion, but this can now be achieved\nmore economically with the `Arguments … /.` annotation.\n**  Deleted the `[rel of P]` notation which is no longer needed with\nthe new `simpl_rel` definition, and was broken anyway.\n** Added `relpre f R` definition of functional preimage of a notation.\n** `comp` and `idfun` are now proper definitions, using the `Arguments\n… /.` annotation to specify simplification on application.\n** Added `{pred T}` syntax for the alias of `pred T` in the `pred_sort`\ncoercion class; deleted the `pred_class` alias: one should either\nuse `pred_sort` in `Coercion` declarations, or `{pred T}` in type casts.\nUsed `{pred T}` as appropriate in localised predicate (`{in …, …}`) theory.\nExtended and corrected `pred` coercion internal documentation.\n** Simplified the `predType` structure by removing the redundant\nexplicit `mem_pred` subfield, and replacing it with an interlocked\nprojection; deleted `mkPredType`, now replaced by `PredType`.\n** Added (and extensively documented) a `nonPropType` interface\nmatching types that do _not_ have sort `Prop`, and used it to remove\nthe non-standard maximal implicits annotation on `Some_inj` introduced\nin #6911 by @anton-trumov; included `test-suite` entry for `nonPropType`.\n** Documented the design of the four structures used to control the\nmatching of `inE` and related predicate rewriting lemmas; added `test-suite`\nentry covering the `pred` rewriting control idioms.\n** Used `only printing` annotations to get rid of token concatenation\nhacks.\n** Fixed boolean and general `if b return t then …` notation so that\n`b` is bound in `t`. This is a minor source of incompatibility for\nmisuses of this syntax when `b` is _not_ bound in `t`, and `(if b then\n…) : t` should have been used instead.\n** Reserved all `ssreflect`, `ssrfun` and `ssrbool` notation at the top\nof the file, adding some printing boxes, and removing some spurious\n`[pred .. => ..]` reserved notation.\n** Fixed parsing precedence and format of `<hidden n>` notation, and\ndeclared and put it in an explicit `ssr_scope`.\n** Used module-and-functor idiom to ensure that the `simpl_pred T >-\npred T` _and_ `simpl_pred T >-> {pred T}` coercions are realised by the\n_same_ Gallina constant.\n** Updated `CREDITS`.\nThe policy implied by this PR: that `{pred T}` should systematically\nbe used as the generic collective predicate type, was implemented in MathComp\nmath-comp/math-comp#237. As a result  `simpl_pred >-> pred_sort` coercions\nbecame more frequent, as it turned out they were not, as incorrectly stated\nin `ssrbool` internal comments, impossible: while the `simplPredType`\ncanonical instance does solve all `simpl_pred T =~= pred_sort ?pT`\ninstances, it does _not_ solve `simpl_pred T =~= {pred T}`, and so the\ncoercion will be used in that case. However it appeared that having two\ndifferent coercion constants confused the SSReflect keyed matching\nheuristic, hence the fix introduced here. This has entailed some\nrearrangement of `ssrbool`: the large  `Predicates` section had to be\nbroken up as the module-functor idiom for aliasing coercions cannot be\nused inside a section.\n","author_name":"Georges Gonthier","author_email":"georges.gonthier@inria.fr","authored_date":"2019-04-24T23:02:08.000+02:00","committer_name":"Georges Gonthier","committer_email":"georges.gonthier@inria.fr","committed_date":"2019-04-29T18:12:15.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ab73036c4d5c46759335647b380dde1b1ea0f1ff"},"pipeline":{"id":58995040,"iid":8663,"project_id":6138686,"sha":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","ref":"pr-9995","status":"failed","source":"push","created_at":"2019-04-29T16:27:55.342Z","updated_at":"2019-04-29T18:04:16.591Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/58995040"},"web_url":"https://gitlab.com/coq/coq/-/jobs/204446256","artifacts":[{"file_type":"trace","size":29459,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":204446254,"status":"success","stage":"test","name":"validate:base+32bit","ref":"pr-9995","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-04-29T16:27:55.862Z","started_at":"2019-04-29T16:46:20.866Z","finished_at":"2019-04-29T16:54:25.257Z","duration":484.39163,"queued_duration":0.238461,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","short_id":"ab73036c","created_at":"2019-04-29T18:12:15.000+02:00","parent_ids":["61a1b4c46e4584e9337f9298b5f0053858a03c93"],"title":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface","message":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface\n\n** Changed definition of `simpl_rel` to `T -> `simpl_pred T`, so that\n`inE` will now expand `a \\in r b`, when `r := [rel x y | R]` to `R{b/x,\na/y}`, as the expanding coercion is now only inserted in the _last_\napplication.\nThe old definition made it possible to have a `simpl_rel >-> rel`\ncoercion that does not block expansion, but this can now be achieved\nmore economically with the `Arguments … /.` annotation.\n**  Deleted the `[rel of P]` notation which is no longer needed with\nthe new `simpl_rel` definition, and was broken anyway.\n** Added `relpre f R` definition of functional preimage of a notation.\n** `comp` and `idfun` are now proper definitions, using the `Arguments\n… /.` annotation to specify simplification on application.\n** Added `{pred T}` syntax for the alias of `pred T` in the `pred_sort`\ncoercion class; deleted the `pred_class` alias: one should either\nuse `pred_sort` in `Coercion` declarations, or `{pred T}` in type casts.\nUsed `{pred T}` as appropriate in localised predicate (`{in …, …}`) theory.\nExtended and corrected `pred` coercion internal documentation.\n** Simplified the `predType` structure by removing the redundant\nexplicit `mem_pred` subfield, and replacing it with an interlocked\nprojection; deleted `mkPredType`, now replaced by `PredType`.\n** Added (and extensively documented) a `nonPropType` interface\nmatching types that do _not_ have sort `Prop`, and used it to remove\nthe non-standard maximal implicits annotation on `Some_inj` introduced\nin #6911 by @anton-trumov; included `test-suite` entry for `nonPropType`.\n** Documented the design of the four structures used to control the\nmatching of `inE` and related predicate rewriting lemmas; added `test-suite`\nentry covering the `pred` rewriting control idioms.\n** Used `only printing` annotations to get rid of token concatenation\nhacks.\n** Fixed boolean and general `if b return t then …` notation so that\n`b` is bound in `t`. This is a minor source of incompatibility for\nmisuses of this syntax when `b` is _not_ bound in `t`, and `(if b then\n…) : t` should have been used instead.\n** Reserved all `ssreflect`, `ssrfun` and `ssrbool` notation at the top\nof the file, adding some printing boxes, and removing some spurious\n`[pred .. => ..]` reserved notation.\n** Fixed parsing precedence and format of `<hidden n>` notation, and\ndeclared and put it in an explicit `ssr_scope`.\n** Used module-and-functor idiom to ensure that the `simpl_pred T >-\npred T` _and_ `simpl_pred T >-> {pred T}` coercions are realised by the\n_same_ Gallina constant.\n** Updated `CREDITS`.\nThe policy implied by this PR: that `{pred T}` should systematically\nbe used as the generic collective predicate type, was implemented in MathComp\nmath-comp/math-comp#237. As a result  `simpl_pred >-> pred_sort` coercions\nbecame more frequent, as it turned out they were not, as incorrectly stated\nin `ssrbool` internal comments, impossible: while the `simplPredType`\ncanonical instance does solve all `simpl_pred T =~= pred_sort ?pT`\ninstances, it does _not_ solve `simpl_pred T =~= {pred T}`, and so the\ncoercion will be used in that case. However it appeared that having two\ndifferent coercion constants confused the SSReflect keyed matching\nheuristic, hence the fix introduced here. This has entailed some\nrearrangement of `ssrbool`: the large  `Predicates` section had to be\nbroken up as the module-functor idiom for aliasing coercions cannot be\nused inside a section.\n","author_name":"Georges Gonthier","author_email":"georges.gonthier@inria.fr","authored_date":"2019-04-24T23:02:08.000+02:00","committer_name":"Georges Gonthier","committer_email":"georges.gonthier@inria.fr","committed_date":"2019-04-29T18:12:15.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ab73036c4d5c46759335647b380dde1b1ea0f1ff"},"pipeline":{"id":58995040,"iid":8663,"project_id":6138686,"sha":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","ref":"pr-9995","status":"failed","source":"push","created_at":"2019-04-29T16:27:55.342Z","updated_at":"2019-04-29T18:04:16.591Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/58995040"},"web_url":"https://gitlab.com/coq/coq/-/jobs/204446254","artifacts":[{"file_type":"trace","size":59405,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":204446253,"status":"success","stage":"test","name":"validate:base","ref":"pr-9995","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-04-29T16:27:55.840Z","started_at":"2019-04-29T16:46:21.327Z","finished_at":"2019-04-29T16:52:02.974Z","duration":341.647842,"queued_duration":0.488111,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","short_id":"ab73036c","created_at":"2019-04-29T18:12:15.000+02:00","parent_ids":["61a1b4c46e4584e9337f9298b5f0053858a03c93"],"title":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface","message":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface\n\n** Changed definition of `simpl_rel` to `T -> `simpl_pred T`, so that\n`inE` will now expand `a \\in r b`, when `r := [rel x y | R]` to `R{b/x,\na/y}`, as the expanding coercion is now only inserted in the _last_\napplication.\nThe old definition made it possible to have a `simpl_rel >-> rel`\ncoercion that does not block expansion, but this can now be achieved\nmore economically with the `Arguments … /.` annotation.\n**  Deleted the `[rel of P]` notation which is no longer needed with\nthe new `simpl_rel` definition, and was broken anyway.\n** Added `relpre f R` definition of functional preimage of a notation.\n** `comp` and `idfun` are now proper definitions, using the `Arguments\n… /.` annotation to specify simplification on application.\n** Added `{pred T}` syntax for the alias of `pred T` in the `pred_sort`\ncoercion class; deleted the `pred_class` alias: one should either\nuse `pred_sort` in `Coercion` declarations, or `{pred T}` in type casts.\nUsed `{pred T}` as appropriate in localised predicate (`{in …, …}`) theory.\nExtended and corrected `pred` coercion internal documentation.\n** Simplified the `predType` structure by removing the redundant\nexplicit `mem_pred` subfield, and replacing it with an interlocked\nprojection; deleted `mkPredType`, now replaced by `PredType`.\n** Added (and extensively documented) a `nonPropType` interface\nmatching types that do _not_ have sort `Prop`, and used it to remove\nthe non-standard maximal implicits annotation on `Some_inj` introduced\nin #6911 by @anton-trumov; included `test-suite` entry for `nonPropType`.\n** Documented the design of the four structures used to control the\nmatching of `inE` and related predicate rewriting lemmas; added `test-suite`\nentry covering the `pred` rewriting control idioms.\n** Used `only printing` annotations to get rid of token concatenation\nhacks.\n** Fixed boolean and general `if b return t then …` notation so that\n`b` is bound in `t`. This is a minor source of incompatibility for\nmisuses of this syntax when `b` is _not_ bound in `t`, and `(if b then\n…) : t` should have been used instead.\n** Reserved all `ssreflect`, `ssrfun` and `ssrbool` notation at the top\nof the file, adding some printing boxes, and removing some spurious\n`[pred .. => ..]` reserved notation.\n** Fixed parsing precedence and format of `<hidden n>` notation, and\ndeclared and put it in an explicit `ssr_scope`.\n** Used module-and-functor idiom to ensure that the `simpl_pred T >-\npred T` _and_ `simpl_pred T >-> {pred T}` coercions are realised by the\n_same_ Gallina constant.\n** Updated `CREDITS`.\nThe policy implied by this PR: that `{pred T}` should systematically\nbe used as the generic collective predicate type, was implemented in MathComp\nmath-comp/math-comp#237. As a result  `simpl_pred >-> pred_sort` coercions\nbecame more frequent, as it turned out they were not, as incorrectly stated\nin `ssrbool` internal comments, impossible: while the `simplPredType`\ncanonical instance does solve all `simpl_pred T =~= pred_sort ?pT`\ninstances, it does _not_ solve `simpl_pred T =~= {pred T}`, and so the\ncoercion will be used in that case. However it appeared that having two\ndifferent coercion constants confused the SSReflect keyed matching\nheuristic, hence the fix introduced here. This has entailed some\nrearrangement of `ssrbool`: the large  `Predicates` section had to be\nbroken up as the module-functor idiom for aliasing coercions cannot be\nused inside a section.\n","author_name":"Georges Gonthier","author_email":"georges.gonthier@inria.fr","authored_date":"2019-04-24T23:02:08.000+02:00","committer_name":"Georges Gonthier","committer_email":"georges.gonthier@inria.fr","committed_date":"2019-04-29T18:12:15.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ab73036c4d5c46759335647b380dde1b1ea0f1ff"},"pipeline":{"id":58995040,"iid":8663,"project_id":6138686,"sha":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","ref":"pr-9995","status":"failed","source":"push","created_at":"2019-04-29T16:27:55.342Z","updated_at":"2019-04-29T18:04:16.591Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/58995040"},"web_url":"https://gitlab.com/coq/coq/-/jobs/204446253","artifacts":[{"file_type":"trace","size":28783,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":204446252,"status":"failed","stage":"test","name":"test-suite:base+async","ref":"pr-9995","tag":false,"coverage":null,"allow_failure":true,"created_at":"2019-04-29T16:27:55.820Z","started_at":"2019-04-29T16:46:21.414Z","finished_at":"2019-04-29T17:37:34.457Z","duration":3073.042899,"queued_duration":0.420504,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","short_id":"ab73036c","created_at":"2019-04-29T18:12:15.000+02:00","parent_ids":["61a1b4c46e4584e9337f9298b5f0053858a03c93"],"title":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface","message":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface\n\n** Changed definition of `simpl_rel` to `T -> `simpl_pred T`, so that\n`inE` will now expand `a \\in r b`, when `r := [rel x y | R]` to `R{b/x,\na/y}`, as the expanding coercion is now only inserted in the _last_\napplication.\nThe old definition made it possible to have a `simpl_rel >-> rel`\ncoercion that does not block expansion, but this can now be achieved\nmore economically with the `Arguments … /.` annotation.\n**  Deleted the `[rel of P]` notation which is no longer needed with\nthe new `simpl_rel` definition, and was broken anyway.\n** Added `relpre f R` definition of functional preimage of a notation.\n** `comp` and `idfun` are now proper definitions, using the `Arguments\n… /.` annotation to specify simplification on application.\n** Added `{pred T}` syntax for the alias of `pred T` in the `pred_sort`\ncoercion class; deleted the `pred_class` alias: one should either\nuse `pred_sort` in `Coercion` declarations, or `{pred T}` in type casts.\nUsed `{pred T}` as appropriate in localised predicate (`{in …, …}`) theory.\nExtended and corrected `pred` coercion internal documentation.\n** Simplified the `predType` structure by removing the redundant\nexplicit `mem_pred` subfield, and replacing it with an interlocked\nprojection; deleted `mkPredType`, now replaced by `PredType`.\n** Added (and extensively documented) a `nonPropType` interface\nmatching types that do _not_ have sort `Prop`, and used it to remove\nthe non-standard maximal implicits annotation on `Some_inj` introduced\nin #6911 by @anton-trumov; included `test-suite` entry for `nonPropType`.\n** Documented the design of the four structures used to control the\nmatching of `inE` and related predicate rewriting lemmas; added `test-suite`\nentry covering the `pred` rewriting control idioms.\n** Used `only printing` annotations to get rid of token concatenation\nhacks.\n** Fixed boolean and general `if b return t then …` notation so that\n`b` is bound in `t`. This is a minor source of incompatibility for\nmisuses of this syntax when `b` is _not_ bound in `t`, and `(if b then\n…) : t` should have been used instead.\n** Reserved all `ssreflect`, `ssrfun` and `ssrbool` notation at the top\nof the file, adding some printing boxes, and removing some spurious\n`[pred .. => ..]` reserved notation.\n** Fixed parsing precedence and format of `<hidden n>` notation, and\ndeclared and put it in an explicit `ssr_scope`.\n** Used module-and-functor idiom to ensure that the `simpl_pred T >-\npred T` _and_ `simpl_pred T >-> {pred T}` coercions are realised by the\n_same_ Gallina constant.\n** Updated `CREDITS`.\nThe policy implied by this PR: that `{pred T}` should systematically\nbe used as the generic collective predicate type, was implemented in MathComp\nmath-comp/math-comp#237. As a result  `simpl_pred >-> pred_sort` coercions\nbecame more frequent, as it turned out they were not, as incorrectly stated\nin `ssrbool` internal comments, impossible: while the `simplPredType`\ncanonical instance does solve all `simpl_pred T =~= pred_sort ?pT`\ninstances, it does _not_ solve `simpl_pred T =~= {pred T}`, and so the\ncoercion will be used in that case. However it appeared that having two\ndifferent coercion constants confused the SSReflect keyed matching\nheuristic, hence the fix introduced here. This has entailed some\nrearrangement of `ssrbool`: the large  `Predicates` section had to be\nbroken up as the module-functor idiom for aliasing coercions cannot be\nused inside a section.\n","author_name":"Georges Gonthier","author_email":"georges.gonthier@inria.fr","authored_date":"2019-04-24T23:02:08.000+02:00","committer_name":"Georges Gonthier","committer_email":"georges.gonthier@inria.fr","committed_date":"2019-04-29T18:12:15.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ab73036c4d5c46759335647b380dde1b1ea0f1ff"},"pipeline":{"id":58995040,"iid":8663,"project_id":6138686,"sha":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","ref":"pr-9995","status":"failed","source":"push","created_at":"2019-04-29T16:27:55.342Z","updated_at":"2019-04-29T18:04:16.591Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/58995040"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/204446252","artifacts":[{"file_type":"trace","size":96363,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":204446251,"status":"failed","stage":"test","name":"test-suite:edge+trunk+dune","ref":"pr-9995","tag":false,"coverage":null,"allow_failure":true,"created_at":"2019-04-29T16:27:55.798Z","started_at":"2019-04-29T16:46:22.633Z","finished_at":"2019-04-29T17:27:48.894Z","duration":2486.261728,"queued_duration":1.57666,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","short_id":"ab73036c","created_at":"2019-04-29T18:12:15.000+02:00","parent_ids":["61a1b4c46e4584e9337f9298b5f0053858a03c93"],"title":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface","message":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface\n\n** Changed definition of `simpl_rel` to `T -> `simpl_pred T`, so that\n`inE` will now expand `a \\in r b`, when `r := [rel x y | R]` to `R{b/x,\na/y}`, as the expanding coercion is now only inserted in the _last_\napplication.\nThe old definition made it possible to have a `simpl_rel >-> rel`\ncoercion that does not block expansion, but this can now be achieved\nmore economically with the `Arguments … /.` annotation.\n**  Deleted the `[rel of P]` notation which is no longer needed with\nthe new `simpl_rel` definition, and was broken anyway.\n** Added `relpre f R` definition of functional preimage of a notation.\n** `comp` and `idfun` are now proper definitions, using the `Arguments\n… /.` annotation to specify simplification on application.\n** Added `{pred T}` syntax for the alias of `pred T` in the `pred_sort`\ncoercion class; deleted the `pred_class` alias: one should either\nuse `pred_sort` in `Coercion` declarations, or `{pred T}` in type casts.\nUsed `{pred T}` as appropriate in localised predicate (`{in …, …}`) theory.\nExtended and corrected `pred` coercion internal documentation.\n** Simplified the `predType` structure by removing the redundant\nexplicit `mem_pred` subfield, and replacing it with an interlocked\nprojection; deleted `mkPredType`, now replaced by `PredType`.\n** Added (and extensively documented) a `nonPropType` interface\nmatching types that do _not_ have sort `Prop`, and used it to remove\nthe non-standard maximal implicits annotation on `Some_inj` introduced\nin #6911 by @anton-trumov; included `test-suite` entry for `nonPropType`.\n** Documented the design of the four structures used to control the\nmatching of `inE` and related predicate rewriting lemmas; added `test-suite`\nentry covering the `pred` rewriting control idioms.\n** Used `only printing` annotations to get rid of token concatenation\nhacks.\n** Fixed boolean and general `if b return t then …` notation so that\n`b` is bound in `t`. This is a minor source of incompatibility for\nmisuses of this syntax when `b` is _not_ bound in `t`, and `(if b then\n…) : t` should have been used instead.\n** Reserved all `ssreflect`, `ssrfun` and `ssrbool` notation at the top\nof the file, adding some printing boxes, and removing some spurious\n`[pred .. => ..]` reserved notation.\n** Fixed parsing precedence and format of `<hidden n>` notation, and\ndeclared and put it in an explicit `ssr_scope`.\n** Used module-and-functor idiom to ensure that the `simpl_pred T >-\npred T` _and_ `simpl_pred T >-> {pred T}` coercions are realised by the\n_same_ Gallina constant.\n** Updated `CREDITS`.\nThe policy implied by this PR: that `{pred T}` should systematically\nbe used as the generic collective predicate type, was implemented in MathComp\nmath-comp/math-comp#237. As a result  `simpl_pred >-> pred_sort` coercions\nbecame more frequent, as it turned out they were not, as incorrectly stated\nin `ssrbool` internal comments, impossible: while the `simplPredType`\ncanonical instance does solve all `simpl_pred T =~= pred_sort ?pT`\ninstances, it does _not_ solve `simpl_pred T =~= {pred T}`, and so the\ncoercion will be used in that case. However it appeared that having two\ndifferent coercion constants confused the SSReflect keyed matching\nheuristic, hence the fix introduced here. This has entailed some\nrearrangement of `ssrbool`: the large  `Predicates` section had to be\nbroken up as the module-functor idiom for aliasing coercions cannot be\nused inside a section.\n","author_name":"Georges Gonthier","author_email":"georges.gonthier@inria.fr","authored_date":"2019-04-24T23:02:08.000+02:00","committer_name":"Georges Gonthier","committer_email":"georges.gonthier@inria.fr","committed_date":"2019-04-29T18:12:15.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ab73036c4d5c46759335647b380dde1b1ea0f1ff"},"pipeline":{"id":58995040,"iid":8663,"project_id":6138686,"sha":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","ref":"pr-9995","status":"failed","source":"push","created_at":"2019-04-29T16:27:55.342Z","updated_at":"2019-04-29T18:04:16.591Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/58995040"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/204446251","artifacts":[{"file_type":"trace","size":177953,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2019-05-06T17:27:47.155Z","tag_list":[]}
{"id":204446250,"status":"failed","stage":"test","name":"test-suite:edge+trunk+make","ref":"pr-9995","tag":false,"coverage":null,"allow_failure":true,"created_at":"2019-04-29T16:27:55.776Z","started_at":"2019-04-29T16:46:22.212Z","finished_at":"2019-04-29T17:29:53.965Z","duration":2611.752919,"queued_duration":1.122052,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","short_id":"ab73036c","created_at":"2019-04-29T18:12:15.000+02:00","parent_ids":["61a1b4c46e4584e9337f9298b5f0053858a03c93"],"title":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface","message":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface\n\n** Changed definition of `simpl_rel` to `T -> `simpl_pred T`, so that\n`inE` will now expand `a \\in r b`, when `r := [rel x y | R]` to `R{b/x,\na/y}`, as the expanding coercion is now only inserted in the _last_\napplication.\nThe old definition made it possible to have a `simpl_rel >-> rel`\ncoercion that does not block expansion, but this can now be achieved\nmore economically with the `Arguments … /.` annotation.\n**  Deleted the `[rel of P]` notation which is no longer needed with\nthe new `simpl_rel` definition, and was broken anyway.\n** Added `relpre f R` definition of functional preimage of a notation.\n** `comp` and `idfun` are now proper definitions, using the `Arguments\n… /.` annotation to specify simplification on application.\n** Added `{pred T}` syntax for the alias of `pred T` in the `pred_sort`\ncoercion class; deleted the `pred_class` alias: one should either\nuse `pred_sort` in `Coercion` declarations, or `{pred T}` in type casts.\nUsed `{pred T}` as appropriate in localised predicate (`{in …, …}`) theory.\nExtended and corrected `pred` coercion internal documentation.\n** Simplified the `predType` structure by removing the redundant\nexplicit `mem_pred` subfield, and replacing it with an interlocked\nprojection; deleted `mkPredType`, now replaced by `PredType`.\n** Added (and extensively documented) a `nonPropType` interface\nmatching types that do _not_ have sort `Prop`, and used it to remove\nthe non-standard maximal implicits annotation on `Some_inj` introduced\nin #6911 by @anton-trumov; included `test-suite` entry for `nonPropType`.\n** Documented the design of the four structures used to control the\nmatching of `inE` and related predicate rewriting lemmas; added `test-suite`\nentry covering the `pred` rewriting control idioms.\n** Used `only printing` annotations to get rid of token concatenation\nhacks.\n** Fixed boolean and general `if b return t then …` notation so that\n`b` is bound in `t`. This is a minor source of incompatibility for\nmisuses of this syntax when `b` is _not_ bound in `t`, and `(if b then\n…) : t` should have been used instead.\n** Reserved all `ssreflect`, `ssrfun` and `ssrbool` notation at the top\nof the file, adding some printing boxes, and removing some spurious\n`[pred .. => ..]` reserved notation.\n** Fixed parsing precedence and format of `<hidden n>` notation, and\ndeclared and put it in an explicit `ssr_scope`.\n** Used module-and-functor idiom to ensure that the `simpl_pred T >-\npred T` _and_ `simpl_pred T >-> {pred T}` coercions are realised by the\n_same_ Gallina constant.\n** Updated `CREDITS`.\nThe policy implied by this PR: that `{pred T}` should systematically\nbe used as the generic collective predicate type, was implemented in MathComp\nmath-comp/math-comp#237. As a result  `simpl_pred >-> pred_sort` coercions\nbecame more frequent, as it turned out they were not, as incorrectly stated\nin `ssrbool` internal comments, impossible: while the `simplPredType`\ncanonical instance does solve all `simpl_pred T =~= pred_sort ?pT`\ninstances, it does _not_ solve `simpl_pred T =~= {pred T}`, and so the\ncoercion will be used in that case. However it appeared that having two\ndifferent coercion constants confused the SSReflect keyed matching\nheuristic, hence the fix introduced here. This has entailed some\nrearrangement of `ssrbool`: the large  `Predicates` section had to be\nbroken up as the module-functor idiom for aliasing coercions cannot be\nused inside a section.\n","author_name":"Georges Gonthier","author_email":"georges.gonthier@inria.fr","authored_date":"2019-04-24T23:02:08.000+02:00","committer_name":"Georges Gonthier","committer_email":"georges.gonthier@inria.fr","committed_date":"2019-04-29T18:12:15.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ab73036c4d5c46759335647b380dde1b1ea0f1ff"},"pipeline":{"id":58995040,"iid":8663,"project_id":6138686,"sha":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","ref":"pr-9995","status":"failed","source":"push","created_at":"2019-04-29T16:27:55.342Z","updated_at":"2019-04-29T18:04:16.591Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/58995040"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/204446250","artifacts":[{"file_type":"trace","size":230452,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2019-05-06T17:29:51.982Z","tag_list":[]}
{"id":204446249,"status":"failed","stage":"test","name":"test-suite:egde:dune:dev","ref":"pr-9995","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-04-29T16:27:55.755Z","started_at":"2019-04-29T16:46:21.903Z","finished_at":"2019-04-29T17:24:17.981Z","duration":2276.078867,"queued_duration":0.743322,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","short_id":"ab73036c","created_at":"2019-04-29T18:12:15.000+02:00","parent_ids":["61a1b4c46e4584e9337f9298b5f0053858a03c93"],"title":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface","message":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface\n\n** Changed definition of `simpl_rel` to `T -> `simpl_pred T`, so that\n`inE` will now expand `a \\in r b`, when `r := [rel x y | R]` to `R{b/x,\na/y}`, as the expanding coercion is now only inserted in the _last_\napplication.\nThe old definition made it possible to have a `simpl_rel >-> rel`\ncoercion that does not block expansion, but this can now be achieved\nmore economically with the `Arguments … /.` annotation.\n**  Deleted the `[rel of P]` notation which is no longer needed with\nthe new `simpl_rel` definition, and was broken anyway.\n** Added `relpre f R` definition of functional preimage of a notation.\n** `comp` and `idfun` are now proper definitions, using the `Arguments\n… /.` annotation to specify simplification on application.\n** Added `{pred T}` syntax for the alias of `pred T` in the `pred_sort`\ncoercion class; deleted the `pred_class` alias: one should either\nuse `pred_sort` in `Coercion` declarations, or `{pred T}` in type casts.\nUsed `{pred T}` as appropriate in localised predicate (`{in …, …}`) theory.\nExtended and corrected `pred` coercion internal documentation.\n** Simplified the `predType` structure by removing the redundant\nexplicit `mem_pred` subfield, and replacing it with an interlocked\nprojection; deleted `mkPredType`, now replaced by `PredType`.\n** Added (and extensively documented) a `nonPropType` interface\nmatching types that do _not_ have sort `Prop`, and used it to remove\nthe non-standard maximal implicits annotation on `Some_inj` introduced\nin #6911 by @anton-trumov; included `test-suite` entry for `nonPropType`.\n** Documented the design of the four structures used to control the\nmatching of `inE` and related predicate rewriting lemmas; added `test-suite`\nentry covering the `pred` rewriting control idioms.\n** Used `only printing` annotations to get rid of token concatenation\nhacks.\n** Fixed boolean and general `if b return t then …` notation so that\n`b` is bound in `t`. This is a minor source of incompatibility for\nmisuses of this syntax when `b` is _not_ bound in `t`, and `(if b then\n…) : t` should have been used instead.\n** Reserved all `ssreflect`, `ssrfun` and `ssrbool` notation at the top\nof the file, adding some printing boxes, and removing some spurious\n`[pred .. => ..]` reserved notation.\n** Fixed parsing precedence and format of `<hidden n>` notation, and\ndeclared and put it in an explicit `ssr_scope`.\n** Used module-and-functor idiom to ensure that the `simpl_pred T >-\npred T` _and_ `simpl_pred T >-> {pred T}` coercions are realised by the\n_same_ Gallina constant.\n** Updated `CREDITS`.\nThe policy implied by this PR: that `{pred T}` should systematically\nbe used as the generic collective predicate type, was implemented in MathComp\nmath-comp/math-comp#237. As a result  `simpl_pred >-> pred_sort` coercions\nbecame more frequent, as it turned out they were not, as incorrectly stated\nin `ssrbool` internal comments, impossible: while the `simplPredType`\ncanonical instance does solve all `simpl_pred T =~= pred_sort ?pT`\ninstances, it does _not_ solve `simpl_pred T =~= {pred T}`, and so the\ncoercion will be used in that case. However it appeared that having two\ndifferent coercion constants confused the SSReflect keyed matching\nheuristic, hence the fix introduced here. This has entailed some\nrearrangement of `ssrbool`: the large  `Predicates` section had to be\nbroken up as the module-functor idiom for aliasing coercions cannot be\nused inside a section.\n","author_name":"Georges Gonthier","author_email":"georges.gonthier@inria.fr","authored_date":"2019-04-24T23:02:08.000+02:00","committer_name":"Georges Gonthier","committer_email":"georges.gonthier@inria.fr","committed_date":"2019-04-29T18:12:15.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ab73036c4d5c46759335647b380dde1b1ea0f1ff"},"pipeline":{"id":58995040,"iid":8663,"project_id":6138686,"sha":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","ref":"pr-9995","status":"failed","source":"push","created_at":"2019-04-29T16:27:55.342Z","updated_at":"2019-04-29T18:04:16.591Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/58995040"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/204446249","artifacts":[{"file_type":"trace","size":112241,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":204446248,"status":"failed","stage":"test","name":"test-suite:edge+flambda","ref":"pr-9995","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-04-29T16:27:55.729Z","started_at":"2019-04-29T16:46:22.145Z","finished_at":"2019-04-29T17:12:21.217Z","duration":1559.071926,"queued_duration":0.913697,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","short_id":"ab73036c","created_at":"2019-04-29T18:12:15.000+02:00","parent_ids":["61a1b4c46e4584e9337f9298b5f0053858a03c93"],"title":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface","message":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface\n\n** Changed definition of `simpl_rel` to `T -> `simpl_pred T`, so that\n`inE` will now expand `a \\in r b`, when `r := [rel x y | R]` to `R{b/x,\na/y}`, as the expanding coercion is now only inserted in the _last_\napplication.\nThe old definition made it possible to have a `simpl_rel >-> rel`\ncoercion that does not block expansion, but this can now be achieved\nmore economically with the `Arguments … /.` annotation.\n**  Deleted the `[rel of P]` notation which is no longer needed with\nthe new `simpl_rel` definition, and was broken anyway.\n** Added `relpre f R` definition of functional preimage of a notation.\n** `comp` and `idfun` are now proper definitions, using the `Arguments\n… /.` annotation to specify simplification on application.\n** Added `{pred T}` syntax for the alias of `pred T` in the `pred_sort`\ncoercion class; deleted the `pred_class` alias: one should either\nuse `pred_sort` in `Coercion` declarations, or `{pred T}` in type casts.\nUsed `{pred T}` as appropriate in localised predicate (`{in …, …}`) theory.\nExtended and corrected `pred` coercion internal documentation.\n** Simplified the `predType` structure by removing the redundant\nexplicit `mem_pred` subfield, and replacing it with an interlocked\nprojection; deleted `mkPredType`, now replaced by `PredType`.\n** Added (and extensively documented) a `nonPropType` interface\nmatching types that do _not_ have sort `Prop`, and used it to remove\nthe non-standard maximal implicits annotation on `Some_inj` introduced\nin #6911 by @anton-trumov; included `test-suite` entry for `nonPropType`.\n** Documented the design of the four structures used to control the\nmatching of `inE` and related predicate rewriting lemmas; added `test-suite`\nentry covering the `pred` rewriting control idioms.\n** Used `only printing` annotations to get rid of token concatenation\nhacks.\n** Fixed boolean and general `if b return t then …` notation so that\n`b` is bound in `t`. This is a minor source of incompatibility for\nmisuses of this syntax when `b` is _not_ bound in `t`, and `(if b then\n…) : t` should have been used instead.\n** Reserved all `ssreflect`, `ssrfun` and `ssrbool` notation at the top\nof the file, adding some printing boxes, and removing some spurious\n`[pred .. => ..]` reserved notation.\n** Fixed parsing precedence and format of `<hidden n>` notation, and\ndeclared and put it in an explicit `ssr_scope`.\n** Used module-and-functor idiom to ensure that the `simpl_pred T >-\npred T` _and_ `simpl_pred T >-> {pred T}` coercions are realised by the\n_same_ Gallina constant.\n** Updated `CREDITS`.\nThe policy implied by this PR: that `{pred T}` should systematically\nbe used as the generic collective predicate type, was implemented in MathComp\nmath-comp/math-comp#237. As a result  `simpl_pred >-> pred_sort` coercions\nbecame more frequent, as it turned out they were not, as incorrectly stated\nin `ssrbool` internal comments, impossible: while the `simplPredType`\ncanonical instance does solve all `simpl_pred T =~= pred_sort ?pT`\ninstances, it does _not_ solve `simpl_pred T =~= {pred T}`, and so the\ncoercion will be used in that case. However it appeared that having two\ndifferent coercion constants confused the SSReflect keyed matching\nheuristic, hence the fix introduced here. This has entailed some\nrearrangement of `ssrbool`: the large  `Predicates` section had to be\nbroken up as the module-functor idiom for aliasing coercions cannot be\nused inside a section.\n","author_name":"Georges Gonthier","author_email":"georges.gonthier@inria.fr","authored_date":"2019-04-24T23:02:08.000+02:00","committer_name":"Georges Gonthier","committer_email":"georges.gonthier@inria.fr","committed_date":"2019-04-29T18:12:15.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ab73036c4d5c46759335647b380dde1b1ea0f1ff"},"pipeline":{"id":58995040,"iid":8663,"project_id":6138686,"sha":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","ref":"pr-9995","status":"failed","source":"push","created_at":"2019-04-29T16:27:55.342Z","updated_at":"2019-04-29T18:04:16.591Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/58995040"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/204446248","artifacts":[{"file_type":"trace","size":97027,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":204446247,"status":"failed","stage":"test","name":"test-suite:base+32bit","ref":"pr-9995","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-04-29T16:27:55.709Z","started_at":"2019-04-29T16:46:22.548Z","finished_at":"2019-04-29T17:07:03.645Z","duration":1241.096203,"queued_duration":0.836013,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","short_id":"ab73036c","created_at":"2019-04-29T18:12:15.000+02:00","parent_ids":["61a1b4c46e4584e9337f9298b5f0053858a03c93"],"title":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface","message":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface\n\n** Changed definition of `simpl_rel` to `T -> `simpl_pred T`, so that\n`inE` will now expand `a \\in r b`, when `r := [rel x y | R]` to `R{b/x,\na/y}`, as the expanding coercion is now only inserted in the _last_\napplication.\nThe old definition made it possible to have a `simpl_rel >-> rel`\ncoercion that does not block expansion, but this can now be achieved\nmore economically with the `Arguments … /.` annotation.\n**  Deleted the `[rel of P]` notation which is no longer needed with\nthe new `simpl_rel` definition, and was broken anyway.\n** Added `relpre f R` definition of functional preimage of a notation.\n** `comp` and `idfun` are now proper definitions, using the `Arguments\n… /.` annotation to specify simplification on application.\n** Added `{pred T}` syntax for the alias of `pred T` in the `pred_sort`\ncoercion class; deleted the `pred_class` alias: one should either\nuse `pred_sort` in `Coercion` declarations, or `{pred T}` in type casts.\nUsed `{pred T}` as appropriate in localised predicate (`{in …, …}`) theory.\nExtended and corrected `pred` coercion internal documentation.\n** Simplified the `predType` structure by removing the redundant\nexplicit `mem_pred` subfield, and replacing it with an interlocked\nprojection; deleted `mkPredType`, now replaced by `PredType`.\n** Added (and extensively documented) a `nonPropType` interface\nmatching types that do _not_ have sort `Prop`, and used it to remove\nthe non-standard maximal implicits annotation on `Some_inj` introduced\nin #6911 by @anton-trumov; included `test-suite` entry for `nonPropType`.\n** Documented the design of the four structures used to control the\nmatching of `inE` and related predicate rewriting lemmas; added `test-suite`\nentry covering the `pred` rewriting control idioms.\n** Used `only printing` annotations to get rid of token concatenation\nhacks.\n** Fixed boolean and general `if b return t then …` notation so that\n`b` is bound in `t`. This is a minor source of incompatibility for\nmisuses of this syntax when `b` is _not_ bound in `t`, and `(if b then\n…) : t` should have been used instead.\n** Reserved all `ssreflect`, `ssrfun` and `ssrbool` notation at the top\nof the file, adding some printing boxes, and removing some spurious\n`[pred .. => ..]` reserved notation.\n** Fixed parsing precedence and format of `<hidden n>` notation, and\ndeclared and put it in an explicit `ssr_scope`.\n** Used module-and-functor idiom to ensure that the `simpl_pred T >-\npred T` _and_ `simpl_pred T >-> {pred T}` coercions are realised by the\n_same_ Gallina constant.\n** Updated `CREDITS`.\nThe policy implied by this PR: that `{pred T}` should systematically\nbe used as the generic collective predicate type, was implemented in MathComp\nmath-comp/math-comp#237. As a result  `simpl_pred >-> pred_sort` coercions\nbecame more frequent, as it turned out they were not, as incorrectly stated\nin `ssrbool` internal comments, impossible: while the `simplPredType`\ncanonical instance does solve all `simpl_pred T =~= pred_sort ?pT`\ninstances, it does _not_ solve `simpl_pred T =~= {pred T}`, and so the\ncoercion will be used in that case. However it appeared that having two\ndifferent coercion constants confused the SSReflect keyed matching\nheuristic, hence the fix introduced here. This has entailed some\nrearrangement of `ssrbool`: the large  `Predicates` section had to be\nbroken up as the module-functor idiom for aliasing coercions cannot be\nused inside a section.\n","author_name":"Georges Gonthier","author_email":"georges.gonthier@inria.fr","authored_date":"2019-04-24T23:02:08.000+02:00","committer_name":"Georges Gonthier","committer_email":"georges.gonthier@inria.fr","committed_date":"2019-04-29T18:12:15.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ab73036c4d5c46759335647b380dde1b1ea0f1ff"},"pipeline":{"id":58995040,"iid":8663,"project_id":6138686,"sha":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","ref":"pr-9995","status":"failed","source":"push","created_at":"2019-04-29T16:27:55.342Z","updated_at":"2019-04-29T18:04:16.591Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/58995040"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/204446247","artifacts":[{"file_type":"trace","size":94490,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":204446246,"status":"failed","stage":"test","name":"test-suite:base","ref":"pr-9995","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-04-29T16:27:55.690Z","started_at":"2019-04-29T16:46:22.483Z","finished_at":"2019-04-29T17:07:53.260Z","duration":1290.77666,"queued_duration":0.602994,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","short_id":"ab73036c","created_at":"2019-04-29T18:12:15.000+02:00","parent_ids":["61a1b4c46e4584e9337f9298b5f0053858a03c93"],"title":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface","message":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface\n\n** Changed definition of `simpl_rel` to `T -> `simpl_pred T`, so that\n`inE` will now expand `a \\in r b`, when `r := [rel x y | R]` to `R{b/x,\na/y}`, as the expanding coercion is now only inserted in the _last_\napplication.\nThe old definition made it possible to have a `simpl_rel >-> rel`\ncoercion that does not block expansion, but this can now be achieved\nmore economically with the `Arguments … /.` annotation.\n**  Deleted the `[rel of P]` notation which is no longer needed with\nthe new `simpl_rel` definition, and was broken anyway.\n** Added `relpre f R` definition of functional preimage of a notation.\n** `comp` and `idfun` are now proper definitions, using the `Arguments\n… /.` annotation to specify simplification on application.\n** Added `{pred T}` syntax for the alias of `pred T` in the `pred_sort`\ncoercion class; deleted the `pred_class` alias: one should either\nuse `pred_sort` in `Coercion` declarations, or `{pred T}` in type casts.\nUsed `{pred T}` as appropriate in localised predicate (`{in …, …}`) theory.\nExtended and corrected `pred` coercion internal documentation.\n** Simplified the `predType` structure by removing the redundant\nexplicit `mem_pred` subfield, and replacing it with an interlocked\nprojection; deleted `mkPredType`, now replaced by `PredType`.\n** Added (and extensively documented) a `nonPropType` interface\nmatching types that do _not_ have sort `Prop`, and used it to remove\nthe non-standard maximal implicits annotation on `Some_inj` introduced\nin #6911 by @anton-trumov; included `test-suite` entry for `nonPropType`.\n** Documented the design of the four structures used to control the\nmatching of `inE` and related predicate rewriting lemmas; added `test-suite`\nentry covering the `pred` rewriting control idioms.\n** Used `only printing` annotations to get rid of token concatenation\nhacks.\n** Fixed boolean and general `if b return t then …` notation so that\n`b` is bound in `t`. This is a minor source of incompatibility for\nmisuses of this syntax when `b` is _not_ bound in `t`, and `(if b then\n…) : t` should have been used instead.\n** Reserved all `ssreflect`, `ssrfun` and `ssrbool` notation at the top\nof the file, adding some printing boxes, and removing some spurious\n`[pred .. => ..]` reserved notation.\n** Fixed parsing precedence and format of `<hidden n>` notation, and\ndeclared and put it in an explicit `ssr_scope`.\n** Used module-and-functor idiom to ensure that the `simpl_pred T >-\npred T` _and_ `simpl_pred T >-> {pred T}` coercions are realised by the\n_same_ Gallina constant.\n** Updated `CREDITS`.\nThe policy implied by this PR: that `{pred T}` should systematically\nbe used as the generic collective predicate type, was implemented in MathComp\nmath-comp/math-comp#237. As a result  `simpl_pred >-> pred_sort` coercions\nbecame more frequent, as it turned out they were not, as incorrectly stated\nin `ssrbool` internal comments, impossible: while the `simplPredType`\ncanonical instance does solve all `simpl_pred T =~= pred_sort ?pT`\ninstances, it does _not_ solve `simpl_pred T =~= {pred T}`, and so the\ncoercion will be used in that case. However it appeared that having two\ndifferent coercion constants confused the SSReflect keyed matching\nheuristic, hence the fix introduced here. This has entailed some\nrearrangement of `ssrbool`: the large  `Predicates` section had to be\nbroken up as the module-functor idiom for aliasing coercions cannot be\nused inside a section.\n","author_name":"Georges Gonthier","author_email":"georges.gonthier@inria.fr","authored_date":"2019-04-24T23:02:08.000+02:00","committer_name":"Georges Gonthier","committer_email":"georges.gonthier@inria.fr","committed_date":"2019-04-29T18:12:15.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ab73036c4d5c46759335647b380dde1b1ea0f1ff"},"pipeline":{"id":58995040,"iid":8663,"project_id":6138686,"sha":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","ref":"pr-9995","status":"failed","source":"push","created_at":"2019-04-29T16:27:55.342Z","updated_at":"2019-04-29T18:04:16.591Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/58995040"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/204446246","artifacts":[{"file_type":"trace","size":96225,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":204446245,"status":"success","stage":"test","name":"doc:ml-api:odoc","ref":"pr-9995","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-04-29T16:27:55.666Z","started_at":"2019-04-29T16:46:22.412Z","finished_at":"2019-04-29T16:49:44.535Z","duration":202.12263,"queued_duration":0.489583,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","short_id":"ab73036c","created_at":"2019-04-29T18:12:15.000+02:00","parent_ids":["61a1b4c46e4584e9337f9298b5f0053858a03c93"],"title":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface","message":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface\n\n** Changed definition of `simpl_rel` to `T -> `simpl_pred T`, so that\n`inE` will now expand `a \\in r b`, when `r := [rel x y | R]` to `R{b/x,\na/y}`, as the expanding coercion is now only inserted in the _last_\napplication.\nThe old definition made it possible to have a `simpl_rel >-> rel`\ncoercion that does not block expansion, but this can now be achieved\nmore economically with the `Arguments … /.` annotation.\n**  Deleted the `[rel of P]` notation which is no longer needed with\nthe new `simpl_rel` definition, and was broken anyway.\n** Added `relpre f R` definition of functional preimage of a notation.\n** `comp` and `idfun` are now proper definitions, using the `Arguments\n… /.` annotation to specify simplification on application.\n** Added `{pred T}` syntax for the alias of `pred T` in the `pred_sort`\ncoercion class; deleted the `pred_class` alias: one should either\nuse `pred_sort` in `Coercion` declarations, or `{pred T}` in type casts.\nUsed `{pred T}` as appropriate in localised predicate (`{in …, …}`) theory.\nExtended and corrected `pred` coercion internal documentation.\n** Simplified the `predType` structure by removing the redundant\nexplicit `mem_pred` subfield, and replacing it with an interlocked\nprojection; deleted `mkPredType`, now replaced by `PredType`.\n** Added (and extensively documented) a `nonPropType` interface\nmatching types that do _not_ have sort `Prop`, and used it to remove\nthe non-standard maximal implicits annotation on `Some_inj` introduced\nin #6911 by @anton-trumov; included `test-suite` entry for `nonPropType`.\n** Documented the design of the four structures used to control the\nmatching of `inE` and related predicate rewriting lemmas; added `test-suite`\nentry covering the `pred` rewriting control idioms.\n** Used `only printing` annotations to get rid of token concatenation\nhacks.\n** Fixed boolean and general `if b return t then …` notation so that\n`b` is bound in `t`. This is a minor source of incompatibility for\nmisuses of this syntax when `b` is _not_ bound in `t`, and `(if b then\n…) : t` should have been used instead.\n** Reserved all `ssreflect`, `ssrfun` and `ssrbool` notation at the top\nof the file, adding some printing boxes, and removing some spurious\n`[pred .. => ..]` reserved notation.\n** Fixed parsing precedence and format of `<hidden n>` notation, and\ndeclared and put it in an explicit `ssr_scope`.\n** Used module-and-functor idiom to ensure that the `simpl_pred T >-\npred T` _and_ `simpl_pred T >-> {pred T}` coercions are realised by the\n_same_ Gallina constant.\n** Updated `CREDITS`.\nThe policy implied by this PR: that `{pred T}` should systematically\nbe used as the generic collective predicate type, was implemented in MathComp\nmath-comp/math-comp#237. As a result  `simpl_pred >-> pred_sort` coercions\nbecame more frequent, as it turned out they were not, as incorrectly stated\nin `ssrbool` internal comments, impossible: while the `simplPredType`\ncanonical instance does solve all `simpl_pred T =~= pred_sort ?pT`\ninstances, it does _not_ solve `simpl_pred T =~= {pred T}`, and so the\ncoercion will be used in that case. However it appeared that having two\ndifferent coercion constants confused the SSReflect keyed matching\nheuristic, hence the fix introduced here. This has entailed some\nrearrangement of `ssrbool`: the large  `Predicates` section had to be\nbroken up as the module-functor idiom for aliasing coercions cannot be\nused inside a section.\n","author_name":"Georges Gonthier","author_email":"georges.gonthier@inria.fr","authored_date":"2019-04-24T23:02:08.000+02:00","committer_name":"Georges Gonthier","committer_email":"georges.gonthier@inria.fr","committed_date":"2019-04-29T18:12:15.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ab73036c4d5c46759335647b380dde1b1ea0f1ff"},"pipeline":{"id":58995040,"iid":8663,"project_id":6138686,"sha":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","ref":"pr-9995","status":"failed","source":"push","created_at":"2019-04-29T16:27:55.342Z","updated_at":"2019-04-29T18:04:16.591Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/58995040"},"web_url":"https://gitlab.com/coq/coq/-/jobs/204446245","artifacts":[{"file_type":"trace","size":85009,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2019-05-29T16:49:43.413Z","tag_list":[]}
{"id":204446244,"status":"success","stage":"test","name":"doc:stdlib:dune","ref":"pr-9995","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-04-29T16:27:55.644Z","started_at":"2019-04-29T16:46:22.368Z","finished_at":"2019-04-29T17:00:48.289Z","duration":865.921381,"queued_duration":0.409915,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","short_id":"ab73036c","created_at":"2019-04-29T18:12:15.000+02:00","parent_ids":["61a1b4c46e4584e9337f9298b5f0053858a03c93"],"title":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface","message":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface\n\n** Changed definition of `simpl_rel` to `T -> `simpl_pred T`, so that\n`inE` will now expand `a \\in r b`, when `r := [rel x y | R]` to `R{b/x,\na/y}`, as the expanding coercion is now only inserted in the _last_\napplication.\nThe old definition made it possible to have a `simpl_rel >-> rel`\ncoercion that does not block expansion, but this can now be achieved\nmore economically with the `Arguments … /.` annotation.\n**  Deleted the `[rel of P]` notation which is no longer needed with\nthe new `simpl_rel` definition, and was broken anyway.\n** Added `relpre f R` definition of functional preimage of a notation.\n** `comp` and `idfun` are now proper definitions, using the `Arguments\n… /.` annotation to specify simplification on application.\n** Added `{pred T}` syntax for the alias of `pred T` in the `pred_sort`\ncoercion class; deleted the `pred_class` alias: one should either\nuse `pred_sort` in `Coercion` declarations, or `{pred T}` in type casts.\nUsed `{pred T}` as appropriate in localised predicate (`{in …, …}`) theory.\nExtended and corrected `pred` coercion internal documentation.\n** Simplified the `predType` structure by removing the redundant\nexplicit `mem_pred` subfield, and replacing it with an interlocked\nprojection; deleted `mkPredType`, now replaced by `PredType`.\n** Added (and extensively documented) a `nonPropType` interface\nmatching types that do _not_ have sort `Prop`, and used it to remove\nthe non-standard maximal implicits annotation on `Some_inj` introduced\nin #6911 by @anton-trumov; included `test-suite` entry for `nonPropType`.\n** Documented the design of the four structures used to control the\nmatching of `inE` and related predicate rewriting lemmas; added `test-suite`\nentry covering the `pred` rewriting control idioms.\n** Used `only printing` annotations to get rid of token concatenation\nhacks.\n** Fixed boolean and general `if b return t then …` notation so that\n`b` is bound in `t`. This is a minor source of incompatibility for\nmisuses of this syntax when `b` is _not_ bound in `t`, and `(if b then\n…) : t` should have been used instead.\n** Reserved all `ssreflect`, `ssrfun` and `ssrbool` notation at the top\nof the file, adding some printing boxes, and removing some spurious\n`[pred .. => ..]` reserved notation.\n** Fixed parsing precedence and format of `<hidden n>` notation, and\ndeclared and put it in an explicit `ssr_scope`.\n** Used module-and-functor idiom to ensure that the `simpl_pred T >-\npred T` _and_ `simpl_pred T >-> {pred T}` coercions are realised by the\n_same_ Gallina constant.\n** Updated `CREDITS`.\nThe policy implied by this PR: that `{pred T}` should systematically\nbe used as the generic collective predicate type, was implemented in MathComp\nmath-comp/math-comp#237. As a result  `simpl_pred >-> pred_sort` coercions\nbecame more frequent, as it turned out they were not, as incorrectly stated\nin `ssrbool` internal comments, impossible: while the `simplPredType`\ncanonical instance does solve all `simpl_pred T =~= pred_sort ?pT`\ninstances, it does _not_ solve `simpl_pred T =~= {pred T}`, and so the\ncoercion will be used in that case. However it appeared that having two\ndifferent coercion constants confused the SSReflect keyed matching\nheuristic, hence the fix introduced here. This has entailed some\nrearrangement of `ssrbool`: the large  `Predicates` section had to be\nbroken up as the module-functor idiom for aliasing coercions cannot be\nused inside a section.\n","author_name":"Georges Gonthier","author_email":"georges.gonthier@inria.fr","authored_date":"2019-04-24T23:02:08.000+02:00","committer_name":"Georges Gonthier","committer_email":"georges.gonthier@inria.fr","committed_date":"2019-04-29T18:12:15.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ab73036c4d5c46759335647b380dde1b1ea0f1ff"},"pipeline":{"id":58995040,"iid":8663,"project_id":6138686,"sha":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","ref":"pr-9995","status":"failed","source":"push","created_at":"2019-04-29T16:27:55.342Z","updated_at":"2019-04-29T18:04:16.591Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/58995040"},"web_url":"https://gitlab.com/coq/coq/-/jobs/204446244","artifacts":[{"file_type":"trace","size":29691,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2019-05-29T17:00:46.982Z","tag_list":[]}
{"id":204446243,"status":"success","stage":"test","name":"doc:refman:dune","ref":"pr-9995","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-04-29T16:27:55.623Z","started_at":"2019-04-29T16:46:22.384Z","finished_at":"2019-04-29T17:02:24.187Z","duration":961.80303,"queued_duration":0.387156,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","short_id":"ab73036c","created_at":"2019-04-29T18:12:15.000+02:00","parent_ids":["61a1b4c46e4584e9337f9298b5f0053858a03c93"],"title":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface","message":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface\n\n** Changed definition of `simpl_rel` to `T -> `simpl_pred T`, so that\n`inE` will now expand `a \\in r b`, when `r := [rel x y | R]` to `R{b/x,\na/y}`, as the expanding coercion is now only inserted in the _last_\napplication.\nThe old definition made it possible to have a `simpl_rel >-> rel`\ncoercion that does not block expansion, but this can now be achieved\nmore economically with the `Arguments … /.` annotation.\n**  Deleted the `[rel of P]` notation which is no longer needed with\nthe new `simpl_rel` definition, and was broken anyway.\n** Added `relpre f R` definition of functional preimage of a notation.\n** `comp` and `idfun` are now proper definitions, using the `Arguments\n… /.` annotation to specify simplification on application.\n** Added `{pred T}` syntax for the alias of `pred T` in the `pred_sort`\ncoercion class; deleted the `pred_class` alias: one should either\nuse `pred_sort` in `Coercion` declarations, or `{pred T}` in type casts.\nUsed `{pred T}` as appropriate in localised predicate (`{in …, …}`) theory.\nExtended and corrected `pred` coercion internal documentation.\n** Simplified the `predType` structure by removing the redundant\nexplicit `mem_pred` subfield, and replacing it with an interlocked\nprojection; deleted `mkPredType`, now replaced by `PredType`.\n** Added (and extensively documented) a `nonPropType` interface\nmatching types that do _not_ have sort `Prop`, and used it to remove\nthe non-standard maximal implicits annotation on `Some_inj` introduced\nin #6911 by @anton-trumov; included `test-suite` entry for `nonPropType`.\n** Documented the design of the four structures used to control the\nmatching of `inE` and related predicate rewriting lemmas; added `test-suite`\nentry covering the `pred` rewriting control idioms.\n** Used `only printing` annotations to get rid of token concatenation\nhacks.\n** Fixed boolean and general `if b return t then …` notation so that\n`b` is bound in `t`. This is a minor source of incompatibility for\nmisuses of this syntax when `b` is _not_ bound in `t`, and `(if b then\n…) : t` should have been used instead.\n** Reserved all `ssreflect`, `ssrfun` and `ssrbool` notation at the top\nof the file, adding some printing boxes, and removing some spurious\n`[pred .. => ..]` reserved notation.\n** Fixed parsing precedence and format of `<hidden n>` notation, and\ndeclared and put it in an explicit `ssr_scope`.\n** Used module-and-functor idiom to ensure that the `simpl_pred T >-\npred T` _and_ `simpl_pred T >-> {pred T}` coercions are realised by the\n_same_ Gallina constant.\n** Updated `CREDITS`.\nThe policy implied by this PR: that `{pred T}` should systematically\nbe used as the generic collective predicate type, was implemented in MathComp\nmath-comp/math-comp#237. As a result  `simpl_pred >-> pred_sort` coercions\nbecame more frequent, as it turned out they were not, as incorrectly stated\nin `ssrbool` internal comments, impossible: while the `simplPredType`\ncanonical instance does solve all `simpl_pred T =~= pred_sort ?pT`\ninstances, it does _not_ solve `simpl_pred T =~= {pred T}`, and so the\ncoercion will be used in that case. However it appeared that having two\ndifferent coercion constants confused the SSReflect keyed matching\nheuristic, hence the fix introduced here. This has entailed some\nrearrangement of `ssrbool`: the large  `Predicates` section had to be\nbroken up as the module-functor idiom for aliasing coercions cannot be\nused inside a section.\n","author_name":"Georges Gonthier","author_email":"georges.gonthier@inria.fr","authored_date":"2019-04-24T23:02:08.000+02:00","committer_name":"Georges Gonthier","committer_email":"georges.gonthier@inria.fr","committed_date":"2019-04-29T18:12:15.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ab73036c4d5c46759335647b380dde1b1ea0f1ff"},"pipeline":{"id":58995040,"iid":8663,"project_id":6138686,"sha":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","ref":"pr-9995","status":"failed","source":"push","created_at":"2019-04-29T16:27:55.342Z","updated_at":"2019-04-29T18:04:16.591Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/58995040"},"web_url":"https://gitlab.com/coq/coq/-/jobs/204446243","artifacts":[{"file_type":"trace","size":28390,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2019-05-29T17:02:22.395Z","tag_list":[]}
{"id":204446242,"status":"success","stage":"test","name":"doc:refman","ref":"pr-9995","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-04-29T16:27:55.603Z","started_at":"2019-04-29T16:46:22.622Z","finished_at":"2019-04-29T16:53:22.725Z","duration":420.102835,"queued_duration":0.557277,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","short_id":"ab73036c","created_at":"2019-04-29T18:12:15.000+02:00","parent_ids":["61a1b4c46e4584e9337f9298b5f0053858a03c93"],"title":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface","message":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface\n\n** Changed definition of `simpl_rel` to `T -> `simpl_pred T`, so that\n`inE` will now expand `a \\in r b`, when `r := [rel x y | R]` to `R{b/x,\na/y}`, as the expanding coercion is now only inserted in the _last_\napplication.\nThe old definition made it possible to have a `simpl_rel >-> rel`\ncoercion that does not block expansion, but this can now be achieved\nmore economically with the `Arguments … /.` annotation.\n**  Deleted the `[rel of P]` notation which is no longer needed with\nthe new `simpl_rel` definition, and was broken anyway.\n** Added `relpre f R` definition of functional preimage of a notation.\n** `comp` and `idfun` are now proper definitions, using the `Arguments\n… /.` annotation to specify simplification on application.\n** Added `{pred T}` syntax for the alias of `pred T` in the `pred_sort`\ncoercion class; deleted the `pred_class` alias: one should either\nuse `pred_sort` in `Coercion` declarations, or `{pred T}` in type casts.\nUsed `{pred T}` as appropriate in localised predicate (`{in …, …}`) theory.\nExtended and corrected `pred` coercion internal documentation.\n** Simplified the `predType` structure by removing the redundant\nexplicit `mem_pred` subfield, and replacing it with an interlocked\nprojection; deleted `mkPredType`, now replaced by `PredType`.\n** Added (and extensively documented) a `nonPropType` interface\nmatching types that do _not_ have sort `Prop`, and used it to remove\nthe non-standard maximal implicits annotation on `Some_inj` introduced\nin #6911 by @anton-trumov; included `test-suite` entry for `nonPropType`.\n** Documented the design of the four structures used to control the\nmatching of `inE` and related predicate rewriting lemmas; added `test-suite`\nentry covering the `pred` rewriting control idioms.\n** Used `only printing` annotations to get rid of token concatenation\nhacks.\n** Fixed boolean and general `if b return t then …` notation so that\n`b` is bound in `t`. This is a minor source of incompatibility for\nmisuses of this syntax when `b` is _not_ bound in `t`, and `(if b then\n…) : t` should have been used instead.\n** Reserved all `ssreflect`, `ssrfun` and `ssrbool` notation at the top\nof the file, adding some printing boxes, and removing some spurious\n`[pred .. => ..]` reserved notation.\n** Fixed parsing precedence and format of `<hidden n>` notation, and\ndeclared and put it in an explicit `ssr_scope`.\n** Used module-and-functor idiom to ensure that the `simpl_pred T >-\npred T` _and_ `simpl_pred T >-> {pred T}` coercions are realised by the\n_same_ Gallina constant.\n** Updated `CREDITS`.\nThe policy implied by this PR: that `{pred T}` should systematically\nbe used as the generic collective predicate type, was implemented in MathComp\nmath-comp/math-comp#237. As a result  `simpl_pred >-> pred_sort` coercions\nbecame more frequent, as it turned out they were not, as incorrectly stated\nin `ssrbool` internal comments, impossible: while the `simplPredType`\ncanonical instance does solve all `simpl_pred T =~= pred_sort ?pT`\ninstances, it does _not_ solve `simpl_pred T =~= {pred T}`, and so the\ncoercion will be used in that case. However it appeared that having two\ndifferent coercion constants confused the SSReflect keyed matching\nheuristic, hence the fix introduced here. This has entailed some\nrearrangement of `ssrbool`: the large  `Predicates` section had to be\nbroken up as the module-functor idiom for aliasing coercions cannot be\nused inside a section.\n","author_name":"Georges Gonthier","author_email":"georges.gonthier@inria.fr","authored_date":"2019-04-24T23:02:08.000+02:00","committer_name":"Georges Gonthier","committer_email":"georges.gonthier@inria.fr","committed_date":"2019-04-29T18:12:15.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ab73036c4d5c46759335647b380dde1b1ea0f1ff"},"pipeline":{"id":58995040,"iid":8663,"project_id":6138686,"sha":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","ref":"pr-9995","status":"failed","source":"push","created_at":"2019-04-29T16:27:55.342Z","updated_at":"2019-04-29T18:04:16.591Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/58995040"},"web_url":"https://gitlab.com/coq/coq/-/jobs/204446242","artifacts":[{"file_type":"trace","size":1097311,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":204446241,"status":"failed","stage":"test","name":"pkg:nix","ref":"pr-9995","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-04-29T16:27:55.580Z","started_at":"2019-04-29T16:46:22.564Z","finished_at":"2019-04-29T17:31:30.074Z","duration":2707.510427,"queued_duration":0.38217,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","short_id":"ab73036c","created_at":"2019-04-29T18:12:15.000+02:00","parent_ids":["61a1b4c46e4584e9337f9298b5f0053858a03c93"],"title":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface","message":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface\n\n** Changed definition of `simpl_rel` to `T -> `simpl_pred T`, so that\n`inE` will now expand `a \\in r b`, when `r := [rel x y | R]` to `R{b/x,\na/y}`, as the expanding coercion is now only inserted in the _last_\napplication.\nThe old definition made it possible to have a `simpl_rel >-> rel`\ncoercion that does not block expansion, but this can now be achieved\nmore economically with the `Arguments … /.` annotation.\n**  Deleted the `[rel of P]` notation which is no longer needed with\nthe new `simpl_rel` definition, and was broken anyway.\n** Added `relpre f R` definition of functional preimage of a notation.\n** `comp` and `idfun` are now proper definitions, using the `Arguments\n… /.` annotation to specify simplification on application.\n** Added `{pred T}` syntax for the alias of `pred T` in the `pred_sort`\ncoercion class; deleted the `pred_class` alias: one should either\nuse `pred_sort` in `Coercion` declarations, or `{pred T}` in type casts.\nUsed `{pred T}` as appropriate in localised predicate (`{in …, …}`) theory.\nExtended and corrected `pred` coercion internal documentation.\n** Simplified the `predType` structure by removing the redundant\nexplicit `mem_pred` subfield, and replacing it with an interlocked\nprojection; deleted `mkPredType`, now replaced by `PredType`.\n** Added (and extensively documented) a `nonPropType` interface\nmatching types that do _not_ have sort `Prop`, and used it to remove\nthe non-standard maximal implicits annotation on `Some_inj` introduced\nin #6911 by @anton-trumov; included `test-suite` entry for `nonPropType`.\n** Documented the design of the four structures used to control the\nmatching of `inE` and related predicate rewriting lemmas; added `test-suite`\nentry covering the `pred` rewriting control idioms.\n** Used `only printing` annotations to get rid of token concatenation\nhacks.\n** Fixed boolean and general `if b return t then …` notation so that\n`b` is bound in `t`. This is a minor source of incompatibility for\nmisuses of this syntax when `b` is _not_ bound in `t`, and `(if b then\n…) : t` should have been used instead.\n** Reserved all `ssreflect`, `ssrfun` and `ssrbool` notation at the top\nof the file, adding some printing boxes, and removing some spurious\n`[pred .. => ..]` reserved notation.\n** Fixed parsing precedence and format of `<hidden n>` notation, and\ndeclared and put it in an explicit `ssr_scope`.\n** Used module-and-functor idiom to ensure that the `simpl_pred T >-\npred T` _and_ `simpl_pred T >-> {pred T}` coercions are realised by the\n_same_ Gallina constant.\n** Updated `CREDITS`.\nThe policy implied by this PR: that `{pred T}` should systematically\nbe used as the generic collective predicate type, was implemented in MathComp\nmath-comp/math-comp#237. As a result  `simpl_pred >-> pred_sort` coercions\nbecame more frequent, as it turned out they were not, as incorrectly stated\nin `ssrbool` internal comments, impossible: while the `simplPredType`\ncanonical instance does solve all `simpl_pred T =~= pred_sort ?pT`\ninstances, it does _not_ solve `simpl_pred T =~= {pred T}`, and so the\ncoercion will be used in that case. However it appeared that having two\ndifferent coercion constants confused the SSReflect keyed matching\nheuristic, hence the fix introduced here. This has entailed some\nrearrangement of `ssrbool`: the large  `Predicates` section had to be\nbroken up as the module-functor idiom for aliasing coercions cannot be\nused inside a section.\n","author_name":"Georges Gonthier","author_email":"georges.gonthier@inria.fr","authored_date":"2019-04-24T23:02:08.000+02:00","committer_name":"Georges Gonthier","committer_email":"georges.gonthier@inria.fr","committed_date":"2019-04-29T18:12:15.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ab73036c4d5c46759335647b380dde1b1ea0f1ff"},"pipeline":{"id":58995040,"iid":8663,"project_id":6138686,"sha":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","ref":"pr-9995","status":"failed","source":"push","created_at":"2019-04-29T16:27:55.342Z","updated_at":"2019-04-29T18:04:16.591Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/58995040"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/204446241","artifacts":[{"file_type":"trace","size":525760,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":204446240,"status":"success","stage":"test","name":"pkg:opam","ref":"pr-9995","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-04-29T16:27:55.559Z","started_at":"2019-04-29T16:46:23.164Z","finished_at":"2019-04-29T17:11:00.046Z","duration":1476.881358,"queued_duration":0.909602,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","short_id":"ab73036c","created_at":"2019-04-29T18:12:15.000+02:00","parent_ids":["61a1b4c46e4584e9337f9298b5f0053858a03c93"],"title":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface","message":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface\n\n** Changed definition of `simpl_rel` to `T -> `simpl_pred T`, so that\n`inE` will now expand `a \\in r b`, when `r := [rel x y | R]` to `R{b/x,\na/y}`, as the expanding coercion is now only inserted in the _last_\napplication.\nThe old definition made it possible to have a `simpl_rel >-> rel`\ncoercion that does not block expansion, but this can now be achieved\nmore economically with the `Arguments … /.` annotation.\n**  Deleted the `[rel of P]` notation which is no longer needed with\nthe new `simpl_rel` definition, and was broken anyway.\n** Added `relpre f R` definition of functional preimage of a notation.\n** `comp` and `idfun` are now proper definitions, using the `Arguments\n… /.` annotation to specify simplification on application.\n** Added `{pred T}` syntax for the alias of `pred T` in the `pred_sort`\ncoercion class; deleted the `pred_class` alias: one should either\nuse `pred_sort` in `Coercion` declarations, or `{pred T}` in type casts.\nUsed `{pred T}` as appropriate in localised predicate (`{in …, …}`) theory.\nExtended and corrected `pred` coercion internal documentation.\n** Simplified the `predType` structure by removing the redundant\nexplicit `mem_pred` subfield, and replacing it with an interlocked\nprojection; deleted `mkPredType`, now replaced by `PredType`.\n** Added (and extensively documented) a `nonPropType` interface\nmatching types that do _not_ have sort `Prop`, and used it to remove\nthe non-standard maximal implicits annotation on `Some_inj` introduced\nin #6911 by @anton-trumov; included `test-suite` entry for `nonPropType`.\n** Documented the design of the four structures used to control the\nmatching of `inE` and related predicate rewriting lemmas; added `test-suite`\nentry covering the `pred` rewriting control idioms.\n** Used `only printing` annotations to get rid of token concatenation\nhacks.\n** Fixed boolean and general `if b return t then …` notation so that\n`b` is bound in `t`. This is a minor source of incompatibility for\nmisuses of this syntax when `b` is _not_ bound in `t`, and `(if b then\n…) : t` should have been used instead.\n** Reserved all `ssreflect`, `ssrfun` and `ssrbool` notation at the top\nof the file, adding some printing boxes, and removing some spurious\n`[pred .. => ..]` reserved notation.\n** Fixed parsing precedence and format of `<hidden n>` notation, and\ndeclared and put it in an explicit `ssr_scope`.\n** Used module-and-functor idiom to ensure that the `simpl_pred T >-\npred T` _and_ `simpl_pred T >-> {pred T}` coercions are realised by the\n_same_ Gallina constant.\n** Updated `CREDITS`.\nThe policy implied by this PR: that `{pred T}` should systematically\nbe used as the generic collective predicate type, was implemented in MathComp\nmath-comp/math-comp#237. As a result  `simpl_pred >-> pred_sort` coercions\nbecame more frequent, as it turned out they were not, as incorrectly stated\nin `ssrbool` internal comments, impossible: while the `simplPredType`\ncanonical instance does solve all `simpl_pred T =~= pred_sort ?pT`\ninstances, it does _not_ solve `simpl_pred T =~= {pred T}`, and so the\ncoercion will be used in that case. However it appeared that having two\ndifferent coercion constants confused the SSReflect keyed matching\nheuristic, hence the fix introduced here. This has entailed some\nrearrangement of `ssrbool`: the large  `Predicates` section had to be\nbroken up as the module-functor idiom for aliasing coercions cannot be\nused inside a section.\n","author_name":"Georges Gonthier","author_email":"georges.gonthier@inria.fr","authored_date":"2019-04-24T23:02:08.000+02:00","committer_name":"Georges Gonthier","committer_email":"georges.gonthier@inria.fr","committed_date":"2019-04-29T18:12:15.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ab73036c4d5c46759335647b380dde1b1ea0f1ff"},"pipeline":{"id":58995040,"iid":8663,"project_id":6138686,"sha":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","ref":"pr-9995","status":"failed","source":"push","created_at":"2019-04-29T16:27:55.342Z","updated_at":"2019-04-29T18:04:16.591Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/58995040"},"web_url":"https://gitlab.com/coq/coq/-/jobs/204446240","artifacts":[{"file_type":"trace","size":24880,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":204446239,"status":"success","stage":"test","name":"lint","ref":"pr-9995","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-04-29T16:27:55.541Z","started_at":"2019-04-29T16:46:22.717Z","finished_at":"2019-04-29T16:47:50.011Z","duration":87.294159,"queued_duration":0.415356,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","short_id":"ab73036c","created_at":"2019-04-29T18:12:15.000+02:00","parent_ids":["61a1b4c46e4584e9337f9298b5f0053858a03c93"],"title":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface","message":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface\n\n** Changed definition of `simpl_rel` to `T -> `simpl_pred T`, so that\n`inE` will now expand `a \\in r b`, when `r := [rel x y | R]` to `R{b/x,\na/y}`, as the expanding coercion is now only inserted in the _last_\napplication.\nThe old definition made it possible to have a `simpl_rel >-> rel`\ncoercion that does not block expansion, but this can now be achieved\nmore economically with the `Arguments … /.` annotation.\n**  Deleted the `[rel of P]` notation which is no longer needed with\nthe new `simpl_rel` definition, and was broken anyway.\n** Added `relpre f R` definition of functional preimage of a notation.\n** `comp` and `idfun` are now proper definitions, using the `Arguments\n… /.` annotation to specify simplification on application.\n** Added `{pred T}` syntax for the alias of `pred T` in the `pred_sort`\ncoercion class; deleted the `pred_class` alias: one should either\nuse `pred_sort` in `Coercion` declarations, or `{pred T}` in type casts.\nUsed `{pred T}` as appropriate in localised predicate (`{in …, …}`) theory.\nExtended and corrected `pred` coercion internal documentation.\n** Simplified the `predType` structure by removing the redundant\nexplicit `mem_pred` subfield, and replacing it with an interlocked\nprojection; deleted `mkPredType`, now replaced by `PredType`.\n** Added (and extensively documented) a `nonPropType` interface\nmatching types that do _not_ have sort `Prop`, and used it to remove\nthe non-standard maximal implicits annotation on `Some_inj` introduced\nin #6911 by @anton-trumov; included `test-suite` entry for `nonPropType`.\n** Documented the design of the four structures used to control the\nmatching of `inE` and related predicate rewriting lemmas; added `test-suite`\nentry covering the `pred` rewriting control idioms.\n** Used `only printing` annotations to get rid of token concatenation\nhacks.\n** Fixed boolean and general `if b return t then …` notation so that\n`b` is bound in `t`. This is a minor source of incompatibility for\nmisuses of this syntax when `b` is _not_ bound in `t`, and `(if b then\n…) : t` should have been used instead.\n** Reserved all `ssreflect`, `ssrfun` and `ssrbool` notation at the top\nof the file, adding some printing boxes, and removing some spurious\n`[pred .. => ..]` reserved notation.\n** Fixed parsing precedence and format of `<hidden n>` notation, and\ndeclared and put it in an explicit `ssr_scope`.\n** Used module-and-functor idiom to ensure that the `simpl_pred T >-\npred T` _and_ `simpl_pred T >-> {pred T}` coercions are realised by the\n_same_ Gallina constant.\n** Updated `CREDITS`.\nThe policy implied by this PR: that `{pred T}` should systematically\nbe used as the generic collective predicate type, was implemented in MathComp\nmath-comp/math-comp#237. As a result  `simpl_pred >-> pred_sort` coercions\nbecame more frequent, as it turned out they were not, as incorrectly stated\nin `ssrbool` internal comments, impossible: while the `simplPredType`\ncanonical instance does solve all `simpl_pred T =~= pred_sort ?pT`\ninstances, it does _not_ solve `simpl_pred T =~= {pred T}`, and so the\ncoercion will be used in that case. However it appeared that having two\ndifferent coercion constants confused the SSReflect keyed matching\nheuristic, hence the fix introduced here. This has entailed some\nrearrangement of `ssrbool`: the large  `Predicates` section had to be\nbroken up as the module-functor idiom for aliasing coercions cannot be\nused inside a section.\n","author_name":"Georges Gonthier","author_email":"georges.gonthier@inria.fr","authored_date":"2019-04-24T23:02:08.000+02:00","committer_name":"Georges Gonthier","committer_email":"georges.gonthier@inria.fr","committed_date":"2019-04-29T18:12:15.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ab73036c4d5c46759335647b380dde1b1ea0f1ff"},"pipeline":{"id":58995040,"iid":8663,"project_id":6138686,"sha":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","ref":"pr-9995","status":"failed","source":"push","created_at":"2019-04-29T16:27:55.342Z","updated_at":"2019-04-29T18:04:16.591Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/58995040"},"web_url":"https://gitlab.com/coq/coq/-/jobs/204446239","artifacts":[{"file_type":"trace","size":16963,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":204446236,"status":"success","stage":"test","name":"windows64","ref":"pr-9995","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-04-29T16:27:55.515Z","started_at":"2019-04-29T16:56:24.317Z","finished_at":"2019-04-29T17:43:42.193Z","duration":2837.875758,"queued_duration":601.971603,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","short_id":"ab73036c","created_at":"2019-04-29T18:12:15.000+02:00","parent_ids":["61a1b4c46e4584e9337f9298b5f0053858a03c93"],"title":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface","message":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface\n\n** Changed definition of `simpl_rel` to `T -> `simpl_pred T`, so that\n`inE` will now expand `a \\in r b`, when `r := [rel x y | R]` to `R{b/x,\na/y}`, as the expanding coercion is now only inserted in the _last_\napplication.\nThe old definition made it possible to have a `simpl_rel >-> rel`\ncoercion that does not block expansion, but this can now be achieved\nmore economically with the `Arguments … /.` annotation.\n**  Deleted the `[rel of P]` notation which is no longer needed with\nthe new `simpl_rel` definition, and was broken anyway.\n** Added `relpre f R` definition of functional preimage of a notation.\n** `comp` and `idfun` are now proper definitions, using the `Arguments\n… /.` annotation to specify simplification on application.\n** Added `{pred T}` syntax for the alias of `pred T` in the `pred_sort`\ncoercion class; deleted the `pred_class` alias: one should either\nuse `pred_sort` in `Coercion` declarations, or `{pred T}` in type casts.\nUsed `{pred T}` as appropriate in localised predicate (`{in …, …}`) theory.\nExtended and corrected `pred` coercion internal documentation.\n** Simplified the `predType` structure by removing the redundant\nexplicit `mem_pred` subfield, and replacing it with an interlocked\nprojection; deleted `mkPredType`, now replaced by `PredType`.\n** Added (and extensively documented) a `nonPropType` interface\nmatching types that do _not_ have sort `Prop`, and used it to remove\nthe non-standard maximal implicits annotation on `Some_inj` introduced\nin #6911 by @anton-trumov; included `test-suite` entry for `nonPropType`.\n** Documented the design of the four structures used to control the\nmatching of `inE` and related predicate rewriting lemmas; added `test-suite`\nentry covering the `pred` rewriting control idioms.\n** Used `only printing` annotations to get rid of token concatenation\nhacks.\n** Fixed boolean and general `if b return t then …` notation so that\n`b` is bound in `t`. This is a minor source of incompatibility for\nmisuses of this syntax when `b` is _not_ bound in `t`, and `(if b then\n…) : t` should have been used instead.\n** Reserved all `ssreflect`, `ssrfun` and `ssrbool` notation at the top\nof the file, adding some printing boxes, and removing some spurious\n`[pred .. => ..]` reserved notation.\n** Fixed parsing precedence and format of `<hidden n>` notation, and\ndeclared and put it in an explicit `ssr_scope`.\n** Used module-and-functor idiom to ensure that the `simpl_pred T >-\npred T` _and_ `simpl_pred T >-> {pred T}` coercions are realised by the\n_same_ Gallina constant.\n** Updated `CREDITS`.\nThe policy implied by this PR: that `{pred T}` should systematically\nbe used as the generic collective predicate type, was implemented in MathComp\nmath-comp/math-comp#237. As a result  `simpl_pred >-> pred_sort` coercions\nbecame more frequent, as it turned out they were not, as incorrectly stated\nin `ssrbool` internal comments, impossible: while the `simplPredType`\ncanonical instance does solve all `simpl_pred T =~= pred_sort ?pT`\ninstances, it does _not_ solve `simpl_pred T =~= {pred T}`, and so the\ncoercion will be used in that case. However it appeared that having two\ndifferent coercion constants confused the SSReflect keyed matching\nheuristic, hence the fix introduced here. This has entailed some\nrearrangement of `ssrbool`: the large  `Predicates` section had to be\nbroken up as the module-functor idiom for aliasing coercions cannot be\nused inside a section.\n","author_name":"Georges Gonthier","author_email":"georges.gonthier@inria.fr","authored_date":"2019-04-24T23:02:08.000+02:00","committer_name":"Georges Gonthier","committer_email":"georges.gonthier@inria.fr","committed_date":"2019-04-29T18:12:15.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ab73036c4d5c46759335647b380dde1b1ea0f1ff"},"pipeline":{"id":58995040,"iid":8663,"project_id":6138686,"sha":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","ref":"pr-9995","status":"failed","source":"push","created_at":"2019-04-29T16:27:55.342Z","updated_at":"2019-04-29T18:04:16.591Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/58995040"},"web_url":"https://gitlab.com/coq/coq/-/jobs/204446236","artifacts":[{"file_type":"trace","size":257698,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":"2019-05-06T17:43:39.278Z","tag_list":["windows"]}
{"id":204446235,"status":"success","stage":"test","name":"build:base+async","ref":"pr-9995","tag":false,"coverage":null,"allow_failure":true,"created_at":"2019-04-29T16:27:55.497Z","started_at":"2019-04-29T16:46:22.749Z","finished_at":"2019-04-29T17:51:22.061Z","duration":3899.311622,"queued_duration":0.356232,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","short_id":"ab73036c","created_at":"2019-04-29T18:12:15.000+02:00","parent_ids":["61a1b4c46e4584e9337f9298b5f0053858a03c93"],"title":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface","message":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface\n\n** Changed definition of `simpl_rel` to `T -> `simpl_pred T`, so that\n`inE` will now expand `a \\in r b`, when `r := [rel x y | R]` to `R{b/x,\na/y}`, as the expanding coercion is now only inserted in the _last_\napplication.\nThe old definition made it possible to have a `simpl_rel >-> rel`\ncoercion that does not block expansion, but this can now be achieved\nmore economically with the `Arguments … /.` annotation.\n**  Deleted the `[rel of P]` notation which is no longer needed with\nthe new `simpl_rel` definition, and was broken anyway.\n** Added `relpre f R` definition of functional preimage of a notation.\n** `comp` and `idfun` are now proper definitions, using the `Arguments\n… /.` annotation to specify simplification on application.\n** Added `{pred T}` syntax for the alias of `pred T` in the `pred_sort`\ncoercion class; deleted the `pred_class` alias: one should either\nuse `pred_sort` in `Coercion` declarations, or `{pred T}` in type casts.\nUsed `{pred T}` as appropriate in localised predicate (`{in …, …}`) theory.\nExtended and corrected `pred` coercion internal documentation.\n** Simplified the `predType` structure by removing the redundant\nexplicit `mem_pred` subfield, and replacing it with an interlocked\nprojection; deleted `mkPredType`, now replaced by `PredType`.\n** Added (and extensively documented) a `nonPropType` interface\nmatching types that do _not_ have sort `Prop`, and used it to remove\nthe non-standard maximal implicits annotation on `Some_inj` introduced\nin #6911 by @anton-trumov; included `test-suite` entry for `nonPropType`.\n** Documented the design of the four structures used to control the\nmatching of `inE` and related predicate rewriting lemmas; added `test-suite`\nentry covering the `pred` rewriting control idioms.\n** Used `only printing` annotations to get rid of token concatenation\nhacks.\n** Fixed boolean and general `if b return t then …` notation so that\n`b` is bound in `t`. This is a minor source of incompatibility for\nmisuses of this syntax when `b` is _not_ bound in `t`, and `(if b then\n…) : t` should have been used instead.\n** Reserved all `ssreflect`, `ssrfun` and `ssrbool` notation at the top\nof the file, adding some printing boxes, and removing some spurious\n`[pred .. => ..]` reserved notation.\n** Fixed parsing precedence and format of `<hidden n>` notation, and\ndeclared and put it in an explicit `ssr_scope`.\n** Used module-and-functor idiom to ensure that the `simpl_pred T >-\npred T` _and_ `simpl_pred T >-> {pred T}` coercions are realised by the\n_same_ Gallina constant.\n** Updated `CREDITS`.\nThe policy implied by this PR: that `{pred T}` should systematically\nbe used as the generic collective predicate type, was implemented in MathComp\nmath-comp/math-comp#237. As a result  `simpl_pred >-> pred_sort` coercions\nbecame more frequent, as it turned out they were not, as incorrectly stated\nin `ssrbool` internal comments, impossible: while the `simplPredType`\ncanonical instance does solve all `simpl_pred T =~= pred_sort ?pT`\ninstances, it does _not_ solve `simpl_pred T =~= {pred T}`, and so the\ncoercion will be used in that case. However it appeared that having two\ndifferent coercion constants confused the SSReflect keyed matching\nheuristic, hence the fix introduced here. This has entailed some\nrearrangement of `ssrbool`: the large  `Predicates` section had to be\nbroken up as the module-functor idiom for aliasing coercions cannot be\nused inside a section.\n","author_name":"Georges Gonthier","author_email":"georges.gonthier@inria.fr","authored_date":"2019-04-24T23:02:08.000+02:00","committer_name":"Georges Gonthier","committer_email":"georges.gonthier@inria.fr","committed_date":"2019-04-29T18:12:15.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ab73036c4d5c46759335647b380dde1b1ea0f1ff"},"pipeline":{"id":58995040,"iid":8663,"project_id":6138686,"sha":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","ref":"pr-9995","status":"failed","source":"push","created_at":"2019-04-29T16:27:55.342Z","updated_at":"2019-04-29T18:04:16.591Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/58995040"},"web_url":"https://gitlab.com/coq/coq/-/jobs/204446235","artifacts":[{"file_type":"trace","size":244262,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2019-05-06T17:51:20.664Z","tag_list":[]}
{"id":204446233,"status":"success","stage":"build","name":"build:quick","ref":"pr-9995","tag":false,"coverage":null,"allow_failure":true,"created_at":"2019-04-29T16:27:55.456Z","started_at":"2019-04-29T16:28:00.430Z","finished_at":"2019-04-29T16:46:16.478Z","duration":1096.048146,"queued_duration":1.677051,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","short_id":"ab73036c","created_at":"2019-04-29T18:12:15.000+02:00","parent_ids":["61a1b4c46e4584e9337f9298b5f0053858a03c93"],"title":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface","message":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface\n\n** Changed definition of `simpl_rel` to `T -> `simpl_pred T`, so that\n`inE` will now expand `a \\in r b`, when `r := [rel x y | R]` to `R{b/x,\na/y}`, as the expanding coercion is now only inserted in the _last_\napplication.\nThe old definition made it possible to have a `simpl_rel >-> rel`\ncoercion that does not block expansion, but this can now be achieved\nmore economically with the `Arguments … /.` annotation.\n**  Deleted the `[rel of P]` notation which is no longer needed with\nthe new `simpl_rel` definition, and was broken anyway.\n** Added `relpre f R` definition of functional preimage of a notation.\n** `comp` and `idfun` are now proper definitions, using the `Arguments\n… /.` annotation to specify simplification on application.\n** Added `{pred T}` syntax for the alias of `pred T` in the `pred_sort`\ncoercion class; deleted the `pred_class` alias: one should either\nuse `pred_sort` in `Coercion` declarations, or `{pred T}` in type casts.\nUsed `{pred T}` as appropriate in localised predicate (`{in …, …}`) theory.\nExtended and corrected `pred` coercion internal documentation.\n** Simplified the `predType` structure by removing the redundant\nexplicit `mem_pred` subfield, and replacing it with an interlocked\nprojection; deleted `mkPredType`, now replaced by `PredType`.\n** Added (and extensively documented) a `nonPropType` interface\nmatching types that do _not_ have sort `Prop`, and used it to remove\nthe non-standard maximal implicits annotation on `Some_inj` introduced\nin #6911 by @anton-trumov; included `test-suite` entry for `nonPropType`.\n** Documented the design of the four structures used to control the\nmatching of `inE` and related predicate rewriting lemmas; added `test-suite`\nentry covering the `pred` rewriting control idioms.\n** Used `only printing` annotations to get rid of token concatenation\nhacks.\n** Fixed boolean and general `if b return t then …` notation so that\n`b` is bound in `t`. This is a minor source of incompatibility for\nmisuses of this syntax when `b` is _not_ bound in `t`, and `(if b then\n…) : t` should have been used instead.\n** Reserved all `ssreflect`, `ssrfun` and `ssrbool` notation at the top\nof the file, adding some printing boxes, and removing some spurious\n`[pred .. => ..]` reserved notation.\n** Fixed parsing precedence and format of `<hidden n>` notation, and\ndeclared and put it in an explicit `ssr_scope`.\n** Used module-and-functor idiom to ensure that the `simpl_pred T >-\npred T` _and_ `simpl_pred T >-> {pred T}` coercions are realised by the\n_same_ Gallina constant.\n** Updated `CREDITS`.\nThe policy implied by this PR: that `{pred T}` should systematically\nbe used as the generic collective predicate type, was implemented in MathComp\nmath-comp/math-comp#237. As a result  `simpl_pred >-> pred_sort` coercions\nbecame more frequent, as it turned out they were not, as incorrectly stated\nin `ssrbool` internal comments, impossible: while the `simplPredType`\ncanonical instance does solve all `simpl_pred T =~= pred_sort ?pT`\ninstances, it does _not_ solve `simpl_pred T =~= {pred T}`, and so the\ncoercion will be used in that case. However it appeared that having two\ndifferent coercion constants confused the SSReflect keyed matching\nheuristic, hence the fix introduced here. This has entailed some\nrearrangement of `ssrbool`: the large  `Predicates` section had to be\nbroken up as the module-functor idiom for aliasing coercions cannot be\nused inside a section.\n","author_name":"Georges Gonthier","author_email":"georges.gonthier@inria.fr","authored_date":"2019-04-24T23:02:08.000+02:00","committer_name":"Georges Gonthier","committer_email":"georges.gonthier@inria.fr","committed_date":"2019-04-29T18:12:15.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ab73036c4d5c46759335647b380dde1b1ea0f1ff"},"pipeline":{"id":58995040,"iid":8663,"project_id":6138686,"sha":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","ref":"pr-9995","status":"failed","source":"push","created_at":"2019-04-29T16:27:55.342Z","updated_at":"2019-04-29T18:04:16.591Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/58995040"},"web_url":"https://gitlab.com/coq/coq/-/jobs/204446233","artifacts":[{"file_type":"trace","size":170246,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2019-05-06T16:46:15.043Z","tag_list":[]}
{"id":204446230,"status":"success","stage":"build","name":"build:edge+flambda:dune:dev","ref":"pr-9995","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-04-29T16:27:55.435Z","started_at":"2019-04-29T16:28:00.316Z","finished_at":"2019-04-29T16:44:07.714Z","duration":967.397996,"queued_duration":1.472204,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","short_id":"ab73036c","created_at":"2019-04-29T18:12:15.000+02:00","parent_ids":["61a1b4c46e4584e9337f9298b5f0053858a03c93"],"title":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface","message":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface\n\n** Changed definition of `simpl_rel` to `T -> `simpl_pred T`, so that\n`inE` will now expand `a \\in r b`, when `r := [rel x y | R]` to `R{b/x,\na/y}`, as the expanding coercion is now only inserted in the _last_\napplication.\nThe old definition made it possible to have a `simpl_rel >-> rel`\ncoercion that does not block expansion, but this can now be achieved\nmore economically with the `Arguments … /.` annotation.\n**  Deleted the `[rel of P]` notation which is no longer needed with\nthe new `simpl_rel` definition, and was broken anyway.\n** Added `relpre f R` definition of functional preimage of a notation.\n** `comp` and `idfun` are now proper definitions, using the `Arguments\n… /.` annotation to specify simplification on application.\n** Added `{pred T}` syntax for the alias of `pred T` in the `pred_sort`\ncoercion class; deleted the `pred_class` alias: one should either\nuse `pred_sort` in `Coercion` declarations, or `{pred T}` in type casts.\nUsed `{pred T}` as appropriate in localised predicate (`{in …, …}`) theory.\nExtended and corrected `pred` coercion internal documentation.\n** Simplified the `predType` structure by removing the redundant\nexplicit `mem_pred` subfield, and replacing it with an interlocked\nprojection; deleted `mkPredType`, now replaced by `PredType`.\n** Added (and extensively documented) a `nonPropType` interface\nmatching types that do _not_ have sort `Prop`, and used it to remove\nthe non-standard maximal implicits annotation on `Some_inj` introduced\nin #6911 by @anton-trumov; included `test-suite` entry for `nonPropType`.\n** Documented the design of the four structures used to control the\nmatching of `inE` and related predicate rewriting lemmas; added `test-suite`\nentry covering the `pred` rewriting control idioms.\n** Used `only printing` annotations to get rid of token concatenation\nhacks.\n** Fixed boolean and general `if b return t then …` notation so that\n`b` is bound in `t`. This is a minor source of incompatibility for\nmisuses of this syntax when `b` is _not_ bound in `t`, and `(if b then\n…) : t` should have been used instead.\n** Reserved all `ssreflect`, `ssrfun` and `ssrbool` notation at the top\nof the file, adding some printing boxes, and removing some spurious\n`[pred .. => ..]` reserved notation.\n** Fixed parsing precedence and format of `<hidden n>` notation, and\ndeclared and put it in an explicit `ssr_scope`.\n** Used module-and-functor idiom to ensure that the `simpl_pred T >-\npred T` _and_ `simpl_pred T >-> {pred T}` coercions are realised by the\n_same_ Gallina constant.\n** Updated `CREDITS`.\nThe policy implied by this PR: that `{pred T}` should systematically\nbe used as the generic collective predicate type, was implemented in MathComp\nmath-comp/math-comp#237. As a result  `simpl_pred >-> pred_sort` coercions\nbecame more frequent, as it turned out they were not, as incorrectly stated\nin `ssrbool` internal comments, impossible: while the `simplPredType`\ncanonical instance does solve all `simpl_pred T =~= pred_sort ?pT`\ninstances, it does _not_ solve `simpl_pred T =~= {pred T}`, and so the\ncoercion will be used in that case. However it appeared that having two\ndifferent coercion constants confused the SSReflect keyed matching\nheuristic, hence the fix introduced here. This has entailed some\nrearrangement of `ssrbool`: the large  `Predicates` section had to be\nbroken up as the module-functor idiom for aliasing coercions cannot be\nused inside a section.\n","author_name":"Georges Gonthier","author_email":"georges.gonthier@inria.fr","authored_date":"2019-04-24T23:02:08.000+02:00","committer_name":"Georges Gonthier","committer_email":"georges.gonthier@inria.fr","committed_date":"2019-04-29T18:12:15.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ab73036c4d5c46759335647b380dde1b1ea0f1ff"},"pipeline":{"id":58995040,"iid":8663,"project_id":6138686,"sha":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","ref":"pr-9995","status":"failed","source":"push","created_at":"2019-04-29T16:27:55.342Z","updated_at":"2019-04-29T18:04:16.591Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/58995040"},"web_url":"https://gitlab.com/coq/coq/-/jobs/204446230","artifacts":[{"file_type":"trace","size":24028,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2019-05-06T16:44:06.411Z","tag_list":[]}
{"id":204446229,"status":"success","stage":"build","name":"build:edge+flambda","ref":"pr-9995","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-04-29T16:27:55.402Z","started_at":"2019-04-29T16:28:00.269Z","finished_at":"2019-04-29T16:42:14.299Z","duration":854.030414,"queued_duration":1.356837,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","short_id":"ab73036c","created_at":"2019-04-29T18:12:15.000+02:00","parent_ids":["61a1b4c46e4584e9337f9298b5f0053858a03c93"],"title":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface","message":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface\n\n** Changed definition of `simpl_rel` to `T -> `simpl_pred T`, so that\n`inE` will now expand `a \\in r b`, when `r := [rel x y | R]` to `R{b/x,\na/y}`, as the expanding coercion is now only inserted in the _last_\napplication.\nThe old definition made it possible to have a `simpl_rel >-> rel`\ncoercion that does not block expansion, but this can now be achieved\nmore economically with the `Arguments … /.` annotation.\n**  Deleted the `[rel of P]` notation which is no longer needed with\nthe new `simpl_rel` definition, and was broken anyway.\n** Added `relpre f R` definition of functional preimage of a notation.\n** `comp` and `idfun` are now proper definitions, using the `Arguments\n… /.` annotation to specify simplification on application.\n** Added `{pred T}` syntax for the alias of `pred T` in the `pred_sort`\ncoercion class; deleted the `pred_class` alias: one should either\nuse `pred_sort` in `Coercion` declarations, or `{pred T}` in type casts.\nUsed `{pred T}` as appropriate in localised predicate (`{in …, …}`) theory.\nExtended and corrected `pred` coercion internal documentation.\n** Simplified the `predType` structure by removing the redundant\nexplicit `mem_pred` subfield, and replacing it with an interlocked\nprojection; deleted `mkPredType`, now replaced by `PredType`.\n** Added (and extensively documented) a `nonPropType` interface\nmatching types that do _not_ have sort `Prop`, and used it to remove\nthe non-standard maximal implicits annotation on `Some_inj` introduced\nin #6911 by @anton-trumov; included `test-suite` entry for `nonPropType`.\n** Documented the design of the four structures used to control the\nmatching of `inE` and related predicate rewriting lemmas; added `test-suite`\nentry covering the `pred` rewriting control idioms.\n** Used `only printing` annotations to get rid of token concatenation\nhacks.\n** Fixed boolean and general `if b return t then …` notation so that\n`b` is bound in `t`. This is a minor source of incompatibility for\nmisuses of this syntax when `b` is _not_ bound in `t`, and `(if b then\n…) : t` should have been used instead.\n** Reserved all `ssreflect`, `ssrfun` and `ssrbool` notation at the top\nof the file, adding some printing boxes, and removing some spurious\n`[pred .. => ..]` reserved notation.\n** Fixed parsing precedence and format of `<hidden n>` notation, and\ndeclared and put it in an explicit `ssr_scope`.\n** Used module-and-functor idiom to ensure that the `simpl_pred T >-\npred T` _and_ `simpl_pred T >-> {pred T}` coercions are realised by the\n_same_ Gallina constant.\n** Updated `CREDITS`.\nThe policy implied by this PR: that `{pred T}` should systematically\nbe used as the generic collective predicate type, was implemented in MathComp\nmath-comp/math-comp#237. As a result  `simpl_pred >-> pred_sort` coercions\nbecame more frequent, as it turned out they were not, as incorrectly stated\nin `ssrbool` internal comments, impossible: while the `simplPredType`\ncanonical instance does solve all `simpl_pred T =~= pred_sort ?pT`\ninstances, it does _not_ solve `simpl_pred T =~= {pred T}`, and so the\ncoercion will be used in that case. However it appeared that having two\ndifferent coercion constants confused the SSReflect keyed matching\nheuristic, hence the fix introduced here. This has entailed some\nrearrangement of `ssrbool`: the large  `Predicates` section had to be\nbroken up as the module-functor idiom for aliasing coercions cannot be\nused inside a section.\n","author_name":"Georges Gonthier","author_email":"georges.gonthier@inria.fr","authored_date":"2019-04-24T23:02:08.000+02:00","committer_name":"Georges Gonthier","committer_email":"georges.gonthier@inria.fr","committed_date":"2019-04-29T18:12:15.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ab73036c4d5c46759335647b380dde1b1ea0f1ff"},"pipeline":{"id":58995040,"iid":8663,"project_id":6138686,"sha":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","ref":"pr-9995","status":"failed","source":"push","created_at":"2019-04-29T16:27:55.342Z","updated_at":"2019-04-29T18:04:16.591Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/58995040"},"web_url":"https://gitlab.com/coq/coq/-/jobs/204446229","artifacts":[{"file_type":"trace","size":403513,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":"2019-05-06T16:42:11.906Z","tag_list":[]}
{"id":204446227,"status":"success","stage":"build","name":"build:base+32bit","ref":"pr-9995","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-04-29T16:27:55.378Z","started_at":"2019-04-29T16:28:00.201Z","finished_at":"2019-04-29T16:42:28.920Z","duration":868.719448,"queued_duration":1.211362,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","short_id":"ab73036c","created_at":"2019-04-29T18:12:15.000+02:00","parent_ids":["61a1b4c46e4584e9337f9298b5f0053858a03c93"],"title":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface","message":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface\n\n** Changed definition of `simpl_rel` to `T -> `simpl_pred T`, so that\n`inE` will now expand `a \\in r b`, when `r := [rel x y | R]` to `R{b/x,\na/y}`, as the expanding coercion is now only inserted in the _last_\napplication.\nThe old definition made it possible to have a `simpl_rel >-> rel`\ncoercion that does not block expansion, but this can now be achieved\nmore economically with the `Arguments … /.` annotation.\n**  Deleted the `[rel of P]` notation which is no longer needed with\nthe new `simpl_rel` definition, and was broken anyway.\n** Added `relpre f R` definition of functional preimage of a notation.\n** `comp` and `idfun` are now proper definitions, using the `Arguments\n… /.` annotation to specify simplification on application.\n** Added `{pred T}` syntax for the alias of `pred T` in the `pred_sort`\ncoercion class; deleted the `pred_class` alias: one should either\nuse `pred_sort` in `Coercion` declarations, or `{pred T}` in type casts.\nUsed `{pred T}` as appropriate in localised predicate (`{in …, …}`) theory.\nExtended and corrected `pred` coercion internal documentation.\n** Simplified the `predType` structure by removing the redundant\nexplicit `mem_pred` subfield, and replacing it with an interlocked\nprojection; deleted `mkPredType`, now replaced by `PredType`.\n** Added (and extensively documented) a `nonPropType` interface\nmatching types that do _not_ have sort `Prop`, and used it to remove\nthe non-standard maximal implicits annotation on `Some_inj` introduced\nin #6911 by @anton-trumov; included `test-suite` entry for `nonPropType`.\n** Documented the design of the four structures used to control the\nmatching of `inE` and related predicate rewriting lemmas; added `test-suite`\nentry covering the `pred` rewriting control idioms.\n** Used `only printing` annotations to get rid of token concatenation\nhacks.\n** Fixed boolean and general `if b return t then …` notation so that\n`b` is bound in `t`. This is a minor source of incompatibility for\nmisuses of this syntax when `b` is _not_ bound in `t`, and `(if b then\n…) : t` should have been used instead.\n** Reserved all `ssreflect`, `ssrfun` and `ssrbool` notation at the top\nof the file, adding some printing boxes, and removing some spurious\n`[pred .. => ..]` reserved notation.\n** Fixed parsing precedence and format of `<hidden n>` notation, and\ndeclared and put it in an explicit `ssr_scope`.\n** Used module-and-functor idiom to ensure that the `simpl_pred T >-\npred T` _and_ `simpl_pred T >-> {pred T}` coercions are realised by the\n_same_ Gallina constant.\n** Updated `CREDITS`.\nThe policy implied by this PR: that `{pred T}` should systematically\nbe used as the generic collective predicate type, was implemented in MathComp\nmath-comp/math-comp#237. As a result  `simpl_pred >-> pred_sort` coercions\nbecame more frequent, as it turned out they were not, as incorrectly stated\nin `ssrbool` internal comments, impossible: while the `simplPredType`\ncanonical instance does solve all `simpl_pred T =~= pred_sort ?pT`\ninstances, it does _not_ solve `simpl_pred T =~= {pred T}`, and so the\ncoercion will be used in that case. However it appeared that having two\ndifferent coercion constants confused the SSReflect keyed matching\nheuristic, hence the fix introduced here. This has entailed some\nrearrangement of `ssrbool`: the large  `Predicates` section had to be\nbroken up as the module-functor idiom for aliasing coercions cannot be\nused inside a section.\n","author_name":"Georges Gonthier","author_email":"georges.gonthier@inria.fr","authored_date":"2019-04-24T23:02:08.000+02:00","committer_name":"Georges Gonthier","committer_email":"georges.gonthier@inria.fr","committed_date":"2019-04-29T18:12:15.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ab73036c4d5c46759335647b380dde1b1ea0f1ff"},"pipeline":{"id":58995040,"iid":8663,"project_id":6138686,"sha":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","ref":"pr-9995","status":"failed","source":"push","created_at":"2019-04-29T16:27:55.342Z","updated_at":"2019-04-29T18:04:16.591Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/58995040"},"web_url":"https://gitlab.com/coq/coq/-/jobs/204446227","artifacts":[{"file_type":"trace","size":236806,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2019-05-06T16:42:27.754Z","tag_list":[]}
{"id":204446225,"status":"success","stage":"build","name":"build:base","ref":"pr-9995","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-04-29T16:27:55.354Z","started_at":"2019-04-29T16:27:59.904Z","finished_at":"2019-04-29T16:45:41.802Z","duration":1061.897754,"queued_duration":0.843809,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","short_id":"ab73036c","created_at":"2019-04-29T18:12:15.000+02:00","parent_ids":["61a1b4c46e4584e9337f9298b5f0053858a03c93"],"title":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface","message":"fix `simpl_rel` and notations, `{pred T}` alias, `nonPropType` interface\n\n** Changed definition of `simpl_rel` to `T -> `simpl_pred T`, so that\n`inE` will now expand `a \\in r b`, when `r := [rel x y | R]` to `R{b/x,\na/y}`, as the expanding coercion is now only inserted in the _last_\napplication.\nThe old definition made it possible to have a `simpl_rel >-> rel`\ncoercion that does not block expansion, but this can now be achieved\nmore economically with the `Arguments … /.` annotation.\n**  Deleted the `[rel of P]` notation which is no longer needed with\nthe new `simpl_rel` definition, and was broken anyway.\n** Added `relpre f R` definition of functional preimage of a notation.\n** `comp` and `idfun` are now proper definitions, using the `Arguments\n… /.` annotation to specify simplification on application.\n** Added `{pred T}` syntax for the alias of `pred T` in the `pred_sort`\ncoercion class; deleted the `pred_class` alias: one should either\nuse `pred_sort` in `Coercion` declarations, or `{pred T}` in type casts.\nUsed `{pred T}` as appropriate in localised predicate (`{in …, …}`) theory.\nExtended and corrected `pred` coercion internal documentation.\n** Simplified the `predType` structure by removing the redundant\nexplicit `mem_pred` subfield, and replacing it with an interlocked\nprojection; deleted `mkPredType`, now replaced by `PredType`.\n** Added (and extensively documented) a `nonPropType` interface\nmatching types that do _not_ have sort `Prop`, and used it to remove\nthe non-standard maximal implicits annotation on `Some_inj` introduced\nin #6911 by @anton-trumov; included `test-suite` entry for `nonPropType`.\n** Documented the design of the four structures used to control the\nmatching of `inE` and related predicate rewriting lemmas; added `test-suite`\nentry covering the `pred` rewriting control idioms.\n** Used `only printing` annotations to get rid of token concatenation\nhacks.\n** Fixed boolean and general `if b return t then …` notation so that\n`b` is bound in `t`. This is a minor source of incompatibility for\nmisuses of this syntax when `b` is _not_ bound in `t`, and `(if b then\n…) : t` should have been used instead.\n** Reserved all `ssreflect`, `ssrfun` and `ssrbool` notation at the top\nof the file, adding some printing boxes, and removing some spurious\n`[pred .. => ..]` reserved notation.\n** Fixed parsing precedence and format of `<hidden n>` notation, and\ndeclared and put it in an explicit `ssr_scope`.\n** Used module-and-functor idiom to ensure that the `simpl_pred T >-\npred T` _and_ `simpl_pred T >-> {pred T}` coercions are realised by the\n_same_ Gallina constant.\n** Updated `CREDITS`.\nThe policy implied by this PR: that `{pred T}` should systematically\nbe used as the generic collective predicate type, was implemented in MathComp\nmath-comp/math-comp#237. As a result  `simpl_pred >-> pred_sort` coercions\nbecame more frequent, as it turned out they were not, as incorrectly stated\nin `ssrbool` internal comments, impossible: while the `simplPredType`\ncanonical instance does solve all `simpl_pred T =~= pred_sort ?pT`\ninstances, it does _not_ solve `simpl_pred T =~= {pred T}`, and so the\ncoercion will be used in that case. However it appeared that having two\ndifferent coercion constants confused the SSReflect keyed matching\nheuristic, hence the fix introduced here. This has entailed some\nrearrangement of `ssrbool`: the large  `Predicates` section had to be\nbroken up as the module-functor idiom for aliasing coercions cannot be\nused inside a section.\n","author_name":"Georges Gonthier","author_email":"georges.gonthier@inria.fr","authored_date":"2019-04-24T23:02:08.000+02:00","committer_name":"Georges Gonthier","committer_email":"georges.gonthier@inria.fr","committed_date":"2019-04-29T18:12:15.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ab73036c4d5c46759335647b380dde1b1ea0f1ff"},"pipeline":{"id":58995040,"iid":8663,"project_id":6138686,"sha":"ab73036c4d5c46759335647b380dde1b1ea0f1ff","ref":"pr-9995","status":"failed","source":"push","created_at":"2019-04-29T16:27:55.342Z","updated_at":"2019-04-29T18:04:16.591Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/58995040"},"web_url":"https://gitlab.com/coq/coq/-/jobs/204446225","artifacts":[{"file_type":"trace","size":295432,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2019-05-06T16:45:40.189Z","tag_list":[]}
