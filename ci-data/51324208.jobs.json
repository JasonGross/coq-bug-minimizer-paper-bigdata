{"id":175598284,"status":"success","stage":"test","name":"plugin:ci-relation-algebra","ref":"pr-9743","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-11T20:39:50.216Z","started_at":"2019-03-11T21:05:43.344Z","finished_at":"2019-03-11T21:11:52.556Z","duration":369.211767,"queued_duration":5.899789,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"608b53a279cf5f6da4d55add943a8f3777a20ec2","short_id":"608b53a2","created_at":"2019-03-11T21:23:19.000+01:00","parent_ids":["74534f84a782f5de740c52cb97b3ca3a02eb6aa2"],"title":"Relax the ambiguous path condition of coercion","message":"Relax the ambiguous path condition of coercion\n\nThe `Coercion` command did report many ambiguous paths when one declared\nmultiple inheritances.  This change makes the `Coercion` command to do not\nreport them when\n1. all the coercion in the potentially ambiguous paths respect the uniform\n   inheritance condition and\n2. functional compositions of the potentially ambiguous paths are convertible to\n   each other.\nThe first condition is not explicitly checked but is used to make the checking\nprocess of the second condition easy.\n\nThe key idea:\nLet us consider a sequence of coercion\nf_1 : C_1 >-> C_2, f_2 : C_2 >-> C3, ..., f_n : C_n >-> C_(n+1)\nwhich respect the uniform inheritance condition and where the user-defined\nclasses C_i have m_i parameters respectively (i <= n).\nThe functional composition f_1 . ... . f_n can be expressed as follows:\n(fun x_1 ... x_(m_1) y =>\n  f_n _ ... _ (* m_n times repetition of holes *)\n      (...\n           (f_2 _ ... _ (* m_2 times repetition of holes *)\n                (f_1 x_1 ... x_(m_1) y))...)),\nand the contents of all the holes can be determined (inferred) without leaving\nany existential variables in them thanks to the uniform inheritance condition.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-03-11T20:27:05.000+01:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-03-11T21:23:19.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/608b53a279cf5f6da4d55add943a8f3777a20ec2"},"pipeline":{"id":51324208,"iid":7717,"project_id":6138686,"sha":"608b53a279cf5f6da4d55add943a8f3777a20ec2","ref":"pr-9743","status":"success","source":"push","created_at":"2019-03-11T20:39:48.851Z","updated_at":"2019-03-11T22:42:16.128Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/51324208"},"web_url":"https://gitlab.com/coq/coq/-/jobs/175598284","artifacts":[{"file_type":"trace","size":51686,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":175598283,"status":"success","stage":"test","name":"plugin:ci-quickchick","ref":"pr-9743","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-11T20:39:50.196Z","started_at":"2019-03-11T21:05:37.625Z","finished_at":"2019-03-11T21:11:18.320Z","duration":340.694391,"queued_duration":0.12457,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"608b53a279cf5f6da4d55add943a8f3777a20ec2","short_id":"608b53a2","created_at":"2019-03-11T21:23:19.000+01:00","parent_ids":["74534f84a782f5de740c52cb97b3ca3a02eb6aa2"],"title":"Relax the ambiguous path condition of coercion","message":"Relax the ambiguous path condition of coercion\n\nThe `Coercion` command did report many ambiguous paths when one declared\nmultiple inheritances.  This change makes the `Coercion` command to do not\nreport them when\n1. all the coercion in the potentially ambiguous paths respect the uniform\n   inheritance condition and\n2. functional compositions of the potentially ambiguous paths are convertible to\n   each other.\nThe first condition is not explicitly checked but is used to make the checking\nprocess of the second condition easy.\n\nThe key idea:\nLet us consider a sequence of coercion\nf_1 : C_1 >-> C_2, f_2 : C_2 >-> C3, ..., f_n : C_n >-> C_(n+1)\nwhich respect the uniform inheritance condition and where the user-defined\nclasses C_i have m_i parameters respectively (i <= n).\nThe functional composition f_1 . ... . f_n can be expressed as follows:\n(fun x_1 ... x_(m_1) y =>\n  f_n _ ... _ (* m_n times repetition of holes *)\n      (...\n           (f_2 _ ... _ (* m_2 times repetition of holes *)\n                (f_1 x_1 ... x_(m_1) y))...)),\nand the contents of all the holes can be determined (inferred) without leaving\nany existential variables in them thanks to the uniform inheritance condition.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-03-11T20:27:05.000+01:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-03-11T21:23:19.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/608b53a279cf5f6da4d55add943a8f3777a20ec2"},"pipeline":{"id":51324208,"iid":7717,"project_id":6138686,"sha":"608b53a279cf5f6da4d55add943a8f3777a20ec2","ref":"pr-9743","status":"success","source":"push","created_at":"2019-03-11T20:39:48.851Z","updated_at":"2019-03-11T22:42:16.128Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/51324208"},"web_url":"https://gitlab.com/coq/coq/-/jobs/175598283","artifacts":[{"file_type":"trace","size":262954,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":175598281,"status":"success","stage":"test","name":"plugin:plugin-tutorial","ref":"pr-9743","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-11T20:39:50.175Z","started_at":"2019-03-11T21:05:43.290Z","finished_at":"2019-03-11T21:09:32.855Z","duration":229.564636,"queued_duration":5.744806,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"608b53a279cf5f6da4d55add943a8f3777a20ec2","short_id":"608b53a2","created_at":"2019-03-11T21:23:19.000+01:00","parent_ids":["74534f84a782f5de740c52cb97b3ca3a02eb6aa2"],"title":"Relax the ambiguous path condition of coercion","message":"Relax the ambiguous path condition of coercion\n\nThe `Coercion` command did report many ambiguous paths when one declared\nmultiple inheritances.  This change makes the `Coercion` command to do not\nreport them when\n1. all the coercion in the potentially ambiguous paths respect the uniform\n   inheritance condition and\n2. functional compositions of the potentially ambiguous paths are convertible to\n   each other.\nThe first condition is not explicitly checked but is used to make the checking\nprocess of the second condition easy.\n\nThe key idea:\nLet us consider a sequence of coercion\nf_1 : C_1 >-> C_2, f_2 : C_2 >-> C3, ..., f_n : C_n >-> C_(n+1)\nwhich respect the uniform inheritance condition and where the user-defined\nclasses C_i have m_i parameters respectively (i <= n).\nThe functional composition f_1 . ... . f_n can be expressed as follows:\n(fun x_1 ... x_(m_1) y =>\n  f_n _ ... _ (* m_n times repetition of holes *)\n      (...\n           (f_2 _ ... _ (* m_2 times repetition of holes *)\n                (f_1 x_1 ... x_(m_1) y))...)),\nand the contents of all the holes can be determined (inferred) without leaving\nany existential variables in them thanks to the uniform inheritance condition.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-03-11T20:27:05.000+01:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-03-11T21:23:19.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/608b53a279cf5f6da4d55add943a8f3777a20ec2"},"pipeline":{"id":51324208,"iid":7717,"project_id":6138686,"sha":"608b53a279cf5f6da4d55add943a8f3777a20ec2","ref":"pr-9743","status":"success","source":"push","created_at":"2019-03-11T20:39:48.851Z","updated_at":"2019-03-11T22:42:16.128Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/51324208"},"web_url":"https://gitlab.com/coq/coq/-/jobs/175598281","artifacts":[{"file_type":"trace","size":53620,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":175598280,"status":"success","stage":"test","name":"plugin:ci-paramcoq","ref":"pr-9743","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-11T20:39:50.153Z","started_at":"2019-03-11T21:05:37.836Z","finished_at":"2019-03-11T21:08:18.205Z","duration":160.369486,"queued_duration":0.225181,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"608b53a279cf5f6da4d55add943a8f3777a20ec2","short_id":"608b53a2","created_at":"2019-03-11T21:23:19.000+01:00","parent_ids":["74534f84a782f5de740c52cb97b3ca3a02eb6aa2"],"title":"Relax the ambiguous path condition of coercion","message":"Relax the ambiguous path condition of coercion\n\nThe `Coercion` command did report many ambiguous paths when one declared\nmultiple inheritances.  This change makes the `Coercion` command to do not\nreport them when\n1. all the coercion in the potentially ambiguous paths respect the uniform\n   inheritance condition and\n2. functional compositions of the potentially ambiguous paths are convertible to\n   each other.\nThe first condition is not explicitly checked but is used to make the checking\nprocess of the second condition easy.\n\nThe key idea:\nLet us consider a sequence of coercion\nf_1 : C_1 >-> C_2, f_2 : C_2 >-> C3, ..., f_n : C_n >-> C_(n+1)\nwhich respect the uniform inheritance condition and where the user-defined\nclasses C_i have m_i parameters respectively (i <= n).\nThe functional composition f_1 . ... . f_n can be expressed as follows:\n(fun x_1 ... x_(m_1) y =>\n  f_n _ ... _ (* m_n times repetition of holes *)\n      (...\n           (f_2 _ ... _ (* m_2 times repetition of holes *)\n                (f_1 x_1 ... x_(m_1) y))...)),\nand the contents of all the holes can be determined (inferred) without leaving\nany existential variables in them thanks to the uniform inheritance condition.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-03-11T20:27:05.000+01:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-03-11T21:23:19.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/608b53a279cf5f6da4d55add943a8f3777a20ec2"},"pipeline":{"id":51324208,"iid":7717,"project_id":6138686,"sha":"608b53a279cf5f6da4d55add943a8f3777a20ec2","ref":"pr-9743","status":"success","source":"push","created_at":"2019-03-11T20:39:48.851Z","updated_at":"2019-03-11T22:42:16.128Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/51324208"},"web_url":"https://gitlab.com/coq/coq/-/jobs/175598280","artifacts":[{"file_type":"trace","size":27221,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":175598279,"status":"success","stage":"test","name":"plugin:ci-mtac2","ref":"pr-9743","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-11T20:39:50.133Z","started_at":"2019-03-11T21:05:37.773Z","finished_at":"2019-03-11T21:10:04.755Z","duration":266.981969,"queued_duration":0.11865,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"608b53a279cf5f6da4d55add943a8f3777a20ec2","short_id":"608b53a2","created_at":"2019-03-11T21:23:19.000+01:00","parent_ids":["74534f84a782f5de740c52cb97b3ca3a02eb6aa2"],"title":"Relax the ambiguous path condition of coercion","message":"Relax the ambiguous path condition of coercion\n\nThe `Coercion` command did report many ambiguous paths when one declared\nmultiple inheritances.  This change makes the `Coercion` command to do not\nreport them when\n1. all the coercion in the potentially ambiguous paths respect the uniform\n   inheritance condition and\n2. functional compositions of the potentially ambiguous paths are convertible to\n   each other.\nThe first condition is not explicitly checked but is used to make the checking\nprocess of the second condition easy.\n\nThe key idea:\nLet us consider a sequence of coercion\nf_1 : C_1 >-> C_2, f_2 : C_2 >-> C3, ..., f_n : C_n >-> C_(n+1)\nwhich respect the uniform inheritance condition and where the user-defined\nclasses C_i have m_i parameters respectively (i <= n).\nThe functional composition f_1 . ... . f_n can be expressed as follows:\n(fun x_1 ... x_(m_1) y =>\n  f_n _ ... _ (* m_n times repetition of holes *)\n      (...\n           (f_2 _ ... _ (* m_2 times repetition of holes *)\n                (f_1 x_1 ... x_(m_1) y))...)),\nand the contents of all the holes can be determined (inferred) without leaving\nany existential variables in them thanks to the uniform inheritance condition.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-03-11T20:27:05.000+01:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-03-11T21:23:19.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/608b53a279cf5f6da4d55add943a8f3777a20ec2"},"pipeline":{"id":51324208,"iid":7717,"project_id":6138686,"sha":"608b53a279cf5f6da4d55add943a8f3777a20ec2","ref":"pr-9743","status":"success","source":"push","created_at":"2019-03-11T20:39:48.851Z","updated_at":"2019-03-11T22:42:16.128Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/51324208"},"web_url":"https://gitlab.com/coq/coq/-/jobs/175598279","artifacts":[{"file_type":"trace","size":204948,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":175598278,"status":"success","stage":"test","name":"plugin:ci-ltac2","ref":"pr-9743","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-11T20:39:50.112Z","started_at":"2019-03-11T21:05:42.958Z","finished_at":"2019-03-11T21:08:29.408Z","duration":166.449987,"queued_duration":5.24957,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"608b53a279cf5f6da4d55add943a8f3777a20ec2","short_id":"608b53a2","created_at":"2019-03-11T21:23:19.000+01:00","parent_ids":["74534f84a782f5de740c52cb97b3ca3a02eb6aa2"],"title":"Relax the ambiguous path condition of coercion","message":"Relax the ambiguous path condition of coercion\n\nThe `Coercion` command did report many ambiguous paths when one declared\nmultiple inheritances.  This change makes the `Coercion` command to do not\nreport them when\n1. all the coercion in the potentially ambiguous paths respect the uniform\n   inheritance condition and\n2. functional compositions of the potentially ambiguous paths are convertible to\n   each other.\nThe first condition is not explicitly checked but is used to make the checking\nprocess of the second condition easy.\n\nThe key idea:\nLet us consider a sequence of coercion\nf_1 : C_1 >-> C_2, f_2 : C_2 >-> C3, ..., f_n : C_n >-> C_(n+1)\nwhich respect the uniform inheritance condition and where the user-defined\nclasses C_i have m_i parameters respectively (i <= n).\nThe functional composition f_1 . ... . f_n can be expressed as follows:\n(fun x_1 ... x_(m_1) y =>\n  f_n _ ... _ (* m_n times repetition of holes *)\n      (...\n           (f_2 _ ... _ (* m_2 times repetition of holes *)\n                (f_1 x_1 ... x_(m_1) y))...)),\nand the contents of all the holes can be determined (inferred) without leaving\nany existential variables in them thanks to the uniform inheritance condition.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-03-11T20:27:05.000+01:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-03-11T21:23:19.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/608b53a279cf5f6da4d55add943a8f3777a20ec2"},"pipeline":{"id":51324208,"iid":7717,"project_id":6138686,"sha":"608b53a279cf5f6da4d55add943a8f3777a20ec2","ref":"pr-9743","status":"success","source":"push","created_at":"2019-03-11T20:39:48.851Z","updated_at":"2019-03-11T22:42:16.128Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/51324208"},"web_url":"https://gitlab.com/coq/coq/-/jobs/175598278","artifacts":[{"file_type":"trace","size":39510,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":175598276,"status":"success","stage":"test","name":"plugin:ci-fiat_parsers","ref":"pr-9743","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-11T20:39:50.093Z","started_at":"2019-03-11T21:05:42.908Z","finished_at":"2019-03-11T21:08:18.931Z","duration":156.023479,"queued_duration":4.9419,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"608b53a279cf5f6da4d55add943a8f3777a20ec2","short_id":"608b53a2","created_at":"2019-03-11T21:23:19.000+01:00","parent_ids":["74534f84a782f5de740c52cb97b3ca3a02eb6aa2"],"title":"Relax the ambiguous path condition of coercion","message":"Relax the ambiguous path condition of coercion\n\nThe `Coercion` command did report many ambiguous paths when one declared\nmultiple inheritances.  This change makes the `Coercion` command to do not\nreport them when\n1. all the coercion in the potentially ambiguous paths respect the uniform\n   inheritance condition and\n2. functional compositions of the potentially ambiguous paths are convertible to\n   each other.\nThe first condition is not explicitly checked but is used to make the checking\nprocess of the second condition easy.\n\nThe key idea:\nLet us consider a sequence of coercion\nf_1 : C_1 >-> C_2, f_2 : C_2 >-> C3, ..., f_n : C_n >-> C_(n+1)\nwhich respect the uniform inheritance condition and where the user-defined\nclasses C_i have m_i parameters respectively (i <= n).\nThe functional composition f_1 . ... . f_n can be expressed as follows:\n(fun x_1 ... x_(m_1) y =>\n  f_n _ ... _ (* m_n times repetition of holes *)\n      (...\n           (f_2 _ ... _ (* m_2 times repetition of holes *)\n                (f_1 x_1 ... x_(m_1) y))...)),\nand the contents of all the holes can be determined (inferred) without leaving\nany existential variables in them thanks to the uniform inheritance condition.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-03-11T20:27:05.000+01:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-03-11T21:23:19.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/608b53a279cf5f6da4d55add943a8f3777a20ec2"},"pipeline":{"id":51324208,"iid":7717,"project_id":6138686,"sha":"608b53a279cf5f6da4d55add943a8f3777a20ec2","ref":"pr-9743","status":"success","source":"push","created_at":"2019-03-11T20:39:48.851Z","updated_at":"2019-03-11T22:42:16.128Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/51324208"},"web_url":"https://gitlab.com/coq/coq/-/jobs/175598276","artifacts":[{"file_type":"trace","size":27004,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":175598275,"status":"success","stage":"test","name":"plugin:ci-equations","ref":"pr-9743","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-11T20:39:50.074Z","started_at":"2019-03-11T21:05:42.859Z","finished_at":"2019-03-11T21:13:30.708Z","duration":467.84919,"queued_duration":4.830627,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"608b53a279cf5f6da4d55add943a8f3777a20ec2","short_id":"608b53a2","created_at":"2019-03-11T21:23:19.000+01:00","parent_ids":["74534f84a782f5de740c52cb97b3ca3a02eb6aa2"],"title":"Relax the ambiguous path condition of coercion","message":"Relax the ambiguous path condition of coercion\n\nThe `Coercion` command did report many ambiguous paths when one declared\nmultiple inheritances.  This change makes the `Coercion` command to do not\nreport them when\n1. all the coercion in the potentially ambiguous paths respect the uniform\n   inheritance condition and\n2. functional compositions of the potentially ambiguous paths are convertible to\n   each other.\nThe first condition is not explicitly checked but is used to make the checking\nprocess of the second condition easy.\n\nThe key idea:\nLet us consider a sequence of coercion\nf_1 : C_1 >-> C_2, f_2 : C_2 >-> C3, ..., f_n : C_n >-> C_(n+1)\nwhich respect the uniform inheritance condition and where the user-defined\nclasses C_i have m_i parameters respectively (i <= n).\nThe functional composition f_1 . ... . f_n can be expressed as follows:\n(fun x_1 ... x_(m_1) y =>\n  f_n _ ... _ (* m_n times repetition of holes *)\n      (...\n           (f_2 _ ... _ (* m_2 times repetition of holes *)\n                (f_1 x_1 ... x_(m_1) y))...)),\nand the contents of all the holes can be determined (inferred) without leaving\nany existential variables in them thanks to the uniform inheritance condition.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-03-11T20:27:05.000+01:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-03-11T21:23:19.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/608b53a279cf5f6da4d55add943a8f3777a20ec2"},"pipeline":{"id":51324208,"iid":7717,"project_id":6138686,"sha":"608b53a279cf5f6da4d55add943a8f3777a20ec2","ref":"pr-9743","status":"success","source":"push","created_at":"2019-03-11T20:39:48.851Z","updated_at":"2019-03-11T22:42:16.128Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/51324208"},"web_url":"https://gitlab.com/coq/coq/-/jobs/175598275","artifacts":[{"file_type":"trace","size":92600,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":175598274,"status":"success","stage":"test","name":"plugin:ci-elpi","ref":"pr-9743","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-11T20:39:50.054Z","started_at":"2019-03-11T21:05:38.134Z","finished_at":"2019-03-11T21:10:04.253Z","duration":266.119386,"queued_duration":0.074125,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"608b53a279cf5f6da4d55add943a8f3777a20ec2","short_id":"608b53a2","created_at":"2019-03-11T21:23:19.000+01:00","parent_ids":["74534f84a782f5de740c52cb97b3ca3a02eb6aa2"],"title":"Relax the ambiguous path condition of coercion","message":"Relax the ambiguous path condition of coercion\n\nThe `Coercion` command did report many ambiguous paths when one declared\nmultiple inheritances.  This change makes the `Coercion` command to do not\nreport them when\n1. all the coercion in the potentially ambiguous paths respect the uniform\n   inheritance condition and\n2. functional compositions of the potentially ambiguous paths are convertible to\n   each other.\nThe first condition is not explicitly checked but is used to make the checking\nprocess of the second condition easy.\n\nThe key idea:\nLet us consider a sequence of coercion\nf_1 : C_1 >-> C_2, f_2 : C_2 >-> C3, ..., f_n : C_n >-> C_(n+1)\nwhich respect the uniform inheritance condition and where the user-defined\nclasses C_i have m_i parameters respectively (i <= n).\nThe functional composition f_1 . ... . f_n can be expressed as follows:\n(fun x_1 ... x_(m_1) y =>\n  f_n _ ... _ (* m_n times repetition of holes *)\n      (...\n           (f_2 _ ... _ (* m_2 times repetition of holes *)\n                (f_1 x_1 ... x_(m_1) y))...)),\nand the contents of all the holes can be determined (inferred) without leaving\nany existential variables in them thanks to the uniform inheritance condition.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-03-11T20:27:05.000+01:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-03-11T21:23:19.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/608b53a279cf5f6da4d55add943a8f3777a20ec2"},"pipeline":{"id":51324208,"iid":7717,"project_id":6138686,"sha":"608b53a279cf5f6da4d55add943a8f3777a20ec2","ref":"pr-9743","status":"success","source":"push","created_at":"2019-03-11T20:39:48.851Z","updated_at":"2019-03-11T22:42:16.128Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/51324208"},"web_url":"https://gitlab.com/coq/coq/-/jobs/175598274","artifacts":[{"file_type":"trace","size":445791,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":175598273,"status":"success","stage":"test","name":"plugin:ci-coqhammer","ref":"pr-9743","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-11T20:39:50.033Z","started_at":"2019-03-11T21:05:42.817Z","finished_at":"2019-03-11T21:08:32.239Z","duration":169.421873,"queued_duration":4.72126,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"608b53a279cf5f6da4d55add943a8f3777a20ec2","short_id":"608b53a2","created_at":"2019-03-11T21:23:19.000+01:00","parent_ids":["74534f84a782f5de740c52cb97b3ca3a02eb6aa2"],"title":"Relax the ambiguous path condition of coercion","message":"Relax the ambiguous path condition of coercion\n\nThe `Coercion` command did report many ambiguous paths when one declared\nmultiple inheritances.  This change makes the `Coercion` command to do not\nreport them when\n1. all the coercion in the potentially ambiguous paths respect the uniform\n   inheritance condition and\n2. functional compositions of the potentially ambiguous paths are convertible to\n   each other.\nThe first condition is not explicitly checked but is used to make the checking\nprocess of the second condition easy.\n\nThe key idea:\nLet us consider a sequence of coercion\nf_1 : C_1 >-> C_2, f_2 : C_2 >-> C3, ..., f_n : C_n >-> C_(n+1)\nwhich respect the uniform inheritance condition and where the user-defined\nclasses C_i have m_i parameters respectively (i <= n).\nThe functional composition f_1 . ... . f_n can be expressed as follows:\n(fun x_1 ... x_(m_1) y =>\n  f_n _ ... _ (* m_n times repetition of holes *)\n      (...\n           (f_2 _ ... _ (* m_2 times repetition of holes *)\n                (f_1 x_1 ... x_(m_1) y))...)),\nand the contents of all the holes can be determined (inferred) without leaving\nany existential variables in them thanks to the uniform inheritance condition.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-03-11T20:27:05.000+01:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-03-11T21:23:19.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/608b53a279cf5f6da4d55add943a8f3777a20ec2"},"pipeline":{"id":51324208,"iid":7717,"project_id":6138686,"sha":"608b53a279cf5f6da4d55add943a8f3777a20ec2","ref":"pr-9743","status":"success","source":"push","created_at":"2019-03-11T20:39:48.851Z","updated_at":"2019-03-11T22:42:16.128Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/51324208"},"web_url":"https://gitlab.com/coq/coq/-/jobs/175598273","artifacts":[{"file_type":"trace","size":31125,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":175598272,"status":"success","stage":"test","name":"plugin:ci-coq_dpdgraph","ref":"pr-9743","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-11T20:39:50.015Z","started_at":"2019-03-11T21:05:38.296Z","finished_at":"2019-03-11T21:08:25.910Z","duration":167.61366,"queued_duration":0.14976,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"608b53a279cf5f6da4d55add943a8f3777a20ec2","short_id":"608b53a2","created_at":"2019-03-11T21:23:19.000+01:00","parent_ids":["74534f84a782f5de740c52cb97b3ca3a02eb6aa2"],"title":"Relax the ambiguous path condition of coercion","message":"Relax the ambiguous path condition of coercion\n\nThe `Coercion` command did report many ambiguous paths when one declared\nmultiple inheritances.  This change makes the `Coercion` command to do not\nreport them when\n1. all the coercion in the potentially ambiguous paths respect the uniform\n   inheritance condition and\n2. functional compositions of the potentially ambiguous paths are convertible to\n   each other.\nThe first condition is not explicitly checked but is used to make the checking\nprocess of the second condition easy.\n\nThe key idea:\nLet us consider a sequence of coercion\nf_1 : C_1 >-> C_2, f_2 : C_2 >-> C3, ..., f_n : C_n >-> C_(n+1)\nwhich respect the uniform inheritance condition and where the user-defined\nclasses C_i have m_i parameters respectively (i <= n).\nThe functional composition f_1 . ... . f_n can be expressed as follows:\n(fun x_1 ... x_(m_1) y =>\n  f_n _ ... _ (* m_n times repetition of holes *)\n      (...\n           (f_2 _ ... _ (* m_2 times repetition of holes *)\n                (f_1 x_1 ... x_(m_1) y))...)),\nand the contents of all the holes can be determined (inferred) without leaving\nany existential variables in them thanks to the uniform inheritance condition.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-03-11T20:27:05.000+01:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-03-11T21:23:19.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/608b53a279cf5f6da4d55add943a8f3777a20ec2"},"pipeline":{"id":51324208,"iid":7717,"project_id":6138686,"sha":"608b53a279cf5f6da4d55add943a8f3777a20ec2","ref":"pr-9743","status":"success","source":"push","created_at":"2019-03-11T20:39:48.851Z","updated_at":"2019-03-11T22:42:16.128Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/51324208"},"web_url":"https://gitlab.com/coq/coq/-/jobs/175598272","artifacts":[{"file_type":"trace","size":39794,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":175598271,"status":"success","stage":"test","name":"plugin:ci-bignums","ref":"pr-9743","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-11T20:39:49.995Z","started_at":"2019-03-11T21:05:42.572Z","finished_at":"2019-03-11T21:09:57.940Z","duration":255.36772,"queued_duration":4.379354,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"608b53a279cf5f6da4d55add943a8f3777a20ec2","short_id":"608b53a2","created_at":"2019-03-11T21:23:19.000+01:00","parent_ids":["74534f84a782f5de740c52cb97b3ca3a02eb6aa2"],"title":"Relax the ambiguous path condition of coercion","message":"Relax the ambiguous path condition of coercion\n\nThe `Coercion` command did report many ambiguous paths when one declared\nmultiple inheritances.  This change makes the `Coercion` command to do not\nreport them when\n1. all the coercion in the potentially ambiguous paths respect the uniform\n   inheritance condition and\n2. functional compositions of the potentially ambiguous paths are convertible to\n   each other.\nThe first condition is not explicitly checked but is used to make the checking\nprocess of the second condition easy.\n\nThe key idea:\nLet us consider a sequence of coercion\nf_1 : C_1 >-> C_2, f_2 : C_2 >-> C3, ..., f_n : C_n >-> C_(n+1)\nwhich respect the uniform inheritance condition and where the user-defined\nclasses C_i have m_i parameters respectively (i <= n).\nThe functional composition f_1 . ... . f_n can be expressed as follows:\n(fun x_1 ... x_(m_1) y =>\n  f_n _ ... _ (* m_n times repetition of holes *)\n      (...\n           (f_2 _ ... _ (* m_2 times repetition of holes *)\n                (f_1 x_1 ... x_(m_1) y))...)),\nand the contents of all the holes can be determined (inferred) without leaving\nany existential variables in them thanks to the uniform inheritance condition.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-03-11T20:27:05.000+01:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-03-11T21:23:19.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/608b53a279cf5f6da4d55add943a8f3777a20ec2"},"pipeline":{"id":51324208,"iid":7717,"project_id":6138686,"sha":"608b53a279cf5f6da4d55add943a8f3777a20ec2","ref":"pr-9743","status":"success","source":"push","created_at":"2019-03-11T20:39:48.851Z","updated_at":"2019-03-11T22:42:16.128Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/51324208"},"web_url":"https://gitlab.com/coq/coq/-/jobs/175598271","artifacts":[{"file_type":"trace","size":38584,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":175598270,"status":"success","stage":"test","name":"plugin:ci-aac_tactics","ref":"pr-9743","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-11T20:39:49.975Z","started_at":"2019-03-11T21:05:38.412Z","finished_at":"2019-03-11T21:08:31.960Z","duration":173.548113,"queued_duration":0.167134,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"608b53a279cf5f6da4d55add943a8f3777a20ec2","short_id":"608b53a2","created_at":"2019-03-11T21:23:19.000+01:00","parent_ids":["74534f84a782f5de740c52cb97b3ca3a02eb6aa2"],"title":"Relax the ambiguous path condition of coercion","message":"Relax the ambiguous path condition of coercion\n\nThe `Coercion` command did report many ambiguous paths when one declared\nmultiple inheritances.  This change makes the `Coercion` command to do not\nreport them when\n1. all the coercion in the potentially ambiguous paths respect the uniform\n   inheritance condition and\n2. functional compositions of the potentially ambiguous paths are convertible to\n   each other.\nThe first condition is not explicitly checked but is used to make the checking\nprocess of the second condition easy.\n\nThe key idea:\nLet us consider a sequence of coercion\nf_1 : C_1 >-> C_2, f_2 : C_2 >-> C3, ..., f_n : C_n >-> C_(n+1)\nwhich respect the uniform inheritance condition and where the user-defined\nclasses C_i have m_i parameters respectively (i <= n).\nThe functional composition f_1 . ... . f_n can be expressed as follows:\n(fun x_1 ... x_(m_1) y =>\n  f_n _ ... _ (* m_n times repetition of holes *)\n      (...\n           (f_2 _ ... _ (* m_2 times repetition of holes *)\n                (f_1 x_1 ... x_(m_1) y))...)),\nand the contents of all the holes can be determined (inferred) without leaving\nany existential variables in them thanks to the uniform inheritance condition.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-03-11T20:27:05.000+01:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-03-11T21:23:19.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/608b53a279cf5f6da4d55add943a8f3777a20ec2"},"pipeline":{"id":51324208,"iid":7717,"project_id":6138686,"sha":"608b53a279cf5f6da4d55add943a8f3777a20ec2","ref":"pr-9743","status":"success","source":"push","created_at":"2019-03-11T20:39:48.851Z","updated_at":"2019-03-11T22:42:16.128Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/51324208"},"web_url":"https://gitlab.com/coq/coq/-/jobs/175598270","artifacts":[{"file_type":"trace","size":45425,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":175598269,"status":"success","stage":"test","name":"library:ci-vst","ref":"pr-9743","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-11T20:39:49.955Z","started_at":"2019-03-11T21:05:42.519Z","finished_at":"2019-03-11T22:17:23.375Z","duration":4300.855929,"queued_duration":4.226736,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"608b53a279cf5f6da4d55add943a8f3777a20ec2","short_id":"608b53a2","created_at":"2019-03-11T21:23:19.000+01:00","parent_ids":["74534f84a782f5de740c52cb97b3ca3a02eb6aa2"],"title":"Relax the ambiguous path condition of coercion","message":"Relax the ambiguous path condition of coercion\n\nThe `Coercion` command did report many ambiguous paths when one declared\nmultiple inheritances.  This change makes the `Coercion` command to do not\nreport them when\n1. all the coercion in the potentially ambiguous paths respect the uniform\n   inheritance condition and\n2. functional compositions of the potentially ambiguous paths are convertible to\n   each other.\nThe first condition is not explicitly checked but is used to make the checking\nprocess of the second condition easy.\n\nThe key idea:\nLet us consider a sequence of coercion\nf_1 : C_1 >-> C_2, f_2 : C_2 >-> C3, ..., f_n : C_n >-> C_(n+1)\nwhich respect the uniform inheritance condition and where the user-defined\nclasses C_i have m_i parameters respectively (i <= n).\nThe functional composition f_1 . ... . f_n can be expressed as follows:\n(fun x_1 ... x_(m_1) y =>\n  f_n _ ... _ (* m_n times repetition of holes *)\n      (...\n           (f_2 _ ... _ (* m_2 times repetition of holes *)\n                (f_1 x_1 ... x_(m_1) y))...)),\nand the contents of all the holes can be determined (inferred) without leaving\nany existential variables in them thanks to the uniform inheritance condition.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-03-11T20:27:05.000+01:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-03-11T21:23:19.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/608b53a279cf5f6da4d55add943a8f3777a20ec2"},"pipeline":{"id":51324208,"iid":7717,"project_id":6138686,"sha":"608b53a279cf5f6da4d55add943a8f3777a20ec2","ref":"pr-9743","status":"success","source":"push","created_at":"2019-03-11T20:39:48.851Z","updated_at":"2019-03-11T22:42:16.128Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/51324208"},"web_url":"https://gitlab.com/coq/coq/-/jobs/175598269","artifacts":[{"file_type":"trace","size":305248,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":175598268,"status":"success","stage":"test","name":"library:ci-verdi-raft","ref":"pr-9743","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-11T20:39:49.935Z","started_at":"2019-03-11T21:05:38.505Z","finished_at":"2019-03-11T21:39:16.888Z","duration":2018.383231,"queued_duration":0.150759,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"608b53a279cf5f6da4d55add943a8f3777a20ec2","short_id":"608b53a2","created_at":"2019-03-11T21:23:19.000+01:00","parent_ids":["74534f84a782f5de740c52cb97b3ca3a02eb6aa2"],"title":"Relax the ambiguous path condition of coercion","message":"Relax the ambiguous path condition of coercion\n\nThe `Coercion` command did report many ambiguous paths when one declared\nmultiple inheritances.  This change makes the `Coercion` command to do not\nreport them when\n1. all the coercion in the potentially ambiguous paths respect the uniform\n   inheritance condition and\n2. functional compositions of the potentially ambiguous paths are convertible to\n   each other.\nThe first condition is not explicitly checked but is used to make the checking\nprocess of the second condition easy.\n\nThe key idea:\nLet us consider a sequence of coercion\nf_1 : C_1 >-> C_2, f_2 : C_2 >-> C3, ..., f_n : C_n >-> C_(n+1)\nwhich respect the uniform inheritance condition and where the user-defined\nclasses C_i have m_i parameters respectively (i <= n).\nThe functional composition f_1 . ... . f_n can be expressed as follows:\n(fun x_1 ... x_(m_1) y =>\n  f_n _ ... _ (* m_n times repetition of holes *)\n      (...\n           (f_2 _ ... _ (* m_2 times repetition of holes *)\n                (f_1 x_1 ... x_(m_1) y))...)),\nand the contents of all the holes can be determined (inferred) without leaving\nany existential variables in them thanks to the uniform inheritance condition.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-03-11T20:27:05.000+01:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-03-11T21:23:19.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/608b53a279cf5f6da4d55add943a8f3777a20ec2"},"pipeline":{"id":51324208,"iid":7717,"project_id":6138686,"sha":"608b53a279cf5f6da4d55add943a8f3777a20ec2","ref":"pr-9743","status":"success","source":"push","created_at":"2019-03-11T20:39:48.851Z","updated_at":"2019-03-11T22:42:16.128Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/51324208"},"web_url":"https://gitlab.com/coq/coq/-/jobs/175598268","artifacts":[{"file_type":"trace","size":181001,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":175598267,"status":"success","stage":"test","name":"library:ci-unimath","ref":"pr-9743","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-11T20:39:49.915Z","started_at":"2019-03-11T21:05:38.433Z","finished_at":"2019-03-11T21:36:25.301Z","duration":1846.867447,"queued_duration":0.045324,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"608b53a279cf5f6da4d55add943a8f3777a20ec2","short_id":"608b53a2","created_at":"2019-03-11T21:23:19.000+01:00","parent_ids":["74534f84a782f5de740c52cb97b3ca3a02eb6aa2"],"title":"Relax the ambiguous path condition of coercion","message":"Relax the ambiguous path condition of coercion\n\nThe `Coercion` command did report many ambiguous paths when one declared\nmultiple inheritances.  This change makes the `Coercion` command to do not\nreport them when\n1. all the coercion in the potentially ambiguous paths respect the uniform\n   inheritance condition and\n2. functional compositions of the potentially ambiguous paths are convertible to\n   each other.\nThe first condition is not explicitly checked but is used to make the checking\nprocess of the second condition easy.\n\nThe key idea:\nLet us consider a sequence of coercion\nf_1 : C_1 >-> C_2, f_2 : C_2 >-> C3, ..., f_n : C_n >-> C_(n+1)\nwhich respect the uniform inheritance condition and where the user-defined\nclasses C_i have m_i parameters respectively (i <= n).\nThe functional composition f_1 . ... . f_n can be expressed as follows:\n(fun x_1 ... x_(m_1) y =>\n  f_n _ ... _ (* m_n times repetition of holes *)\n      (...\n           (f_2 _ ... _ (* m_2 times repetition of holes *)\n                (f_1 x_1 ... x_(m_1) y))...)),\nand the contents of all the holes can be determined (inferred) without leaving\nany existential variables in them thanks to the uniform inheritance condition.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-03-11T20:27:05.000+01:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-03-11T21:23:19.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/608b53a279cf5f6da4d55add943a8f3777a20ec2"},"pipeline":{"id":51324208,"iid":7717,"project_id":6138686,"sha":"608b53a279cf5f6da4d55add943a8f3777a20ec2","ref":"pr-9743","status":"success","source":"push","created_at":"2019-03-11T20:39:48.851Z","updated_at":"2019-03-11T22:42:16.128Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/51324208"},"web_url":"https://gitlab.com/coq/coq/-/jobs/175598267","artifacts":[{"file_type":"trace","size":217047,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":175598266,"status":"success","stage":"test","name":"library:ci-stdlib2","ref":"pr-9743","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-11T20:39:49.895Z","started_at":"2019-03-11T21:05:42.462Z","finished_at":"2019-03-11T21:08:38.264Z","duration":175.802739,"queued_duration":4.045746,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"608b53a279cf5f6da4d55add943a8f3777a20ec2","short_id":"608b53a2","created_at":"2019-03-11T21:23:19.000+01:00","parent_ids":["74534f84a782f5de740c52cb97b3ca3a02eb6aa2"],"title":"Relax the ambiguous path condition of coercion","message":"Relax the ambiguous path condition of coercion\n\nThe `Coercion` command did report many ambiguous paths when one declared\nmultiple inheritances.  This change makes the `Coercion` command to do not\nreport them when\n1. all the coercion in the potentially ambiguous paths respect the uniform\n   inheritance condition and\n2. functional compositions of the potentially ambiguous paths are convertible to\n   each other.\nThe first condition is not explicitly checked but is used to make the checking\nprocess of the second condition easy.\n\nThe key idea:\nLet us consider a sequence of coercion\nf_1 : C_1 >-> C_2, f_2 : C_2 >-> C3, ..., f_n : C_n >-> C_(n+1)\nwhich respect the uniform inheritance condition and where the user-defined\nclasses C_i have m_i parameters respectively (i <= n).\nThe functional composition f_1 . ... . f_n can be expressed as follows:\n(fun x_1 ... x_(m_1) y =>\n  f_n _ ... _ (* m_n times repetition of holes *)\n      (...\n           (f_2 _ ... _ (* m_2 times repetition of holes *)\n                (f_1 x_1 ... x_(m_1) y))...)),\nand the contents of all the holes can be determined (inferred) without leaving\nany existential variables in them thanks to the uniform inheritance condition.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-03-11T20:27:05.000+01:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-03-11T21:23:19.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/608b53a279cf5f6da4d55add943a8f3777a20ec2"},"pipeline":{"id":51324208,"iid":7717,"project_id":6138686,"sha":"608b53a279cf5f6da4d55add943a8f3777a20ec2","ref":"pr-9743","status":"success","source":"push","created_at":"2019-03-11T20:39:48.851Z","updated_at":"2019-03-11T22:42:16.128Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/51324208"},"web_url":"https://gitlab.com/coq/coq/-/jobs/175598266","artifacts":[{"file_type":"trace","size":31966,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":175598265,"status":"success","stage":"test","name":"library:ci-sf","ref":"pr-9743","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-11T20:39:49.874Z","started_at":"2019-03-11T21:05:38.606Z","finished_at":"2019-03-11T21:09:58.739Z","duration":260.133123,"queued_duration":0.130194,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"608b53a279cf5f6da4d55add943a8f3777a20ec2","short_id":"608b53a2","created_at":"2019-03-11T21:23:19.000+01:00","parent_ids":["74534f84a782f5de740c52cb97b3ca3a02eb6aa2"],"title":"Relax the ambiguous path condition of coercion","message":"Relax the ambiguous path condition of coercion\n\nThe `Coercion` command did report many ambiguous paths when one declared\nmultiple inheritances.  This change makes the `Coercion` command to do not\nreport them when\n1. all the coercion in the potentially ambiguous paths respect the uniform\n   inheritance condition and\n2. functional compositions of the potentially ambiguous paths are convertible to\n   each other.\nThe first condition is not explicitly checked but is used to make the checking\nprocess of the second condition easy.\n\nThe key idea:\nLet us consider a sequence of coercion\nf_1 : C_1 >-> C_2, f_2 : C_2 >-> C3, ..., f_n : C_n >-> C_(n+1)\nwhich respect the uniform inheritance condition and where the user-defined\nclasses C_i have m_i parameters respectively (i <= n).\nThe functional composition f_1 . ... . f_n can be expressed as follows:\n(fun x_1 ... x_(m_1) y =>\n  f_n _ ... _ (* m_n times repetition of holes *)\n      (...\n           (f_2 _ ... _ (* m_2 times repetition of holes *)\n                (f_1 x_1 ... x_(m_1) y))...)),\nand the contents of all the holes can be determined (inferred) without leaving\nany existential variables in them thanks to the uniform inheritance condition.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-03-11T20:27:05.000+01:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-03-11T21:23:19.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/608b53a279cf5f6da4d55add943a8f3777a20ec2"},"pipeline":{"id":51324208,"iid":7717,"project_id":6138686,"sha":"608b53a279cf5f6da4d55add943a8f3777a20ec2","ref":"pr-9743","status":"success","source":"push","created_at":"2019-03-11T20:39:48.851Z","updated_at":"2019-03-11T22:42:16.128Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/51324208"},"web_url":"https://gitlab.com/coq/coq/-/jobs/175598265","artifacts":[{"file_type":"trace","size":347998,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":175598264,"status":"success","stage":"test","name":"library:ci-math-comp","ref":"pr-9743","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-11T20:39:49.857Z","started_at":"2019-03-11T21:05:42.413Z","finished_at":"2019-03-11T22:42:16.042Z","duration":5793.628322,"queued_duration":3.902269,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"608b53a279cf5f6da4d55add943a8f3777a20ec2","short_id":"608b53a2","created_at":"2019-03-11T21:23:19.000+01:00","parent_ids":["74534f84a782f5de740c52cb97b3ca3a02eb6aa2"],"title":"Relax the ambiguous path condition of coercion","message":"Relax the ambiguous path condition of coercion\n\nThe `Coercion` command did report many ambiguous paths when one declared\nmultiple inheritances.  This change makes the `Coercion` command to do not\nreport them when\n1. all the coercion in the potentially ambiguous paths respect the uniform\n   inheritance condition and\n2. functional compositions of the potentially ambiguous paths are convertible to\n   each other.\nThe first condition is not explicitly checked but is used to make the checking\nprocess of the second condition easy.\n\nThe key idea:\nLet us consider a sequence of coercion\nf_1 : C_1 >-> C_2, f_2 : C_2 >-> C3, ..., f_n : C_n >-> C_(n+1)\nwhich respect the uniform inheritance condition and where the user-defined\nclasses C_i have m_i parameters respectively (i <= n).\nThe functional composition f_1 . ... . f_n can be expressed as follows:\n(fun x_1 ... x_(m_1) y =>\n  f_n _ ... _ (* m_n times repetition of holes *)\n      (...\n           (f_2 _ ... _ (* m_2 times repetition of holes *)\n                (f_1 x_1 ... x_(m_1) y))...)),\nand the contents of all the holes can be determined (inferred) without leaving\nany existential variables in them thanks to the uniform inheritance condition.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-03-11T20:27:05.000+01:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-03-11T21:23:19.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/608b53a279cf5f6da4d55add943a8f3777a20ec2"},"pipeline":{"id":51324208,"iid":7717,"project_id":6138686,"sha":"608b53a279cf5f6da4d55add943a8f3777a20ec2","ref":"pr-9743","status":"success","source":"push","created_at":"2019-03-11T20:39:48.851Z","updated_at":"2019-03-11T22:42:16.128Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/51324208"},"web_url":"https://gitlab.com/coq/coq/-/jobs/175598264","artifacts":[{"file_type":"trace","size":250586,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":175598263,"status":"success","stage":"test","name":"library:ci-iris-lambda-rust","ref":"pr-9743","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-11T20:39:49.838Z","started_at":"2019-03-11T21:05:42.366Z","finished_at":"2019-03-11T22:03:05.499Z","duration":3443.133249,"queued_duration":3.824839,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"608b53a279cf5f6da4d55add943a8f3777a20ec2","short_id":"608b53a2","created_at":"2019-03-11T21:23:19.000+01:00","parent_ids":["74534f84a782f5de740c52cb97b3ca3a02eb6aa2"],"title":"Relax the ambiguous path condition of coercion","message":"Relax the ambiguous path condition of coercion\n\nThe `Coercion` command did report many ambiguous paths when one declared\nmultiple inheritances.  This change makes the `Coercion` command to do not\nreport them when\n1. all the coercion in the potentially ambiguous paths respect the uniform\n   inheritance condition and\n2. functional compositions of the potentially ambiguous paths are convertible to\n   each other.\nThe first condition is not explicitly checked but is used to make the checking\nprocess of the second condition easy.\n\nThe key idea:\nLet us consider a sequence of coercion\nf_1 : C_1 >-> C_2, f_2 : C_2 >-> C3, ..., f_n : C_n >-> C_(n+1)\nwhich respect the uniform inheritance condition and where the user-defined\nclasses C_i have m_i parameters respectively (i <= n).\nThe functional composition f_1 . ... . f_n can be expressed as follows:\n(fun x_1 ... x_(m_1) y =>\n  f_n _ ... _ (* m_n times repetition of holes *)\n      (...\n           (f_2 _ ... _ (* m_2 times repetition of holes *)\n                (f_1 x_1 ... x_(m_1) y))...)),\nand the contents of all the holes can be determined (inferred) without leaving\nany existential variables in them thanks to the uniform inheritance condition.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-03-11T20:27:05.000+01:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-03-11T21:23:19.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/608b53a279cf5f6da4d55add943a8f3777a20ec2"},"pipeline":{"id":51324208,"iid":7717,"project_id":6138686,"sha":"608b53a279cf5f6da4d55add943a8f3777a20ec2","ref":"pr-9743","status":"success","source":"push","created_at":"2019-03-11T20:39:48.851Z","updated_at":"2019-03-11T22:42:16.128Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/51324208"},"web_url":"https://gitlab.com/coq/coq/-/jobs/175598263","artifacts":[{"file_type":"trace","size":284020,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":175598262,"status":"success","stage":"test","name":"library:ci-hott","ref":"pr-9743","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-11T20:39:49.820Z","started_at":"2019-03-11T21:05:38.696Z","finished_at":"2019-03-11T21:18:36.029Z","duration":777.333077,"queued_duration":0.111699,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"608b53a279cf5f6da4d55add943a8f3777a20ec2","short_id":"608b53a2","created_at":"2019-03-11T21:23:19.000+01:00","parent_ids":["74534f84a782f5de740c52cb97b3ca3a02eb6aa2"],"title":"Relax the ambiguous path condition of coercion","message":"Relax the ambiguous path condition of coercion\n\nThe `Coercion` command did report many ambiguous paths when one declared\nmultiple inheritances.  This change makes the `Coercion` command to do not\nreport them when\n1. all the coercion in the potentially ambiguous paths respect the uniform\n   inheritance condition and\n2. functional compositions of the potentially ambiguous paths are convertible to\n   each other.\nThe first condition is not explicitly checked but is used to make the checking\nprocess of the second condition easy.\n\nThe key idea:\nLet us consider a sequence of coercion\nf_1 : C_1 >-> C_2, f_2 : C_2 >-> C3, ..., f_n : C_n >-> C_(n+1)\nwhich respect the uniform inheritance condition and where the user-defined\nclasses C_i have m_i parameters respectively (i <= n).\nThe functional composition f_1 . ... . f_n can be expressed as follows:\n(fun x_1 ... x_(m_1) y =>\n  f_n _ ... _ (* m_n times repetition of holes *)\n      (...\n           (f_2 _ ... _ (* m_2 times repetition of holes *)\n                (f_1 x_1 ... x_(m_1) y))...)),\nand the contents of all the holes can be determined (inferred) without leaving\nany existential variables in them thanks to the uniform inheritance condition.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-03-11T20:27:05.000+01:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-03-11T21:23:19.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/608b53a279cf5f6da4d55add943a8f3777a20ec2"},"pipeline":{"id":51324208,"iid":7717,"project_id":6138686,"sha":"608b53a279cf5f6da4d55add943a8f3777a20ec2","ref":"pr-9743","status":"success","source":"push","created_at":"2019-03-11T20:39:48.851Z","updated_at":"2019-03-11T22:42:16.128Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/51324208"},"web_url":"https://gitlab.com/coq/coq/-/jobs/175598262","artifacts":[{"file_type":"trace","size":118842,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":175598261,"status":"success","stage":"test","name":"library:ci-geocoq","ref":"pr-9743","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-11T20:39:49.801Z","started_at":"2019-03-11T21:05:42.135Z","finished_at":"2019-03-11T21:54:55.689Z","duration":2953.554249,"queued_duration":3.520405,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"608b53a279cf5f6da4d55add943a8f3777a20ec2","short_id":"608b53a2","created_at":"2019-03-11T21:23:19.000+01:00","parent_ids":["74534f84a782f5de740c52cb97b3ca3a02eb6aa2"],"title":"Relax the ambiguous path condition of coercion","message":"Relax the ambiguous path condition of coercion\n\nThe `Coercion` command did report many ambiguous paths when one declared\nmultiple inheritances.  This change makes the `Coercion` command to do not\nreport them when\n1. all the coercion in the potentially ambiguous paths respect the uniform\n   inheritance condition and\n2. functional compositions of the potentially ambiguous paths are convertible to\n   each other.\nThe first condition is not explicitly checked but is used to make the checking\nprocess of the second condition easy.\n\nThe key idea:\nLet us consider a sequence of coercion\nf_1 : C_1 >-> C_2, f_2 : C_2 >-> C3, ..., f_n : C_n >-> C_(n+1)\nwhich respect the uniform inheritance condition and where the user-defined\nclasses C_i have m_i parameters respectively (i <= n).\nThe functional composition f_1 . ... . f_n can be expressed as follows:\n(fun x_1 ... x_(m_1) y =>\n  f_n _ ... _ (* m_n times repetition of holes *)\n      (...\n           (f_2 _ ... _ (* m_2 times repetition of holes *)\n                (f_1 x_1 ... x_(m_1) y))...)),\nand the contents of all the holes can be determined (inferred) without leaving\nany existential variables in them thanks to the uniform inheritance condition.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-03-11T20:27:05.000+01:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-03-11T21:23:19.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/608b53a279cf5f6da4d55add943a8f3777a20ec2"},"pipeline":{"id":51324208,"iid":7717,"project_id":6138686,"sha":"608b53a279cf5f6da4d55add943a8f3777a20ec2","ref":"pr-9743","status":"success","source":"push","created_at":"2019-03-11T20:39:48.851Z","updated_at":"2019-03-11T22:42:16.128Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/51324208"},"web_url":"https://gitlab.com/coq/coq/-/jobs/175598261","artifacts":[{"file_type":"trace","size":284951,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":175598260,"status":"success","stage":"test","name":"library:ci-corn","ref":"pr-9743","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-11T20:39:49.780Z","started_at":"2019-03-11T21:05:38.819Z","finished_at":"2019-03-11T21:48:45.236Z","duration":2586.417181,"queued_duration":0.177505,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"608b53a279cf5f6da4d55add943a8f3777a20ec2","short_id":"608b53a2","created_at":"2019-03-11T21:23:19.000+01:00","parent_ids":["74534f84a782f5de740c52cb97b3ca3a02eb6aa2"],"title":"Relax the ambiguous path condition of coercion","message":"Relax the ambiguous path condition of coercion\n\nThe `Coercion` command did report many ambiguous paths when one declared\nmultiple inheritances.  This change makes the `Coercion` command to do not\nreport them when\n1. all the coercion in the potentially ambiguous paths respect the uniform\n   inheritance condition and\n2. functional compositions of the potentially ambiguous paths are convertible to\n   each other.\nThe first condition is not explicitly checked but is used to make the checking\nprocess of the second condition easy.\n\nThe key idea:\nLet us consider a sequence of coercion\nf_1 : C_1 >-> C_2, f_2 : C_2 >-> C3, ..., f_n : C_n >-> C_(n+1)\nwhich respect the uniform inheritance condition and where the user-defined\nclasses C_i have m_i parameters respectively (i <= n).\nThe functional composition f_1 . ... . f_n can be expressed as follows:\n(fun x_1 ... x_(m_1) y =>\n  f_n _ ... _ (* m_n times repetition of holes *)\n      (...\n           (f_2 _ ... _ (* m_2 times repetition of holes *)\n                (f_1 x_1 ... x_(m_1) y))...)),\nand the contents of all the holes can be determined (inferred) without leaving\nany existential variables in them thanks to the uniform inheritance condition.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-03-11T20:27:05.000+01:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-03-11T21:23:19.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/608b53a279cf5f6da4d55add943a8f3777a20ec2"},"pipeline":{"id":51324208,"iid":7717,"project_id":6138686,"sha":"608b53a279cf5f6da4d55add943a8f3777a20ec2","ref":"pr-9743","status":"success","source":"push","created_at":"2019-03-11T20:39:48.851Z","updated_at":"2019-03-11T22:42:16.128Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/51324208"},"web_url":"https://gitlab.com/coq/coq/-/jobs/175598260","artifacts":[{"file_type":"trace","size":555041,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":175598259,"status":"success","stage":"test","name":"library:ci-flocq","ref":"pr-9743","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-11T20:39:49.759Z","started_at":"2019-03-11T21:05:38.736Z","finished_at":"2019-03-11T21:23:00.458Z","duration":1041.722444,"queued_duration":0.054298,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"608b53a279cf5f6da4d55add943a8f3777a20ec2","short_id":"608b53a2","created_at":"2019-03-11T21:23:19.000+01:00","parent_ids":["74534f84a782f5de740c52cb97b3ca3a02eb6aa2"],"title":"Relax the ambiguous path condition of coercion","message":"Relax the ambiguous path condition of coercion\n\nThe `Coercion` command did report many ambiguous paths when one declared\nmultiple inheritances.  This change makes the `Coercion` command to do not\nreport them when\n1. all the coercion in the potentially ambiguous paths respect the uniform\n   inheritance condition and\n2. functional compositions of the potentially ambiguous paths are convertible to\n   each other.\nThe first condition is not explicitly checked but is used to make the checking\nprocess of the second condition easy.\n\nThe key idea:\nLet us consider a sequence of coercion\nf_1 : C_1 >-> C_2, f_2 : C_2 >-> C3, ..., f_n : C_n >-> C_(n+1)\nwhich respect the uniform inheritance condition and where the user-defined\nclasses C_i have m_i parameters respectively (i <= n).\nThe functional composition f_1 . ... . f_n can be expressed as follows:\n(fun x_1 ... x_(m_1) y =>\n  f_n _ ... _ (* m_n times repetition of holes *)\n      (...\n           (f_2 _ ... _ (* m_2 times repetition of holes *)\n                (f_1 x_1 ... x_(m_1) y))...)),\nand the contents of all the holes can be determined (inferred) without leaving\nany existential variables in them thanks to the uniform inheritance condition.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-03-11T20:27:05.000+01:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-03-11T21:23:19.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/608b53a279cf5f6da4d55add943a8f3777a20ec2"},"pipeline":{"id":51324208,"iid":7717,"project_id":6138686,"sha":"608b53a279cf5f6da4d55add943a8f3777a20ec2","ref":"pr-9743","status":"success","source":"push","created_at":"2019-03-11T20:39:48.851Z","updated_at":"2019-03-11T22:42:16.128Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/51324208"},"web_url":"https://gitlab.com/coq/coq/-/jobs/175598259","artifacts":[{"file_type":"trace","size":59224,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":175598258,"status":"success","stage":"test","name":"library:ci-fiat-crypto-legacy","ref":"pr-9743","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-11T20:39:49.739Z","started_at":"2019-03-11T21:05:41.636Z","finished_at":"2019-03-11T22:16:32.487Z","duration":4250.851096,"queued_duration":2.926207,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"608b53a279cf5f6da4d55add943a8f3777a20ec2","short_id":"608b53a2","created_at":"2019-03-11T21:23:19.000+01:00","parent_ids":["74534f84a782f5de740c52cb97b3ca3a02eb6aa2"],"title":"Relax the ambiguous path condition of coercion","message":"Relax the ambiguous path condition of coercion\n\nThe `Coercion` command did report many ambiguous paths when one declared\nmultiple inheritances.  This change makes the `Coercion` command to do not\nreport them when\n1. all the coercion in the potentially ambiguous paths respect the uniform\n   inheritance condition and\n2. functional compositions of the potentially ambiguous paths are convertible to\n   each other.\nThe first condition is not explicitly checked but is used to make the checking\nprocess of the second condition easy.\n\nThe key idea:\nLet us consider a sequence of coercion\nf_1 : C_1 >-> C_2, f_2 : C_2 >-> C3, ..., f_n : C_n >-> C_(n+1)\nwhich respect the uniform inheritance condition and where the user-defined\nclasses C_i have m_i parameters respectively (i <= n).\nThe functional composition f_1 . ... . f_n can be expressed as follows:\n(fun x_1 ... x_(m_1) y =>\n  f_n _ ... _ (* m_n times repetition of holes *)\n      (...\n           (f_2 _ ... _ (* m_2 times repetition of holes *)\n                (f_1 x_1 ... x_(m_1) y))...)),\nand the contents of all the holes can be determined (inferred) without leaving\nany existential variables in them thanks to the uniform inheritance condition.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-03-11T20:27:05.000+01:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-03-11T21:23:19.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/608b53a279cf5f6da4d55add943a8f3777a20ec2"},"pipeline":{"id":51324208,"iid":7717,"project_id":6138686,"sha":"608b53a279cf5f6da4d55add943a8f3777a20ec2","ref":"pr-9743","status":"success","source":"push","created_at":"2019-03-11T20:39:48.851Z","updated_at":"2019-03-11T22:42:16.128Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/51324208"},"web_url":"https://gitlab.com/coq/coq/-/jobs/175598258","artifacts":[{"file_type":"trace","size":682144,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":175598257,"status":"success","stage":"test","name":"library:ci-fiat-crypto","ref":"pr-9743","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-11T20:39:49.722Z","started_at":"2019-03-11T21:05:41.595Z","finished_at":"2019-03-11T22:02:10.568Z","duration":3388.97375,"queued_duration":2.855347,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"608b53a279cf5f6da4d55add943a8f3777a20ec2","short_id":"608b53a2","created_at":"2019-03-11T21:23:19.000+01:00","parent_ids":["74534f84a782f5de740c52cb97b3ca3a02eb6aa2"],"title":"Relax the ambiguous path condition of coercion","message":"Relax the ambiguous path condition of coercion\n\nThe `Coercion` command did report many ambiguous paths when one declared\nmultiple inheritances.  This change makes the `Coercion` command to do not\nreport them when\n1. all the coercion in the potentially ambiguous paths respect the uniform\n   inheritance condition and\n2. functional compositions of the potentially ambiguous paths are convertible to\n   each other.\nThe first condition is not explicitly checked but is used to make the checking\nprocess of the second condition easy.\n\nThe key idea:\nLet us consider a sequence of coercion\nf_1 : C_1 >-> C_2, f_2 : C_2 >-> C3, ..., f_n : C_n >-> C_(n+1)\nwhich respect the uniform inheritance condition and where the user-defined\nclasses C_i have m_i parameters respectively (i <= n).\nThe functional composition f_1 . ... . f_n can be expressed as follows:\n(fun x_1 ... x_(m_1) y =>\n  f_n _ ... _ (* m_n times repetition of holes *)\n      (...\n           (f_2 _ ... _ (* m_2 times repetition of holes *)\n                (f_1 x_1 ... x_(m_1) y))...)),\nand the contents of all the holes can be determined (inferred) without leaving\nany existential variables in them thanks to the uniform inheritance condition.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-03-11T20:27:05.000+01:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-03-11T21:23:19.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/608b53a279cf5f6da4d55add943a8f3777a20ec2"},"pipeline":{"id":51324208,"iid":7717,"project_id":6138686,"sha":"608b53a279cf5f6da4d55add943a8f3777a20ec2","ref":"pr-9743","status":"success","source":"push","created_at":"2019-03-11T20:39:48.851Z","updated_at":"2019-03-11T22:42:16.128Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/51324208"},"web_url":"https://gitlab.com/coq/coq/-/jobs/175598257","artifacts":[{"file_type":"trace","size":300073,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":175598256,"status":"success","stage":"test","name":"library:ci-fcsl-pcm","ref":"pr-9743","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-11T20:39:49.704Z","started_at":"2019-03-11T21:05:41.536Z","finished_at":"2019-03-11T21:09:45.616Z","duration":244.079339,"queued_duration":2.739079,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"608b53a279cf5f6da4d55add943a8f3777a20ec2","short_id":"608b53a2","created_at":"2019-03-11T21:23:19.000+01:00","parent_ids":["74534f84a782f5de740c52cb97b3ca3a02eb6aa2"],"title":"Relax the ambiguous path condition of coercion","message":"Relax the ambiguous path condition of coercion\n\nThe `Coercion` command did report many ambiguous paths when one declared\nmultiple inheritances.  This change makes the `Coercion` command to do not\nreport them when\n1. all the coercion in the potentially ambiguous paths respect the uniform\n   inheritance condition and\n2. functional compositions of the potentially ambiguous paths are convertible to\n   each other.\nThe first condition is not explicitly checked but is used to make the checking\nprocess of the second condition easy.\n\nThe key idea:\nLet us consider a sequence of coercion\nf_1 : C_1 >-> C_2, f_2 : C_2 >-> C3, ..., f_n : C_n >-> C_(n+1)\nwhich respect the uniform inheritance condition and where the user-defined\nclasses C_i have m_i parameters respectively (i <= n).\nThe functional composition f_1 . ... . f_n can be expressed as follows:\n(fun x_1 ... x_(m_1) y =>\n  f_n _ ... _ (* m_n times repetition of holes *)\n      (...\n           (f_2 _ ... _ (* m_2 times repetition of holes *)\n                (f_1 x_1 ... x_(m_1) y))...)),\nand the contents of all the holes can be determined (inferred) without leaving\nany existential variables in them thanks to the uniform inheritance condition.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-03-11T20:27:05.000+01:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-03-11T21:23:19.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/608b53a279cf5f6da4d55add943a8f3777a20ec2"},"pipeline":{"id":51324208,"iid":7717,"project_id":6138686,"sha":"608b53a279cf5f6da4d55add943a8f3777a20ec2","ref":"pr-9743","status":"success","source":"push","created_at":"2019-03-11T20:39:48.851Z","updated_at":"2019-03-11T22:42:16.128Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/51324208"},"web_url":"https://gitlab.com/coq/coq/-/jobs/175598256","artifacts":[{"file_type":"trace","size":122905,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":175598255,"status":"success","stage":"test","name":"library:ci-cross-crypto","ref":"pr-9743","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-11T20:39:49.683Z","started_at":"2019-03-11T21:05:41.486Z","finished_at":"2019-03-11T21:46:21.756Z","duration":2440.270524,"queued_duration":2.651824,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"608b53a279cf5f6da4d55add943a8f3777a20ec2","short_id":"608b53a2","created_at":"2019-03-11T21:23:19.000+01:00","parent_ids":["74534f84a782f5de740c52cb97b3ca3a02eb6aa2"],"title":"Relax the ambiguous path condition of coercion","message":"Relax the ambiguous path condition of coercion\n\nThe `Coercion` command did report many ambiguous paths when one declared\nmultiple inheritances.  This change makes the `Coercion` command to do not\nreport them when\n1. all the coercion in the potentially ambiguous paths respect the uniform\n   inheritance condition and\n2. functional compositions of the potentially ambiguous paths are convertible to\n   each other.\nThe first condition is not explicitly checked but is used to make the checking\nprocess of the second condition easy.\n\nThe key idea:\nLet us consider a sequence of coercion\nf_1 : C_1 >-> C_2, f_2 : C_2 >-> C3, ..., f_n : C_n >-> C_(n+1)\nwhich respect the uniform inheritance condition and where the user-defined\nclasses C_i have m_i parameters respectively (i <= n).\nThe functional composition f_1 . ... . f_n can be expressed as follows:\n(fun x_1 ... x_(m_1) y =>\n  f_n _ ... _ (* m_n times repetition of holes *)\n      (...\n           (f_2 _ ... _ (* m_2 times repetition of holes *)\n                (f_1 x_1 ... x_(m_1) y))...)),\nand the contents of all the holes can be determined (inferred) without leaving\nany existential variables in them thanks to the uniform inheritance condition.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-03-11T20:27:05.000+01:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-03-11T21:23:19.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/608b53a279cf5f6da4d55add943a8f3777a20ec2"},"pipeline":{"id":51324208,"iid":7717,"project_id":6138686,"sha":"608b53a279cf5f6da4d55add943a8f3777a20ec2","ref":"pr-9743","status":"success","source":"push","created_at":"2019-03-11T20:39:48.851Z","updated_at":"2019-03-11T22:42:16.128Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/51324208"},"web_url":"https://gitlab.com/coq/coq/-/jobs/175598255","artifacts":[{"file_type":"trace","size":39560,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":175598254,"status":"success","stage":"test","name":"library:ci-coquelicot","ref":"pr-9743","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-11T20:39:49.664Z","started_at":"2019-03-11T21:05:39.068Z","finished_at":"2019-03-11T21:11:37.449Z","duration":358.38056,"queued_duration":0.195948,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"608b53a279cf5f6da4d55add943a8f3777a20ec2","short_id":"608b53a2","created_at":"2019-03-11T21:23:19.000+01:00","parent_ids":["74534f84a782f5de740c52cb97b3ca3a02eb6aa2"],"title":"Relax the ambiguous path condition of coercion","message":"Relax the ambiguous path condition of coercion\n\nThe `Coercion` command did report many ambiguous paths when one declared\nmultiple inheritances.  This change makes the `Coercion` command to do not\nreport them when\n1. all the coercion in the potentially ambiguous paths respect the uniform\n   inheritance condition and\n2. functional compositions of the potentially ambiguous paths are convertible to\n   each other.\nThe first condition is not explicitly checked but is used to make the checking\nprocess of the second condition easy.\n\nThe key idea:\nLet us consider a sequence of coercion\nf_1 : C_1 >-> C_2, f_2 : C_2 >-> C3, ..., f_n : C_n >-> C_(n+1)\nwhich respect the uniform inheritance condition and where the user-defined\nclasses C_i have m_i parameters respectively (i <= n).\nThe functional composition f_1 . ... . f_n can be expressed as follows:\n(fun x_1 ... x_(m_1) y =>\n  f_n _ ... _ (* m_n times repetition of holes *)\n      (...\n           (f_2 _ ... _ (* m_2 times repetition of holes *)\n                (f_1 x_1 ... x_(m_1) y))...)),\nand the contents of all the holes can be determined (inferred) without leaving\nany existential variables in them thanks to the uniform inheritance condition.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-03-11T20:27:05.000+01:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-03-11T21:23:19.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/608b53a279cf5f6da4d55add943a8f3777a20ec2"},"pipeline":{"id":51324208,"iid":7717,"project_id":6138686,"sha":"608b53a279cf5f6da4d55add943a8f3777a20ec2","ref":"pr-9743","status":"success","source":"push","created_at":"2019-03-11T20:39:48.851Z","updated_at":"2019-03-11T22:42:16.128Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/51324208"},"web_url":"https://gitlab.com/coq/coq/-/jobs/175598254","artifacts":[{"file_type":"trace","size":142599,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":175598253,"status":"success","stage":"test","name":"library:ci-compcert","ref":"pr-9743","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-11T20:39:49.645Z","started_at":"2019-03-11T21:05:39.059Z","finished_at":"2019-03-11T21:34:10.394Z","duration":1711.334338,"queued_duration":0.100938,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"608b53a279cf5f6da4d55add943a8f3777a20ec2","short_id":"608b53a2","created_at":"2019-03-11T21:23:19.000+01:00","parent_ids":["74534f84a782f5de740c52cb97b3ca3a02eb6aa2"],"title":"Relax the ambiguous path condition of coercion","message":"Relax the ambiguous path condition of coercion\n\nThe `Coercion` command did report many ambiguous paths when one declared\nmultiple inheritances.  This change makes the `Coercion` command to do not\nreport them when\n1. all the coercion in the potentially ambiguous paths respect the uniform\n   inheritance condition and\n2. functional compositions of the potentially ambiguous paths are convertible to\n   each other.\nThe first condition is not explicitly checked but is used to make the checking\nprocess of the second condition easy.\n\nThe key idea:\nLet us consider a sequence of coercion\nf_1 : C_1 >-> C_2, f_2 : C_2 >-> C3, ..., f_n : C_n >-> C_(n+1)\nwhich respect the uniform inheritance condition and where the user-defined\nclasses C_i have m_i parameters respectively (i <= n).\nThe functional composition f_1 . ... . f_n can be expressed as follows:\n(fun x_1 ... x_(m_1) y =>\n  f_n _ ... _ (* m_n times repetition of holes *)\n      (...\n           (f_2 _ ... _ (* m_2 times repetition of holes *)\n                (f_1 x_1 ... x_(m_1) y))...)),\nand the contents of all the holes can be determined (inferred) without leaving\nany existential variables in them thanks to the uniform inheritance condition.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-03-11T20:27:05.000+01:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-03-11T21:23:19.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/608b53a279cf5f6da4d55add943a8f3777a20ec2"},"pipeline":{"id":51324208,"iid":7717,"project_id":6138686,"sha":"608b53a279cf5f6da4d55add943a8f3777a20ec2","ref":"pr-9743","status":"success","source":"push","created_at":"2019-03-11T20:39:48.851Z","updated_at":"2019-03-11T22:42:16.128Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/51324208"},"web_url":"https://gitlab.com/coq/coq/-/jobs/175598253","artifacts":[{"file_type":"trace","size":4194360,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":175598252,"status":"success","stage":"test","name":"library:ci-color","ref":"pr-9743","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-11T20:39:49.627Z","started_at":"2019-03-11T21:05:39.061Z","finished_at":"2019-03-11T21:25:04.212Z","duration":1165.150387,"queued_duration":0.063406,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"608b53a279cf5f6da4d55add943a8f3777a20ec2","short_id":"608b53a2","created_at":"2019-03-11T21:23:19.000+01:00","parent_ids":["74534f84a782f5de740c52cb97b3ca3a02eb6aa2"],"title":"Relax the ambiguous path condition of coercion","message":"Relax the ambiguous path condition of coercion\n\nThe `Coercion` command did report many ambiguous paths when one declared\nmultiple inheritances.  This change makes the `Coercion` command to do not\nreport them when\n1. all the coercion in the potentially ambiguous paths respect the uniform\n   inheritance condition and\n2. functional compositions of the potentially ambiguous paths are convertible to\n   each other.\nThe first condition is not explicitly checked but is used to make the checking\nprocess of the second condition easy.\n\nThe key idea:\nLet us consider a sequence of coercion\nf_1 : C_1 >-> C_2, f_2 : C_2 >-> C3, ..., f_n : C_n >-> C_(n+1)\nwhich respect the uniform inheritance condition and where the user-defined\nclasses C_i have m_i parameters respectively (i <= n).\nThe functional composition f_1 . ... . f_n can be expressed as follows:\n(fun x_1 ... x_(m_1) y =>\n  f_n _ ... _ (* m_n times repetition of holes *)\n      (...\n           (f_2 _ ... _ (* m_2 times repetition of holes *)\n                (f_1 x_1 ... x_(m_1) y))...)),\nand the contents of all the holes can be determined (inferred) without leaving\nany existential variables in them thanks to the uniform inheritance condition.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-03-11T20:27:05.000+01:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-03-11T21:23:19.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/608b53a279cf5f6da4d55add943a8f3777a20ec2"},"pipeline":{"id":51324208,"iid":7717,"project_id":6138686,"sha":"608b53a279cf5f6da4d55add943a8f3777a20ec2","ref":"pr-9743","status":"success","source":"push","created_at":"2019-03-11T20:39:48.851Z","updated_at":"2019-03-11T22:42:16.128Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/51324208"},"web_url":"https://gitlab.com/coq/coq/-/jobs/175598252","artifacts":[{"file_type":"trace","size":242384,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":175598251,"status":"success","stage":"test","name":"library:ci-bedrock2","ref":"pr-9743","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-11T20:39:49.607Z","started_at":"2019-03-11T21:05:41.040Z","finished_at":"2019-03-11T21:59:48.499Z","duration":3247.45859,"queued_duration":2.005957,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"608b53a279cf5f6da4d55add943a8f3777a20ec2","short_id":"608b53a2","created_at":"2019-03-11T21:23:19.000+01:00","parent_ids":["74534f84a782f5de740c52cb97b3ca3a02eb6aa2"],"title":"Relax the ambiguous path condition of coercion","message":"Relax the ambiguous path condition of coercion\n\nThe `Coercion` command did report many ambiguous paths when one declared\nmultiple inheritances.  This change makes the `Coercion` command to do not\nreport them when\n1. all the coercion in the potentially ambiguous paths respect the uniform\n   inheritance condition and\n2. functional compositions of the potentially ambiguous paths are convertible to\n   each other.\nThe first condition is not explicitly checked but is used to make the checking\nprocess of the second condition easy.\n\nThe key idea:\nLet us consider a sequence of coercion\nf_1 : C_1 >-> C_2, f_2 : C_2 >-> C3, ..., f_n : C_n >-> C_(n+1)\nwhich respect the uniform inheritance condition and where the user-defined\nclasses C_i have m_i parameters respectively (i <= n).\nThe functional composition f_1 . ... . f_n can be expressed as follows:\n(fun x_1 ... x_(m_1) y =>\n  f_n _ ... _ (* m_n times repetition of holes *)\n      (...\n           (f_2 _ ... _ (* m_2 times repetition of holes *)\n                (f_1 x_1 ... x_(m_1) y))...)),\nand the contents of all the holes can be determined (inferred) without leaving\nany existential variables in them thanks to the uniform inheritance condition.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-03-11T20:27:05.000+01:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-03-11T21:23:19.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/608b53a279cf5f6da4d55add943a8f3777a20ec2"},"pipeline":{"id":51324208,"iid":7717,"project_id":6138686,"sha":"608b53a279cf5f6da4d55add943a8f3777a20ec2","ref":"pr-9743","status":"success","source":"push","created_at":"2019-03-11T20:39:48.851Z","updated_at":"2019-03-11T22:42:16.128Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/51324208"},"web_url":"https://gitlab.com/coq/coq/-/jobs/175598251","artifacts":[{"file_type":"trace","size":290988,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":175598250,"status":"success","stage":"test","name":"validate:quick","ref":"pr-9743","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-11T20:39:49.586Z","started_at":"2019-03-11T21:05:40.861Z","finished_at":"2019-03-11T21:09:31.376Z","duration":230.515624,"queued_duration":1.799064,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"608b53a279cf5f6da4d55add943a8f3777a20ec2","short_id":"608b53a2","created_at":"2019-03-11T21:23:19.000+01:00","parent_ids":["74534f84a782f5de740c52cb97b3ca3a02eb6aa2"],"title":"Relax the ambiguous path condition of coercion","message":"Relax the ambiguous path condition of coercion\n\nThe `Coercion` command did report many ambiguous paths when one declared\nmultiple inheritances.  This change makes the `Coercion` command to do not\nreport them when\n1. all the coercion in the potentially ambiguous paths respect the uniform\n   inheritance condition and\n2. functional compositions of the potentially ambiguous paths are convertible to\n   each other.\nThe first condition is not explicitly checked but is used to make the checking\nprocess of the second condition easy.\n\nThe key idea:\nLet us consider a sequence of coercion\nf_1 : C_1 >-> C_2, f_2 : C_2 >-> C3, ..., f_n : C_n >-> C_(n+1)\nwhich respect the uniform inheritance condition and where the user-defined\nclasses C_i have m_i parameters respectively (i <= n).\nThe functional composition f_1 . ... . f_n can be expressed as follows:\n(fun x_1 ... x_(m_1) y =>\n  f_n _ ... _ (* m_n times repetition of holes *)\n      (...\n           (f_2 _ ... _ (* m_2 times repetition of holes *)\n                (f_1 x_1 ... x_(m_1) y))...)),\nand the contents of all the holes can be determined (inferred) without leaving\nany existential variables in them thanks to the uniform inheritance condition.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-03-11T20:27:05.000+01:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-03-11T21:23:19.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/608b53a279cf5f6da4d55add943a8f3777a20ec2"},"pipeline":{"id":51324208,"iid":7717,"project_id":6138686,"sha":"608b53a279cf5f6da4d55add943a8f3777a20ec2","ref":"pr-9743","status":"success","source":"push","created_at":"2019-03-11T20:39:48.851Z","updated_at":"2019-03-11T22:42:16.128Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/51324208"},"web_url":"https://gitlab.com/coq/coq/-/jobs/175598250","artifacts":[{"file_type":"trace","size":23545,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":175598249,"status":"success","stage":"test","name":"validate:edge+flambda","ref":"pr-9743","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-11T20:39:49.568Z","started_at":"2019-03-11T21:05:39.895Z","finished_at":"2019-03-11T21:09:35.334Z","duration":235.438603,"queued_duration":0.805729,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"608b53a279cf5f6da4d55add943a8f3777a20ec2","short_id":"608b53a2","created_at":"2019-03-11T21:23:19.000+01:00","parent_ids":["74534f84a782f5de740c52cb97b3ca3a02eb6aa2"],"title":"Relax the ambiguous path condition of coercion","message":"Relax the ambiguous path condition of coercion\n\nThe `Coercion` command did report many ambiguous paths when one declared\nmultiple inheritances.  This change makes the `Coercion` command to do not\nreport them when\n1. all the coercion in the potentially ambiguous paths respect the uniform\n   inheritance condition and\n2. functional compositions of the potentially ambiguous paths are convertible to\n   each other.\nThe first condition is not explicitly checked but is used to make the checking\nprocess of the second condition easy.\n\nThe key idea:\nLet us consider a sequence of coercion\nf_1 : C_1 >-> C_2, f_2 : C_2 >-> C3, ..., f_n : C_n >-> C_(n+1)\nwhich respect the uniform inheritance condition and where the user-defined\nclasses C_i have m_i parameters respectively (i <= n).\nThe functional composition f_1 . ... . f_n can be expressed as follows:\n(fun x_1 ... x_(m_1) y =>\n  f_n _ ... _ (* m_n times repetition of holes *)\n      (...\n           (f_2 _ ... _ (* m_2 times repetition of holes *)\n                (f_1 x_1 ... x_(m_1) y))...)),\nand the contents of all the holes can be determined (inferred) without leaving\nany existential variables in them thanks to the uniform inheritance condition.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-03-11T20:27:05.000+01:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-03-11T21:23:19.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/608b53a279cf5f6da4d55add943a8f3777a20ec2"},"pipeline":{"id":51324208,"iid":7717,"project_id":6138686,"sha":"608b53a279cf5f6da4d55add943a8f3777a20ec2","ref":"pr-9743","status":"success","source":"push","created_at":"2019-03-11T20:39:48.851Z","updated_at":"2019-03-11T22:42:16.128Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/51324208"},"web_url":"https://gitlab.com/coq/coq/-/jobs/175598249","artifacts":[{"file_type":"trace","size":23873,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":175598248,"status":"success","stage":"test","name":"validate:base+32bit","ref":"pr-9743","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-11T20:39:49.548Z","started_at":"2019-03-11T21:05:39.332Z","finished_at":"2019-03-11T21:09:37.108Z","duration":237.775855,"queued_duration":0.207747,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"608b53a279cf5f6da4d55add943a8f3777a20ec2","short_id":"608b53a2","created_at":"2019-03-11T21:23:19.000+01:00","parent_ids":["74534f84a782f5de740c52cb97b3ca3a02eb6aa2"],"title":"Relax the ambiguous path condition of coercion","message":"Relax the ambiguous path condition of coercion\n\nThe `Coercion` command did report many ambiguous paths when one declared\nmultiple inheritances.  This change makes the `Coercion` command to do not\nreport them when\n1. all the coercion in the potentially ambiguous paths respect the uniform\n   inheritance condition and\n2. functional compositions of the potentially ambiguous paths are convertible to\n   each other.\nThe first condition is not explicitly checked but is used to make the checking\nprocess of the second condition easy.\n\nThe key idea:\nLet us consider a sequence of coercion\nf_1 : C_1 >-> C_2, f_2 : C_2 >-> C3, ..., f_n : C_n >-> C_(n+1)\nwhich respect the uniform inheritance condition and where the user-defined\nclasses C_i have m_i parameters respectively (i <= n).\nThe functional composition f_1 . ... . f_n can be expressed as follows:\n(fun x_1 ... x_(m_1) y =>\n  f_n _ ... _ (* m_n times repetition of holes *)\n      (...\n           (f_2 _ ... _ (* m_2 times repetition of holes *)\n                (f_1 x_1 ... x_(m_1) y))...)),\nand the contents of all the holes can be determined (inferred) without leaving\nany existential variables in them thanks to the uniform inheritance condition.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-03-11T20:27:05.000+01:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-03-11T21:23:19.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/608b53a279cf5f6da4d55add943a8f3777a20ec2"},"pipeline":{"id":51324208,"iid":7717,"project_id":6138686,"sha":"608b53a279cf5f6da4d55add943a8f3777a20ec2","ref":"pr-9743","status":"success","source":"push","created_at":"2019-03-11T20:39:48.851Z","updated_at":"2019-03-11T22:42:16.128Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/51324208"},"web_url":"https://gitlab.com/coq/coq/-/jobs/175598248","artifacts":[{"file_type":"trace","size":22041,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":175598247,"status":"success","stage":"test","name":"validate:base","ref":"pr-9743","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-11T20:39:49.528Z","started_at":"2019-03-11T21:05:39.247Z","finished_at":"2019-03-11T21:09:27.861Z","duration":228.614293,"queued_duration":0.092226,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"608b53a279cf5f6da4d55add943a8f3777a20ec2","short_id":"608b53a2","created_at":"2019-03-11T21:23:19.000+01:00","parent_ids":["74534f84a782f5de740c52cb97b3ca3a02eb6aa2"],"title":"Relax the ambiguous path condition of coercion","message":"Relax the ambiguous path condition of coercion\n\nThe `Coercion` command did report many ambiguous paths when one declared\nmultiple inheritances.  This change makes the `Coercion` command to do not\nreport them when\n1. all the coercion in the potentially ambiguous paths respect the uniform\n   inheritance condition and\n2. functional compositions of the potentially ambiguous paths are convertible to\n   each other.\nThe first condition is not explicitly checked but is used to make the checking\nprocess of the second condition easy.\n\nThe key idea:\nLet us consider a sequence of coercion\nf_1 : C_1 >-> C_2, f_2 : C_2 >-> C3, ..., f_n : C_n >-> C_(n+1)\nwhich respect the uniform inheritance condition and where the user-defined\nclasses C_i have m_i parameters respectively (i <= n).\nThe functional composition f_1 . ... . f_n can be expressed as follows:\n(fun x_1 ... x_(m_1) y =>\n  f_n _ ... _ (* m_n times repetition of holes *)\n      (...\n           (f_2 _ ... _ (* m_2 times repetition of holes *)\n                (f_1 x_1 ... x_(m_1) y))...)),\nand the contents of all the holes can be determined (inferred) without leaving\nany existential variables in them thanks to the uniform inheritance condition.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-03-11T20:27:05.000+01:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-03-11T21:23:19.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/608b53a279cf5f6da4d55add943a8f3777a20ec2"},"pipeline":{"id":51324208,"iid":7717,"project_id":6138686,"sha":"608b53a279cf5f6da4d55add943a8f3777a20ec2","ref":"pr-9743","status":"success","source":"push","created_at":"2019-03-11T20:39:48.851Z","updated_at":"2019-03-11T22:42:16.128Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/51324208"},"web_url":"https://gitlab.com/coq/coq/-/jobs/175598247","artifacts":[{"file_type":"trace","size":23542,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":175598246,"status":"success","stage":"test","name":"test-suite:base+async","ref":"pr-9743","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-11T20:39:49.509Z","started_at":"2019-03-11T21:05:39.851Z","finished_at":"2019-03-11T22:09:35.864Z","duration":3836.01216,"queued_duration":0.668567,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"608b53a279cf5f6da4d55add943a8f3777a20ec2","short_id":"608b53a2","created_at":"2019-03-11T21:23:19.000+01:00","parent_ids":["74534f84a782f5de740c52cb97b3ca3a02eb6aa2"],"title":"Relax the ambiguous path condition of coercion","message":"Relax the ambiguous path condition of coercion\n\nThe `Coercion` command did report many ambiguous paths when one declared\nmultiple inheritances.  This change makes the `Coercion` command to do not\nreport them when\n1. all the coercion in the potentially ambiguous paths respect the uniform\n   inheritance condition and\n2. functional compositions of the potentially ambiguous paths are convertible to\n   each other.\nThe first condition is not explicitly checked but is used to make the checking\nprocess of the second condition easy.\n\nThe key idea:\nLet us consider a sequence of coercion\nf_1 : C_1 >-> C_2, f_2 : C_2 >-> C3, ..., f_n : C_n >-> C_(n+1)\nwhich respect the uniform inheritance condition and where the user-defined\nclasses C_i have m_i parameters respectively (i <= n).\nThe functional composition f_1 . ... . f_n can be expressed as follows:\n(fun x_1 ... x_(m_1) y =>\n  f_n _ ... _ (* m_n times repetition of holes *)\n      (...\n           (f_2 _ ... _ (* m_2 times repetition of holes *)\n                (f_1 x_1 ... x_(m_1) y))...)),\nand the contents of all the holes can be determined (inferred) without leaving\nany existential variables in them thanks to the uniform inheritance condition.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-03-11T20:27:05.000+01:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-03-11T21:23:19.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/608b53a279cf5f6da4d55add943a8f3777a20ec2"},"pipeline":{"id":51324208,"iid":7717,"project_id":6138686,"sha":"608b53a279cf5f6da4d55add943a8f3777a20ec2","ref":"pr-9743","status":"success","source":"push","created_at":"2019-03-11T20:39:48.851Z","updated_at":"2019-03-11T22:42:16.128Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/51324208"},"web_url":"https://gitlab.com/coq/coq/-/jobs/175598246","artifacts":[{"file_type":"trace","size":86207,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":175598245,"status":"failed","stage":"test","name":"test-suite:edge+trunk+dune","ref":"pr-9743","tag":false,"coverage":null,"allow_failure":true,"created_at":"2019-03-11T20:39:49.490Z","started_at":"2019-03-11T21:05:39.808Z","finished_at":"2019-03-11T21:15:24.149Z","duration":584.340474,"queued_duration":0.593759,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"608b53a279cf5f6da4d55add943a8f3777a20ec2","short_id":"608b53a2","created_at":"2019-03-11T21:23:19.000+01:00","parent_ids":["74534f84a782f5de740c52cb97b3ca3a02eb6aa2"],"title":"Relax the ambiguous path condition of coercion","message":"Relax the ambiguous path condition of coercion\n\nThe `Coercion` command did report many ambiguous paths when one declared\nmultiple inheritances.  This change makes the `Coercion` command to do not\nreport them when\n1. all the coercion in the potentially ambiguous paths respect the uniform\n   inheritance condition and\n2. functional compositions of the potentially ambiguous paths are convertible to\n   each other.\nThe first condition is not explicitly checked but is used to make the checking\nprocess of the second condition easy.\n\nThe key idea:\nLet us consider a sequence of coercion\nf_1 : C_1 >-> C_2, f_2 : C_2 >-> C3, ..., f_n : C_n >-> C_(n+1)\nwhich respect the uniform inheritance condition and where the user-defined\nclasses C_i have m_i parameters respectively (i <= n).\nThe functional composition f_1 . ... . f_n can be expressed as follows:\n(fun x_1 ... x_(m_1) y =>\n  f_n _ ... _ (* m_n times repetition of holes *)\n      (...\n           (f_2 _ ... _ (* m_2 times repetition of holes *)\n                (f_1 x_1 ... x_(m_1) y))...)),\nand the contents of all the holes can be determined (inferred) without leaving\nany existential variables in them thanks to the uniform inheritance condition.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-03-11T20:27:05.000+01:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-03-11T21:23:19.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/608b53a279cf5f6da4d55add943a8f3777a20ec2"},"pipeline":{"id":51324208,"iid":7717,"project_id":6138686,"sha":"608b53a279cf5f6da4d55add943a8f3777a20ec2","ref":"pr-9743","status":"success","source":"push","created_at":"2019-03-11T20:39:48.851Z","updated_at":"2019-03-11T22:42:16.128Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/51324208"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/175598245","artifacts":[{"file_type":"trace","size":22251,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":175598244,"status":"failed","stage":"test","name":"test-suite:edge+trunk+make","ref":"pr-9743","tag":false,"coverage":null,"allow_failure":true,"created_at":"2019-03-11T20:39:49.473Z","started_at":"2019-03-11T21:05:39.560Z","finished_at":"2019-03-11T21:15:25.256Z","duration":585.696195,"queued_duration":0.300896,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"608b53a279cf5f6da4d55add943a8f3777a20ec2","short_id":"608b53a2","created_at":"2019-03-11T21:23:19.000+01:00","parent_ids":["74534f84a782f5de740c52cb97b3ca3a02eb6aa2"],"title":"Relax the ambiguous path condition of coercion","message":"Relax the ambiguous path condition of coercion\n\nThe `Coercion` command did report many ambiguous paths when one declared\nmultiple inheritances.  This change makes the `Coercion` command to do not\nreport them when\n1. all the coercion in the potentially ambiguous paths respect the uniform\n   inheritance condition and\n2. functional compositions of the potentially ambiguous paths are convertible to\n   each other.\nThe first condition is not explicitly checked but is used to make the checking\nprocess of the second condition easy.\n\nThe key idea:\nLet us consider a sequence of coercion\nf_1 : C_1 >-> C_2, f_2 : C_2 >-> C3, ..., f_n : C_n >-> C_(n+1)\nwhich respect the uniform inheritance condition and where the user-defined\nclasses C_i have m_i parameters respectively (i <= n).\nThe functional composition f_1 . ... . f_n can be expressed as follows:\n(fun x_1 ... x_(m_1) y =>\n  f_n _ ... _ (* m_n times repetition of holes *)\n      (...\n           (f_2 _ ... _ (* m_2 times repetition of holes *)\n                (f_1 x_1 ... x_(m_1) y))...)),\nand the contents of all the holes can be determined (inferred) without leaving\nany existential variables in them thanks to the uniform inheritance condition.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-03-11T20:27:05.000+01:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-03-11T21:23:19.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/608b53a279cf5f6da4d55add943a8f3777a20ec2"},"pipeline":{"id":51324208,"iid":7717,"project_id":6138686,"sha":"608b53a279cf5f6da4d55add943a8f3777a20ec2","ref":"pr-9743","status":"success","source":"push","created_at":"2019-03-11T20:39:48.851Z","updated_at":"2019-03-11T22:42:16.128Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/51324208"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/175598244","artifacts":[{"file_type":"trace","size":22242,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":175598243,"status":"success","stage":"test","name":"test-suite:egde:dune:dev","ref":"pr-9743","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-11T20:39:49.454Z","started_at":"2019-03-11T21:05:39.369Z","finished_at":"2019-03-11T21:35:09.359Z","duration":1769.989928,"queued_duration":0.044308,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"608b53a279cf5f6da4d55add943a8f3777a20ec2","short_id":"608b53a2","created_at":"2019-03-11T21:23:19.000+01:00","parent_ids":["74534f84a782f5de740c52cb97b3ca3a02eb6aa2"],"title":"Relax the ambiguous path condition of coercion","message":"Relax the ambiguous path condition of coercion\n\nThe `Coercion` command did report many ambiguous paths when one declared\nmultiple inheritances.  This change makes the `Coercion` command to do not\nreport them when\n1. all the coercion in the potentially ambiguous paths respect the uniform\n   inheritance condition and\n2. functional compositions of the potentially ambiguous paths are convertible to\n   each other.\nThe first condition is not explicitly checked but is used to make the checking\nprocess of the second condition easy.\n\nThe key idea:\nLet us consider a sequence of coercion\nf_1 : C_1 >-> C_2, f_2 : C_2 >-> C3, ..., f_n : C_n >-> C_(n+1)\nwhich respect the uniform inheritance condition and where the user-defined\nclasses C_i have m_i parameters respectively (i <= n).\nThe functional composition f_1 . ... . f_n can be expressed as follows:\n(fun x_1 ... x_(m_1) y =>\n  f_n _ ... _ (* m_n times repetition of holes *)\n      (...\n           (f_2 _ ... _ (* m_2 times repetition of holes *)\n                (f_1 x_1 ... x_(m_1) y))...)),\nand the contents of all the holes can be determined (inferred) without leaving\nany existential variables in them thanks to the uniform inheritance condition.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-03-11T20:27:05.000+01:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-03-11T21:23:19.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/608b53a279cf5f6da4d55add943a8f3777a20ec2"},"pipeline":{"id":51324208,"iid":7717,"project_id":6138686,"sha":"608b53a279cf5f6da4d55add943a8f3777a20ec2","ref":"pr-9743","status":"success","source":"push","created_at":"2019-03-11T20:39:48.851Z","updated_at":"2019-03-11T22:42:16.128Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/51324208"},"web_url":"https://gitlab.com/coq/coq/-/jobs/175598243","artifacts":[{"file_type":"trace","size":119122,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":175598242,"status":"success","stage":"test","name":"test-suite:edge+flambda","ref":"pr-9743","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-11T20:39:49.433Z","started_at":"2019-03-11T21:05:39.588Z","finished_at":"2019-03-11T21:43:12.555Z","duration":2252.967461,"queued_duration":0.19859,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"608b53a279cf5f6da4d55add943a8f3777a20ec2","short_id":"608b53a2","created_at":"2019-03-11T21:23:19.000+01:00","parent_ids":["74534f84a782f5de740c52cb97b3ca3a02eb6aa2"],"title":"Relax the ambiguous path condition of coercion","message":"Relax the ambiguous path condition of coercion\n\nThe `Coercion` command did report many ambiguous paths when one declared\nmultiple inheritances.  This change makes the `Coercion` command to do not\nreport them when\n1. all the coercion in the potentially ambiguous paths respect the uniform\n   inheritance condition and\n2. functional compositions of the potentially ambiguous paths are convertible to\n   each other.\nThe first condition is not explicitly checked but is used to make the checking\nprocess of the second condition easy.\n\nThe key idea:\nLet us consider a sequence of coercion\nf_1 : C_1 >-> C_2, f_2 : C_2 >-> C3, ..., f_n : C_n >-> C_(n+1)\nwhich respect the uniform inheritance condition and where the user-defined\nclasses C_i have m_i parameters respectively (i <= n).\nThe functional composition f_1 . ... . f_n can be expressed as follows:\n(fun x_1 ... x_(m_1) y =>\n  f_n _ ... _ (* m_n times repetition of holes *)\n      (...\n           (f_2 _ ... _ (* m_2 times repetition of holes *)\n                (f_1 x_1 ... x_(m_1) y))...)),\nand the contents of all the holes can be determined (inferred) without leaving\nany existential variables in them thanks to the uniform inheritance condition.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-03-11T20:27:05.000+01:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-03-11T21:23:19.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/608b53a279cf5f6da4d55add943a8f3777a20ec2"},"pipeline":{"id":51324208,"iid":7717,"project_id":6138686,"sha":"608b53a279cf5f6da4d55add943a8f3777a20ec2","ref":"pr-9743","status":"success","source":"push","created_at":"2019-03-11T20:39:48.851Z","updated_at":"2019-03-11T22:42:16.128Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/51324208"},"web_url":"https://gitlab.com/coq/coq/-/jobs/175598242","artifacts":[{"file_type":"trace","size":86563,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":175598241,"status":"success","stage":"test","name":"test-suite:base+32bit","ref":"pr-9743","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-11T20:39:49.414Z","started_at":"2019-03-11T21:05:39.676Z","finished_at":"2019-03-11T21:35:48.774Z","duration":1809.097732,"queued_duration":0.177487,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"608b53a279cf5f6da4d55add943a8f3777a20ec2","short_id":"608b53a2","created_at":"2019-03-11T21:23:19.000+01:00","parent_ids":["74534f84a782f5de740c52cb97b3ca3a02eb6aa2"],"title":"Relax the ambiguous path condition of coercion","message":"Relax the ambiguous path condition of coercion\n\nThe `Coercion` command did report many ambiguous paths when one declared\nmultiple inheritances.  This change makes the `Coercion` command to do not\nreport them when\n1. all the coercion in the potentially ambiguous paths respect the uniform\n   inheritance condition and\n2. functional compositions of the potentially ambiguous paths are convertible to\n   each other.\nThe first condition is not explicitly checked but is used to make the checking\nprocess of the second condition easy.\n\nThe key idea:\nLet us consider a sequence of coercion\nf_1 : C_1 >-> C_2, f_2 : C_2 >-> C3, ..., f_n : C_n >-> C_(n+1)\nwhich respect the uniform inheritance condition and where the user-defined\nclasses C_i have m_i parameters respectively (i <= n).\nThe functional composition f_1 . ... . f_n can be expressed as follows:\n(fun x_1 ... x_(m_1) y =>\n  f_n _ ... _ (* m_n times repetition of holes *)\n      (...\n           (f_2 _ ... _ (* m_2 times repetition of holes *)\n                (f_1 x_1 ... x_(m_1) y))...)),\nand the contents of all the holes can be determined (inferred) without leaving\nany existential variables in them thanks to the uniform inheritance condition.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-03-11T20:27:05.000+01:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-03-11T21:23:19.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/608b53a279cf5f6da4d55add943a8f3777a20ec2"},"pipeline":{"id":51324208,"iid":7717,"project_id":6138686,"sha":"608b53a279cf5f6da4d55add943a8f3777a20ec2","ref":"pr-9743","status":"success","source":"push","created_at":"2019-03-11T20:39:48.851Z","updated_at":"2019-03-11T22:42:16.128Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/51324208"},"web_url":"https://gitlab.com/coq/coq/-/jobs/175598241","artifacts":[{"file_type":"trace","size":84731,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":175598240,"status":"success","stage":"test","name":"test-suite:base","ref":"pr-9743","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-11T20:39:49.395Z","started_at":"2019-03-11T21:05:39.727Z","finished_at":"2019-03-11T21:44:01.816Z","duration":2302.088949,"queued_duration":0.112156,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"608b53a279cf5f6da4d55add943a8f3777a20ec2","short_id":"608b53a2","created_at":"2019-03-11T21:23:19.000+01:00","parent_ids":["74534f84a782f5de740c52cb97b3ca3a02eb6aa2"],"title":"Relax the ambiguous path condition of coercion","message":"Relax the ambiguous path condition of coercion\n\nThe `Coercion` command did report many ambiguous paths when one declared\nmultiple inheritances.  This change makes the `Coercion` command to do not\nreport them when\n1. all the coercion in the potentially ambiguous paths respect the uniform\n   inheritance condition and\n2. functional compositions of the potentially ambiguous paths are convertible to\n   each other.\nThe first condition is not explicitly checked but is used to make the checking\nprocess of the second condition easy.\n\nThe key idea:\nLet us consider a sequence of coercion\nf_1 : C_1 >-> C_2, f_2 : C_2 >-> C3, ..., f_n : C_n >-> C_(n+1)\nwhich respect the uniform inheritance condition and where the user-defined\nclasses C_i have m_i parameters respectively (i <= n).\nThe functional composition f_1 . ... . f_n can be expressed as follows:\n(fun x_1 ... x_(m_1) y =>\n  f_n _ ... _ (* m_n times repetition of holes *)\n      (...\n           (f_2 _ ... _ (* m_2 times repetition of holes *)\n                (f_1 x_1 ... x_(m_1) y))...)),\nand the contents of all the holes can be determined (inferred) without leaving\nany existential variables in them thanks to the uniform inheritance condition.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-03-11T20:27:05.000+01:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-03-11T21:23:19.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/608b53a279cf5f6da4d55add943a8f3777a20ec2"},"pipeline":{"id":51324208,"iid":7717,"project_id":6138686,"sha":"608b53a279cf5f6da4d55add943a8f3777a20ec2","ref":"pr-9743","status":"success","source":"push","created_at":"2019-03-11T20:39:48.851Z","updated_at":"2019-03-11T22:42:16.128Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/51324208"},"web_url":"https://gitlab.com/coq/coq/-/jobs/175598240","artifacts":[{"file_type":"trace","size":86232,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":175598239,"status":"success","stage":"test","name":"doc:ml-api:odoc","ref":"pr-9743","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-11T20:39:49.376Z","started_at":"2019-03-11T21:05:39.769Z","finished_at":"2019-03-11T21:09:34.575Z","duration":234.805574,"queued_duration":0.067591,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"608b53a279cf5f6da4d55add943a8f3777a20ec2","short_id":"608b53a2","created_at":"2019-03-11T21:23:19.000+01:00","parent_ids":["74534f84a782f5de740c52cb97b3ca3a02eb6aa2"],"title":"Relax the ambiguous path condition of coercion","message":"Relax the ambiguous path condition of coercion\n\nThe `Coercion` command did report many ambiguous paths when one declared\nmultiple inheritances.  This change makes the `Coercion` command to do not\nreport them when\n1. all the coercion in the potentially ambiguous paths respect the uniform\n   inheritance condition and\n2. functional compositions of the potentially ambiguous paths are convertible to\n   each other.\nThe first condition is not explicitly checked but is used to make the checking\nprocess of the second condition easy.\n\nThe key idea:\nLet us consider a sequence of coercion\nf_1 : C_1 >-> C_2, f_2 : C_2 >-> C3, ..., f_n : C_n >-> C_(n+1)\nwhich respect the uniform inheritance condition and where the user-defined\nclasses C_i have m_i parameters respectively (i <= n).\nThe functional composition f_1 . ... . f_n can be expressed as follows:\n(fun x_1 ... x_(m_1) y =>\n  f_n _ ... _ (* m_n times repetition of holes *)\n      (...\n           (f_2 _ ... _ (* m_2 times repetition of holes *)\n                (f_1 x_1 ... x_(m_1) y))...)),\nand the contents of all the holes can be determined (inferred) without leaving\nany existential variables in them thanks to the uniform inheritance condition.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-03-11T20:27:05.000+01:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-03-11T21:23:19.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/608b53a279cf5f6da4d55add943a8f3777a20ec2"},"pipeline":{"id":51324208,"iid":7717,"project_id":6138686,"sha":"608b53a279cf5f6da4d55add943a8f3777a20ec2","ref":"pr-9743","status":"success","source":"push","created_at":"2019-03-11T20:39:48.851Z","updated_at":"2019-03-11T22:42:16.128Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/51324208"},"web_url":"https://gitlab.com/coq/coq/-/jobs/175598239","artifacts":[{"file_type":"trace","size":112931,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":"2019-04-10T21:09:30.180Z","tag_list":[]}
{"id":175598238,"status":"success","stage":"test","name":"doc:stdlib:dune","ref":"pr-9743","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-11T20:39:49.357Z","started_at":"2019-03-11T21:05:40.702Z","finished_at":"2019-03-11T21:19:30.114Z","duration":829.412568,"queued_duration":0.964056,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"608b53a279cf5f6da4d55add943a8f3777a20ec2","short_id":"608b53a2","created_at":"2019-03-11T21:23:19.000+01:00","parent_ids":["74534f84a782f5de740c52cb97b3ca3a02eb6aa2"],"title":"Relax the ambiguous path condition of coercion","message":"Relax the ambiguous path condition of coercion\n\nThe `Coercion` command did report many ambiguous paths when one declared\nmultiple inheritances.  This change makes the `Coercion` command to do not\nreport them when\n1. all the coercion in the potentially ambiguous paths respect the uniform\n   inheritance condition and\n2. functional compositions of the potentially ambiguous paths are convertible to\n   each other.\nThe first condition is not explicitly checked but is used to make the checking\nprocess of the second condition easy.\n\nThe key idea:\nLet us consider a sequence of coercion\nf_1 : C_1 >-> C_2, f_2 : C_2 >-> C3, ..., f_n : C_n >-> C_(n+1)\nwhich respect the uniform inheritance condition and where the user-defined\nclasses C_i have m_i parameters respectively (i <= n).\nThe functional composition f_1 . ... . f_n can be expressed as follows:\n(fun x_1 ... x_(m_1) y =>\n  f_n _ ... _ (* m_n times repetition of holes *)\n      (...\n           (f_2 _ ... _ (* m_2 times repetition of holes *)\n                (f_1 x_1 ... x_(m_1) y))...)),\nand the contents of all the holes can be determined (inferred) without leaving\nany existential variables in them thanks to the uniform inheritance condition.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-03-11T20:27:05.000+01:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-03-11T21:23:19.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/608b53a279cf5f6da4d55add943a8f3777a20ec2"},"pipeline":{"id":51324208,"iid":7717,"project_id":6138686,"sha":"608b53a279cf5f6da4d55add943a8f3777a20ec2","ref":"pr-9743","status":"success","source":"push","created_at":"2019-03-11T20:39:48.851Z","updated_at":"2019-03-11T22:42:16.128Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/51324208"},"web_url":"https://gitlab.com/coq/coq/-/jobs/175598238","artifacts":[{"file_type":"trace","size":24493,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2019-04-10T21:19:29.228Z","tag_list":[]}
{"id":175598237,"status":"success","stage":"test","name":"doc:refman:dune","ref":"pr-9743","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-11T20:39:49.337Z","started_at":"2019-03-11T21:05:39.956Z","finished_at":"2019-03-11T21:21:02.397Z","duration":922.440566,"queued_duration":0.174719,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"608b53a279cf5f6da4d55add943a8f3777a20ec2","short_id":"608b53a2","created_at":"2019-03-11T21:23:19.000+01:00","parent_ids":["74534f84a782f5de740c52cb97b3ca3a02eb6aa2"],"title":"Relax the ambiguous path condition of coercion","message":"Relax the ambiguous path condition of coercion\n\nThe `Coercion` command did report many ambiguous paths when one declared\nmultiple inheritances.  This change makes the `Coercion` command to do not\nreport them when\n1. all the coercion in the potentially ambiguous paths respect the uniform\n   inheritance condition and\n2. functional compositions of the potentially ambiguous paths are convertible to\n   each other.\nThe first condition is not explicitly checked but is used to make the checking\nprocess of the second condition easy.\n\nThe key idea:\nLet us consider a sequence of coercion\nf_1 : C_1 >-> C_2, f_2 : C_2 >-> C3, ..., f_n : C_n >-> C_(n+1)\nwhich respect the uniform inheritance condition and where the user-defined\nclasses C_i have m_i parameters respectively (i <= n).\nThe functional composition f_1 . ... . f_n can be expressed as follows:\n(fun x_1 ... x_(m_1) y =>\n  f_n _ ... _ (* m_n times repetition of holes *)\n      (...\n           (f_2 _ ... _ (* m_2 times repetition of holes *)\n                (f_1 x_1 ... x_(m_1) y))...)),\nand the contents of all the holes can be determined (inferred) without leaving\nany existential variables in them thanks to the uniform inheritance condition.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-03-11T20:27:05.000+01:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-03-11T21:23:19.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/608b53a279cf5f6da4d55add943a8f3777a20ec2"},"pipeline":{"id":51324208,"iid":7717,"project_id":6138686,"sha":"608b53a279cf5f6da4d55add943a8f3777a20ec2","ref":"pr-9743","status":"success","source":"push","created_at":"2019-03-11T20:39:48.851Z","updated_at":"2019-03-11T22:42:16.128Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/51324208"},"web_url":"https://gitlab.com/coq/coq/-/jobs/175598237","artifacts":[{"file_type":"trace","size":23229,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2019-04-10T21:21:00.552Z","tag_list":[]}
{"id":175598236,"status":"success","stage":"test","name":"doc:refman","ref":"pr-9743","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-11T20:39:49.316Z","started_at":"2019-03-11T21:05:40.660Z","finished_at":"2019-03-11T21:12:27.934Z","duration":407.273968,"queued_duration":0.83848,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"608b53a279cf5f6da4d55add943a8f3777a20ec2","short_id":"608b53a2","created_at":"2019-03-11T21:23:19.000+01:00","parent_ids":["74534f84a782f5de740c52cb97b3ca3a02eb6aa2"],"title":"Relax the ambiguous path condition of coercion","message":"Relax the ambiguous path condition of coercion\n\nThe `Coercion` command did report many ambiguous paths when one declared\nmultiple inheritances.  This change makes the `Coercion` command to do not\nreport them when\n1. all the coercion in the potentially ambiguous paths respect the uniform\n   inheritance condition and\n2. functional compositions of the potentially ambiguous paths are convertible to\n   each other.\nThe first condition is not explicitly checked but is used to make the checking\nprocess of the second condition easy.\n\nThe key idea:\nLet us consider a sequence of coercion\nf_1 : C_1 >-> C_2, f_2 : C_2 >-> C3, ..., f_n : C_n >-> C_(n+1)\nwhich respect the uniform inheritance condition and where the user-defined\nclasses C_i have m_i parameters respectively (i <= n).\nThe functional composition f_1 . ... . f_n can be expressed as follows:\n(fun x_1 ... x_(m_1) y =>\n  f_n _ ... _ (* m_n times repetition of holes *)\n      (...\n           (f_2 _ ... _ (* m_2 times repetition of holes *)\n                (f_1 x_1 ... x_(m_1) y))...)),\nand the contents of all the holes can be determined (inferred) without leaving\nany existential variables in them thanks to the uniform inheritance condition.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-03-11T20:27:05.000+01:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-03-11T21:23:19.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/608b53a279cf5f6da4d55add943a8f3777a20ec2"},"pipeline":{"id":51324208,"iid":7717,"project_id":6138686,"sha":"608b53a279cf5f6da4d55add943a8f3777a20ec2","ref":"pr-9743","status":"success","source":"push","created_at":"2019-03-11T20:39:48.851Z","updated_at":"2019-03-11T22:42:16.128Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/51324208"},"web_url":"https://gitlab.com/coq/coq/-/jobs/175598236","artifacts":[{"file_type":"trace","size":1058700,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":175598235,"status":"success","stage":"test","name":"pkg:nix","ref":"pr-9743","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-11T20:39:49.293Z","started_at":"2019-03-11T21:05:40.517Z","finished_at":"2019-03-11T21:57:40.834Z","duration":3120.3173,"queued_duration":0.651216,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"608b53a279cf5f6da4d55add943a8f3777a20ec2","short_id":"608b53a2","created_at":"2019-03-11T21:23:19.000+01:00","parent_ids":["74534f84a782f5de740c52cb97b3ca3a02eb6aa2"],"title":"Relax the ambiguous path condition of coercion","message":"Relax the ambiguous path condition of coercion\n\nThe `Coercion` command did report many ambiguous paths when one declared\nmultiple inheritances.  This change makes the `Coercion` command to do not\nreport them when\n1. all the coercion in the potentially ambiguous paths respect the uniform\n   inheritance condition and\n2. functional compositions of the potentially ambiguous paths are convertible to\n   each other.\nThe first condition is not explicitly checked but is used to make the checking\nprocess of the second condition easy.\n\nThe key idea:\nLet us consider a sequence of coercion\nf_1 : C_1 >-> C_2, f_2 : C_2 >-> C3, ..., f_n : C_n >-> C_(n+1)\nwhich respect the uniform inheritance condition and where the user-defined\nclasses C_i have m_i parameters respectively (i <= n).\nThe functional composition f_1 . ... . f_n can be expressed as follows:\n(fun x_1 ... x_(m_1) y =>\n  f_n _ ... _ (* m_n times repetition of holes *)\n      (...\n           (f_2 _ ... _ (* m_2 times repetition of holes *)\n                (f_1 x_1 ... x_(m_1) y))...)),\nand the contents of all the holes can be determined (inferred) without leaving\nany existential variables in them thanks to the uniform inheritance condition.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-03-11T20:27:05.000+01:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-03-11T21:23:19.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/608b53a279cf5f6da4d55add943a8f3777a20ec2"},"pipeline":{"id":51324208,"iid":7717,"project_id":6138686,"sha":"608b53a279cf5f6da4d55add943a8f3777a20ec2","ref":"pr-9743","status":"success","source":"push","created_at":"2019-03-11T20:39:48.851Z","updated_at":"2019-03-11T22:42:16.128Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/51324208"},"web_url":"https://gitlab.com/coq/coq/-/jobs/175598235","artifacts":[{"file_type":"trace","size":508927,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":175598234,"status":"success","stage":"test","name":"pkg:opam","ref":"pr-9743","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-11T20:39:49.265Z","started_at":"2019-03-11T21:05:40.189Z","finished_at":"2019-03-11T21:27:04.696Z","duration":1284.507118,"queued_duration":0.290363,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"608b53a279cf5f6da4d55add943a8f3777a20ec2","short_id":"608b53a2","created_at":"2019-03-11T21:23:19.000+01:00","parent_ids":["74534f84a782f5de740c52cb97b3ca3a02eb6aa2"],"title":"Relax the ambiguous path condition of coercion","message":"Relax the ambiguous path condition of coercion\n\nThe `Coercion` command did report many ambiguous paths when one declared\nmultiple inheritances.  This change makes the `Coercion` command to do not\nreport them when\n1. all the coercion in the potentially ambiguous paths respect the uniform\n   inheritance condition and\n2. functional compositions of the potentially ambiguous paths are convertible to\n   each other.\nThe first condition is not explicitly checked but is used to make the checking\nprocess of the second condition easy.\n\nThe key idea:\nLet us consider a sequence of coercion\nf_1 : C_1 >-> C_2, f_2 : C_2 >-> C3, ..., f_n : C_n >-> C_(n+1)\nwhich respect the uniform inheritance condition and where the user-defined\nclasses C_i have m_i parameters respectively (i <= n).\nThe functional composition f_1 . ... . f_n can be expressed as follows:\n(fun x_1 ... x_(m_1) y =>\n  f_n _ ... _ (* m_n times repetition of holes *)\n      (...\n           (f_2 _ ... _ (* m_2 times repetition of holes *)\n                (f_1 x_1 ... x_(m_1) y))...)),\nand the contents of all the holes can be determined (inferred) without leaving\nany existential variables in them thanks to the uniform inheritance condition.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-03-11T20:27:05.000+01:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-03-11T21:23:19.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/608b53a279cf5f6da4d55add943a8f3777a20ec2"},"pipeline":{"id":51324208,"iid":7717,"project_id":6138686,"sha":"608b53a279cf5f6da4d55add943a8f3777a20ec2","ref":"pr-9743","status":"success","source":"push","created_at":"2019-03-11T20:39:48.851Z","updated_at":"2019-03-11T22:42:16.128Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/51324208"},"web_url":"https://gitlab.com/coq/coq/-/jobs/175598234","artifacts":[{"file_type":"trace","size":19889,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":175598233,"status":"success","stage":"test","name":"lint","ref":"pr-9743","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-11T20:39:49.241Z","started_at":"2019-03-11T21:05:40.046Z","finished_at":"2019-03-11T21:06:46.175Z","duration":66.12897,"queued_duration":0.113982,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"608b53a279cf5f6da4d55add943a8f3777a20ec2","short_id":"608b53a2","created_at":"2019-03-11T21:23:19.000+01:00","parent_ids":["74534f84a782f5de740c52cb97b3ca3a02eb6aa2"],"title":"Relax the ambiguous path condition of coercion","message":"Relax the ambiguous path condition of coercion\n\nThe `Coercion` command did report many ambiguous paths when one declared\nmultiple inheritances.  This change makes the `Coercion` command to do not\nreport them when\n1. all the coercion in the potentially ambiguous paths respect the uniform\n   inheritance condition and\n2. functional compositions of the potentially ambiguous paths are convertible to\n   each other.\nThe first condition is not explicitly checked but is used to make the checking\nprocess of the second condition easy.\n\nThe key idea:\nLet us consider a sequence of coercion\nf_1 : C_1 >-> C_2, f_2 : C_2 >-> C3, ..., f_n : C_n >-> C_(n+1)\nwhich respect the uniform inheritance condition and where the user-defined\nclasses C_i have m_i parameters respectively (i <= n).\nThe functional composition f_1 . ... . f_n can be expressed as follows:\n(fun x_1 ... x_(m_1) y =>\n  f_n _ ... _ (* m_n times repetition of holes *)\n      (...\n           (f_2 _ ... _ (* m_2 times repetition of holes *)\n                (f_1 x_1 ... x_(m_1) y))...)),\nand the contents of all the holes can be determined (inferred) without leaving\nany existential variables in them thanks to the uniform inheritance condition.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-03-11T20:27:05.000+01:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-03-11T21:23:19.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/608b53a279cf5f6da4d55add943a8f3777a20ec2"},"pipeline":{"id":51324208,"iid":7717,"project_id":6138686,"sha":"608b53a279cf5f6da4d55add943a8f3777a20ec2","ref":"pr-9743","status":"success","source":"push","created_at":"2019-03-11T20:39:48.851Z","updated_at":"2019-03-11T22:42:16.128Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/51324208"},"web_url":"https://gitlab.com/coq/coq/-/jobs/175598233","artifacts":[{"file_type":"trace","size":2165,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":175598232,"status":"success","stage":"test","name":"windows64","ref":"pr-9743","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-11T20:39:49.210Z","started_at":"2019-03-11T21:05:40.460Z","finished_at":"2019-03-11T21:53:02.782Z","duration":2842.321998,"queued_duration":0.478232,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"608b53a279cf5f6da4d55add943a8f3777a20ec2","short_id":"608b53a2","created_at":"2019-03-11T21:23:19.000+01:00","parent_ids":["74534f84a782f5de740c52cb97b3ca3a02eb6aa2"],"title":"Relax the ambiguous path condition of coercion","message":"Relax the ambiguous path condition of coercion\n\nThe `Coercion` command did report many ambiguous paths when one declared\nmultiple inheritances.  This change makes the `Coercion` command to do not\nreport them when\n1. all the coercion in the potentially ambiguous paths respect the uniform\n   inheritance condition and\n2. functional compositions of the potentially ambiguous paths are convertible to\n   each other.\nThe first condition is not explicitly checked but is used to make the checking\nprocess of the second condition easy.\n\nThe key idea:\nLet us consider a sequence of coercion\nf_1 : C_1 >-> C_2, f_2 : C_2 >-> C3, ..., f_n : C_n >-> C_(n+1)\nwhich respect the uniform inheritance condition and where the user-defined\nclasses C_i have m_i parameters respectively (i <= n).\nThe functional composition f_1 . ... . f_n can be expressed as follows:\n(fun x_1 ... x_(m_1) y =>\n  f_n _ ... _ (* m_n times repetition of holes *)\n      (...\n           (f_2 _ ... _ (* m_2 times repetition of holes *)\n                (f_1 x_1 ... x_(m_1) y))...)),\nand the contents of all the holes can be determined (inferred) without leaving\nany existential variables in them thanks to the uniform inheritance condition.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-03-11T20:27:05.000+01:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-03-11T21:23:19.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/608b53a279cf5f6da4d55add943a8f3777a20ec2"},"pipeline":{"id":51324208,"iid":7717,"project_id":6138686,"sha":"608b53a279cf5f6da4d55add943a8f3777a20ec2","ref":"pr-9743","status":"success","source":"push","created_at":"2019-03-11T20:39:48.851Z","updated_at":"2019-03-11T22:42:16.128Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/51324208"},"web_url":"https://gitlab.com/coq/coq/-/jobs/175598232","artifacts":[{"file_type":"trace","size":229609,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":"2019-03-18T21:52:58.547Z","tag_list":["windows"]}
{"id":175598231,"status":"success","stage":"test","name":"build:base+async","ref":"pr-9743","tag":false,"coverage":null,"allow_failure":true,"created_at":"2019-03-11T20:39:48.980Z","started_at":"2019-03-11T21:05:40.141Z","finished_at":"2019-03-11T22:19:48.480Z","duration":4448.338548,"queued_duration":0.119071,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"608b53a279cf5f6da4d55add943a8f3777a20ec2","short_id":"608b53a2","created_at":"2019-03-11T21:23:19.000+01:00","parent_ids":["74534f84a782f5de740c52cb97b3ca3a02eb6aa2"],"title":"Relax the ambiguous path condition of coercion","message":"Relax the ambiguous path condition of coercion\n\nThe `Coercion` command did report many ambiguous paths when one declared\nmultiple inheritances.  This change makes the `Coercion` command to do not\nreport them when\n1. all the coercion in the potentially ambiguous paths respect the uniform\n   inheritance condition and\n2. functional compositions of the potentially ambiguous paths are convertible to\n   each other.\nThe first condition is not explicitly checked but is used to make the checking\nprocess of the second condition easy.\n\nThe key idea:\nLet us consider a sequence of coercion\nf_1 : C_1 >-> C_2, f_2 : C_2 >-> C3, ..., f_n : C_n >-> C_(n+1)\nwhich respect the uniform inheritance condition and where the user-defined\nclasses C_i have m_i parameters respectively (i <= n).\nThe functional composition f_1 . ... . f_n can be expressed as follows:\n(fun x_1 ... x_(m_1) y =>\n  f_n _ ... _ (* m_n times repetition of holes *)\n      (...\n           (f_2 _ ... _ (* m_2 times repetition of holes *)\n                (f_1 x_1 ... x_(m_1) y))...)),\nand the contents of all the holes can be determined (inferred) without leaving\nany existential variables in them thanks to the uniform inheritance condition.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-03-11T20:27:05.000+01:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-03-11T21:23:19.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/608b53a279cf5f6da4d55add943a8f3777a20ec2"},"pipeline":{"id":51324208,"iid":7717,"project_id":6138686,"sha":"608b53a279cf5f6da4d55add943a8f3777a20ec2","ref":"pr-9743","status":"success","source":"push","created_at":"2019-03-11T20:39:48.851Z","updated_at":"2019-03-11T22:42:16.128Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/51324208"},"web_url":"https://gitlab.com/coq/coq/-/jobs/175598231","artifacts":[{"file_type":"trace","size":238451,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2019-03-18T22:19:32.404Z","tag_list":[]}
{"id":175598230,"status":"success","stage":"build","name":"build:quick","ref":"pr-9743","tag":false,"coverage":null,"allow_failure":true,"created_at":"2019-03-11T20:39:48.946Z","started_at":"2019-03-11T20:39:51.361Z","finished_at":"2019-03-11T20:59:38.323Z","duration":1186.961803,"queued_duration":0.691542,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"608b53a279cf5f6da4d55add943a8f3777a20ec2","short_id":"608b53a2","created_at":"2019-03-11T21:23:19.000+01:00","parent_ids":["74534f84a782f5de740c52cb97b3ca3a02eb6aa2"],"title":"Relax the ambiguous path condition of coercion","message":"Relax the ambiguous path condition of coercion\n\nThe `Coercion` command did report many ambiguous paths when one declared\nmultiple inheritances.  This change makes the `Coercion` command to do not\nreport them when\n1. all the coercion in the potentially ambiguous paths respect the uniform\n   inheritance condition and\n2. functional compositions of the potentially ambiguous paths are convertible to\n   each other.\nThe first condition is not explicitly checked but is used to make the checking\nprocess of the second condition easy.\n\nThe key idea:\nLet us consider a sequence of coercion\nf_1 : C_1 >-> C_2, f_2 : C_2 >-> C3, ..., f_n : C_n >-> C_(n+1)\nwhich respect the uniform inheritance condition and where the user-defined\nclasses C_i have m_i parameters respectively (i <= n).\nThe functional composition f_1 . ... . f_n can be expressed as follows:\n(fun x_1 ... x_(m_1) y =>\n  f_n _ ... _ (* m_n times repetition of holes *)\n      (...\n           (f_2 _ ... _ (* m_2 times repetition of holes *)\n                (f_1 x_1 ... x_(m_1) y))...)),\nand the contents of all the holes can be determined (inferred) without leaving\nany existential variables in them thanks to the uniform inheritance condition.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-03-11T20:27:05.000+01:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-03-11T21:23:19.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/608b53a279cf5f6da4d55add943a8f3777a20ec2"},"pipeline":{"id":51324208,"iid":7717,"project_id":6138686,"sha":"608b53a279cf5f6da4d55add943a8f3777a20ec2","ref":"pr-9743","status":"success","source":"push","created_at":"2019-03-11T20:39:48.851Z","updated_at":"2019-03-11T22:42:16.128Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/51324208"},"web_url":"https://gitlab.com/coq/coq/-/jobs/175598230","artifacts":[{"file_type":"trace","size":164601,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2019-03-18T20:59:34.555Z","tag_list":[]}
{"id":175598229,"status":"success","stage":"build","name":"build:edge+flambda:dune:dev","ref":"pr-9743","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-11T20:39:48.926Z","started_at":"2019-03-11T20:39:51.234Z","finished_at":"2019-03-11T20:56:28.381Z","duration":997.147381,"queued_duration":0.517818,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"608b53a279cf5f6da4d55add943a8f3777a20ec2","short_id":"608b53a2","created_at":"2019-03-11T21:23:19.000+01:00","parent_ids":["74534f84a782f5de740c52cb97b3ca3a02eb6aa2"],"title":"Relax the ambiguous path condition of coercion","message":"Relax the ambiguous path condition of coercion\n\nThe `Coercion` command did report many ambiguous paths when one declared\nmultiple inheritances.  This change makes the `Coercion` command to do not\nreport them when\n1. all the coercion in the potentially ambiguous paths respect the uniform\n   inheritance condition and\n2. functional compositions of the potentially ambiguous paths are convertible to\n   each other.\nThe first condition is not explicitly checked but is used to make the checking\nprocess of the second condition easy.\n\nThe key idea:\nLet us consider a sequence of coercion\nf_1 : C_1 >-> C_2, f_2 : C_2 >-> C3, ..., f_n : C_n >-> C_(n+1)\nwhich respect the uniform inheritance condition and where the user-defined\nclasses C_i have m_i parameters respectively (i <= n).\nThe functional composition f_1 . ... . f_n can be expressed as follows:\n(fun x_1 ... x_(m_1) y =>\n  f_n _ ... _ (* m_n times repetition of holes *)\n      (...\n           (f_2 _ ... _ (* m_2 times repetition of holes *)\n                (f_1 x_1 ... x_(m_1) y))...)),\nand the contents of all the holes can be determined (inferred) without leaving\nany existential variables in them thanks to the uniform inheritance condition.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-03-11T20:27:05.000+01:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-03-11T21:23:19.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/608b53a279cf5f6da4d55add943a8f3777a20ec2"},"pipeline":{"id":51324208,"iid":7717,"project_id":6138686,"sha":"608b53a279cf5f6da4d55add943a8f3777a20ec2","ref":"pr-9743","status":"success","source":"push","created_at":"2019-03-11T20:39:48.851Z","updated_at":"2019-03-11T22:42:16.128Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/51324208"},"web_url":"https://gitlab.com/coq/coq/-/jobs/175598229","artifacts":[{"file_type":"trace","size":18903,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2019-03-18T20:56:22.080Z","tag_list":[]}
{"id":175598228,"status":"success","stage":"build","name":"build:edge+flambda","ref":"pr-9743","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-11T20:39:48.906Z","started_at":"2019-03-11T20:39:51.146Z","finished_at":"2019-03-11T21:05:37.332Z","duration":1546.186326,"queued_duration":0.349999,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"608b53a279cf5f6da4d55add943a8f3777a20ec2","short_id":"608b53a2","created_at":"2019-03-11T21:23:19.000+01:00","parent_ids":["74534f84a782f5de740c52cb97b3ca3a02eb6aa2"],"title":"Relax the ambiguous path condition of coercion","message":"Relax the ambiguous path condition of coercion\n\nThe `Coercion` command did report many ambiguous paths when one declared\nmultiple inheritances.  This change makes the `Coercion` command to do not\nreport them when\n1. all the coercion in the potentially ambiguous paths respect the uniform\n   inheritance condition and\n2. functional compositions of the potentially ambiguous paths are convertible to\n   each other.\nThe first condition is not explicitly checked but is used to make the checking\nprocess of the second condition easy.\n\nThe key idea:\nLet us consider a sequence of coercion\nf_1 : C_1 >-> C_2, f_2 : C_2 >-> C3, ..., f_n : C_n >-> C_(n+1)\nwhich respect the uniform inheritance condition and where the user-defined\nclasses C_i have m_i parameters respectively (i <= n).\nThe functional composition f_1 . ... . f_n can be expressed as follows:\n(fun x_1 ... x_(m_1) y =>\n  f_n _ ... _ (* m_n times repetition of holes *)\n      (...\n           (f_2 _ ... _ (* m_2 times repetition of holes *)\n                (f_1 x_1 ... x_(m_1) y))...)),\nand the contents of all the holes can be determined (inferred) without leaving\nany existential variables in them thanks to the uniform inheritance condition.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-03-11T20:27:05.000+01:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-03-11T21:23:19.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/608b53a279cf5f6da4d55add943a8f3777a20ec2"},"pipeline":{"id":51324208,"iid":7717,"project_id":6138686,"sha":"608b53a279cf5f6da4d55add943a8f3777a20ec2","ref":"pr-9743","status":"success","source":"push","created_at":"2019-03-11T20:39:48.851Z","updated_at":"2019-03-11T22:42:16.128Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/51324208"},"web_url":"https://gitlab.com/coq/coq/-/jobs/175598228","artifacts":[{"file_type":"trace","size":237981,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2019-03-18T21:05:30.986Z","tag_list":[]}
{"id":175598227,"status":"success","stage":"build","name":"build:base+32bit","ref":"pr-9743","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-11T20:39:48.886Z","started_at":"2019-03-11T20:39:51.006Z","finished_at":"2019-03-11T20:55:42.804Z","duration":951.797494,"queued_duration":0.170174,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"608b53a279cf5f6da4d55add943a8f3777a20ec2","short_id":"608b53a2","created_at":"2019-03-11T21:23:19.000+01:00","parent_ids":["74534f84a782f5de740c52cb97b3ca3a02eb6aa2"],"title":"Relax the ambiguous path condition of coercion","message":"Relax the ambiguous path condition of coercion\n\nThe `Coercion` command did report many ambiguous paths when one declared\nmultiple inheritances.  This change makes the `Coercion` command to do not\nreport them when\n1. all the coercion in the potentially ambiguous paths respect the uniform\n   inheritance condition and\n2. functional compositions of the potentially ambiguous paths are convertible to\n   each other.\nThe first condition is not explicitly checked but is used to make the checking\nprocess of the second condition easy.\n\nThe key idea:\nLet us consider a sequence of coercion\nf_1 : C_1 >-> C_2, f_2 : C_2 >-> C3, ..., f_n : C_n >-> C_(n+1)\nwhich respect the uniform inheritance condition and where the user-defined\nclasses C_i have m_i parameters respectively (i <= n).\nThe functional composition f_1 . ... . f_n can be expressed as follows:\n(fun x_1 ... x_(m_1) y =>\n  f_n _ ... _ (* m_n times repetition of holes *)\n      (...\n           (f_2 _ ... _ (* m_2 times repetition of holes *)\n                (f_1 x_1 ... x_(m_1) y))...)),\nand the contents of all the holes can be determined (inferred) without leaving\nany existential variables in them thanks to the uniform inheritance condition.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-03-11T20:27:05.000+01:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-03-11T21:23:19.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/608b53a279cf5f6da4d55add943a8f3777a20ec2"},"pipeline":{"id":51324208,"iid":7717,"project_id":6138686,"sha":"608b53a279cf5f6da4d55add943a8f3777a20ec2","ref":"pr-9743","status":"success","source":"push","created_at":"2019-03-11T20:39:48.851Z","updated_at":"2019-03-11T22:42:16.128Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/51324208"},"web_url":"https://gitlab.com/coq/coq/-/jobs/175598227","artifacts":[{"file_type":"trace","size":231653,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2019-03-18T20:55:35.730Z","tag_list":[]}
{"id":175598226,"status":"success","stage":"build","name":"build:base","ref":"pr-9743","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-11T20:39:48.864Z","started_at":"2019-03-11T20:39:51.082Z","finished_at":"2019-03-11T20:59:13.682Z","duration":1162.600255,"queued_duration":0.172724,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"608b53a279cf5f6da4d55add943a8f3777a20ec2","short_id":"608b53a2","created_at":"2019-03-11T21:23:19.000+01:00","parent_ids":["74534f84a782f5de740c52cb97b3ca3a02eb6aa2"],"title":"Relax the ambiguous path condition of coercion","message":"Relax the ambiguous path condition of coercion\n\nThe `Coercion` command did report many ambiguous paths when one declared\nmultiple inheritances.  This change makes the `Coercion` command to do not\nreport them when\n1. all the coercion in the potentially ambiguous paths respect the uniform\n   inheritance condition and\n2. functional compositions of the potentially ambiguous paths are convertible to\n   each other.\nThe first condition is not explicitly checked but is used to make the checking\nprocess of the second condition easy.\n\nThe key idea:\nLet us consider a sequence of coercion\nf_1 : C_1 >-> C_2, f_2 : C_2 >-> C3, ..., f_n : C_n >-> C_(n+1)\nwhich respect the uniform inheritance condition and where the user-defined\nclasses C_i have m_i parameters respectively (i <= n).\nThe functional composition f_1 . ... . f_n can be expressed as follows:\n(fun x_1 ... x_(m_1) y =>\n  f_n _ ... _ (* m_n times repetition of holes *)\n      (...\n           (f_2 _ ... _ (* m_2 times repetition of holes *)\n                (f_1 x_1 ... x_(m_1) y))...)),\nand the contents of all the holes can be determined (inferred) without leaving\nany existential variables in them thanks to the uniform inheritance condition.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-03-11T20:27:05.000+01:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-03-11T21:23:19.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/608b53a279cf5f6da4d55add943a8f3777a20ec2"},"pipeline":{"id":51324208,"iid":7717,"project_id":6138686,"sha":"608b53a279cf5f6da4d55add943a8f3777a20ec2","ref":"pr-9743","status":"success","source":"push","created_at":"2019-03-11T20:39:48.851Z","updated_at":"2019-03-11T22:42:16.128Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/51324208"},"web_url":"https://gitlab.com/coq/coq/-/jobs/175598226","artifacts":[{"file_type":"trace","size":289559,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2019-03-18T20:59:08.638Z","tag_list":[]}
