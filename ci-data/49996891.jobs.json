{"id":170552701,"status":"success","stage":"test","name":"plugin:ci-relation-algebra","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:34:47.593Z","started_at":"2019-03-02T20:03:28.300Z","finished_at":"2019-03-02T20:09:40.085Z","duration":371.784293,"queued_duration":0.36931,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9f28e439198308a7e2b4fac82a8707652b52720d","short_id":"9f28e439","created_at":"2019-03-02T20:34:34.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:34:34.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9f28e439198308a7e2b4fac82a8707652b52720d"},"pipeline":{"id":49996891,"iid":7615,"project_id":6138686,"sha":"9f28e439198308a7e2b4fac82a8707652b52720d","ref":"pr-9047","status":"failed","source":"push","created_at":"2019-03-02T19:34:45.916Z","updated_at":"2019-03-02T23:03:58.675Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996891"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552701","artifacts":[{"file_type":"trace","size":51646,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170552700,"status":"success","stage":"test","name":"plugin:ci-quickchick","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:34:47.564Z","started_at":"2019-03-02T20:03:28.463Z","finished_at":"2019-03-02T20:09:17.816Z","duration":349.352697,"queued_duration":0.330983,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9f28e439198308a7e2b4fac82a8707652b52720d","short_id":"9f28e439","created_at":"2019-03-02T20:34:34.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:34:34.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9f28e439198308a7e2b4fac82a8707652b52720d"},"pipeline":{"id":49996891,"iid":7615,"project_id":6138686,"sha":"9f28e439198308a7e2b4fac82a8707652b52720d","ref":"pr-9047","status":"failed","source":"push","created_at":"2019-03-02T19:34:45.916Z","updated_at":"2019-03-02T23:03:58.675Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996891"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552700","artifacts":[{"file_type":"trace","size":262095,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170552699,"status":"success","stage":"test","name":"plugin:plugin-tutorial","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:34:47.538Z","started_at":"2019-03-02T20:03:28.665Z","finished_at":"2019-03-02T20:07:15.007Z","duration":226.341834,"queued_duration":0.368252,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9f28e439198308a7e2b4fac82a8707652b52720d","short_id":"9f28e439","created_at":"2019-03-02T20:34:34.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:34:34.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9f28e439198308a7e2b4fac82a8707652b52720d"},"pipeline":{"id":49996891,"iid":7615,"project_id":6138686,"sha":"9f28e439198308a7e2b4fac82a8707652b52720d","ref":"pr-9047","status":"failed","source":"push","created_at":"2019-03-02T19:34:45.916Z","updated_at":"2019-03-02T23:03:58.675Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996891"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552699","artifacts":[{"file_type":"trace","size":53774,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170552698,"status":"success","stage":"test","name":"plugin:ci-paramcoq","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:34:47.510Z","started_at":"2019-03-02T20:03:28.813Z","finished_at":"2019-03-02T20:05:54.695Z","duration":145.882838,"queued_duration":0.33875,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9f28e439198308a7e2b4fac82a8707652b52720d","short_id":"9f28e439","created_at":"2019-03-02T20:34:34.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:34:34.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9f28e439198308a7e2b4fac82a8707652b52720d"},"pipeline":{"id":49996891,"iid":7615,"project_id":6138686,"sha":"9f28e439198308a7e2b4fac82a8707652b52720d","ref":"pr-9047","status":"failed","source":"push","created_at":"2019-03-02T19:34:45.916Z","updated_at":"2019-03-02T23:03:58.675Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996891"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552698","artifacts":[{"file_type":"trace","size":27181,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170552697,"status":"success","stage":"test","name":"plugin:ci-mtac2","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:34:47.481Z","started_at":"2019-03-02T20:03:28.927Z","finished_at":"2019-03-02T20:07:50.269Z","duration":261.342128,"queued_duration":0.286012,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9f28e439198308a7e2b4fac82a8707652b52720d","short_id":"9f28e439","created_at":"2019-03-02T20:34:34.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:34:34.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9f28e439198308a7e2b4fac82a8707652b52720d"},"pipeline":{"id":49996891,"iid":7615,"project_id":6138686,"sha":"9f28e439198308a7e2b4fac82a8707652b52720d","ref":"pr-9047","status":"failed","source":"push","created_at":"2019-03-02T19:34:45.916Z","updated_at":"2019-03-02T23:03:58.675Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996891"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552697","artifacts":[{"file_type":"trace","size":205212,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170552696,"status":"success","stage":"test","name":"plugin:ci-ltac2","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:34:47.455Z","started_at":"2019-03-02T20:03:29.052Z","finished_at":"2019-03-02T20:06:04.493Z","duration":155.441009,"queued_duration":0.256173,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9f28e439198308a7e2b4fac82a8707652b52720d","short_id":"9f28e439","created_at":"2019-03-02T20:34:34.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:34:34.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9f28e439198308a7e2b4fac82a8707652b52720d"},"pipeline":{"id":49996891,"iid":7615,"project_id":6138686,"sha":"9f28e439198308a7e2b4fac82a8707652b52720d","ref":"pr-9047","status":"failed","source":"push","created_at":"2019-03-02T19:34:45.916Z","updated_at":"2019-03-02T23:03:58.675Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996891"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552696","artifacts":[{"file_type":"trace","size":39470,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170552695,"status":"success","stage":"test","name":"plugin:ci-fiat_parsers","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:34:47.427Z","started_at":"2019-03-02T20:03:29.153Z","finished_at":"2019-03-02T20:21:23.908Z","duration":1074.755204,"queued_duration":0.237926,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9f28e439198308a7e2b4fac82a8707652b52720d","short_id":"9f28e439","created_at":"2019-03-02T20:34:34.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:34:34.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9f28e439198308a7e2b4fac82a8707652b52720d"},"pipeline":{"id":49996891,"iid":7615,"project_id":6138686,"sha":"9f28e439198308a7e2b4fac82a8707652b52720d","ref":"pr-9047","status":"failed","source":"push","created_at":"2019-03-02T19:34:45.916Z","updated_at":"2019-03-02T23:03:58.675Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996891"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552695","artifacts":[{"file_type":"trace","size":239196,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170552694,"status":"success","stage":"test","name":"plugin:ci-equations","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:34:47.400Z","started_at":"2019-03-02T20:04:41.566Z","finished_at":"2019-03-02T20:13:15.995Z","duration":514.429075,"queued_duration":72.521996,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9f28e439198308a7e2b4fac82a8707652b52720d","short_id":"9f28e439","created_at":"2019-03-02T20:34:34.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:34:34.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9f28e439198308a7e2b4fac82a8707652b52720d"},"pipeline":{"id":49996891,"iid":7615,"project_id":6138686,"sha":"9f28e439198308a7e2b4fac82a8707652b52720d","ref":"pr-9047","status":"failed","source":"push","created_at":"2019-03-02T19:34:45.916Z","updated_at":"2019-03-02T23:03:58.675Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996891"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552694","artifacts":[{"file_type":"trace","size":82799,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170552693,"status":"success","stage":"test","name":"plugin:ci-elpi","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:34:47.372Z","started_at":"2019-03-02T20:04:40.492Z","finished_at":"2019-03-02T20:08:40.169Z","duration":239.676454,"queued_duration":71.327603,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9f28e439198308a7e2b4fac82a8707652b52720d","short_id":"9f28e439","created_at":"2019-03-02T20:34:34.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:34:34.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9f28e439198308a7e2b4fac82a8707652b52720d"},"pipeline":{"id":49996891,"iid":7615,"project_id":6138686,"sha":"9f28e439198308a7e2b4fac82a8707652b52720d","ref":"pr-9047","status":"failed","source":"push","created_at":"2019-03-02T19:34:45.916Z","updated_at":"2019-03-02T23:03:58.675Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996891"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552693","artifacts":[{"file_type":"trace","size":415860,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170552692,"status":"success","stage":"test","name":"plugin:ci-coqhammer","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:34:47.345Z","started_at":"2019-03-02T20:04:39.884Z","finished_at":"2019-03-02T20:07:37.316Z","duration":177.431891,"queued_duration":70.631798,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9f28e439198308a7e2b4fac82a8707652b52720d","short_id":"9f28e439","created_at":"2019-03-02T20:34:34.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:34:34.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9f28e439198308a7e2b4fac82a8707652b52720d"},"pipeline":{"id":49996891,"iid":7615,"project_id":6138686,"sha":"9f28e439198308a7e2b4fac82a8707652b52720d","ref":"pr-9047","status":"failed","source":"push","created_at":"2019-03-02T19:34:45.916Z","updated_at":"2019-03-02T23:03:58.675Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996891"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552692","artifacts":[{"file_type":"trace","size":31148,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170552691,"status":"success","stage":"test","name":"plugin:ci-coq_dpdgraph","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:34:47.317Z","started_at":"2019-03-02T20:04:39.713Z","finished_at":"2019-03-02T20:07:17.192Z","duration":157.479207,"queued_duration":70.34351,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9f28e439198308a7e2b4fac82a8707652b52720d","short_id":"9f28e439","created_at":"2019-03-02T20:34:34.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:34:34.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9f28e439198308a7e2b4fac82a8707652b52720d"},"pipeline":{"id":49996891,"iid":7615,"project_id":6138686,"sha":"9f28e439198308a7e2b4fac82a8707652b52720d","ref":"pr-9047","status":"failed","source":"push","created_at":"2019-03-02T19:34:45.916Z","updated_at":"2019-03-02T23:03:58.675Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996891"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552691","artifacts":[{"file_type":"trace","size":39817,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170552690,"status":"success","stage":"test","name":"plugin:ci-bignums","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:34:47.290Z","started_at":"2019-03-02T20:04:39.411Z","finished_at":"2019-03-02T20:09:03.496Z","duration":264.084235,"queued_duration":69.94626,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9f28e439198308a7e2b4fac82a8707652b52720d","short_id":"9f28e439","created_at":"2019-03-02T20:34:34.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:34:34.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9f28e439198308a7e2b4fac82a8707652b52720d"},"pipeline":{"id":49996891,"iid":7615,"project_id":6138686,"sha":"9f28e439198308a7e2b4fac82a8707652b52720d","ref":"pr-9047","status":"failed","source":"push","created_at":"2019-03-02T19:34:45.916Z","updated_at":"2019-03-02T23:03:58.675Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996891"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552690","artifacts":[{"file_type":"trace","size":38607,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170552689,"status":"success","stage":"test","name":"plugin:ci-aac_tactics","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:34:47.262Z","started_at":"2019-03-02T20:04:37.146Z","finished_at":"2019-03-02T20:07:25.725Z","duration":168.579387,"queued_duration":67.527496,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9f28e439198308a7e2b4fac82a8707652b52720d","short_id":"9f28e439","created_at":"2019-03-02T20:34:34.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:34:34.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9f28e439198308a7e2b4fac82a8707652b52720d"},"pipeline":{"id":49996891,"iid":7615,"project_id":6138686,"sha":"9f28e439198308a7e2b4fac82a8707652b52720d","ref":"pr-9047","status":"failed","source":"push","created_at":"2019-03-02T19:34:45.916Z","updated_at":"2019-03-02T23:03:58.675Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996891"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552689","artifacts":[{"file_type":"trace","size":45322,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170552688,"status":"success","stage":"test","name":"library:ci-vst","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:34:47.234Z","started_at":"2019-03-02T20:03:29.833Z","finished_at":"2019-03-02T20:59:36.295Z","duration":3366.462318,"queued_duration":0.115438,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9f28e439198308a7e2b4fac82a8707652b52720d","short_id":"9f28e439","created_at":"2019-03-02T20:34:34.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:34:34.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9f28e439198308a7e2b4fac82a8707652b52720d"},"pipeline":{"id":49996891,"iid":7615,"project_id":6138686,"sha":"9f28e439198308a7e2b4fac82a8707652b52720d","ref":"pr-9047","status":"failed","source":"push","created_at":"2019-03-02T19:34:45.916Z","updated_at":"2019-03-02T23:03:58.675Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996891"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552688","artifacts":[{"file_type":"trace","size":467787,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":170552687,"status":"success","stage":"test","name":"library:ci-verdi-raft","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:34:47.203Z","started_at":"2019-03-02T20:04:36.890Z","finished_at":"2019-03-02T20:40:33.774Z","duration":2156.883646,"queued_duration":67.045398,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9f28e439198308a7e2b4fac82a8707652b52720d","short_id":"9f28e439","created_at":"2019-03-02T20:34:34.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:34:34.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9f28e439198308a7e2b4fac82a8707652b52720d"},"pipeline":{"id":49996891,"iid":7615,"project_id":6138686,"sha":"9f28e439198308a7e2b4fac82a8707652b52720d","ref":"pr-9047","status":"failed","source":"push","created_at":"2019-03-02T19:34:45.916Z","updated_at":"2019-03-02T23:03:58.675Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996891"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552687","artifacts":[{"file_type":"trace","size":181029,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170552686,"status":"success","stage":"test","name":"library:ci-unimath","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:34:47.175Z","started_at":"2019-03-02T20:04:36.816Z","finished_at":"2019-03-02T20:47:59.022Z","duration":2602.206238,"queued_duration":66.899174,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9f28e439198308a7e2b4fac82a8707652b52720d","short_id":"9f28e439","created_at":"2019-03-02T20:34:34.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:34:34.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9f28e439198308a7e2b4fac82a8707652b52720d"},"pipeline":{"id":49996891,"iid":7615,"project_id":6138686,"sha":"9f28e439198308a7e2b4fac82a8707652b52720d","ref":"pr-9047","status":"failed","source":"push","created_at":"2019-03-02T19:34:45.916Z","updated_at":"2019-03-02T23:03:58.675Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996891"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552686","artifacts":[{"file_type":"trace","size":187215,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170552685,"status":"success","stage":"test","name":"library:ci-sf","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:34:47.145Z","started_at":"2019-03-02T20:04:36.741Z","finished_at":"2019-03-02T20:08:56.641Z","duration":259.899709,"queued_duration":66.734877,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9f28e439198308a7e2b4fac82a8707652b52720d","short_id":"9f28e439","created_at":"2019-03-02T20:34:34.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:34:34.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9f28e439198308a7e2b4fac82a8707652b52720d"},"pipeline":{"id":49996891,"iid":7615,"project_id":6138686,"sha":"9f28e439198308a7e2b4fac82a8707652b52720d","ref":"pr-9047","status":"failed","source":"push","created_at":"2019-03-02T19:34:45.916Z","updated_at":"2019-03-02T23:03:58.675Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996891"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552685","artifacts":[{"file_type":"trace","size":347895,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170552684,"status":"success","stage":"test","name":"library:ci-math-comp","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:34:47.097Z","started_at":"2019-03-02T20:03:30.152Z","finished_at":"2019-03-02T21:19:45.759Z","duration":4575.606745,"queued_duration":0.061501,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9f28e439198308a7e2b4fac82a8707652b52720d","short_id":"9f28e439","created_at":"2019-03-02T20:34:34.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:34:34.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9f28e439198308a7e2b4fac82a8707652b52720d"},"pipeline":{"id":49996891,"iid":7615,"project_id":6138686,"sha":"9f28e439198308a7e2b4fac82a8707652b52720d","ref":"pr-9047","status":"failed","source":"push","created_at":"2019-03-02T19:34:45.916Z","updated_at":"2019-03-02T23:03:58.675Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996891"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552684","artifacts":[{"file_type":"trace","size":469073,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":170552683,"status":"success","stage":"test","name":"library:ci-iris-lambda-rust","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:34:47.068Z","started_at":"2019-03-02T20:04:36.429Z","finished_at":"2019-03-02T21:07:56.709Z","duration":3800.279524,"queued_duration":66.285327,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9f28e439198308a7e2b4fac82a8707652b52720d","short_id":"9f28e439","created_at":"2019-03-02T20:34:34.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:34:34.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9f28e439198308a7e2b4fac82a8707652b52720d"},"pipeline":{"id":49996891,"iid":7615,"project_id":6138686,"sha":"9f28e439198308a7e2b4fac82a8707652b52720d","ref":"pr-9047","status":"failed","source":"push","created_at":"2019-03-02T19:34:45.916Z","updated_at":"2019-03-02T23:03:58.675Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996891"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552683","artifacts":[{"file_type":"trace","size":283311,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170552682,"status":"success","stage":"test","name":"library:ci-hott","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:34:47.039Z","started_at":"2019-03-02T20:04:36.045Z","finished_at":"2019-03-02T20:17:53.051Z","duration":797.005349,"queued_duration":65.826354,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9f28e439198308a7e2b4fac82a8707652b52720d","short_id":"9f28e439","created_at":"2019-03-02T20:34:34.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:34:34.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9f28e439198308a7e2b4fac82a8707652b52720d"},"pipeline":{"id":49996891,"iid":7615,"project_id":6138686,"sha":"9f28e439198308a7e2b4fac82a8707652b52720d","ref":"pr-9047","status":"failed","source":"push","created_at":"2019-03-02T19:34:45.916Z","updated_at":"2019-03-02T23:03:58.675Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996891"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552682","artifacts":[{"file_type":"trace","size":108279,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170552681,"status":"success","stage":"test","name":"library:ci-geocoq","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:34:47.012Z","started_at":"2019-03-02T20:03:30.417Z","finished_at":"2019-03-02T20:46:37.144Z","duration":2586.726948,"queued_duration":0.094696,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9f28e439198308a7e2b4fac82a8707652b52720d","short_id":"9f28e439","created_at":"2019-03-02T20:34:34.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:34:34.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9f28e439198308a7e2b4fac82a8707652b52720d"},"pipeline":{"id":49996891,"iid":7615,"project_id":6138686,"sha":"9f28e439198308a7e2b4fac82a8707652b52720d","ref":"pr-9047","status":"failed","source":"push","created_at":"2019-03-02T19:34:45.916Z","updated_at":"2019-03-02T23:03:58.675Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996891"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552681","artifacts":[{"file_type":"trace","size":444603,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":170552680,"status":"success","stage":"test","name":"library:ci-corn","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:34:46.967Z","started_at":"2019-03-02T20:04:35.876Z","finished_at":"2019-03-02T20:47:22.368Z","duration":2566.492507,"queued_duration":65.492391,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9f28e439198308a7e2b4fac82a8707652b52720d","short_id":"9f28e439","created_at":"2019-03-02T20:34:34.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:34:34.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9f28e439198308a7e2b4fac82a8707652b52720d"},"pipeline":{"id":49996891,"iid":7615,"project_id":6138686,"sha":"9f28e439198308a7e2b4fac82a8707652b52720d","ref":"pr-9047","status":"failed","source":"push","created_at":"2019-03-02T19:34:45.916Z","updated_at":"2019-03-02T23:03:58.675Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996891"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552680","artifacts":[{"file_type":"trace","size":554549,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170552679,"status":"success","stage":"test","name":"library:ci-flocq","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:34:46.936Z","started_at":"2019-03-02T20:04:28.741Z","finished_at":"2019-03-02T20:19:35.145Z","duration":906.404338,"queued_duration":58.317693,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9f28e439198308a7e2b4fac82a8707652b52720d","short_id":"9f28e439","created_at":"2019-03-02T20:34:34.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:34:34.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9f28e439198308a7e2b4fac82a8707652b52720d"},"pipeline":{"id":49996891,"iid":7615,"project_id":6138686,"sha":"9f28e439198308a7e2b4fac82a8707652b52720d","ref":"pr-9047","status":"failed","source":"push","created_at":"2019-03-02T19:34:45.916Z","updated_at":"2019-03-02T23:03:58.675Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996891"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552679","artifacts":[{"file_type":"trace","size":29287,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170552678,"status":"success","stage":"test","name":"library:ci-fiat-crypto-legacy","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:34:46.905Z","started_at":"2019-03-02T20:04:28.037Z","finished_at":"2019-03-02T21:09:42.810Z","duration":3914.772885,"queued_duration":57.53206,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9f28e439198308a7e2b4fac82a8707652b52720d","short_id":"9f28e439","created_at":"2019-03-02T20:34:34.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:34:34.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9f28e439198308a7e2b4fac82a8707652b52720d"},"pipeline":{"id":49996891,"iid":7615,"project_id":6138686,"sha":"9f28e439198308a7e2b4fac82a8707652b52720d","ref":"pr-9047","status":"failed","source":"push","created_at":"2019-03-02T19:34:45.916Z","updated_at":"2019-03-02T23:03:58.675Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996891"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552678","artifacts":[{"file_type":"trace","size":679149,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170552677,"status":"success","stage":"test","name":"library:ci-fiat-crypto","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:34:46.876Z","started_at":"2019-03-02T20:04:27.410Z","finished_at":"2019-03-02T21:00:02.599Z","duration":3335.189216,"queued_duration":56.858546,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9f28e439198308a7e2b4fac82a8707652b52720d","short_id":"9f28e439","created_at":"2019-03-02T20:34:34.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:34:34.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9f28e439198308a7e2b4fac82a8707652b52720d"},"pipeline":{"id":49996891,"iid":7615,"project_id":6138686,"sha":"9f28e439198308a7e2b4fac82a8707652b52720d","ref":"pr-9047","status":"failed","source":"push","created_at":"2019-03-02T19:34:45.916Z","updated_at":"2019-03-02T23:03:58.675Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996891"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552677","artifacts":[{"file_type":"trace","size":299861,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170552676,"status":"success","stage":"test","name":"library:ci-fcsl-pcm","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:34:46.850Z","started_at":"2019-03-02T20:04:25.033Z","finished_at":"2019-03-02T20:08:50.319Z","duration":265.28608,"queued_duration":54.429306,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9f28e439198308a7e2b4fac82a8707652b52720d","short_id":"9f28e439","created_at":"2019-03-02T20:34:34.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:34:34.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9f28e439198308a7e2b4fac82a8707652b52720d"},"pipeline":{"id":49996891,"iid":7615,"project_id":6138686,"sha":"9f28e439198308a7e2b4fac82a8707652b52720d","ref":"pr-9047","status":"failed","source":"push","created_at":"2019-03-02T19:34:45.916Z","updated_at":"2019-03-02T23:03:58.675Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996891"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552676","artifacts":[{"file_type":"trace","size":122928,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170552675,"status":"success","stage":"test","name":"library:ci-cross-crypto","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:34:46.820Z","started_at":"2019-03-02T20:03:30.747Z","finished_at":"2019-03-02T20:44:58.046Z","duration":2487.299107,"queued_duration":0.103564,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9f28e439198308a7e2b4fac82a8707652b52720d","short_id":"9f28e439","created_at":"2019-03-02T20:34:34.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:34:34.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9f28e439198308a7e2b4fac82a8707652b52720d"},"pipeline":{"id":49996891,"iid":7615,"project_id":6138686,"sha":"9f28e439198308a7e2b4fac82a8707652b52720d","ref":"pr-9047","status":"failed","source":"push","created_at":"2019-03-02T19:34:45.916Z","updated_at":"2019-03-02T23:03:58.675Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996891"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552675","artifacts":[{"file_type":"trace","size":203712,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":170552674,"status":"success","stage":"test","name":"library:ci-coquelicot","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:34:46.794Z","started_at":"2019-03-02T20:04:05.683Z","finished_at":"2019-03-02T20:09:17.082Z","duration":311.398998,"queued_duration":34.943945,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9f28e439198308a7e2b4fac82a8707652b52720d","short_id":"9f28e439","created_at":"2019-03-02T20:34:34.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:34:34.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9f28e439198308a7e2b4fac82a8707652b52720d"},"pipeline":{"id":49996891,"iid":7615,"project_id":6138686,"sha":"9f28e439198308a7e2b4fac82a8707652b52720d","ref":"pr-9047","status":"failed","source":"push","created_at":"2019-03-02T19:34:45.916Z","updated_at":"2019-03-02T23:03:58.675Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996891"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552674","artifacts":[{"file_type":"trace","size":142558,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170552673,"status":"success","stage":"test","name":"library:ci-compcert","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:34:46.766Z","started_at":"2019-03-02T20:04:00.411Z","finished_at":"2019-03-02T20:32:28.484Z","duration":1708.07368,"queued_duration":29.581035,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9f28e439198308a7e2b4fac82a8707652b52720d","short_id":"9f28e439","created_at":"2019-03-02T20:34:34.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:34:34.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9f28e439198308a7e2b4fac82a8707652b52720d"},"pipeline":{"id":49996891,"iid":7615,"project_id":6138686,"sha":"9f28e439198308a7e2b4fac82a8707652b52720d","ref":"pr-9047","status":"failed","source":"push","created_at":"2019-03-02T19:34:45.916Z","updated_at":"2019-03-02T23:03:58.675Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996891"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552673","artifacts":[{"file_type":"trace","size":4194360,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170552672,"status":"success","stage":"test","name":"library:ci-color","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:34:46.737Z","started_at":"2019-03-02T20:03:31.027Z","finished_at":"2019-03-02T20:22:09.327Z","duration":1118.300103,"queued_duration":0.121742,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9f28e439198308a7e2b4fac82a8707652b52720d","short_id":"9f28e439","created_at":"2019-03-02T20:34:34.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:34:34.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9f28e439198308a7e2b4fac82a8707652b52720d"},"pipeline":{"id":49996891,"iid":7615,"project_id":6138686,"sha":"9f28e439198308a7e2b4fac82a8707652b52720d","ref":"pr-9047","status":"failed","source":"push","created_at":"2019-03-02T19:34:45.916Z","updated_at":"2019-03-02T23:03:58.675Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996891"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552672","artifacts":[{"file_type":"trace","size":347042,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":170552671,"status":"success","stage":"test","name":"library:ci-bedrock2","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:34:46.708Z","started_at":"2019-03-02T20:03:58.697Z","finished_at":"2019-03-02T20:42:07.480Z","duration":2288.782402,"queued_duration":27.645338,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9f28e439198308a7e2b4fac82a8707652b52720d","short_id":"9f28e439","created_at":"2019-03-02T20:34:34.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:34:34.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9f28e439198308a7e2b4fac82a8707652b52720d"},"pipeline":{"id":49996891,"iid":7615,"project_id":6138686,"sha":"9f28e439198308a7e2b4fac82a8707652b52720d","ref":"pr-9047","status":"failed","source":"push","created_at":"2019-03-02T19:34:45.916Z","updated_at":"2019-03-02T23:03:58.675Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996891"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552671","artifacts":[{"file_type":"trace","size":250922,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170552670,"status":"success","stage":"test","name":"validate:quick","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:34:46.680Z","started_at":"2019-03-02T20:03:31.382Z","finished_at":"2019-03-02T20:08:19.437Z","duration":288.055136,"queued_duration":0.193761,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9f28e439198308a7e2b4fac82a8707652b52720d","short_id":"9f28e439","created_at":"2019-03-02T20:34:34.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:34:34.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9f28e439198308a7e2b4fac82a8707652b52720d"},"pipeline":{"id":49996891,"iid":7615,"project_id":6138686,"sha":"9f28e439198308a7e2b4fac82a8707652b52720d","ref":"pr-9047","status":"failed","source":"push","created_at":"2019-03-02T19:34:45.916Z","updated_at":"2019-03-02T23:03:58.675Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996891"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552670","artifacts":[{"file_type":"trace","size":56533,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":170552669,"status":"success","stage":"test","name":"validate:edge+flambda","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:34:46.641Z","started_at":"2019-03-02T20:03:57.776Z","finished_at":"2019-03-02T20:07:52.435Z","duration":234.658753,"queued_duration":26.444235,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9f28e439198308a7e2b4fac82a8707652b52720d","short_id":"9f28e439","created_at":"2019-03-02T20:34:34.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:34:34.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9f28e439198308a7e2b4fac82a8707652b52720d"},"pipeline":{"id":49996891,"iid":7615,"project_id":6138686,"sha":"9f28e439198308a7e2b4fac82a8707652b52720d","ref":"pr-9047","status":"failed","source":"push","created_at":"2019-03-02T19:34:45.916Z","updated_at":"2019-03-02T23:03:58.675Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996891"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552669","artifacts":[{"file_type":"trace","size":23964,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170552668,"status":"success","stage":"test","name":"validate:base+32bit","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:34:46.614Z","started_at":"2019-03-02T20:03:31.702Z","finished_at":"2019-03-02T20:08:20.471Z","duration":288.768247,"queued_duration":0.152335,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9f28e439198308a7e2b4fac82a8707652b52720d","short_id":"9f28e439","created_at":"2019-03-02T20:34:34.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:34:34.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9f28e439198308a7e2b4fac82a8707652b52720d"},"pipeline":{"id":49996891,"iid":7615,"project_id":6138686,"sha":"9f28e439198308a7e2b4fac82a8707652b52720d","ref":"pr-9047","status":"failed","source":"push","created_at":"2019-03-02T19:34:45.916Z","updated_at":"2019-03-02T23:03:58.675Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996891"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552668","artifacts":[{"file_type":"trace","size":153552,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":170552667,"status":"success","stage":"test","name":"validate:base","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:34:46.584Z","started_at":"2019-03-02T20:03:31.914Z","finished_at":"2019-03-02T20:09:13.557Z","duration":341.643512,"queued_duration":0.204454,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9f28e439198308a7e2b4fac82a8707652b52720d","short_id":"9f28e439","created_at":"2019-03-02T20:34:34.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:34:34.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9f28e439198308a7e2b4fac82a8707652b52720d"},"pipeline":{"id":49996891,"iid":7615,"project_id":6138686,"sha":"9f28e439198308a7e2b4fac82a8707652b52720d","ref":"pr-9047","status":"failed","source":"push","created_at":"2019-03-02T19:34:45.916Z","updated_at":"2019-03-02T23:03:58.675Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996891"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552667","artifacts":[{"file_type":"trace","size":188124,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":170552666,"status":"failed","stage":"test","name":"test-suite:base+async","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:34:46.552Z","started_at":"2019-03-02T20:03:57.715Z","finished_at":"2019-03-02T23:03:58.558Z","duration":10800.84342,"queued_duration":25.77144,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9f28e439198308a7e2b4fac82a8707652b52720d","short_id":"9f28e439","created_at":"2019-03-02T20:34:34.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:34:34.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9f28e439198308a7e2b4fac82a8707652b52720d"},"pipeline":{"id":49996891,"iid":7615,"project_id":6138686,"sha":"9f28e439198308a7e2b4fac82a8707652b52720d","ref":"pr-9047","status":"failed","source":"push","created_at":"2019-03-02T19:34:45.916Z","updated_at":"2019-03-02T23:03:58.675Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996891"},"failure_reason":"job_execution_timeout","web_url":"https://gitlab.com/coq/coq/-/jobs/170552666","artifacts":[{"file_type":"trace","size":86170,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170552665,"status":"success","stage":"test","name":"test-suite:edge+trunk+dune","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":true,"created_at":"2019-03-02T19:34:46.523Z","started_at":"2019-03-02T20:03:57.396Z","finished_at":"2019-03-02T21:05:35.515Z","duration":3698.119005,"queued_duration":25.279267,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9f28e439198308a7e2b4fac82a8707652b52720d","short_id":"9f28e439","created_at":"2019-03-02T20:34:34.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:34:34.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9f28e439198308a7e2b4fac82a8707652b52720d"},"pipeline":{"id":49996891,"iid":7615,"project_id":6138686,"sha":"9f28e439198308a7e2b4fac82a8707652b52720d","ref":"pr-9047","status":"failed","source":"push","created_at":"2019-03-02T19:34:45.916Z","updated_at":"2019-03-02T23:03:58.675Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996891"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552665","artifacts":[{"file_type":"trace","size":147119,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2019-03-09T21:05:34.624Z","tag_list":[]}
{"id":170552664,"status":"success","stage":"test","name":"test-suite:edge+trunk+make","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":true,"created_at":"2019-03-02T19:34:46.497Z","started_at":"2019-03-02T20:03:57.081Z","finished_at":"2019-03-02T21:02:52.256Z","duration":3535.175178,"queued_duration":24.723191,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9f28e439198308a7e2b4fac82a8707652b52720d","short_id":"9f28e439","created_at":"2019-03-02T20:34:34.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:34:34.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9f28e439198308a7e2b4fac82a8707652b52720d"},"pipeline":{"id":49996891,"iid":7615,"project_id":6138686,"sha":"9f28e439198308a7e2b4fac82a8707652b52720d","ref":"pr-9047","status":"failed","source":"push","created_at":"2019-03-02T19:34:45.916Z","updated_at":"2019-03-02T23:03:58.675Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996891"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552664","artifacts":[{"file_type":"trace","size":213099,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2019-03-09T21:02:51.248Z","tag_list":[]}
{"id":170552663,"status":"success","stage":"test","name":"test-suite:egde:dune:dev","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:34:46.467Z","started_at":"2019-03-02T20:03:55.843Z","finished_at":"2019-03-02T20:46:28.434Z","duration":2552.591134,"queued_duration":23.342778,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9f28e439198308a7e2b4fac82a8707652b52720d","short_id":"9f28e439","created_at":"2019-03-02T20:34:34.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:34:34.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9f28e439198308a7e2b4fac82a8707652b52720d"},"pipeline":{"id":49996891,"iid":7615,"project_id":6138686,"sha":"9f28e439198308a7e2b4fac82a8707652b52720d","ref":"pr-9047","status":"failed","source":"push","created_at":"2019-03-02T19:34:45.916Z","updated_at":"2019-03-02T23:03:58.675Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996891"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552663","artifacts":[{"file_type":"trace","size":86598,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170552662,"status":"success","stage":"test","name":"test-suite:edge+flambda","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:34:46.440Z","started_at":"2019-03-02T20:03:55.682Z","finished_at":"2019-03-02T20:37:08.935Z","duration":1993.252828,"queued_duration":23.046461,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9f28e439198308a7e2b4fac82a8707652b52720d","short_id":"9f28e439","created_at":"2019-03-02T20:34:34.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:34:34.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9f28e439198308a7e2b4fac82a8707652b52720d"},"pipeline":{"id":49996891,"iid":7615,"project_id":6138686,"sha":"9f28e439198308a7e2b4fac82a8707652b52720d","ref":"pr-9047","status":"failed","source":"push","created_at":"2019-03-02T19:34:45.916Z","updated_at":"2019-03-02T23:03:58.675Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996891"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552662","artifacts":[{"file_type":"trace","size":86709,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170552661,"status":"success","stage":"test","name":"test-suite:base+32bit","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:34:46.413Z","started_at":"2019-03-02T20:03:55.410Z","finished_at":"2019-03-02T20:31:57.610Z","duration":1682.199312,"queued_duration":22.545141,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9f28e439198308a7e2b4fac82a8707652b52720d","short_id":"9f28e439","created_at":"2019-03-02T20:34:34.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:34:34.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9f28e439198308a7e2b4fac82a8707652b52720d"},"pipeline":{"id":49996891,"iid":7615,"project_id":6138686,"sha":"9f28e439198308a7e2b4fac82a8707652b52720d","ref":"pr-9047","status":"failed","source":"push","created_at":"2019-03-02T19:34:45.916Z","updated_at":"2019-03-02T23:03:58.675Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996891"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552661","artifacts":[{"file_type":"trace","size":85003,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170552660,"status":"success","stage":"test","name":"test-suite:base","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:34:46.386Z","started_at":"2019-03-02T20:03:55.355Z","finished_at":"2019-03-02T20:40:05.863Z","duration":2170.508238,"queued_duration":22.342937,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9f28e439198308a7e2b4fac82a8707652b52720d","short_id":"9f28e439","created_at":"2019-03-02T20:34:34.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:34:34.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9f28e439198308a7e2b4fac82a8707652b52720d"},"pipeline":{"id":49996891,"iid":7615,"project_id":6138686,"sha":"9f28e439198308a7e2b4fac82a8707652b52720d","ref":"pr-9047","status":"failed","source":"push","created_at":"2019-03-02T19:34:45.916Z","updated_at":"2019-03-02T23:03:58.675Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996891"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552660","artifacts":[{"file_type":"trace","size":86441,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170552659,"status":"success","stage":"test","name":"doc:ml-api:odoc","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:34:46.358Z","started_at":"2019-03-02T20:03:55.149Z","finished_at":"2019-03-02T20:07:14.000Z","duration":198.851024,"queued_duration":22.023472,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9f28e439198308a7e2b4fac82a8707652b52720d","short_id":"9f28e439","created_at":"2019-03-02T20:34:34.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:34:34.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9f28e439198308a7e2b4fac82a8707652b52720d"},"pipeline":{"id":49996891,"iid":7615,"project_id":6138686,"sha":"9f28e439198308a7e2b4fac82a8707652b52720d","ref":"pr-9047","status":"failed","source":"push","created_at":"2019-03-02T19:34:45.916Z","updated_at":"2019-03-02T23:03:58.675Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996891"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552659","artifacts":[{"file_type":"trace","size":80431,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2019-04-01T20:07:12.970Z","tag_list":[]}
{"id":170552658,"status":"success","stage":"test","name":"doc:stdlib:dune","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:34:46.328Z","started_at":"2019-03-02T20:03:55.026Z","finished_at":"2019-03-02T20:17:45.092Z","duration":830.066005,"queued_duration":21.765412,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9f28e439198308a7e2b4fac82a8707652b52720d","short_id":"9f28e439","created_at":"2019-03-02T20:34:34.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:34:34.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9f28e439198308a7e2b4fac82a8707652b52720d"},"pipeline":{"id":49996891,"iid":7615,"project_id":6138686,"sha":"9f28e439198308a7e2b4fac82a8707652b52720d","ref":"pr-9047","status":"failed","source":"push","created_at":"2019-03-02T19:34:45.916Z","updated_at":"2019-03-02T23:03:58.675Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996891"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552658","artifacts":[{"file_type":"trace","size":24647,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2019-04-01T20:17:43.941Z","tag_list":[]}
{"id":170552657,"status":"success","stage":"test","name":"doc:refman:dune","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:34:46.299Z","started_at":"2019-03-02T20:03:54.707Z","finished_at":"2019-03-02T20:17:53.883Z","duration":839.176343,"queued_duration":21.288323,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9f28e439198308a7e2b4fac82a8707652b52720d","short_id":"9f28e439","created_at":"2019-03-02T20:34:34.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:34:34.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9f28e439198308a7e2b4fac82a8707652b52720d"},"pipeline":{"id":49996891,"iid":7615,"project_id":6138686,"sha":"9f28e439198308a7e2b4fac82a8707652b52720d","ref":"pr-9047","status":"failed","source":"push","created_at":"2019-03-02T19:34:45.916Z","updated_at":"2019-03-02T23:03:58.675Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996891"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552657","artifacts":[{"file_type":"trace","size":23383,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2019-04-01T20:17:52.972Z","tag_list":[]}
{"id":170552656,"status":"success","stage":"test","name":"doc:refman","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:34:46.273Z","started_at":"2019-03-02T20:03:54.636Z","finished_at":"2019-03-02T20:10:28.937Z","duration":394.300225,"queued_duration":21.099533,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9f28e439198308a7e2b4fac82a8707652b52720d","short_id":"9f28e439","created_at":"2019-03-02T20:34:34.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:34:34.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9f28e439198308a7e2b4fac82a8707652b52720d"},"pipeline":{"id":49996891,"iid":7615,"project_id":6138686,"sha":"9f28e439198308a7e2b4fac82a8707652b52720d","ref":"pr-9047","status":"failed","source":"push","created_at":"2019-03-02T19:34:45.916Z","updated_at":"2019-03-02T23:03:58.675Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996891"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552656","artifacts":[{"file_type":"trace","size":1055940,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170552655,"status":"success","stage":"test","name":"pkg:nix","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:34:46.244Z","started_at":"2019-03-02T20:03:54.390Z","finished_at":"2019-03-02T20:54:11.040Z","duration":3016.650276,"queued_duration":20.754011,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9f28e439198308a7e2b4fac82a8707652b52720d","short_id":"9f28e439","created_at":"2019-03-02T20:34:34.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:34:34.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9f28e439198308a7e2b4fac82a8707652b52720d"},"pipeline":{"id":49996891,"iid":7615,"project_id":6138686,"sha":"9f28e439198308a7e2b4fac82a8707652b52720d","ref":"pr-9047","status":"failed","source":"push","created_at":"2019-03-02T19:34:45.916Z","updated_at":"2019-03-02T23:03:58.675Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996891"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552655","artifacts":[{"file_type":"trace","size":508785,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170552654,"status":"success","stage":"test","name":"pkg:opam","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:34:46.218Z","started_at":"2019-03-02T20:03:54.060Z","finished_at":"2019-03-02T20:27:01.161Z","duration":1387.100859,"queued_duration":20.338494,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9f28e439198308a7e2b4fac82a8707652b52720d","short_id":"9f28e439","created_at":"2019-03-02T20:34:34.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:34:34.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9f28e439198308a7e2b4fac82a8707652b52720d"},"pipeline":{"id":49996891,"iid":7615,"project_id":6138686,"sha":"9f28e439198308a7e2b4fac82a8707652b52720d","ref":"pr-9047","status":"failed","source":"push","created_at":"2019-03-02T19:34:45.916Z","updated_at":"2019-03-02T23:03:58.675Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996891"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552654","artifacts":[{"file_type":"trace","size":20106,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170552653,"status":"success","stage":"test","name":"lint","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:34:46.192Z","started_at":"2019-03-02T20:03:53.767Z","finished_at":"2019-03-02T20:05:12.665Z","duration":78.898377,"queued_duration":19.996088,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9f28e439198308a7e2b4fac82a8707652b52720d","short_id":"9f28e439","created_at":"2019-03-02T20:34:34.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:34:34.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9f28e439198308a7e2b4fac82a8707652b52720d"},"pipeline":{"id":49996891,"iid":7615,"project_id":6138686,"sha":"9f28e439198308a7e2b4fac82a8707652b52720d","ref":"pr-9047","status":"failed","source":"push","created_at":"2019-03-02T19:34:45.916Z","updated_at":"2019-03-02T23:03:58.675Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996891"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552653","artifacts":[{"file_type":"trace","size":1963,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170552652,"status":"success","stage":"test","name":"windows64","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:34:46.155Z","started_at":"2019-03-02T20:03:34.502Z","finished_at":"2019-03-02T20:49:57.063Z","duration":2782.561056,"queued_duration":0.674389,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9f28e439198308a7e2b4fac82a8707652b52720d","short_id":"9f28e439","created_at":"2019-03-02T20:34:34.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:34:34.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9f28e439198308a7e2b4fac82a8707652b52720d"},"pipeline":{"id":49996891,"iid":7615,"project_id":6138686,"sha":"9f28e439198308a7e2b4fac82a8707652b52720d","ref":"pr-9047","status":"failed","source":"push","created_at":"2019-03-02T19:34:45.916Z","updated_at":"2019-03-02T23:03:58.675Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996891"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552652","artifacts":[{"file_type":"trace","size":231109,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":"2019-03-09T20:49:53.232Z","tag_list":["windows"]}
{"id":170552651,"status":"success","stage":"test","name":"build:base+async","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:34:46.123Z","started_at":"2019-03-02T20:03:47.279Z","finished_at":"2019-03-02T21:14:27.379Z","duration":4240.100145,"queued_duration":13.412697,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9f28e439198308a7e2b4fac82a8707652b52720d","short_id":"9f28e439","created_at":"2019-03-02T20:34:34.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:34:34.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9f28e439198308a7e2b4fac82a8707652b52720d"},"pipeline":{"id":49996891,"iid":7615,"project_id":6138686,"sha":"9f28e439198308a7e2b4fac82a8707652b52720d","ref":"pr-9047","status":"failed","source":"push","created_at":"2019-03-02T19:34:45.916Z","updated_at":"2019-03-02T23:03:58.675Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996891"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552651","artifacts":[{"file_type":"trace","size":238605,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2019-03-09T21:14:23.071Z","tag_list":[]}
{"id":170552649,"status":"success","stage":"build","name":"build:quick","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:34:46.070Z","started_at":"2019-03-02T19:34:49.149Z","finished_at":"2019-03-02T19:54:52.199Z","duration":1203.049769,"queued_duration":1.155022,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9f28e439198308a7e2b4fac82a8707652b52720d","short_id":"9f28e439","created_at":"2019-03-02T20:34:34.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:34:34.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9f28e439198308a7e2b4fac82a8707652b52720d"},"pipeline":{"id":49996891,"iid":7615,"project_id":6138686,"sha":"9f28e439198308a7e2b4fac82a8707652b52720d","ref":"pr-9047","status":"failed","source":"push","created_at":"2019-03-02T19:34:45.916Z","updated_at":"2019-03-02T23:03:58.675Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996891"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552649","artifacts":[{"file_type":"trace","size":164755,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2019-03-09T19:54:48.571Z","tag_list":[]}
{"id":170552645,"status":"success","stage":"build","name":"build:edge+flambda:dune:dev","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:34:46.038Z","started_at":"2019-03-02T19:34:49.010Z","finished_at":"2019-03-02T19:49:14.783Z","duration":865.773417,"queued_duration":0.966691,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9f28e439198308a7e2b4fac82a8707652b52720d","short_id":"9f28e439","created_at":"2019-03-02T20:34:34.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:34:34.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9f28e439198308a7e2b4fac82a8707652b52720d"},"pipeline":{"id":49996891,"iid":7615,"project_id":6138686,"sha":"9f28e439198308a7e2b4fac82a8707652b52720d","ref":"pr-9047","status":"failed","source":"push","created_at":"2019-03-02T19:34:45.916Z","updated_at":"2019-03-02T23:03:58.675Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996891"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552645","artifacts":[{"file_type":"trace","size":19057,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2019-03-09T19:49:09.925Z","tag_list":[]}
{"id":170552642,"status":"success","stage":"build","name":"build:edge+flambda","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:34:46.005Z","started_at":"2019-03-02T19:34:48.312Z","finished_at":"2019-03-02T20:03:27.644Z","duration":1719.331971,"queued_duration":0.182946,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9f28e439198308a7e2b4fac82a8707652b52720d","short_id":"9f28e439","created_at":"2019-03-02T20:34:34.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:34:34.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9f28e439198308a7e2b4fac82a8707652b52720d"},"pipeline":{"id":49996891,"iid":7615,"project_id":6138686,"sha":"9f28e439198308a7e2b4fac82a8707652b52720d","ref":"pr-9047","status":"failed","source":"push","created_at":"2019-03-02T19:34:45.916Z","updated_at":"2019-03-02T23:03:58.675Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996891"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552642","artifacts":[{"file_type":"trace","size":238135,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2019-03-09T20:03:20.085Z","tag_list":[]}
{"id":170552639,"status":"success","stage":"build","name":"build:base+32bit","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:34:45.976Z","started_at":"2019-03-02T19:34:48.923Z","finished_at":"2019-03-02T19:48:50.823Z","duration":841.900128,"queued_duration":0.740817,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9f28e439198308a7e2b4fac82a8707652b52720d","short_id":"9f28e439","created_at":"2019-03-02T20:34:34.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:34:34.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9f28e439198308a7e2b4fac82a8707652b52720d"},"pipeline":{"id":49996891,"iid":7615,"project_id":6138686,"sha":"9f28e439198308a7e2b4fac82a8707652b52720d","ref":"pr-9047","status":"failed","source":"push","created_at":"2019-03-02T19:34:45.916Z","updated_at":"2019-03-02T23:03:58.675Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996891"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552639","artifacts":[{"file_type":"trace","size":231807,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2019-03-09T19:48:47.065Z","tag_list":[]}
{"id":170552638,"status":"success","stage":"build","name":"build:base","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T19:34:45.933Z","started_at":"2019-03-02T19:34:48.342Z","finished_at":"2019-03-02T19:50:45.749Z","duration":957.407157,"queued_duration":0.087477,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9f28e439198308a7e2b4fac82a8707652b52720d","short_id":"9f28e439","created_at":"2019-03-02T20:34:34.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T20:34:34.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9f28e439198308a7e2b4fac82a8707652b52720d"},"pipeline":{"id":49996891,"iid":7615,"project_id":6138686,"sha":"9f28e439198308a7e2b4fac82a8707652b52720d","ref":"pr-9047","status":"failed","source":"push","created_at":"2019-03-02T19:34:45.916Z","updated_at":"2019-03-02T23:03:58.675Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49996891"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170552638","artifacts":[{"file_type":"trace","size":315736,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":"2019-03-09T19:50:39.833Z","tag_list":[]}
