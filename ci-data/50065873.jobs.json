{"id":170730710,"status":"success","stage":"test","name":"plugin:ci-relation-algebra","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-03T16:21:54.182Z","started_at":"2019-03-03T18:07:36.961Z","finished_at":"2019-03-03T18:13:45.271Z","duration":368.309435,"queued_duration":2359.575645,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9870e1f8662923d0de1b9c2014d3b4f647a893da","short_id":"9870e1f8","created_at":"2019-03-03T17:21:13.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-03T17:21:13.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9870e1f8662923d0de1b9c2014d3b4f647a893da"},"pipeline":{"id":50065873,"iid":7620,"project_id":6138686,"sha":"9870e1f8662923d0de1b9c2014d3b4f647a893da","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-03T16:21:53.004Z","updated_at":"2019-03-03T19:21:11.280Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/50065873"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170730710","artifacts":[{"file_type":"trace","size":51583,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170730709,"status":"success","stage":"test","name":"plugin:ci-quickchick","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-03T16:21:54.161Z","started_at":"2019-03-03T18:07:23.547Z","finished_at":"2019-03-03T18:12:53.631Z","duration":330.084057,"queued_duration":2346.12436,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9870e1f8662923d0de1b9c2014d3b4f647a893da","short_id":"9870e1f8","created_at":"2019-03-03T17:21:13.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-03T17:21:13.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9870e1f8662923d0de1b9c2014d3b4f647a893da"},"pipeline":{"id":50065873,"iid":7620,"project_id":6138686,"sha":"9870e1f8662923d0de1b9c2014d3b4f647a893da","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-03T16:21:53.004Z","updated_at":"2019-03-03T19:21:11.280Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/50065873"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170730709","artifacts":[{"file_type":"trace","size":261902,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170730708,"status":"success","stage":"test","name":"plugin:plugin-tutorial","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-03T16:21:54.142Z","started_at":"2019-03-03T18:07:21.785Z","finished_at":"2019-03-03T18:11:11.742Z","duration":229.956304,"queued_duration":2344.309593,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9870e1f8662923d0de1b9c2014d3b4f647a893da","short_id":"9870e1f8","created_at":"2019-03-03T17:21:13.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-03T17:21:13.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9870e1f8662923d0de1b9c2014d3b4f647a893da"},"pipeline":{"id":50065873,"iid":7620,"project_id":6138686,"sha":"9870e1f8662923d0de1b9c2014d3b4f647a893da","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-03T16:21:53.004Z","updated_at":"2019-03-03T19:21:11.280Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/50065873"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170730708","artifacts":[{"file_type":"trace","size":53774,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170730707,"status":"success","stage":"test","name":"plugin:ci-paramcoq","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-03T16:21:54.121Z","started_at":"2019-03-03T18:06:13.957Z","finished_at":"2019-03-03T18:09:10.740Z","duration":176.783354,"queued_duration":2276.428154,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9870e1f8662923d0de1b9c2014d3b4f647a893da","short_id":"9870e1f8","created_at":"2019-03-03T17:21:13.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-03T17:21:13.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9870e1f8662923d0de1b9c2014d3b4f647a893da"},"pipeline":{"id":50065873,"iid":7620,"project_id":6138686,"sha":"9870e1f8662923d0de1b9c2014d3b4f647a893da","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-03T16:21:53.004Z","updated_at":"2019-03-03T19:21:11.280Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/50065873"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170730707","artifacts":[{"file_type":"trace","size":361043,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":170730706,"status":"success","stage":"test","name":"plugin:ci-mtac2","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-03T16:21:54.103Z","started_at":"2019-03-03T18:01:15.600Z","finished_at":"2019-03-03T18:05:13.668Z","duration":238.067674,"queued_duration":1978.020987,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9870e1f8662923d0de1b9c2014d3b4f647a893da","short_id":"9870e1f8","created_at":"2019-03-03T17:21:13.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-03T17:21:13.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9870e1f8662923d0de1b9c2014d3b4f647a893da"},"pipeline":{"id":50065873,"iid":7620,"project_id":6138686,"sha":"9870e1f8662923d0de1b9c2014d3b4f647a893da","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-03T16:21:53.004Z","updated_at":"2019-03-03T19:21:11.280Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/50065873"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170730706","artifacts":[{"file_type":"trace","size":205211,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170730704,"status":"success","stage":"test","name":"plugin:ci-ltac2","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-03T16:21:54.084Z","started_at":"2019-03-03T18:01:14.954Z","finished_at":"2019-03-03T18:03:56.965Z","duration":162.010247,"queued_duration":1977.29038,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9870e1f8662923d0de1b9c2014d3b4f647a893da","short_id":"9870e1f8","created_at":"2019-03-03T17:21:13.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-03T17:21:13.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9870e1f8662923d0de1b9c2014d3b4f647a893da"},"pipeline":{"id":50065873,"iid":7620,"project_id":6138686,"sha":"9870e1f8662923d0de1b9c2014d3b4f647a893da","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-03T16:21:53.004Z","updated_at":"2019-03-03T19:21:11.280Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/50065873"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170730704","artifacts":[{"file_type":"trace","size":39470,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170730703,"status":"success","stage":"test","name":"plugin:ci-fiat_parsers","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-03T16:21:54.062Z","started_at":"2019-03-03T18:01:14.385Z","finished_at":"2019-03-03T18:22:12.314Z","duration":1257.929124,"queued_duration":1976.654036,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9870e1f8662923d0de1b9c2014d3b4f647a893da","short_id":"9870e1f8","created_at":"2019-03-03T17:21:13.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-03T17:21:13.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9870e1f8662923d0de1b9c2014d3b4f647a893da"},"pipeline":{"id":50065873,"iid":7620,"project_id":6138686,"sha":"9870e1f8662923d0de1b9c2014d3b4f647a893da","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-03T16:21:53.004Z","updated_at":"2019-03-03T19:21:11.280Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/50065873"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170730703","artifacts":[{"file_type":"trace","size":239268,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170730702,"status":"success","stage":"test","name":"plugin:ci-equations","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-03T16:21:54.042Z","started_at":"2019-03-03T18:01:13.892Z","finished_at":"2019-03-03T18:09:39.897Z","duration":506.00467,"queued_duration":1976.054658,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9870e1f8662923d0de1b9c2014d3b4f647a893da","short_id":"9870e1f8","created_at":"2019-03-03T17:21:13.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-03T17:21:13.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9870e1f8662923d0de1b9c2014d3b4f647a893da"},"pipeline":{"id":50065873,"iid":7620,"project_id":6138686,"sha":"9870e1f8662923d0de1b9c2014d3b4f647a893da","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-03T16:21:53.004Z","updated_at":"2019-03-03T19:21:11.280Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/50065873"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170730702","artifacts":[{"file_type":"trace","size":82859,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170730701,"status":"success","stage":"test","name":"plugin:ci-elpi","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-03T16:21:54.021Z","started_at":"2019-03-03T18:01:13.856Z","finished_at":"2019-03-03T18:05:12.788Z","duration":238.931141,"queued_duration":1975.981938,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9870e1f8662923d0de1b9c2014d3b4f647a893da","short_id":"9870e1f8","created_at":"2019-03-03T17:21:13.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-03T17:21:13.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9870e1f8662923d0de1b9c2014d3b4f647a893da"},"pipeline":{"id":50065873,"iid":7620,"project_id":6138686,"sha":"9870e1f8662923d0de1b9c2014d3b4f647a893da","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-03T16:21:53.004Z","updated_at":"2019-03-03T19:21:11.280Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/50065873"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170730701","artifacts":[{"file_type":"trace","size":415865,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170730700,"status":"success","stage":"test","name":"plugin:ci-coqhammer","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-03T16:21:54.002Z","started_at":"2019-03-03T17:59:47.177Z","finished_at":"2019-03-03T18:02:31.200Z","duration":164.023741,"queued_duration":1889.237808,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9870e1f8662923d0de1b9c2014d3b4f647a893da","short_id":"9870e1f8","created_at":"2019-03-03T17:21:13.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-03T17:21:13.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9870e1f8662923d0de1b9c2014d3b4f647a893da"},"pipeline":{"id":50065873,"iid":7620,"project_id":6138686,"sha":"9870e1f8662923d0de1b9c2014d3b4f647a893da","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-03T16:21:53.004Z","updated_at":"2019-03-03T19:21:11.280Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/50065873"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170730700","artifacts":[{"file_type":"trace","size":31148,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170730699,"status":"success","stage":"test","name":"plugin:ci-coq_dpdgraph","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-03T16:21:53.982Z","started_at":"2019-03-03T17:59:47.140Z","finished_at":"2019-03-03T18:02:35.313Z","duration":168.173141,"queued_duration":1889.158451,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9870e1f8662923d0de1b9c2014d3b4f647a893da","short_id":"9870e1f8","created_at":"2019-03-03T17:21:13.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-03T17:21:13.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9870e1f8662923d0de1b9c2014d3b4f647a893da"},"pipeline":{"id":50065873,"iid":7620,"project_id":6138686,"sha":"9870e1f8662923d0de1b9c2014d3b4f647a893da","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-03T16:21:53.004Z","updated_at":"2019-03-03T19:21:11.280Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/50065873"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170730699","artifacts":[{"file_type":"trace","size":39754,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170730698,"status":"success","stage":"test","name":"plugin:ci-bignums","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-03T16:21:53.958Z","started_at":"2019-03-03T17:59:46.447Z","finished_at":"2019-03-03T18:03:58.997Z","duration":252.550078,"queued_duration":1888.432669,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9870e1f8662923d0de1b9c2014d3b4f647a893da","short_id":"9870e1f8","created_at":"2019-03-03T17:21:13.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-03T17:21:13.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9870e1f8662923d0de1b9c2014d3b4f647a893da"},"pipeline":{"id":50065873,"iid":7620,"project_id":6138686,"sha":"9870e1f8662923d0de1b9c2014d3b4f647a893da","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-03T16:21:53.004Z","updated_at":"2019-03-03T19:21:11.280Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/50065873"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170730698","artifacts":[{"file_type":"trace","size":38606,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170730697,"status":"success","stage":"test","name":"plugin:ci-aac_tactics","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-03T16:21:53.938Z","started_at":"2019-03-03T17:59:28.123Z","finished_at":"2019-03-03T18:02:14.114Z","duration":165.990247,"queued_duration":1870.06237,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9870e1f8662923d0de1b9c2014d3b4f647a893da","short_id":"9870e1f8","created_at":"2019-03-03T17:21:13.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-03T17:21:13.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9870e1f8662923d0de1b9c2014d3b4f647a893da"},"pipeline":{"id":50065873,"iid":7620,"project_id":6138686,"sha":"9870e1f8662923d0de1b9c2014d3b4f647a893da","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-03T16:21:53.004Z","updated_at":"2019-03-03T19:21:11.280Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/50065873"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170730697","artifacts":[{"file_type":"trace","size":45322,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170730696,"status":"success","stage":"test","name":"library:ci-vst","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-03T16:21:53.917Z","started_at":"2019-03-03T17:59:28.087Z","finished_at":"2019-03-03T19:04:56.211Z","duration":3928.123599,"queued_duration":1869.977603,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9870e1f8662923d0de1b9c2014d3b4f647a893da","short_id":"9870e1f8","created_at":"2019-03-03T17:21:13.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-03T17:21:13.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9870e1f8662923d0de1b9c2014d3b4f647a893da"},"pipeline":{"id":50065873,"iid":7620,"project_id":6138686,"sha":"9870e1f8662923d0de1b9c2014d3b4f647a893da","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-03T16:21:53.004Z","updated_at":"2019-03-03T19:21:11.280Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/50065873"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170730696","artifacts":[{"file_type":"trace","size":305019,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170730694,"status":"success","stage":"test","name":"library:ci-verdi-raft","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-03T16:21:53.897Z","started_at":"2019-03-03T17:59:05.440Z","finished_at":"2019-03-03T18:30:23.494Z","duration":1878.053736,"queued_duration":1847.260136,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9870e1f8662923d0de1b9c2014d3b4f647a893da","short_id":"9870e1f8","created_at":"2019-03-03T17:21:13.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-03T17:21:13.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9870e1f8662923d0de1b9c2014d3b4f647a893da"},"pipeline":{"id":50065873,"iid":7620,"project_id":6138686,"sha":"9870e1f8662923d0de1b9c2014d3b4f647a893da","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-03T16:21:53.004Z","updated_at":"2019-03-03T19:21:11.280Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/50065873"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170730694","artifacts":[{"file_type":"trace","size":180956,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170730692,"status":"success","stage":"test","name":"library:ci-unimath","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-03T16:21:53.878Z","started_at":"2019-03-03T17:59:03.775Z","finished_at":"2019-03-03T18:43:21.657Z","duration":2657.882189,"queued_duration":1845.511763,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9870e1f8662923d0de1b9c2014d3b4f647a893da","short_id":"9870e1f8","created_at":"2019-03-03T17:21:13.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-03T17:21:13.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9870e1f8662923d0de1b9c2014d3b4f647a893da"},"pipeline":{"id":50065873,"iid":7620,"project_id":6138686,"sha":"9870e1f8662923d0de1b9c2014d3b4f647a893da","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-03T16:21:53.004Z","updated_at":"2019-03-03T19:21:11.280Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/50065873"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170730692","artifacts":[{"file_type":"trace","size":187216,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170730691,"status":"success","stage":"test","name":"library:ci-sf","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-03T16:21:53.857Z","started_at":"2019-03-03T17:58:23.307Z","finished_at":"2019-03-03T18:03:05.205Z","duration":281.897433,"queued_duration":1804.939352,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9870e1f8662923d0de1b9c2014d3b4f647a893da","short_id":"9870e1f8","created_at":"2019-03-03T17:21:13.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-03T17:21:13.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9870e1f8662923d0de1b9c2014d3b4f647a893da"},"pipeline":{"id":50065873,"iid":7620,"project_id":6138686,"sha":"9870e1f8662923d0de1b9c2014d3b4f647a893da","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-03T16:21:53.004Z","updated_at":"2019-03-03T19:21:11.280Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/50065873"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170730691","artifacts":[{"file_type":"trace","size":347896,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170730690,"status":"success","stage":"test","name":"library:ci-math-comp","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-03T16:21:53.830Z","started_at":"2019-03-03T17:58:23.233Z","finished_at":"2019-03-03T19:21:11.203Z","duration":4967.969171,"queued_duration":1804.68129,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9870e1f8662923d0de1b9c2014d3b4f647a893da","short_id":"9870e1f8","created_at":"2019-03-03T17:21:13.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-03T17:21:13.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9870e1f8662923d0de1b9c2014d3b4f647a893da"},"pipeline":{"id":50065873,"iid":7620,"project_id":6138686,"sha":"9870e1f8662923d0de1b9c2014d3b4f647a893da","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-03T16:21:53.004Z","updated_at":"2019-03-03T19:21:11.280Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/50065873"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170730690","artifacts":[{"file_type":"trace","size":308424,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170730689,"status":"success","stage":"test","name":"library:ci-iris-lambda-rust","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-03T16:21:53.808Z","started_at":"2019-03-03T17:58:20.180Z","finished_at":"2019-03-03T18:55:18.177Z","duration":3417.996844,"queued_duration":1801.493765,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9870e1f8662923d0de1b9c2014d3b4f647a893da","short_id":"9870e1f8","created_at":"2019-03-03T17:21:13.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-03T17:21:13.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9870e1f8662923d0de1b9c2014d3b4f647a893da"},"pipeline":{"id":50065873,"iid":7620,"project_id":6138686,"sha":"9870e1f8662923d0de1b9c2014d3b4f647a893da","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-03T16:21:53.004Z","updated_at":"2019-03-03T19:21:11.280Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/50065873"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170730689","artifacts":[{"file_type":"trace","size":283297,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170730688,"status":"success","stage":"test","name":"library:ci-hott","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-03T16:21:53.788Z","started_at":"2019-03-03T17:58:20.080Z","finished_at":"2019-03-03T18:11:02.247Z","duration":762.16645,"queued_duration":1801.283662,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9870e1f8662923d0de1b9c2014d3b4f647a893da","short_id":"9870e1f8","created_at":"2019-03-03T17:21:13.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-03T17:21:13.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9870e1f8662923d0de1b9c2014d3b4f647a893da"},"pipeline":{"id":50065873,"iid":7620,"project_id":6138686,"sha":"9870e1f8662923d0de1b9c2014d3b4f647a893da","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-03T16:21:53.004Z","updated_at":"2019-03-03T19:21:11.280Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/50065873"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170730688","artifacts":[{"file_type":"trace","size":108216,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170730687,"status":"success","stage":"test","name":"library:ci-geocoq","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-03T16:21:53.767Z","started_at":"2019-03-03T17:58:05.353Z","finished_at":"2019-03-03T18:41:18.404Z","duration":2593.051366,"queued_duration":1786.433502,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9870e1f8662923d0de1b9c2014d3b4f647a893da","short_id":"9870e1f8","created_at":"2019-03-03T17:21:13.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-03T17:21:13.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9870e1f8662923d0de1b9c2014d3b4f647a893da"},"pipeline":{"id":50065873,"iid":7620,"project_id":6138686,"sha":"9870e1f8662923d0de1b9c2014d3b4f647a893da","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-03T16:21:53.004Z","updated_at":"2019-03-03T19:21:11.280Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/50065873"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170730687","artifacts":[{"file_type":"trace","size":284264,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170730686,"status":"success","stage":"test","name":"library:ci-corn","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-03T16:21:53.748Z","started_at":"2019-03-03T17:57:40.207Z","finished_at":"2019-03-03T18:37:10.908Z","duration":2370.70079,"queued_duration":1761.242468,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9870e1f8662923d0de1b9c2014d3b4f647a893da","short_id":"9870e1f8","created_at":"2019-03-03T17:21:13.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-03T17:21:13.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9870e1f8662923d0de1b9c2014d3b4f647a893da"},"pipeline":{"id":50065873,"iid":7620,"project_id":6138686,"sha":"9870e1f8662923d0de1b9c2014d3b4f647a893da","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-03T16:21:53.004Z","updated_at":"2019-03-03T19:21:11.280Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/50065873"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170730686","artifacts":[{"file_type":"trace","size":554529,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170730685,"status":"success","stage":"test","name":"library:ci-flocq","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-03T16:21:53.727Z","started_at":"2019-03-03T17:57:37.379Z","finished_at":"2019-03-03T18:14:00.211Z","duration":982.831986,"queued_duration":1758.352903,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9870e1f8662923d0de1b9c2014d3b4f647a893da","short_id":"9870e1f8","created_at":"2019-03-03T17:21:13.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-03T17:21:13.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9870e1f8662923d0de1b9c2014d3b4f647a893da"},"pipeline":{"id":50065873,"iid":7620,"project_id":6138686,"sha":"9870e1f8662923d0de1b9c2014d3b4f647a893da","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-03T16:21:53.004Z","updated_at":"2019-03-03T19:21:11.280Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/50065873"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170730685","artifacts":[{"file_type":"trace","size":29349,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170730683,"status":"success","stage":"test","name":"library:ci-fiat-crypto-legacy","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-03T16:21:53.709Z","started_at":"2019-03-03T17:57:27.081Z","finished_at":"2019-03-03T19:08:07.597Z","duration":4240.515328,"queued_duration":1747.992647,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9870e1f8662923d0de1b9c2014d3b4f647a893da","short_id":"9870e1f8","created_at":"2019-03-03T17:21:13.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-03T17:21:13.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9870e1f8662923d0de1b9c2014d3b4f647a893da"},"pipeline":{"id":50065873,"iid":7620,"project_id":6138686,"sha":"9870e1f8662923d0de1b9c2014d3b4f647a893da","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-03T16:21:53.004Z","updated_at":"2019-03-03T19:21:11.280Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/50065873"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170730683","artifacts":[{"file_type":"trace","size":702990,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":170730681,"status":"success","stage":"test","name":"library:ci-fiat-crypto","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-03T16:21:53.691Z","started_at":"2019-03-03T17:57:26.684Z","finished_at":"2019-03-03T18:52:18.752Z","duration":3292.067541,"queued_duration":1747.510198,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9870e1f8662923d0de1b9c2014d3b4f647a893da","short_id":"9870e1f8","created_at":"2019-03-03T17:21:13.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-03T17:21:13.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9870e1f8662923d0de1b9c2014d3b4f647a893da"},"pipeline":{"id":50065873,"iid":7620,"project_id":6138686,"sha":"9870e1f8662923d0de1b9c2014d3b4f647a893da","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-03T16:21:53.004Z","updated_at":"2019-03-03T19:21:11.280Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/50065873"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170730681","artifacts":[{"file_type":"trace","size":299803,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170730679,"status":"success","stage":"test","name":"library:ci-fcsl-pcm","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-03T16:21:53.671Z","started_at":"2019-03-03T17:56:51.532Z","finished_at":"2019-03-03T18:00:36.878Z","duration":225.345603,"queued_duration":1712.307391,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9870e1f8662923d0de1b9c2014d3b4f647a893da","short_id":"9870e1f8","created_at":"2019-03-03T17:21:13.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-03T17:21:13.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9870e1f8662923d0de1b9c2014d3b4f647a893da"},"pipeline":{"id":50065873,"iid":7620,"project_id":6138686,"sha":"9870e1f8662923d0de1b9c2014d3b4f647a893da","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-03T16:21:53.004Z","updated_at":"2019-03-03T19:21:11.280Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/50065873"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170730679","artifacts":[{"file_type":"trace","size":122926,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170730678,"status":"success","stage":"test","name":"library:ci-cross-crypto","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-03T16:21:53.651Z","started_at":"2019-03-03T17:56:09.033Z","finished_at":"2019-03-03T18:35:35.830Z","duration":2366.796777,"queued_duration":1669.743254,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9870e1f8662923d0de1b9c2014d3b4f647a893da","short_id":"9870e1f8","created_at":"2019-03-03T17:21:13.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-03T17:21:13.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9870e1f8662923d0de1b9c2014d3b4f647a893da"},"pipeline":{"id":50065873,"iid":7620,"project_id":6138686,"sha":"9870e1f8662923d0de1b9c2014d3b4f647a893da","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-03T16:21:53.004Z","updated_at":"2019-03-03T19:21:11.280Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/50065873"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170730678","artifacts":[{"file_type":"trace","size":39456,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170730677,"status":"success","stage":"test","name":"library:ci-coquelicot","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-03T16:21:53.629Z","started_at":"2019-03-03T17:56:06.900Z","finished_at":"2019-03-03T18:01:38.718Z","duration":331.818682,"queued_duration":1667.497723,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9870e1f8662923d0de1b9c2014d3b4f647a893da","short_id":"9870e1f8","created_at":"2019-03-03T17:21:13.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-03T17:21:13.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9870e1f8662923d0de1b9c2014d3b4f647a893da"},"pipeline":{"id":50065873,"iid":7620,"project_id":6138686,"sha":"9870e1f8662923d0de1b9c2014d3b4f647a893da","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-03T16:21:53.004Z","updated_at":"2019-03-03T19:21:11.280Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/50065873"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170730677","artifacts":[{"file_type":"trace","size":142559,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170730676,"status":"success","stage":"test","name":"library:ci-compcert","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-03T16:21:53.607Z","started_at":"2019-03-03T17:54:21.371Z","finished_at":"2019-03-03T18:23:39.636Z","duration":1758.265083,"queued_duration":1561.861746,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9870e1f8662923d0de1b9c2014d3b4f647a893da","short_id":"9870e1f8","created_at":"2019-03-03T17:21:13.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-03T17:21:13.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9870e1f8662923d0de1b9c2014d3b4f647a893da"},"pipeline":{"id":50065873,"iid":7620,"project_id":6138686,"sha":"9870e1f8662923d0de1b9c2014d3b4f647a893da","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-03T16:21:53.004Z","updated_at":"2019-03-03T19:21:11.280Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/50065873"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170730676","artifacts":[{"file_type":"trace","size":4194360,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170730675,"status":"success","stage":"test","name":"library:ci-color","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-03T16:21:53.584Z","started_at":"2019-03-03T17:53:12.292Z","finished_at":"2019-03-03T18:13:01.294Z","duration":1189.001362,"queued_duration":1492.723473,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9870e1f8662923d0de1b9c2014d3b4f647a893da","short_id":"9870e1f8","created_at":"2019-03-03T17:21:13.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-03T17:21:13.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9870e1f8662923d0de1b9c2014d3b4f647a893da"},"pipeline":{"id":50065873,"iid":7620,"project_id":6138686,"sha":"9870e1f8662923d0de1b9c2014d3b4f647a893da","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-03T16:21:53.004Z","updated_at":"2019-03-03T19:21:11.280Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/50065873"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170730675","artifacts":[{"file_type":"trace","size":242067,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":170730674,"status":"success","stage":"test","name":"library:ci-bedrock2","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-03T16:21:53.566Z","started_at":"2019-03-03T17:52:08.733Z","finished_at":"2019-03-03T18:24:58.298Z","duration":1969.56431,"queued_duration":1429.101498,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9870e1f8662923d0de1b9c2014d3b4f647a893da","short_id":"9870e1f8","created_at":"2019-03-03T17:21:13.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-03T17:21:13.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9870e1f8662923d0de1b9c2014d3b4f647a893da"},"pipeline":{"id":50065873,"iid":7620,"project_id":6138686,"sha":"9870e1f8662923d0de1b9c2014d3b4f647a893da","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-03T16:21:53.004Z","updated_at":"2019-03-03T19:21:11.280Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/50065873"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170730674","artifacts":[{"file_type":"trace","size":280669,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":170730673,"status":"success","stage":"test","name":"validate:quick","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-03T16:21:53.546Z","started_at":"2019-03-03T17:51:54.562Z","finished_at":"2019-03-03T17:55:59.492Z","duration":244.930801,"queued_duration":1414.866656,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9870e1f8662923d0de1b9c2014d3b4f647a893da","short_id":"9870e1f8","created_at":"2019-03-03T17:21:13.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-03T17:21:13.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9870e1f8662923d0de1b9c2014d3b4f647a893da"},"pipeline":{"id":50065873,"iid":7620,"project_id":6138686,"sha":"9870e1f8662923d0de1b9c2014d3b4f647a893da","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-03T16:21:53.004Z","updated_at":"2019-03-03T19:21:11.280Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/50065873"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170730673","artifacts":[{"file_type":"trace","size":23636,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170730672,"status":"success","stage":"test","name":"validate:edge+flambda","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-03T16:21:53.524Z","started_at":"2019-03-03T17:49:50.210Z","finished_at":"2019-03-03T17:57:26.836Z","duration":456.625853,"queued_duration":1290.445084,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9870e1f8662923d0de1b9c2014d3b4f647a893da","short_id":"9870e1f8","created_at":"2019-03-03T17:21:13.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-03T17:21:13.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9870e1f8662923d0de1b9c2014d3b4f647a893da"},"pipeline":{"id":50065873,"iid":7620,"project_id":6138686,"sha":"9870e1f8662923d0de1b9c2014d3b4f647a893da","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-03T16:21:53.004Z","updated_at":"2019-03-03T19:21:11.280Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/50065873"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170730672","artifacts":[{"file_type":"trace","size":56601,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":170730671,"status":"success","stage":"test","name":"validate:base+32bit","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-03T16:21:53.505Z","started_at":"2019-03-03T17:48:36.893Z","finished_at":"2019-03-03T17:53:12.086Z","duration":275.193524,"queued_duration":1217.085802,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9870e1f8662923d0de1b9c2014d3b4f647a893da","short_id":"9870e1f8","created_at":"2019-03-03T17:21:13.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-03T17:21:13.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9870e1f8662923d0de1b9c2014d3b4f647a893da"},"pipeline":{"id":50065873,"iid":7620,"project_id":6138686,"sha":"9870e1f8662923d0de1b9c2014d3b4f647a893da","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-03T16:21:53.004Z","updated_at":"2019-03-03T19:21:11.280Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/50065873"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170730671","artifacts":[{"file_type":"trace","size":186406,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":170730670,"status":"success","stage":"test","name":"validate:base","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-03T16:21:53.485Z","started_at":"2019-03-03T17:46:40.085Z","finished_at":"2019-03-03T17:52:08.487Z","duration":328.402046,"queued_duration":1100.230779,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9870e1f8662923d0de1b9c2014d3b4f647a893da","short_id":"9870e1f8","created_at":"2019-03-03T17:21:13.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-03T17:21:13.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9870e1f8662923d0de1b9c2014d3b4f647a893da"},"pipeline":{"id":50065873,"iid":7620,"project_id":6138686,"sha":"9870e1f8662923d0de1b9c2014d3b4f647a893da","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-03T16:21:53.004Z","updated_at":"2019-03-03T19:21:11.280Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/50065873"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170730670","artifacts":[{"file_type":"trace","size":56270,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":170730669,"status":"success","stage":"test","name":"test-suite:base+async","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-03T16:21:53.466Z","started_at":"2019-03-03T17:43:25.018Z","finished_at":"2019-03-03T18:53:34.962Z","duration":4209.944007,"queued_duration":905.12253,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9870e1f8662923d0de1b9c2014d3b4f647a893da","short_id":"9870e1f8","created_at":"2019-03-03T17:21:13.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-03T17:21:13.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9870e1f8662923d0de1b9c2014d3b4f647a893da"},"pipeline":{"id":50065873,"iid":7620,"project_id":6138686,"sha":"9870e1f8662923d0de1b9c2014d3b4f647a893da","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-03T16:21:53.004Z","updated_at":"2019-03-03T19:21:11.280Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/50065873"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170730669","artifacts":[{"file_type":"trace","size":250613,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":170730668,"status":"success","stage":"test","name":"test-suite:edge+trunk+dune","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":true,"created_at":"2019-03-03T16:21:53.443Z","started_at":"2019-03-03T17:42:51.371Z","finished_at":"2019-03-03T18:35:25.030Z","duration":3153.658781,"queued_duration":871.439355,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9870e1f8662923d0de1b9c2014d3b4f647a893da","short_id":"9870e1f8","created_at":"2019-03-03T17:21:13.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-03T17:21:13.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9870e1f8662923d0de1b9c2014d3b4f647a893da"},"pipeline":{"id":50065873,"iid":7620,"project_id":6138686,"sha":"9870e1f8662923d0de1b9c2014d3b4f647a893da","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-03T16:21:53.004Z","updated_at":"2019-03-03T19:21:11.280Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/50065873"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170730668","artifacts":[{"file_type":"trace","size":147119,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2019-03-10T18:35:24.209Z","tag_list":[]}
{"id":170730667,"status":"success","stage":"test","name":"test-suite:edge+trunk+make","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":true,"created_at":"2019-03-03T16:21:53.423Z","started_at":"2019-03-03T17:42:14.327Z","finished_at":"2019-03-03T18:40:10.384Z","duration":3476.057294,"queued_duration":834.359184,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9870e1f8662923d0de1b9c2014d3b4f647a893da","short_id":"9870e1f8","created_at":"2019-03-03T17:21:13.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-03T17:21:13.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9870e1f8662923d0de1b9c2014d3b4f647a893da"},"pipeline":{"id":50065873,"iid":7620,"project_id":6138686,"sha":"9870e1f8662923d0de1b9c2014d3b4f647a893da","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-03T16:21:53.004Z","updated_at":"2019-03-03T19:21:11.280Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/50065873"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170730667","artifacts":[{"file_type":"trace","size":213036,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2019-03-10T18:40:09.625Z","tag_list":[]}
{"id":170730666,"status":"success","stage":"test","name":"test-suite:egde:dune:dev","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-03T16:21:53.404Z","started_at":"2019-03-03T17:41:37.005Z","finished_at":"2019-03-03T18:15:19.880Z","duration":2022.874423,"queued_duration":796.998097,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9870e1f8662923d0de1b9c2014d3b4f647a893da","short_id":"9870e1f8","created_at":"2019-03-03T17:21:13.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-03T17:21:13.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9870e1f8662923d0de1b9c2014d3b4f647a893da"},"pipeline":{"id":50065873,"iid":7620,"project_id":6138686,"sha":"9870e1f8662923d0de1b9c2014d3b4f647a893da","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-03T16:21:53.004Z","updated_at":"2019-03-03T19:21:11.280Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/50065873"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170730666","artifacts":[{"file_type":"trace","size":119169,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":170730665,"status":"success","stage":"test","name":"test-suite:edge+flambda","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-03T16:21:53.385Z","started_at":"2019-03-03T17:41:22.284Z","finished_at":"2019-03-03T18:18:08.258Z","duration":2205.974488,"queued_duration":782.170175,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9870e1f8662923d0de1b9c2014d3b4f647a893da","short_id":"9870e1f8","created_at":"2019-03-03T17:21:13.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-03T17:21:13.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9870e1f8662923d0de1b9c2014d3b4f647a893da"},"pipeline":{"id":50065873,"iid":7620,"project_id":6138686,"sha":"9870e1f8662923d0de1b9c2014d3b4f647a893da","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-03T16:21:53.004Z","updated_at":"2019-03-03T19:21:11.280Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/50065873"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170730665","artifacts":[{"file_type":"trace","size":86709,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170730664,"status":"success","stage":"test","name":"test-suite:base+32bit","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-03T16:21:53.362Z","started_at":"2019-03-03T17:39:46.652Z","finished_at":"2019-03-03T18:06:13.658Z","duration":1587.006035,"queued_duration":686.416981,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9870e1f8662923d0de1b9c2014d3b4f647a893da","short_id":"9870e1f8","created_at":"2019-03-03T17:21:13.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-03T17:21:13.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9870e1f8662923d0de1b9c2014d3b4f647a893da"},"pipeline":{"id":50065873,"iid":7620,"project_id":6138686,"sha":"9870e1f8662923d0de1b9c2014d3b4f647a893da","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-03T16:21:53.004Z","updated_at":"2019-03-03T19:21:11.280Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/50065873"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170730664","artifacts":[{"file_type":"trace","size":249527,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":170730663,"status":"success","stage":"test","name":"test-suite:base","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-03T16:21:53.336Z","started_at":"2019-03-03T17:37:33.621Z","finished_at":"2019-03-03T18:13:13.584Z","duration":2139.962802,"queued_duration":553.319411,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9870e1f8662923d0de1b9c2014d3b4f647a893da","short_id":"9870e1f8","created_at":"2019-03-03T17:21:13.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-03T17:21:13.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9870e1f8662923d0de1b9c2014d3b4f647a893da"},"pipeline":{"id":50065873,"iid":7620,"project_id":6138686,"sha":"9870e1f8662923d0de1b9c2014d3b4f647a893da","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-03T16:21:53.004Z","updated_at":"2019-03-03T19:21:11.280Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/50065873"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170730663","artifacts":[{"file_type":"trace","size":86378,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170730662,"status":"success","stage":"test","name":"doc:ml-api:odoc","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-03T16:21:53.316Z","started_at":"2019-03-03T17:37:16.563Z","finished_at":"2019-03-03T17:41:36.788Z","duration":260.224932,"queued_duration":536.164807,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9870e1f8662923d0de1b9c2014d3b4f647a893da","short_id":"9870e1f8","created_at":"2019-03-03T17:21:13.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-03T17:21:13.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9870e1f8662923d0de1b9c2014d3b4f647a893da"},"pipeline":{"id":50065873,"iid":7620,"project_id":6138686,"sha":"9870e1f8662923d0de1b9c2014d3b4f647a893da","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-03T16:21:53.004Z","updated_at":"2019-03-03T19:21:11.280Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/50065873"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170730662","artifacts":[{"file_type":"trace","size":240688,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":"2019-04-02T17:41:34.266Z","tag_list":[]}
{"id":170730661,"status":"success","stage":"test","name":"doc:stdlib:dune","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-03T16:21:53.298Z","started_at":"2019-03-03T17:37:08.234Z","finished_at":"2019-03-03T17:46:31.832Z","duration":563.597769,"queued_duration":527.72771,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9870e1f8662923d0de1b9c2014d3b4f647a893da","short_id":"9870e1f8","created_at":"2019-03-03T17:21:13.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-03T17:21:13.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9870e1f8662923d0de1b9c2014d3b4f647a893da"},"pipeline":{"id":50065873,"iid":7620,"project_id":6138686,"sha":"9870e1f8662923d0de1b9c2014d3b4f647a893da","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-03T16:21:53.004Z","updated_at":"2019-03-03T19:21:11.280Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/50065873"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170730661","artifacts":[{"file_type":"trace","size":165206,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":"2019-04-02T17:46:28.756Z","tag_list":[]}
{"id":170730660,"status":"success","stage":"test","name":"doc:refman:dune","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-03T16:21:53.278Z","started_at":"2019-03-03T17:36:59.577Z","finished_at":"2019-03-03T17:49:49.449Z","duration":769.87212,"queued_duration":518.972626,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9870e1f8662923d0de1b9c2014d3b4f647a893da","short_id":"9870e1f8","created_at":"2019-03-03T17:21:13.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-03T17:21:13.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9870e1f8662923d0de1b9c2014d3b4f647a893da"},"pipeline":{"id":50065873,"iid":7620,"project_id":6138686,"sha":"9870e1f8662923d0de1b9c2014d3b4f647a893da","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-03T16:21:53.004Z","updated_at":"2019-03-03T19:21:11.280Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/50065873"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170730660","artifacts":[{"file_type":"trace","size":187893,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":"2019-04-02T17:49:47.259Z","tag_list":[]}
{"id":170730659,"status":"success","stage":"test","name":"doc:refman","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-03T16:21:53.259Z","started_at":"2019-03-03T17:34:43.624Z","finished_at":"2019-03-03T17:41:21.556Z","duration":397.931896,"queued_duration":382.949355,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9870e1f8662923d0de1b9c2014d3b4f647a893da","short_id":"9870e1f8","created_at":"2019-03-03T17:21:13.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-03T17:21:13.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9870e1f8662923d0de1b9c2014d3b4f647a893da"},"pipeline":{"id":50065873,"iid":7620,"project_id":6138686,"sha":"9870e1f8662923d0de1b9c2014d3b4f647a893da","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-03T16:21:53.004Z","updated_at":"2019-03-03T19:21:11.280Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/50065873"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170730659","artifacts":[{"file_type":"trace","size":1055940,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170730658,"status":"success","stage":"test","name":"pkg:nix","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-03T16:21:53.238Z","started_at":"2019-03-03T17:33:31.241Z","finished_at":"2019-03-03T18:51:17.921Z","duration":4666.679993,"queued_duration":310.503718,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9870e1f8662923d0de1b9c2014d3b4f647a893da","short_id":"9870e1f8","created_at":"2019-03-03T17:21:13.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-03T17:21:13.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9870e1f8662923d0de1b9c2014d3b4f647a893da"},"pipeline":{"id":50065873,"iid":7620,"project_id":6138686,"sha":"9870e1f8662923d0de1b9c2014d3b4f647a893da","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-03T16:21:53.004Z","updated_at":"2019-03-03T19:21:11.280Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/50065873"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170730658","artifacts":[{"file_type":"trace","size":508745,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":170730657,"status":"success","stage":"test","name":"pkg:opam","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-03T16:21:53.217Z","started_at":"2019-03-03T17:33:28.915Z","finished_at":"2019-03-03T17:55:46.724Z","duration":1337.809148,"queued_duration":308.130963,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9870e1f8662923d0de1b9c2014d3b4f647a893da","short_id":"9870e1f8","created_at":"2019-03-03T17:21:13.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-03T17:21:13.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9870e1f8662923d0de1b9c2014d3b4f647a893da"},"pipeline":{"id":50065873,"iid":7620,"project_id":6138686,"sha":"9870e1f8662923d0de1b9c2014d3b4f647a893da","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-03T16:21:53.004Z","updated_at":"2019-03-03T19:21:11.280Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/50065873"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170730657","artifacts":[{"file_type":"trace","size":20106,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170730656,"status":"success","stage":"test","name":"lint","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-03T16:21:53.197Z","started_at":"2019-03-03T17:33:16.291Z","finished_at":"2019-03-03T17:34:32.740Z","duration":76.449133,"queued_duration":295.457614,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9870e1f8662923d0de1b9c2014d3b4f647a893da","short_id":"9870e1f8","created_at":"2019-03-03T17:21:13.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-03T17:21:13.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9870e1f8662923d0de1b9c2014d3b4f647a893da"},"pipeline":{"id":50065873,"iid":7620,"project_id":6138686,"sha":"9870e1f8662923d0de1b9c2014d3b4f647a893da","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-03T16:21:53.004Z","updated_at":"2019-03-03T19:21:11.280Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/50065873"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170730656","artifacts":[{"file_type":"trace","size":1963,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170730655,"status":"success","stage":"test","name":"windows64","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-03T16:21:53.169Z","started_at":"2019-03-03T17:28:21.128Z","finished_at":"2019-03-03T18:15:25.507Z","duration":2824.379087,"queued_duration":0.244233,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9870e1f8662923d0de1b9c2014d3b4f647a893da","short_id":"9870e1f8","created_at":"2019-03-03T17:21:13.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-03T17:21:13.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9870e1f8662923d0de1b9c2014d3b4f647a893da"},"pipeline":{"id":50065873,"iid":7620,"project_id":6138686,"sha":"9870e1f8662923d0de1b9c2014d3b4f647a893da","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-03T16:21:53.004Z","updated_at":"2019-03-03T19:21:11.280Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/50065873"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170730655","artifacts":[{"file_type":"trace","size":231293,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":"2019-03-10T18:15:21.753Z","tag_list":["windows"]}
{"id":170730654,"status":"success","stage":"test","name":"build:base+async","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-03T16:21:53.146Z","started_at":"2019-03-03T17:28:28.204Z","finished_at":"2019-03-03T18:44:09.363Z","duration":4541.159434,"queued_duration":7.252324,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9870e1f8662923d0de1b9c2014d3b4f647a893da","short_id":"9870e1f8","created_at":"2019-03-03T17:21:13.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-03T17:21:13.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9870e1f8662923d0de1b9c2014d3b4f647a893da"},"pipeline":{"id":50065873,"iid":7620,"project_id":6138686,"sha":"9870e1f8662923d0de1b9c2014d3b4f647a893da","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-03T16:21:53.004Z","updated_at":"2019-03-03T19:21:11.280Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/50065873"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170730654","artifacts":[{"file_type":"trace","size":271479,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":"2019-03-10T18:44:03.150Z","tag_list":[]}
{"id":170730653,"status":"success","stage":"build","name":"build:quick","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-03T16:21:53.110Z","started_at":"2019-03-03T17:04:26.839Z","finished_at":"2019-03-03T17:23:49.038Z","duration":1162.198986,"queued_duration":2552.377917,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9870e1f8662923d0de1b9c2014d3b4f647a893da","short_id":"9870e1f8","created_at":"2019-03-03T17:21:13.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-03T17:21:13.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9870e1f8662923d0de1b9c2014d3b4f647a893da"},"pipeline":{"id":50065873,"iid":7620,"project_id":6138686,"sha":"9870e1f8662923d0de1b9c2014d3b4f647a893da","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-03T16:21:53.004Z","updated_at":"2019-03-03T19:21:11.280Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/50065873"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170730653","artifacts":[{"file_type":"trace","size":164818,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2019-03-10T17:23:44.906Z","tag_list":[]}
{"id":170730652,"status":"success","stage":"build","name":"build:edge+flambda:dune:dev","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-03T16:21:53.091Z","started_at":"2019-03-03T17:00:49.640Z","finished_at":"2019-03-03T17:18:30.380Z","duration":1060.73969,"queued_duration":2335.084039,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9870e1f8662923d0de1b9c2014d3b4f647a893da","short_id":"9870e1f8","created_at":"2019-03-03T17:21:13.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-03T17:21:13.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9870e1f8662923d0de1b9c2014d3b4f647a893da"},"pipeline":{"id":50065873,"iid":7620,"project_id":6138686,"sha":"9870e1f8662923d0de1b9c2014d3b4f647a893da","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-03T16:21:53.004Z","updated_at":"2019-03-03T19:21:11.280Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/50065873"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170730652","artifacts":[{"file_type":"trace","size":19057,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2019-03-10T17:18:24.567Z","tag_list":[]}
{"id":170730651,"status":"success","stage":"build","name":"build:edge+flambda","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-03T16:21:53.068Z","started_at":"2019-03-03T16:59:23.854Z","finished_at":"2019-03-03T17:28:17.275Z","duration":1733.42135,"queued_duration":2249.204817,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9870e1f8662923d0de1b9c2014d3b4f647a893da","short_id":"9870e1f8","created_at":"2019-03-03T17:21:13.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-03T17:21:13.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9870e1f8662923d0de1b9c2014d3b4f647a893da"},"pipeline":{"id":50065873,"iid":7620,"project_id":6138686,"sha":"9870e1f8662923d0de1b9c2014d3b4f647a893da","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-03T16:21:53.004Z","updated_at":"2019-03-03T19:21:11.280Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/50065873"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170730651","artifacts":[{"file_type":"trace","size":238135,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2019-03-10T17:28:07.284Z","tag_list":[]}
{"id":170730650,"status":"success","stage":"build","name":"build:base+32bit","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-03T16:21:53.047Z","started_at":"2019-03-03T16:58:28.840Z","finished_at":"2019-03-03T17:09:04.604Z","duration":635.764601,"queued_duration":2194.134516,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9870e1f8662923d0de1b9c2014d3b4f647a893da","short_id":"9870e1f8","created_at":"2019-03-03T17:21:13.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-03T17:21:13.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9870e1f8662923d0de1b9c2014d3b4f647a893da"},"pipeline":{"id":50065873,"iid":7620,"project_id":6138686,"sha":"9870e1f8662923d0de1b9c2014d3b4f647a893da","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-03T16:21:53.004Z","updated_at":"2019-03-03T19:21:11.280Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/50065873"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170730650","artifacts":[{"file_type":"trace","size":261642,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":"2019-03-10T17:08:59.225Z","tag_list":[]}
{"id":170730649,"status":"success","stage":"build","name":"build:base","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-03T16:21:53.020Z","started_at":"2019-03-03T16:57:55.946Z","finished_at":"2019-03-03T17:11:20.221Z","duration":804.27461,"queued_duration":2161.194317,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9870e1f8662923d0de1b9c2014d3b4f647a893da","short_id":"9870e1f8","created_at":"2019-03-03T17:21:13.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-03T17:21:13.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9870e1f8662923d0de1b9c2014d3b4f647a893da"},"pipeline":{"id":50065873,"iid":7620,"project_id":6138686,"sha":"9870e1f8662923d0de1b9c2014d3b4f647a893da","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-03T16:21:53.004Z","updated_at":"2019-03-03T19:21:11.280Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/50065873"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170730649","artifacts":[{"file_type":"trace","size":316244,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":"2019-03-10T17:11:12.064Z","tag_list":[]}
