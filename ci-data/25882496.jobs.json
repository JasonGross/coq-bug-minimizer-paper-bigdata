{"id":82165465,"status":"failed","stage":"test","name":"ci-vst","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-07-17T00:08:58.102Z","started_at":"2018-07-17T00:31:25.980Z","finished_at":"2018-07-17T00:34:18.045Z","duration":172.064865,"queued_duration":5.809745,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"8233cdce4f3626125c7fa711c9fe61283c70d568","short_id":"8233cdce","created_at":"2018-07-17T01:07:55.000+01:00","parent_ids":["2b749b08eae4b05dc653cbc9d730a96be4187c4e"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-07-17T01:07:55.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/8233cdce4f3626125c7fa711c9fe61283c70d568"},"pipeline":{"id":25882496,"iid":2215,"project_id":6138686,"sha":"8233cdce4f3626125c7fa711c9fe61283c70d568","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-07-17T00:08:57.017Z","updated_at":"2018-07-17T02:10:57.021Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/25882496"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/82165465","artifacts":[{"file_type":"trace","size":28814,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":82165464,"status":"success","stage":"test","name":"ci-unimath","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-07-17T00:08:58.075Z","started_at":"2018-07-17T00:31:25.851Z","finished_at":"2018-07-17T00:57:04.271Z","duration":1538.419755,"queued_duration":5.599093,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"8233cdce4f3626125c7fa711c9fe61283c70d568","short_id":"8233cdce","created_at":"2018-07-17T01:07:55.000+01:00","parent_ids":["2b749b08eae4b05dc653cbc9d730a96be4187c4e"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-07-17T01:07:55.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/8233cdce4f3626125c7fa711c9fe61283c70d568"},"pipeline":{"id":25882496,"iid":2215,"project_id":6138686,"sha":"8233cdce4f3626125c7fa711c9fe61283c70d568","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-07-17T00:08:57.017Z","updated_at":"2018-07-17T02:10:57.021Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/25882496"},"web_url":"https://gitlab.com/coq/coq/-/jobs/82165464","artifacts":[{"file_type":"trace","size":121758,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":82165463,"status":"success","stage":"test","name":"ci-sf","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-07-17T00:08:58.054Z","started_at":"2018-07-17T00:31:25.281Z","finished_at":"2018-07-17T00:36:18.212Z","duration":292.931271,"queued_duration":4.918806,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"8233cdce4f3626125c7fa711c9fe61283c70d568","short_id":"8233cdce","created_at":"2018-07-17T01:07:55.000+01:00","parent_ids":["2b749b08eae4b05dc653cbc9d730a96be4187c4e"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-07-17T01:07:55.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/8233cdce4f3626125c7fa711c9fe61283c70d568"},"pipeline":{"id":25882496,"iid":2215,"project_id":6138686,"sha":"8233cdce4f3626125c7fa711c9fe61283c70d568","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-07-17T00:08:57.017Z","updated_at":"2018-07-17T02:10:57.021Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/25882496"},"web_url":"https://gitlab.com/coq/coq/-/jobs/82165463","artifacts":[{"file_type":"trace","size":265637,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":82165462,"status":"success","stage":"test","name":"ci-quickchick","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-07-17T00:08:58.031Z","started_at":"2018-07-17T00:31:25.216Z","finished_at":"2018-07-17T00:36:19.037Z","duration":293.821006,"queued_duration":4.761553,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"8233cdce4f3626125c7fa711c9fe61283c70d568","short_id":"8233cdce","created_at":"2018-07-17T01:07:55.000+01:00","parent_ids":["2b749b08eae4b05dc653cbc9d730a96be4187c4e"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-07-17T01:07:55.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/8233cdce4f3626125c7fa711c9fe61283c70d568"},"pipeline":{"id":25882496,"iid":2215,"project_id":6138686,"sha":"8233cdce4f3626125c7fa711c9fe61283c70d568","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-07-17T00:08:57.017Z","updated_at":"2018-07-17T02:10:57.021Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/25882496"},"web_url":"https://gitlab.com/coq/coq/-/jobs/82165462","artifacts":[{"file_type":"trace","size":190734,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":82165461,"status":"success","stage":"test","name":"ci-pidetop","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-07-17T00:08:58.007Z","started_at":"2018-07-17T00:31:25.078Z","finished_at":"2018-07-17T00:34:16.351Z","duration":171.272961,"queued_duration":4.56253,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"8233cdce4f3626125c7fa711c9fe61283c70d568","short_id":"8233cdce","created_at":"2018-07-17T01:07:55.000+01:00","parent_ids":["2b749b08eae4b05dc653cbc9d730a96be4187c4e"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-07-17T01:07:55.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/8233cdce4f3626125c7fa711c9fe61283c70d568"},"pipeline":{"id":25882496,"iid":2215,"project_id":6138686,"sha":"8233cdce4f3626125c7fa711c9fe61283c70d568","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-07-17T00:08:57.017Z","updated_at":"2018-07-17T02:10:57.021Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/25882496"},"web_url":"https://gitlab.com/coq/coq/-/jobs/82165461","artifacts":[{"file_type":"trace","size":28045,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":82165460,"status":"success","stage":"test","name":"ci-mtac2","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-07-17T00:08:57.982Z","started_at":"2018-07-17T00:31:24.666Z","finished_at":"2018-07-17T00:34:42.319Z","duration":197.653206,"queued_duration":4.088869,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"8233cdce4f3626125c7fa711c9fe61283c70d568","short_id":"8233cdce","created_at":"2018-07-17T01:07:55.000+01:00","parent_ids":["2b749b08eae4b05dc653cbc9d730a96be4187c4e"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-07-17T01:07:55.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/8233cdce4f3626125c7fa711c9fe61283c70d568"},"pipeline":{"id":25882496,"iid":2215,"project_id":6138686,"sha":"8233cdce4f3626125c7fa711c9fe61283c70d568","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-07-17T00:08:57.017Z","updated_at":"2018-07-17T02:10:57.021Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/25882496"},"web_url":"https://gitlab.com/coq/coq/-/jobs/82165460","artifacts":[{"file_type":"trace","size":84550,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":82165459,"status":"success","stage":"test","name":"ci-math-comp","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-07-17T00:08:57.960Z","started_at":"2018-07-17T00:31:20.891Z","finished_at":"2018-07-17T01:22:05.059Z","duration":3044.167879,"queued_duration":0.182672,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"8233cdce4f3626125c7fa711c9fe61283c70d568","short_id":"8233cdce","created_at":"2018-07-17T01:07:55.000+01:00","parent_ids":["2b749b08eae4b05dc653cbc9d730a96be4187c4e"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-07-17T01:07:55.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/8233cdce4f3626125c7fa711c9fe61283c70d568"},"pipeline":{"id":25882496,"iid":2215,"project_id":6138686,"sha":"8233cdce4f3626125c7fa711c9fe61283c70d568","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-07-17T00:08:57.017Z","updated_at":"2018-07-17T02:10:57.021Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/25882496"},"web_url":"https://gitlab.com/coq/coq/-/jobs/82165459","artifacts":[{"file_type":"trace","size":308252,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":82165458,"status":"success","stage":"test","name":"ci-ltac2","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-07-17T00:08:57.936Z","started_at":"2018-07-17T00:31:24.570Z","finished_at":"2018-07-17T00:34:09.971Z","duration":165.401004,"queued_duration":3.765631,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"8233cdce4f3626125c7fa711c9fe61283c70d568","short_id":"8233cdce","created_at":"2018-07-17T01:07:55.000+01:00","parent_ids":["2b749b08eae4b05dc653cbc9d730a96be4187c4e"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-07-17T01:07:55.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/8233cdce4f3626125c7fa711c9fe61283c70d568"},"pipeline":{"id":25882496,"iid":2215,"project_id":6138686,"sha":"8233cdce4f3626125c7fa711c9fe61283c70d568","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-07-17T00:08:57.017Z","updated_at":"2018-07-17T02:10:57.021Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/25882496"},"web_url":"https://gitlab.com/coq/coq/-/jobs/82165458","artifacts":[{"file_type":"trace","size":44671,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":82165457,"status":"success","stage":"test","name":"ci-iris-lambda-rust","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-07-17T00:08:57.911Z","started_at":"2018-07-17T00:31:24.489Z","finished_at":"2018-07-17T01:32:43.489Z","duration":3678.999586,"queued_duration":3.601371,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"8233cdce4f3626125c7fa711c9fe61283c70d568","short_id":"8233cdce","created_at":"2018-07-17T01:07:55.000+01:00","parent_ids":["2b749b08eae4b05dc653cbc9d730a96be4187c4e"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-07-17T01:07:55.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/8233cdce4f3626125c7fa711c9fe61283c70d568"},"pipeline":{"id":25882496,"iid":2215,"project_id":6138686,"sha":"8233cdce4f3626125c7fa711c9fe61283c70d568","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-07-17T00:08:57.017Z","updated_at":"2018-07-17T02:10:57.021Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/25882496"},"web_url":"https://gitlab.com/coq/coq/-/jobs/82165457","artifacts":[{"file_type":"trace","size":214136,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":82165456,"status":"success","stage":"test","name":"ci-hott","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-07-17T00:08:57.890Z","started_at":"2018-07-17T00:31:24.393Z","finished_at":"2018-07-17T00:41:41.656Z","duration":617.263003,"queued_duration":3.45286,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"8233cdce4f3626125c7fa711c9fe61283c70d568","short_id":"8233cdce","created_at":"2018-07-17T01:07:55.000+01:00","parent_ids":["2b749b08eae4b05dc653cbc9d730a96be4187c4e"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-07-17T01:07:55.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/8233cdce4f3626125c7fa711c9fe61283c70d568"},"pipeline":{"id":25882496,"iid":2215,"project_id":6138686,"sha":"8233cdce4f3626125c7fa711c9fe61283c70d568","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-07-17T00:08:57.017Z","updated_at":"2018-07-17T02:10:57.021Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/25882496"},"web_url":"https://gitlab.com/coq/coq/-/jobs/82165456","artifacts":[{"file_type":"trace","size":61530,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":82165455,"status":"success","stage":"test","name":"ci-geocoq","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-07-17T00:08:57.869Z","started_at":"2018-07-17T00:31:21.097Z","finished_at":"2018-07-17T01:32:04.933Z","duration":3643.835297,"queued_duration":0.113899,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"8233cdce4f3626125c7fa711c9fe61283c70d568","short_id":"8233cdce","created_at":"2018-07-17T01:07:55.000+01:00","parent_ids":["2b749b08eae4b05dc653cbc9d730a96be4187c4e"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-07-17T01:07:55.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/8233cdce4f3626125c7fa711c9fe61283c70d568"},"pipeline":{"id":25882496,"iid":2215,"project_id":6138686,"sha":"8233cdce4f3626125c7fa711c9fe61283c70d568","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-07-17T00:08:57.017Z","updated_at":"2018-07-17T02:10:57.021Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/25882496"},"web_url":"https://gitlab.com/coq/coq/-/jobs/82165455","artifacts":[{"file_type":"trace","size":265443,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":82165454,"status":"success","stage":"test","name":"ci-formal-topology","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-07-17T00:08:57.849Z","started_at":"2018-07-17T00:31:24.326Z","finished_at":"2018-07-17T01:09:14.639Z","duration":2270.313065,"queued_duration":3.285049,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"8233cdce4f3626125c7fa711c9fe61283c70d568","short_id":"8233cdce","created_at":"2018-07-17T01:07:55.000+01:00","parent_ids":["2b749b08eae4b05dc653cbc9d730a96be4187c4e"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-07-17T01:07:55.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/8233cdce4f3626125c7fa711c9fe61283c70d568"},"pipeline":{"id":25882496,"iid":2215,"project_id":6138686,"sha":"8233cdce4f3626125c7fa711c9fe61283c70d568","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-07-17T00:08:57.017Z","updated_at":"2018-07-17T02:10:57.021Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/25882496"},"web_url":"https://gitlab.com/coq/coq/-/jobs/82165454","artifacts":[{"file_type":"trace","size":558798,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":82165453,"status":"success","stage":"test","name":"ci-flocq","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-07-17T00:08:57.823Z","started_at":"2018-07-17T00:31:21.206Z","finished_at":"2018-07-17T00:38:41.300Z","duration":440.093932,"queued_duration":0.09305,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"8233cdce4f3626125c7fa711c9fe61283c70d568","short_id":"8233cdce","created_at":"2018-07-17T01:07:55.000+01:00","parent_ids":["2b749b08eae4b05dc653cbc9d730a96be4187c4e"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-07-17T01:07:55.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/8233cdce4f3626125c7fa711c9fe61283c70d568"},"pipeline":{"id":25882496,"iid":2215,"project_id":6138686,"sha":"8233cdce4f3626125c7fa711c9fe61283c70d568","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-07-17T00:08:57.017Z","updated_at":"2018-07-17T02:10:57.021Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/25882496"},"web_url":"https://gitlab.com/coq/coq/-/jobs/82165453","artifacts":[{"file_type":"trace","size":651818,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":82165452,"status":"success","stage":"test","name":"ci-fiat-parsers","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-07-17T00:08:57.800Z","started_at":"2018-07-17T00:31:24.233Z","finished_at":"2018-07-17T00:50:13.714Z","duration":1129.48099,"queued_duration":3.062621,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"8233cdce4f3626125c7fa711c9fe61283c70d568","short_id":"8233cdce","created_at":"2018-07-17T01:07:55.000+01:00","parent_ids":["2b749b08eae4b05dc653cbc9d730a96be4187c4e"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-07-17T01:07:55.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/8233cdce4f3626125c7fa711c9fe61283c70d568"},"pipeline":{"id":25882496,"iid":2215,"project_id":6138686,"sha":"8233cdce4f3626125c7fa711c9fe61283c70d568","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-07-17T00:08:57.017Z","updated_at":"2018-07-17T02:10:57.021Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/25882496"},"web_url":"https://gitlab.com/coq/coq/-/jobs/82165452","artifacts":[{"file_type":"trace","size":234132,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":82165451,"status":"success","stage":"test","name":"ci-fiat-crypto","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-07-17T00:08:57.779Z","started_at":"2018-07-17T00:31:21.296Z","finished_at":"2018-07-17T02:10:56.561Z","duration":5975.264613,"queued_duration":0.075042,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"8233cdce4f3626125c7fa711c9fe61283c70d568","short_id":"8233cdce","created_at":"2018-07-17T01:07:55.000+01:00","parent_ids":["2b749b08eae4b05dc653cbc9d730a96be4187c4e"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-07-17T01:07:55.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/8233cdce4f3626125c7fa711c9fe61283c70d568"},"pipeline":{"id":25882496,"iid":2215,"project_id":6138686,"sha":"8233cdce4f3626125c7fa711c9fe61283c70d568","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-07-17T00:08:57.017Z","updated_at":"2018-07-17T02:10:57.021Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/25882496"},"web_url":"https://gitlab.com/coq/coq/-/jobs/82165451","artifacts":[{"file_type":"trace","size":1389136,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":82165450,"status":"success","stage":"test","name":"ci-fcsl-pcm","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-07-17T00:08:57.757Z","started_at":"2018-07-17T00:31:24.153Z","finished_at":"2018-07-17T00:35:49.374Z","duration":265.221003,"queued_duration":2.902099,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"8233cdce4f3626125c7fa711c9fe61283c70d568","short_id":"8233cdce","created_at":"2018-07-17T01:07:55.000+01:00","parent_ids":["2b749b08eae4b05dc653cbc9d730a96be4187c4e"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-07-17T01:07:55.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/8233cdce4f3626125c7fa711c9fe61283c70d568"},"pipeline":{"id":25882496,"iid":2215,"project_id":6138686,"sha":"8233cdce4f3626125c7fa711c9fe61283c70d568","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-07-17T00:08:57.017Z","updated_at":"2018-07-17T02:10:57.021Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/25882496"},"web_url":"https://gitlab.com/coq/coq/-/jobs/82165450","artifacts":[{"file_type":"trace","size":88649,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":82165449,"status":"success","stage":"test","name":"ci-equations","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-07-17T00:08:57.737Z","started_at":"2018-07-17T00:31:24.087Z","finished_at":"2018-07-17T00:38:00.471Z","duration":396.383146,"queued_duration":2.790612,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"8233cdce4f3626125c7fa711c9fe61283c70d568","short_id":"8233cdce","created_at":"2018-07-17T01:07:55.000+01:00","parent_ids":["2b749b08eae4b05dc653cbc9d730a96be4187c4e"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-07-17T01:07:55.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/8233cdce4f3626125c7fa711c9fe61283c70d568"},"pipeline":{"id":25882496,"iid":2215,"project_id":6138686,"sha":"8233cdce4f3626125c7fa711c9fe61283c70d568","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-07-17T00:08:57.017Z","updated_at":"2018-07-17T02:10:57.021Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/25882496"},"web_url":"https://gitlab.com/coq/coq/-/jobs/82165449","artifacts":[{"file_type":"trace","size":60788,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":82165448,"status":"success","stage":"test","name":"ci-elpi","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-07-17T00:08:57.711Z","started_at":"2018-07-17T00:31:21.420Z","finished_at":"2018-07-17T00:35:21.419Z","duration":239.998498,"queued_duration":0.091642,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"8233cdce4f3626125c7fa711c9fe61283c70d568","short_id":"8233cdce","created_at":"2018-07-17T01:07:55.000+01:00","parent_ids":["2b749b08eae4b05dc653cbc9d730a96be4187c4e"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-07-17T01:07:55.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/8233cdce4f3626125c7fa711c9fe61283c70d568"},"pipeline":{"id":25882496,"iid":2215,"project_id":6138686,"sha":"8233cdce4f3626125c7fa711c9fe61283c70d568","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-07-17T00:08:57.017Z","updated_at":"2018-07-17T02:10:57.021Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/25882496"},"web_url":"https://gitlab.com/coq/coq/-/jobs/82165448","artifacts":[{"file_type":"trace","size":444018,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":82165447,"status":"success","stage":"test","name":"ci-cross-crypto","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-07-17T00:08:57.686Z","started_at":"2018-07-17T00:31:24.023Z","finished_at":"2018-07-17T01:12:51.601Z","duration":2487.577844,"queued_duration":2.668593,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"8233cdce4f3626125c7fa711c9fe61283c70d568","short_id":"8233cdce","created_at":"2018-07-17T01:07:55.000+01:00","parent_ids":["2b749b08eae4b05dc653cbc9d730a96be4187c4e"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-07-17T01:07:55.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/8233cdce4f3626125c7fa711c9fe61283c70d568"},"pipeline":{"id":25882496,"iid":2215,"project_id":6138686,"sha":"8233cdce4f3626125c7fa711c9fe61283c70d568","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-07-17T00:08:57.017Z","updated_at":"2018-07-17T02:10:57.021Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/25882496"},"web_url":"https://gitlab.com/coq/coq/-/jobs/82165447","artifacts":[{"file_type":"trace","size":72452,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":82165446,"status":"success","stage":"test","name":"ci-coquelicot","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-07-17T00:08:57.664Z","started_at":"2018-07-17T00:31:23.623Z","finished_at":"2018-07-17T00:37:19.286Z","duration":355.663401,"queued_duration":2.222142,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"8233cdce4f3626125c7fa711c9fe61283c70d568","short_id":"8233cdce","created_at":"2018-07-17T01:07:55.000+01:00","parent_ids":["2b749b08eae4b05dc653cbc9d730a96be4187c4e"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-07-17T01:07:55.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/8233cdce4f3626125c7fa711c9fe61283c70d568"},"pipeline":{"id":25882496,"iid":2215,"project_id":6138686,"sha":"8233cdce4f3626125c7fa711c9fe61283c70d568","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-07-17T00:08:57.017Z","updated_at":"2018-07-17T02:10:57.021Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/25882496"},"web_url":"https://gitlab.com/coq/coq/-/jobs/82165446","artifacts":[{"file_type":"trace","size":92843,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":82165445,"status":"success","stage":"test","name":"ci-coq-dpdgraph","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-07-17T00:08:57.638Z","started_at":"2018-07-17T00:31:23.482Z","finished_at":"2018-07-17T00:35:00.049Z","duration":216.566672,"queued_duration":2.051936,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"8233cdce4f3626125c7fa711c9fe61283c70d568","short_id":"8233cdce","created_at":"2018-07-17T01:07:55.000+01:00","parent_ids":["2b749b08eae4b05dc653cbc9d730a96be4187c4e"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-07-17T01:07:55.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/8233cdce4f3626125c7fa711c9fe61283c70d568"},"pipeline":{"id":25882496,"iid":2215,"project_id":6138686,"sha":"8233cdce4f3626125c7fa711c9fe61283c70d568","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-07-17T00:08:57.017Z","updated_at":"2018-07-17T02:10:57.021Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/25882496"},"web_url":"https://gitlab.com/coq/coq/-/jobs/82165445","artifacts":[{"file_type":"trace","size":37593,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":82165444,"status":"success","stage":"test","name":"ci-compcert","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-07-17T00:08:57.616Z","started_at":"2018-07-17T00:31:23.417Z","finished_at":"2018-07-17T00:58:05.789Z","duration":1602.371696,"queued_duration":1.956003,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"8233cdce4f3626125c7fa711c9fe61283c70d568","short_id":"8233cdce","created_at":"2018-07-17T01:07:55.000+01:00","parent_ids":["2b749b08eae4b05dc653cbc9d730a96be4187c4e"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-07-17T01:07:55.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/8233cdce4f3626125c7fa711c9fe61283c70d568"},"pipeline":{"id":25882496,"iid":2215,"project_id":6138686,"sha":"8233cdce4f3626125c7fa711c9fe61283c70d568","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-07-17T00:08:57.017Z","updated_at":"2018-07-17T02:10:57.021Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/25882496"},"web_url":"https://gitlab.com/coq/coq/-/jobs/82165444","artifacts":[{"file_type":"trace","size":1997049,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":82165443,"status":"success","stage":"test","name":"ci-color","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-07-17T00:08:57.591Z","started_at":"2018-07-17T00:31:23.252Z","finished_at":"2018-07-17T00:49:26.120Z","duration":1082.867872,"queued_duration":1.743611,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"8233cdce4f3626125c7fa711c9fe61283c70d568","short_id":"8233cdce","created_at":"2018-07-17T01:07:55.000+01:00","parent_ids":["2b749b08eae4b05dc653cbc9d730a96be4187c4e"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-07-17T01:07:55.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/8233cdce4f3626125c7fa711c9fe61283c70d568"},"pipeline":{"id":25882496,"iid":2215,"project_id":6138686,"sha":"8233cdce4f3626125c7fa711c9fe61283c70d568","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-07-17T00:08:57.017Z","updated_at":"2018-07-17T02:10:57.021Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/25882496"},"web_url":"https://gitlab.com/coq/coq/-/jobs/82165443","artifacts":[{"file_type":"trace","size":180180,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":82165442,"status":"success","stage":"test","name":"ci-bignums","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-07-17T00:08:57.566Z","started_at":"2018-07-17T00:31:23.058Z","finished_at":"2018-07-17T00:35:37.045Z","duration":253.986335,"queued_duration":1.509279,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"8233cdce4f3626125c7fa711c9fe61283c70d568","short_id":"8233cdce","created_at":"2018-07-17T01:07:55.000+01:00","parent_ids":["2b749b08eae4b05dc653cbc9d730a96be4187c4e"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-07-17T01:07:55.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/8233cdce4f3626125c7fa711c9fe61283c70d568"},"pipeline":{"id":25882496,"iid":2215,"project_id":6138686,"sha":"8233cdce4f3626125c7fa711c9fe61283c70d568","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-07-17T00:08:57.017Z","updated_at":"2018-07-17T02:10:57.021Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/25882496"},"web_url":"https://gitlab.com/coq/coq/-/jobs/82165442","artifacts":[{"file_type":"trace","size":40473,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":82165441,"status":"success","stage":"test","name":"ci-bedrock2","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-07-17T00:08:57.547Z","started_at":"2018-07-17T00:31:22.909Z","finished_at":"2018-07-17T00:53:40.898Z","duration":1337.988993,"queued_duration":1.32931,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"8233cdce4f3626125c7fa711c9fe61283c70d568","short_id":"8233cdce","created_at":"2018-07-17T01:07:55.000+01:00","parent_ids":["2b749b08eae4b05dc653cbc9d730a96be4187c4e"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-07-17T01:07:55.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/8233cdce4f3626125c7fa711c9fe61283c70d568"},"pipeline":{"id":25882496,"iid":2215,"project_id":6138686,"sha":"8233cdce4f3626125c7fa711c9fe61283c70d568","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-07-17T00:08:57.017Z","updated_at":"2018-07-17T02:10:57.021Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/25882496"},"web_url":"https://gitlab.com/coq/coq/-/jobs/82165441","artifacts":[{"file_type":"trace","size":222163,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":82165440,"status":"success","stage":"test","name":"validate:edge+flambda","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-07-17T00:08:57.517Z","started_at":"2018-07-17T00:31:21.908Z","finished_at":"2018-07-17T00:38:37.628Z","duration":435.719838,"queued_duration":0.294461,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"8233cdce4f3626125c7fa711c9fe61283c70d568","short_id":"8233cdce","created_at":"2018-07-17T01:07:55.000+01:00","parent_ids":["2b749b08eae4b05dc653cbc9d730a96be4187c4e"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-07-17T01:07:55.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/8233cdce4f3626125c7fa711c9fe61283c70d568"},"pipeline":{"id":25882496,"iid":2215,"project_id":6138686,"sha":"8233cdce4f3626125c7fa711c9fe61283c70d568","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-07-17T00:08:57.017Z","updated_at":"2018-07-17T02:10:57.021Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/25882496"},"web_url":"https://gitlab.com/coq/coq/-/jobs/82165440","artifacts":[{"file_type":"trace","size":25518,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":82165439,"status":"success","stage":"test","name":"validate:edge","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-07-17T00:08:57.483Z","started_at":"2018-07-17T00:31:21.710Z","finished_at":"2018-07-17T00:39:14.990Z","duration":473.280128,"queued_duration":0.061831,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"8233cdce4f3626125c7fa711c9fe61283c70d568","short_id":"8233cdce","created_at":"2018-07-17T01:07:55.000+01:00","parent_ids":["2b749b08eae4b05dc653cbc9d730a96be4187c4e"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-07-17T01:07:55.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/8233cdce4f3626125c7fa711c9fe61283c70d568"},"pipeline":{"id":25882496,"iid":2215,"project_id":6138686,"sha":"8233cdce4f3626125c7fa711c9fe61283c70d568","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-07-17T00:08:57.017Z","updated_at":"2018-07-17T02:10:57.021Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/25882496"},"web_url":"https://gitlab.com/coq/coq/-/jobs/82165439","artifacts":[{"file_type":"trace","size":24424,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":82165438,"status":"success","stage":"test","name":"validate:base+32bit","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-07-17T00:08:57.454Z","started_at":"2018-07-17T00:31:21.774Z","finished_at":"2018-07-17T00:39:35.504Z","duration":493.729483,"queued_duration":0.088439,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"8233cdce4f3626125c7fa711c9fe61283c70d568","short_id":"8233cdce","created_at":"2018-07-17T01:07:55.000+01:00","parent_ids":["2b749b08eae4b05dc653cbc9d730a96be4187c4e"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-07-17T01:07:55.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/8233cdce4f3626125c7fa711c9fe61283c70d568"},"pipeline":{"id":25882496,"iid":2215,"project_id":6138686,"sha":"8233cdce4f3626125c7fa711c9fe61283c70d568","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-07-17T00:08:57.017Z","updated_at":"2018-07-17T02:10:57.021Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/25882496"},"web_url":"https://gitlab.com/coq/coq/-/jobs/82165438","artifacts":[{"file_type":"trace","size":24422,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":82165437,"status":"success","stage":"test","name":"validate:base","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-07-17T00:08:57.426Z","started_at":"2018-07-17T00:31:21.806Z","finished_at":"2018-07-17T00:39:34.858Z","duration":493.051558,"queued_duration":0.066242,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"8233cdce4f3626125c7fa711c9fe61283c70d568","short_id":"8233cdce","created_at":"2018-07-17T01:07:55.000+01:00","parent_ids":["2b749b08eae4b05dc653cbc9d730a96be4187c4e"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-07-17T01:07:55.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/8233cdce4f3626125c7fa711c9fe61283c70d568"},"pipeline":{"id":25882496,"iid":2215,"project_id":6138686,"sha":"8233cdce4f3626125c7fa711c9fe61283c70d568","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-07-17T00:08:57.017Z","updated_at":"2018-07-17T02:10:57.021Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/25882496"},"web_url":"https://gitlab.com/coq/coq/-/jobs/82165437","artifacts":[{"file_type":"trace","size":25398,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":82165436,"status":"success","stage":"test","name":"test-suite:edge+flambda","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-07-17T00:08:57.361Z","started_at":"2018-07-17T00:31:21.892Z","finished_at":"2018-07-17T00:41:28.224Z","duration":606.331936,"queued_duration":0.108515,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"8233cdce4f3626125c7fa711c9fe61283c70d568","short_id":"8233cdce","created_at":"2018-07-17T01:07:55.000+01:00","parent_ids":["2b749b08eae4b05dc653cbc9d730a96be4187c4e"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-07-17T01:07:55.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/8233cdce4f3626125c7fa711c9fe61283c70d568"},"pipeline":{"id":25882496,"iid":2215,"project_id":6138686,"sha":"8233cdce4f3626125c7fa711c9fe61283c70d568","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-07-17T00:08:57.017Z","updated_at":"2018-07-17T02:10:57.021Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/25882496"},"web_url":"https://gitlab.com/coq/coq/-/jobs/82165436","artifacts":[{"file_type":"trace","size":69041,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":82165435,"status":"success","stage":"test","name":"test-suite:edge","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-07-17T00:08:57.337Z","started_at":"2018-07-17T00:31:22.742Z","finished_at":"2018-07-17T00:42:48.922Z","duration":686.179785,"queued_duration":0.895201,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"8233cdce4f3626125c7fa711c9fe61283c70d568","short_id":"8233cdce","created_at":"2018-07-17T01:07:55.000+01:00","parent_ids":["2b749b08eae4b05dc653cbc9d730a96be4187c4e"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-07-17T01:07:55.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/8233cdce4f3626125c7fa711c9fe61283c70d568"},"pipeline":{"id":25882496,"iid":2215,"project_id":6138686,"sha":"8233cdce4f3626125c7fa711c9fe61283c70d568","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-07-17T00:08:57.017Z","updated_at":"2018-07-17T02:10:57.021Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/25882496"},"web_url":"https://gitlab.com/coq/coq/-/jobs/82165435","artifacts":[{"file_type":"trace","size":67947,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":82165434,"status":"success","stage":"test","name":"test-suite:base+32bit","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-07-17T00:08:57.310Z","started_at":"2018-07-17T00:31:22.658Z","finished_at":"2018-07-17T00:40:43.607Z","duration":560.949085,"queued_duration":0.763296,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"8233cdce4f3626125c7fa711c9fe61283c70d568","short_id":"8233cdce","created_at":"2018-07-17T01:07:55.000+01:00","parent_ids":["2b749b08eae4b05dc653cbc9d730a96be4187c4e"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-07-17T01:07:55.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/8233cdce4f3626125c7fa711c9fe61283c70d568"},"pipeline":{"id":25882496,"iid":2215,"project_id":6138686,"sha":"8233cdce4f3626125c7fa711c9fe61283c70d568","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-07-17T00:08:57.017Z","updated_at":"2018-07-17T02:10:57.021Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/25882496"},"web_url":"https://gitlab.com/coq/coq/-/jobs/82165434","artifacts":[{"file_type":"trace","size":67945,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":82165433,"status":"success","stage":"test","name":"test-suite:base","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-07-17T00:08:57.289Z","started_at":"2018-07-17T00:31:22.082Z","finished_at":"2018-07-17T00:41:30.051Z","duration":607.96855,"queued_duration":0.128467,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"8233cdce4f3626125c7fa711c9fe61283c70d568","short_id":"8233cdce","created_at":"2018-07-17T01:07:55.000+01:00","parent_ids":["2b749b08eae4b05dc653cbc9d730a96be4187c4e"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-07-17T01:07:55.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/8233cdce4f3626125c7fa711c9fe61283c70d568"},"pipeline":{"id":25882496,"iid":2215,"project_id":6138686,"sha":"8233cdce4f3626125c7fa711c9fe61283c70d568","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-07-17T00:08:57.017Z","updated_at":"2018-07-17T02:10:57.021Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/25882496"},"web_url":"https://gitlab.com/coq/coq/-/jobs/82165433","artifacts":[{"file_type":"trace","size":68984,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":82165432,"status":"success","stage":"test","name":"documentation","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-07-17T00:08:57.267Z","started_at":"2018-07-17T00:31:22.488Z","finished_at":"2018-07-17T00:36:37.495Z","duration":315.007184,"queued_duration":0.478052,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"8233cdce4f3626125c7fa711c9fe61283c70d568","short_id":"8233cdce","created_at":"2018-07-17T01:07:55.000+01:00","parent_ids":["2b749b08eae4b05dc653cbc9d730a96be4187c4e"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-07-17T01:07:55.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/8233cdce4f3626125c7fa711c9fe61283c70d568"},"pipeline":{"id":25882496,"iid":2215,"project_id":6138686,"sha":"8233cdce4f3626125c7fa711c9fe61283c70d568","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-07-17T00:08:57.017Z","updated_at":"2018-07-17T02:10:57.021Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/25882496"},"web_url":"https://gitlab.com/coq/coq/-/jobs/82165432","artifacts":[{"file_type":"trace","size":31526,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":82165431,"status":"success","stage":"test","name":"pkg:nix","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-07-17T00:08:57.237Z","started_at":"2018-07-17T00:31:22.239Z","finished_at":"2018-07-17T01:05:50.944Z","duration":2068.705512,"queued_duration":0.181018,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"8233cdce4f3626125c7fa711c9fe61283c70d568","short_id":"8233cdce","created_at":"2018-07-17T01:07:55.000+01:00","parent_ids":["2b749b08eae4b05dc653cbc9d730a96be4187c4e"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-07-17T01:07:55.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/8233cdce4f3626125c7fa711c9fe61283c70d568"},"pipeline":{"id":25882496,"iid":2215,"project_id":6138686,"sha":"8233cdce4f3626125c7fa711c9fe61283c70d568","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-07-17T00:08:57.017Z","updated_at":"2018-07-17T02:10:57.021Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/25882496"},"web_url":"https://gitlab.com/coq/coq/-/jobs/82165431","artifacts":[{"file_type":"trace","size":465940,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":82165430,"status":"success","stage":"test","name":"windows32","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-07-17T00:08:57.203Z","started_at":"2018-07-17T00:31:22.750Z","finished_at":"2018-07-17T02:04:29.580Z","duration":5586.829702,"queued_duration":0.630578,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"8233cdce4f3626125c7fa711c9fe61283c70d568","short_id":"8233cdce","created_at":"2018-07-17T01:07:55.000+01:00","parent_ids":["2b749b08eae4b05dc653cbc9d730a96be4187c4e"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-07-17T01:07:55.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/8233cdce4f3626125c7fa711c9fe61283c70d568"},"pipeline":{"id":25882496,"iid":2215,"project_id":6138686,"sha":"8233cdce4f3626125c7fa711c9fe61283c70d568","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-07-17T00:08:57.017Z","updated_at":"2018-07-17T02:10:57.021Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/25882496"},"web_url":"https://gitlab.com/coq/coq/-/jobs/82165430","artifacts":[{"file_type":"trace","size":3872819,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":"2018-07-24T02:04:00.992Z","tag_list":["windows"]}
{"id":82165429,"status":"success","stage":"test","name":"windows64","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-07-17T00:08:57.172Z","started_at":"2018-07-17T00:31:22.680Z","finished_at":"2018-07-17T02:04:53.475Z","duration":5610.794985,"queued_duration":0.519856,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"8233cdce4f3626125c7fa711c9fe61283c70d568","short_id":"8233cdce","created_at":"2018-07-17T01:07:55.000+01:00","parent_ids":["2b749b08eae4b05dc653cbc9d730a96be4187c4e"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-07-17T01:07:55.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/8233cdce4f3626125c7fa711c9fe61283c70d568"},"pipeline":{"id":25882496,"iid":2215,"project_id":6138686,"sha":"8233cdce4f3626125c7fa711c9fe61283c70d568","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-07-17T00:08:57.017Z","updated_at":"2018-07-17T02:10:57.021Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/25882496"},"web_url":"https://gitlab.com/coq/coq/-/jobs/82165429","artifacts":[{"file_type":"trace","size":3891353,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":"2018-07-24T02:04:24.803Z","tag_list":["windows"]}
{"id":82165428,"status":"success","stage":"build","name":"build:egde:dune","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-07-17T00:08:57.134Z","started_at":"2018-07-17T00:08:59.884Z","finished_at":"2018-07-17T00:23:02.895Z","duration":843.010879,"queued_duration":1.533102,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"8233cdce4f3626125c7fa711c9fe61283c70d568","short_id":"8233cdce","created_at":"2018-07-17T01:07:55.000+01:00","parent_ids":["2b749b08eae4b05dc653cbc9d730a96be4187c4e"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-07-17T01:07:55.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/8233cdce4f3626125c7fa711c9fe61283c70d568"},"pipeline":{"id":25882496,"iid":2215,"project_id":6138686,"sha":"8233cdce4f3626125c7fa711c9fe61283c70d568","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-07-17T00:08:57.017Z","updated_at":"2018-07-17T02:10:57.021Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/25882496"},"web_url":"https://gitlab.com/coq/coq/-/jobs/82165428","artifacts":[{"file_type":"trace","size":23176,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2018-07-24T00:22:58.419Z","tag_list":[]}
{"id":82165427,"status":"success","stage":"build","name":"build:edge+flambda","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-07-17T00:08:57.110Z","started_at":"2018-07-17T00:08:59.716Z","finished_at":"2018-07-17T00:31:18.851Z","duration":1339.134627,"queued_duration":1.309771,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"8233cdce4f3626125c7fa711c9fe61283c70d568","short_id":"8233cdce","created_at":"2018-07-17T01:07:55.000+01:00","parent_ids":["2b749b08eae4b05dc653cbc9d730a96be4187c4e"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-07-17T01:07:55.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/8233cdce4f3626125c7fa711c9fe61283c70d568"},"pipeline":{"id":25882496,"iid":2215,"project_id":6138686,"sha":"8233cdce4f3626125c7fa711c9fe61283c70d568","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-07-17T00:08:57.017Z","updated_at":"2018-07-17T02:10:57.021Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/25882496"},"web_url":"https://gitlab.com/coq/coq/-/jobs/82165427","artifacts":[{"file_type":"trace","size":181650,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2018-07-24T00:31:17.979Z","tag_list":[]}
{"id":82165426,"status":"success","stage":"build","name":"build:edge","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-07-17T00:08:57.084Z","started_at":"2018-07-17T00:08:59.599Z","finished_at":"2018-07-17T00:23:52.696Z","duration":893.096934,"queued_duration":1.149579,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"8233cdce4f3626125c7fa711c9fe61283c70d568","short_id":"8233cdce","created_at":"2018-07-17T01:07:55.000+01:00","parent_ids":["2b749b08eae4b05dc653cbc9d730a96be4187c4e"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-07-17T01:07:55.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/8233cdce4f3626125c7fa711c9fe61283c70d568"},"pipeline":{"id":25882496,"iid":2215,"project_id":6138686,"sha":"8233cdce4f3626125c7fa711c9fe61283c70d568","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-07-17T00:08:57.017Z","updated_at":"2018-07-17T02:10:57.021Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/25882496"},"web_url":"https://gitlab.com/coq/coq/-/jobs/82165426","artifacts":[{"file_type":"trace","size":236611,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2018-07-24T00:23:51.547Z","tag_list":[]}
{"id":82165425,"status":"success","stage":"build","name":"build:base+32bit","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-07-17T00:08:57.059Z","started_at":"2018-07-17T00:08:59.465Z","finished_at":"2018-07-17T00:22:39.830Z","duration":820.364816,"queued_duration":0.986684,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"8233cdce4f3626125c7fa711c9fe61283c70d568","short_id":"8233cdce","created_at":"2018-07-17T01:07:55.000+01:00","parent_ids":["2b749b08eae4b05dc653cbc9d730a96be4187c4e"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-07-17T01:07:55.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/8233cdce4f3626125c7fa711c9fe61283c70d568"},"pipeline":{"id":25882496,"iid":2215,"project_id":6138686,"sha":"8233cdce4f3626125c7fa711c9fe61283c70d568","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-07-17T00:08:57.017Z","updated_at":"2018-07-17T02:10:57.021Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/25882496"},"web_url":"https://gitlab.com/coq/coq/-/jobs/82165425","artifacts":[{"file_type":"trace","size":232461,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2018-07-24T00:22:38.003Z","tag_list":[]}
{"id":82165424,"status":"success","stage":"build","name":"build:base","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-07-17T00:08:57.031Z","started_at":"2018-07-17T00:08:59.261Z","finished_at":"2018-07-17T00:26:25.194Z","duration":1045.932687,"queued_duration":0.753872,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"8233cdce4f3626125c7fa711c9fe61283c70d568","short_id":"8233cdce","created_at":"2018-07-17T01:07:55.000+01:00","parent_ids":["2b749b08eae4b05dc653cbc9d730a96be4187c4e"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-07-17T01:07:55.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/8233cdce4f3626125c7fa711c9fe61283c70d568"},"pipeline":{"id":25882496,"iid":2215,"project_id":6138686,"sha":"8233cdce4f3626125c7fa711c9fe61283c70d568","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-07-17T00:08:57.017Z","updated_at":"2018-07-17T02:10:57.021Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/25882496"},"web_url":"https://gitlab.com/coq/coq/-/jobs/82165424","artifacts":[{"file_type":"trace","size":283712,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2018-07-24T00:26:23.893Z","tag_list":[]}
