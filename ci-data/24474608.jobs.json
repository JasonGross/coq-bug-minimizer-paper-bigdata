{"id":77080743,"status":"skipped","stage":"test","name":"ci-vst","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-25T04:08:33.531Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"3b0b156969fcceef787f98d11230f2a5902d76ea","short_id":"3b0b1569","created_at":"2018-06-25T00:07:59.000-04:00","parent_ids":["add98bb695b2d84385490e379e7ec8185ab1ac24"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-06-25T00:07:59.000-04:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/3b0b156969fcceef787f98d11230f2a5902d76ea"},"pipeline":{"id":24474608,"iid":1660,"project_id":6138686,"sha":"3b0b156969fcceef787f98d11230f2a5902d76ea","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-06-25T04:08:32.368Z","updated_at":"2018-06-25T04:36:00.825Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24474608"},"web_url":"https://gitlab.com/coq/coq/-/jobs/77080743","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":77080742,"status":"skipped","stage":"test","name":"ci-unimath","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-25T04:08:33.507Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"3b0b156969fcceef787f98d11230f2a5902d76ea","short_id":"3b0b1569","created_at":"2018-06-25T00:07:59.000-04:00","parent_ids":["add98bb695b2d84385490e379e7ec8185ab1ac24"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-06-25T00:07:59.000-04:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/3b0b156969fcceef787f98d11230f2a5902d76ea"},"pipeline":{"id":24474608,"iid":1660,"project_id":6138686,"sha":"3b0b156969fcceef787f98d11230f2a5902d76ea","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-06-25T04:08:32.368Z","updated_at":"2018-06-25T04:36:00.825Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24474608"},"web_url":"https://gitlab.com/coq/coq/-/jobs/77080742","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":77080741,"status":"skipped","stage":"test","name":"ci-sf","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-25T04:08:33.480Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"3b0b156969fcceef787f98d11230f2a5902d76ea","short_id":"3b0b1569","created_at":"2018-06-25T00:07:59.000-04:00","parent_ids":["add98bb695b2d84385490e379e7ec8185ab1ac24"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-06-25T00:07:59.000-04:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/3b0b156969fcceef787f98d11230f2a5902d76ea"},"pipeline":{"id":24474608,"iid":1660,"project_id":6138686,"sha":"3b0b156969fcceef787f98d11230f2a5902d76ea","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-06-25T04:08:32.368Z","updated_at":"2018-06-25T04:36:00.825Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24474608"},"web_url":"https://gitlab.com/coq/coq/-/jobs/77080741","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":77080740,"status":"skipped","stage":"test","name":"ci-quickchick","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-25T04:08:33.454Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"3b0b156969fcceef787f98d11230f2a5902d76ea","short_id":"3b0b1569","created_at":"2018-06-25T00:07:59.000-04:00","parent_ids":["add98bb695b2d84385490e379e7ec8185ab1ac24"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-06-25T00:07:59.000-04:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/3b0b156969fcceef787f98d11230f2a5902d76ea"},"pipeline":{"id":24474608,"iid":1660,"project_id":6138686,"sha":"3b0b156969fcceef787f98d11230f2a5902d76ea","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-06-25T04:08:32.368Z","updated_at":"2018-06-25T04:36:00.825Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24474608"},"web_url":"https://gitlab.com/coq/coq/-/jobs/77080740","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":77080739,"status":"skipped","stage":"test","name":"ci-pidetop","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-25T04:08:33.431Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"3b0b156969fcceef787f98d11230f2a5902d76ea","short_id":"3b0b1569","created_at":"2018-06-25T00:07:59.000-04:00","parent_ids":["add98bb695b2d84385490e379e7ec8185ab1ac24"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-06-25T00:07:59.000-04:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/3b0b156969fcceef787f98d11230f2a5902d76ea"},"pipeline":{"id":24474608,"iid":1660,"project_id":6138686,"sha":"3b0b156969fcceef787f98d11230f2a5902d76ea","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-06-25T04:08:32.368Z","updated_at":"2018-06-25T04:36:00.825Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24474608"},"web_url":"https://gitlab.com/coq/coq/-/jobs/77080739","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":77080738,"status":"skipped","stage":"test","name":"ci-mtac2","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-25T04:08:33.407Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"3b0b156969fcceef787f98d11230f2a5902d76ea","short_id":"3b0b1569","created_at":"2018-06-25T00:07:59.000-04:00","parent_ids":["add98bb695b2d84385490e379e7ec8185ab1ac24"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-06-25T00:07:59.000-04:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/3b0b156969fcceef787f98d11230f2a5902d76ea"},"pipeline":{"id":24474608,"iid":1660,"project_id":6138686,"sha":"3b0b156969fcceef787f98d11230f2a5902d76ea","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-06-25T04:08:32.368Z","updated_at":"2018-06-25T04:36:00.825Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24474608"},"web_url":"https://gitlab.com/coq/coq/-/jobs/77080738","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":77080737,"status":"skipped","stage":"test","name":"ci-math-comp","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-25T04:08:33.382Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"3b0b156969fcceef787f98d11230f2a5902d76ea","short_id":"3b0b1569","created_at":"2018-06-25T00:07:59.000-04:00","parent_ids":["add98bb695b2d84385490e379e7ec8185ab1ac24"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-06-25T00:07:59.000-04:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/3b0b156969fcceef787f98d11230f2a5902d76ea"},"pipeline":{"id":24474608,"iid":1660,"project_id":6138686,"sha":"3b0b156969fcceef787f98d11230f2a5902d76ea","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-06-25T04:08:32.368Z","updated_at":"2018-06-25T04:36:00.825Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24474608"},"web_url":"https://gitlab.com/coq/coq/-/jobs/77080737","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":77080736,"status":"skipped","stage":"test","name":"ci-ltac2","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-25T04:08:33.358Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"3b0b156969fcceef787f98d11230f2a5902d76ea","short_id":"3b0b1569","created_at":"2018-06-25T00:07:59.000-04:00","parent_ids":["add98bb695b2d84385490e379e7ec8185ab1ac24"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-06-25T00:07:59.000-04:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/3b0b156969fcceef787f98d11230f2a5902d76ea"},"pipeline":{"id":24474608,"iid":1660,"project_id":6138686,"sha":"3b0b156969fcceef787f98d11230f2a5902d76ea","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-06-25T04:08:32.368Z","updated_at":"2018-06-25T04:36:00.825Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24474608"},"web_url":"https://gitlab.com/coq/coq/-/jobs/77080736","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":77080735,"status":"skipped","stage":"test","name":"ci-iris-lambda-rust","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-25T04:08:33.334Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"3b0b156969fcceef787f98d11230f2a5902d76ea","short_id":"3b0b1569","created_at":"2018-06-25T00:07:59.000-04:00","parent_ids":["add98bb695b2d84385490e379e7ec8185ab1ac24"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-06-25T00:07:59.000-04:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/3b0b156969fcceef787f98d11230f2a5902d76ea"},"pipeline":{"id":24474608,"iid":1660,"project_id":6138686,"sha":"3b0b156969fcceef787f98d11230f2a5902d76ea","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-06-25T04:08:32.368Z","updated_at":"2018-06-25T04:36:00.825Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24474608"},"web_url":"https://gitlab.com/coq/coq/-/jobs/77080735","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":77080734,"status":"skipped","stage":"test","name":"ci-hott","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-25T04:08:33.311Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"3b0b156969fcceef787f98d11230f2a5902d76ea","short_id":"3b0b1569","created_at":"2018-06-25T00:07:59.000-04:00","parent_ids":["add98bb695b2d84385490e379e7ec8185ab1ac24"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-06-25T00:07:59.000-04:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/3b0b156969fcceef787f98d11230f2a5902d76ea"},"pipeline":{"id":24474608,"iid":1660,"project_id":6138686,"sha":"3b0b156969fcceef787f98d11230f2a5902d76ea","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-06-25T04:08:32.368Z","updated_at":"2018-06-25T04:36:00.825Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24474608"},"web_url":"https://gitlab.com/coq/coq/-/jobs/77080734","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":77080733,"status":"skipped","stage":"test","name":"ci-geocoq","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-25T04:08:33.286Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"3b0b156969fcceef787f98d11230f2a5902d76ea","short_id":"3b0b1569","created_at":"2018-06-25T00:07:59.000-04:00","parent_ids":["add98bb695b2d84385490e379e7ec8185ab1ac24"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-06-25T00:07:59.000-04:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/3b0b156969fcceef787f98d11230f2a5902d76ea"},"pipeline":{"id":24474608,"iid":1660,"project_id":6138686,"sha":"3b0b156969fcceef787f98d11230f2a5902d76ea","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-06-25T04:08:32.368Z","updated_at":"2018-06-25T04:36:00.825Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24474608"},"web_url":"https://gitlab.com/coq/coq/-/jobs/77080733","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":77080732,"status":"skipped","stage":"test","name":"ci-formal-topology","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-25T04:08:33.262Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"3b0b156969fcceef787f98d11230f2a5902d76ea","short_id":"3b0b1569","created_at":"2018-06-25T00:07:59.000-04:00","parent_ids":["add98bb695b2d84385490e379e7ec8185ab1ac24"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-06-25T00:07:59.000-04:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/3b0b156969fcceef787f98d11230f2a5902d76ea"},"pipeline":{"id":24474608,"iid":1660,"project_id":6138686,"sha":"3b0b156969fcceef787f98d11230f2a5902d76ea","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-06-25T04:08:32.368Z","updated_at":"2018-06-25T04:36:00.825Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24474608"},"web_url":"https://gitlab.com/coq/coq/-/jobs/77080732","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":77080731,"status":"skipped","stage":"test","name":"ci-flocq","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-25T04:08:33.238Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"3b0b156969fcceef787f98d11230f2a5902d76ea","short_id":"3b0b1569","created_at":"2018-06-25T00:07:59.000-04:00","parent_ids":["add98bb695b2d84385490e379e7ec8185ab1ac24"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-06-25T00:07:59.000-04:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/3b0b156969fcceef787f98d11230f2a5902d76ea"},"pipeline":{"id":24474608,"iid":1660,"project_id":6138686,"sha":"3b0b156969fcceef787f98d11230f2a5902d76ea","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-06-25T04:08:32.368Z","updated_at":"2018-06-25T04:36:00.825Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24474608"},"web_url":"https://gitlab.com/coq/coq/-/jobs/77080731","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":77080730,"status":"skipped","stage":"test","name":"ci-fiat-parsers","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-25T04:08:33.213Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"3b0b156969fcceef787f98d11230f2a5902d76ea","short_id":"3b0b1569","created_at":"2018-06-25T00:07:59.000-04:00","parent_ids":["add98bb695b2d84385490e379e7ec8185ab1ac24"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-06-25T00:07:59.000-04:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/3b0b156969fcceef787f98d11230f2a5902d76ea"},"pipeline":{"id":24474608,"iid":1660,"project_id":6138686,"sha":"3b0b156969fcceef787f98d11230f2a5902d76ea","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-06-25T04:08:32.368Z","updated_at":"2018-06-25T04:36:00.825Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24474608"},"web_url":"https://gitlab.com/coq/coq/-/jobs/77080730","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":77080729,"status":"skipped","stage":"test","name":"ci-fiat-crypto","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-25T04:08:33.190Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"3b0b156969fcceef787f98d11230f2a5902d76ea","short_id":"3b0b1569","created_at":"2018-06-25T00:07:59.000-04:00","parent_ids":["add98bb695b2d84385490e379e7ec8185ab1ac24"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-06-25T00:07:59.000-04:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/3b0b156969fcceef787f98d11230f2a5902d76ea"},"pipeline":{"id":24474608,"iid":1660,"project_id":6138686,"sha":"3b0b156969fcceef787f98d11230f2a5902d76ea","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-06-25T04:08:32.368Z","updated_at":"2018-06-25T04:36:00.825Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24474608"},"web_url":"https://gitlab.com/coq/coq/-/jobs/77080729","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":77080728,"status":"skipped","stage":"test","name":"ci-fcsl-pcm","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-25T04:08:33.167Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"3b0b156969fcceef787f98d11230f2a5902d76ea","short_id":"3b0b1569","created_at":"2018-06-25T00:07:59.000-04:00","parent_ids":["add98bb695b2d84385490e379e7ec8185ab1ac24"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-06-25T00:07:59.000-04:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/3b0b156969fcceef787f98d11230f2a5902d76ea"},"pipeline":{"id":24474608,"iid":1660,"project_id":6138686,"sha":"3b0b156969fcceef787f98d11230f2a5902d76ea","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-06-25T04:08:32.368Z","updated_at":"2018-06-25T04:36:00.825Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24474608"},"web_url":"https://gitlab.com/coq/coq/-/jobs/77080728","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":77080727,"status":"skipped","stage":"test","name":"ci-equations","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-25T04:08:33.144Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"3b0b156969fcceef787f98d11230f2a5902d76ea","short_id":"3b0b1569","created_at":"2018-06-25T00:07:59.000-04:00","parent_ids":["add98bb695b2d84385490e379e7ec8185ab1ac24"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-06-25T00:07:59.000-04:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/3b0b156969fcceef787f98d11230f2a5902d76ea"},"pipeline":{"id":24474608,"iid":1660,"project_id":6138686,"sha":"3b0b156969fcceef787f98d11230f2a5902d76ea","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-06-25T04:08:32.368Z","updated_at":"2018-06-25T04:36:00.825Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24474608"},"web_url":"https://gitlab.com/coq/coq/-/jobs/77080727","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":77080726,"status":"skipped","stage":"test","name":"ci-elpi","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-25T04:08:33.118Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"3b0b156969fcceef787f98d11230f2a5902d76ea","short_id":"3b0b1569","created_at":"2018-06-25T00:07:59.000-04:00","parent_ids":["add98bb695b2d84385490e379e7ec8185ab1ac24"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-06-25T00:07:59.000-04:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/3b0b156969fcceef787f98d11230f2a5902d76ea"},"pipeline":{"id":24474608,"iid":1660,"project_id":6138686,"sha":"3b0b156969fcceef787f98d11230f2a5902d76ea","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-06-25T04:08:32.368Z","updated_at":"2018-06-25T04:36:00.825Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24474608"},"web_url":"https://gitlab.com/coq/coq/-/jobs/77080726","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":77080725,"status":"skipped","stage":"test","name":"ci-cross-crypto","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-25T04:08:33.093Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"3b0b156969fcceef787f98d11230f2a5902d76ea","short_id":"3b0b1569","created_at":"2018-06-25T00:07:59.000-04:00","parent_ids":["add98bb695b2d84385490e379e7ec8185ab1ac24"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-06-25T00:07:59.000-04:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/3b0b156969fcceef787f98d11230f2a5902d76ea"},"pipeline":{"id":24474608,"iid":1660,"project_id":6138686,"sha":"3b0b156969fcceef787f98d11230f2a5902d76ea","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-06-25T04:08:32.368Z","updated_at":"2018-06-25T04:36:00.825Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24474608"},"web_url":"https://gitlab.com/coq/coq/-/jobs/77080725","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":77080724,"status":"skipped","stage":"test","name":"ci-coquelicot","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-25T04:08:33.066Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"3b0b156969fcceef787f98d11230f2a5902d76ea","short_id":"3b0b1569","created_at":"2018-06-25T00:07:59.000-04:00","parent_ids":["add98bb695b2d84385490e379e7ec8185ab1ac24"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-06-25T00:07:59.000-04:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/3b0b156969fcceef787f98d11230f2a5902d76ea"},"pipeline":{"id":24474608,"iid":1660,"project_id":6138686,"sha":"3b0b156969fcceef787f98d11230f2a5902d76ea","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-06-25T04:08:32.368Z","updated_at":"2018-06-25T04:36:00.825Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24474608"},"web_url":"https://gitlab.com/coq/coq/-/jobs/77080724","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":77080723,"status":"skipped","stage":"test","name":"ci-coq-dpdgraph","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-25T04:08:33.041Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"3b0b156969fcceef787f98d11230f2a5902d76ea","short_id":"3b0b1569","created_at":"2018-06-25T00:07:59.000-04:00","parent_ids":["add98bb695b2d84385490e379e7ec8185ab1ac24"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-06-25T00:07:59.000-04:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/3b0b156969fcceef787f98d11230f2a5902d76ea"},"pipeline":{"id":24474608,"iid":1660,"project_id":6138686,"sha":"3b0b156969fcceef787f98d11230f2a5902d76ea","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-06-25T04:08:32.368Z","updated_at":"2018-06-25T04:36:00.825Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24474608"},"web_url":"https://gitlab.com/coq/coq/-/jobs/77080723","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":77080722,"status":"skipped","stage":"test","name":"ci-compcert","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-25T04:08:33.018Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"3b0b156969fcceef787f98d11230f2a5902d76ea","short_id":"3b0b1569","created_at":"2018-06-25T00:07:59.000-04:00","parent_ids":["add98bb695b2d84385490e379e7ec8185ab1ac24"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-06-25T00:07:59.000-04:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/3b0b156969fcceef787f98d11230f2a5902d76ea"},"pipeline":{"id":24474608,"iid":1660,"project_id":6138686,"sha":"3b0b156969fcceef787f98d11230f2a5902d76ea","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-06-25T04:08:32.368Z","updated_at":"2018-06-25T04:36:00.825Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24474608"},"web_url":"https://gitlab.com/coq/coq/-/jobs/77080722","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":77080721,"status":"skipped","stage":"test","name":"ci-color","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-25T04:08:32.991Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"3b0b156969fcceef787f98d11230f2a5902d76ea","short_id":"3b0b1569","created_at":"2018-06-25T00:07:59.000-04:00","parent_ids":["add98bb695b2d84385490e379e7ec8185ab1ac24"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-06-25T00:07:59.000-04:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/3b0b156969fcceef787f98d11230f2a5902d76ea"},"pipeline":{"id":24474608,"iid":1660,"project_id":6138686,"sha":"3b0b156969fcceef787f98d11230f2a5902d76ea","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-06-25T04:08:32.368Z","updated_at":"2018-06-25T04:36:00.825Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24474608"},"web_url":"https://gitlab.com/coq/coq/-/jobs/77080721","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":77080720,"status":"skipped","stage":"test","name":"ci-bignums","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-25T04:08:32.967Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"3b0b156969fcceef787f98d11230f2a5902d76ea","short_id":"3b0b1569","created_at":"2018-06-25T00:07:59.000-04:00","parent_ids":["add98bb695b2d84385490e379e7ec8185ab1ac24"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-06-25T00:07:59.000-04:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/3b0b156969fcceef787f98d11230f2a5902d76ea"},"pipeline":{"id":24474608,"iid":1660,"project_id":6138686,"sha":"3b0b156969fcceef787f98d11230f2a5902d76ea","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-06-25T04:08:32.368Z","updated_at":"2018-06-25T04:36:00.825Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24474608"},"web_url":"https://gitlab.com/coq/coq/-/jobs/77080720","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":77080719,"status":"skipped","stage":"test","name":"validate:edge+flambda","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-25T04:08:32.943Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"3b0b156969fcceef787f98d11230f2a5902d76ea","short_id":"3b0b1569","created_at":"2018-06-25T00:07:59.000-04:00","parent_ids":["add98bb695b2d84385490e379e7ec8185ab1ac24"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-06-25T00:07:59.000-04:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/3b0b156969fcceef787f98d11230f2a5902d76ea"},"pipeline":{"id":24474608,"iid":1660,"project_id":6138686,"sha":"3b0b156969fcceef787f98d11230f2a5902d76ea","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-06-25T04:08:32.368Z","updated_at":"2018-06-25T04:36:00.825Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24474608"},"web_url":"https://gitlab.com/coq/coq/-/jobs/77080719","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":77080718,"status":"skipped","stage":"test","name":"validate:edge","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-25T04:08:32.838Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"3b0b156969fcceef787f98d11230f2a5902d76ea","short_id":"3b0b1569","created_at":"2018-06-25T00:07:59.000-04:00","parent_ids":["add98bb695b2d84385490e379e7ec8185ab1ac24"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-06-25T00:07:59.000-04:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/3b0b156969fcceef787f98d11230f2a5902d76ea"},"pipeline":{"id":24474608,"iid":1660,"project_id":6138686,"sha":"3b0b156969fcceef787f98d11230f2a5902d76ea","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-06-25T04:08:32.368Z","updated_at":"2018-06-25T04:36:00.825Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24474608"},"web_url":"https://gitlab.com/coq/coq/-/jobs/77080718","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":77080717,"status":"skipped","stage":"test","name":"validate:base+32bit","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-25T04:08:32.815Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"3b0b156969fcceef787f98d11230f2a5902d76ea","short_id":"3b0b1569","created_at":"2018-06-25T00:07:59.000-04:00","parent_ids":["add98bb695b2d84385490e379e7ec8185ab1ac24"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-06-25T00:07:59.000-04:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/3b0b156969fcceef787f98d11230f2a5902d76ea"},"pipeline":{"id":24474608,"iid":1660,"project_id":6138686,"sha":"3b0b156969fcceef787f98d11230f2a5902d76ea","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-06-25T04:08:32.368Z","updated_at":"2018-06-25T04:36:00.825Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24474608"},"web_url":"https://gitlab.com/coq/coq/-/jobs/77080717","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":77080716,"status":"skipped","stage":"test","name":"validate:base","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-25T04:08:32.786Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"3b0b156969fcceef787f98d11230f2a5902d76ea","short_id":"3b0b1569","created_at":"2018-06-25T00:07:59.000-04:00","parent_ids":["add98bb695b2d84385490e379e7ec8185ab1ac24"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-06-25T00:07:59.000-04:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/3b0b156969fcceef787f98d11230f2a5902d76ea"},"pipeline":{"id":24474608,"iid":1660,"project_id":6138686,"sha":"3b0b156969fcceef787f98d11230f2a5902d76ea","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-06-25T04:08:32.368Z","updated_at":"2018-06-25T04:36:00.825Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24474608"},"web_url":"https://gitlab.com/coq/coq/-/jobs/77080716","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":77080715,"status":"skipped","stage":"test","name":"test-suite:edge+flambda","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-25T04:08:32.761Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"3b0b156969fcceef787f98d11230f2a5902d76ea","short_id":"3b0b1569","created_at":"2018-06-25T00:07:59.000-04:00","parent_ids":["add98bb695b2d84385490e379e7ec8185ab1ac24"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-06-25T00:07:59.000-04:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/3b0b156969fcceef787f98d11230f2a5902d76ea"},"pipeline":{"id":24474608,"iid":1660,"project_id":6138686,"sha":"3b0b156969fcceef787f98d11230f2a5902d76ea","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-06-25T04:08:32.368Z","updated_at":"2018-06-25T04:36:00.825Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24474608"},"web_url":"https://gitlab.com/coq/coq/-/jobs/77080715","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":77080714,"status":"skipped","stage":"test","name":"test-suite:edge","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-25T04:08:32.738Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"3b0b156969fcceef787f98d11230f2a5902d76ea","short_id":"3b0b1569","created_at":"2018-06-25T00:07:59.000-04:00","parent_ids":["add98bb695b2d84385490e379e7ec8185ab1ac24"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-06-25T00:07:59.000-04:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/3b0b156969fcceef787f98d11230f2a5902d76ea"},"pipeline":{"id":24474608,"iid":1660,"project_id":6138686,"sha":"3b0b156969fcceef787f98d11230f2a5902d76ea","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-06-25T04:08:32.368Z","updated_at":"2018-06-25T04:36:00.825Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24474608"},"web_url":"https://gitlab.com/coq/coq/-/jobs/77080714","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":77080713,"status":"skipped","stage":"test","name":"test-suite:base+32bit","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-25T04:08:32.714Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"3b0b156969fcceef787f98d11230f2a5902d76ea","short_id":"3b0b1569","created_at":"2018-06-25T00:07:59.000-04:00","parent_ids":["add98bb695b2d84385490e379e7ec8185ab1ac24"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-06-25T00:07:59.000-04:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/3b0b156969fcceef787f98d11230f2a5902d76ea"},"pipeline":{"id":24474608,"iid":1660,"project_id":6138686,"sha":"3b0b156969fcceef787f98d11230f2a5902d76ea","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-06-25T04:08:32.368Z","updated_at":"2018-06-25T04:36:00.825Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24474608"},"web_url":"https://gitlab.com/coq/coq/-/jobs/77080713","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":77080712,"status":"skipped","stage":"test","name":"test-suite:base","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-25T04:08:32.692Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"3b0b156969fcceef787f98d11230f2a5902d76ea","short_id":"3b0b1569","created_at":"2018-06-25T00:07:59.000-04:00","parent_ids":["add98bb695b2d84385490e379e7ec8185ab1ac24"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-06-25T00:07:59.000-04:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/3b0b156969fcceef787f98d11230f2a5902d76ea"},"pipeline":{"id":24474608,"iid":1660,"project_id":6138686,"sha":"3b0b156969fcceef787f98d11230f2a5902d76ea","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-06-25T04:08:32.368Z","updated_at":"2018-06-25T04:36:00.825Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24474608"},"web_url":"https://gitlab.com/coq/coq/-/jobs/77080712","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":77080711,"status":"skipped","stage":"test","name":"documentation","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-25T04:08:32.670Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"3b0b156969fcceef787f98d11230f2a5902d76ea","short_id":"3b0b1569","created_at":"2018-06-25T00:07:59.000-04:00","parent_ids":["add98bb695b2d84385490e379e7ec8185ab1ac24"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-06-25T00:07:59.000-04:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/3b0b156969fcceef787f98d11230f2a5902d76ea"},"pipeline":{"id":24474608,"iid":1660,"project_id":6138686,"sha":"3b0b156969fcceef787f98d11230f2a5902d76ea","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-06-25T04:08:32.368Z","updated_at":"2018-06-25T04:36:00.825Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24474608"},"web_url":"https://gitlab.com/coq/coq/-/jobs/77080711","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":77080710,"status":"skipped","stage":"test","name":"warnings:edge","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-25T04:08:32.649Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"3b0b156969fcceef787f98d11230f2a5902d76ea","short_id":"3b0b1569","created_at":"2018-06-25T00:07:59.000-04:00","parent_ids":["add98bb695b2d84385490e379e7ec8185ab1ac24"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-06-25T00:07:59.000-04:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/3b0b156969fcceef787f98d11230f2a5902d76ea"},"pipeline":{"id":24474608,"iid":1660,"project_id":6138686,"sha":"3b0b156969fcceef787f98d11230f2a5902d76ea","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-06-25T04:08:32.368Z","updated_at":"2018-06-25T04:36:00.825Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24474608"},"web_url":"https://gitlab.com/coq/coq/-/jobs/77080710","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":77080709,"status":"skipped","stage":"test","name":"warnings:base","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-25T04:08:32.624Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"3b0b156969fcceef787f98d11230f2a5902d76ea","short_id":"3b0b1569","created_at":"2018-06-25T00:07:59.000-04:00","parent_ids":["add98bb695b2d84385490e379e7ec8185ab1ac24"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-06-25T00:07:59.000-04:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/3b0b156969fcceef787f98d11230f2a5902d76ea"},"pipeline":{"id":24474608,"iid":1660,"project_id":6138686,"sha":"3b0b156969fcceef787f98d11230f2a5902d76ea","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-06-25T04:08:32.368Z","updated_at":"2018-06-25T04:36:00.825Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24474608"},"web_url":"https://gitlab.com/coq/coq/-/jobs/77080709","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":77080708,"status":"skipped","stage":"test","name":"windows32","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-25T04:08:32.588Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"3b0b156969fcceef787f98d11230f2a5902d76ea","short_id":"3b0b1569","created_at":"2018-06-25T00:07:59.000-04:00","parent_ids":["add98bb695b2d84385490e379e7ec8185ab1ac24"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-06-25T00:07:59.000-04:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/3b0b156969fcceef787f98d11230f2a5902d76ea"},"pipeline":{"id":24474608,"iid":1660,"project_id":6138686,"sha":"3b0b156969fcceef787f98d11230f2a5902d76ea","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-06-25T04:08:32.368Z","updated_at":"2018-06-25T04:36:00.825Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24474608"},"web_url":"https://gitlab.com/coq/coq/-/jobs/77080708","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":["windows"]}
{"id":77080707,"status":"skipped","stage":"test","name":"windows64","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-25T04:08:32.553Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"3b0b156969fcceef787f98d11230f2a5902d76ea","short_id":"3b0b1569","created_at":"2018-06-25T00:07:59.000-04:00","parent_ids":["add98bb695b2d84385490e379e7ec8185ab1ac24"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-06-25T00:07:59.000-04:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/3b0b156969fcceef787f98d11230f2a5902d76ea"},"pipeline":{"id":24474608,"iid":1660,"project_id":6138686,"sha":"3b0b156969fcceef787f98d11230f2a5902d76ea","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-06-25T04:08:32.368Z","updated_at":"2018-06-25T04:36:00.825Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24474608"},"web_url":"https://gitlab.com/coq/coq/-/jobs/77080707","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":["windows"]}
{"id":77080706,"status":"failed","stage":"build","name":"build:egde:dune","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-25T04:08:32.517Z","started_at":"2018-06-25T04:08:37.134Z","finished_at":"2018-06-25T04:13:43.272Z","duration":306.138785,"queued_duration":3.408329,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"3b0b156969fcceef787f98d11230f2a5902d76ea","short_id":"3b0b1569","created_at":"2018-06-25T00:07:59.000-04:00","parent_ids":["add98bb695b2d84385490e379e7ec8185ab1ac24"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-06-25T00:07:59.000-04:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/3b0b156969fcceef787f98d11230f2a5902d76ea"},"pipeline":{"id":24474608,"iid":1660,"project_id":6138686,"sha":"3b0b156969fcceef787f98d11230f2a5902d76ea","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-06-25T04:08:32.368Z","updated_at":"2018-06-25T04:36:00.825Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24474608"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/77080706","artifacts":[{"file_type":"trace","size":31489,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":77080705,"status":"success","stage":"build","name":"build:edge+flambda","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-25T04:08:32.488Z","started_at":"2018-06-25T04:08:35.611Z","finished_at":"2018-06-25T04:35:59.423Z","duration":1643.811728,"queued_duration":1.845078,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"3b0b156969fcceef787f98d11230f2a5902d76ea","short_id":"3b0b1569","created_at":"2018-06-25T00:07:59.000-04:00","parent_ids":["add98bb695b2d84385490e379e7ec8185ab1ac24"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-06-25T00:07:59.000-04:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/3b0b156969fcceef787f98d11230f2a5902d76ea"},"pipeline":{"id":24474608,"iid":1660,"project_id":6138686,"sha":"3b0b156969fcceef787f98d11230f2a5902d76ea","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-06-25T04:08:32.368Z","updated_at":"2018-06-25T04:36:00.825Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24474608"},"web_url":"https://gitlab.com/coq/coq/-/jobs/77080705","artifacts":[{"file_type":"trace","size":182266,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2018-07-02T04:35:57.940Z","tag_list":[]}
{"id":77080704,"status":"success","stage":"build","name":"build:edge","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-25T04:08:32.450Z","started_at":"2018-06-25T04:08:35.194Z","finished_at":"2018-06-25T04:22:52.215Z","duration":857.021238,"queued_duration":1.38787,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"3b0b156969fcceef787f98d11230f2a5902d76ea","short_id":"3b0b1569","created_at":"2018-06-25T00:07:59.000-04:00","parent_ids":["add98bb695b2d84385490e379e7ec8185ab1ac24"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-06-25T00:07:59.000-04:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/3b0b156969fcceef787f98d11230f2a5902d76ea"},"pipeline":{"id":24474608,"iid":1660,"project_id":6138686,"sha":"3b0b156969fcceef787f98d11230f2a5902d76ea","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-06-25T04:08:32.368Z","updated_at":"2018-06-25T04:36:00.825Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24474608"},"web_url":"https://gitlab.com/coq/coq/-/jobs/77080704","artifacts":[{"file_type":"trace","size":234959,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2018-07-02T04:22:50.726Z","tag_list":[]}
{"id":77080703,"status":"success","stage":"build","name":"build:base+32bit","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-25T04:08:32.413Z","started_at":"2018-06-25T04:08:35.091Z","finished_at":"2018-06-25T04:22:45.188Z","duration":850.097208,"queued_duration":1.243971,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"3b0b156969fcceef787f98d11230f2a5902d76ea","short_id":"3b0b1569","created_at":"2018-06-25T00:07:59.000-04:00","parent_ids":["add98bb695b2d84385490e379e7ec8185ab1ac24"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-06-25T00:07:59.000-04:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/3b0b156969fcceef787f98d11230f2a5902d76ea"},"pipeline":{"id":24474608,"iid":1660,"project_id":6138686,"sha":"3b0b156969fcceef787f98d11230f2a5902d76ea","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-06-25T04:08:32.368Z","updated_at":"2018-06-25T04:36:00.825Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24474608"},"web_url":"https://gitlab.com/coq/coq/-/jobs/77080703","artifacts":[{"file_type":"trace","size":230745,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2018-07-02T04:22:42.058Z","tag_list":[]}
{"id":77080702,"status":"success","stage":"build","name":"build:base","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-25T04:08:32.384Z","started_at":"2018-06-25T04:08:34.992Z","finished_at":"2018-06-25T04:24:32.444Z","duration":957.45113,"queued_duration":1.094962,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"3b0b156969fcceef787f98d11230f2a5902d76ea","short_id":"3b0b1569","created_at":"2018-06-25T00:07:59.000-04:00","parent_ids":["add98bb695b2d84385490e379e7ec8185ab1ac24"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-06-25T00:07:59.000-04:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/3b0b156969fcceef787f98d11230f2a5902d76ea"},"pipeline":{"id":24474608,"iid":1660,"project_id":6138686,"sha":"3b0b156969fcceef787f98d11230f2a5902d76ea","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-06-25T04:08:32.368Z","updated_at":"2018-06-25T04:36:00.825Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24474608"},"web_url":"https://gitlab.com/coq/coq/-/jobs/77080702","artifacts":[{"file_type":"trace","size":281870,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2018-07-02T04:24:27.928Z","tag_list":[]}
