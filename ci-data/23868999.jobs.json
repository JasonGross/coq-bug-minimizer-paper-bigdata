{"id":74972535,"status":"success","stage":"build","name":"build:edge+flambda","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-14T17:00:54.625Z","started_at":"2018-06-14T17:00:55.625Z","finished_at":"2018-06-14T17:33:08.467Z","duration":1932.842653,"queued_duration":0.859043,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"e2bac56067153197b053fbda4c5fb0286c6d81b0","short_id":"e2bac560","created_at":"2018-06-14T16:29:50.000+02:00","parent_ids":["03ec20de0fce9a98c088919656637d9bfac83411"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-06-14T16:29:50.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/e2bac56067153197b053fbda4c5fb0286c6d81b0"},"pipeline":{"id":23868999,"iid":1393,"project_id":6138686,"sha":"e2bac56067153197b053fbda4c5fb0286c6d81b0","ref":"pr-6857","status":"success","source":"push","created_at":"2018-06-14T14:33:51.689Z","updated_at":"2018-06-14T19:00:14.436Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/23868999"},"web_url":"https://gitlab.com/coq/coq/-/jobs/74972535","artifacts":[{"file_type":"trace","size":182360,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2018-06-21T17:33:07.473Z","tag_list":[]}
{"id":74970404,"status":"success","stage":"build","name":"build:egde:dune","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-14T16:50:28.151Z","started_at":"2018-06-14T16:50:36.608Z","finished_at":"2018-06-14T17:10:08.719Z","duration":1172.11156,"queued_duration":8.41305,"user":{"id":400418,"username":"ejgallego","name":"Emilio Jesús Gallego Arias","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/400418/avatar.png","web_url":"https://gitlab.com/ejgallego","created_at":"2016-02-07T00:36:59.511Z","bio":"“La perfection est atteinte, non pas lorsqu'il n'y a plus rien à ajouter, mais lorsqu'il n'y a plus rien à retirer.”","location":"","public_email":"e@x80.org","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"e2bac56067153197b053fbda4c5fb0286c6d81b0","short_id":"e2bac560","created_at":"2018-06-14T16:29:50.000+02:00","parent_ids":["03ec20de0fce9a98c088919656637d9bfac83411"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-06-14T16:29:50.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/e2bac56067153197b053fbda4c5fb0286c6d81b0"},"pipeline":{"id":23868999,"iid":1393,"project_id":6138686,"sha":"e2bac56067153197b053fbda4c5fb0286c6d81b0","ref":"pr-6857","status":"success","source":"push","created_at":"2018-06-14T14:33:51.689Z","updated_at":"2018-06-14T19:00:14.436Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/23868999"},"web_url":"https://gitlab.com/coq/coq/-/jobs/74970404","artifacts":[{"file_type":"trace","size":112875,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2018-06-21T17:10:07.858Z","tag_list":[]}
{"id":74935391,"status":"success","stage":"build","name":"build:edge","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-14T15:11:08.580Z","started_at":"2018-06-14T15:22:23.554Z","finished_at":"2018-06-14T15:51:52.293Z","duration":1768.739168,"queued_duration":674.934362,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"e2bac56067153197b053fbda4c5fb0286c6d81b0","short_id":"e2bac560","created_at":"2018-06-14T16:29:50.000+02:00","parent_ids":["03ec20de0fce9a98c088919656637d9bfac83411"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-06-14T16:29:50.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/e2bac56067153197b053fbda4c5fb0286c6d81b0"},"pipeline":{"id":23868999,"iid":1393,"project_id":6138686,"sha":"e2bac56067153197b053fbda4c5fb0286c6d81b0","ref":"pr-6857","status":"success","source":"push","created_at":"2018-06-14T14:33:51.689Z","updated_at":"2018-06-14T19:00:14.436Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/23868999"},"web_url":"https://gitlab.com/coq/coq/-/jobs/74935391","artifacts":[{"file_type":"trace","size":236065,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2018-06-21T15:51:51.446Z","tag_list":[]}
{"id":74935386,"status":"success","stage":"build","name":"build:base+32bit","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-14T15:11:06.568Z","started_at":"2018-06-14T15:16:06.501Z","finished_at":"2018-06-14T15:23:25.610Z","duration":439.109613,"queued_duration":299.888163,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"e2bac56067153197b053fbda4c5fb0286c6d81b0","short_id":"e2bac560","created_at":"2018-06-14T16:29:50.000+02:00","parent_ids":["03ec20de0fce9a98c088919656637d9bfac83411"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-06-14T16:29:50.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/e2bac56067153197b053fbda4c5fb0286c6d81b0"},"pipeline":{"id":23868999,"iid":1393,"project_id":6138686,"sha":"e2bac56067153197b053fbda4c5fb0286c6d81b0","ref":"pr-6857","status":"success","source":"push","created_at":"2018-06-14T14:33:51.689Z","updated_at":"2018-06-14T19:00:14.436Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/23868999"},"web_url":"https://gitlab.com/coq/coq/-/jobs/74935386","artifacts":[{"file_type":"trace","size":264441,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":"2018-06-21T15:23:23.806Z","tag_list":[]}
{"id":74935357,"status":"success","stage":"build","name":"build:base","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-14T15:10:56.333Z","started_at":"2018-06-14T15:15:56.523Z","finished_at":"2018-06-14T15:24:45.295Z","duration":528.77269,"queued_duration":300.146222,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"e2bac56067153197b053fbda4c5fb0286c6d81b0","short_id":"e2bac560","created_at":"2018-06-14T16:29:50.000+02:00","parent_ids":["03ec20de0fce9a98c088919656637d9bfac83411"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-06-14T16:29:50.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/e2bac56067153197b053fbda4c5fb0286c6d81b0"},"pipeline":{"id":23868999,"iid":1393,"project_id":6138686,"sha":"e2bac56067153197b053fbda4c5fb0286c6d81b0","ref":"pr-6857","status":"success","source":"push","created_at":"2018-06-14T14:33:51.689Z","updated_at":"2018-06-14T19:00:14.436Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/23868999"},"web_url":"https://gitlab.com/coq/coq/-/jobs/74935357","artifacts":[{"file_type":"trace","size":348306,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":"2018-06-21T15:24:43.166Z","tag_list":[]}
{"id":74921465,"status":"success","stage":"test","name":"ci-vst","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-14T14:33:53.185Z","started_at":"2018-06-14T17:33:09.433Z","finished_at":"2018-06-14T19:00:13.213Z","duration":5223.780127,"queued_duration":0.323283,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"e2bac56067153197b053fbda4c5fb0286c6d81b0","short_id":"e2bac560","created_at":"2018-06-14T16:29:50.000+02:00","parent_ids":["03ec20de0fce9a98c088919656637d9bfac83411"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-06-14T16:29:50.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/e2bac56067153197b053fbda4c5fb0286c6d81b0"},"pipeline":{"id":23868999,"iid":1393,"project_id":6138686,"sha":"e2bac56067153197b053fbda4c5fb0286c6d81b0","ref":"pr-6857","status":"success","source":"push","created_at":"2018-06-14T14:33:51.689Z","updated_at":"2018-06-14T19:00:14.436Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/23868999"},"web_url":"https://gitlab.com/coq/coq/-/jobs/74921465","artifacts":[{"file_type":"trace","size":171921,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":74921464,"status":"success","stage":"test","name":"ci-unimath","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-14T14:33:53.159Z","started_at":"2018-06-14T17:33:09.722Z","finished_at":"2018-06-14T17:52:07.620Z","duration":1137.897361,"queued_duration":0.363271,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"e2bac56067153197b053fbda4c5fb0286c6d81b0","short_id":"e2bac560","created_at":"2018-06-14T16:29:50.000+02:00","parent_ids":["03ec20de0fce9a98c088919656637d9bfac83411"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-06-14T16:29:50.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/e2bac56067153197b053fbda4c5fb0286c6d81b0"},"pipeline":{"id":23868999,"iid":1393,"project_id":6138686,"sha":"e2bac56067153197b053fbda4c5fb0286c6d81b0","ref":"pr-6857","status":"success","source":"push","created_at":"2018-06-14T14:33:51.689Z","updated_at":"2018-06-14T19:00:14.436Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/23868999"},"web_url":"https://gitlab.com/coq/coq/-/jobs/74921464","artifacts":[{"file_type":"trace","size":124595,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":74921463,"status":"success","stage":"test","name":"ci-sf","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-14T14:33:53.052Z","started_at":"2018-06-14T17:33:10.009Z","finished_at":"2018-06-14T17:38:28.471Z","duration":318.461686,"queued_duration":0.41519,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"e2bac56067153197b053fbda4c5fb0286c6d81b0","short_id":"e2bac560","created_at":"2018-06-14T16:29:50.000+02:00","parent_ids":["03ec20de0fce9a98c088919656637d9bfac83411"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-06-14T16:29:50.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/e2bac56067153197b053fbda4c5fb0286c6d81b0"},"pipeline":{"id":23868999,"iid":1393,"project_id":6138686,"sha":"e2bac56067153197b053fbda4c5fb0286c6d81b0","ref":"pr-6857","status":"success","source":"push","created_at":"2018-06-14T14:33:51.689Z","updated_at":"2018-06-14T19:00:14.436Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/23868999"},"web_url":"https://gitlab.com/coq/coq/-/jobs/74921463","artifacts":[{"file_type":"trace","size":267987,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":74921462,"status":"success","stage":"test","name":"ci-quickchick","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-14T14:33:53.020Z","started_at":"2018-06-14T17:33:10.409Z","finished_at":"2018-06-14T17:39:35.722Z","duration":385.312214,"queued_duration":0.581337,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"e2bac56067153197b053fbda4c5fb0286c6d81b0","short_id":"e2bac560","created_at":"2018-06-14T16:29:50.000+02:00","parent_ids":["03ec20de0fce9a98c088919656637d9bfac83411"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-06-14T16:29:50.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/e2bac56067153197b053fbda4c5fb0286c6d81b0"},"pipeline":{"id":23868999,"iid":1393,"project_id":6138686,"sha":"e2bac56067153197b053fbda4c5fb0286c6d81b0","ref":"pr-6857","status":"success","source":"push","created_at":"2018-06-14T14:33:51.689Z","updated_at":"2018-06-14T19:00:14.436Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/23868999"},"web_url":"https://gitlab.com/coq/coq/-/jobs/74921462","artifacts":[{"file_type":"trace","size":196240,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":74921461,"status":"success","stage":"test","name":"ci-pidetop","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-14T14:33:52.984Z","started_at":"2018-06-14T17:33:10.265Z","finished_at":"2018-06-14T17:35:52.450Z","duration":162.185282,"queued_duration":0.245478,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"e2bac56067153197b053fbda4c5fb0286c6d81b0","short_id":"e2bac560","created_at":"2018-06-14T16:29:50.000+02:00","parent_ids":["03ec20de0fce9a98c088919656637d9bfac83411"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-06-14T16:29:50.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/e2bac56067153197b053fbda4c5fb0286c6d81b0"},"pipeline":{"id":23868999,"iid":1393,"project_id":6138686,"sha":"e2bac56067153197b053fbda4c5fb0286c6d81b0","ref":"pr-6857","status":"success","source":"push","created_at":"2018-06-14T14:33:51.689Z","updated_at":"2018-06-14T19:00:14.436Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/23868999"},"web_url":"https://gitlab.com/coq/coq/-/jobs/74921461","artifacts":[{"file_type":"trace","size":31603,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":74921458,"status":"success","stage":"test","name":"ci-mtac2","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-14T14:33:52.950Z","started_at":"2018-06-14T17:33:10.465Z","finished_at":"2018-06-14T17:37:39.316Z","duration":268.850968,"queued_duration":0.246207,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"e2bac56067153197b053fbda4c5fb0286c6d81b0","short_id":"e2bac560","created_at":"2018-06-14T16:29:50.000+02:00","parent_ids":["03ec20de0fce9a98c088919656637d9bfac83411"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-06-14T16:29:50.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/e2bac56067153197b053fbda4c5fb0286c6d81b0"},"pipeline":{"id":23868999,"iid":1393,"project_id":6138686,"sha":"e2bac56067153197b053fbda4c5fb0286c6d81b0","ref":"pr-6857","status":"success","source":"push","created_at":"2018-06-14T14:33:51.689Z","updated_at":"2018-06-14T19:00:14.436Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/23868999"},"web_url":"https://gitlab.com/coq/coq/-/jobs/74921458","artifacts":[{"file_type":"trace","size":87247,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":74921457,"status":"success","stage":"test","name":"ci-math-comp","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-14T14:33:52.911Z","started_at":"2018-06-14T17:33:10.668Z","finished_at":"2018-06-14T18:30:33.784Z","duration":3443.116536,"queued_duration":0.244209,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"e2bac56067153197b053fbda4c5fb0286c6d81b0","short_id":"e2bac560","created_at":"2018-06-14T16:29:50.000+02:00","parent_ids":["03ec20de0fce9a98c088919656637d9bfac83411"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-06-14T16:29:50.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/e2bac56067153197b053fbda4c5fb0286c6d81b0"},"pipeline":{"id":23868999,"iid":1393,"project_id":6138686,"sha":"e2bac56067153197b053fbda4c5fb0286c6d81b0","ref":"pr-6857","status":"success","source":"push","created_at":"2018-06-14T14:33:51.689Z","updated_at":"2018-06-14T19:00:14.436Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/23868999"},"web_url":"https://gitlab.com/coq/coq/-/jobs/74921457","artifacts":[{"file_type":"trace","size":311307,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":74921456,"status":"success","stage":"test","name":"ci-ltac2","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-14T14:33:52.873Z","started_at":"2018-06-14T17:33:11.010Z","finished_at":"2018-06-14T17:36:46.724Z","duration":215.714003,"queued_duration":0.377907,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"e2bac56067153197b053fbda4c5fb0286c6d81b0","short_id":"e2bac560","created_at":"2018-06-14T16:29:50.000+02:00","parent_ids":["03ec20de0fce9a98c088919656637d9bfac83411"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-06-14T16:29:50.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/e2bac56067153197b053fbda4c5fb0286c6d81b0"},"pipeline":{"id":23868999,"iid":1393,"project_id":6138686,"sha":"e2bac56067153197b053fbda4c5fb0286c6d81b0","ref":"pr-6857","status":"success","source":"push","created_at":"2018-06-14T14:33:51.689Z","updated_at":"2018-06-14T19:00:14.436Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/23868999"},"web_url":"https://gitlab.com/coq/coq/-/jobs/74921456","artifacts":[{"file_type":"trace","size":47899,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":74921455,"status":"success","stage":"test","name":"ci-iris-lambda-rust","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-14T14:33:52.837Z","started_at":"2018-06-14T17:33:11.172Z","finished_at":"2018-06-14T18:21:36.272Z","duration":2905.100074,"queued_duration":0.325255,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"e2bac56067153197b053fbda4c5fb0286c6d81b0","short_id":"e2bac560","created_at":"2018-06-14T16:29:50.000+02:00","parent_ids":["03ec20de0fce9a98c088919656637d9bfac83411"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-06-14T16:29:50.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/e2bac56067153197b053fbda4c5fb0286c6d81b0"},"pipeline":{"id":23868999,"iid":1393,"project_id":6138686,"sha":"e2bac56067153197b053fbda4c5fb0286c6d81b0","ref":"pr-6857","status":"success","source":"push","created_at":"2018-06-14T14:33:51.689Z","updated_at":"2018-06-14T19:00:14.436Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/23868999"},"web_url":"https://gitlab.com/coq/coq/-/jobs/74921455","artifacts":[{"file_type":"trace","size":207571,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":74921454,"status":"success","stage":"test","name":"ci-hott","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-14T14:33:52.792Z","started_at":"2018-06-14T17:33:11.393Z","finished_at":"2018-06-14T17:44:58.332Z","duration":706.939485,"queued_duration":0.298842,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"e2bac56067153197b053fbda4c5fb0286c6d81b0","short_id":"e2bac560","created_at":"2018-06-14T16:29:50.000+02:00","parent_ids":["03ec20de0fce9a98c088919656637d9bfac83411"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-06-14T16:29:50.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/e2bac56067153197b053fbda4c5fb0286c6d81b0"},"pipeline":{"id":23868999,"iid":1393,"project_id":6138686,"sha":"e2bac56067153197b053fbda4c5fb0286c6d81b0","ref":"pr-6857","status":"success","source":"push","created_at":"2018-06-14T14:33:51.689Z","updated_at":"2018-06-14T19:00:14.436Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/23868999"},"web_url":"https://gitlab.com/coq/coq/-/jobs/74921454","artifacts":[{"file_type":"trace","size":64241,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":74921453,"status":"success","stage":"test","name":"ci-geocoq","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-14T14:33:52.754Z","started_at":"2018-06-14T17:33:11.604Z","finished_at":"2018-06-14T18:18:15.278Z","duration":2703.673802,"queued_duration":0.332854,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"e2bac56067153197b053fbda4c5fb0286c6d81b0","short_id":"e2bac560","created_at":"2018-06-14T16:29:50.000+02:00","parent_ids":["03ec20de0fce9a98c088919656637d9bfac83411"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-06-14T16:29:50.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/e2bac56067153197b053fbda4c5fb0286c6d81b0"},"pipeline":{"id":23868999,"iid":1393,"project_id":6138686,"sha":"e2bac56067153197b053fbda4c5fb0286c6d81b0","ref":"pr-6857","status":"success","source":"push","created_at":"2018-06-14T14:33:51.689Z","updated_at":"2018-06-14T19:00:14.436Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/23868999"},"web_url":"https://gitlab.com/coq/coq/-/jobs/74921453","artifacts":[{"file_type":"trace","size":269479,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":74921452,"status":"success","stage":"test","name":"ci-formal-topology","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-14T14:33:52.721Z","started_at":"2018-06-14T17:33:12.118Z","finished_at":"2018-06-14T17:57:36.166Z","duration":1464.04838,"queued_duration":0.630729,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"e2bac56067153197b053fbda4c5fb0286c6d81b0","short_id":"e2bac560","created_at":"2018-06-14T16:29:50.000+02:00","parent_ids":["03ec20de0fce9a98c088919656637d9bfac83411"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-06-14T16:29:50.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/e2bac56067153197b053fbda4c5fb0286c6d81b0"},"pipeline":{"id":23868999,"iid":1393,"project_id":6138686,"sha":"e2bac56067153197b053fbda4c5fb0286c6d81b0","ref":"pr-6857","status":"success","source":"push","created_at":"2018-06-14T14:33:51.689Z","updated_at":"2018-06-14T19:00:14.436Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/23868999"},"web_url":"https://gitlab.com/coq/coq/-/jobs/74921452","artifacts":[{"file_type":"trace","size":570824,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":74921451,"status":"success","stage":"test","name":"ci-flocq","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-14T14:33:52.685Z","started_at":"2018-06-14T17:33:12.031Z","finished_at":"2018-06-14T17:41:58.929Z","duration":526.897256,"queued_duration":0.414496,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"e2bac56067153197b053fbda4c5fb0286c6d81b0","short_id":"e2bac560","created_at":"2018-06-14T16:29:50.000+02:00","parent_ids":["03ec20de0fce9a98c088919656637d9bfac83411"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-06-14T16:29:50.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/e2bac56067153197b053fbda4c5fb0286c6d81b0"},"pipeline":{"id":23868999,"iid":1393,"project_id":6138686,"sha":"e2bac56067153197b053fbda4c5fb0286c6d81b0","ref":"pr-6857","status":"success","source":"push","created_at":"2018-06-14T14:33:51.689Z","updated_at":"2018-06-14T19:00:14.436Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/23868999"},"web_url":"https://gitlab.com/coq/coq/-/jobs/74921451","artifacts":[{"file_type":"trace","size":654369,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":74921450,"status":"success","stage":"test","name":"ci-fiat-parsers","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-14T14:33:52.656Z","started_at":"2018-06-14T17:33:12.856Z","finished_at":"2018-06-14T17:47:04.414Z","duration":831.558371,"queued_duration":0.99028,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"e2bac56067153197b053fbda4c5fb0286c6d81b0","short_id":"e2bac560","created_at":"2018-06-14T16:29:50.000+02:00","parent_ids":["03ec20de0fce9a98c088919656637d9bfac83411"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-06-14T16:29:50.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/e2bac56067153197b053fbda4c5fb0286c6d81b0"},"pipeline":{"id":23868999,"iid":1393,"project_id":6138686,"sha":"e2bac56067153197b053fbda4c5fb0286c6d81b0","ref":"pr-6857","status":"success","source":"push","created_at":"2018-06-14T14:33:51.689Z","updated_at":"2018-06-14T19:00:14.436Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/23868999"},"web_url":"https://gitlab.com/coq/coq/-/jobs/74921450","artifacts":[{"file_type":"trace","size":237896,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":74921449,"status":"success","stage":"test","name":"ci-fiat-crypto","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-14T14:33:52.625Z","started_at":"2018-06-14T17:33:12.286Z","finished_at":"2018-06-14T18:28:41.481Z","duration":3329.195045,"queued_duration":0.267684,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"e2bac56067153197b053fbda4c5fb0286c6d81b0","short_id":"e2bac560","created_at":"2018-06-14T16:29:50.000+02:00","parent_ids":["03ec20de0fce9a98c088919656637d9bfac83411"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-06-14T16:29:50.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/e2bac56067153197b053fbda4c5fb0286c6d81b0"},"pipeline":{"id":23868999,"iid":1393,"project_id":6138686,"sha":"e2bac56067153197b053fbda4c5fb0286c6d81b0","ref":"pr-6857","status":"success","source":"push","created_at":"2018-06-14T14:33:51.689Z","updated_at":"2018-06-14T19:00:14.436Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/23868999"},"web_url":"https://gitlab.com/coq/coq/-/jobs/74921449","artifacts":[{"file_type":"trace","size":699394,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":74921448,"status":"success","stage":"test","name":"ci-fcsl-pcm","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-14T14:33:52.591Z","started_at":"2018-06-14T17:33:12.712Z","finished_at":"2018-06-14T17:38:56.145Z","duration":343.433026,"queued_duration":0.509105,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"e2bac56067153197b053fbda4c5fb0286c6d81b0","short_id":"e2bac560","created_at":"2018-06-14T16:29:50.000+02:00","parent_ids":["03ec20de0fce9a98c088919656637d9bfac83411"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-06-14T16:29:50.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/e2bac56067153197b053fbda4c5fb0286c6d81b0"},"pipeline":{"id":23868999,"iid":1393,"project_id":6138686,"sha":"e2bac56067153197b053fbda4c5fb0286c6d81b0","ref":"pr-6857","status":"success","source":"push","created_at":"2018-06-14T14:33:51.689Z","updated_at":"2018-06-14T19:00:14.436Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/23868999"},"web_url":"https://gitlab.com/coq/coq/-/jobs/74921448","artifacts":[{"file_type":"trace","size":91784,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":74921447,"status":"success","stage":"test","name":"ci-equations","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-14T14:33:52.560Z","started_at":"2018-06-14T17:33:12.963Z","finished_at":"2018-06-14T17:37:43.999Z","duration":271.035978,"queued_duration":0.353116,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"e2bac56067153197b053fbda4c5fb0286c6d81b0","short_id":"e2bac560","created_at":"2018-06-14T16:29:50.000+02:00","parent_ids":["03ec20de0fce9a98c088919656637d9bfac83411"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-06-14T16:29:50.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/e2bac56067153197b053fbda4c5fb0286c6d81b0"},"pipeline":{"id":23868999,"iid":1393,"project_id":6138686,"sha":"e2bac56067153197b053fbda4c5fb0286c6d81b0","ref":"pr-6857","status":"success","source":"push","created_at":"2018-06-14T14:33:51.689Z","updated_at":"2018-06-14T19:00:14.436Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/23868999"},"web_url":"https://gitlab.com/coq/coq/-/jobs/74921447","artifacts":[{"file_type":"trace","size":63091,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":74921444,"status":"success","stage":"test","name":"ci-elpi","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-14T14:33:52.525Z","started_at":"2018-06-14T17:33:13.236Z","finished_at":"2018-06-14T17:38:04.132Z","duration":290.896164,"queued_duration":0.407889,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"e2bac56067153197b053fbda4c5fb0286c6d81b0","short_id":"e2bac560","created_at":"2018-06-14T16:29:50.000+02:00","parent_ids":["03ec20de0fce9a98c088919656637d9bfac83411"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-06-14T16:29:50.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/e2bac56067153197b053fbda4c5fb0286c6d81b0"},"pipeline":{"id":23868999,"iid":1393,"project_id":6138686,"sha":"e2bac56067153197b053fbda4c5fb0286c6d81b0","ref":"pr-6857","status":"success","source":"push","created_at":"2018-06-14T14:33:51.689Z","updated_at":"2018-06-14T19:00:14.436Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/23868999"},"web_url":"https://gitlab.com/coq/coq/-/jobs/74921444","artifacts":[{"file_type":"trace","size":414026,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":74921442,"status":"success","stage":"test","name":"ci-cross-crypto","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-14T14:33:52.496Z","started_at":"2018-06-14T17:33:13.473Z","finished_at":"2018-06-14T18:17:11.496Z","duration":2638.02305,"queued_duration":0.410388,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"e2bac56067153197b053fbda4c5fb0286c6d81b0","short_id":"e2bac560","created_at":"2018-06-14T16:29:50.000+02:00","parent_ids":["03ec20de0fce9a98c088919656637d9bfac83411"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-06-14T16:29:50.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/e2bac56067153197b053fbda4c5fb0286c6d81b0"},"pipeline":{"id":23868999,"iid":1393,"project_id":6138686,"sha":"e2bac56067153197b053fbda4c5fb0286c6d81b0","ref":"pr-6857","status":"success","source":"push","created_at":"2018-06-14T14:33:51.689Z","updated_at":"2018-06-14T19:00:14.436Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/23868999"},"web_url":"https://gitlab.com/coq/coq/-/jobs/74921442","artifacts":[{"file_type":"trace","size":76970,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":74921440,"status":"success","stage":"test","name":"ci-coquelicot","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-14T14:33:52.466Z","started_at":"2018-06-14T17:33:13.982Z","finished_at":"2018-06-14T17:39:54.551Z","duration":400.569503,"queued_duration":0.699861,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"e2bac56067153197b053fbda4c5fb0286c6d81b0","short_id":"e2bac560","created_at":"2018-06-14T16:29:50.000+02:00","parent_ids":["03ec20de0fce9a98c088919656637d9bfac83411"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-06-14T16:29:50.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/e2bac56067153197b053fbda4c5fb0286c6d81b0"},"pipeline":{"id":23868999,"iid":1393,"project_id":6138686,"sha":"e2bac56067153197b053fbda4c5fb0286c6d81b0","ref":"pr-6857","status":"success","source":"push","created_at":"2018-06-14T14:33:51.689Z","updated_at":"2018-06-14T19:00:14.436Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/23868999"},"web_url":"https://gitlab.com/coq/coq/-/jobs/74921440","artifacts":[{"file_type":"trace","size":95036,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":74921439,"status":"success","stage":"test","name":"ci-coq-dpdgraph","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-14T14:33:52.427Z","started_at":"2018-06-14T17:33:13.907Z","finished_at":"2018-06-14T17:35:58.217Z","duration":164.309811,"queued_duration":0.402556,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"e2bac56067153197b053fbda4c5fb0286c6d81b0","short_id":"e2bac560","created_at":"2018-06-14T16:29:50.000+02:00","parent_ids":["03ec20de0fce9a98c088919656637d9bfac83411"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-06-14T16:29:50.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/e2bac56067153197b053fbda4c5fb0286c6d81b0"},"pipeline":{"id":23868999,"iid":1393,"project_id":6138686,"sha":"e2bac56067153197b053fbda4c5fb0286c6d81b0","ref":"pr-6857","status":"success","source":"push","created_at":"2018-06-14T14:33:51.689Z","updated_at":"2018-06-14T19:00:14.436Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/23868999"},"web_url":"https://gitlab.com/coq/coq/-/jobs/74921439","artifacts":[{"file_type":"trace","size":41509,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":74921437,"status":"success","stage":"test","name":"ci-compcert","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-14T14:33:52.399Z","started_at":"2018-06-14T17:33:14.028Z","finished_at":"2018-06-14T18:02:25.499Z","duration":1751.470981,"queued_duration":0.289347,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"e2bac56067153197b053fbda4c5fb0286c6d81b0","short_id":"e2bac560","created_at":"2018-06-14T16:29:50.000+02:00","parent_ids":["03ec20de0fce9a98c088919656637d9bfac83411"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-06-14T16:29:50.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/e2bac56067153197b053fbda4c5fb0286c6d81b0"},"pipeline":{"id":23868999,"iid":1393,"project_id":6138686,"sha":"e2bac56067153197b053fbda4c5fb0286c6d81b0","ref":"pr-6857","status":"success","source":"push","created_at":"2018-06-14T14:33:51.689Z","updated_at":"2018-06-14T19:00:14.436Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/23868999"},"web_url":"https://gitlab.com/coq/coq/-/jobs/74921437","artifacts":[{"file_type":"trace","size":1999590,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":74921435,"status":"success","stage":"test","name":"ci-color","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-14T14:33:52.372Z","started_at":"2018-06-14T17:33:18.691Z","finished_at":"2018-06-14T17:56:13.178Z","duration":1374.486445,"queued_duration":4.737937,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"e2bac56067153197b053fbda4c5fb0286c6d81b0","short_id":"e2bac560","created_at":"2018-06-14T16:29:50.000+02:00","parent_ids":["03ec20de0fce9a98c088919656637d9bfac83411"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-06-14T16:29:50.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/e2bac56067153197b053fbda4c5fb0286c6d81b0"},"pipeline":{"id":23868999,"iid":1393,"project_id":6138686,"sha":"e2bac56067153197b053fbda4c5fb0286c6d81b0","ref":"pr-6857","status":"success","source":"push","created_at":"2018-06-14T14:33:51.689Z","updated_at":"2018-06-14T19:00:14.436Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/23868999"},"web_url":"https://gitlab.com/coq/coq/-/jobs/74921435","artifacts":[{"file_type":"trace","size":260324,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":74921434,"status":"success","stage":"test","name":"ci-bignums","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-14T14:33:52.344Z","started_at":"2018-06-14T17:33:14.478Z","finished_at":"2018-06-14T17:38:43.563Z","duration":329.084803,"queued_duration":0.283191,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"e2bac56067153197b053fbda4c5fb0286c6d81b0","short_id":"e2bac560","created_at":"2018-06-14T16:29:50.000+02:00","parent_ids":["03ec20de0fce9a98c088919656637d9bfac83411"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-06-14T16:29:50.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/e2bac56067153197b053fbda4c5fb0286c6d81b0"},"pipeline":{"id":23868999,"iid":1393,"project_id":6138686,"sha":"e2bac56067153197b053fbda4c5fb0286c6d81b0","ref":"pr-6857","status":"success","source":"push","created_at":"2018-06-14T14:33:51.689Z","updated_at":"2018-06-14T19:00:14.436Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/23868999"},"web_url":"https://gitlab.com/coq/coq/-/jobs/74921434","artifacts":[{"file_type":"trace","size":42246,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":74921433,"status":"success","stage":"test","name":"validate:edge+flambda","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-14T14:33:52.312Z","started_at":"2018-06-14T17:33:14.787Z","finished_at":"2018-06-14T17:41:02.556Z","duration":467.768841,"queued_duration":0.410911,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"e2bac56067153197b053fbda4c5fb0286c6d81b0","short_id":"e2bac560","created_at":"2018-06-14T16:29:50.000+02:00","parent_ids":["03ec20de0fce9a98c088919656637d9bfac83411"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-06-14T16:29:50.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/e2bac56067153197b053fbda4c5fb0286c6d81b0"},"pipeline":{"id":23868999,"iid":1393,"project_id":6138686,"sha":"e2bac56067153197b053fbda4c5fb0286c6d81b0","ref":"pr-6857","status":"success","source":"push","created_at":"2018-06-14T14:33:51.689Z","updated_at":"2018-06-14T19:00:14.436Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/23868999"},"web_url":"https://gitlab.com/coq/coq/-/jobs/74921433","artifacts":[{"file_type":"trace","size":26188,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":74921432,"status":"success","stage":"test","name":"validate:edge","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-14T14:33:52.286Z","started_at":"2018-06-14T17:33:14.957Z","finished_at":"2018-06-14T17:42:52.397Z","duration":577.439318,"queued_duration":0.394394,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"e2bac56067153197b053fbda4c5fb0286c6d81b0","short_id":"e2bac560","created_at":"2018-06-14T16:29:50.000+02:00","parent_ids":["03ec20de0fce9a98c088919656637d9bfac83411"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-06-14T16:29:50.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/e2bac56067153197b053fbda4c5fb0286c6d81b0"},"pipeline":{"id":23868999,"iid":1393,"project_id":6138686,"sha":"e2bac56067153197b053fbda4c5fb0286c6d81b0","ref":"pr-6857","status":"success","source":"push","created_at":"2018-06-14T14:33:51.689Z","updated_at":"2018-06-14T19:00:14.436Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/23868999"},"web_url":"https://gitlab.com/coq/coq/-/jobs/74921432","artifacts":[{"file_type":"trace","size":24107,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":74921431,"status":"success","stage":"test","name":"validate:base+32bit","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-14T14:33:52.256Z","started_at":"2018-06-14T17:33:18.459Z","finished_at":"2018-06-14T17:37:33.459Z","duration":255.000354,"queued_duration":3.673798,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"e2bac56067153197b053fbda4c5fb0286c6d81b0","short_id":"e2bac560","created_at":"2018-06-14T16:29:50.000+02:00","parent_ids":["03ec20de0fce9a98c088919656637d9bfac83411"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-06-14T16:29:50.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/e2bac56067153197b053fbda4c5fb0286c6d81b0"},"pipeline":{"id":23868999,"iid":1393,"project_id":6138686,"sha":"e2bac56067153197b053fbda4c5fb0286c6d81b0","ref":"pr-6857","status":"success","source":"push","created_at":"2018-06-14T14:33:51.689Z","updated_at":"2018-06-14T19:00:14.436Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/23868999"},"web_url":"https://gitlab.com/coq/coq/-/jobs/74921431","artifacts":[{"file_type":"trace","size":106427,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":74921430,"status":"success","stage":"test","name":"validate:base","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-14T14:33:52.228Z","started_at":"2018-06-14T17:33:15.519Z","finished_at":"2018-06-14T17:42:41.202Z","duration":565.683271,"queued_duration":0.487338,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"e2bac56067153197b053fbda4c5fb0286c6d81b0","short_id":"e2bac560","created_at":"2018-06-14T16:29:50.000+02:00","parent_ids":["03ec20de0fce9a98c088919656637d9bfac83411"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-06-14T16:29:50.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/e2bac56067153197b053fbda4c5fb0286c6d81b0"},"pipeline":{"id":23868999,"iid":1393,"project_id":6138686,"sha":"e2bac56067153197b053fbda4c5fb0286c6d81b0","ref":"pr-6857","status":"success","source":"push","created_at":"2018-06-14T14:33:51.689Z","updated_at":"2018-06-14T19:00:14.436Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/23868999"},"web_url":"https://gitlab.com/coq/coq/-/jobs/74921430","artifacts":[{"file_type":"trace","size":25133,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":74921429,"status":"success","stage":"test","name":"test-suite:edge+flambda","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-14T14:33:52.188Z","started_at":"2018-06-14T17:33:15.689Z","finished_at":"2018-06-14T17:47:12.913Z","duration":837.22424,"queued_duration":0.383236,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"e2bac56067153197b053fbda4c5fb0286c6d81b0","short_id":"e2bac560","created_at":"2018-06-14T16:29:50.000+02:00","parent_ids":["03ec20de0fce9a98c088919656637d9bfac83411"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-06-14T16:29:50.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/e2bac56067153197b053fbda4c5fb0286c6d81b0"},"pipeline":{"id":23868999,"iid":1393,"project_id":6138686,"sha":"e2bac56067153197b053fbda4c5fb0286c6d81b0","ref":"pr-6857","status":"success","source":"push","created_at":"2018-06-14T14:33:51.689Z","updated_at":"2018-06-14T19:00:14.436Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/23868999"},"web_url":"https://gitlab.com/coq/coq/-/jobs/74921429","artifacts":[{"file_type":"trace","size":67940,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":74921428,"status":"success","stage":"test","name":"test-suite:edge","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-14T14:33:52.156Z","started_at":"2018-06-14T17:33:16.002Z","finished_at":"2018-06-14T17:46:00.606Z","duration":764.603638,"queued_duration":0.49239,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"e2bac56067153197b053fbda4c5fb0286c6d81b0","short_id":"e2bac560","created_at":"2018-06-14T16:29:50.000+02:00","parent_ids":["03ec20de0fce9a98c088919656637d9bfac83411"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-06-14T16:29:50.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/e2bac56067153197b053fbda4c5fb0286c6d81b0"},"pipeline":{"id":23868999,"iid":1393,"project_id":6138686,"sha":"e2bac56067153197b053fbda4c5fb0286c6d81b0","ref":"pr-6857","status":"success","source":"push","created_at":"2018-06-14T14:33:51.689Z","updated_at":"2018-06-14T19:00:14.436Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/23868999"},"web_url":"https://gitlab.com/coq/coq/-/jobs/74921428","artifacts":[{"file_type":"trace","size":66946,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":74921427,"status":"success","stage":"test","name":"test-suite:base+32bit","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-14T14:33:52.120Z","started_at":"2018-06-14T17:33:17.946Z","finished_at":"2018-06-14T17:39:32.623Z","duration":374.676607,"queued_duration":2.209018,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"e2bac56067153197b053fbda4c5fb0286c6d81b0","short_id":"e2bac560","created_at":"2018-06-14T16:29:50.000+02:00","parent_ids":["03ec20de0fce9a98c088919656637d9bfac83411"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-06-14T16:29:50.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/e2bac56067153197b053fbda4c5fb0286c6d81b0"},"pipeline":{"id":23868999,"iid":1393,"project_id":6138686,"sha":"e2bac56067153197b053fbda4c5fb0286c6d81b0","ref":"pr-6857","status":"success","source":"push","created_at":"2018-06-14T14:33:51.689Z","updated_at":"2018-06-14T19:00:14.436Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/23868999"},"web_url":"https://gitlab.com/coq/coq/-/jobs/74921427","artifacts":[{"file_type":"trace","size":67983,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":74921425,"status":"success","stage":"test","name":"test-suite:base","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-14T14:33:52.089Z","started_at":"2018-06-14T17:33:17.137Z","finished_at":"2018-06-14T17:39:59.673Z","duration":402.536356,"queued_duration":1.168111,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"e2bac56067153197b053fbda4c5fb0286c6d81b0","short_id":"e2bac560","created_at":"2018-06-14T16:29:50.000+02:00","parent_ids":["03ec20de0fce9a98c088919656637d9bfac83411"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-06-14T16:29:50.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/e2bac56067153197b053fbda4c5fb0286c6d81b0"},"pipeline":{"id":23868999,"iid":1393,"project_id":6138686,"sha":"e2bac56067153197b053fbda4c5fb0286c6d81b0","ref":"pr-6857","status":"success","source":"push","created_at":"2018-06-14T14:33:51.689Z","updated_at":"2018-06-14T19:00:14.436Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/23868999"},"web_url":"https://gitlab.com/coq/coq/-/jobs/74921425","artifacts":[{"file_type":"trace","size":68996,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":74921422,"status":"success","stage":"test","name":"documentation","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-14T14:33:52.056Z","started_at":"2018-06-14T17:33:16.643Z","finished_at":"2018-06-14T17:39:50.341Z","duration":393.698009,"queued_duration":0.42201,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"e2bac56067153197b053fbda4c5fb0286c6d81b0","short_id":"e2bac560","created_at":"2018-06-14T16:29:50.000+02:00","parent_ids":["03ec20de0fce9a98c088919656637d9bfac83411"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-06-14T16:29:50.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/e2bac56067153197b053fbda4c5fb0286c6d81b0"},"pipeline":{"id":23868999,"iid":1393,"project_id":6138686,"sha":"e2bac56067153197b053fbda4c5fb0286c6d81b0","ref":"pr-6857","status":"success","source":"push","created_at":"2018-06-14T14:33:51.689Z","updated_at":"2018-06-14T19:00:14.436Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/23868999"},"web_url":"https://gitlab.com/coq/coq/-/jobs/74921422","artifacts":[{"file_type":"trace","size":32519,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":74921420,"status":"success","stage":"test","name":"warnings:edge","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-14T14:33:52.023Z","started_at":"2018-06-14T17:33:16.959Z","finished_at":"2018-06-14T17:40:09.820Z","duration":412.861164,"queued_duration":0.489713,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"e2bac56067153197b053fbda4c5fb0286c6d81b0","short_id":"e2bac560","created_at":"2018-06-14T16:29:50.000+02:00","parent_ids":["03ec20de0fce9a98c088919656637d9bfac83411"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-06-14T16:29:50.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/e2bac56067153197b053fbda4c5fb0286c6d81b0"},"pipeline":{"id":23868999,"iid":1393,"project_id":6138686,"sha":"e2bac56067153197b053fbda4c5fb0286c6d81b0","ref":"pr-6857","status":"success","source":"push","created_at":"2018-06-14T14:33:51.689Z","updated_at":"2018-06-14T19:00:14.436Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/23868999"},"web_url":"https://gitlab.com/coq/coq/-/jobs/74921420","artifacts":[{"file_type":"trace","size":73575,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":74921417,"status":"success","stage":"test","name":"warnings:base","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-14T14:33:51.988Z","started_at":"2018-06-14T17:33:17.842Z","finished_at":"2018-06-14T17:37:55.063Z","duration":277.221075,"queued_duration":1.159155,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"e2bac56067153197b053fbda4c5fb0286c6d81b0","short_id":"e2bac560","created_at":"2018-06-14T16:29:50.000+02:00","parent_ids":["03ec20de0fce9a98c088919656637d9bfac83411"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-06-14T16:29:50.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/e2bac56067153197b053fbda4c5fb0286c6d81b0"},"pipeline":{"id":23868999,"iid":1393,"project_id":6138686,"sha":"e2bac56067153197b053fbda4c5fb0286c6d81b0","ref":"pr-6857","status":"success","source":"push","created_at":"2018-06-14T14:33:51.689Z","updated_at":"2018-06-14T19:00:14.436Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/23868999"},"web_url":"https://gitlab.com/coq/coq/-/jobs/74921417","artifacts":[{"file_type":"trace","size":75583,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":74921416,"status":"success","stage":"test","name":"windows32","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-14T14:33:51.947Z","started_at":"2018-06-14T17:33:30.293Z","finished_at":"2018-06-14T18:49:51.516Z","duration":4581.222254,"queued_duration":13.308356,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"e2bac56067153197b053fbda4c5fb0286c6d81b0","short_id":"e2bac560","created_at":"2018-06-14T16:29:50.000+02:00","parent_ids":["03ec20de0fce9a98c088919656637d9bfac83411"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-06-14T16:29:50.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/e2bac56067153197b053fbda4c5fb0286c6d81b0"},"pipeline":{"id":23868999,"iid":1393,"project_id":6138686,"sha":"e2bac56067153197b053fbda4c5fb0286c6d81b0","ref":"pr-6857","status":"success","source":"push","created_at":"2018-06-14T14:33:51.689Z","updated_at":"2018-06-14T19:00:14.436Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/23868999"},"web_url":"https://gitlab.com/coq/coq/-/jobs/74921416","artifacts":[{"file_type":"trace","size":3523846,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":"2018-06-21T18:49:25.497Z","tag_list":["windows"]}
{"id":74921415,"status":"success","stage":"test","name":"windows64","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-14T14:33:51.904Z","started_at":"2018-06-14T17:33:27.364Z","finished_at":"2018-06-14T18:49:34.630Z","duration":4567.265313,"queued_duration":10.14516,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"e2bac56067153197b053fbda4c5fb0286c6d81b0","short_id":"e2bac560","created_at":"2018-06-14T16:29:50.000+02:00","parent_ids":["03ec20de0fce9a98c088919656637d9bfac83411"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-06-14T16:29:50.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/e2bac56067153197b053fbda4c5fb0286c6d81b0"},"pipeline":{"id":23868999,"iid":1393,"project_id":6138686,"sha":"e2bac56067153197b053fbda4c5fb0286c6d81b0","ref":"pr-6857","status":"success","source":"push","created_at":"2018-06-14T14:33:51.689Z","updated_at":"2018-06-14T19:00:14.436Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/23868999"},"web_url":"https://gitlab.com/coq/coq/-/jobs/74921415","artifacts":[{"file_type":"trace","size":3541928,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":"2018-06-21T18:49:08.443Z","tag_list":["windows"]}
