{"id":118820039,"status":"failed","stage":"test","name":"ci-vst","ref":"pr-8965","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-10T07:56:58.938Z","started_at":"2018-11-10T08:27:39.411Z","finished_at":"2018-11-10T08:30:06.920Z","duration":147.509279,"queued_duration":38.624732,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"1fe92c616fe9c95c6650c1a85e690ecd336c3b24","short_id":"1fe92c61","created_at":"2018-11-10T02:56:39.000-05:00","parent_ids":["ce8e37b97ce9db6f39368c50fb0ee4a7839ce754"],"title":"Add `String Notation` vernacular like `Numeral Notation`","message":"Add `String Notation` vernacular like `Numeral Notation`\n\nUsers can now register string notations for custom inductives.\n\nMuch of the code and documentation was copied from numeral notations.\n\nI chose to use a 256-constructor inductive for primitive string syntax\nbecause (a) it is easy to convert between character codes and\nconstructors, and (b) it is more efficient than the existing `ascii`\ntype.\n\nSome choices about proofs of the new `byte` type were made based on\nefficiency.  For example, https://github.com/coq/coq/issues/8517 means\nthat we cannot simply use `Scheme Equality` for this type, and I have\ntaken some care to ensure that the proofs of decidable equality and\nconversion are fast.  (Unfortunately, the `Init/Byte.v` file is the\nslowest one in the prelude (it takes a couple of seconds to build), and\nI'm not sure where the slowness is.)\n\nIn String.v, some uses of `0` as a `nat` were replaced by `O`, because\nthe file initially refused to check interactively otherwise (it\ncomplained that `0` could not be interpreted in `string_scope` before\nloading `Coq.Strings.String`).\n\nThere is unfortunately a decent amount of code duplication between\nnumeral notations and string notations.\n\nI have not put too much thought into chosing names; most names have been\nchosen to be similar to numeral notations, though I chose the name\n`byte` from\nhttps://github.com/coq/coq/issues/8483#issuecomment-421671785.\n\nUnfortunately, this feature does not support declaring string syntax for\n`list ascii`, unless that type is wrapped in a record or other inductive\ntype.  This is not a fundamental limitation; it should be relatively\neasy for someone who knows the API of the reduction machinery in Coq to\nextend both this and numeral notations to support any type whose hnf\nstarts with an inductive type.  (The reason for needing an inductive\ntype to bottom out at is that this is how the plugin determines what\nconstructors are the entry points for printing the given notation.\nHowever, see also https://github.com/coq/coq/issues/8964 for\ncomplications that are more likely to arise if inductive type families\nare supported.)\n\nN.B. I generated the long lists of constructors for the `byte` type with\nshort python scripts.\n\nCloses #8853\n","author_name":"Jason Gross","author_email":"jgross@mit.edu","authored_date":"2018-11-07T21:19:05.000-05:00","committer_name":"Jason Gross","committer_email":"jgross@mit.edu","committed_date":"2018-11-10T02:56:39.000-05:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/1fe92c616fe9c95c6650c1a85e690ecd336c3b24"},"pipeline":{"id":36106420,"iid":5115,"project_id":6138686,"sha":"1fe92c616fe9c95c6650c1a85e690ecd336c3b24","ref":"pr-8965","status":"failed","source":"push","created_at":"2018-11-10T07:56:57.703Z","updated_at":"2018-11-10T09:10:26.050Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36106420"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/118820039","artifacts":[{"file_type":"trace","size":1094,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":118820037,"status":"failed","stage":"test","name":"ci-unimath","ref":"pr-8965","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-10T07:56:58.914Z","started_at":"2018-11-10T08:27:39.343Z","finished_at":"2018-11-10T08:27:47.533Z","duration":8.190788,"queued_duration":38.515598,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"1fe92c616fe9c95c6650c1a85e690ecd336c3b24","short_id":"1fe92c61","created_at":"2018-11-10T02:56:39.000-05:00","parent_ids":["ce8e37b97ce9db6f39368c50fb0ee4a7839ce754"],"title":"Add `String Notation` vernacular like `Numeral Notation`","message":"Add `String Notation` vernacular like `Numeral Notation`\n\nUsers can now register string notations for custom inductives.\n\nMuch of the code and documentation was copied from numeral notations.\n\nI chose to use a 256-constructor inductive for primitive string syntax\nbecause (a) it is easy to convert between character codes and\nconstructors, and (b) it is more efficient than the existing `ascii`\ntype.\n\nSome choices about proofs of the new `byte` type were made based on\nefficiency.  For example, https://github.com/coq/coq/issues/8517 means\nthat we cannot simply use `Scheme Equality` for this type, and I have\ntaken some care to ensure that the proofs of decidable equality and\nconversion are fast.  (Unfortunately, the `Init/Byte.v` file is the\nslowest one in the prelude (it takes a couple of seconds to build), and\nI'm not sure where the slowness is.)\n\nIn String.v, some uses of `0` as a `nat` were replaced by `O`, because\nthe file initially refused to check interactively otherwise (it\ncomplained that `0` could not be interpreted in `string_scope` before\nloading `Coq.Strings.String`).\n\nThere is unfortunately a decent amount of code duplication between\nnumeral notations and string notations.\n\nI have not put too much thought into chosing names; most names have been\nchosen to be similar to numeral notations, though I chose the name\n`byte` from\nhttps://github.com/coq/coq/issues/8483#issuecomment-421671785.\n\nUnfortunately, this feature does not support declaring string syntax for\n`list ascii`, unless that type is wrapped in a record or other inductive\ntype.  This is not a fundamental limitation; it should be relatively\neasy for someone who knows the API of the reduction machinery in Coq to\nextend both this and numeral notations to support any type whose hnf\nstarts with an inductive type.  (The reason for needing an inductive\ntype to bottom out at is that this is how the plugin determines what\nconstructors are the entry points for printing the given notation.\nHowever, see also https://github.com/coq/coq/issues/8964 for\ncomplications that are more likely to arise if inductive type families\nare supported.)\n\nN.B. I generated the long lists of constructors for the `byte` type with\nshort python scripts.\n\nCloses #8853\n","author_name":"Jason Gross","author_email":"jgross@mit.edu","authored_date":"2018-11-07T21:19:05.000-05:00","committer_name":"Jason Gross","committer_email":"jgross@mit.edu","committed_date":"2018-11-10T02:56:39.000-05:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/1fe92c616fe9c95c6650c1a85e690ecd336c3b24"},"pipeline":{"id":36106420,"iid":5115,"project_id":6138686,"sha":"1fe92c616fe9c95c6650c1a85e690ecd336c3b24","ref":"pr-8965","status":"failed","source":"push","created_at":"2018-11-10T07:56:57.703Z","updated_at":"2018-11-10T09:10:26.050Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36106420"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/118820037","artifacts":[{"file_type":"trace","size":1100,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":118820035,"status":"failed","stage":"test","name":"ci-sf","ref":"pr-8965","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-10T07:56:58.892Z","started_at":"2018-11-10T08:27:39.152Z","finished_at":"2018-11-10T08:30:09.670Z","duration":150.518201,"queued_duration":38.289086,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"1fe92c616fe9c95c6650c1a85e690ecd336c3b24","short_id":"1fe92c61","created_at":"2018-11-10T02:56:39.000-05:00","parent_ids":["ce8e37b97ce9db6f39368c50fb0ee4a7839ce754"],"title":"Add `String Notation` vernacular like `Numeral Notation`","message":"Add `String Notation` vernacular like `Numeral Notation`\n\nUsers can now register string notations for custom inductives.\n\nMuch of the code and documentation was copied from numeral notations.\n\nI chose to use a 256-constructor inductive for primitive string syntax\nbecause (a) it is easy to convert between character codes and\nconstructors, and (b) it is more efficient than the existing `ascii`\ntype.\n\nSome choices about proofs of the new `byte` type were made based on\nefficiency.  For example, https://github.com/coq/coq/issues/8517 means\nthat we cannot simply use `Scheme Equality` for this type, and I have\ntaken some care to ensure that the proofs of decidable equality and\nconversion are fast.  (Unfortunately, the `Init/Byte.v` file is the\nslowest one in the prelude (it takes a couple of seconds to build), and\nI'm not sure where the slowness is.)\n\nIn String.v, some uses of `0` as a `nat` were replaced by `O`, because\nthe file initially refused to check interactively otherwise (it\ncomplained that `0` could not be interpreted in `string_scope` before\nloading `Coq.Strings.String`).\n\nThere is unfortunately a decent amount of code duplication between\nnumeral notations and string notations.\n\nI have not put too much thought into chosing names; most names have been\nchosen to be similar to numeral notations, though I chose the name\n`byte` from\nhttps://github.com/coq/coq/issues/8483#issuecomment-421671785.\n\nUnfortunately, this feature does not support declaring string syntax for\n`list ascii`, unless that type is wrapped in a record or other inductive\ntype.  This is not a fundamental limitation; it should be relatively\neasy for someone who knows the API of the reduction machinery in Coq to\nextend both this and numeral notations to support any type whose hnf\nstarts with an inductive type.  (The reason for needing an inductive\ntype to bottom out at is that this is how the plugin determines what\nconstructors are the entry points for printing the given notation.\nHowever, see also https://github.com/coq/coq/issues/8964 for\ncomplications that are more likely to arise if inductive type families\nare supported.)\n\nN.B. I generated the long lists of constructors for the `byte` type with\nshort python scripts.\n\nCloses #8853\n","author_name":"Jason Gross","author_email":"jgross@mit.edu","authored_date":"2018-11-07T21:19:05.000-05:00","committer_name":"Jason Gross","committer_email":"jgross@mit.edu","committed_date":"2018-11-10T02:56:39.000-05:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/1fe92c616fe9c95c6650c1a85e690ecd336c3b24"},"pipeline":{"id":36106420,"iid":5115,"project_id":6138686,"sha":"1fe92c616fe9c95c6650c1a85e690ecd336c3b24","ref":"pr-8965","status":"failed","source":"push","created_at":"2018-11-10T07:56:57.703Z","updated_at":"2018-11-10T09:10:26.050Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36106420"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/118820035","artifacts":[{"file_type":"trace","size":1094,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":118820034,"status":"failed","stage":"test","name":"ci-quickchick","ref":"pr-8965","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-10T07:56:58.868Z","started_at":"2018-11-10T08:27:39.018Z","finished_at":"2018-11-10T08:30:06.618Z","duration":147.599484,"queued_duration":38.122891,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"1fe92c616fe9c95c6650c1a85e690ecd336c3b24","short_id":"1fe92c61","created_at":"2018-11-10T02:56:39.000-05:00","parent_ids":["ce8e37b97ce9db6f39368c50fb0ee4a7839ce754"],"title":"Add `String Notation` vernacular like `Numeral Notation`","message":"Add `String Notation` vernacular like `Numeral Notation`\n\nUsers can now register string notations for custom inductives.\n\nMuch of the code and documentation was copied from numeral notations.\n\nI chose to use a 256-constructor inductive for primitive string syntax\nbecause (a) it is easy to convert between character codes and\nconstructors, and (b) it is more efficient than the existing `ascii`\ntype.\n\nSome choices about proofs of the new `byte` type were made based on\nefficiency.  For example, https://github.com/coq/coq/issues/8517 means\nthat we cannot simply use `Scheme Equality` for this type, and I have\ntaken some care to ensure that the proofs of decidable equality and\nconversion are fast.  (Unfortunately, the `Init/Byte.v` file is the\nslowest one in the prelude (it takes a couple of seconds to build), and\nI'm not sure where the slowness is.)\n\nIn String.v, some uses of `0` as a `nat` were replaced by `O`, because\nthe file initially refused to check interactively otherwise (it\ncomplained that `0` could not be interpreted in `string_scope` before\nloading `Coq.Strings.String`).\n\nThere is unfortunately a decent amount of code duplication between\nnumeral notations and string notations.\n\nI have not put too much thought into chosing names; most names have been\nchosen to be similar to numeral notations, though I chose the name\n`byte` from\nhttps://github.com/coq/coq/issues/8483#issuecomment-421671785.\n\nUnfortunately, this feature does not support declaring string syntax for\n`list ascii`, unless that type is wrapped in a record or other inductive\ntype.  This is not a fundamental limitation; it should be relatively\neasy for someone who knows the API of the reduction machinery in Coq to\nextend both this and numeral notations to support any type whose hnf\nstarts with an inductive type.  (The reason for needing an inductive\ntype to bottom out at is that this is how the plugin determines what\nconstructors are the entry points for printing the given notation.\nHowever, see also https://github.com/coq/coq/issues/8964 for\ncomplications that are more likely to arise if inductive type families\nare supported.)\n\nN.B. I generated the long lists of constructors for the `byte` type with\nshort python scripts.\n\nCloses #8853\n","author_name":"Jason Gross","author_email":"jgross@mit.edu","authored_date":"2018-11-07T21:19:05.000-05:00","committer_name":"Jason Gross","committer_email":"jgross@mit.edu","committed_date":"2018-11-10T02:56:39.000-05:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/1fe92c616fe9c95c6650c1a85e690ecd336c3b24"},"pipeline":{"id":36106420,"iid":5115,"project_id":6138686,"sha":"1fe92c616fe9c95c6650c1a85e690ecd336c3b24","ref":"pr-8965","status":"failed","source":"push","created_at":"2018-11-10T07:56:57.703Z","updated_at":"2018-11-10T09:10:26.050Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36106420"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/118820034","artifacts":[{"file_type":"trace","size":1094,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":118820032,"status":"failed","stage":"test","name":"ci-plugin-tutorial","ref":"pr-8965","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-10T07:56:58.845Z","started_at":"2018-11-10T08:27:38.963Z","finished_at":"2018-11-10T08:27:47.511Z","duration":8.547677,"queued_duration":38.034487,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"1fe92c616fe9c95c6650c1a85e690ecd336c3b24","short_id":"1fe92c61","created_at":"2018-11-10T02:56:39.000-05:00","parent_ids":["ce8e37b97ce9db6f39368c50fb0ee4a7839ce754"],"title":"Add `String Notation` vernacular like `Numeral Notation`","message":"Add `String Notation` vernacular like `Numeral Notation`\n\nUsers can now register string notations for custom inductives.\n\nMuch of the code and documentation was copied from numeral notations.\n\nI chose to use a 256-constructor inductive for primitive string syntax\nbecause (a) it is easy to convert between character codes and\nconstructors, and (b) it is more efficient than the existing `ascii`\ntype.\n\nSome choices about proofs of the new `byte` type were made based on\nefficiency.  For example, https://github.com/coq/coq/issues/8517 means\nthat we cannot simply use `Scheme Equality` for this type, and I have\ntaken some care to ensure that the proofs of decidable equality and\nconversion are fast.  (Unfortunately, the `Init/Byte.v` file is the\nslowest one in the prelude (it takes a couple of seconds to build), and\nI'm not sure where the slowness is.)\n\nIn String.v, some uses of `0` as a `nat` were replaced by `O`, because\nthe file initially refused to check interactively otherwise (it\ncomplained that `0` could not be interpreted in `string_scope` before\nloading `Coq.Strings.String`).\n\nThere is unfortunately a decent amount of code duplication between\nnumeral notations and string notations.\n\nI have not put too much thought into chosing names; most names have been\nchosen to be similar to numeral notations, though I chose the name\n`byte` from\nhttps://github.com/coq/coq/issues/8483#issuecomment-421671785.\n\nUnfortunately, this feature does not support declaring string syntax for\n`list ascii`, unless that type is wrapped in a record or other inductive\ntype.  This is not a fundamental limitation; it should be relatively\neasy for someone who knows the API of the reduction machinery in Coq to\nextend both this and numeral notations to support any type whose hnf\nstarts with an inductive type.  (The reason for needing an inductive\ntype to bottom out at is that this is how the plugin determines what\nconstructors are the entry points for printing the given notation.\nHowever, see also https://github.com/coq/coq/issues/8964 for\ncomplications that are more likely to arise if inductive type families\nare supported.)\n\nN.B. I generated the long lists of constructors for the `byte` type with\nshort python scripts.\n\nCloses #8853\n","author_name":"Jason Gross","author_email":"jgross@mit.edu","authored_date":"2018-11-07T21:19:05.000-05:00","committer_name":"Jason Gross","committer_email":"jgross@mit.edu","committed_date":"2018-11-10T02:56:39.000-05:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/1fe92c616fe9c95c6650c1a85e690ecd336c3b24"},"pipeline":{"id":36106420,"iid":5115,"project_id":6138686,"sha":"1fe92c616fe9c95c6650c1a85e690ecd336c3b24","ref":"pr-8965","status":"failed","source":"push","created_at":"2018-11-10T07:56:57.703Z","updated_at":"2018-11-10T09:10:26.050Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36106420"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/118820032","artifacts":[{"file_type":"trace","size":1211,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":118820030,"status":"failed","stage":"test","name":"ci-pidetop","ref":"pr-8965","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-10T07:56:58.821Z","started_at":"2018-11-10T08:27:38.906Z","finished_at":"2018-11-10T08:30:10.110Z","duration":151.204049,"queued_duration":37.941889,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"1fe92c616fe9c95c6650c1a85e690ecd336c3b24","short_id":"1fe92c61","created_at":"2018-11-10T02:56:39.000-05:00","parent_ids":["ce8e37b97ce9db6f39368c50fb0ee4a7839ce754"],"title":"Add `String Notation` vernacular like `Numeral Notation`","message":"Add `String Notation` vernacular like `Numeral Notation`\n\nUsers can now register string notations for custom inductives.\n\nMuch of the code and documentation was copied from numeral notations.\n\nI chose to use a 256-constructor inductive for primitive string syntax\nbecause (a) it is easy to convert between character codes and\nconstructors, and (b) it is more efficient than the existing `ascii`\ntype.\n\nSome choices about proofs of the new `byte` type were made based on\nefficiency.  For example, https://github.com/coq/coq/issues/8517 means\nthat we cannot simply use `Scheme Equality` for this type, and I have\ntaken some care to ensure that the proofs of decidable equality and\nconversion are fast.  (Unfortunately, the `Init/Byte.v` file is the\nslowest one in the prelude (it takes a couple of seconds to build), and\nI'm not sure where the slowness is.)\n\nIn String.v, some uses of `0` as a `nat` were replaced by `O`, because\nthe file initially refused to check interactively otherwise (it\ncomplained that `0` could not be interpreted in `string_scope` before\nloading `Coq.Strings.String`).\n\nThere is unfortunately a decent amount of code duplication between\nnumeral notations and string notations.\n\nI have not put too much thought into chosing names; most names have been\nchosen to be similar to numeral notations, though I chose the name\n`byte` from\nhttps://github.com/coq/coq/issues/8483#issuecomment-421671785.\n\nUnfortunately, this feature does not support declaring string syntax for\n`list ascii`, unless that type is wrapped in a record or other inductive\ntype.  This is not a fundamental limitation; it should be relatively\neasy for someone who knows the API of the reduction machinery in Coq to\nextend both this and numeral notations to support any type whose hnf\nstarts with an inductive type.  (The reason for needing an inductive\ntype to bottom out at is that this is how the plugin determines what\nconstructors are the entry points for printing the given notation.\nHowever, see also https://github.com/coq/coq/issues/8964 for\ncomplications that are more likely to arise if inductive type families\nare supported.)\n\nN.B. I generated the long lists of constructors for the `byte` type with\nshort python scripts.\n\nCloses #8853\n","author_name":"Jason Gross","author_email":"jgross@mit.edu","authored_date":"2018-11-07T21:19:05.000-05:00","committer_name":"Jason Gross","committer_email":"jgross@mit.edu","committed_date":"2018-11-10T02:56:39.000-05:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/1fe92c616fe9c95c6650c1a85e690ecd336c3b24"},"pipeline":{"id":36106420,"iid":5115,"project_id":6138686,"sha":"1fe92c616fe9c95c6650c1a85e690ecd336c3b24","ref":"pr-8965","status":"failed","source":"push","created_at":"2018-11-10T07:56:57.703Z","updated_at":"2018-11-10T09:10:26.050Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36106420"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/118820030","artifacts":[{"file_type":"trace","size":1094,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":118820028,"status":"failed","stage":"test","name":"ci-mtac2","ref":"pr-8965","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-10T07:56:58.794Z","started_at":"2018-11-10T08:27:38.546Z","finished_at":"2018-11-10T08:30:05.947Z","duration":147.400607,"queued_duration":37.548957,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"1fe92c616fe9c95c6650c1a85e690ecd336c3b24","short_id":"1fe92c61","created_at":"2018-11-10T02:56:39.000-05:00","parent_ids":["ce8e37b97ce9db6f39368c50fb0ee4a7839ce754"],"title":"Add `String Notation` vernacular like `Numeral Notation`","message":"Add `String Notation` vernacular like `Numeral Notation`\n\nUsers can now register string notations for custom inductives.\n\nMuch of the code and documentation was copied from numeral notations.\n\nI chose to use a 256-constructor inductive for primitive string syntax\nbecause (a) it is easy to convert between character codes and\nconstructors, and (b) it is more efficient than the existing `ascii`\ntype.\n\nSome choices about proofs of the new `byte` type were made based on\nefficiency.  For example, https://github.com/coq/coq/issues/8517 means\nthat we cannot simply use `Scheme Equality` for this type, and I have\ntaken some care to ensure that the proofs of decidable equality and\nconversion are fast.  (Unfortunately, the `Init/Byte.v` file is the\nslowest one in the prelude (it takes a couple of seconds to build), and\nI'm not sure where the slowness is.)\n\nIn String.v, some uses of `0` as a `nat` were replaced by `O`, because\nthe file initially refused to check interactively otherwise (it\ncomplained that `0` could not be interpreted in `string_scope` before\nloading `Coq.Strings.String`).\n\nThere is unfortunately a decent amount of code duplication between\nnumeral notations and string notations.\n\nI have not put too much thought into chosing names; most names have been\nchosen to be similar to numeral notations, though I chose the name\n`byte` from\nhttps://github.com/coq/coq/issues/8483#issuecomment-421671785.\n\nUnfortunately, this feature does not support declaring string syntax for\n`list ascii`, unless that type is wrapped in a record or other inductive\ntype.  This is not a fundamental limitation; it should be relatively\neasy for someone who knows the API of the reduction machinery in Coq to\nextend both this and numeral notations to support any type whose hnf\nstarts with an inductive type.  (The reason for needing an inductive\ntype to bottom out at is that this is how the plugin determines what\nconstructors are the entry points for printing the given notation.\nHowever, see also https://github.com/coq/coq/issues/8964 for\ncomplications that are more likely to arise if inductive type families\nare supported.)\n\nN.B. I generated the long lists of constructors for the `byte` type with\nshort python scripts.\n\nCloses #8853\n","author_name":"Jason Gross","author_email":"jgross@mit.edu","authored_date":"2018-11-07T21:19:05.000-05:00","committer_name":"Jason Gross","committer_email":"jgross@mit.edu","committed_date":"2018-11-10T02:56:39.000-05:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/1fe92c616fe9c95c6650c1a85e690ecd336c3b24"},"pipeline":{"id":36106420,"iid":5115,"project_id":6138686,"sha":"1fe92c616fe9c95c6650c1a85e690ecd336c3b24","ref":"pr-8965","status":"failed","source":"push","created_at":"2018-11-10T07:56:57.703Z","updated_at":"2018-11-10T09:10:26.050Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36106420"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/118820028","artifacts":[{"file_type":"trace","size":1094,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":118820025,"status":"failed","stage":"test","name":"ci-math-comp","ref":"pr-8965","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-10T07:56:58.724Z","started_at":"2018-11-10T08:27:38.446Z","finished_at":"2018-11-10T08:30:03.019Z","duration":144.572215,"queued_duration":37.413666,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"1fe92c616fe9c95c6650c1a85e690ecd336c3b24","short_id":"1fe92c61","created_at":"2018-11-10T02:56:39.000-05:00","parent_ids":["ce8e37b97ce9db6f39368c50fb0ee4a7839ce754"],"title":"Add `String Notation` vernacular like `Numeral Notation`","message":"Add `String Notation` vernacular like `Numeral Notation`\n\nUsers can now register string notations for custom inductives.\n\nMuch of the code and documentation was copied from numeral notations.\n\nI chose to use a 256-constructor inductive for primitive string syntax\nbecause (a) it is easy to convert between character codes and\nconstructors, and (b) it is more efficient than the existing `ascii`\ntype.\n\nSome choices about proofs of the new `byte` type were made based on\nefficiency.  For example, https://github.com/coq/coq/issues/8517 means\nthat we cannot simply use `Scheme Equality` for this type, and I have\ntaken some care to ensure that the proofs of decidable equality and\nconversion are fast.  (Unfortunately, the `Init/Byte.v` file is the\nslowest one in the prelude (it takes a couple of seconds to build), and\nI'm not sure where the slowness is.)\n\nIn String.v, some uses of `0` as a `nat` were replaced by `O`, because\nthe file initially refused to check interactively otherwise (it\ncomplained that `0` could not be interpreted in `string_scope` before\nloading `Coq.Strings.String`).\n\nThere is unfortunately a decent amount of code duplication between\nnumeral notations and string notations.\n\nI have not put too much thought into chosing names; most names have been\nchosen to be similar to numeral notations, though I chose the name\n`byte` from\nhttps://github.com/coq/coq/issues/8483#issuecomment-421671785.\n\nUnfortunately, this feature does not support declaring string syntax for\n`list ascii`, unless that type is wrapped in a record or other inductive\ntype.  This is not a fundamental limitation; it should be relatively\neasy for someone who knows the API of the reduction machinery in Coq to\nextend both this and numeral notations to support any type whose hnf\nstarts with an inductive type.  (The reason for needing an inductive\ntype to bottom out at is that this is how the plugin determines what\nconstructors are the entry points for printing the given notation.\nHowever, see also https://github.com/coq/coq/issues/8964 for\ncomplications that are more likely to arise if inductive type families\nare supported.)\n\nN.B. I generated the long lists of constructors for the `byte` type with\nshort python scripts.\n\nCloses #8853\n","author_name":"Jason Gross","author_email":"jgross@mit.edu","authored_date":"2018-11-07T21:19:05.000-05:00","committer_name":"Jason Gross","committer_email":"jgross@mit.edu","committed_date":"2018-11-10T02:56:39.000-05:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/1fe92c616fe9c95c6650c1a85e690ecd336c3b24"},"pipeline":{"id":36106420,"iid":5115,"project_id":6138686,"sha":"1fe92c616fe9c95c6650c1a85e690ecd336c3b24","ref":"pr-8965","status":"failed","source":"push","created_at":"2018-11-10T07:56:57.703Z","updated_at":"2018-11-10T09:10:26.050Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36106420"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/118820025","artifacts":[{"file_type":"trace","size":1094,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":118820024,"status":"failed","stage":"test","name":"ci-ltac2","ref":"pr-8965","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-10T07:56:58.703Z","started_at":"2018-11-10T08:27:38.280Z","finished_at":"2018-11-10T08:30:07.523Z","duration":149.242919,"queued_duration":37.215781,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"1fe92c616fe9c95c6650c1a85e690ecd336c3b24","short_id":"1fe92c61","created_at":"2018-11-10T02:56:39.000-05:00","parent_ids":["ce8e37b97ce9db6f39368c50fb0ee4a7839ce754"],"title":"Add `String Notation` vernacular like `Numeral Notation`","message":"Add `String Notation` vernacular like `Numeral Notation`\n\nUsers can now register string notations for custom inductives.\n\nMuch of the code and documentation was copied from numeral notations.\n\nI chose to use a 256-constructor inductive for primitive string syntax\nbecause (a) it is easy to convert between character codes and\nconstructors, and (b) it is more efficient than the existing `ascii`\ntype.\n\nSome choices about proofs of the new `byte` type were made based on\nefficiency.  For example, https://github.com/coq/coq/issues/8517 means\nthat we cannot simply use `Scheme Equality` for this type, and I have\ntaken some care to ensure that the proofs of decidable equality and\nconversion are fast.  (Unfortunately, the `Init/Byte.v` file is the\nslowest one in the prelude (it takes a couple of seconds to build), and\nI'm not sure where the slowness is.)\n\nIn String.v, some uses of `0` as a `nat` were replaced by `O`, because\nthe file initially refused to check interactively otherwise (it\ncomplained that `0` could not be interpreted in `string_scope` before\nloading `Coq.Strings.String`).\n\nThere is unfortunately a decent amount of code duplication between\nnumeral notations and string notations.\n\nI have not put too much thought into chosing names; most names have been\nchosen to be similar to numeral notations, though I chose the name\n`byte` from\nhttps://github.com/coq/coq/issues/8483#issuecomment-421671785.\n\nUnfortunately, this feature does not support declaring string syntax for\n`list ascii`, unless that type is wrapped in a record or other inductive\ntype.  This is not a fundamental limitation; it should be relatively\neasy for someone who knows the API of the reduction machinery in Coq to\nextend both this and numeral notations to support any type whose hnf\nstarts with an inductive type.  (The reason for needing an inductive\ntype to bottom out at is that this is how the plugin determines what\nconstructors are the entry points for printing the given notation.\nHowever, see also https://github.com/coq/coq/issues/8964 for\ncomplications that are more likely to arise if inductive type families\nare supported.)\n\nN.B. I generated the long lists of constructors for the `byte` type with\nshort python scripts.\n\nCloses #8853\n","author_name":"Jason Gross","author_email":"jgross@mit.edu","authored_date":"2018-11-07T21:19:05.000-05:00","committer_name":"Jason Gross","committer_email":"jgross@mit.edu","committed_date":"2018-11-10T02:56:39.000-05:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/1fe92c616fe9c95c6650c1a85e690ecd336c3b24"},"pipeline":{"id":36106420,"iid":5115,"project_id":6138686,"sha":"1fe92c616fe9c95c6650c1a85e690ecd336c3b24","ref":"pr-8965","status":"failed","source":"push","created_at":"2018-11-10T07:56:57.703Z","updated_at":"2018-11-10T09:10:26.050Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36106420"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/118820024","artifacts":[{"file_type":"trace","size":1094,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":118820022,"status":"failed","stage":"test","name":"ci-iris-lambda-rust","ref":"pr-8965","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-10T07:56:58.679Z","started_at":"2018-11-10T08:27:38.115Z","finished_at":"2018-11-10T08:30:07.407Z","duration":149.292521,"queued_duration":36.984231,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"1fe92c616fe9c95c6650c1a85e690ecd336c3b24","short_id":"1fe92c61","created_at":"2018-11-10T02:56:39.000-05:00","parent_ids":["ce8e37b97ce9db6f39368c50fb0ee4a7839ce754"],"title":"Add `String Notation` vernacular like `Numeral Notation`","message":"Add `String Notation` vernacular like `Numeral Notation`\n\nUsers can now register string notations for custom inductives.\n\nMuch of the code and documentation was copied from numeral notations.\n\nI chose to use a 256-constructor inductive for primitive string syntax\nbecause (a) it is easy to convert between character codes and\nconstructors, and (b) it is more efficient than the existing `ascii`\ntype.\n\nSome choices about proofs of the new `byte` type were made based on\nefficiency.  For example, https://github.com/coq/coq/issues/8517 means\nthat we cannot simply use `Scheme Equality` for this type, and I have\ntaken some care to ensure that the proofs of decidable equality and\nconversion are fast.  (Unfortunately, the `Init/Byte.v` file is the\nslowest one in the prelude (it takes a couple of seconds to build), and\nI'm not sure where the slowness is.)\n\nIn String.v, some uses of `0` as a `nat` were replaced by `O`, because\nthe file initially refused to check interactively otherwise (it\ncomplained that `0` could not be interpreted in `string_scope` before\nloading `Coq.Strings.String`).\n\nThere is unfortunately a decent amount of code duplication between\nnumeral notations and string notations.\n\nI have not put too much thought into chosing names; most names have been\nchosen to be similar to numeral notations, though I chose the name\n`byte` from\nhttps://github.com/coq/coq/issues/8483#issuecomment-421671785.\n\nUnfortunately, this feature does not support declaring string syntax for\n`list ascii`, unless that type is wrapped in a record or other inductive\ntype.  This is not a fundamental limitation; it should be relatively\neasy for someone who knows the API of the reduction machinery in Coq to\nextend both this and numeral notations to support any type whose hnf\nstarts with an inductive type.  (The reason for needing an inductive\ntype to bottom out at is that this is how the plugin determines what\nconstructors are the entry points for printing the given notation.\nHowever, see also https://github.com/coq/coq/issues/8964 for\ncomplications that are more likely to arise if inductive type families\nare supported.)\n\nN.B. I generated the long lists of constructors for the `byte` type with\nshort python scripts.\n\nCloses #8853\n","author_name":"Jason Gross","author_email":"jgross@mit.edu","authored_date":"2018-11-07T21:19:05.000-05:00","committer_name":"Jason Gross","committer_email":"jgross@mit.edu","committed_date":"2018-11-10T02:56:39.000-05:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/1fe92c616fe9c95c6650c1a85e690ecd336c3b24"},"pipeline":{"id":36106420,"iid":5115,"project_id":6138686,"sha":"1fe92c616fe9c95c6650c1a85e690ecd336c3b24","ref":"pr-8965","status":"failed","source":"push","created_at":"2018-11-10T07:56:57.703Z","updated_at":"2018-11-10T09:10:26.050Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36106420"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/118820022","artifacts":[{"file_type":"trace","size":1094,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":118820020,"status":"failed","stage":"test","name":"ci-hott","ref":"pr-8965","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-10T07:56:58.650Z","started_at":"2018-11-10T08:27:38.052Z","finished_at":"2018-11-10T08:30:05.935Z","duration":147.883045,"queued_duration":36.888818,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"1fe92c616fe9c95c6650c1a85e690ecd336c3b24","short_id":"1fe92c61","created_at":"2018-11-10T02:56:39.000-05:00","parent_ids":["ce8e37b97ce9db6f39368c50fb0ee4a7839ce754"],"title":"Add `String Notation` vernacular like `Numeral Notation`","message":"Add `String Notation` vernacular like `Numeral Notation`\n\nUsers can now register string notations for custom inductives.\n\nMuch of the code and documentation was copied from numeral notations.\n\nI chose to use a 256-constructor inductive for primitive string syntax\nbecause (a) it is easy to convert between character codes and\nconstructors, and (b) it is more efficient than the existing `ascii`\ntype.\n\nSome choices about proofs of the new `byte` type were made based on\nefficiency.  For example, https://github.com/coq/coq/issues/8517 means\nthat we cannot simply use `Scheme Equality` for this type, and I have\ntaken some care to ensure that the proofs of decidable equality and\nconversion are fast.  (Unfortunately, the `Init/Byte.v` file is the\nslowest one in the prelude (it takes a couple of seconds to build), and\nI'm not sure where the slowness is.)\n\nIn String.v, some uses of `0` as a `nat` were replaced by `O`, because\nthe file initially refused to check interactively otherwise (it\ncomplained that `0` could not be interpreted in `string_scope` before\nloading `Coq.Strings.String`).\n\nThere is unfortunately a decent amount of code duplication between\nnumeral notations and string notations.\n\nI have not put too much thought into chosing names; most names have been\nchosen to be similar to numeral notations, though I chose the name\n`byte` from\nhttps://github.com/coq/coq/issues/8483#issuecomment-421671785.\n\nUnfortunately, this feature does not support declaring string syntax for\n`list ascii`, unless that type is wrapped in a record or other inductive\ntype.  This is not a fundamental limitation; it should be relatively\neasy for someone who knows the API of the reduction machinery in Coq to\nextend both this and numeral notations to support any type whose hnf\nstarts with an inductive type.  (The reason for needing an inductive\ntype to bottom out at is that this is how the plugin determines what\nconstructors are the entry points for printing the given notation.\nHowever, see also https://github.com/coq/coq/issues/8964 for\ncomplications that are more likely to arise if inductive type families\nare supported.)\n\nN.B. I generated the long lists of constructors for the `byte` type with\nshort python scripts.\n\nCloses #8853\n","author_name":"Jason Gross","author_email":"jgross@mit.edu","authored_date":"2018-11-07T21:19:05.000-05:00","committer_name":"Jason Gross","committer_email":"jgross@mit.edu","committed_date":"2018-11-10T02:56:39.000-05:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/1fe92c616fe9c95c6650c1a85e690ecd336c3b24"},"pipeline":{"id":36106420,"iid":5115,"project_id":6138686,"sha":"1fe92c616fe9c95c6650c1a85e690ecd336c3b24","ref":"pr-8965","status":"failed","source":"push","created_at":"2018-11-10T07:56:57.703Z","updated_at":"2018-11-10T09:10:26.050Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36106420"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/118820020","artifacts":[{"file_type":"trace","size":1094,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":118820018,"status":"failed","stage":"test","name":"ci-geocoq","ref":"pr-8965","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-10T07:56:58.625Z","started_at":"2018-11-10T08:27:37.905Z","finished_at":"2018-11-10T08:30:06.623Z","duration":148.717596,"queued_duration":36.707721,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"1fe92c616fe9c95c6650c1a85e690ecd336c3b24","short_id":"1fe92c61","created_at":"2018-11-10T02:56:39.000-05:00","parent_ids":["ce8e37b97ce9db6f39368c50fb0ee4a7839ce754"],"title":"Add `String Notation` vernacular like `Numeral Notation`","message":"Add `String Notation` vernacular like `Numeral Notation`\n\nUsers can now register string notations for custom inductives.\n\nMuch of the code and documentation was copied from numeral notations.\n\nI chose to use a 256-constructor inductive for primitive string syntax\nbecause (a) it is easy to convert between character codes and\nconstructors, and (b) it is more efficient than the existing `ascii`\ntype.\n\nSome choices about proofs of the new `byte` type were made based on\nefficiency.  For example, https://github.com/coq/coq/issues/8517 means\nthat we cannot simply use `Scheme Equality` for this type, and I have\ntaken some care to ensure that the proofs of decidable equality and\nconversion are fast.  (Unfortunately, the `Init/Byte.v` file is the\nslowest one in the prelude (it takes a couple of seconds to build), and\nI'm not sure where the slowness is.)\n\nIn String.v, some uses of `0` as a `nat` were replaced by `O`, because\nthe file initially refused to check interactively otherwise (it\ncomplained that `0` could not be interpreted in `string_scope` before\nloading `Coq.Strings.String`).\n\nThere is unfortunately a decent amount of code duplication between\nnumeral notations and string notations.\n\nI have not put too much thought into chosing names; most names have been\nchosen to be similar to numeral notations, though I chose the name\n`byte` from\nhttps://github.com/coq/coq/issues/8483#issuecomment-421671785.\n\nUnfortunately, this feature does not support declaring string syntax for\n`list ascii`, unless that type is wrapped in a record or other inductive\ntype.  This is not a fundamental limitation; it should be relatively\neasy for someone who knows the API of the reduction machinery in Coq to\nextend both this and numeral notations to support any type whose hnf\nstarts with an inductive type.  (The reason for needing an inductive\ntype to bottom out at is that this is how the plugin determines what\nconstructors are the entry points for printing the given notation.\nHowever, see also https://github.com/coq/coq/issues/8964 for\ncomplications that are more likely to arise if inductive type families\nare supported.)\n\nN.B. I generated the long lists of constructors for the `byte` type with\nshort python scripts.\n\nCloses #8853\n","author_name":"Jason Gross","author_email":"jgross@mit.edu","authored_date":"2018-11-07T21:19:05.000-05:00","committer_name":"Jason Gross","committer_email":"jgross@mit.edu","committed_date":"2018-11-10T02:56:39.000-05:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/1fe92c616fe9c95c6650c1a85e690ecd336c3b24"},"pipeline":{"id":36106420,"iid":5115,"project_id":6138686,"sha":"1fe92c616fe9c95c6650c1a85e690ecd336c3b24","ref":"pr-8965","status":"failed","source":"push","created_at":"2018-11-10T07:56:57.703Z","updated_at":"2018-11-10T09:10:26.050Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36106420"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/118820018","artifacts":[{"file_type":"trace","size":1094,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":118820017,"status":"failed","stage":"test","name":"ci-formal-topology","ref":"pr-8965","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-10T07:56:58.604Z","started_at":"2018-11-10T08:27:37.865Z","finished_at":"2018-11-10T08:30:09.817Z","duration":151.951913,"queued_duration":36.636753,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"1fe92c616fe9c95c6650c1a85e690ecd336c3b24","short_id":"1fe92c61","created_at":"2018-11-10T02:56:39.000-05:00","parent_ids":["ce8e37b97ce9db6f39368c50fb0ee4a7839ce754"],"title":"Add `String Notation` vernacular like `Numeral Notation`","message":"Add `String Notation` vernacular like `Numeral Notation`\n\nUsers can now register string notations for custom inductives.\n\nMuch of the code and documentation was copied from numeral notations.\n\nI chose to use a 256-constructor inductive for primitive string syntax\nbecause (a) it is easy to convert between character codes and\nconstructors, and (b) it is more efficient than the existing `ascii`\ntype.\n\nSome choices about proofs of the new `byte` type were made based on\nefficiency.  For example, https://github.com/coq/coq/issues/8517 means\nthat we cannot simply use `Scheme Equality` for this type, and I have\ntaken some care to ensure that the proofs of decidable equality and\nconversion are fast.  (Unfortunately, the `Init/Byte.v` file is the\nslowest one in the prelude (it takes a couple of seconds to build), and\nI'm not sure where the slowness is.)\n\nIn String.v, some uses of `0` as a `nat` were replaced by `O`, because\nthe file initially refused to check interactively otherwise (it\ncomplained that `0` could not be interpreted in `string_scope` before\nloading `Coq.Strings.String`).\n\nThere is unfortunately a decent amount of code duplication between\nnumeral notations and string notations.\n\nI have not put too much thought into chosing names; most names have been\nchosen to be similar to numeral notations, though I chose the name\n`byte` from\nhttps://github.com/coq/coq/issues/8483#issuecomment-421671785.\n\nUnfortunately, this feature does not support declaring string syntax for\n`list ascii`, unless that type is wrapped in a record or other inductive\ntype.  This is not a fundamental limitation; it should be relatively\neasy for someone who knows the API of the reduction machinery in Coq to\nextend both this and numeral notations to support any type whose hnf\nstarts with an inductive type.  (The reason for needing an inductive\ntype to bottom out at is that this is how the plugin determines what\nconstructors are the entry points for printing the given notation.\nHowever, see also https://github.com/coq/coq/issues/8964 for\ncomplications that are more likely to arise if inductive type families\nare supported.)\n\nN.B. I generated the long lists of constructors for the `byte` type with\nshort python scripts.\n\nCloses #8853\n","author_name":"Jason Gross","author_email":"jgross@mit.edu","authored_date":"2018-11-07T21:19:05.000-05:00","committer_name":"Jason Gross","committer_email":"jgross@mit.edu","committed_date":"2018-11-10T02:56:39.000-05:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/1fe92c616fe9c95c6650c1a85e690ecd336c3b24"},"pipeline":{"id":36106420,"iid":5115,"project_id":6138686,"sha":"1fe92c616fe9c95c6650c1a85e690ecd336c3b24","ref":"pr-8965","status":"failed","source":"push","created_at":"2018-11-10T07:56:57.703Z","updated_at":"2018-11-10T09:10:26.050Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36106420"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/118820017","artifacts":[{"file_type":"trace","size":1094,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":118820015,"status":"failed","stage":"test","name":"ci-flocq","ref":"pr-8965","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-10T07:56:58.573Z","started_at":"2018-11-10T08:27:37.781Z","finished_at":"2018-11-10T08:30:06.613Z","duration":148.832299,"queued_duration":36.520638,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"1fe92c616fe9c95c6650c1a85e690ecd336c3b24","short_id":"1fe92c61","created_at":"2018-11-10T02:56:39.000-05:00","parent_ids":["ce8e37b97ce9db6f39368c50fb0ee4a7839ce754"],"title":"Add `String Notation` vernacular like `Numeral Notation`","message":"Add `String Notation` vernacular like `Numeral Notation`\n\nUsers can now register string notations for custom inductives.\n\nMuch of the code and documentation was copied from numeral notations.\n\nI chose to use a 256-constructor inductive for primitive string syntax\nbecause (a) it is easy to convert between character codes and\nconstructors, and (b) it is more efficient than the existing `ascii`\ntype.\n\nSome choices about proofs of the new `byte` type were made based on\nefficiency.  For example, https://github.com/coq/coq/issues/8517 means\nthat we cannot simply use `Scheme Equality` for this type, and I have\ntaken some care to ensure that the proofs of decidable equality and\nconversion are fast.  (Unfortunately, the `Init/Byte.v` file is the\nslowest one in the prelude (it takes a couple of seconds to build), and\nI'm not sure where the slowness is.)\n\nIn String.v, some uses of `0` as a `nat` were replaced by `O`, because\nthe file initially refused to check interactively otherwise (it\ncomplained that `0` could not be interpreted in `string_scope` before\nloading `Coq.Strings.String`).\n\nThere is unfortunately a decent amount of code duplication between\nnumeral notations and string notations.\n\nI have not put too much thought into chosing names; most names have been\nchosen to be similar to numeral notations, though I chose the name\n`byte` from\nhttps://github.com/coq/coq/issues/8483#issuecomment-421671785.\n\nUnfortunately, this feature does not support declaring string syntax for\n`list ascii`, unless that type is wrapped in a record or other inductive\ntype.  This is not a fundamental limitation; it should be relatively\neasy for someone who knows the API of the reduction machinery in Coq to\nextend both this and numeral notations to support any type whose hnf\nstarts with an inductive type.  (The reason for needing an inductive\ntype to bottom out at is that this is how the plugin determines what\nconstructors are the entry points for printing the given notation.\nHowever, see also https://github.com/coq/coq/issues/8964 for\ncomplications that are more likely to arise if inductive type families\nare supported.)\n\nN.B. I generated the long lists of constructors for the `byte` type with\nshort python scripts.\n\nCloses #8853\n","author_name":"Jason Gross","author_email":"jgross@mit.edu","authored_date":"2018-11-07T21:19:05.000-05:00","committer_name":"Jason Gross","committer_email":"jgross@mit.edu","committed_date":"2018-11-10T02:56:39.000-05:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/1fe92c616fe9c95c6650c1a85e690ecd336c3b24"},"pipeline":{"id":36106420,"iid":5115,"project_id":6138686,"sha":"1fe92c616fe9c95c6650c1a85e690ecd336c3b24","ref":"pr-8965","status":"failed","source":"push","created_at":"2018-11-10T07:56:57.703Z","updated_at":"2018-11-10T09:10:26.050Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36106420"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/118820015","artifacts":[{"file_type":"trace","size":1094,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":118820013,"status":"failed","stage":"test","name":"ci-fiat-parsers","ref":"pr-8965","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-10T07:56:58.550Z","started_at":"2018-11-10T08:27:37.717Z","finished_at":"2018-11-10T08:30:10.683Z","duration":152.966254,"queued_duration":36.428174,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"1fe92c616fe9c95c6650c1a85e690ecd336c3b24","short_id":"1fe92c61","created_at":"2018-11-10T02:56:39.000-05:00","parent_ids":["ce8e37b97ce9db6f39368c50fb0ee4a7839ce754"],"title":"Add `String Notation` vernacular like `Numeral Notation`","message":"Add `String Notation` vernacular like `Numeral Notation`\n\nUsers can now register string notations for custom inductives.\n\nMuch of the code and documentation was copied from numeral notations.\n\nI chose to use a 256-constructor inductive for primitive string syntax\nbecause (a) it is easy to convert between character codes and\nconstructors, and (b) it is more efficient than the existing `ascii`\ntype.\n\nSome choices about proofs of the new `byte` type were made based on\nefficiency.  For example, https://github.com/coq/coq/issues/8517 means\nthat we cannot simply use `Scheme Equality` for this type, and I have\ntaken some care to ensure that the proofs of decidable equality and\nconversion are fast.  (Unfortunately, the `Init/Byte.v` file is the\nslowest one in the prelude (it takes a couple of seconds to build), and\nI'm not sure where the slowness is.)\n\nIn String.v, some uses of `0` as a `nat` were replaced by `O`, because\nthe file initially refused to check interactively otherwise (it\ncomplained that `0` could not be interpreted in `string_scope` before\nloading `Coq.Strings.String`).\n\nThere is unfortunately a decent amount of code duplication between\nnumeral notations and string notations.\n\nI have not put too much thought into chosing names; most names have been\nchosen to be similar to numeral notations, though I chose the name\n`byte` from\nhttps://github.com/coq/coq/issues/8483#issuecomment-421671785.\n\nUnfortunately, this feature does not support declaring string syntax for\n`list ascii`, unless that type is wrapped in a record or other inductive\ntype.  This is not a fundamental limitation; it should be relatively\neasy for someone who knows the API of the reduction machinery in Coq to\nextend both this and numeral notations to support any type whose hnf\nstarts with an inductive type.  (The reason for needing an inductive\ntype to bottom out at is that this is how the plugin determines what\nconstructors are the entry points for printing the given notation.\nHowever, see also https://github.com/coq/coq/issues/8964 for\ncomplications that are more likely to arise if inductive type families\nare supported.)\n\nN.B. I generated the long lists of constructors for the `byte` type with\nshort python scripts.\n\nCloses #8853\n","author_name":"Jason Gross","author_email":"jgross@mit.edu","authored_date":"2018-11-07T21:19:05.000-05:00","committer_name":"Jason Gross","committer_email":"jgross@mit.edu","committed_date":"2018-11-10T02:56:39.000-05:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/1fe92c616fe9c95c6650c1a85e690ecd336c3b24"},"pipeline":{"id":36106420,"iid":5115,"project_id":6138686,"sha":"1fe92c616fe9c95c6650c1a85e690ecd336c3b24","ref":"pr-8965","status":"failed","source":"push","created_at":"2018-11-10T07:56:57.703Z","updated_at":"2018-11-10T09:10:26.050Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36106420"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/118820013","artifacts":[{"file_type":"trace","size":1094,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":118820011,"status":"failed","stage":"test","name":"ci-fiat-crypto-legacy","ref":"pr-8965","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-10T07:56:58.528Z","started_at":"2018-11-10T08:27:37.621Z","finished_at":"2018-11-10T08:30:11.514Z","duration":153.893265,"queued_duration":36.283851,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"1fe92c616fe9c95c6650c1a85e690ecd336c3b24","short_id":"1fe92c61","created_at":"2018-11-10T02:56:39.000-05:00","parent_ids":["ce8e37b97ce9db6f39368c50fb0ee4a7839ce754"],"title":"Add `String Notation` vernacular like `Numeral Notation`","message":"Add `String Notation` vernacular like `Numeral Notation`\n\nUsers can now register string notations for custom inductives.\n\nMuch of the code and documentation was copied from numeral notations.\n\nI chose to use a 256-constructor inductive for primitive string syntax\nbecause (a) it is easy to convert between character codes and\nconstructors, and (b) it is more efficient than the existing `ascii`\ntype.\n\nSome choices about proofs of the new `byte` type were made based on\nefficiency.  For example, https://github.com/coq/coq/issues/8517 means\nthat we cannot simply use `Scheme Equality` for this type, and I have\ntaken some care to ensure that the proofs of decidable equality and\nconversion are fast.  (Unfortunately, the `Init/Byte.v` file is the\nslowest one in the prelude (it takes a couple of seconds to build), and\nI'm not sure where the slowness is.)\n\nIn String.v, some uses of `0` as a `nat` were replaced by `O`, because\nthe file initially refused to check interactively otherwise (it\ncomplained that `0` could not be interpreted in `string_scope` before\nloading `Coq.Strings.String`).\n\nThere is unfortunately a decent amount of code duplication between\nnumeral notations and string notations.\n\nI have not put too much thought into chosing names; most names have been\nchosen to be similar to numeral notations, though I chose the name\n`byte` from\nhttps://github.com/coq/coq/issues/8483#issuecomment-421671785.\n\nUnfortunately, this feature does not support declaring string syntax for\n`list ascii`, unless that type is wrapped in a record or other inductive\ntype.  This is not a fundamental limitation; it should be relatively\neasy for someone who knows the API of the reduction machinery in Coq to\nextend both this and numeral notations to support any type whose hnf\nstarts with an inductive type.  (The reason for needing an inductive\ntype to bottom out at is that this is how the plugin determines what\nconstructors are the entry points for printing the given notation.\nHowever, see also https://github.com/coq/coq/issues/8964 for\ncomplications that are more likely to arise if inductive type families\nare supported.)\n\nN.B. I generated the long lists of constructors for the `byte` type with\nshort python scripts.\n\nCloses #8853\n","author_name":"Jason Gross","author_email":"jgross@mit.edu","authored_date":"2018-11-07T21:19:05.000-05:00","committer_name":"Jason Gross","committer_email":"jgross@mit.edu","committed_date":"2018-11-10T02:56:39.000-05:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/1fe92c616fe9c95c6650c1a85e690ecd336c3b24"},"pipeline":{"id":36106420,"iid":5115,"project_id":6138686,"sha":"1fe92c616fe9c95c6650c1a85e690ecd336c3b24","ref":"pr-8965","status":"failed","source":"push","created_at":"2018-11-10T07:56:57.703Z","updated_at":"2018-11-10T09:10:26.050Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36106420"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/118820011","artifacts":[{"file_type":"trace","size":1094,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":118820010,"status":"failed","stage":"test","name":"ci-fiat-crypto","ref":"pr-8965","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-10T07:56:58.504Z","started_at":"2018-11-10T08:27:37.547Z","finished_at":"2018-11-10T08:30:07.037Z","duration":149.490165,"queued_duration":36.176482,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"1fe92c616fe9c95c6650c1a85e690ecd336c3b24","short_id":"1fe92c61","created_at":"2018-11-10T02:56:39.000-05:00","parent_ids":["ce8e37b97ce9db6f39368c50fb0ee4a7839ce754"],"title":"Add `String Notation` vernacular like `Numeral Notation`","message":"Add `String Notation` vernacular like `Numeral Notation`\n\nUsers can now register string notations for custom inductives.\n\nMuch of the code and documentation was copied from numeral notations.\n\nI chose to use a 256-constructor inductive for primitive string syntax\nbecause (a) it is easy to convert between character codes and\nconstructors, and (b) it is more efficient than the existing `ascii`\ntype.\n\nSome choices about proofs of the new `byte` type were made based on\nefficiency.  For example, https://github.com/coq/coq/issues/8517 means\nthat we cannot simply use `Scheme Equality` for this type, and I have\ntaken some care to ensure that the proofs of decidable equality and\nconversion are fast.  (Unfortunately, the `Init/Byte.v` file is the\nslowest one in the prelude (it takes a couple of seconds to build), and\nI'm not sure where the slowness is.)\n\nIn String.v, some uses of `0` as a `nat` were replaced by `O`, because\nthe file initially refused to check interactively otherwise (it\ncomplained that `0` could not be interpreted in `string_scope` before\nloading `Coq.Strings.String`).\n\nThere is unfortunately a decent amount of code duplication between\nnumeral notations and string notations.\n\nI have not put too much thought into chosing names; most names have been\nchosen to be similar to numeral notations, though I chose the name\n`byte` from\nhttps://github.com/coq/coq/issues/8483#issuecomment-421671785.\n\nUnfortunately, this feature does not support declaring string syntax for\n`list ascii`, unless that type is wrapped in a record or other inductive\ntype.  This is not a fundamental limitation; it should be relatively\neasy for someone who knows the API of the reduction machinery in Coq to\nextend both this and numeral notations to support any type whose hnf\nstarts with an inductive type.  (The reason for needing an inductive\ntype to bottom out at is that this is how the plugin determines what\nconstructors are the entry points for printing the given notation.\nHowever, see also https://github.com/coq/coq/issues/8964 for\ncomplications that are more likely to arise if inductive type families\nare supported.)\n\nN.B. I generated the long lists of constructors for the `byte` type with\nshort python scripts.\n\nCloses #8853\n","author_name":"Jason Gross","author_email":"jgross@mit.edu","authored_date":"2018-11-07T21:19:05.000-05:00","committer_name":"Jason Gross","committer_email":"jgross@mit.edu","committed_date":"2018-11-10T02:56:39.000-05:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/1fe92c616fe9c95c6650c1a85e690ecd336c3b24"},"pipeline":{"id":36106420,"iid":5115,"project_id":6138686,"sha":"1fe92c616fe9c95c6650c1a85e690ecd336c3b24","ref":"pr-8965","status":"failed","source":"push","created_at":"2018-11-10T07:56:57.703Z","updated_at":"2018-11-10T09:10:26.050Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36106420"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/118820010","artifacts":[{"file_type":"trace","size":1094,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":118820008,"status":"failed","stage":"test","name":"ci-fcsl-pcm","ref":"pr-8965","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-10T07:56:58.476Z","started_at":"2018-11-10T08:27:35.898Z","finished_at":"2018-11-10T08:27:43.990Z","duration":8.09137,"queued_duration":34.492233,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"1fe92c616fe9c95c6650c1a85e690ecd336c3b24","short_id":"1fe92c61","created_at":"2018-11-10T02:56:39.000-05:00","parent_ids":["ce8e37b97ce9db6f39368c50fb0ee4a7839ce754"],"title":"Add `String Notation` vernacular like `Numeral Notation`","message":"Add `String Notation` vernacular like `Numeral Notation`\n\nUsers can now register string notations for custom inductives.\n\nMuch of the code and documentation was copied from numeral notations.\n\nI chose to use a 256-constructor inductive for primitive string syntax\nbecause (a) it is easy to convert between character codes and\nconstructors, and (b) it is more efficient than the existing `ascii`\ntype.\n\nSome choices about proofs of the new `byte` type were made based on\nefficiency.  For example, https://github.com/coq/coq/issues/8517 means\nthat we cannot simply use `Scheme Equality` for this type, and I have\ntaken some care to ensure that the proofs of decidable equality and\nconversion are fast.  (Unfortunately, the `Init/Byte.v` file is the\nslowest one in the prelude (it takes a couple of seconds to build), and\nI'm not sure where the slowness is.)\n\nIn String.v, some uses of `0` as a `nat` were replaced by `O`, because\nthe file initially refused to check interactively otherwise (it\ncomplained that `0` could not be interpreted in `string_scope` before\nloading `Coq.Strings.String`).\n\nThere is unfortunately a decent amount of code duplication between\nnumeral notations and string notations.\n\nI have not put too much thought into chosing names; most names have been\nchosen to be similar to numeral notations, though I chose the name\n`byte` from\nhttps://github.com/coq/coq/issues/8483#issuecomment-421671785.\n\nUnfortunately, this feature does not support declaring string syntax for\n`list ascii`, unless that type is wrapped in a record or other inductive\ntype.  This is not a fundamental limitation; it should be relatively\neasy for someone who knows the API of the reduction machinery in Coq to\nextend both this and numeral notations to support any type whose hnf\nstarts with an inductive type.  (The reason for needing an inductive\ntype to bottom out at is that this is how the plugin determines what\nconstructors are the entry points for printing the given notation.\nHowever, see also https://github.com/coq/coq/issues/8964 for\ncomplications that are more likely to arise if inductive type families\nare supported.)\n\nN.B. I generated the long lists of constructors for the `byte` type with\nshort python scripts.\n\nCloses #8853\n","author_name":"Jason Gross","author_email":"jgross@mit.edu","authored_date":"2018-11-07T21:19:05.000-05:00","committer_name":"Jason Gross","committer_email":"jgross@mit.edu","committed_date":"2018-11-10T02:56:39.000-05:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/1fe92c616fe9c95c6650c1a85e690ecd336c3b24"},"pipeline":{"id":36106420,"iid":5115,"project_id":6138686,"sha":"1fe92c616fe9c95c6650c1a85e690ecd336c3b24","ref":"pr-8965","status":"failed","source":"push","created_at":"2018-11-10T07:56:57.703Z","updated_at":"2018-11-10T09:10:26.050Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36106420"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/118820008","artifacts":[{"file_type":"trace","size":1211,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":118820006,"status":"failed","stage":"test","name":"ci-equations","ref":"pr-8965","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-10T07:56:58.451Z","started_at":"2018-11-10T08:27:32.664Z","finished_at":"2018-11-10T08:27:42.672Z","duration":10.007582,"queued_duration":31.222584,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"1fe92c616fe9c95c6650c1a85e690ecd336c3b24","short_id":"1fe92c61","created_at":"2018-11-10T02:56:39.000-05:00","parent_ids":["ce8e37b97ce9db6f39368c50fb0ee4a7839ce754"],"title":"Add `String Notation` vernacular like `Numeral Notation`","message":"Add `String Notation` vernacular like `Numeral Notation`\n\nUsers can now register string notations for custom inductives.\n\nMuch of the code and documentation was copied from numeral notations.\n\nI chose to use a 256-constructor inductive for primitive string syntax\nbecause (a) it is easy to convert between character codes and\nconstructors, and (b) it is more efficient than the existing `ascii`\ntype.\n\nSome choices about proofs of the new `byte` type were made based on\nefficiency.  For example, https://github.com/coq/coq/issues/8517 means\nthat we cannot simply use `Scheme Equality` for this type, and I have\ntaken some care to ensure that the proofs of decidable equality and\nconversion are fast.  (Unfortunately, the `Init/Byte.v` file is the\nslowest one in the prelude (it takes a couple of seconds to build), and\nI'm not sure where the slowness is.)\n\nIn String.v, some uses of `0` as a `nat` were replaced by `O`, because\nthe file initially refused to check interactively otherwise (it\ncomplained that `0` could not be interpreted in `string_scope` before\nloading `Coq.Strings.String`).\n\nThere is unfortunately a decent amount of code duplication between\nnumeral notations and string notations.\n\nI have not put too much thought into chosing names; most names have been\nchosen to be similar to numeral notations, though I chose the name\n`byte` from\nhttps://github.com/coq/coq/issues/8483#issuecomment-421671785.\n\nUnfortunately, this feature does not support declaring string syntax for\n`list ascii`, unless that type is wrapped in a record or other inductive\ntype.  This is not a fundamental limitation; it should be relatively\neasy for someone who knows the API of the reduction machinery in Coq to\nextend both this and numeral notations to support any type whose hnf\nstarts with an inductive type.  (The reason for needing an inductive\ntype to bottom out at is that this is how the plugin determines what\nconstructors are the entry points for printing the given notation.\nHowever, see also https://github.com/coq/coq/issues/8964 for\ncomplications that are more likely to arise if inductive type families\nare supported.)\n\nN.B. I generated the long lists of constructors for the `byte` type with\nshort python scripts.\n\nCloses #8853\n","author_name":"Jason Gross","author_email":"jgross@mit.edu","authored_date":"2018-11-07T21:19:05.000-05:00","committer_name":"Jason Gross","committer_email":"jgross@mit.edu","committed_date":"2018-11-10T02:56:39.000-05:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/1fe92c616fe9c95c6650c1a85e690ecd336c3b24"},"pipeline":{"id":36106420,"iid":5115,"project_id":6138686,"sha":"1fe92c616fe9c95c6650c1a85e690ecd336c3b24","ref":"pr-8965","status":"failed","source":"push","created_at":"2018-11-10T07:56:57.703Z","updated_at":"2018-11-10T09:10:26.050Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36106420"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/118820006","artifacts":[{"file_type":"trace","size":1211,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":118820004,"status":"failed","stage":"test","name":"ci-elpi","ref":"pr-8965","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-10T07:56:58.424Z","started_at":"2018-11-10T08:27:29.857Z","finished_at":"2018-11-10T08:27:41.212Z","duration":11.355136,"queued_duration":28.37928,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"1fe92c616fe9c95c6650c1a85e690ecd336c3b24","short_id":"1fe92c61","created_at":"2018-11-10T02:56:39.000-05:00","parent_ids":["ce8e37b97ce9db6f39368c50fb0ee4a7839ce754"],"title":"Add `String Notation` vernacular like `Numeral Notation`","message":"Add `String Notation` vernacular like `Numeral Notation`\n\nUsers can now register string notations for custom inductives.\n\nMuch of the code and documentation was copied from numeral notations.\n\nI chose to use a 256-constructor inductive for primitive string syntax\nbecause (a) it is easy to convert between character codes and\nconstructors, and (b) it is more efficient than the existing `ascii`\ntype.\n\nSome choices about proofs of the new `byte` type were made based on\nefficiency.  For example, https://github.com/coq/coq/issues/8517 means\nthat we cannot simply use `Scheme Equality` for this type, and I have\ntaken some care to ensure that the proofs of decidable equality and\nconversion are fast.  (Unfortunately, the `Init/Byte.v` file is the\nslowest one in the prelude (it takes a couple of seconds to build), and\nI'm not sure where the slowness is.)\n\nIn String.v, some uses of `0` as a `nat` were replaced by `O`, because\nthe file initially refused to check interactively otherwise (it\ncomplained that `0` could not be interpreted in `string_scope` before\nloading `Coq.Strings.String`).\n\nThere is unfortunately a decent amount of code duplication between\nnumeral notations and string notations.\n\nI have not put too much thought into chosing names; most names have been\nchosen to be similar to numeral notations, though I chose the name\n`byte` from\nhttps://github.com/coq/coq/issues/8483#issuecomment-421671785.\n\nUnfortunately, this feature does not support declaring string syntax for\n`list ascii`, unless that type is wrapped in a record or other inductive\ntype.  This is not a fundamental limitation; it should be relatively\neasy for someone who knows the API of the reduction machinery in Coq to\nextend both this and numeral notations to support any type whose hnf\nstarts with an inductive type.  (The reason for needing an inductive\ntype to bottom out at is that this is how the plugin determines what\nconstructors are the entry points for printing the given notation.\nHowever, see also https://github.com/coq/coq/issues/8964 for\ncomplications that are more likely to arise if inductive type families\nare supported.)\n\nN.B. I generated the long lists of constructors for the `byte` type with\nshort python scripts.\n\nCloses #8853\n","author_name":"Jason Gross","author_email":"jgross@mit.edu","authored_date":"2018-11-07T21:19:05.000-05:00","committer_name":"Jason Gross","committer_email":"jgross@mit.edu","committed_date":"2018-11-10T02:56:39.000-05:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/1fe92c616fe9c95c6650c1a85e690ecd336c3b24"},"pipeline":{"id":36106420,"iid":5115,"project_id":6138686,"sha":"1fe92c616fe9c95c6650c1a85e690ecd336c3b24","ref":"pr-8965","status":"failed","source":"push","created_at":"2018-11-10T07:56:57.703Z","updated_at":"2018-11-10T09:10:26.050Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36106420"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/118820004","artifacts":[{"file_type":"trace","size":1068,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":118820003,"status":"failed","stage":"test","name":"ci-cross-crypto","ref":"pr-8965","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-10T07:56:58.402Z","started_at":"2018-11-10T08:27:29.381Z","finished_at":"2018-11-10T08:27:41.345Z","duration":11.963781,"queued_duration":27.87075,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"1fe92c616fe9c95c6650c1a85e690ecd336c3b24","short_id":"1fe92c61","created_at":"2018-11-10T02:56:39.000-05:00","parent_ids":["ce8e37b97ce9db6f39368c50fb0ee4a7839ce754"],"title":"Add `String Notation` vernacular like `Numeral Notation`","message":"Add `String Notation` vernacular like `Numeral Notation`\n\nUsers can now register string notations for custom inductives.\n\nMuch of the code and documentation was copied from numeral notations.\n\nI chose to use a 256-constructor inductive for primitive string syntax\nbecause (a) it is easy to convert between character codes and\nconstructors, and (b) it is more efficient than the existing `ascii`\ntype.\n\nSome choices about proofs of the new `byte` type were made based on\nefficiency.  For example, https://github.com/coq/coq/issues/8517 means\nthat we cannot simply use `Scheme Equality` for this type, and I have\ntaken some care to ensure that the proofs of decidable equality and\nconversion are fast.  (Unfortunately, the `Init/Byte.v` file is the\nslowest one in the prelude (it takes a couple of seconds to build), and\nI'm not sure where the slowness is.)\n\nIn String.v, some uses of `0` as a `nat` were replaced by `O`, because\nthe file initially refused to check interactively otherwise (it\ncomplained that `0` could not be interpreted in `string_scope` before\nloading `Coq.Strings.String`).\n\nThere is unfortunately a decent amount of code duplication between\nnumeral notations and string notations.\n\nI have not put too much thought into chosing names; most names have been\nchosen to be similar to numeral notations, though I chose the name\n`byte` from\nhttps://github.com/coq/coq/issues/8483#issuecomment-421671785.\n\nUnfortunately, this feature does not support declaring string syntax for\n`list ascii`, unless that type is wrapped in a record or other inductive\ntype.  This is not a fundamental limitation; it should be relatively\neasy for someone who knows the API of the reduction machinery in Coq to\nextend both this and numeral notations to support any type whose hnf\nstarts with an inductive type.  (The reason for needing an inductive\ntype to bottom out at is that this is how the plugin determines what\nconstructors are the entry points for printing the given notation.\nHowever, see also https://github.com/coq/coq/issues/8964 for\ncomplications that are more likely to arise if inductive type families\nare supported.)\n\nN.B. I generated the long lists of constructors for the `byte` type with\nshort python scripts.\n\nCloses #8853\n","author_name":"Jason Gross","author_email":"jgross@mit.edu","authored_date":"2018-11-07T21:19:05.000-05:00","committer_name":"Jason Gross","committer_email":"jgross@mit.edu","committed_date":"2018-11-10T02:56:39.000-05:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/1fe92c616fe9c95c6650c1a85e690ecd336c3b24"},"pipeline":{"id":36106420,"iid":5115,"project_id":6138686,"sha":"1fe92c616fe9c95c6650c1a85e690ecd336c3b24","ref":"pr-8965","status":"failed","source":"push","created_at":"2018-11-10T07:56:57.703Z","updated_at":"2018-11-10T09:10:26.050Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36106420"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/118820003","artifacts":[{"file_type":"trace","size":1068,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":118820001,"status":"failed","stage":"test","name":"ci-coquelicot","ref":"pr-8965","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-10T07:56:58.374Z","started_at":"2018-11-10T08:27:28.963Z","finished_at":"2018-11-10T08:27:40.564Z","duration":11.601069,"queued_duration":27.413496,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"1fe92c616fe9c95c6650c1a85e690ecd336c3b24","short_id":"1fe92c61","created_at":"2018-11-10T02:56:39.000-05:00","parent_ids":["ce8e37b97ce9db6f39368c50fb0ee4a7839ce754"],"title":"Add `String Notation` vernacular like `Numeral Notation`","message":"Add `String Notation` vernacular like `Numeral Notation`\n\nUsers can now register string notations for custom inductives.\n\nMuch of the code and documentation was copied from numeral notations.\n\nI chose to use a 256-constructor inductive for primitive string syntax\nbecause (a) it is easy to convert between character codes and\nconstructors, and (b) it is more efficient than the existing `ascii`\ntype.\n\nSome choices about proofs of the new `byte` type were made based on\nefficiency.  For example, https://github.com/coq/coq/issues/8517 means\nthat we cannot simply use `Scheme Equality` for this type, and I have\ntaken some care to ensure that the proofs of decidable equality and\nconversion are fast.  (Unfortunately, the `Init/Byte.v` file is the\nslowest one in the prelude (it takes a couple of seconds to build), and\nI'm not sure where the slowness is.)\n\nIn String.v, some uses of `0` as a `nat` were replaced by `O`, because\nthe file initially refused to check interactively otherwise (it\ncomplained that `0` could not be interpreted in `string_scope` before\nloading `Coq.Strings.String`).\n\nThere is unfortunately a decent amount of code duplication between\nnumeral notations and string notations.\n\nI have not put too much thought into chosing names; most names have been\nchosen to be similar to numeral notations, though I chose the name\n`byte` from\nhttps://github.com/coq/coq/issues/8483#issuecomment-421671785.\n\nUnfortunately, this feature does not support declaring string syntax for\n`list ascii`, unless that type is wrapped in a record or other inductive\ntype.  This is not a fundamental limitation; it should be relatively\neasy for someone who knows the API of the reduction machinery in Coq to\nextend both this and numeral notations to support any type whose hnf\nstarts with an inductive type.  (The reason for needing an inductive\ntype to bottom out at is that this is how the plugin determines what\nconstructors are the entry points for printing the given notation.\nHowever, see also https://github.com/coq/coq/issues/8964 for\ncomplications that are more likely to arise if inductive type families\nare supported.)\n\nN.B. I generated the long lists of constructors for the `byte` type with\nshort python scripts.\n\nCloses #8853\n","author_name":"Jason Gross","author_email":"jgross@mit.edu","authored_date":"2018-11-07T21:19:05.000-05:00","committer_name":"Jason Gross","committer_email":"jgross@mit.edu","committed_date":"2018-11-10T02:56:39.000-05:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/1fe92c616fe9c95c6650c1a85e690ecd336c3b24"},"pipeline":{"id":36106420,"iid":5115,"project_id":6138686,"sha":"1fe92c616fe9c95c6650c1a85e690ecd336c3b24","ref":"pr-8965","status":"failed","source":"push","created_at":"2018-11-10T07:56:57.703Z","updated_at":"2018-11-10T09:10:26.050Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36106420"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/118820001","artifacts":[{"file_type":"trace","size":1068,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":118819999,"status":"failed","stage":"test","name":"ci-coq-dpdgraph","ref":"pr-8965","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-10T07:56:58.343Z","started_at":"2018-11-10T08:27:26.356Z","finished_at":"2018-11-10T08:27:37.659Z","duration":11.303508,"queued_duration":24.771647,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"1fe92c616fe9c95c6650c1a85e690ecd336c3b24","short_id":"1fe92c61","created_at":"2018-11-10T02:56:39.000-05:00","parent_ids":["ce8e37b97ce9db6f39368c50fb0ee4a7839ce754"],"title":"Add `String Notation` vernacular like `Numeral Notation`","message":"Add `String Notation` vernacular like `Numeral Notation`\n\nUsers can now register string notations for custom inductives.\n\nMuch of the code and documentation was copied from numeral notations.\n\nI chose to use a 256-constructor inductive for primitive string syntax\nbecause (a) it is easy to convert between character codes and\nconstructors, and (b) it is more efficient than the existing `ascii`\ntype.\n\nSome choices about proofs of the new `byte` type were made based on\nefficiency.  For example, https://github.com/coq/coq/issues/8517 means\nthat we cannot simply use `Scheme Equality` for this type, and I have\ntaken some care to ensure that the proofs of decidable equality and\nconversion are fast.  (Unfortunately, the `Init/Byte.v` file is the\nslowest one in the prelude (it takes a couple of seconds to build), and\nI'm not sure where the slowness is.)\n\nIn String.v, some uses of `0` as a `nat` were replaced by `O`, because\nthe file initially refused to check interactively otherwise (it\ncomplained that `0` could not be interpreted in `string_scope` before\nloading `Coq.Strings.String`).\n\nThere is unfortunately a decent amount of code duplication between\nnumeral notations and string notations.\n\nI have not put too much thought into chosing names; most names have been\nchosen to be similar to numeral notations, though I chose the name\n`byte` from\nhttps://github.com/coq/coq/issues/8483#issuecomment-421671785.\n\nUnfortunately, this feature does not support declaring string syntax for\n`list ascii`, unless that type is wrapped in a record or other inductive\ntype.  This is not a fundamental limitation; it should be relatively\neasy for someone who knows the API of the reduction machinery in Coq to\nextend both this and numeral notations to support any type whose hnf\nstarts with an inductive type.  (The reason for needing an inductive\ntype to bottom out at is that this is how the plugin determines what\nconstructors are the entry points for printing the given notation.\nHowever, see also https://github.com/coq/coq/issues/8964 for\ncomplications that are more likely to arise if inductive type families\nare supported.)\n\nN.B. I generated the long lists of constructors for the `byte` type with\nshort python scripts.\n\nCloses #8853\n","author_name":"Jason Gross","author_email":"jgross@mit.edu","authored_date":"2018-11-07T21:19:05.000-05:00","committer_name":"Jason Gross","committer_email":"jgross@mit.edu","committed_date":"2018-11-10T02:56:39.000-05:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/1fe92c616fe9c95c6650c1a85e690ecd336c3b24"},"pipeline":{"id":36106420,"iid":5115,"project_id":6138686,"sha":"1fe92c616fe9c95c6650c1a85e690ecd336c3b24","ref":"pr-8965","status":"failed","source":"push","created_at":"2018-11-10T07:56:57.703Z","updated_at":"2018-11-10T09:10:26.050Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36106420"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/118819999","artifacts":[{"file_type":"trace","size":1100,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":118819997,"status":"failed","stage":"test","name":"ci-compcert","ref":"pr-8965","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-10T07:56:58.322Z","started_at":"2018-11-10T08:27:25.964Z","finished_at":"2018-11-10T08:27:38.343Z","duration":12.379142,"queued_duration":24.344599,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"1fe92c616fe9c95c6650c1a85e690ecd336c3b24","short_id":"1fe92c61","created_at":"2018-11-10T02:56:39.000-05:00","parent_ids":["ce8e37b97ce9db6f39368c50fb0ee4a7839ce754"],"title":"Add `String Notation` vernacular like `Numeral Notation`","message":"Add `String Notation` vernacular like `Numeral Notation`\n\nUsers can now register string notations for custom inductives.\n\nMuch of the code and documentation was copied from numeral notations.\n\nI chose to use a 256-constructor inductive for primitive string syntax\nbecause (a) it is easy to convert between character codes and\nconstructors, and (b) it is more efficient than the existing `ascii`\ntype.\n\nSome choices about proofs of the new `byte` type were made based on\nefficiency.  For example, https://github.com/coq/coq/issues/8517 means\nthat we cannot simply use `Scheme Equality` for this type, and I have\ntaken some care to ensure that the proofs of decidable equality and\nconversion are fast.  (Unfortunately, the `Init/Byte.v` file is the\nslowest one in the prelude (it takes a couple of seconds to build), and\nI'm not sure where the slowness is.)\n\nIn String.v, some uses of `0` as a `nat` were replaced by `O`, because\nthe file initially refused to check interactively otherwise (it\ncomplained that `0` could not be interpreted in `string_scope` before\nloading `Coq.Strings.String`).\n\nThere is unfortunately a decent amount of code duplication between\nnumeral notations and string notations.\n\nI have not put too much thought into chosing names; most names have been\nchosen to be similar to numeral notations, though I chose the name\n`byte` from\nhttps://github.com/coq/coq/issues/8483#issuecomment-421671785.\n\nUnfortunately, this feature does not support declaring string syntax for\n`list ascii`, unless that type is wrapped in a record or other inductive\ntype.  This is not a fundamental limitation; it should be relatively\neasy for someone who knows the API of the reduction machinery in Coq to\nextend both this and numeral notations to support any type whose hnf\nstarts with an inductive type.  (The reason for needing an inductive\ntype to bottom out at is that this is how the plugin determines what\nconstructors are the entry points for printing the given notation.\nHowever, see also https://github.com/coq/coq/issues/8964 for\ncomplications that are more likely to arise if inductive type families\nare supported.)\n\nN.B. I generated the long lists of constructors for the `byte` type with\nshort python scripts.\n\nCloses #8853\n","author_name":"Jason Gross","author_email":"jgross@mit.edu","authored_date":"2018-11-07T21:19:05.000-05:00","committer_name":"Jason Gross","committer_email":"jgross@mit.edu","committed_date":"2018-11-10T02:56:39.000-05:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/1fe92c616fe9c95c6650c1a85e690ecd336c3b24"},"pipeline":{"id":36106420,"iid":5115,"project_id":6138686,"sha":"1fe92c616fe9c95c6650c1a85e690ecd336c3b24","ref":"pr-8965","status":"failed","source":"push","created_at":"2018-11-10T07:56:57.703Z","updated_at":"2018-11-10T09:10:26.050Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36106420"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/118819997","artifacts":[{"file_type":"trace","size":1211,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":118819995,"status":"failed","stage":"test","name":"ci-color","ref":"pr-8965","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-10T07:56:58.292Z","started_at":"2018-11-10T08:27:23.361Z","finished_at":"2018-11-10T08:27:35.668Z","duration":12.30634,"queued_duration":21.705992,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"1fe92c616fe9c95c6650c1a85e690ecd336c3b24","short_id":"1fe92c61","created_at":"2018-11-10T02:56:39.000-05:00","parent_ids":["ce8e37b97ce9db6f39368c50fb0ee4a7839ce754"],"title":"Add `String Notation` vernacular like `Numeral Notation`","message":"Add `String Notation` vernacular like `Numeral Notation`\n\nUsers can now register string notations for custom inductives.\n\nMuch of the code and documentation was copied from numeral notations.\n\nI chose to use a 256-constructor inductive for primitive string syntax\nbecause (a) it is easy to convert between character codes and\nconstructors, and (b) it is more efficient than the existing `ascii`\ntype.\n\nSome choices about proofs of the new `byte` type were made based on\nefficiency.  For example, https://github.com/coq/coq/issues/8517 means\nthat we cannot simply use `Scheme Equality` for this type, and I have\ntaken some care to ensure that the proofs of decidable equality and\nconversion are fast.  (Unfortunately, the `Init/Byte.v` file is the\nslowest one in the prelude (it takes a couple of seconds to build), and\nI'm not sure where the slowness is.)\n\nIn String.v, some uses of `0` as a `nat` were replaced by `O`, because\nthe file initially refused to check interactively otherwise (it\ncomplained that `0` could not be interpreted in `string_scope` before\nloading `Coq.Strings.String`).\n\nThere is unfortunately a decent amount of code duplication between\nnumeral notations and string notations.\n\nI have not put too much thought into chosing names; most names have been\nchosen to be similar to numeral notations, though I chose the name\n`byte` from\nhttps://github.com/coq/coq/issues/8483#issuecomment-421671785.\n\nUnfortunately, this feature does not support declaring string syntax for\n`list ascii`, unless that type is wrapped in a record or other inductive\ntype.  This is not a fundamental limitation; it should be relatively\neasy for someone who knows the API of the reduction machinery in Coq to\nextend both this and numeral notations to support any type whose hnf\nstarts with an inductive type.  (The reason for needing an inductive\ntype to bottom out at is that this is how the plugin determines what\nconstructors are the entry points for printing the given notation.\nHowever, see also https://github.com/coq/coq/issues/8964 for\ncomplications that are more likely to arise if inductive type families\nare supported.)\n\nN.B. I generated the long lists of constructors for the `byte` type with\nshort python scripts.\n\nCloses #8853\n","author_name":"Jason Gross","author_email":"jgross@mit.edu","authored_date":"2018-11-07T21:19:05.000-05:00","committer_name":"Jason Gross","committer_email":"jgross@mit.edu","committed_date":"2018-11-10T02:56:39.000-05:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/1fe92c616fe9c95c6650c1a85e690ecd336c3b24"},"pipeline":{"id":36106420,"iid":5115,"project_id":6138686,"sha":"1fe92c616fe9c95c6650c1a85e690ecd336c3b24","ref":"pr-8965","status":"failed","source":"push","created_at":"2018-11-10T07:56:57.703Z","updated_at":"2018-11-10T09:10:26.050Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36106420"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/118819995","artifacts":[{"file_type":"trace","size":1211,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":118819994,"status":"failed","stage":"test","name":"ci-bignums","ref":"pr-8965","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-10T07:56:58.271Z","started_at":"2018-11-10T08:27:22.966Z","finished_at":"2018-11-10T08:27:32.443Z","duration":9.476828,"queued_duration":21.271862,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"1fe92c616fe9c95c6650c1a85e690ecd336c3b24","short_id":"1fe92c61","created_at":"2018-11-10T02:56:39.000-05:00","parent_ids":["ce8e37b97ce9db6f39368c50fb0ee4a7839ce754"],"title":"Add `String Notation` vernacular like `Numeral Notation`","message":"Add `String Notation` vernacular like `Numeral Notation`\n\nUsers can now register string notations for custom inductives.\n\nMuch of the code and documentation was copied from numeral notations.\n\nI chose to use a 256-constructor inductive for primitive string syntax\nbecause (a) it is easy to convert between character codes and\nconstructors, and (b) it is more efficient than the existing `ascii`\ntype.\n\nSome choices about proofs of the new `byte` type were made based on\nefficiency.  For example, https://github.com/coq/coq/issues/8517 means\nthat we cannot simply use `Scheme Equality` for this type, and I have\ntaken some care to ensure that the proofs of decidable equality and\nconversion are fast.  (Unfortunately, the `Init/Byte.v` file is the\nslowest one in the prelude (it takes a couple of seconds to build), and\nI'm not sure where the slowness is.)\n\nIn String.v, some uses of `0` as a `nat` were replaced by `O`, because\nthe file initially refused to check interactively otherwise (it\ncomplained that `0` could not be interpreted in `string_scope` before\nloading `Coq.Strings.String`).\n\nThere is unfortunately a decent amount of code duplication between\nnumeral notations and string notations.\n\nI have not put too much thought into chosing names; most names have been\nchosen to be similar to numeral notations, though I chose the name\n`byte` from\nhttps://github.com/coq/coq/issues/8483#issuecomment-421671785.\n\nUnfortunately, this feature does not support declaring string syntax for\n`list ascii`, unless that type is wrapped in a record or other inductive\ntype.  This is not a fundamental limitation; it should be relatively\neasy for someone who knows the API of the reduction machinery in Coq to\nextend both this and numeral notations to support any type whose hnf\nstarts with an inductive type.  (The reason for needing an inductive\ntype to bottom out at is that this is how the plugin determines what\nconstructors are the entry points for printing the given notation.\nHowever, see also https://github.com/coq/coq/issues/8964 for\ncomplications that are more likely to arise if inductive type families\nare supported.)\n\nN.B. I generated the long lists of constructors for the `byte` type with\nshort python scripts.\n\nCloses #8853\n","author_name":"Jason Gross","author_email":"jgross@mit.edu","authored_date":"2018-11-07T21:19:05.000-05:00","committer_name":"Jason Gross","committer_email":"jgross@mit.edu","committed_date":"2018-11-10T02:56:39.000-05:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/1fe92c616fe9c95c6650c1a85e690ecd336c3b24"},"pipeline":{"id":36106420,"iid":5115,"project_id":6138686,"sha":"1fe92c616fe9c95c6650c1a85e690ecd336c3b24","ref":"pr-8965","status":"failed","source":"push","created_at":"2018-11-10T07:56:57.703Z","updated_at":"2018-11-10T09:10:26.050Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36106420"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/118819994","artifacts":[{"file_type":"trace","size":1211,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":118819992,"status":"failed","stage":"test","name":"ci-bedrock2","ref":"pr-8965","tag":false,"coverage":null,"allow_failure":true,"created_at":"2018-11-10T07:56:58.247Z","started_at":"2018-11-10T08:27:20.403Z","finished_at":"2018-11-10T08:27:29.155Z","duration":8.752558,"queued_duration":18.657712,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"1fe92c616fe9c95c6650c1a85e690ecd336c3b24","short_id":"1fe92c61","created_at":"2018-11-10T02:56:39.000-05:00","parent_ids":["ce8e37b97ce9db6f39368c50fb0ee4a7839ce754"],"title":"Add `String Notation` vernacular like `Numeral Notation`","message":"Add `String Notation` vernacular like `Numeral Notation`\n\nUsers can now register string notations for custom inductives.\n\nMuch of the code and documentation was copied from numeral notations.\n\nI chose to use a 256-constructor inductive for primitive string syntax\nbecause (a) it is easy to convert between character codes and\nconstructors, and (b) it is more efficient than the existing `ascii`\ntype.\n\nSome choices about proofs of the new `byte` type were made based on\nefficiency.  For example, https://github.com/coq/coq/issues/8517 means\nthat we cannot simply use `Scheme Equality` for this type, and I have\ntaken some care to ensure that the proofs of decidable equality and\nconversion are fast.  (Unfortunately, the `Init/Byte.v` file is the\nslowest one in the prelude (it takes a couple of seconds to build), and\nI'm not sure where the slowness is.)\n\nIn String.v, some uses of `0` as a `nat` were replaced by `O`, because\nthe file initially refused to check interactively otherwise (it\ncomplained that `0` could not be interpreted in `string_scope` before\nloading `Coq.Strings.String`).\n\nThere is unfortunately a decent amount of code duplication between\nnumeral notations and string notations.\n\nI have not put too much thought into chosing names; most names have been\nchosen to be similar to numeral notations, though I chose the name\n`byte` from\nhttps://github.com/coq/coq/issues/8483#issuecomment-421671785.\n\nUnfortunately, this feature does not support declaring string syntax for\n`list ascii`, unless that type is wrapped in a record or other inductive\ntype.  This is not a fundamental limitation; it should be relatively\neasy for someone who knows the API of the reduction machinery in Coq to\nextend both this and numeral notations to support any type whose hnf\nstarts with an inductive type.  (The reason for needing an inductive\ntype to bottom out at is that this is how the plugin determines what\nconstructors are the entry points for printing the given notation.\nHowever, see also https://github.com/coq/coq/issues/8964 for\ncomplications that are more likely to arise if inductive type families\nare supported.)\n\nN.B. I generated the long lists of constructors for the `byte` type with\nshort python scripts.\n\nCloses #8853\n","author_name":"Jason Gross","author_email":"jgross@mit.edu","authored_date":"2018-11-07T21:19:05.000-05:00","committer_name":"Jason Gross","committer_email":"jgross@mit.edu","committed_date":"2018-11-10T02:56:39.000-05:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/1fe92c616fe9c95c6650c1a85e690ecd336c3b24"},"pipeline":{"id":36106420,"iid":5115,"project_id":6138686,"sha":"1fe92c616fe9c95c6650c1a85e690ecd336c3b24","ref":"pr-8965","status":"failed","source":"push","created_at":"2018-11-10T07:56:57.703Z","updated_at":"2018-11-10T09:10:26.050Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36106420"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/118819992","artifacts":[{"file_type":"trace","size":1068,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":118819991,"status":"failed","stage":"test","name":"ci-aac-tactics","ref":"pr-8965","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-10T07:56:58.226Z","started_at":"2018-11-10T08:27:19.979Z","finished_at":"2018-11-10T08:27:28.494Z","duration":8.515011,"queued_duration":18.11269,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"1fe92c616fe9c95c6650c1a85e690ecd336c3b24","short_id":"1fe92c61","created_at":"2018-11-10T02:56:39.000-05:00","parent_ids":["ce8e37b97ce9db6f39368c50fb0ee4a7839ce754"],"title":"Add `String Notation` vernacular like `Numeral Notation`","message":"Add `String Notation` vernacular like `Numeral Notation`\n\nUsers can now register string notations for custom inductives.\n\nMuch of the code and documentation was copied from numeral notations.\n\nI chose to use a 256-constructor inductive for primitive string syntax\nbecause (a) it is easy to convert between character codes and\nconstructors, and (b) it is more efficient than the existing `ascii`\ntype.\n\nSome choices about proofs of the new `byte` type were made based on\nefficiency.  For example, https://github.com/coq/coq/issues/8517 means\nthat we cannot simply use `Scheme Equality` for this type, and I have\ntaken some care to ensure that the proofs of decidable equality and\nconversion are fast.  (Unfortunately, the `Init/Byte.v` file is the\nslowest one in the prelude (it takes a couple of seconds to build), and\nI'm not sure where the slowness is.)\n\nIn String.v, some uses of `0` as a `nat` were replaced by `O`, because\nthe file initially refused to check interactively otherwise (it\ncomplained that `0` could not be interpreted in `string_scope` before\nloading `Coq.Strings.String`).\n\nThere is unfortunately a decent amount of code duplication between\nnumeral notations and string notations.\n\nI have not put too much thought into chosing names; most names have been\nchosen to be similar to numeral notations, though I chose the name\n`byte` from\nhttps://github.com/coq/coq/issues/8483#issuecomment-421671785.\n\nUnfortunately, this feature does not support declaring string syntax for\n`list ascii`, unless that type is wrapped in a record or other inductive\ntype.  This is not a fundamental limitation; it should be relatively\neasy for someone who knows the API of the reduction machinery in Coq to\nextend both this and numeral notations to support any type whose hnf\nstarts with an inductive type.  (The reason for needing an inductive\ntype to bottom out at is that this is how the plugin determines what\nconstructors are the entry points for printing the given notation.\nHowever, see also https://github.com/coq/coq/issues/8964 for\ncomplications that are more likely to arise if inductive type families\nare supported.)\n\nN.B. I generated the long lists of constructors for the `byte` type with\nshort python scripts.\n\nCloses #8853\n","author_name":"Jason Gross","author_email":"jgross@mit.edu","authored_date":"2018-11-07T21:19:05.000-05:00","committer_name":"Jason Gross","committer_email":"jgross@mit.edu","committed_date":"2018-11-10T02:56:39.000-05:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/1fe92c616fe9c95c6650c1a85e690ecd336c3b24"},"pipeline":{"id":36106420,"iid":5115,"project_id":6138686,"sha":"1fe92c616fe9c95c6650c1a85e690ecd336c3b24","ref":"pr-8965","status":"failed","source":"push","created_at":"2018-11-10T07:56:57.703Z","updated_at":"2018-11-10T09:10:26.050Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36106420"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/118819991","artifacts":[{"file_type":"trace","size":1068,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":118819989,"status":"failed","stage":"test","name":"validate:edge+flambda","ref":"pr-8965","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-10T07:56:58.199Z","started_at":"2018-11-10T08:27:17.780Z","finished_at":"2018-11-10T08:27:26.707Z","duration":8.927526,"queued_duration":15.714882,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"1fe92c616fe9c95c6650c1a85e690ecd336c3b24","short_id":"1fe92c61","created_at":"2018-11-10T02:56:39.000-05:00","parent_ids":["ce8e37b97ce9db6f39368c50fb0ee4a7839ce754"],"title":"Add `String Notation` vernacular like `Numeral Notation`","message":"Add `String Notation` vernacular like `Numeral Notation`\n\nUsers can now register string notations for custom inductives.\n\nMuch of the code and documentation was copied from numeral notations.\n\nI chose to use a 256-constructor inductive for primitive string syntax\nbecause (a) it is easy to convert between character codes and\nconstructors, and (b) it is more efficient than the existing `ascii`\ntype.\n\nSome choices about proofs of the new `byte` type were made based on\nefficiency.  For example, https://github.com/coq/coq/issues/8517 means\nthat we cannot simply use `Scheme Equality` for this type, and I have\ntaken some care to ensure that the proofs of decidable equality and\nconversion are fast.  (Unfortunately, the `Init/Byte.v` file is the\nslowest one in the prelude (it takes a couple of seconds to build), and\nI'm not sure where the slowness is.)\n\nIn String.v, some uses of `0` as a `nat` were replaced by `O`, because\nthe file initially refused to check interactively otherwise (it\ncomplained that `0` could not be interpreted in `string_scope` before\nloading `Coq.Strings.String`).\n\nThere is unfortunately a decent amount of code duplication between\nnumeral notations and string notations.\n\nI have not put too much thought into chosing names; most names have been\nchosen to be similar to numeral notations, though I chose the name\n`byte` from\nhttps://github.com/coq/coq/issues/8483#issuecomment-421671785.\n\nUnfortunately, this feature does not support declaring string syntax for\n`list ascii`, unless that type is wrapped in a record or other inductive\ntype.  This is not a fundamental limitation; it should be relatively\neasy for someone who knows the API of the reduction machinery in Coq to\nextend both this and numeral notations to support any type whose hnf\nstarts with an inductive type.  (The reason for needing an inductive\ntype to bottom out at is that this is how the plugin determines what\nconstructors are the entry points for printing the given notation.\nHowever, see also https://github.com/coq/coq/issues/8964 for\ncomplications that are more likely to arise if inductive type families\nare supported.)\n\nN.B. I generated the long lists of constructors for the `byte` type with\nshort python scripts.\n\nCloses #8853\n","author_name":"Jason Gross","author_email":"jgross@mit.edu","authored_date":"2018-11-07T21:19:05.000-05:00","committer_name":"Jason Gross","committer_email":"jgross@mit.edu","committed_date":"2018-11-10T02:56:39.000-05:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/1fe92c616fe9c95c6650c1a85e690ecd336c3b24"},"pipeline":{"id":36106420,"iid":5115,"project_id":6138686,"sha":"1fe92c616fe9c95c6650c1a85e690ecd336c3b24","ref":"pr-8965","status":"failed","source":"push","created_at":"2018-11-10T07:56:57.703Z","updated_at":"2018-11-10T09:10:26.050Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36106420"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/118819989","artifacts":[{"file_type":"trace","size":1068,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":118819987,"status":"failed","stage":"test","name":"validate:edge","ref":"pr-8965","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-10T07:56:58.178Z","started_at":"2018-11-10T08:27:17.413Z","finished_at":"2018-11-10T08:27:25.459Z","duration":8.045945,"queued_duration":15.295503,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"1fe92c616fe9c95c6650c1a85e690ecd336c3b24","short_id":"1fe92c61","created_at":"2018-11-10T02:56:39.000-05:00","parent_ids":["ce8e37b97ce9db6f39368c50fb0ee4a7839ce754"],"title":"Add `String Notation` vernacular like `Numeral Notation`","message":"Add `String Notation` vernacular like `Numeral Notation`\n\nUsers can now register string notations for custom inductives.\n\nMuch of the code and documentation was copied from numeral notations.\n\nI chose to use a 256-constructor inductive for primitive string syntax\nbecause (a) it is easy to convert between character codes and\nconstructors, and (b) it is more efficient than the existing `ascii`\ntype.\n\nSome choices about proofs of the new `byte` type were made based on\nefficiency.  For example, https://github.com/coq/coq/issues/8517 means\nthat we cannot simply use `Scheme Equality` for this type, and I have\ntaken some care to ensure that the proofs of decidable equality and\nconversion are fast.  (Unfortunately, the `Init/Byte.v` file is the\nslowest one in the prelude (it takes a couple of seconds to build), and\nI'm not sure where the slowness is.)\n\nIn String.v, some uses of `0` as a `nat` were replaced by `O`, because\nthe file initially refused to check interactively otherwise (it\ncomplained that `0` could not be interpreted in `string_scope` before\nloading `Coq.Strings.String`).\n\nThere is unfortunately a decent amount of code duplication between\nnumeral notations and string notations.\n\nI have not put too much thought into chosing names; most names have been\nchosen to be similar to numeral notations, though I chose the name\n`byte` from\nhttps://github.com/coq/coq/issues/8483#issuecomment-421671785.\n\nUnfortunately, this feature does not support declaring string syntax for\n`list ascii`, unless that type is wrapped in a record or other inductive\ntype.  This is not a fundamental limitation; it should be relatively\neasy for someone who knows the API of the reduction machinery in Coq to\nextend both this and numeral notations to support any type whose hnf\nstarts with an inductive type.  (The reason for needing an inductive\ntype to bottom out at is that this is how the plugin determines what\nconstructors are the entry points for printing the given notation.\nHowever, see also https://github.com/coq/coq/issues/8964 for\ncomplications that are more likely to arise if inductive type families\nare supported.)\n\nN.B. I generated the long lists of constructors for the `byte` type with\nshort python scripts.\n\nCloses #8853\n","author_name":"Jason Gross","author_email":"jgross@mit.edu","authored_date":"2018-11-07T21:19:05.000-05:00","committer_name":"Jason Gross","committer_email":"jgross@mit.edu","committed_date":"2018-11-10T02:56:39.000-05:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/1fe92c616fe9c95c6650c1a85e690ecd336c3b24"},"pipeline":{"id":36106420,"iid":5115,"project_id":6138686,"sha":"1fe92c616fe9c95c6650c1a85e690ecd336c3b24","ref":"pr-8965","status":"failed","source":"push","created_at":"2018-11-10T07:56:57.703Z","updated_at":"2018-11-10T09:10:26.050Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36106420"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/118819987","artifacts":[{"file_type":"trace","size":1100,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":118819986,"status":"failed","stage":"test","name":"validate:base+32bit","ref":"pr-8965","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-10T07:56:58.151Z","started_at":"2018-11-10T08:27:02.253Z","finished_at":"2018-11-10T08:27:13.731Z","duration":11.477125,"queued_duration":0.083239,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"1fe92c616fe9c95c6650c1a85e690ecd336c3b24","short_id":"1fe92c61","created_at":"2018-11-10T02:56:39.000-05:00","parent_ids":["ce8e37b97ce9db6f39368c50fb0ee4a7839ce754"],"title":"Add `String Notation` vernacular like `Numeral Notation`","message":"Add `String Notation` vernacular like `Numeral Notation`\n\nUsers can now register string notations for custom inductives.\n\nMuch of the code and documentation was copied from numeral notations.\n\nI chose to use a 256-constructor inductive for primitive string syntax\nbecause (a) it is easy to convert between character codes and\nconstructors, and (b) it is more efficient than the existing `ascii`\ntype.\n\nSome choices about proofs of the new `byte` type were made based on\nefficiency.  For example, https://github.com/coq/coq/issues/8517 means\nthat we cannot simply use `Scheme Equality` for this type, and I have\ntaken some care to ensure that the proofs of decidable equality and\nconversion are fast.  (Unfortunately, the `Init/Byte.v` file is the\nslowest one in the prelude (it takes a couple of seconds to build), and\nI'm not sure where the slowness is.)\n\nIn String.v, some uses of `0` as a `nat` were replaced by `O`, because\nthe file initially refused to check interactively otherwise (it\ncomplained that `0` could not be interpreted in `string_scope` before\nloading `Coq.Strings.String`).\n\nThere is unfortunately a decent amount of code duplication between\nnumeral notations and string notations.\n\nI have not put too much thought into chosing names; most names have been\nchosen to be similar to numeral notations, though I chose the name\n`byte` from\nhttps://github.com/coq/coq/issues/8483#issuecomment-421671785.\n\nUnfortunately, this feature does not support declaring string syntax for\n`list ascii`, unless that type is wrapped in a record or other inductive\ntype.  This is not a fundamental limitation; it should be relatively\neasy for someone who knows the API of the reduction machinery in Coq to\nextend both this and numeral notations to support any type whose hnf\nstarts with an inductive type.  (The reason for needing an inductive\ntype to bottom out at is that this is how the plugin determines what\nconstructors are the entry points for printing the given notation.\nHowever, see also https://github.com/coq/coq/issues/8964 for\ncomplications that are more likely to arise if inductive type families\nare supported.)\n\nN.B. I generated the long lists of constructors for the `byte` type with\nshort python scripts.\n\nCloses #8853\n","author_name":"Jason Gross","author_email":"jgross@mit.edu","authored_date":"2018-11-07T21:19:05.000-05:00","committer_name":"Jason Gross","committer_email":"jgross@mit.edu","committed_date":"2018-11-10T02:56:39.000-05:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/1fe92c616fe9c95c6650c1a85e690ecd336c3b24"},"pipeline":{"id":36106420,"iid":5115,"project_id":6138686,"sha":"1fe92c616fe9c95c6650c1a85e690ecd336c3b24","ref":"pr-8965","status":"failed","source":"push","created_at":"2018-11-10T07:56:57.703Z","updated_at":"2018-11-10T09:10:26.050Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36106420"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/118819986","artifacts":[{"file_type":"trace","size":27800,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":118819984,"status":"failed","stage":"test","name":"validate:base","ref":"pr-8965","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-10T07:56:58.123Z","started_at":"2018-11-10T08:27:16.967Z","finished_at":"2018-11-10T08:27:25.591Z","duration":8.624617,"queued_duration":14.736048,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"1fe92c616fe9c95c6650c1a85e690ecd336c3b24","short_id":"1fe92c61","created_at":"2018-11-10T02:56:39.000-05:00","parent_ids":["ce8e37b97ce9db6f39368c50fb0ee4a7839ce754"],"title":"Add `String Notation` vernacular like `Numeral Notation`","message":"Add `String Notation` vernacular like `Numeral Notation`\n\nUsers can now register string notations for custom inductives.\n\nMuch of the code and documentation was copied from numeral notations.\n\nI chose to use a 256-constructor inductive for primitive string syntax\nbecause (a) it is easy to convert between character codes and\nconstructors, and (b) it is more efficient than the existing `ascii`\ntype.\n\nSome choices about proofs of the new `byte` type were made based on\nefficiency.  For example, https://github.com/coq/coq/issues/8517 means\nthat we cannot simply use `Scheme Equality` for this type, and I have\ntaken some care to ensure that the proofs of decidable equality and\nconversion are fast.  (Unfortunately, the `Init/Byte.v` file is the\nslowest one in the prelude (it takes a couple of seconds to build), and\nI'm not sure where the slowness is.)\n\nIn String.v, some uses of `0` as a `nat` were replaced by `O`, because\nthe file initially refused to check interactively otherwise (it\ncomplained that `0` could not be interpreted in `string_scope` before\nloading `Coq.Strings.String`).\n\nThere is unfortunately a decent amount of code duplication between\nnumeral notations and string notations.\n\nI have not put too much thought into chosing names; most names have been\nchosen to be similar to numeral notations, though I chose the name\n`byte` from\nhttps://github.com/coq/coq/issues/8483#issuecomment-421671785.\n\nUnfortunately, this feature does not support declaring string syntax for\n`list ascii`, unless that type is wrapped in a record or other inductive\ntype.  This is not a fundamental limitation; it should be relatively\neasy for someone who knows the API of the reduction machinery in Coq to\nextend both this and numeral notations to support any type whose hnf\nstarts with an inductive type.  (The reason for needing an inductive\ntype to bottom out at is that this is how the plugin determines what\nconstructors are the entry points for printing the given notation.\nHowever, see also https://github.com/coq/coq/issues/8964 for\ncomplications that are more likely to arise if inductive type families\nare supported.)\n\nN.B. I generated the long lists of constructors for the `byte` type with\nshort python scripts.\n\nCloses #8853\n","author_name":"Jason Gross","author_email":"jgross@mit.edu","authored_date":"2018-11-07T21:19:05.000-05:00","committer_name":"Jason Gross","committer_email":"jgross@mit.edu","committed_date":"2018-11-10T02:56:39.000-05:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/1fe92c616fe9c95c6650c1a85e690ecd336c3b24"},"pipeline":{"id":36106420,"iid":5115,"project_id":6138686,"sha":"1fe92c616fe9c95c6650c1a85e690ecd336c3b24","ref":"pr-8965","status":"failed","source":"push","created_at":"2018-11-10T07:56:57.703Z","updated_at":"2018-11-10T09:10:26.050Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36106420"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/118819984","artifacts":[{"file_type":"trace","size":1211,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":118819982,"status":"failed","stage":"test","name":"test-suite:egde:dune:dev","ref":"pr-8965","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-10T07:56:58.102Z","started_at":"2018-11-10T08:27:14.406Z","finished_at":"2018-11-10T08:27:22.589Z","duration":8.182398,"queued_duration":12.126655,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"1fe92c616fe9c95c6650c1a85e690ecd336c3b24","short_id":"1fe92c61","created_at":"2018-11-10T02:56:39.000-05:00","parent_ids":["ce8e37b97ce9db6f39368c50fb0ee4a7839ce754"],"title":"Add `String Notation` vernacular like `Numeral Notation`","message":"Add `String Notation` vernacular like `Numeral Notation`\n\nUsers can now register string notations for custom inductives.\n\nMuch of the code and documentation was copied from numeral notations.\n\nI chose to use a 256-constructor inductive for primitive string syntax\nbecause (a) it is easy to convert between character codes and\nconstructors, and (b) it is more efficient than the existing `ascii`\ntype.\n\nSome choices about proofs of the new `byte` type were made based on\nefficiency.  For example, https://github.com/coq/coq/issues/8517 means\nthat we cannot simply use `Scheme Equality` for this type, and I have\ntaken some care to ensure that the proofs of decidable equality and\nconversion are fast.  (Unfortunately, the `Init/Byte.v` file is the\nslowest one in the prelude (it takes a couple of seconds to build), and\nI'm not sure where the slowness is.)\n\nIn String.v, some uses of `0` as a `nat` were replaced by `O`, because\nthe file initially refused to check interactively otherwise (it\ncomplained that `0` could not be interpreted in `string_scope` before\nloading `Coq.Strings.String`).\n\nThere is unfortunately a decent amount of code duplication between\nnumeral notations and string notations.\n\nI have not put too much thought into chosing names; most names have been\nchosen to be similar to numeral notations, though I chose the name\n`byte` from\nhttps://github.com/coq/coq/issues/8483#issuecomment-421671785.\n\nUnfortunately, this feature does not support declaring string syntax for\n`list ascii`, unless that type is wrapped in a record or other inductive\ntype.  This is not a fundamental limitation; it should be relatively\neasy for someone who knows the API of the reduction machinery in Coq to\nextend both this and numeral notations to support any type whose hnf\nstarts with an inductive type.  (The reason for needing an inductive\ntype to bottom out at is that this is how the plugin determines what\nconstructors are the entry points for printing the given notation.\nHowever, see also https://github.com/coq/coq/issues/8964 for\ncomplications that are more likely to arise if inductive type families\nare supported.)\n\nN.B. I generated the long lists of constructors for the `byte` type with\nshort python scripts.\n\nCloses #8853\n","author_name":"Jason Gross","author_email":"jgross@mit.edu","authored_date":"2018-11-07T21:19:05.000-05:00","committer_name":"Jason Gross","committer_email":"jgross@mit.edu","committed_date":"2018-11-10T02:56:39.000-05:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/1fe92c616fe9c95c6650c1a85e690ecd336c3b24"},"pipeline":{"id":36106420,"iid":5115,"project_id":6138686,"sha":"1fe92c616fe9c95c6650c1a85e690ecd336c3b24","ref":"pr-8965","status":"failed","source":"push","created_at":"2018-11-10T07:56:57.703Z","updated_at":"2018-11-10T09:10:26.050Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36106420"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/118819982","artifacts":[{"file_type":"trace","size":1382,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":118819981,"status":"failed","stage":"test","name":"test-suite:edge+flambda","ref":"pr-8965","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-10T07:56:58.080Z","started_at":"2018-11-10T08:27:13.954Z","finished_at":"2018-11-10T08:27:22.662Z","duration":8.707894,"queued_duration":11.620233,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"1fe92c616fe9c95c6650c1a85e690ecd336c3b24","short_id":"1fe92c61","created_at":"2018-11-10T02:56:39.000-05:00","parent_ids":["ce8e37b97ce9db6f39368c50fb0ee4a7839ce754"],"title":"Add `String Notation` vernacular like `Numeral Notation`","message":"Add `String Notation` vernacular like `Numeral Notation`\n\nUsers can now register string notations for custom inductives.\n\nMuch of the code and documentation was copied from numeral notations.\n\nI chose to use a 256-constructor inductive for primitive string syntax\nbecause (a) it is easy to convert between character codes and\nconstructors, and (b) it is more efficient than the existing `ascii`\ntype.\n\nSome choices about proofs of the new `byte` type were made based on\nefficiency.  For example, https://github.com/coq/coq/issues/8517 means\nthat we cannot simply use `Scheme Equality` for this type, and I have\ntaken some care to ensure that the proofs of decidable equality and\nconversion are fast.  (Unfortunately, the `Init/Byte.v` file is the\nslowest one in the prelude (it takes a couple of seconds to build), and\nI'm not sure where the slowness is.)\n\nIn String.v, some uses of `0` as a `nat` were replaced by `O`, because\nthe file initially refused to check interactively otherwise (it\ncomplained that `0` could not be interpreted in `string_scope` before\nloading `Coq.Strings.String`).\n\nThere is unfortunately a decent amount of code duplication between\nnumeral notations and string notations.\n\nI have not put too much thought into chosing names; most names have been\nchosen to be similar to numeral notations, though I chose the name\n`byte` from\nhttps://github.com/coq/coq/issues/8483#issuecomment-421671785.\n\nUnfortunately, this feature does not support declaring string syntax for\n`list ascii`, unless that type is wrapped in a record or other inductive\ntype.  This is not a fundamental limitation; it should be relatively\neasy for someone who knows the API of the reduction machinery in Coq to\nextend both this and numeral notations to support any type whose hnf\nstarts with an inductive type.  (The reason for needing an inductive\ntype to bottom out at is that this is how the plugin determines what\nconstructors are the entry points for printing the given notation.\nHowever, see also https://github.com/coq/coq/issues/8964 for\ncomplications that are more likely to arise if inductive type families\nare supported.)\n\nN.B. I generated the long lists of constructors for the `byte` type with\nshort python scripts.\n\nCloses #8853\n","author_name":"Jason Gross","author_email":"jgross@mit.edu","authored_date":"2018-11-07T21:19:05.000-05:00","committer_name":"Jason Gross","committer_email":"jgross@mit.edu","committed_date":"2018-11-10T02:56:39.000-05:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/1fe92c616fe9c95c6650c1a85e690ecd336c3b24"},"pipeline":{"id":36106420,"iid":5115,"project_id":6138686,"sha":"1fe92c616fe9c95c6650c1a85e690ecd336c3b24","ref":"pr-8965","status":"failed","source":"push","created_at":"2018-11-10T07:56:57.703Z","updated_at":"2018-11-10T09:10:26.050Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36106420"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/118819981","artifacts":[{"file_type":"trace","size":1374,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":118819979,"status":"failed","stage":"test","name":"test-suite:edge","ref":"pr-8965","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-10T07:56:58.050Z","started_at":"2018-11-10T08:27:04.871Z","finished_at":"2018-11-10T08:27:18.207Z","duration":13.335308,"queued_duration":2.491304,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"1fe92c616fe9c95c6650c1a85e690ecd336c3b24","short_id":"1fe92c61","created_at":"2018-11-10T02:56:39.000-05:00","parent_ids":["ce8e37b97ce9db6f39368c50fb0ee4a7839ce754"],"title":"Add `String Notation` vernacular like `Numeral Notation`","message":"Add `String Notation` vernacular like `Numeral Notation`\n\nUsers can now register string notations for custom inductives.\n\nMuch of the code and documentation was copied from numeral notations.\n\nI chose to use a 256-constructor inductive for primitive string syntax\nbecause (a) it is easy to convert between character codes and\nconstructors, and (b) it is more efficient than the existing `ascii`\ntype.\n\nSome choices about proofs of the new `byte` type were made based on\nefficiency.  For example, https://github.com/coq/coq/issues/8517 means\nthat we cannot simply use `Scheme Equality` for this type, and I have\ntaken some care to ensure that the proofs of decidable equality and\nconversion are fast.  (Unfortunately, the `Init/Byte.v` file is the\nslowest one in the prelude (it takes a couple of seconds to build), and\nI'm not sure where the slowness is.)\n\nIn String.v, some uses of `0` as a `nat` were replaced by `O`, because\nthe file initially refused to check interactively otherwise (it\ncomplained that `0` could not be interpreted in `string_scope` before\nloading `Coq.Strings.String`).\n\nThere is unfortunately a decent amount of code duplication between\nnumeral notations and string notations.\n\nI have not put too much thought into chosing names; most names have been\nchosen to be similar to numeral notations, though I chose the name\n`byte` from\nhttps://github.com/coq/coq/issues/8483#issuecomment-421671785.\n\nUnfortunately, this feature does not support declaring string syntax for\n`list ascii`, unless that type is wrapped in a record or other inductive\ntype.  This is not a fundamental limitation; it should be relatively\neasy for someone who knows the API of the reduction machinery in Coq to\nextend both this and numeral notations to support any type whose hnf\nstarts with an inductive type.  (The reason for needing an inductive\ntype to bottom out at is that this is how the plugin determines what\nconstructors are the entry points for printing the given notation.\nHowever, see also https://github.com/coq/coq/issues/8964 for\ncomplications that are more likely to arise if inductive type families\nare supported.)\n\nN.B. I generated the long lists of constructors for the `byte` type with\nshort python scripts.\n\nCloses #8853\n","author_name":"Jason Gross","author_email":"jgross@mit.edu","authored_date":"2018-11-07T21:19:05.000-05:00","committer_name":"Jason Gross","committer_email":"jgross@mit.edu","committed_date":"2018-11-10T02:56:39.000-05:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/1fe92c616fe9c95c6650c1a85e690ecd336c3b24"},"pipeline":{"id":36106420,"iid":5115,"project_id":6138686,"sha":"1fe92c616fe9c95c6650c1a85e690ecd336c3b24","ref":"pr-8965","status":"failed","source":"push","created_at":"2018-11-10T07:56:57.703Z","updated_at":"2018-11-10T09:10:26.050Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36106420"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/118819979","artifacts":[{"file_type":"trace","size":1522,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":118819977,"status":"failed","stage":"test","name":"test-suite:base+32bit","ref":"pr-8965","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-10T07:56:58.025Z","started_at":"2018-11-10T08:27:04.434Z","finished_at":"2018-11-10T08:27:17.329Z","duration":12.894682,"queued_duration":2.00925,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"1fe92c616fe9c95c6650c1a85e690ecd336c3b24","short_id":"1fe92c61","created_at":"2018-11-10T02:56:39.000-05:00","parent_ids":["ce8e37b97ce9db6f39368c50fb0ee4a7839ce754"],"title":"Add `String Notation` vernacular like `Numeral Notation`","message":"Add `String Notation` vernacular like `Numeral Notation`\n\nUsers can now register string notations for custom inductives.\n\nMuch of the code and documentation was copied from numeral notations.\n\nI chose to use a 256-constructor inductive for primitive string syntax\nbecause (a) it is easy to convert between character codes and\nconstructors, and (b) it is more efficient than the existing `ascii`\ntype.\n\nSome choices about proofs of the new `byte` type were made based on\nefficiency.  For example, https://github.com/coq/coq/issues/8517 means\nthat we cannot simply use `Scheme Equality` for this type, and I have\ntaken some care to ensure that the proofs of decidable equality and\nconversion are fast.  (Unfortunately, the `Init/Byte.v` file is the\nslowest one in the prelude (it takes a couple of seconds to build), and\nI'm not sure where the slowness is.)\n\nIn String.v, some uses of `0` as a `nat` were replaced by `O`, because\nthe file initially refused to check interactively otherwise (it\ncomplained that `0` could not be interpreted in `string_scope` before\nloading `Coq.Strings.String`).\n\nThere is unfortunately a decent amount of code duplication between\nnumeral notations and string notations.\n\nI have not put too much thought into chosing names; most names have been\nchosen to be similar to numeral notations, though I chose the name\n`byte` from\nhttps://github.com/coq/coq/issues/8483#issuecomment-421671785.\n\nUnfortunately, this feature does not support declaring string syntax for\n`list ascii`, unless that type is wrapped in a record or other inductive\ntype.  This is not a fundamental limitation; it should be relatively\neasy for someone who knows the API of the reduction machinery in Coq to\nextend both this and numeral notations to support any type whose hnf\nstarts with an inductive type.  (The reason for needing an inductive\ntype to bottom out at is that this is how the plugin determines what\nconstructors are the entry points for printing the given notation.\nHowever, see also https://github.com/coq/coq/issues/8964 for\ncomplications that are more likely to arise if inductive type families\nare supported.)\n\nN.B. I generated the long lists of constructors for the `byte` type with\nshort python scripts.\n\nCloses #8853\n","author_name":"Jason Gross","author_email":"jgross@mit.edu","authored_date":"2018-11-07T21:19:05.000-05:00","committer_name":"Jason Gross","committer_email":"jgross@mit.edu","committed_date":"2018-11-10T02:56:39.000-05:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/1fe92c616fe9c95c6650c1a85e690ecd336c3b24"},"pipeline":{"id":36106420,"iid":5115,"project_id":6138686,"sha":"1fe92c616fe9c95c6650c1a85e690ecd336c3b24","ref":"pr-8965","status":"failed","source":"push","created_at":"2018-11-10T07:56:57.703Z","updated_at":"2018-11-10T09:10:26.050Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36106420"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/118819977","artifacts":[{"file_type":"trace","size":1522,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":118819976,"status":"failed","stage":"test","name":"test-suite:base","ref":"pr-8965","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-10T07:56:58.003Z","started_at":"2018-11-10T08:27:04.081Z","finished_at":"2018-11-10T08:27:18.483Z","duration":14.40154,"queued_duration":1.62319,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"1fe92c616fe9c95c6650c1a85e690ecd336c3b24","short_id":"1fe92c61","created_at":"2018-11-10T02:56:39.000-05:00","parent_ids":["ce8e37b97ce9db6f39368c50fb0ee4a7839ce754"],"title":"Add `String Notation` vernacular like `Numeral Notation`","message":"Add `String Notation` vernacular like `Numeral Notation`\n\nUsers can now register string notations for custom inductives.\n\nMuch of the code and documentation was copied from numeral notations.\n\nI chose to use a 256-constructor inductive for primitive string syntax\nbecause (a) it is easy to convert between character codes and\nconstructors, and (b) it is more efficient than the existing `ascii`\ntype.\n\nSome choices about proofs of the new `byte` type were made based on\nefficiency.  For example, https://github.com/coq/coq/issues/8517 means\nthat we cannot simply use `Scheme Equality` for this type, and I have\ntaken some care to ensure that the proofs of decidable equality and\nconversion are fast.  (Unfortunately, the `Init/Byte.v` file is the\nslowest one in the prelude (it takes a couple of seconds to build), and\nI'm not sure where the slowness is.)\n\nIn String.v, some uses of `0` as a `nat` were replaced by `O`, because\nthe file initially refused to check interactively otherwise (it\ncomplained that `0` could not be interpreted in `string_scope` before\nloading `Coq.Strings.String`).\n\nThere is unfortunately a decent amount of code duplication between\nnumeral notations and string notations.\n\nI have not put too much thought into chosing names; most names have been\nchosen to be similar to numeral notations, though I chose the name\n`byte` from\nhttps://github.com/coq/coq/issues/8483#issuecomment-421671785.\n\nUnfortunately, this feature does not support declaring string syntax for\n`list ascii`, unless that type is wrapped in a record or other inductive\ntype.  This is not a fundamental limitation; it should be relatively\neasy for someone who knows the API of the reduction machinery in Coq to\nextend both this and numeral notations to support any type whose hnf\nstarts with an inductive type.  (The reason for needing an inductive\ntype to bottom out at is that this is how the plugin determines what\nconstructors are the entry points for printing the given notation.\nHowever, see also https://github.com/coq/coq/issues/8964 for\ncomplications that are more likely to arise if inductive type families\nare supported.)\n\nN.B. I generated the long lists of constructors for the `byte` type with\nshort python scripts.\n\nCloses #8853\n","author_name":"Jason Gross","author_email":"jgross@mit.edu","authored_date":"2018-11-07T21:19:05.000-05:00","committer_name":"Jason Gross","committer_email":"jgross@mit.edu","committed_date":"2018-11-10T02:56:39.000-05:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/1fe92c616fe9c95c6650c1a85e690ecd336c3b24"},"pipeline":{"id":36106420,"iid":5115,"project_id":6138686,"sha":"1fe92c616fe9c95c6650c1a85e690ecd336c3b24","ref":"pr-8965","status":"failed","source":"push","created_at":"2018-11-10T07:56:57.703Z","updated_at":"2018-11-10T09:10:26.050Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36106420"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/118819976","artifacts":[{"file_type":"trace","size":1442,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":118819974,"status":"failed","stage":"test","name":"doc:ml-api:odoc","ref":"pr-8965","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-10T07:56:57.975Z","started_at":"2018-11-10T08:27:03.632Z","finished_at":"2018-11-10T08:27:15.172Z","duration":11.539342,"queued_duration":1.069334,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"1fe92c616fe9c95c6650c1a85e690ecd336c3b24","short_id":"1fe92c61","created_at":"2018-11-10T02:56:39.000-05:00","parent_ids":["ce8e37b97ce9db6f39368c50fb0ee4a7839ce754"],"title":"Add `String Notation` vernacular like `Numeral Notation`","message":"Add `String Notation` vernacular like `Numeral Notation`\n\nUsers can now register string notations for custom inductives.\n\nMuch of the code and documentation was copied from numeral notations.\n\nI chose to use a 256-constructor inductive for primitive string syntax\nbecause (a) it is easy to convert between character codes and\nconstructors, and (b) it is more efficient than the existing `ascii`\ntype.\n\nSome choices about proofs of the new `byte` type were made based on\nefficiency.  For example, https://github.com/coq/coq/issues/8517 means\nthat we cannot simply use `Scheme Equality` for this type, and I have\ntaken some care to ensure that the proofs of decidable equality and\nconversion are fast.  (Unfortunately, the `Init/Byte.v` file is the\nslowest one in the prelude (it takes a couple of seconds to build), and\nI'm not sure where the slowness is.)\n\nIn String.v, some uses of `0` as a `nat` were replaced by `O`, because\nthe file initially refused to check interactively otherwise (it\ncomplained that `0` could not be interpreted in `string_scope` before\nloading `Coq.Strings.String`).\n\nThere is unfortunately a decent amount of code duplication between\nnumeral notations and string notations.\n\nI have not put too much thought into chosing names; most names have been\nchosen to be similar to numeral notations, though I chose the name\n`byte` from\nhttps://github.com/coq/coq/issues/8483#issuecomment-421671785.\n\nUnfortunately, this feature does not support declaring string syntax for\n`list ascii`, unless that type is wrapped in a record or other inductive\ntype.  This is not a fundamental limitation; it should be relatively\neasy for someone who knows the API of the reduction machinery in Coq to\nextend both this and numeral notations to support any type whose hnf\nstarts with an inductive type.  (The reason for needing an inductive\ntype to bottom out at is that this is how the plugin determines what\nconstructors are the entry points for printing the given notation.\nHowever, see also https://github.com/coq/coq/issues/8964 for\ncomplications that are more likely to arise if inductive type families\nare supported.)\n\nN.B. I generated the long lists of constructors for the `byte` type with\nshort python scripts.\n\nCloses #8853\n","author_name":"Jason Gross","author_email":"jgross@mit.edu","authored_date":"2018-11-07T21:19:05.000-05:00","committer_name":"Jason Gross","committer_email":"jgross@mit.edu","committed_date":"2018-11-10T02:56:39.000-05:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/1fe92c616fe9c95c6650c1a85e690ecd336c3b24"},"pipeline":{"id":36106420,"iid":5115,"project_id":6138686,"sha":"1fe92c616fe9c95c6650c1a85e690ecd336c3b24","ref":"pr-8965","status":"failed","source":"push","created_at":"2018-11-10T07:56:57.703Z","updated_at":"2018-11-10T09:10:26.050Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36106420"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/118819974","artifacts":[{"file_type":"trace","size":4128,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":118819972,"status":"failed","stage":"test","name":"doc:refman","ref":"pr-8965","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-10T07:56:57.948Z","started_at":"2018-11-10T08:27:02.664Z","finished_at":"2018-11-10T08:27:13.917Z","duration":11.253013,"queued_duration":0.06479,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"1fe92c616fe9c95c6650c1a85e690ecd336c3b24","short_id":"1fe92c61","created_at":"2018-11-10T02:56:39.000-05:00","parent_ids":["ce8e37b97ce9db6f39368c50fb0ee4a7839ce754"],"title":"Add `String Notation` vernacular like `Numeral Notation`","message":"Add `String Notation` vernacular like `Numeral Notation`\n\nUsers can now register string notations for custom inductives.\n\nMuch of the code and documentation was copied from numeral notations.\n\nI chose to use a 256-constructor inductive for primitive string syntax\nbecause (a) it is easy to convert between character codes and\nconstructors, and (b) it is more efficient than the existing `ascii`\ntype.\n\nSome choices about proofs of the new `byte` type were made based on\nefficiency.  For example, https://github.com/coq/coq/issues/8517 means\nthat we cannot simply use `Scheme Equality` for this type, and I have\ntaken some care to ensure that the proofs of decidable equality and\nconversion are fast.  (Unfortunately, the `Init/Byte.v` file is the\nslowest one in the prelude (it takes a couple of seconds to build), and\nI'm not sure where the slowness is.)\n\nIn String.v, some uses of `0` as a `nat` were replaced by `O`, because\nthe file initially refused to check interactively otherwise (it\ncomplained that `0` could not be interpreted in `string_scope` before\nloading `Coq.Strings.String`).\n\nThere is unfortunately a decent amount of code duplication between\nnumeral notations and string notations.\n\nI have not put too much thought into chosing names; most names have been\nchosen to be similar to numeral notations, though I chose the name\n`byte` from\nhttps://github.com/coq/coq/issues/8483#issuecomment-421671785.\n\nUnfortunately, this feature does not support declaring string syntax for\n`list ascii`, unless that type is wrapped in a record or other inductive\ntype.  This is not a fundamental limitation; it should be relatively\neasy for someone who knows the API of the reduction machinery in Coq to\nextend both this and numeral notations to support any type whose hnf\nstarts with an inductive type.  (The reason for needing an inductive\ntype to bottom out at is that this is how the plugin determines what\nconstructors are the entry points for printing the given notation.\nHowever, see also https://github.com/coq/coq/issues/8964 for\ncomplications that are more likely to arise if inductive type families\nare supported.)\n\nN.B. I generated the long lists of constructors for the `byte` type with\nshort python scripts.\n\nCloses #8853\n","author_name":"Jason Gross","author_email":"jgross@mit.edu","authored_date":"2018-11-07T21:19:05.000-05:00","committer_name":"Jason Gross","committer_email":"jgross@mit.edu","committed_date":"2018-11-10T02:56:39.000-05:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/1fe92c616fe9c95c6650c1a85e690ecd336c3b24"},"pipeline":{"id":36106420,"iid":5115,"project_id":6138686,"sha":"1fe92c616fe9c95c6650c1a85e690ecd336c3b24","ref":"pr-8965","status":"failed","source":"push","created_at":"2018-11-10T07:56:57.703Z","updated_at":"2018-11-10T09:10:26.050Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36106420"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/118819972","artifacts":[{"file_type":"trace","size":25743,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":118819971,"status":"failed","stage":"test","name":"pkg:nix","ref":"pr-8965","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-10T07:56:57.924Z","started_at":"2018-11-10T08:27:03.334Z","finished_at":"2018-11-10T09:10:25.983Z","duration":2602.649689,"queued_duration":0.680527,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"1fe92c616fe9c95c6650c1a85e690ecd336c3b24","short_id":"1fe92c61","created_at":"2018-11-10T02:56:39.000-05:00","parent_ids":["ce8e37b97ce9db6f39368c50fb0ee4a7839ce754"],"title":"Add `String Notation` vernacular like `Numeral Notation`","message":"Add `String Notation` vernacular like `Numeral Notation`\n\nUsers can now register string notations for custom inductives.\n\nMuch of the code and documentation was copied from numeral notations.\n\nI chose to use a 256-constructor inductive for primitive string syntax\nbecause (a) it is easy to convert between character codes and\nconstructors, and (b) it is more efficient than the existing `ascii`\ntype.\n\nSome choices about proofs of the new `byte` type were made based on\nefficiency.  For example, https://github.com/coq/coq/issues/8517 means\nthat we cannot simply use `Scheme Equality` for this type, and I have\ntaken some care to ensure that the proofs of decidable equality and\nconversion are fast.  (Unfortunately, the `Init/Byte.v` file is the\nslowest one in the prelude (it takes a couple of seconds to build), and\nI'm not sure where the slowness is.)\n\nIn String.v, some uses of `0` as a `nat` were replaced by `O`, because\nthe file initially refused to check interactively otherwise (it\ncomplained that `0` could not be interpreted in `string_scope` before\nloading `Coq.Strings.String`).\n\nThere is unfortunately a decent amount of code duplication between\nnumeral notations and string notations.\n\nI have not put too much thought into chosing names; most names have been\nchosen to be similar to numeral notations, though I chose the name\n`byte` from\nhttps://github.com/coq/coq/issues/8483#issuecomment-421671785.\n\nUnfortunately, this feature does not support declaring string syntax for\n`list ascii`, unless that type is wrapped in a record or other inductive\ntype.  This is not a fundamental limitation; it should be relatively\neasy for someone who knows the API of the reduction machinery in Coq to\nextend both this and numeral notations to support any type whose hnf\nstarts with an inductive type.  (The reason for needing an inductive\ntype to bottom out at is that this is how the plugin determines what\nconstructors are the entry points for printing the given notation.\nHowever, see also https://github.com/coq/coq/issues/8964 for\ncomplications that are more likely to arise if inductive type families\nare supported.)\n\nN.B. I generated the long lists of constructors for the `byte` type with\nshort python scripts.\n\nCloses #8853\n","author_name":"Jason Gross","author_email":"jgross@mit.edu","authored_date":"2018-11-07T21:19:05.000-05:00","committer_name":"Jason Gross","committer_email":"jgross@mit.edu","committed_date":"2018-11-10T02:56:39.000-05:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/1fe92c616fe9c95c6650c1a85e690ecd336c3b24"},"pipeline":{"id":36106420,"iid":5115,"project_id":6138686,"sha":"1fe92c616fe9c95c6650c1a85e690ecd336c3b24","ref":"pr-8965","status":"failed","source":"push","created_at":"2018-11-10T07:56:57.703Z","updated_at":"2018-11-10T09:10:26.050Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36106420"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/118819971","artifacts":[{"file_type":"trace","size":657278,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":118819969,"status":"failed","stage":"test","name":"pkg:opam","ref":"pr-8965","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-10T07:56:57.897Z","started_at":"2018-11-10T08:27:02.998Z","finished_at":"2018-11-10T08:27:14.874Z","duration":11.876013,"queued_duration":0.311069,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"1fe92c616fe9c95c6650c1a85e690ecd336c3b24","short_id":"1fe92c61","created_at":"2018-11-10T02:56:39.000-05:00","parent_ids":["ce8e37b97ce9db6f39368c50fb0ee4a7839ce754"],"title":"Add `String Notation` vernacular like `Numeral Notation`","message":"Add `String Notation` vernacular like `Numeral Notation`\n\nUsers can now register string notations for custom inductives.\n\nMuch of the code and documentation was copied from numeral notations.\n\nI chose to use a 256-constructor inductive for primitive string syntax\nbecause (a) it is easy to convert between character codes and\nconstructors, and (b) it is more efficient than the existing `ascii`\ntype.\n\nSome choices about proofs of the new `byte` type were made based on\nefficiency.  For example, https://github.com/coq/coq/issues/8517 means\nthat we cannot simply use `Scheme Equality` for this type, and I have\ntaken some care to ensure that the proofs of decidable equality and\nconversion are fast.  (Unfortunately, the `Init/Byte.v` file is the\nslowest one in the prelude (it takes a couple of seconds to build), and\nI'm not sure where the slowness is.)\n\nIn String.v, some uses of `0` as a `nat` were replaced by `O`, because\nthe file initially refused to check interactively otherwise (it\ncomplained that `0` could not be interpreted in `string_scope` before\nloading `Coq.Strings.String`).\n\nThere is unfortunately a decent amount of code duplication between\nnumeral notations and string notations.\n\nI have not put too much thought into chosing names; most names have been\nchosen to be similar to numeral notations, though I chose the name\n`byte` from\nhttps://github.com/coq/coq/issues/8483#issuecomment-421671785.\n\nUnfortunately, this feature does not support declaring string syntax for\n`list ascii`, unless that type is wrapped in a record or other inductive\ntype.  This is not a fundamental limitation; it should be relatively\neasy for someone who knows the API of the reduction machinery in Coq to\nextend both this and numeral notations to support any type whose hnf\nstarts with an inductive type.  (The reason for needing an inductive\ntype to bottom out at is that this is how the plugin determines what\nconstructors are the entry points for printing the given notation.\nHowever, see also https://github.com/coq/coq/issues/8964 for\ncomplications that are more likely to arise if inductive type families\nare supported.)\n\nN.B. I generated the long lists of constructors for the `byte` type with\nshort python scripts.\n\nCloses #8853\n","author_name":"Jason Gross","author_email":"jgross@mit.edu","authored_date":"2018-11-07T21:19:05.000-05:00","committer_name":"Jason Gross","committer_email":"jgross@mit.edu","committed_date":"2018-11-10T02:56:39.000-05:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/1fe92c616fe9c95c6650c1a85e690ecd336c3b24"},"pipeline":{"id":36106420,"iid":5115,"project_id":6138686,"sha":"1fe92c616fe9c95c6650c1a85e690ecd336c3b24","ref":"pr-8965","status":"failed","source":"push","created_at":"2018-11-10T07:56:57.703Z","updated_at":"2018-11-10T09:10:26.050Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36106420"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/118819969","artifacts":[{"file_type":"trace","size":27347,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":118819967,"status":"failed","stage":"test","name":"windows64","ref":"pr-8965","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-10T07:56:57.868Z","started_at":"2018-11-10T08:27:03.054Z","finished_at":"2018-11-10T08:27:13.732Z","duration":10.677818,"queued_duration":0.333915,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"1fe92c616fe9c95c6650c1a85e690ecd336c3b24","short_id":"1fe92c61","created_at":"2018-11-10T02:56:39.000-05:00","parent_ids":["ce8e37b97ce9db6f39368c50fb0ee4a7839ce754"],"title":"Add `String Notation` vernacular like `Numeral Notation`","message":"Add `String Notation` vernacular like `Numeral Notation`\n\nUsers can now register string notations for custom inductives.\n\nMuch of the code and documentation was copied from numeral notations.\n\nI chose to use a 256-constructor inductive for primitive string syntax\nbecause (a) it is easy to convert between character codes and\nconstructors, and (b) it is more efficient than the existing `ascii`\ntype.\n\nSome choices about proofs of the new `byte` type were made based on\nefficiency.  For example, https://github.com/coq/coq/issues/8517 means\nthat we cannot simply use `Scheme Equality` for this type, and I have\ntaken some care to ensure that the proofs of decidable equality and\nconversion are fast.  (Unfortunately, the `Init/Byte.v` file is the\nslowest one in the prelude (it takes a couple of seconds to build), and\nI'm not sure where the slowness is.)\n\nIn String.v, some uses of `0` as a `nat` were replaced by `O`, because\nthe file initially refused to check interactively otherwise (it\ncomplained that `0` could not be interpreted in `string_scope` before\nloading `Coq.Strings.String`).\n\nThere is unfortunately a decent amount of code duplication between\nnumeral notations and string notations.\n\nI have not put too much thought into chosing names; most names have been\nchosen to be similar to numeral notations, though I chose the name\n`byte` from\nhttps://github.com/coq/coq/issues/8483#issuecomment-421671785.\n\nUnfortunately, this feature does not support declaring string syntax for\n`list ascii`, unless that type is wrapped in a record or other inductive\ntype.  This is not a fundamental limitation; it should be relatively\neasy for someone who knows the API of the reduction machinery in Coq to\nextend both this and numeral notations to support any type whose hnf\nstarts with an inductive type.  (The reason for needing an inductive\ntype to bottom out at is that this is how the plugin determines what\nconstructors are the entry points for printing the given notation.\nHowever, see also https://github.com/coq/coq/issues/8964 for\ncomplications that are more likely to arise if inductive type families\nare supported.)\n\nN.B. I generated the long lists of constructors for the `byte` type with\nshort python scripts.\n\nCloses #8853\n","author_name":"Jason Gross","author_email":"jgross@mit.edu","authored_date":"2018-11-07T21:19:05.000-05:00","committer_name":"Jason Gross","committer_email":"jgross@mit.edu","committed_date":"2018-11-10T02:56:39.000-05:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/1fe92c616fe9c95c6650c1a85e690ecd336c3b24"},"pipeline":{"id":36106420,"iid":5115,"project_id":6138686,"sha":"1fe92c616fe9c95c6650c1a85e690ecd336c3b24","ref":"pr-8965","status":"failed","source":"push","created_at":"2018-11-10T07:56:57.703Z","updated_at":"2018-11-10T09:10:26.050Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36106420"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/118819967","artifacts":[{"file_type":"trace","size":1228,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":"2018-11-17T08:27:12.959Z","tag_list":["windows"]}
{"id":118819965,"status":"success","stage":"build","name":"build:egde:dune:dev","ref":"pr-8965","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-10T07:56:57.828Z","started_at":"2018-11-10T07:57:00.430Z","finished_at":"2018-11-10T08:13:42.332Z","duration":1001.902578,"queued_duration":1.217306,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"1fe92c616fe9c95c6650c1a85e690ecd336c3b24","short_id":"1fe92c61","created_at":"2018-11-10T02:56:39.000-05:00","parent_ids":["ce8e37b97ce9db6f39368c50fb0ee4a7839ce754"],"title":"Add `String Notation` vernacular like `Numeral Notation`","message":"Add `String Notation` vernacular like `Numeral Notation`\n\nUsers can now register string notations for custom inductives.\n\nMuch of the code and documentation was copied from numeral notations.\n\nI chose to use a 256-constructor inductive for primitive string syntax\nbecause (a) it is easy to convert between character codes and\nconstructors, and (b) it is more efficient than the existing `ascii`\ntype.\n\nSome choices about proofs of the new `byte` type were made based on\nefficiency.  For example, https://github.com/coq/coq/issues/8517 means\nthat we cannot simply use `Scheme Equality` for this type, and I have\ntaken some care to ensure that the proofs of decidable equality and\nconversion are fast.  (Unfortunately, the `Init/Byte.v` file is the\nslowest one in the prelude (it takes a couple of seconds to build), and\nI'm not sure where the slowness is.)\n\nIn String.v, some uses of `0` as a `nat` were replaced by `O`, because\nthe file initially refused to check interactively otherwise (it\ncomplained that `0` could not be interpreted in `string_scope` before\nloading `Coq.Strings.String`).\n\nThere is unfortunately a decent amount of code duplication between\nnumeral notations and string notations.\n\nI have not put too much thought into chosing names; most names have been\nchosen to be similar to numeral notations, though I chose the name\n`byte` from\nhttps://github.com/coq/coq/issues/8483#issuecomment-421671785.\n\nUnfortunately, this feature does not support declaring string syntax for\n`list ascii`, unless that type is wrapped in a record or other inductive\ntype.  This is not a fundamental limitation; it should be relatively\neasy for someone who knows the API of the reduction machinery in Coq to\nextend both this and numeral notations to support any type whose hnf\nstarts with an inductive type.  (The reason for needing an inductive\ntype to bottom out at is that this is how the plugin determines what\nconstructors are the entry points for printing the given notation.\nHowever, see also https://github.com/coq/coq/issues/8964 for\ncomplications that are more likely to arise if inductive type families\nare supported.)\n\nN.B. I generated the long lists of constructors for the `byte` type with\nshort python scripts.\n\nCloses #8853\n","author_name":"Jason Gross","author_email":"jgross@mit.edu","authored_date":"2018-11-07T21:19:05.000-05:00","committer_name":"Jason Gross","committer_email":"jgross@mit.edu","committed_date":"2018-11-10T02:56:39.000-05:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/1fe92c616fe9c95c6650c1a85e690ecd336c3b24"},"pipeline":{"id":36106420,"iid":5115,"project_id":6138686,"sha":"1fe92c616fe9c95c6650c1a85e690ecd336c3b24","ref":"pr-8965","status":"failed","source":"push","created_at":"2018-11-10T07:56:57.703Z","updated_at":"2018-11-10T09:10:26.050Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36106420"},"web_url":"https://gitlab.com/coq/coq/-/jobs/118819965","artifacts":[{"file_type":"trace","size":19694,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2018-11-17T08:13:34.704Z","tag_list":[]}
{"id":118819964,"status":"success","stage":"build","name":"build:edge+flambda","ref":"pr-8965","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-10T07:56:57.803Z","started_at":"2018-11-10T07:57:00.311Z","finished_at":"2018-11-10T08:27:00.676Z","duration":1800.364871,"queued_duration":0.918245,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"1fe92c616fe9c95c6650c1a85e690ecd336c3b24","short_id":"1fe92c61","created_at":"2018-11-10T02:56:39.000-05:00","parent_ids":["ce8e37b97ce9db6f39368c50fb0ee4a7839ce754"],"title":"Add `String Notation` vernacular like `Numeral Notation`","message":"Add `String Notation` vernacular like `Numeral Notation`\n\nUsers can now register string notations for custom inductives.\n\nMuch of the code and documentation was copied from numeral notations.\n\nI chose to use a 256-constructor inductive for primitive string syntax\nbecause (a) it is easy to convert between character codes and\nconstructors, and (b) it is more efficient than the existing `ascii`\ntype.\n\nSome choices about proofs of the new `byte` type were made based on\nefficiency.  For example, https://github.com/coq/coq/issues/8517 means\nthat we cannot simply use `Scheme Equality` for this type, and I have\ntaken some care to ensure that the proofs of decidable equality and\nconversion are fast.  (Unfortunately, the `Init/Byte.v` file is the\nslowest one in the prelude (it takes a couple of seconds to build), and\nI'm not sure where the slowness is.)\n\nIn String.v, some uses of `0` as a `nat` were replaced by `O`, because\nthe file initially refused to check interactively otherwise (it\ncomplained that `0` could not be interpreted in `string_scope` before\nloading `Coq.Strings.String`).\n\nThere is unfortunately a decent amount of code duplication between\nnumeral notations and string notations.\n\nI have not put too much thought into chosing names; most names have been\nchosen to be similar to numeral notations, though I chose the name\n`byte` from\nhttps://github.com/coq/coq/issues/8483#issuecomment-421671785.\n\nUnfortunately, this feature does not support declaring string syntax for\n`list ascii`, unless that type is wrapped in a record or other inductive\ntype.  This is not a fundamental limitation; it should be relatively\neasy for someone who knows the API of the reduction machinery in Coq to\nextend both this and numeral notations to support any type whose hnf\nstarts with an inductive type.  (The reason for needing an inductive\ntype to bottom out at is that this is how the plugin determines what\nconstructors are the entry points for printing the given notation.\nHowever, see also https://github.com/coq/coq/issues/8964 for\ncomplications that are more likely to arise if inductive type families\nare supported.)\n\nN.B. I generated the long lists of constructors for the `byte` type with\nshort python scripts.\n\nCloses #8853\n","author_name":"Jason Gross","author_email":"jgross@mit.edu","authored_date":"2018-11-07T21:19:05.000-05:00","committer_name":"Jason Gross","committer_email":"jgross@mit.edu","committed_date":"2018-11-10T02:56:39.000-05:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/1fe92c616fe9c95c6650c1a85e690ecd336c3b24"},"pipeline":{"id":36106420,"iid":5115,"project_id":6138686,"sha":"1fe92c616fe9c95c6650c1a85e690ecd336c3b24","ref":"pr-8965","status":"failed","source":"push","created_at":"2018-11-10T07:56:57.703Z","updated_at":"2018-11-10T09:10:26.050Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36106420"},"web_url":"https://gitlab.com/coq/coq/-/jobs/118819964","artifacts":[{"file_type":"trace","size":233084,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2018-11-17T08:26:53.114Z","tag_list":[]}
{"id":118819962,"status":"success","stage":"build","name":"build:edge","ref":"pr-8965","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-10T07:56:57.772Z","started_at":"2018-11-10T07:57:00.257Z","finished_at":"2018-11-10T08:15:13.348Z","duration":1093.091174,"queued_duration":0.637851,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"1fe92c616fe9c95c6650c1a85e690ecd336c3b24","short_id":"1fe92c61","created_at":"2018-11-10T02:56:39.000-05:00","parent_ids":["ce8e37b97ce9db6f39368c50fb0ee4a7839ce754"],"title":"Add `String Notation` vernacular like `Numeral Notation`","message":"Add `String Notation` vernacular like `Numeral Notation`\n\nUsers can now register string notations for custom inductives.\n\nMuch of the code and documentation was copied from numeral notations.\n\nI chose to use a 256-constructor inductive for primitive string syntax\nbecause (a) it is easy to convert between character codes and\nconstructors, and (b) it is more efficient than the existing `ascii`\ntype.\n\nSome choices about proofs of the new `byte` type were made based on\nefficiency.  For example, https://github.com/coq/coq/issues/8517 means\nthat we cannot simply use `Scheme Equality` for this type, and I have\ntaken some care to ensure that the proofs of decidable equality and\nconversion are fast.  (Unfortunately, the `Init/Byte.v` file is the\nslowest one in the prelude (it takes a couple of seconds to build), and\nI'm not sure where the slowness is.)\n\nIn String.v, some uses of `0` as a `nat` were replaced by `O`, because\nthe file initially refused to check interactively otherwise (it\ncomplained that `0` could not be interpreted in `string_scope` before\nloading `Coq.Strings.String`).\n\nThere is unfortunately a decent amount of code duplication between\nnumeral notations and string notations.\n\nI have not put too much thought into chosing names; most names have been\nchosen to be similar to numeral notations, though I chose the name\n`byte` from\nhttps://github.com/coq/coq/issues/8483#issuecomment-421671785.\n\nUnfortunately, this feature does not support declaring string syntax for\n`list ascii`, unless that type is wrapped in a record or other inductive\ntype.  This is not a fundamental limitation; it should be relatively\neasy for someone who knows the API of the reduction machinery in Coq to\nextend both this and numeral notations to support any type whose hnf\nstarts with an inductive type.  (The reason for needing an inductive\ntype to bottom out at is that this is how the plugin determines what\nconstructors are the entry points for printing the given notation.\nHowever, see also https://github.com/coq/coq/issues/8964 for\ncomplications that are more likely to arise if inductive type families\nare supported.)\n\nN.B. I generated the long lists of constructors for the `byte` type with\nshort python scripts.\n\nCloses #8853\n","author_name":"Jason Gross","author_email":"jgross@mit.edu","authored_date":"2018-11-07T21:19:05.000-05:00","committer_name":"Jason Gross","committer_email":"jgross@mit.edu","committed_date":"2018-11-10T02:56:39.000-05:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/1fe92c616fe9c95c6650c1a85e690ecd336c3b24"},"pipeline":{"id":36106420,"iid":5115,"project_id":6138686,"sha":"1fe92c616fe9c95c6650c1a85e690ecd336c3b24","ref":"pr-8965","status":"failed","source":"push","created_at":"2018-11-10T07:56:57.703Z","updated_at":"2018-11-10T09:10:26.050Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36106420"},"web_url":"https://gitlab.com/coq/coq/-/jobs/118819962","artifacts":[{"file_type":"trace","size":232005,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2018-11-17T08:15:08.400Z","tag_list":[]}
{"id":118819960,"status":"success","stage":"build","name":"build:base+32bit","ref":"pr-8965","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-10T07:56:57.746Z","started_at":"2018-11-10T07:57:00.117Z","finished_at":"2018-11-10T08:11:53.324Z","duration":893.207163,"queued_duration":0.395484,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"1fe92c616fe9c95c6650c1a85e690ecd336c3b24","short_id":"1fe92c61","created_at":"2018-11-10T02:56:39.000-05:00","parent_ids":["ce8e37b97ce9db6f39368c50fb0ee4a7839ce754"],"title":"Add `String Notation` vernacular like `Numeral Notation`","message":"Add `String Notation` vernacular like `Numeral Notation`\n\nUsers can now register string notations for custom inductives.\n\nMuch of the code and documentation was copied from numeral notations.\n\nI chose to use a 256-constructor inductive for primitive string syntax\nbecause (a) it is easy to convert between character codes and\nconstructors, and (b) it is more efficient than the existing `ascii`\ntype.\n\nSome choices about proofs of the new `byte` type were made based on\nefficiency.  For example, https://github.com/coq/coq/issues/8517 means\nthat we cannot simply use `Scheme Equality` for this type, and I have\ntaken some care to ensure that the proofs of decidable equality and\nconversion are fast.  (Unfortunately, the `Init/Byte.v` file is the\nslowest one in the prelude (it takes a couple of seconds to build), and\nI'm not sure where the slowness is.)\n\nIn String.v, some uses of `0` as a `nat` were replaced by `O`, because\nthe file initially refused to check interactively otherwise (it\ncomplained that `0` could not be interpreted in `string_scope` before\nloading `Coq.Strings.String`).\n\nThere is unfortunately a decent amount of code duplication between\nnumeral notations and string notations.\n\nI have not put too much thought into chosing names; most names have been\nchosen to be similar to numeral notations, though I chose the name\n`byte` from\nhttps://github.com/coq/coq/issues/8483#issuecomment-421671785.\n\nUnfortunately, this feature does not support declaring string syntax for\n`list ascii`, unless that type is wrapped in a record or other inductive\ntype.  This is not a fundamental limitation; it should be relatively\neasy for someone who knows the API of the reduction machinery in Coq to\nextend both this and numeral notations to support any type whose hnf\nstarts with an inductive type.  (The reason for needing an inductive\ntype to bottom out at is that this is how the plugin determines what\nconstructors are the entry points for printing the given notation.\nHowever, see also https://github.com/coq/coq/issues/8964 for\ncomplications that are more likely to arise if inductive type families\nare supported.)\n\nN.B. I generated the long lists of constructors for the `byte` type with\nshort python scripts.\n\nCloses #8853\n","author_name":"Jason Gross","author_email":"jgross@mit.edu","authored_date":"2018-11-07T21:19:05.000-05:00","committer_name":"Jason Gross","committer_email":"jgross@mit.edu","committed_date":"2018-11-10T02:56:39.000-05:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/1fe92c616fe9c95c6650c1a85e690ecd336c3b24"},"pipeline":{"id":36106420,"iid":5115,"project_id":6138686,"sha":"1fe92c616fe9c95c6650c1a85e690ecd336c3b24","ref":"pr-8965","status":"failed","source":"push","created_at":"2018-11-10T07:56:57.703Z","updated_at":"2018-11-10T09:10:26.050Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36106420"},"web_url":"https://gitlab.com/coq/coq/-/jobs/118819960","artifacts":[{"file_type":"trace","size":226834,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2018-11-17T08:11:48.681Z","tag_list":[]}
{"id":118819959,"status":"success","stage":"build","name":"build:base","ref":"pr-8965","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-10T07:56:57.716Z","started_at":"2018-11-10T07:57:00.068Z","finished_at":"2018-11-10T08:14:41.422Z","duration":1061.354276,"queued_duration":0.315618,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"1fe92c616fe9c95c6650c1a85e690ecd336c3b24","short_id":"1fe92c61","created_at":"2018-11-10T02:56:39.000-05:00","parent_ids":["ce8e37b97ce9db6f39368c50fb0ee4a7839ce754"],"title":"Add `String Notation` vernacular like `Numeral Notation`","message":"Add `String Notation` vernacular like `Numeral Notation`\n\nUsers can now register string notations for custom inductives.\n\nMuch of the code and documentation was copied from numeral notations.\n\nI chose to use a 256-constructor inductive for primitive string syntax\nbecause (a) it is easy to convert between character codes and\nconstructors, and (b) it is more efficient than the existing `ascii`\ntype.\n\nSome choices about proofs of the new `byte` type were made based on\nefficiency.  For example, https://github.com/coq/coq/issues/8517 means\nthat we cannot simply use `Scheme Equality` for this type, and I have\ntaken some care to ensure that the proofs of decidable equality and\nconversion are fast.  (Unfortunately, the `Init/Byte.v` file is the\nslowest one in the prelude (it takes a couple of seconds to build), and\nI'm not sure where the slowness is.)\n\nIn String.v, some uses of `0` as a `nat` were replaced by `O`, because\nthe file initially refused to check interactively otherwise (it\ncomplained that `0` could not be interpreted in `string_scope` before\nloading `Coq.Strings.String`).\n\nThere is unfortunately a decent amount of code duplication between\nnumeral notations and string notations.\n\nI have not put too much thought into chosing names; most names have been\nchosen to be similar to numeral notations, though I chose the name\n`byte` from\nhttps://github.com/coq/coq/issues/8483#issuecomment-421671785.\n\nUnfortunately, this feature does not support declaring string syntax for\n`list ascii`, unless that type is wrapped in a record or other inductive\ntype.  This is not a fundamental limitation; it should be relatively\neasy for someone who knows the API of the reduction machinery in Coq to\nextend both this and numeral notations to support any type whose hnf\nstarts with an inductive type.  (The reason for needing an inductive\ntype to bottom out at is that this is how the plugin determines what\nconstructors are the entry points for printing the given notation.\nHowever, see also https://github.com/coq/coq/issues/8964 for\ncomplications that are more likely to arise if inductive type families\nare supported.)\n\nN.B. I generated the long lists of constructors for the `byte` type with\nshort python scripts.\n\nCloses #8853\n","author_name":"Jason Gross","author_email":"jgross@mit.edu","authored_date":"2018-11-07T21:19:05.000-05:00","committer_name":"Jason Gross","committer_email":"jgross@mit.edu","committed_date":"2018-11-10T02:56:39.000-05:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/1fe92c616fe9c95c6650c1a85e690ecd336c3b24"},"pipeline":{"id":36106420,"iid":5115,"project_id":6138686,"sha":"1fe92c616fe9c95c6650c1a85e690ecd336c3b24","ref":"pr-8965","status":"failed","source":"push","created_at":"2018-11-10T07:56:57.703Z","updated_at":"2018-11-10T09:10:26.050Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36106420"},"web_url":"https://gitlab.com/coq/coq/-/jobs/118819959","artifacts":[{"file_type":"trace","size":273436,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2018-11-17T08:14:37.247Z","tag_list":[]}
