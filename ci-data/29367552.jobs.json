{"id":94515520,"status":"canceled","stage":"build","name":"build:base+32bit","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-04T13:06:31.051Z","started_at":null,"finished_at":"2018-09-04T13:06:50.023Z","duration":null,"queued_duration":122994674.87083122,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"200f80ef5f73f92e031e760279e18ad18d4348bf","short_id":"200f80ef","created_at":"2018-09-04T14:58:04.000+02:00","parent_ids":["2a458c05b491ebb422e48e551b5ed41eb3ef986e"],"title":"[build] Preliminary support for building Coq with `dune`.","message":"[build] Preliminary support for building Coq with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides automatic generation of\n`version.ml`, `.merlin`, `META`, `opam`, API documentation; install\nmanagement; easy integration with external libraries, test runners,\nand modular builds.\n\nIn particular, Dune uniformly handles components regardless whether\nthey live in, or out-of-tree. This greatly simplifies cases where a\nplugin [or CoqIde] is checked out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can thus be used as a\nmore flexible `coq_makefile` replacement.\n\nFor now we provide experimental support for a Dune build. In order to\nbuild Coq + the standard library with Dune type:\n\n```\n$ make -f Makefile.dune world\n```\n\nThis PR includes a preliminary, developer-only preview of Dune for\nCoq. There is still ongoing work, see\nhttps://github.com/coq/coq/issues/8052 for tracking status towards\nfull support.\n\n## Technical description.\n\nDune works out of the box with Coq, once we have fixed some modularity\nissues. The main remaining challenge was to support `.vo` files.\n\nAs Dune doesn't support custom build rules yet, to properly build\n`.vo` files we provide a small helper script `tools/coq_dune.ml`. The\nscript will scan the Coq library directories and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript uses `coqdep` as to correctly output the dependencies of\n`.v` files. `coq_dune` is akin to `coq_makefile` and should be able to\nbe used to build Coq projects in the future.\n\nDue to this pitfall, the build process has to proceed in three stages:\n1) build `coqdep` and `coq_dune`; 2) generate `dune` files for\n`theories` and `plugins`; 3) perform a regular build with all\ntargets are in scope.\n\n## FAQ\n\n### Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas `opam`, `ocamlfind` or `odoc`. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there has been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative, OCaml-specific build tool that is on\nthe path to become the standard build system for the OCaml ecosystem.\n\nDune seems to be a good fit for Coq well: it is well-supported, fast,\ncompositional, and designed for large projects.\n\n### Does Dune replace the make-based build system?\n\nThe current, make-based build system is unmodified by this PR and kept\nas the default option. However, Dune has the potential\n\n### Is this PR complete? What does it provide?\n\nThis PR is ready for developer preview and feedback. The build system\nis functional, however, more work is necessary in order to make Dune\nthe default for Coq.\n\nThe main TODOs are tracked at https://github.com/coq/coq/issues/8052\n\nThis PR allows developers to use most of the features of Dune today:\n\n- Modular organization of the codebase; each component is built only\n  against declared dependencies so components are checked for\n  containment more strictly.\n- Hygienic builds; Dune places all artifacts under `_build`.\n- Automatic generation of `.install` files, simplified OPAM workflow.\n- `utop` support, `-opaque` in developer mode, etc...\n- `ml4` files are handled using `coqp5`, a native-code customized\n  camlp5 executable which brings much faster `ml4 -> ml` processing.\n\n### What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n### Some Benchs:\n\n```\n$ /usr/bin/time make DUNEOPT=\"-j 1000\" -f Makefile.dune states\n59.50user 18.81system 0:29.83elapsed 262%CPU (0avgtext+0avgdata 302996maxresident)k\n0inputs+646632outputs (0major+4893811minor)pagefaults 0swaps\n\n$ /usr/bin/time sh -c \"./configure -local -native-compiler no && make -j states\"\n88.21user 23.65system 0:32.96elapsed 339%CPU (0avgtext+0avgdata 304992maxresident)k\n0inputs+1051680outputs (0major+5300680minor)pagefaults 0swaps\n```\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-09-04T14:58:04.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/200f80ef5f73f92e031e760279e18ad18d4348bf"},"pipeline":{"id":29367552,"iid":2929,"project_id":6138686,"sha":"200f80ef5f73f92e031e760279e18ad18d4348bf","ref":"pr-6857","status":"canceled","source":"push","created_at":"2018-09-04T12:58:46.873Z","updated_at":"2018-09-04T13:06:50.102Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/29367552"},"web_url":"https://gitlab.com/coq/coq/-/jobs/94515520","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":94511675,"status":"canceled","stage":"test","name":"ci-vst","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-04T12:58:48.164Z","started_at":null,"finished_at":"2018-09-04T13:06:50.006Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"200f80ef5f73f92e031e760279e18ad18d4348bf","short_id":"200f80ef","created_at":"2018-09-04T14:58:04.000+02:00","parent_ids":["2a458c05b491ebb422e48e551b5ed41eb3ef986e"],"title":"[build] Preliminary support for building Coq with `dune`.","message":"[build] Preliminary support for building Coq with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides automatic generation of\n`version.ml`, `.merlin`, `META`, `opam`, API documentation; install\nmanagement; easy integration with external libraries, test runners,\nand modular builds.\n\nIn particular, Dune uniformly handles components regardless whether\nthey live in, or out-of-tree. This greatly simplifies cases where a\nplugin [or CoqIde] is checked out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can thus be used as a\nmore flexible `coq_makefile` replacement.\n\nFor now we provide experimental support for a Dune build. In order to\nbuild Coq + the standard library with Dune type:\n\n```\n$ make -f Makefile.dune world\n```\n\nThis PR includes a preliminary, developer-only preview of Dune for\nCoq. There is still ongoing work, see\nhttps://github.com/coq/coq/issues/8052 for tracking status towards\nfull support.\n\n## Technical description.\n\nDune works out of the box with Coq, once we have fixed some modularity\nissues. The main remaining challenge was to support `.vo` files.\n\nAs Dune doesn't support custom build rules yet, to properly build\n`.vo` files we provide a small helper script `tools/coq_dune.ml`. The\nscript will scan the Coq library directories and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript uses `coqdep` as to correctly output the dependencies of\n`.v` files. `coq_dune` is akin to `coq_makefile` and should be able to\nbe used to build Coq projects in the future.\n\nDue to this pitfall, the build process has to proceed in three stages:\n1) build `coqdep` and `coq_dune`; 2) generate `dune` files for\n`theories` and `plugins`; 3) perform a regular build with all\ntargets are in scope.\n\n## FAQ\n\n### Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas `opam`, `ocamlfind` or `odoc`. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there has been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative, OCaml-specific build tool that is on\nthe path to become the standard build system for the OCaml ecosystem.\n\nDune seems to be a good fit for Coq well: it is well-supported, fast,\ncompositional, and designed for large projects.\n\n### Does Dune replace the make-based build system?\n\nThe current, make-based build system is unmodified by this PR and kept\nas the default option. However, Dune has the potential\n\n### Is this PR complete? What does it provide?\n\nThis PR is ready for developer preview and feedback. The build system\nis functional, however, more work is necessary in order to make Dune\nthe default for Coq.\n\nThe main TODOs are tracked at https://github.com/coq/coq/issues/8052\n\nThis PR allows developers to use most of the features of Dune today:\n\n- Modular organization of the codebase; each component is built only\n  against declared dependencies so components are checked for\n  containment more strictly.\n- Hygienic builds; Dune places all artifacts under `_build`.\n- Automatic generation of `.install` files, simplified OPAM workflow.\n- `utop` support, `-opaque` in developer mode, etc...\n- `ml4` files are handled using `coqp5`, a native-code customized\n  camlp5 executable which brings much faster `ml4 -> ml` processing.\n\n### What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n### Some Benchs:\n\n```\n$ /usr/bin/time make DUNEOPT=\"-j 1000\" -f Makefile.dune states\n59.50user 18.81system 0:29.83elapsed 262%CPU (0avgtext+0avgdata 302996maxresident)k\n0inputs+646632outputs (0major+4893811minor)pagefaults 0swaps\n\n$ /usr/bin/time sh -c \"./configure -local -native-compiler no && make -j states\"\n88.21user 23.65system 0:32.96elapsed 339%CPU (0avgtext+0avgdata 304992maxresident)k\n0inputs+1051680outputs (0major+5300680minor)pagefaults 0swaps\n```\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-09-04T14:58:04.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/200f80ef5f73f92e031e760279e18ad18d4348bf"},"pipeline":{"id":29367552,"iid":2929,"project_id":6138686,"sha":"200f80ef5f73f92e031e760279e18ad18d4348bf","ref":"pr-6857","status":"canceled","source":"push","created_at":"2018-09-04T12:58:46.873Z","updated_at":"2018-09-04T13:06:50.102Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/29367552"},"web_url":"https://gitlab.com/coq/coq/-/jobs/94511675","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":94511674,"status":"canceled","stage":"test","name":"ci-unimath","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-04T12:58:48.141Z","started_at":null,"finished_at":"2018-09-04T13:06:49.988Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"200f80ef5f73f92e031e760279e18ad18d4348bf","short_id":"200f80ef","created_at":"2018-09-04T14:58:04.000+02:00","parent_ids":["2a458c05b491ebb422e48e551b5ed41eb3ef986e"],"title":"[build] Preliminary support for building Coq with `dune`.","message":"[build] Preliminary support for building Coq with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides automatic generation of\n`version.ml`, `.merlin`, `META`, `opam`, API documentation; install\nmanagement; easy integration with external libraries, test runners,\nand modular builds.\n\nIn particular, Dune uniformly handles components regardless whether\nthey live in, or out-of-tree. This greatly simplifies cases where a\nplugin [or CoqIde] is checked out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can thus be used as a\nmore flexible `coq_makefile` replacement.\n\nFor now we provide experimental support for a Dune build. In order to\nbuild Coq + the standard library with Dune type:\n\n```\n$ make -f Makefile.dune world\n```\n\nThis PR includes a preliminary, developer-only preview of Dune for\nCoq. There is still ongoing work, see\nhttps://github.com/coq/coq/issues/8052 for tracking status towards\nfull support.\n\n## Technical description.\n\nDune works out of the box with Coq, once we have fixed some modularity\nissues. The main remaining challenge was to support `.vo` files.\n\nAs Dune doesn't support custom build rules yet, to properly build\n`.vo` files we provide a small helper script `tools/coq_dune.ml`. The\nscript will scan the Coq library directories and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript uses `coqdep` as to correctly output the dependencies of\n`.v` files. `coq_dune` is akin to `coq_makefile` and should be able to\nbe used to build Coq projects in the future.\n\nDue to this pitfall, the build process has to proceed in three stages:\n1) build `coqdep` and `coq_dune`; 2) generate `dune` files for\n`theories` and `plugins`; 3) perform a regular build with all\ntargets are in scope.\n\n## FAQ\n\n### Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas `opam`, `ocamlfind` or `odoc`. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there has been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative, OCaml-specific build tool that is on\nthe path to become the standard build system for the OCaml ecosystem.\n\nDune seems to be a good fit for Coq well: it is well-supported, fast,\ncompositional, and designed for large projects.\n\n### Does Dune replace the make-based build system?\n\nThe current, make-based build system is unmodified by this PR and kept\nas the default option. However, Dune has the potential\n\n### Is this PR complete? What does it provide?\n\nThis PR is ready for developer preview and feedback. The build system\nis functional, however, more work is necessary in order to make Dune\nthe default for Coq.\n\nThe main TODOs are tracked at https://github.com/coq/coq/issues/8052\n\nThis PR allows developers to use most of the features of Dune today:\n\n- Modular organization of the codebase; each component is built only\n  against declared dependencies so components are checked for\n  containment more strictly.\n- Hygienic builds; Dune places all artifacts under `_build`.\n- Automatic generation of `.install` files, simplified OPAM workflow.\n- `utop` support, `-opaque` in developer mode, etc...\n- `ml4` files are handled using `coqp5`, a native-code customized\n  camlp5 executable which brings much faster `ml4 -> ml` processing.\n\n### What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n### Some Benchs:\n\n```\n$ /usr/bin/time make DUNEOPT=\"-j 1000\" -f Makefile.dune states\n59.50user 18.81system 0:29.83elapsed 262%CPU (0avgtext+0avgdata 302996maxresident)k\n0inputs+646632outputs (0major+4893811minor)pagefaults 0swaps\n\n$ /usr/bin/time sh -c \"./configure -local -native-compiler no && make -j states\"\n88.21user 23.65system 0:32.96elapsed 339%CPU (0avgtext+0avgdata 304992maxresident)k\n0inputs+1051680outputs (0major+5300680minor)pagefaults 0swaps\n```\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-09-04T14:58:04.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/200f80ef5f73f92e031e760279e18ad18d4348bf"},"pipeline":{"id":29367552,"iid":2929,"project_id":6138686,"sha":"200f80ef5f73f92e031e760279e18ad18d4348bf","ref":"pr-6857","status":"canceled","source":"push","created_at":"2018-09-04T12:58:46.873Z","updated_at":"2018-09-04T13:06:50.102Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/29367552"},"web_url":"https://gitlab.com/coq/coq/-/jobs/94511674","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":94511673,"status":"canceled","stage":"test","name":"ci-sf","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-04T12:58:48.115Z","started_at":null,"finished_at":"2018-09-04T13:06:49.972Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"200f80ef5f73f92e031e760279e18ad18d4348bf","short_id":"200f80ef","created_at":"2018-09-04T14:58:04.000+02:00","parent_ids":["2a458c05b491ebb422e48e551b5ed41eb3ef986e"],"title":"[build] Preliminary support for building Coq with `dune`.","message":"[build] Preliminary support for building Coq with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides automatic generation of\n`version.ml`, `.merlin`, `META`, `opam`, API documentation; install\nmanagement; easy integration with external libraries, test runners,\nand modular builds.\n\nIn particular, Dune uniformly handles components regardless whether\nthey live in, or out-of-tree. This greatly simplifies cases where a\nplugin [or CoqIde] is checked out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can thus be used as a\nmore flexible `coq_makefile` replacement.\n\nFor now we provide experimental support for a Dune build. In order to\nbuild Coq + the standard library with Dune type:\n\n```\n$ make -f Makefile.dune world\n```\n\nThis PR includes a preliminary, developer-only preview of Dune for\nCoq. There is still ongoing work, see\nhttps://github.com/coq/coq/issues/8052 for tracking status towards\nfull support.\n\n## Technical description.\n\nDune works out of the box with Coq, once we have fixed some modularity\nissues. The main remaining challenge was to support `.vo` files.\n\nAs Dune doesn't support custom build rules yet, to properly build\n`.vo` files we provide a small helper script `tools/coq_dune.ml`. The\nscript will scan the Coq library directories and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript uses `coqdep` as to correctly output the dependencies of\n`.v` files. `coq_dune` is akin to `coq_makefile` and should be able to\nbe used to build Coq projects in the future.\n\nDue to this pitfall, the build process has to proceed in three stages:\n1) build `coqdep` and `coq_dune`; 2) generate `dune` files for\n`theories` and `plugins`; 3) perform a regular build with all\ntargets are in scope.\n\n## FAQ\n\n### Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas `opam`, `ocamlfind` or `odoc`. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there has been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative, OCaml-specific build tool that is on\nthe path to become the standard build system for the OCaml ecosystem.\n\nDune seems to be a good fit for Coq well: it is well-supported, fast,\ncompositional, and designed for large projects.\n\n### Does Dune replace the make-based build system?\n\nThe current, make-based build system is unmodified by this PR and kept\nas the default option. However, Dune has the potential\n\n### Is this PR complete? What does it provide?\n\nThis PR is ready for developer preview and feedback. The build system\nis functional, however, more work is necessary in order to make Dune\nthe default for Coq.\n\nThe main TODOs are tracked at https://github.com/coq/coq/issues/8052\n\nThis PR allows developers to use most of the features of Dune today:\n\n- Modular organization of the codebase; each component is built only\n  against declared dependencies so components are checked for\n  containment more strictly.\n- Hygienic builds; Dune places all artifacts under `_build`.\n- Automatic generation of `.install` files, simplified OPAM workflow.\n- `utop` support, `-opaque` in developer mode, etc...\n- `ml4` files are handled using `coqp5`, a native-code customized\n  camlp5 executable which brings much faster `ml4 -> ml` processing.\n\n### What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n### Some Benchs:\n\n```\n$ /usr/bin/time make DUNEOPT=\"-j 1000\" -f Makefile.dune states\n59.50user 18.81system 0:29.83elapsed 262%CPU (0avgtext+0avgdata 302996maxresident)k\n0inputs+646632outputs (0major+4893811minor)pagefaults 0swaps\n\n$ /usr/bin/time sh -c \"./configure -local -native-compiler no && make -j states\"\n88.21user 23.65system 0:32.96elapsed 339%CPU (0avgtext+0avgdata 304992maxresident)k\n0inputs+1051680outputs (0major+5300680minor)pagefaults 0swaps\n```\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-09-04T14:58:04.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/200f80ef5f73f92e031e760279e18ad18d4348bf"},"pipeline":{"id":29367552,"iid":2929,"project_id":6138686,"sha":"200f80ef5f73f92e031e760279e18ad18d4348bf","ref":"pr-6857","status":"canceled","source":"push","created_at":"2018-09-04T12:58:46.873Z","updated_at":"2018-09-04T13:06:50.102Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/29367552"},"web_url":"https://gitlab.com/coq/coq/-/jobs/94511673","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":94511672,"status":"canceled","stage":"test","name":"ci-quickchick","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-04T12:58:48.089Z","started_at":null,"finished_at":"2018-09-04T13:06:49.956Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"200f80ef5f73f92e031e760279e18ad18d4348bf","short_id":"200f80ef","created_at":"2018-09-04T14:58:04.000+02:00","parent_ids":["2a458c05b491ebb422e48e551b5ed41eb3ef986e"],"title":"[build] Preliminary support for building Coq with `dune`.","message":"[build] Preliminary support for building Coq with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides automatic generation of\n`version.ml`, `.merlin`, `META`, `opam`, API documentation; install\nmanagement; easy integration with external libraries, test runners,\nand modular builds.\n\nIn particular, Dune uniformly handles components regardless whether\nthey live in, or out-of-tree. This greatly simplifies cases where a\nplugin [or CoqIde] is checked out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can thus be used as a\nmore flexible `coq_makefile` replacement.\n\nFor now we provide experimental support for a Dune build. In order to\nbuild Coq + the standard library with Dune type:\n\n```\n$ make -f Makefile.dune world\n```\n\nThis PR includes a preliminary, developer-only preview of Dune for\nCoq. There is still ongoing work, see\nhttps://github.com/coq/coq/issues/8052 for tracking status towards\nfull support.\n\n## Technical description.\n\nDune works out of the box with Coq, once we have fixed some modularity\nissues. The main remaining challenge was to support `.vo` files.\n\nAs Dune doesn't support custom build rules yet, to properly build\n`.vo` files we provide a small helper script `tools/coq_dune.ml`. The\nscript will scan the Coq library directories and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript uses `coqdep` as to correctly output the dependencies of\n`.v` files. `coq_dune` is akin to `coq_makefile` and should be able to\nbe used to build Coq projects in the future.\n\nDue to this pitfall, the build process has to proceed in three stages:\n1) build `coqdep` and `coq_dune`; 2) generate `dune` files for\n`theories` and `plugins`; 3) perform a regular build with all\ntargets are in scope.\n\n## FAQ\n\n### Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas `opam`, `ocamlfind` or `odoc`. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there has been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative, OCaml-specific build tool that is on\nthe path to become the standard build system for the OCaml ecosystem.\n\nDune seems to be a good fit for Coq well: it is well-supported, fast,\ncompositional, and designed for large projects.\n\n### Does Dune replace the make-based build system?\n\nThe current, make-based build system is unmodified by this PR and kept\nas the default option. However, Dune has the potential\n\n### Is this PR complete? What does it provide?\n\nThis PR is ready for developer preview and feedback. The build system\nis functional, however, more work is necessary in order to make Dune\nthe default for Coq.\n\nThe main TODOs are tracked at https://github.com/coq/coq/issues/8052\n\nThis PR allows developers to use most of the features of Dune today:\n\n- Modular organization of the codebase; each component is built only\n  against declared dependencies so components are checked for\n  containment more strictly.\n- Hygienic builds; Dune places all artifacts under `_build`.\n- Automatic generation of `.install` files, simplified OPAM workflow.\n- `utop` support, `-opaque` in developer mode, etc...\n- `ml4` files are handled using `coqp5`, a native-code customized\n  camlp5 executable which brings much faster `ml4 -> ml` processing.\n\n### What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n### Some Benchs:\n\n```\n$ /usr/bin/time make DUNEOPT=\"-j 1000\" -f Makefile.dune states\n59.50user 18.81system 0:29.83elapsed 262%CPU (0avgtext+0avgdata 302996maxresident)k\n0inputs+646632outputs (0major+4893811minor)pagefaults 0swaps\n\n$ /usr/bin/time sh -c \"./configure -local -native-compiler no && make -j states\"\n88.21user 23.65system 0:32.96elapsed 339%CPU (0avgtext+0avgdata 304992maxresident)k\n0inputs+1051680outputs (0major+5300680minor)pagefaults 0swaps\n```\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-09-04T14:58:04.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/200f80ef5f73f92e031e760279e18ad18d4348bf"},"pipeline":{"id":29367552,"iid":2929,"project_id":6138686,"sha":"200f80ef5f73f92e031e760279e18ad18d4348bf","ref":"pr-6857","status":"canceled","source":"push","created_at":"2018-09-04T12:58:46.873Z","updated_at":"2018-09-04T13:06:50.102Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/29367552"},"web_url":"https://gitlab.com/coq/coq/-/jobs/94511672","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":94511671,"status":"canceled","stage":"test","name":"ci-pidetop","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-04T12:58:48.023Z","started_at":null,"finished_at":"2018-09-04T13:06:49.939Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"200f80ef5f73f92e031e760279e18ad18d4348bf","short_id":"200f80ef","created_at":"2018-09-04T14:58:04.000+02:00","parent_ids":["2a458c05b491ebb422e48e551b5ed41eb3ef986e"],"title":"[build] Preliminary support for building Coq with `dune`.","message":"[build] Preliminary support for building Coq with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides automatic generation of\n`version.ml`, `.merlin`, `META`, `opam`, API documentation; install\nmanagement; easy integration with external libraries, test runners,\nand modular builds.\n\nIn particular, Dune uniformly handles components regardless whether\nthey live in, or out-of-tree. This greatly simplifies cases where a\nplugin [or CoqIde] is checked out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can thus be used as a\nmore flexible `coq_makefile` replacement.\n\nFor now we provide experimental support for a Dune build. In order to\nbuild Coq + the standard library with Dune type:\n\n```\n$ make -f Makefile.dune world\n```\n\nThis PR includes a preliminary, developer-only preview of Dune for\nCoq. There is still ongoing work, see\nhttps://github.com/coq/coq/issues/8052 for tracking status towards\nfull support.\n\n## Technical description.\n\nDune works out of the box with Coq, once we have fixed some modularity\nissues. The main remaining challenge was to support `.vo` files.\n\nAs Dune doesn't support custom build rules yet, to properly build\n`.vo` files we provide a small helper script `tools/coq_dune.ml`. The\nscript will scan the Coq library directories and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript uses `coqdep` as to correctly output the dependencies of\n`.v` files. `coq_dune` is akin to `coq_makefile` and should be able to\nbe used to build Coq projects in the future.\n\nDue to this pitfall, the build process has to proceed in three stages:\n1) build `coqdep` and `coq_dune`; 2) generate `dune` files for\n`theories` and `plugins`; 3) perform a regular build with all\ntargets are in scope.\n\n## FAQ\n\n### Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas `opam`, `ocamlfind` or `odoc`. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there has been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative, OCaml-specific build tool that is on\nthe path to become the standard build system for the OCaml ecosystem.\n\nDune seems to be a good fit for Coq well: it is well-supported, fast,\ncompositional, and designed for large projects.\n\n### Does Dune replace the make-based build system?\n\nThe current, make-based build system is unmodified by this PR and kept\nas the default option. However, Dune has the potential\n\n### Is this PR complete? What does it provide?\n\nThis PR is ready for developer preview and feedback. The build system\nis functional, however, more work is necessary in order to make Dune\nthe default for Coq.\n\nThe main TODOs are tracked at https://github.com/coq/coq/issues/8052\n\nThis PR allows developers to use most of the features of Dune today:\n\n- Modular organization of the codebase; each component is built only\n  against declared dependencies so components are checked for\n  containment more strictly.\n- Hygienic builds; Dune places all artifacts under `_build`.\n- Automatic generation of `.install` files, simplified OPAM workflow.\n- `utop` support, `-opaque` in developer mode, etc...\n- `ml4` files are handled using `coqp5`, a native-code customized\n  camlp5 executable which brings much faster `ml4 -> ml` processing.\n\n### What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n### Some Benchs:\n\n```\n$ /usr/bin/time make DUNEOPT=\"-j 1000\" -f Makefile.dune states\n59.50user 18.81system 0:29.83elapsed 262%CPU (0avgtext+0avgdata 302996maxresident)k\n0inputs+646632outputs (0major+4893811minor)pagefaults 0swaps\n\n$ /usr/bin/time sh -c \"./configure -local -native-compiler no && make -j states\"\n88.21user 23.65system 0:32.96elapsed 339%CPU (0avgtext+0avgdata 304992maxresident)k\n0inputs+1051680outputs (0major+5300680minor)pagefaults 0swaps\n```\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-09-04T14:58:04.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/200f80ef5f73f92e031e760279e18ad18d4348bf"},"pipeline":{"id":29367552,"iid":2929,"project_id":6138686,"sha":"200f80ef5f73f92e031e760279e18ad18d4348bf","ref":"pr-6857","status":"canceled","source":"push","created_at":"2018-09-04T12:58:46.873Z","updated_at":"2018-09-04T13:06:50.102Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/29367552"},"web_url":"https://gitlab.com/coq/coq/-/jobs/94511671","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":94511670,"status":"canceled","stage":"test","name":"ci-mtac2","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-04T12:58:47.996Z","started_at":null,"finished_at":"2018-09-04T13:06:49.921Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"200f80ef5f73f92e031e760279e18ad18d4348bf","short_id":"200f80ef","created_at":"2018-09-04T14:58:04.000+02:00","parent_ids":["2a458c05b491ebb422e48e551b5ed41eb3ef986e"],"title":"[build] Preliminary support for building Coq with `dune`.","message":"[build] Preliminary support for building Coq with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides automatic generation of\n`version.ml`, `.merlin`, `META`, `opam`, API documentation; install\nmanagement; easy integration with external libraries, test runners,\nand modular builds.\n\nIn particular, Dune uniformly handles components regardless whether\nthey live in, or out-of-tree. This greatly simplifies cases where a\nplugin [or CoqIde] is checked out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can thus be used as a\nmore flexible `coq_makefile` replacement.\n\nFor now we provide experimental support for a Dune build. In order to\nbuild Coq + the standard library with Dune type:\n\n```\n$ make -f Makefile.dune world\n```\n\nThis PR includes a preliminary, developer-only preview of Dune for\nCoq. There is still ongoing work, see\nhttps://github.com/coq/coq/issues/8052 for tracking status towards\nfull support.\n\n## Technical description.\n\nDune works out of the box with Coq, once we have fixed some modularity\nissues. The main remaining challenge was to support `.vo` files.\n\nAs Dune doesn't support custom build rules yet, to properly build\n`.vo` files we provide a small helper script `tools/coq_dune.ml`. The\nscript will scan the Coq library directories and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript uses `coqdep` as to correctly output the dependencies of\n`.v` files. `coq_dune` is akin to `coq_makefile` and should be able to\nbe used to build Coq projects in the future.\n\nDue to this pitfall, the build process has to proceed in three stages:\n1) build `coqdep` and `coq_dune`; 2) generate `dune` files for\n`theories` and `plugins`; 3) perform a regular build with all\ntargets are in scope.\n\n## FAQ\n\n### Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas `opam`, `ocamlfind` or `odoc`. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there has been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative, OCaml-specific build tool that is on\nthe path to become the standard build system for the OCaml ecosystem.\n\nDune seems to be a good fit for Coq well: it is well-supported, fast,\ncompositional, and designed for large projects.\n\n### Does Dune replace the make-based build system?\n\nThe current, make-based build system is unmodified by this PR and kept\nas the default option. However, Dune has the potential\n\n### Is this PR complete? What does it provide?\n\nThis PR is ready for developer preview and feedback. The build system\nis functional, however, more work is necessary in order to make Dune\nthe default for Coq.\n\nThe main TODOs are tracked at https://github.com/coq/coq/issues/8052\n\nThis PR allows developers to use most of the features of Dune today:\n\n- Modular organization of the codebase; each component is built only\n  against declared dependencies so components are checked for\n  containment more strictly.\n- Hygienic builds; Dune places all artifacts under `_build`.\n- Automatic generation of `.install` files, simplified OPAM workflow.\n- `utop` support, `-opaque` in developer mode, etc...\n- `ml4` files are handled using `coqp5`, a native-code customized\n  camlp5 executable which brings much faster `ml4 -> ml` processing.\n\n### What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n### Some Benchs:\n\n```\n$ /usr/bin/time make DUNEOPT=\"-j 1000\" -f Makefile.dune states\n59.50user 18.81system 0:29.83elapsed 262%CPU (0avgtext+0avgdata 302996maxresident)k\n0inputs+646632outputs (0major+4893811minor)pagefaults 0swaps\n\n$ /usr/bin/time sh -c \"./configure -local -native-compiler no && make -j states\"\n88.21user 23.65system 0:32.96elapsed 339%CPU (0avgtext+0avgdata 304992maxresident)k\n0inputs+1051680outputs (0major+5300680minor)pagefaults 0swaps\n```\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-09-04T14:58:04.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/200f80ef5f73f92e031e760279e18ad18d4348bf"},"pipeline":{"id":29367552,"iid":2929,"project_id":6138686,"sha":"200f80ef5f73f92e031e760279e18ad18d4348bf","ref":"pr-6857","status":"canceled","source":"push","created_at":"2018-09-04T12:58:46.873Z","updated_at":"2018-09-04T13:06:50.102Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/29367552"},"web_url":"https://gitlab.com/coq/coq/-/jobs/94511670","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":94511669,"status":"canceled","stage":"test","name":"ci-math-comp","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-04T12:58:47.967Z","started_at":null,"finished_at":"2018-09-04T13:06:49.904Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"200f80ef5f73f92e031e760279e18ad18d4348bf","short_id":"200f80ef","created_at":"2018-09-04T14:58:04.000+02:00","parent_ids":["2a458c05b491ebb422e48e551b5ed41eb3ef986e"],"title":"[build] Preliminary support for building Coq with `dune`.","message":"[build] Preliminary support for building Coq with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides automatic generation of\n`version.ml`, `.merlin`, `META`, `opam`, API documentation; install\nmanagement; easy integration with external libraries, test runners,\nand modular builds.\n\nIn particular, Dune uniformly handles components regardless whether\nthey live in, or out-of-tree. This greatly simplifies cases where a\nplugin [or CoqIde] is checked out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can thus be used as a\nmore flexible `coq_makefile` replacement.\n\nFor now we provide experimental support for a Dune build. In order to\nbuild Coq + the standard library with Dune type:\n\n```\n$ make -f Makefile.dune world\n```\n\nThis PR includes a preliminary, developer-only preview of Dune for\nCoq. There is still ongoing work, see\nhttps://github.com/coq/coq/issues/8052 for tracking status towards\nfull support.\n\n## Technical description.\n\nDune works out of the box with Coq, once we have fixed some modularity\nissues. The main remaining challenge was to support `.vo` files.\n\nAs Dune doesn't support custom build rules yet, to properly build\n`.vo` files we provide a small helper script `tools/coq_dune.ml`. The\nscript will scan the Coq library directories and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript uses `coqdep` as to correctly output the dependencies of\n`.v` files. `coq_dune` is akin to `coq_makefile` and should be able to\nbe used to build Coq projects in the future.\n\nDue to this pitfall, the build process has to proceed in three stages:\n1) build `coqdep` and `coq_dune`; 2) generate `dune` files for\n`theories` and `plugins`; 3) perform a regular build with all\ntargets are in scope.\n\n## FAQ\n\n### Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas `opam`, `ocamlfind` or `odoc`. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there has been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative, OCaml-specific build tool that is on\nthe path to become the standard build system for the OCaml ecosystem.\n\nDune seems to be a good fit for Coq well: it is well-supported, fast,\ncompositional, and designed for large projects.\n\n### Does Dune replace the make-based build system?\n\nThe current, make-based build system is unmodified by this PR and kept\nas the default option. However, Dune has the potential\n\n### Is this PR complete? What does it provide?\n\nThis PR is ready for developer preview and feedback. The build system\nis functional, however, more work is necessary in order to make Dune\nthe default for Coq.\n\nThe main TODOs are tracked at https://github.com/coq/coq/issues/8052\n\nThis PR allows developers to use most of the features of Dune today:\n\n- Modular organization of the codebase; each component is built only\n  against declared dependencies so components are checked for\n  containment more strictly.\n- Hygienic builds; Dune places all artifacts under `_build`.\n- Automatic generation of `.install` files, simplified OPAM workflow.\n- `utop` support, `-opaque` in developer mode, etc...\n- `ml4` files are handled using `coqp5`, a native-code customized\n  camlp5 executable which brings much faster `ml4 -> ml` processing.\n\n### What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n### Some Benchs:\n\n```\n$ /usr/bin/time make DUNEOPT=\"-j 1000\" -f Makefile.dune states\n59.50user 18.81system 0:29.83elapsed 262%CPU (0avgtext+0avgdata 302996maxresident)k\n0inputs+646632outputs (0major+4893811minor)pagefaults 0swaps\n\n$ /usr/bin/time sh -c \"./configure -local -native-compiler no && make -j states\"\n88.21user 23.65system 0:32.96elapsed 339%CPU (0avgtext+0avgdata 304992maxresident)k\n0inputs+1051680outputs (0major+5300680minor)pagefaults 0swaps\n```\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-09-04T14:58:04.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/200f80ef5f73f92e031e760279e18ad18d4348bf"},"pipeline":{"id":29367552,"iid":2929,"project_id":6138686,"sha":"200f80ef5f73f92e031e760279e18ad18d4348bf","ref":"pr-6857","status":"canceled","source":"push","created_at":"2018-09-04T12:58:46.873Z","updated_at":"2018-09-04T13:06:50.102Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/29367552"},"web_url":"https://gitlab.com/coq/coq/-/jobs/94511669","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":94511668,"status":"canceled","stage":"test","name":"ci-ltac2","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-04T12:58:47.944Z","started_at":null,"finished_at":"2018-09-04T13:06:49.886Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"200f80ef5f73f92e031e760279e18ad18d4348bf","short_id":"200f80ef","created_at":"2018-09-04T14:58:04.000+02:00","parent_ids":["2a458c05b491ebb422e48e551b5ed41eb3ef986e"],"title":"[build] Preliminary support for building Coq with `dune`.","message":"[build] Preliminary support for building Coq with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides automatic generation of\n`version.ml`, `.merlin`, `META`, `opam`, API documentation; install\nmanagement; easy integration with external libraries, test runners,\nand modular builds.\n\nIn particular, Dune uniformly handles components regardless whether\nthey live in, or out-of-tree. This greatly simplifies cases where a\nplugin [or CoqIde] is checked out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can thus be used as a\nmore flexible `coq_makefile` replacement.\n\nFor now we provide experimental support for a Dune build. In order to\nbuild Coq + the standard library with Dune type:\n\n```\n$ make -f Makefile.dune world\n```\n\nThis PR includes a preliminary, developer-only preview of Dune for\nCoq. There is still ongoing work, see\nhttps://github.com/coq/coq/issues/8052 for tracking status towards\nfull support.\n\n## Technical description.\n\nDune works out of the box with Coq, once we have fixed some modularity\nissues. The main remaining challenge was to support `.vo` files.\n\nAs Dune doesn't support custom build rules yet, to properly build\n`.vo` files we provide a small helper script `tools/coq_dune.ml`. The\nscript will scan the Coq library directories and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript uses `coqdep` as to correctly output the dependencies of\n`.v` files. `coq_dune` is akin to `coq_makefile` and should be able to\nbe used to build Coq projects in the future.\n\nDue to this pitfall, the build process has to proceed in three stages:\n1) build `coqdep` and `coq_dune`; 2) generate `dune` files for\n`theories` and `plugins`; 3) perform a regular build with all\ntargets are in scope.\n\n## FAQ\n\n### Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas `opam`, `ocamlfind` or `odoc`. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there has been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative, OCaml-specific build tool that is on\nthe path to become the standard build system for the OCaml ecosystem.\n\nDune seems to be a good fit for Coq well: it is well-supported, fast,\ncompositional, and designed for large projects.\n\n### Does Dune replace the make-based build system?\n\nThe current, make-based build system is unmodified by this PR and kept\nas the default option. However, Dune has the potential\n\n### Is this PR complete? What does it provide?\n\nThis PR is ready for developer preview and feedback. The build system\nis functional, however, more work is necessary in order to make Dune\nthe default for Coq.\n\nThe main TODOs are tracked at https://github.com/coq/coq/issues/8052\n\nThis PR allows developers to use most of the features of Dune today:\n\n- Modular organization of the codebase; each component is built only\n  against declared dependencies so components are checked for\n  containment more strictly.\n- Hygienic builds; Dune places all artifacts under `_build`.\n- Automatic generation of `.install` files, simplified OPAM workflow.\n- `utop` support, `-opaque` in developer mode, etc...\n- `ml4` files are handled using `coqp5`, a native-code customized\n  camlp5 executable which brings much faster `ml4 -> ml` processing.\n\n### What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n### Some Benchs:\n\n```\n$ /usr/bin/time make DUNEOPT=\"-j 1000\" -f Makefile.dune states\n59.50user 18.81system 0:29.83elapsed 262%CPU (0avgtext+0avgdata 302996maxresident)k\n0inputs+646632outputs (0major+4893811minor)pagefaults 0swaps\n\n$ /usr/bin/time sh -c \"./configure -local -native-compiler no && make -j states\"\n88.21user 23.65system 0:32.96elapsed 339%CPU (0avgtext+0avgdata 304992maxresident)k\n0inputs+1051680outputs (0major+5300680minor)pagefaults 0swaps\n```\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-09-04T14:58:04.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/200f80ef5f73f92e031e760279e18ad18d4348bf"},"pipeline":{"id":29367552,"iid":2929,"project_id":6138686,"sha":"200f80ef5f73f92e031e760279e18ad18d4348bf","ref":"pr-6857","status":"canceled","source":"push","created_at":"2018-09-04T12:58:46.873Z","updated_at":"2018-09-04T13:06:50.102Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/29367552"},"web_url":"https://gitlab.com/coq/coq/-/jobs/94511668","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":94511667,"status":"canceled","stage":"test","name":"ci-iris-lambda-rust","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-04T12:58:47.920Z","started_at":null,"finished_at":"2018-09-04T13:06:49.868Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"200f80ef5f73f92e031e760279e18ad18d4348bf","short_id":"200f80ef","created_at":"2018-09-04T14:58:04.000+02:00","parent_ids":["2a458c05b491ebb422e48e551b5ed41eb3ef986e"],"title":"[build] Preliminary support for building Coq with `dune`.","message":"[build] Preliminary support for building Coq with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides automatic generation of\n`version.ml`, `.merlin`, `META`, `opam`, API documentation; install\nmanagement; easy integration with external libraries, test runners,\nand modular builds.\n\nIn particular, Dune uniformly handles components regardless whether\nthey live in, or out-of-tree. This greatly simplifies cases where a\nplugin [or CoqIde] is checked out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can thus be used as a\nmore flexible `coq_makefile` replacement.\n\nFor now we provide experimental support for a Dune build. In order to\nbuild Coq + the standard library with Dune type:\n\n```\n$ make -f Makefile.dune world\n```\n\nThis PR includes a preliminary, developer-only preview of Dune for\nCoq. There is still ongoing work, see\nhttps://github.com/coq/coq/issues/8052 for tracking status towards\nfull support.\n\n## Technical description.\n\nDune works out of the box with Coq, once we have fixed some modularity\nissues. The main remaining challenge was to support `.vo` files.\n\nAs Dune doesn't support custom build rules yet, to properly build\n`.vo` files we provide a small helper script `tools/coq_dune.ml`. The\nscript will scan the Coq library directories and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript uses `coqdep` as to correctly output the dependencies of\n`.v` files. `coq_dune` is akin to `coq_makefile` and should be able to\nbe used to build Coq projects in the future.\n\nDue to this pitfall, the build process has to proceed in three stages:\n1) build `coqdep` and `coq_dune`; 2) generate `dune` files for\n`theories` and `plugins`; 3) perform a regular build with all\ntargets are in scope.\n\n## FAQ\n\n### Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas `opam`, `ocamlfind` or `odoc`. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there has been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative, OCaml-specific build tool that is on\nthe path to become the standard build system for the OCaml ecosystem.\n\nDune seems to be a good fit for Coq well: it is well-supported, fast,\ncompositional, and designed for large projects.\n\n### Does Dune replace the make-based build system?\n\nThe current, make-based build system is unmodified by this PR and kept\nas the default option. However, Dune has the potential\n\n### Is this PR complete? What does it provide?\n\nThis PR is ready for developer preview and feedback. The build system\nis functional, however, more work is necessary in order to make Dune\nthe default for Coq.\n\nThe main TODOs are tracked at https://github.com/coq/coq/issues/8052\n\nThis PR allows developers to use most of the features of Dune today:\n\n- Modular organization of the codebase; each component is built only\n  against declared dependencies so components are checked for\n  containment more strictly.\n- Hygienic builds; Dune places all artifacts under `_build`.\n- Automatic generation of `.install` files, simplified OPAM workflow.\n- `utop` support, `-opaque` in developer mode, etc...\n- `ml4` files are handled using `coqp5`, a native-code customized\n  camlp5 executable which brings much faster `ml4 -> ml` processing.\n\n### What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n### Some Benchs:\n\n```\n$ /usr/bin/time make DUNEOPT=\"-j 1000\" -f Makefile.dune states\n59.50user 18.81system 0:29.83elapsed 262%CPU (0avgtext+0avgdata 302996maxresident)k\n0inputs+646632outputs (0major+4893811minor)pagefaults 0swaps\n\n$ /usr/bin/time sh -c \"./configure -local -native-compiler no && make -j states\"\n88.21user 23.65system 0:32.96elapsed 339%CPU (0avgtext+0avgdata 304992maxresident)k\n0inputs+1051680outputs (0major+5300680minor)pagefaults 0swaps\n```\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-09-04T14:58:04.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/200f80ef5f73f92e031e760279e18ad18d4348bf"},"pipeline":{"id":29367552,"iid":2929,"project_id":6138686,"sha":"200f80ef5f73f92e031e760279e18ad18d4348bf","ref":"pr-6857","status":"canceled","source":"push","created_at":"2018-09-04T12:58:46.873Z","updated_at":"2018-09-04T13:06:50.102Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/29367552"},"web_url":"https://gitlab.com/coq/coq/-/jobs/94511667","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":94511666,"status":"canceled","stage":"test","name":"ci-hott","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-04T12:58:47.893Z","started_at":null,"finished_at":"2018-09-04T13:06:49.851Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"200f80ef5f73f92e031e760279e18ad18d4348bf","short_id":"200f80ef","created_at":"2018-09-04T14:58:04.000+02:00","parent_ids":["2a458c05b491ebb422e48e551b5ed41eb3ef986e"],"title":"[build] Preliminary support for building Coq with `dune`.","message":"[build] Preliminary support for building Coq with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides automatic generation of\n`version.ml`, `.merlin`, `META`, `opam`, API documentation; install\nmanagement; easy integration with external libraries, test runners,\nand modular builds.\n\nIn particular, Dune uniformly handles components regardless whether\nthey live in, or out-of-tree. This greatly simplifies cases where a\nplugin [or CoqIde] is checked out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can thus be used as a\nmore flexible `coq_makefile` replacement.\n\nFor now we provide experimental support for a Dune build. In order to\nbuild Coq + the standard library with Dune type:\n\n```\n$ make -f Makefile.dune world\n```\n\nThis PR includes a preliminary, developer-only preview of Dune for\nCoq. There is still ongoing work, see\nhttps://github.com/coq/coq/issues/8052 for tracking status towards\nfull support.\n\n## Technical description.\n\nDune works out of the box with Coq, once we have fixed some modularity\nissues. The main remaining challenge was to support `.vo` files.\n\nAs Dune doesn't support custom build rules yet, to properly build\n`.vo` files we provide a small helper script `tools/coq_dune.ml`. The\nscript will scan the Coq library directories and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript uses `coqdep` as to correctly output the dependencies of\n`.v` files. `coq_dune` is akin to `coq_makefile` and should be able to\nbe used to build Coq projects in the future.\n\nDue to this pitfall, the build process has to proceed in three stages:\n1) build `coqdep` and `coq_dune`; 2) generate `dune` files for\n`theories` and `plugins`; 3) perform a regular build with all\ntargets are in scope.\n\n## FAQ\n\n### Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas `opam`, `ocamlfind` or `odoc`. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there has been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative, OCaml-specific build tool that is on\nthe path to become the standard build system for the OCaml ecosystem.\n\nDune seems to be a good fit for Coq well: it is well-supported, fast,\ncompositional, and designed for large projects.\n\n### Does Dune replace the make-based build system?\n\nThe current, make-based build system is unmodified by this PR and kept\nas the default option. However, Dune has the potential\n\n### Is this PR complete? What does it provide?\n\nThis PR is ready for developer preview and feedback. The build system\nis functional, however, more work is necessary in order to make Dune\nthe default for Coq.\n\nThe main TODOs are tracked at https://github.com/coq/coq/issues/8052\n\nThis PR allows developers to use most of the features of Dune today:\n\n- Modular organization of the codebase; each component is built only\n  against declared dependencies so components are checked for\n  containment more strictly.\n- Hygienic builds; Dune places all artifacts under `_build`.\n- Automatic generation of `.install` files, simplified OPAM workflow.\n- `utop` support, `-opaque` in developer mode, etc...\n- `ml4` files are handled using `coqp5`, a native-code customized\n  camlp5 executable which brings much faster `ml4 -> ml` processing.\n\n### What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n### Some Benchs:\n\n```\n$ /usr/bin/time make DUNEOPT=\"-j 1000\" -f Makefile.dune states\n59.50user 18.81system 0:29.83elapsed 262%CPU (0avgtext+0avgdata 302996maxresident)k\n0inputs+646632outputs (0major+4893811minor)pagefaults 0swaps\n\n$ /usr/bin/time sh -c \"./configure -local -native-compiler no && make -j states\"\n88.21user 23.65system 0:32.96elapsed 339%CPU (0avgtext+0avgdata 304992maxresident)k\n0inputs+1051680outputs (0major+5300680minor)pagefaults 0swaps\n```\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-09-04T14:58:04.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/200f80ef5f73f92e031e760279e18ad18d4348bf"},"pipeline":{"id":29367552,"iid":2929,"project_id":6138686,"sha":"200f80ef5f73f92e031e760279e18ad18d4348bf","ref":"pr-6857","status":"canceled","source":"push","created_at":"2018-09-04T12:58:46.873Z","updated_at":"2018-09-04T13:06:50.102Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/29367552"},"web_url":"https://gitlab.com/coq/coq/-/jobs/94511666","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":94511665,"status":"canceled","stage":"test","name":"ci-geocoq","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-04T12:58:47.847Z","started_at":null,"finished_at":"2018-09-04T13:06:49.828Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"200f80ef5f73f92e031e760279e18ad18d4348bf","short_id":"200f80ef","created_at":"2018-09-04T14:58:04.000+02:00","parent_ids":["2a458c05b491ebb422e48e551b5ed41eb3ef986e"],"title":"[build] Preliminary support for building Coq with `dune`.","message":"[build] Preliminary support for building Coq with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides automatic generation of\n`version.ml`, `.merlin`, `META`, `opam`, API documentation; install\nmanagement; easy integration with external libraries, test runners,\nand modular builds.\n\nIn particular, Dune uniformly handles components regardless whether\nthey live in, or out-of-tree. This greatly simplifies cases where a\nplugin [or CoqIde] is checked out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can thus be used as a\nmore flexible `coq_makefile` replacement.\n\nFor now we provide experimental support for a Dune build. In order to\nbuild Coq + the standard library with Dune type:\n\n```\n$ make -f Makefile.dune world\n```\n\nThis PR includes a preliminary, developer-only preview of Dune for\nCoq. There is still ongoing work, see\nhttps://github.com/coq/coq/issues/8052 for tracking status towards\nfull support.\n\n## Technical description.\n\nDune works out of the box with Coq, once we have fixed some modularity\nissues. The main remaining challenge was to support `.vo` files.\n\nAs Dune doesn't support custom build rules yet, to properly build\n`.vo` files we provide a small helper script `tools/coq_dune.ml`. The\nscript will scan the Coq library directories and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript uses `coqdep` as to correctly output the dependencies of\n`.v` files. `coq_dune` is akin to `coq_makefile` and should be able to\nbe used to build Coq projects in the future.\n\nDue to this pitfall, the build process has to proceed in three stages:\n1) build `coqdep` and `coq_dune`; 2) generate `dune` files for\n`theories` and `plugins`; 3) perform a regular build with all\ntargets are in scope.\n\n## FAQ\n\n### Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas `opam`, `ocamlfind` or `odoc`. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there has been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative, OCaml-specific build tool that is on\nthe path to become the standard build system for the OCaml ecosystem.\n\nDune seems to be a good fit for Coq well: it is well-supported, fast,\ncompositional, and designed for large projects.\n\n### Does Dune replace the make-based build system?\n\nThe current, make-based build system is unmodified by this PR and kept\nas the default option. However, Dune has the potential\n\n### Is this PR complete? What does it provide?\n\nThis PR is ready for developer preview and feedback. The build system\nis functional, however, more work is necessary in order to make Dune\nthe default for Coq.\n\nThe main TODOs are tracked at https://github.com/coq/coq/issues/8052\n\nThis PR allows developers to use most of the features of Dune today:\n\n- Modular organization of the codebase; each component is built only\n  against declared dependencies so components are checked for\n  containment more strictly.\n- Hygienic builds; Dune places all artifacts under `_build`.\n- Automatic generation of `.install` files, simplified OPAM workflow.\n- `utop` support, `-opaque` in developer mode, etc...\n- `ml4` files are handled using `coqp5`, a native-code customized\n  camlp5 executable which brings much faster `ml4 -> ml` processing.\n\n### What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n### Some Benchs:\n\n```\n$ /usr/bin/time make DUNEOPT=\"-j 1000\" -f Makefile.dune states\n59.50user 18.81system 0:29.83elapsed 262%CPU (0avgtext+0avgdata 302996maxresident)k\n0inputs+646632outputs (0major+4893811minor)pagefaults 0swaps\n\n$ /usr/bin/time sh -c \"./configure -local -native-compiler no && make -j states\"\n88.21user 23.65system 0:32.96elapsed 339%CPU (0avgtext+0avgdata 304992maxresident)k\n0inputs+1051680outputs (0major+5300680minor)pagefaults 0swaps\n```\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-09-04T14:58:04.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/200f80ef5f73f92e031e760279e18ad18d4348bf"},"pipeline":{"id":29367552,"iid":2929,"project_id":6138686,"sha":"200f80ef5f73f92e031e760279e18ad18d4348bf","ref":"pr-6857","status":"canceled","source":"push","created_at":"2018-09-04T12:58:46.873Z","updated_at":"2018-09-04T13:06:50.102Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/29367552"},"web_url":"https://gitlab.com/coq/coq/-/jobs/94511665","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":94511664,"status":"canceled","stage":"test","name":"ci-formal-topology","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-04T12:58:47.813Z","started_at":null,"finished_at":"2018-09-04T13:06:49.810Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"200f80ef5f73f92e031e760279e18ad18d4348bf","short_id":"200f80ef","created_at":"2018-09-04T14:58:04.000+02:00","parent_ids":["2a458c05b491ebb422e48e551b5ed41eb3ef986e"],"title":"[build] Preliminary support for building Coq with `dune`.","message":"[build] Preliminary support for building Coq with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides automatic generation of\n`version.ml`, `.merlin`, `META`, `opam`, API documentation; install\nmanagement; easy integration with external libraries, test runners,\nand modular builds.\n\nIn particular, Dune uniformly handles components regardless whether\nthey live in, or out-of-tree. This greatly simplifies cases where a\nplugin [or CoqIde] is checked out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can thus be used as a\nmore flexible `coq_makefile` replacement.\n\nFor now we provide experimental support for a Dune build. In order to\nbuild Coq + the standard library with Dune type:\n\n```\n$ make -f Makefile.dune world\n```\n\nThis PR includes a preliminary, developer-only preview of Dune for\nCoq. There is still ongoing work, see\nhttps://github.com/coq/coq/issues/8052 for tracking status towards\nfull support.\n\n## Technical description.\n\nDune works out of the box with Coq, once we have fixed some modularity\nissues. The main remaining challenge was to support `.vo` files.\n\nAs Dune doesn't support custom build rules yet, to properly build\n`.vo` files we provide a small helper script `tools/coq_dune.ml`. The\nscript will scan the Coq library directories and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript uses `coqdep` as to correctly output the dependencies of\n`.v` files. `coq_dune` is akin to `coq_makefile` and should be able to\nbe used to build Coq projects in the future.\n\nDue to this pitfall, the build process has to proceed in three stages:\n1) build `coqdep` and `coq_dune`; 2) generate `dune` files for\n`theories` and `plugins`; 3) perform a regular build with all\ntargets are in scope.\n\n## FAQ\n\n### Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas `opam`, `ocamlfind` or `odoc`. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there has been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative, OCaml-specific build tool that is on\nthe path to become the standard build system for the OCaml ecosystem.\n\nDune seems to be a good fit for Coq well: it is well-supported, fast,\ncompositional, and designed for large projects.\n\n### Does Dune replace the make-based build system?\n\nThe current, make-based build system is unmodified by this PR and kept\nas the default option. However, Dune has the potential\n\n### Is this PR complete? What does it provide?\n\nThis PR is ready for developer preview and feedback. The build system\nis functional, however, more work is necessary in order to make Dune\nthe default for Coq.\n\nThe main TODOs are tracked at https://github.com/coq/coq/issues/8052\n\nThis PR allows developers to use most of the features of Dune today:\n\n- Modular organization of the codebase; each component is built only\n  against declared dependencies so components are checked for\n  containment more strictly.\n- Hygienic builds; Dune places all artifacts under `_build`.\n- Automatic generation of `.install` files, simplified OPAM workflow.\n- `utop` support, `-opaque` in developer mode, etc...\n- `ml4` files are handled using `coqp5`, a native-code customized\n  camlp5 executable which brings much faster `ml4 -> ml` processing.\n\n### What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n### Some Benchs:\n\n```\n$ /usr/bin/time make DUNEOPT=\"-j 1000\" -f Makefile.dune states\n59.50user 18.81system 0:29.83elapsed 262%CPU (0avgtext+0avgdata 302996maxresident)k\n0inputs+646632outputs (0major+4893811minor)pagefaults 0swaps\n\n$ /usr/bin/time sh -c \"./configure -local -native-compiler no && make -j states\"\n88.21user 23.65system 0:32.96elapsed 339%CPU (0avgtext+0avgdata 304992maxresident)k\n0inputs+1051680outputs (0major+5300680minor)pagefaults 0swaps\n```\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-09-04T14:58:04.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/200f80ef5f73f92e031e760279e18ad18d4348bf"},"pipeline":{"id":29367552,"iid":2929,"project_id":6138686,"sha":"200f80ef5f73f92e031e760279e18ad18d4348bf","ref":"pr-6857","status":"canceled","source":"push","created_at":"2018-09-04T12:58:46.873Z","updated_at":"2018-09-04T13:06:50.102Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/29367552"},"web_url":"https://gitlab.com/coq/coq/-/jobs/94511664","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":94511663,"status":"canceled","stage":"test","name":"ci-flocq","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-04T12:58:47.790Z","started_at":null,"finished_at":"2018-09-04T13:06:49.791Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"200f80ef5f73f92e031e760279e18ad18d4348bf","short_id":"200f80ef","created_at":"2018-09-04T14:58:04.000+02:00","parent_ids":["2a458c05b491ebb422e48e551b5ed41eb3ef986e"],"title":"[build] Preliminary support for building Coq with `dune`.","message":"[build] Preliminary support for building Coq with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides automatic generation of\n`version.ml`, `.merlin`, `META`, `opam`, API documentation; install\nmanagement; easy integration with external libraries, test runners,\nand modular builds.\n\nIn particular, Dune uniformly handles components regardless whether\nthey live in, or out-of-tree. This greatly simplifies cases where a\nplugin [or CoqIde] is checked out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can thus be used as a\nmore flexible `coq_makefile` replacement.\n\nFor now we provide experimental support for a Dune build. In order to\nbuild Coq + the standard library with Dune type:\n\n```\n$ make -f Makefile.dune world\n```\n\nThis PR includes a preliminary, developer-only preview of Dune for\nCoq. There is still ongoing work, see\nhttps://github.com/coq/coq/issues/8052 for tracking status towards\nfull support.\n\n## Technical description.\n\nDune works out of the box with Coq, once we have fixed some modularity\nissues. The main remaining challenge was to support `.vo` files.\n\nAs Dune doesn't support custom build rules yet, to properly build\n`.vo` files we provide a small helper script `tools/coq_dune.ml`. The\nscript will scan the Coq library directories and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript uses `coqdep` as to correctly output the dependencies of\n`.v` files. `coq_dune` is akin to `coq_makefile` and should be able to\nbe used to build Coq projects in the future.\n\nDue to this pitfall, the build process has to proceed in three stages:\n1) build `coqdep` and `coq_dune`; 2) generate `dune` files for\n`theories` and `plugins`; 3) perform a regular build with all\ntargets are in scope.\n\n## FAQ\n\n### Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas `opam`, `ocamlfind` or `odoc`. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there has been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative, OCaml-specific build tool that is on\nthe path to become the standard build system for the OCaml ecosystem.\n\nDune seems to be a good fit for Coq well: it is well-supported, fast,\ncompositional, and designed for large projects.\n\n### Does Dune replace the make-based build system?\n\nThe current, make-based build system is unmodified by this PR and kept\nas the default option. However, Dune has the potential\n\n### Is this PR complete? What does it provide?\n\nThis PR is ready for developer preview and feedback. The build system\nis functional, however, more work is necessary in order to make Dune\nthe default for Coq.\n\nThe main TODOs are tracked at https://github.com/coq/coq/issues/8052\n\nThis PR allows developers to use most of the features of Dune today:\n\n- Modular organization of the codebase; each component is built only\n  against declared dependencies so components are checked for\n  containment more strictly.\n- Hygienic builds; Dune places all artifacts under `_build`.\n- Automatic generation of `.install` files, simplified OPAM workflow.\n- `utop` support, `-opaque` in developer mode, etc...\n- `ml4` files are handled using `coqp5`, a native-code customized\n  camlp5 executable which brings much faster `ml4 -> ml` processing.\n\n### What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n### Some Benchs:\n\n```\n$ /usr/bin/time make DUNEOPT=\"-j 1000\" -f Makefile.dune states\n59.50user 18.81system 0:29.83elapsed 262%CPU (0avgtext+0avgdata 302996maxresident)k\n0inputs+646632outputs (0major+4893811minor)pagefaults 0swaps\n\n$ /usr/bin/time sh -c \"./configure -local -native-compiler no && make -j states\"\n88.21user 23.65system 0:32.96elapsed 339%CPU (0avgtext+0avgdata 304992maxresident)k\n0inputs+1051680outputs (0major+5300680minor)pagefaults 0swaps\n```\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-09-04T14:58:04.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/200f80ef5f73f92e031e760279e18ad18d4348bf"},"pipeline":{"id":29367552,"iid":2929,"project_id":6138686,"sha":"200f80ef5f73f92e031e760279e18ad18d4348bf","ref":"pr-6857","status":"canceled","source":"push","created_at":"2018-09-04T12:58:46.873Z","updated_at":"2018-09-04T13:06:50.102Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/29367552"},"web_url":"https://gitlab.com/coq/coq/-/jobs/94511663","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":94511662,"status":"canceled","stage":"test","name":"ci-fiat-parsers","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-04T12:58:47.767Z","started_at":null,"finished_at":"2018-09-04T13:06:49.774Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"200f80ef5f73f92e031e760279e18ad18d4348bf","short_id":"200f80ef","created_at":"2018-09-04T14:58:04.000+02:00","parent_ids":["2a458c05b491ebb422e48e551b5ed41eb3ef986e"],"title":"[build] Preliminary support for building Coq with `dune`.","message":"[build] Preliminary support for building Coq with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides automatic generation of\n`version.ml`, `.merlin`, `META`, `opam`, API documentation; install\nmanagement; easy integration with external libraries, test runners,\nand modular builds.\n\nIn particular, Dune uniformly handles components regardless whether\nthey live in, or out-of-tree. This greatly simplifies cases where a\nplugin [or CoqIde] is checked out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can thus be used as a\nmore flexible `coq_makefile` replacement.\n\nFor now we provide experimental support for a Dune build. In order to\nbuild Coq + the standard library with Dune type:\n\n```\n$ make -f Makefile.dune world\n```\n\nThis PR includes a preliminary, developer-only preview of Dune for\nCoq. There is still ongoing work, see\nhttps://github.com/coq/coq/issues/8052 for tracking status towards\nfull support.\n\n## Technical description.\n\nDune works out of the box with Coq, once we have fixed some modularity\nissues. The main remaining challenge was to support `.vo` files.\n\nAs Dune doesn't support custom build rules yet, to properly build\n`.vo` files we provide a small helper script `tools/coq_dune.ml`. The\nscript will scan the Coq library directories and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript uses `coqdep` as to correctly output the dependencies of\n`.v` files. `coq_dune` is akin to `coq_makefile` and should be able to\nbe used to build Coq projects in the future.\n\nDue to this pitfall, the build process has to proceed in three stages:\n1) build `coqdep` and `coq_dune`; 2) generate `dune` files for\n`theories` and `plugins`; 3) perform a regular build with all\ntargets are in scope.\n\n## FAQ\n\n### Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas `opam`, `ocamlfind` or `odoc`. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there has been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative, OCaml-specific build tool that is on\nthe path to become the standard build system for the OCaml ecosystem.\n\nDune seems to be a good fit for Coq well: it is well-supported, fast,\ncompositional, and designed for large projects.\n\n### Does Dune replace the make-based build system?\n\nThe current, make-based build system is unmodified by this PR and kept\nas the default option. However, Dune has the potential\n\n### Is this PR complete? What does it provide?\n\nThis PR is ready for developer preview and feedback. The build system\nis functional, however, more work is necessary in order to make Dune\nthe default for Coq.\n\nThe main TODOs are tracked at https://github.com/coq/coq/issues/8052\n\nThis PR allows developers to use most of the features of Dune today:\n\n- Modular organization of the codebase; each component is built only\n  against declared dependencies so components are checked for\n  containment more strictly.\n- Hygienic builds; Dune places all artifacts under `_build`.\n- Automatic generation of `.install` files, simplified OPAM workflow.\n- `utop` support, `-opaque` in developer mode, etc...\n- `ml4` files are handled using `coqp5`, a native-code customized\n  camlp5 executable which brings much faster `ml4 -> ml` processing.\n\n### What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n### Some Benchs:\n\n```\n$ /usr/bin/time make DUNEOPT=\"-j 1000\" -f Makefile.dune states\n59.50user 18.81system 0:29.83elapsed 262%CPU (0avgtext+0avgdata 302996maxresident)k\n0inputs+646632outputs (0major+4893811minor)pagefaults 0swaps\n\n$ /usr/bin/time sh -c \"./configure -local -native-compiler no && make -j states\"\n88.21user 23.65system 0:32.96elapsed 339%CPU (0avgtext+0avgdata 304992maxresident)k\n0inputs+1051680outputs (0major+5300680minor)pagefaults 0swaps\n```\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-09-04T14:58:04.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/200f80ef5f73f92e031e760279e18ad18d4348bf"},"pipeline":{"id":29367552,"iid":2929,"project_id":6138686,"sha":"200f80ef5f73f92e031e760279e18ad18d4348bf","ref":"pr-6857","status":"canceled","source":"push","created_at":"2018-09-04T12:58:46.873Z","updated_at":"2018-09-04T13:06:50.102Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/29367552"},"web_url":"https://gitlab.com/coq/coq/-/jobs/94511662","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":94511661,"status":"canceled","stage":"test","name":"ci-fiat-crypto-legacy","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-04T12:58:47.742Z","started_at":null,"finished_at":"2018-09-04T13:06:49.759Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"200f80ef5f73f92e031e760279e18ad18d4348bf","short_id":"200f80ef","created_at":"2018-09-04T14:58:04.000+02:00","parent_ids":["2a458c05b491ebb422e48e551b5ed41eb3ef986e"],"title":"[build] Preliminary support for building Coq with `dune`.","message":"[build] Preliminary support for building Coq with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides automatic generation of\n`version.ml`, `.merlin`, `META`, `opam`, API documentation; install\nmanagement; easy integration with external libraries, test runners,\nand modular builds.\n\nIn particular, Dune uniformly handles components regardless whether\nthey live in, or out-of-tree. This greatly simplifies cases where a\nplugin [or CoqIde] is checked out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can thus be used as a\nmore flexible `coq_makefile` replacement.\n\nFor now we provide experimental support for a Dune build. In order to\nbuild Coq + the standard library with Dune type:\n\n```\n$ make -f Makefile.dune world\n```\n\nThis PR includes a preliminary, developer-only preview of Dune for\nCoq. There is still ongoing work, see\nhttps://github.com/coq/coq/issues/8052 for tracking status towards\nfull support.\n\n## Technical description.\n\nDune works out of the box with Coq, once we have fixed some modularity\nissues. The main remaining challenge was to support `.vo` files.\n\nAs Dune doesn't support custom build rules yet, to properly build\n`.vo` files we provide a small helper script `tools/coq_dune.ml`. The\nscript will scan the Coq library directories and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript uses `coqdep` as to correctly output the dependencies of\n`.v` files. `coq_dune` is akin to `coq_makefile` and should be able to\nbe used to build Coq projects in the future.\n\nDue to this pitfall, the build process has to proceed in three stages:\n1) build `coqdep` and `coq_dune`; 2) generate `dune` files for\n`theories` and `plugins`; 3) perform a regular build with all\ntargets are in scope.\n\n## FAQ\n\n### Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas `opam`, `ocamlfind` or `odoc`. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there has been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative, OCaml-specific build tool that is on\nthe path to become the standard build system for the OCaml ecosystem.\n\nDune seems to be a good fit for Coq well: it is well-supported, fast,\ncompositional, and designed for large projects.\n\n### Does Dune replace the make-based build system?\n\nThe current, make-based build system is unmodified by this PR and kept\nas the default option. However, Dune has the potential\n\n### Is this PR complete? What does it provide?\n\nThis PR is ready for developer preview and feedback. The build system\nis functional, however, more work is necessary in order to make Dune\nthe default for Coq.\n\nThe main TODOs are tracked at https://github.com/coq/coq/issues/8052\n\nThis PR allows developers to use most of the features of Dune today:\n\n- Modular organization of the codebase; each component is built only\n  against declared dependencies so components are checked for\n  containment more strictly.\n- Hygienic builds; Dune places all artifacts under `_build`.\n- Automatic generation of `.install` files, simplified OPAM workflow.\n- `utop` support, `-opaque` in developer mode, etc...\n- `ml4` files are handled using `coqp5`, a native-code customized\n  camlp5 executable which brings much faster `ml4 -> ml` processing.\n\n### What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n### Some Benchs:\n\n```\n$ /usr/bin/time make DUNEOPT=\"-j 1000\" -f Makefile.dune states\n59.50user 18.81system 0:29.83elapsed 262%CPU (0avgtext+0avgdata 302996maxresident)k\n0inputs+646632outputs (0major+4893811minor)pagefaults 0swaps\n\n$ /usr/bin/time sh -c \"./configure -local -native-compiler no && make -j states\"\n88.21user 23.65system 0:32.96elapsed 339%CPU (0avgtext+0avgdata 304992maxresident)k\n0inputs+1051680outputs (0major+5300680minor)pagefaults 0swaps\n```\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-09-04T14:58:04.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/200f80ef5f73f92e031e760279e18ad18d4348bf"},"pipeline":{"id":29367552,"iid":2929,"project_id":6138686,"sha":"200f80ef5f73f92e031e760279e18ad18d4348bf","ref":"pr-6857","status":"canceled","source":"push","created_at":"2018-09-04T12:58:46.873Z","updated_at":"2018-09-04T13:06:50.102Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/29367552"},"web_url":"https://gitlab.com/coq/coq/-/jobs/94511661","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":94511660,"status":"canceled","stage":"test","name":"ci-fiat-crypto","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-04T12:58:47.718Z","started_at":null,"finished_at":"2018-09-04T13:06:49.745Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"200f80ef5f73f92e031e760279e18ad18d4348bf","short_id":"200f80ef","created_at":"2018-09-04T14:58:04.000+02:00","parent_ids":["2a458c05b491ebb422e48e551b5ed41eb3ef986e"],"title":"[build] Preliminary support for building Coq with `dune`.","message":"[build] Preliminary support for building Coq with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides automatic generation of\n`version.ml`, `.merlin`, `META`, `opam`, API documentation; install\nmanagement; easy integration with external libraries, test runners,\nand modular builds.\n\nIn particular, Dune uniformly handles components regardless whether\nthey live in, or out-of-tree. This greatly simplifies cases where a\nplugin [or CoqIde] is checked out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can thus be used as a\nmore flexible `coq_makefile` replacement.\n\nFor now we provide experimental support for a Dune build. In order to\nbuild Coq + the standard library with Dune type:\n\n```\n$ make -f Makefile.dune world\n```\n\nThis PR includes a preliminary, developer-only preview of Dune for\nCoq. There is still ongoing work, see\nhttps://github.com/coq/coq/issues/8052 for tracking status towards\nfull support.\n\n## Technical description.\n\nDune works out of the box with Coq, once we have fixed some modularity\nissues. The main remaining challenge was to support `.vo` files.\n\nAs Dune doesn't support custom build rules yet, to properly build\n`.vo` files we provide a small helper script `tools/coq_dune.ml`. The\nscript will scan the Coq library directories and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript uses `coqdep` as to correctly output the dependencies of\n`.v` files. `coq_dune` is akin to `coq_makefile` and should be able to\nbe used to build Coq projects in the future.\n\nDue to this pitfall, the build process has to proceed in three stages:\n1) build `coqdep` and `coq_dune`; 2) generate `dune` files for\n`theories` and `plugins`; 3) perform a regular build with all\ntargets are in scope.\n\n## FAQ\n\n### Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas `opam`, `ocamlfind` or `odoc`. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there has been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative, OCaml-specific build tool that is on\nthe path to become the standard build system for the OCaml ecosystem.\n\nDune seems to be a good fit for Coq well: it is well-supported, fast,\ncompositional, and designed for large projects.\n\n### Does Dune replace the make-based build system?\n\nThe current, make-based build system is unmodified by this PR and kept\nas the default option. However, Dune has the potential\n\n### Is this PR complete? What does it provide?\n\nThis PR is ready for developer preview and feedback. The build system\nis functional, however, more work is necessary in order to make Dune\nthe default for Coq.\n\nThe main TODOs are tracked at https://github.com/coq/coq/issues/8052\n\nThis PR allows developers to use most of the features of Dune today:\n\n- Modular organization of the codebase; each component is built only\n  against declared dependencies so components are checked for\n  containment more strictly.\n- Hygienic builds; Dune places all artifacts under `_build`.\n- Automatic generation of `.install` files, simplified OPAM workflow.\n- `utop` support, `-opaque` in developer mode, etc...\n- `ml4` files are handled using `coqp5`, a native-code customized\n  camlp5 executable which brings much faster `ml4 -> ml` processing.\n\n### What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n### Some Benchs:\n\n```\n$ /usr/bin/time make DUNEOPT=\"-j 1000\" -f Makefile.dune states\n59.50user 18.81system 0:29.83elapsed 262%CPU (0avgtext+0avgdata 302996maxresident)k\n0inputs+646632outputs (0major+4893811minor)pagefaults 0swaps\n\n$ /usr/bin/time sh -c \"./configure -local -native-compiler no && make -j states\"\n88.21user 23.65system 0:32.96elapsed 339%CPU (0avgtext+0avgdata 304992maxresident)k\n0inputs+1051680outputs (0major+5300680minor)pagefaults 0swaps\n```\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-09-04T14:58:04.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/200f80ef5f73f92e031e760279e18ad18d4348bf"},"pipeline":{"id":29367552,"iid":2929,"project_id":6138686,"sha":"200f80ef5f73f92e031e760279e18ad18d4348bf","ref":"pr-6857","status":"canceled","source":"push","created_at":"2018-09-04T12:58:46.873Z","updated_at":"2018-09-04T13:06:50.102Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/29367552"},"web_url":"https://gitlab.com/coq/coq/-/jobs/94511660","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":94511659,"status":"canceled","stage":"test","name":"ci-fcsl-pcm","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-04T12:58:47.695Z","started_at":null,"finished_at":"2018-09-04T13:06:49.728Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"200f80ef5f73f92e031e760279e18ad18d4348bf","short_id":"200f80ef","created_at":"2018-09-04T14:58:04.000+02:00","parent_ids":["2a458c05b491ebb422e48e551b5ed41eb3ef986e"],"title":"[build] Preliminary support for building Coq with `dune`.","message":"[build] Preliminary support for building Coq with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides automatic generation of\n`version.ml`, `.merlin`, `META`, `opam`, API documentation; install\nmanagement; easy integration with external libraries, test runners,\nand modular builds.\n\nIn particular, Dune uniformly handles components regardless whether\nthey live in, or out-of-tree. This greatly simplifies cases where a\nplugin [or CoqIde] is checked out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can thus be used as a\nmore flexible `coq_makefile` replacement.\n\nFor now we provide experimental support for a Dune build. In order to\nbuild Coq + the standard library with Dune type:\n\n```\n$ make -f Makefile.dune world\n```\n\nThis PR includes a preliminary, developer-only preview of Dune for\nCoq. There is still ongoing work, see\nhttps://github.com/coq/coq/issues/8052 for tracking status towards\nfull support.\n\n## Technical description.\n\nDune works out of the box with Coq, once we have fixed some modularity\nissues. The main remaining challenge was to support `.vo` files.\n\nAs Dune doesn't support custom build rules yet, to properly build\n`.vo` files we provide a small helper script `tools/coq_dune.ml`. The\nscript will scan the Coq library directories and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript uses `coqdep` as to correctly output the dependencies of\n`.v` files. `coq_dune` is akin to `coq_makefile` and should be able to\nbe used to build Coq projects in the future.\n\nDue to this pitfall, the build process has to proceed in three stages:\n1) build `coqdep` and `coq_dune`; 2) generate `dune` files for\n`theories` and `plugins`; 3) perform a regular build with all\ntargets are in scope.\n\n## FAQ\n\n### Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas `opam`, `ocamlfind` or `odoc`. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there has been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative, OCaml-specific build tool that is on\nthe path to become the standard build system for the OCaml ecosystem.\n\nDune seems to be a good fit for Coq well: it is well-supported, fast,\ncompositional, and designed for large projects.\n\n### Does Dune replace the make-based build system?\n\nThe current, make-based build system is unmodified by this PR and kept\nas the default option. However, Dune has the potential\n\n### Is this PR complete? What does it provide?\n\nThis PR is ready for developer preview and feedback. The build system\nis functional, however, more work is necessary in order to make Dune\nthe default for Coq.\n\nThe main TODOs are tracked at https://github.com/coq/coq/issues/8052\n\nThis PR allows developers to use most of the features of Dune today:\n\n- Modular organization of the codebase; each component is built only\n  against declared dependencies so components are checked for\n  containment more strictly.\n- Hygienic builds; Dune places all artifacts under `_build`.\n- Automatic generation of `.install` files, simplified OPAM workflow.\n- `utop` support, `-opaque` in developer mode, etc...\n- `ml4` files are handled using `coqp5`, a native-code customized\n  camlp5 executable which brings much faster `ml4 -> ml` processing.\n\n### What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n### Some Benchs:\n\n```\n$ /usr/bin/time make DUNEOPT=\"-j 1000\" -f Makefile.dune states\n59.50user 18.81system 0:29.83elapsed 262%CPU (0avgtext+0avgdata 302996maxresident)k\n0inputs+646632outputs (0major+4893811minor)pagefaults 0swaps\n\n$ /usr/bin/time sh -c \"./configure -local -native-compiler no && make -j states\"\n88.21user 23.65system 0:32.96elapsed 339%CPU (0avgtext+0avgdata 304992maxresident)k\n0inputs+1051680outputs (0major+5300680minor)pagefaults 0swaps\n```\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-09-04T14:58:04.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/200f80ef5f73f92e031e760279e18ad18d4348bf"},"pipeline":{"id":29367552,"iid":2929,"project_id":6138686,"sha":"200f80ef5f73f92e031e760279e18ad18d4348bf","ref":"pr-6857","status":"canceled","source":"push","created_at":"2018-09-04T12:58:46.873Z","updated_at":"2018-09-04T13:06:50.102Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/29367552"},"web_url":"https://gitlab.com/coq/coq/-/jobs/94511659","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":94511658,"status":"canceled","stage":"test","name":"ci-equations","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-04T12:58:47.670Z","started_at":null,"finished_at":"2018-09-04T13:06:49.706Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"200f80ef5f73f92e031e760279e18ad18d4348bf","short_id":"200f80ef","created_at":"2018-09-04T14:58:04.000+02:00","parent_ids":["2a458c05b491ebb422e48e551b5ed41eb3ef986e"],"title":"[build] Preliminary support for building Coq with `dune`.","message":"[build] Preliminary support for building Coq with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides automatic generation of\n`version.ml`, `.merlin`, `META`, `opam`, API documentation; install\nmanagement; easy integration with external libraries, test runners,\nand modular builds.\n\nIn particular, Dune uniformly handles components regardless whether\nthey live in, or out-of-tree. This greatly simplifies cases where a\nplugin [or CoqIde] is checked out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can thus be used as a\nmore flexible `coq_makefile` replacement.\n\nFor now we provide experimental support for a Dune build. In order to\nbuild Coq + the standard library with Dune type:\n\n```\n$ make -f Makefile.dune world\n```\n\nThis PR includes a preliminary, developer-only preview of Dune for\nCoq. There is still ongoing work, see\nhttps://github.com/coq/coq/issues/8052 for tracking status towards\nfull support.\n\n## Technical description.\n\nDune works out of the box with Coq, once we have fixed some modularity\nissues. The main remaining challenge was to support `.vo` files.\n\nAs Dune doesn't support custom build rules yet, to properly build\n`.vo` files we provide a small helper script `tools/coq_dune.ml`. The\nscript will scan the Coq library directories and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript uses `coqdep` as to correctly output the dependencies of\n`.v` files. `coq_dune` is akin to `coq_makefile` and should be able to\nbe used to build Coq projects in the future.\n\nDue to this pitfall, the build process has to proceed in three stages:\n1) build `coqdep` and `coq_dune`; 2) generate `dune` files for\n`theories` and `plugins`; 3) perform a regular build with all\ntargets are in scope.\n\n## FAQ\n\n### Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas `opam`, `ocamlfind` or `odoc`. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there has been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative, OCaml-specific build tool that is on\nthe path to become the standard build system for the OCaml ecosystem.\n\nDune seems to be a good fit for Coq well: it is well-supported, fast,\ncompositional, and designed for large projects.\n\n### Does Dune replace the make-based build system?\n\nThe current, make-based build system is unmodified by this PR and kept\nas the default option. However, Dune has the potential\n\n### Is this PR complete? What does it provide?\n\nThis PR is ready for developer preview and feedback. The build system\nis functional, however, more work is necessary in order to make Dune\nthe default for Coq.\n\nThe main TODOs are tracked at https://github.com/coq/coq/issues/8052\n\nThis PR allows developers to use most of the features of Dune today:\n\n- Modular organization of the codebase; each component is built only\n  against declared dependencies so components are checked for\n  containment more strictly.\n- Hygienic builds; Dune places all artifacts under `_build`.\n- Automatic generation of `.install` files, simplified OPAM workflow.\n- `utop` support, `-opaque` in developer mode, etc...\n- `ml4` files are handled using `coqp5`, a native-code customized\n  camlp5 executable which brings much faster `ml4 -> ml` processing.\n\n### What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n### Some Benchs:\n\n```\n$ /usr/bin/time make DUNEOPT=\"-j 1000\" -f Makefile.dune states\n59.50user 18.81system 0:29.83elapsed 262%CPU (0avgtext+0avgdata 302996maxresident)k\n0inputs+646632outputs (0major+4893811minor)pagefaults 0swaps\n\n$ /usr/bin/time sh -c \"./configure -local -native-compiler no && make -j states\"\n88.21user 23.65system 0:32.96elapsed 339%CPU (0avgtext+0avgdata 304992maxresident)k\n0inputs+1051680outputs (0major+5300680minor)pagefaults 0swaps\n```\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-09-04T14:58:04.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/200f80ef5f73f92e031e760279e18ad18d4348bf"},"pipeline":{"id":29367552,"iid":2929,"project_id":6138686,"sha":"200f80ef5f73f92e031e760279e18ad18d4348bf","ref":"pr-6857","status":"canceled","source":"push","created_at":"2018-09-04T12:58:46.873Z","updated_at":"2018-09-04T13:06:50.102Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/29367552"},"web_url":"https://gitlab.com/coq/coq/-/jobs/94511658","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":94511657,"status":"canceled","stage":"test","name":"ci-elpi","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-04T12:58:47.644Z","started_at":null,"finished_at":"2018-09-04T13:06:49.687Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"200f80ef5f73f92e031e760279e18ad18d4348bf","short_id":"200f80ef","created_at":"2018-09-04T14:58:04.000+02:00","parent_ids":["2a458c05b491ebb422e48e551b5ed41eb3ef986e"],"title":"[build] Preliminary support for building Coq with `dune`.","message":"[build] Preliminary support for building Coq with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides automatic generation of\n`version.ml`, `.merlin`, `META`, `opam`, API documentation; install\nmanagement; easy integration with external libraries, test runners,\nand modular builds.\n\nIn particular, Dune uniformly handles components regardless whether\nthey live in, or out-of-tree. This greatly simplifies cases where a\nplugin [or CoqIde] is checked out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can thus be used as a\nmore flexible `coq_makefile` replacement.\n\nFor now we provide experimental support for a Dune build. In order to\nbuild Coq + the standard library with Dune type:\n\n```\n$ make -f Makefile.dune world\n```\n\nThis PR includes a preliminary, developer-only preview of Dune for\nCoq. There is still ongoing work, see\nhttps://github.com/coq/coq/issues/8052 for tracking status towards\nfull support.\n\n## Technical description.\n\nDune works out of the box with Coq, once we have fixed some modularity\nissues. The main remaining challenge was to support `.vo` files.\n\nAs Dune doesn't support custom build rules yet, to properly build\n`.vo` files we provide a small helper script `tools/coq_dune.ml`. The\nscript will scan the Coq library directories and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript uses `coqdep` as to correctly output the dependencies of\n`.v` files. `coq_dune` is akin to `coq_makefile` and should be able to\nbe used to build Coq projects in the future.\n\nDue to this pitfall, the build process has to proceed in three stages:\n1) build `coqdep` and `coq_dune`; 2) generate `dune` files for\n`theories` and `plugins`; 3) perform a regular build with all\ntargets are in scope.\n\n## FAQ\n\n### Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas `opam`, `ocamlfind` or `odoc`. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there has been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative, OCaml-specific build tool that is on\nthe path to become the standard build system for the OCaml ecosystem.\n\nDune seems to be a good fit for Coq well: it is well-supported, fast,\ncompositional, and designed for large projects.\n\n### Does Dune replace the make-based build system?\n\nThe current, make-based build system is unmodified by this PR and kept\nas the default option. However, Dune has the potential\n\n### Is this PR complete? What does it provide?\n\nThis PR is ready for developer preview and feedback. The build system\nis functional, however, more work is necessary in order to make Dune\nthe default for Coq.\n\nThe main TODOs are tracked at https://github.com/coq/coq/issues/8052\n\nThis PR allows developers to use most of the features of Dune today:\n\n- Modular organization of the codebase; each component is built only\n  against declared dependencies so components are checked for\n  containment more strictly.\n- Hygienic builds; Dune places all artifacts under `_build`.\n- Automatic generation of `.install` files, simplified OPAM workflow.\n- `utop` support, `-opaque` in developer mode, etc...\n- `ml4` files are handled using `coqp5`, a native-code customized\n  camlp5 executable which brings much faster `ml4 -> ml` processing.\n\n### What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n### Some Benchs:\n\n```\n$ /usr/bin/time make DUNEOPT=\"-j 1000\" -f Makefile.dune states\n59.50user 18.81system 0:29.83elapsed 262%CPU (0avgtext+0avgdata 302996maxresident)k\n0inputs+646632outputs (0major+4893811minor)pagefaults 0swaps\n\n$ /usr/bin/time sh -c \"./configure -local -native-compiler no && make -j states\"\n88.21user 23.65system 0:32.96elapsed 339%CPU (0avgtext+0avgdata 304992maxresident)k\n0inputs+1051680outputs (0major+5300680minor)pagefaults 0swaps\n```\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-09-04T14:58:04.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/200f80ef5f73f92e031e760279e18ad18d4348bf"},"pipeline":{"id":29367552,"iid":2929,"project_id":6138686,"sha":"200f80ef5f73f92e031e760279e18ad18d4348bf","ref":"pr-6857","status":"canceled","source":"push","created_at":"2018-09-04T12:58:46.873Z","updated_at":"2018-09-04T13:06:50.102Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/29367552"},"web_url":"https://gitlab.com/coq/coq/-/jobs/94511657","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":94511656,"status":"canceled","stage":"test","name":"ci-cross-crypto","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-04T12:58:47.620Z","started_at":null,"finished_at":"2018-09-04T13:06:49.667Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"200f80ef5f73f92e031e760279e18ad18d4348bf","short_id":"200f80ef","created_at":"2018-09-04T14:58:04.000+02:00","parent_ids":["2a458c05b491ebb422e48e551b5ed41eb3ef986e"],"title":"[build] Preliminary support for building Coq with `dune`.","message":"[build] Preliminary support for building Coq with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides automatic generation of\n`version.ml`, `.merlin`, `META`, `opam`, API documentation; install\nmanagement; easy integration with external libraries, test runners,\nand modular builds.\n\nIn particular, Dune uniformly handles components regardless whether\nthey live in, or out-of-tree. This greatly simplifies cases where a\nplugin [or CoqIde] is checked out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can thus be used as a\nmore flexible `coq_makefile` replacement.\n\nFor now we provide experimental support for a Dune build. In order to\nbuild Coq + the standard library with Dune type:\n\n```\n$ make -f Makefile.dune world\n```\n\nThis PR includes a preliminary, developer-only preview of Dune for\nCoq. There is still ongoing work, see\nhttps://github.com/coq/coq/issues/8052 for tracking status towards\nfull support.\n\n## Technical description.\n\nDune works out of the box with Coq, once we have fixed some modularity\nissues. The main remaining challenge was to support `.vo` files.\n\nAs Dune doesn't support custom build rules yet, to properly build\n`.vo` files we provide a small helper script `tools/coq_dune.ml`. The\nscript will scan the Coq library directories and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript uses `coqdep` as to correctly output the dependencies of\n`.v` files. `coq_dune` is akin to `coq_makefile` and should be able to\nbe used to build Coq projects in the future.\n\nDue to this pitfall, the build process has to proceed in three stages:\n1) build `coqdep` and `coq_dune`; 2) generate `dune` files for\n`theories` and `plugins`; 3) perform a regular build with all\ntargets are in scope.\n\n## FAQ\n\n### Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas `opam`, `ocamlfind` or `odoc`. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there has been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative, OCaml-specific build tool that is on\nthe path to become the standard build system for the OCaml ecosystem.\n\nDune seems to be a good fit for Coq well: it is well-supported, fast,\ncompositional, and designed for large projects.\n\n### Does Dune replace the make-based build system?\n\nThe current, make-based build system is unmodified by this PR and kept\nas the default option. However, Dune has the potential\n\n### Is this PR complete? What does it provide?\n\nThis PR is ready for developer preview and feedback. The build system\nis functional, however, more work is necessary in order to make Dune\nthe default for Coq.\n\nThe main TODOs are tracked at https://github.com/coq/coq/issues/8052\n\nThis PR allows developers to use most of the features of Dune today:\n\n- Modular organization of the codebase; each component is built only\n  against declared dependencies so components are checked for\n  containment more strictly.\n- Hygienic builds; Dune places all artifacts under `_build`.\n- Automatic generation of `.install` files, simplified OPAM workflow.\n- `utop` support, `-opaque` in developer mode, etc...\n- `ml4` files are handled using `coqp5`, a native-code customized\n  camlp5 executable which brings much faster `ml4 -> ml` processing.\n\n### What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n### Some Benchs:\n\n```\n$ /usr/bin/time make DUNEOPT=\"-j 1000\" -f Makefile.dune states\n59.50user 18.81system 0:29.83elapsed 262%CPU (0avgtext+0avgdata 302996maxresident)k\n0inputs+646632outputs (0major+4893811minor)pagefaults 0swaps\n\n$ /usr/bin/time sh -c \"./configure -local -native-compiler no && make -j states\"\n88.21user 23.65system 0:32.96elapsed 339%CPU (0avgtext+0avgdata 304992maxresident)k\n0inputs+1051680outputs (0major+5300680minor)pagefaults 0swaps\n```\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-09-04T14:58:04.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/200f80ef5f73f92e031e760279e18ad18d4348bf"},"pipeline":{"id":29367552,"iid":2929,"project_id":6138686,"sha":"200f80ef5f73f92e031e760279e18ad18d4348bf","ref":"pr-6857","status":"canceled","source":"push","created_at":"2018-09-04T12:58:46.873Z","updated_at":"2018-09-04T13:06:50.102Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/29367552"},"web_url":"https://gitlab.com/coq/coq/-/jobs/94511656","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":94511655,"status":"canceled","stage":"test","name":"ci-coquelicot","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-04T12:58:47.596Z","started_at":null,"finished_at":"2018-09-04T13:06:49.648Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"200f80ef5f73f92e031e760279e18ad18d4348bf","short_id":"200f80ef","created_at":"2018-09-04T14:58:04.000+02:00","parent_ids":["2a458c05b491ebb422e48e551b5ed41eb3ef986e"],"title":"[build] Preliminary support for building Coq with `dune`.","message":"[build] Preliminary support for building Coq with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides automatic generation of\n`version.ml`, `.merlin`, `META`, `opam`, API documentation; install\nmanagement; easy integration with external libraries, test runners,\nand modular builds.\n\nIn particular, Dune uniformly handles components regardless whether\nthey live in, or out-of-tree. This greatly simplifies cases where a\nplugin [or CoqIde] is checked out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can thus be used as a\nmore flexible `coq_makefile` replacement.\n\nFor now we provide experimental support for a Dune build. In order to\nbuild Coq + the standard library with Dune type:\n\n```\n$ make -f Makefile.dune world\n```\n\nThis PR includes a preliminary, developer-only preview of Dune for\nCoq. There is still ongoing work, see\nhttps://github.com/coq/coq/issues/8052 for tracking status towards\nfull support.\n\n## Technical description.\n\nDune works out of the box with Coq, once we have fixed some modularity\nissues. The main remaining challenge was to support `.vo` files.\n\nAs Dune doesn't support custom build rules yet, to properly build\n`.vo` files we provide a small helper script `tools/coq_dune.ml`. The\nscript will scan the Coq library directories and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript uses `coqdep` as to correctly output the dependencies of\n`.v` files. `coq_dune` is akin to `coq_makefile` and should be able to\nbe used to build Coq projects in the future.\n\nDue to this pitfall, the build process has to proceed in three stages:\n1) build `coqdep` and `coq_dune`; 2) generate `dune` files for\n`theories` and `plugins`; 3) perform a regular build with all\ntargets are in scope.\n\n## FAQ\n\n### Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas `opam`, `ocamlfind` or `odoc`. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there has been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative, OCaml-specific build tool that is on\nthe path to become the standard build system for the OCaml ecosystem.\n\nDune seems to be a good fit for Coq well: it is well-supported, fast,\ncompositional, and designed for large projects.\n\n### Does Dune replace the make-based build system?\n\nThe current, make-based build system is unmodified by this PR and kept\nas the default option. However, Dune has the potential\n\n### Is this PR complete? What does it provide?\n\nThis PR is ready for developer preview and feedback. The build system\nis functional, however, more work is necessary in order to make Dune\nthe default for Coq.\n\nThe main TODOs are tracked at https://github.com/coq/coq/issues/8052\n\nThis PR allows developers to use most of the features of Dune today:\n\n- Modular organization of the codebase; each component is built only\n  against declared dependencies so components are checked for\n  containment more strictly.\n- Hygienic builds; Dune places all artifacts under `_build`.\n- Automatic generation of `.install` files, simplified OPAM workflow.\n- `utop` support, `-opaque` in developer mode, etc...\n- `ml4` files are handled using `coqp5`, a native-code customized\n  camlp5 executable which brings much faster `ml4 -> ml` processing.\n\n### What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n### Some Benchs:\n\n```\n$ /usr/bin/time make DUNEOPT=\"-j 1000\" -f Makefile.dune states\n59.50user 18.81system 0:29.83elapsed 262%CPU (0avgtext+0avgdata 302996maxresident)k\n0inputs+646632outputs (0major+4893811minor)pagefaults 0swaps\n\n$ /usr/bin/time sh -c \"./configure -local -native-compiler no && make -j states\"\n88.21user 23.65system 0:32.96elapsed 339%CPU (0avgtext+0avgdata 304992maxresident)k\n0inputs+1051680outputs (0major+5300680minor)pagefaults 0swaps\n```\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-09-04T14:58:04.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/200f80ef5f73f92e031e760279e18ad18d4348bf"},"pipeline":{"id":29367552,"iid":2929,"project_id":6138686,"sha":"200f80ef5f73f92e031e760279e18ad18d4348bf","ref":"pr-6857","status":"canceled","source":"push","created_at":"2018-09-04T12:58:46.873Z","updated_at":"2018-09-04T13:06:50.102Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/29367552"},"web_url":"https://gitlab.com/coq/coq/-/jobs/94511655","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":94511654,"status":"canceled","stage":"test","name":"ci-coq-dpdgraph","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-04T12:58:47.568Z","started_at":null,"finished_at":"2018-09-04T13:06:49.630Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"200f80ef5f73f92e031e760279e18ad18d4348bf","short_id":"200f80ef","created_at":"2018-09-04T14:58:04.000+02:00","parent_ids":["2a458c05b491ebb422e48e551b5ed41eb3ef986e"],"title":"[build] Preliminary support for building Coq with `dune`.","message":"[build] Preliminary support for building Coq with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides automatic generation of\n`version.ml`, `.merlin`, `META`, `opam`, API documentation; install\nmanagement; easy integration with external libraries, test runners,\nand modular builds.\n\nIn particular, Dune uniformly handles components regardless whether\nthey live in, or out-of-tree. This greatly simplifies cases where a\nplugin [or CoqIde] is checked out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can thus be used as a\nmore flexible `coq_makefile` replacement.\n\nFor now we provide experimental support for a Dune build. In order to\nbuild Coq + the standard library with Dune type:\n\n```\n$ make -f Makefile.dune world\n```\n\nThis PR includes a preliminary, developer-only preview of Dune for\nCoq. There is still ongoing work, see\nhttps://github.com/coq/coq/issues/8052 for tracking status towards\nfull support.\n\n## Technical description.\n\nDune works out of the box with Coq, once we have fixed some modularity\nissues. The main remaining challenge was to support `.vo` files.\n\nAs Dune doesn't support custom build rules yet, to properly build\n`.vo` files we provide a small helper script `tools/coq_dune.ml`. The\nscript will scan the Coq library directories and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript uses `coqdep` as to correctly output the dependencies of\n`.v` files. `coq_dune` is akin to `coq_makefile` and should be able to\nbe used to build Coq projects in the future.\n\nDue to this pitfall, the build process has to proceed in three stages:\n1) build `coqdep` and `coq_dune`; 2) generate `dune` files for\n`theories` and `plugins`; 3) perform a regular build with all\ntargets are in scope.\n\n## FAQ\n\n### Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas `opam`, `ocamlfind` or `odoc`. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there has been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative, OCaml-specific build tool that is on\nthe path to become the standard build system for the OCaml ecosystem.\n\nDune seems to be a good fit for Coq well: it is well-supported, fast,\ncompositional, and designed for large projects.\n\n### Does Dune replace the make-based build system?\n\nThe current, make-based build system is unmodified by this PR and kept\nas the default option. However, Dune has the potential\n\n### Is this PR complete? What does it provide?\n\nThis PR is ready for developer preview and feedback. The build system\nis functional, however, more work is necessary in order to make Dune\nthe default for Coq.\n\nThe main TODOs are tracked at https://github.com/coq/coq/issues/8052\n\nThis PR allows developers to use most of the features of Dune today:\n\n- Modular organization of the codebase; each component is built only\n  against declared dependencies so components are checked for\n  containment more strictly.\n- Hygienic builds; Dune places all artifacts under `_build`.\n- Automatic generation of `.install` files, simplified OPAM workflow.\n- `utop` support, `-opaque` in developer mode, etc...\n- `ml4` files are handled using `coqp5`, a native-code customized\n  camlp5 executable which brings much faster `ml4 -> ml` processing.\n\n### What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n### Some Benchs:\n\n```\n$ /usr/bin/time make DUNEOPT=\"-j 1000\" -f Makefile.dune states\n59.50user 18.81system 0:29.83elapsed 262%CPU (0avgtext+0avgdata 302996maxresident)k\n0inputs+646632outputs (0major+4893811minor)pagefaults 0swaps\n\n$ /usr/bin/time sh -c \"./configure -local -native-compiler no && make -j states\"\n88.21user 23.65system 0:32.96elapsed 339%CPU (0avgtext+0avgdata 304992maxresident)k\n0inputs+1051680outputs (0major+5300680minor)pagefaults 0swaps\n```\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-09-04T14:58:04.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/200f80ef5f73f92e031e760279e18ad18d4348bf"},"pipeline":{"id":29367552,"iid":2929,"project_id":6138686,"sha":"200f80ef5f73f92e031e760279e18ad18d4348bf","ref":"pr-6857","status":"canceled","source":"push","created_at":"2018-09-04T12:58:46.873Z","updated_at":"2018-09-04T13:06:50.102Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/29367552"},"web_url":"https://gitlab.com/coq/coq/-/jobs/94511654","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":94511653,"status":"canceled","stage":"test","name":"ci-compcert","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-04T12:58:47.539Z","started_at":null,"finished_at":"2018-09-04T13:06:49.611Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"200f80ef5f73f92e031e760279e18ad18d4348bf","short_id":"200f80ef","created_at":"2018-09-04T14:58:04.000+02:00","parent_ids":["2a458c05b491ebb422e48e551b5ed41eb3ef986e"],"title":"[build] Preliminary support for building Coq with `dune`.","message":"[build] Preliminary support for building Coq with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides automatic generation of\n`version.ml`, `.merlin`, `META`, `opam`, API documentation; install\nmanagement; easy integration with external libraries, test runners,\nand modular builds.\n\nIn particular, Dune uniformly handles components regardless whether\nthey live in, or out-of-tree. This greatly simplifies cases where a\nplugin [or CoqIde] is checked out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can thus be used as a\nmore flexible `coq_makefile` replacement.\n\nFor now we provide experimental support for a Dune build. In order to\nbuild Coq + the standard library with Dune type:\n\n```\n$ make -f Makefile.dune world\n```\n\nThis PR includes a preliminary, developer-only preview of Dune for\nCoq. There is still ongoing work, see\nhttps://github.com/coq/coq/issues/8052 for tracking status towards\nfull support.\n\n## Technical description.\n\nDune works out of the box with Coq, once we have fixed some modularity\nissues. The main remaining challenge was to support `.vo` files.\n\nAs Dune doesn't support custom build rules yet, to properly build\n`.vo` files we provide a small helper script `tools/coq_dune.ml`. The\nscript will scan the Coq library directories and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript uses `coqdep` as to correctly output the dependencies of\n`.v` files. `coq_dune` is akin to `coq_makefile` and should be able to\nbe used to build Coq projects in the future.\n\nDue to this pitfall, the build process has to proceed in three stages:\n1) build `coqdep` and `coq_dune`; 2) generate `dune` files for\n`theories` and `plugins`; 3) perform a regular build with all\ntargets are in scope.\n\n## FAQ\n\n### Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas `opam`, `ocamlfind` or `odoc`. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there has been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative, OCaml-specific build tool that is on\nthe path to become the standard build system for the OCaml ecosystem.\n\nDune seems to be a good fit for Coq well: it is well-supported, fast,\ncompositional, and designed for large projects.\n\n### Does Dune replace the make-based build system?\n\nThe current, make-based build system is unmodified by this PR and kept\nas the default option. However, Dune has the potential\n\n### Is this PR complete? What does it provide?\n\nThis PR is ready for developer preview and feedback. The build system\nis functional, however, more work is necessary in order to make Dune\nthe default for Coq.\n\nThe main TODOs are tracked at https://github.com/coq/coq/issues/8052\n\nThis PR allows developers to use most of the features of Dune today:\n\n- Modular organization of the codebase; each component is built only\n  against declared dependencies so components are checked for\n  containment more strictly.\n- Hygienic builds; Dune places all artifacts under `_build`.\n- Automatic generation of `.install` files, simplified OPAM workflow.\n- `utop` support, `-opaque` in developer mode, etc...\n- `ml4` files are handled using `coqp5`, a native-code customized\n  camlp5 executable which brings much faster `ml4 -> ml` processing.\n\n### What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n### Some Benchs:\n\n```\n$ /usr/bin/time make DUNEOPT=\"-j 1000\" -f Makefile.dune states\n59.50user 18.81system 0:29.83elapsed 262%CPU (0avgtext+0avgdata 302996maxresident)k\n0inputs+646632outputs (0major+4893811minor)pagefaults 0swaps\n\n$ /usr/bin/time sh -c \"./configure -local -native-compiler no && make -j states\"\n88.21user 23.65system 0:32.96elapsed 339%CPU (0avgtext+0avgdata 304992maxresident)k\n0inputs+1051680outputs (0major+5300680minor)pagefaults 0swaps\n```\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-09-04T14:58:04.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/200f80ef5f73f92e031e760279e18ad18d4348bf"},"pipeline":{"id":29367552,"iid":2929,"project_id":6138686,"sha":"200f80ef5f73f92e031e760279e18ad18d4348bf","ref":"pr-6857","status":"canceled","source":"push","created_at":"2018-09-04T12:58:46.873Z","updated_at":"2018-09-04T13:06:50.102Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/29367552"},"web_url":"https://gitlab.com/coq/coq/-/jobs/94511653","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":94511652,"status":"canceled","stage":"test","name":"ci-color","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-04T12:58:47.506Z","started_at":null,"finished_at":"2018-09-04T13:06:49.592Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"200f80ef5f73f92e031e760279e18ad18d4348bf","short_id":"200f80ef","created_at":"2018-09-04T14:58:04.000+02:00","parent_ids":["2a458c05b491ebb422e48e551b5ed41eb3ef986e"],"title":"[build] Preliminary support for building Coq with `dune`.","message":"[build] Preliminary support for building Coq with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides automatic generation of\n`version.ml`, `.merlin`, `META`, `opam`, API documentation; install\nmanagement; easy integration with external libraries, test runners,\nand modular builds.\n\nIn particular, Dune uniformly handles components regardless whether\nthey live in, or out-of-tree. This greatly simplifies cases where a\nplugin [or CoqIde] is checked out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can thus be used as a\nmore flexible `coq_makefile` replacement.\n\nFor now we provide experimental support for a Dune build. In order to\nbuild Coq + the standard library with Dune type:\n\n```\n$ make -f Makefile.dune world\n```\n\nThis PR includes a preliminary, developer-only preview of Dune for\nCoq. There is still ongoing work, see\nhttps://github.com/coq/coq/issues/8052 for tracking status towards\nfull support.\n\n## Technical description.\n\nDune works out of the box with Coq, once we have fixed some modularity\nissues. The main remaining challenge was to support `.vo` files.\n\nAs Dune doesn't support custom build rules yet, to properly build\n`.vo` files we provide a small helper script `tools/coq_dune.ml`. The\nscript will scan the Coq library directories and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript uses `coqdep` as to correctly output the dependencies of\n`.v` files. `coq_dune` is akin to `coq_makefile` and should be able to\nbe used to build Coq projects in the future.\n\nDue to this pitfall, the build process has to proceed in three stages:\n1) build `coqdep` and `coq_dune`; 2) generate `dune` files for\n`theories` and `plugins`; 3) perform a regular build with all\ntargets are in scope.\n\n## FAQ\n\n### Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas `opam`, `ocamlfind` or `odoc`. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there has been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative, OCaml-specific build tool that is on\nthe path to become the standard build system for the OCaml ecosystem.\n\nDune seems to be a good fit for Coq well: it is well-supported, fast,\ncompositional, and designed for large projects.\n\n### Does Dune replace the make-based build system?\n\nThe current, make-based build system is unmodified by this PR and kept\nas the default option. However, Dune has the potential\n\n### Is this PR complete? What does it provide?\n\nThis PR is ready for developer preview and feedback. The build system\nis functional, however, more work is necessary in order to make Dune\nthe default for Coq.\n\nThe main TODOs are tracked at https://github.com/coq/coq/issues/8052\n\nThis PR allows developers to use most of the features of Dune today:\n\n- Modular organization of the codebase; each component is built only\n  against declared dependencies so components are checked for\n  containment more strictly.\n- Hygienic builds; Dune places all artifacts under `_build`.\n- Automatic generation of `.install` files, simplified OPAM workflow.\n- `utop` support, `-opaque` in developer mode, etc...\n- `ml4` files are handled using `coqp5`, a native-code customized\n  camlp5 executable which brings much faster `ml4 -> ml` processing.\n\n### What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n### Some Benchs:\n\n```\n$ /usr/bin/time make DUNEOPT=\"-j 1000\" -f Makefile.dune states\n59.50user 18.81system 0:29.83elapsed 262%CPU (0avgtext+0avgdata 302996maxresident)k\n0inputs+646632outputs (0major+4893811minor)pagefaults 0swaps\n\n$ /usr/bin/time sh -c \"./configure -local -native-compiler no && make -j states\"\n88.21user 23.65system 0:32.96elapsed 339%CPU (0avgtext+0avgdata 304992maxresident)k\n0inputs+1051680outputs (0major+5300680minor)pagefaults 0swaps\n```\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-09-04T14:58:04.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/200f80ef5f73f92e031e760279e18ad18d4348bf"},"pipeline":{"id":29367552,"iid":2929,"project_id":6138686,"sha":"200f80ef5f73f92e031e760279e18ad18d4348bf","ref":"pr-6857","status":"canceled","source":"push","created_at":"2018-09-04T12:58:46.873Z","updated_at":"2018-09-04T13:06:50.102Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/29367552"},"web_url":"https://gitlab.com/coq/coq/-/jobs/94511652","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":94511651,"status":"canceled","stage":"test","name":"ci-bignums","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-04T12:58:47.480Z","started_at":null,"finished_at":"2018-09-04T13:06:49.568Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"200f80ef5f73f92e031e760279e18ad18d4348bf","short_id":"200f80ef","created_at":"2018-09-04T14:58:04.000+02:00","parent_ids":["2a458c05b491ebb422e48e551b5ed41eb3ef986e"],"title":"[build] Preliminary support for building Coq with `dune`.","message":"[build] Preliminary support for building Coq with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides automatic generation of\n`version.ml`, `.merlin`, `META`, `opam`, API documentation; install\nmanagement; easy integration with external libraries, test runners,\nand modular builds.\n\nIn particular, Dune uniformly handles components regardless whether\nthey live in, or out-of-tree. This greatly simplifies cases where a\nplugin [or CoqIde] is checked out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can thus be used as a\nmore flexible `coq_makefile` replacement.\n\nFor now we provide experimental support for a Dune build. In order to\nbuild Coq + the standard library with Dune type:\n\n```\n$ make -f Makefile.dune world\n```\n\nThis PR includes a preliminary, developer-only preview of Dune for\nCoq. There is still ongoing work, see\nhttps://github.com/coq/coq/issues/8052 for tracking status towards\nfull support.\n\n## Technical description.\n\nDune works out of the box with Coq, once we have fixed some modularity\nissues. The main remaining challenge was to support `.vo` files.\n\nAs Dune doesn't support custom build rules yet, to properly build\n`.vo` files we provide a small helper script `tools/coq_dune.ml`. The\nscript will scan the Coq library directories and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript uses `coqdep` as to correctly output the dependencies of\n`.v` files. `coq_dune` is akin to `coq_makefile` and should be able to\nbe used to build Coq projects in the future.\n\nDue to this pitfall, the build process has to proceed in three stages:\n1) build `coqdep` and `coq_dune`; 2) generate `dune` files for\n`theories` and `plugins`; 3) perform a regular build with all\ntargets are in scope.\n\n## FAQ\n\n### Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas `opam`, `ocamlfind` or `odoc`. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there has been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative, OCaml-specific build tool that is on\nthe path to become the standard build system for the OCaml ecosystem.\n\nDune seems to be a good fit for Coq well: it is well-supported, fast,\ncompositional, and designed for large projects.\n\n### Does Dune replace the make-based build system?\n\nThe current, make-based build system is unmodified by this PR and kept\nas the default option. However, Dune has the potential\n\n### Is this PR complete? What does it provide?\n\nThis PR is ready for developer preview and feedback. The build system\nis functional, however, more work is necessary in order to make Dune\nthe default for Coq.\n\nThe main TODOs are tracked at https://github.com/coq/coq/issues/8052\n\nThis PR allows developers to use most of the features of Dune today:\n\n- Modular organization of the codebase; each component is built only\n  against declared dependencies so components are checked for\n  containment more strictly.\n- Hygienic builds; Dune places all artifacts under `_build`.\n- Automatic generation of `.install` files, simplified OPAM workflow.\n- `utop` support, `-opaque` in developer mode, etc...\n- `ml4` files are handled using `coqp5`, a native-code customized\n  camlp5 executable which brings much faster `ml4 -> ml` processing.\n\n### What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n### Some Benchs:\n\n```\n$ /usr/bin/time make DUNEOPT=\"-j 1000\" -f Makefile.dune states\n59.50user 18.81system 0:29.83elapsed 262%CPU (0avgtext+0avgdata 302996maxresident)k\n0inputs+646632outputs (0major+4893811minor)pagefaults 0swaps\n\n$ /usr/bin/time sh -c \"./configure -local -native-compiler no && make -j states\"\n88.21user 23.65system 0:32.96elapsed 339%CPU (0avgtext+0avgdata 304992maxresident)k\n0inputs+1051680outputs (0major+5300680minor)pagefaults 0swaps\n```\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-09-04T14:58:04.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/200f80ef5f73f92e031e760279e18ad18d4348bf"},"pipeline":{"id":29367552,"iid":2929,"project_id":6138686,"sha":"200f80ef5f73f92e031e760279e18ad18d4348bf","ref":"pr-6857","status":"canceled","source":"push","created_at":"2018-09-04T12:58:46.873Z","updated_at":"2018-09-04T13:06:50.102Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/29367552"},"web_url":"https://gitlab.com/coq/coq/-/jobs/94511651","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":94511650,"status":"canceled","stage":"test","name":"ci-bedrock2","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-04T12:58:47.451Z","started_at":null,"finished_at":"2018-09-04T13:06:49.547Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"200f80ef5f73f92e031e760279e18ad18d4348bf","short_id":"200f80ef","created_at":"2018-09-04T14:58:04.000+02:00","parent_ids":["2a458c05b491ebb422e48e551b5ed41eb3ef986e"],"title":"[build] Preliminary support for building Coq with `dune`.","message":"[build] Preliminary support for building Coq with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides automatic generation of\n`version.ml`, `.merlin`, `META`, `opam`, API documentation; install\nmanagement; easy integration with external libraries, test runners,\nand modular builds.\n\nIn particular, Dune uniformly handles components regardless whether\nthey live in, or out-of-tree. This greatly simplifies cases where a\nplugin [or CoqIde] is checked out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can thus be used as a\nmore flexible `coq_makefile` replacement.\n\nFor now we provide experimental support for a Dune build. In order to\nbuild Coq + the standard library with Dune type:\n\n```\n$ make -f Makefile.dune world\n```\n\nThis PR includes a preliminary, developer-only preview of Dune for\nCoq. There is still ongoing work, see\nhttps://github.com/coq/coq/issues/8052 for tracking status towards\nfull support.\n\n## Technical description.\n\nDune works out of the box with Coq, once we have fixed some modularity\nissues. The main remaining challenge was to support `.vo` files.\n\nAs Dune doesn't support custom build rules yet, to properly build\n`.vo` files we provide a small helper script `tools/coq_dune.ml`. The\nscript will scan the Coq library directories and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript uses `coqdep` as to correctly output the dependencies of\n`.v` files. `coq_dune` is akin to `coq_makefile` and should be able to\nbe used to build Coq projects in the future.\n\nDue to this pitfall, the build process has to proceed in three stages:\n1) build `coqdep` and `coq_dune`; 2) generate `dune` files for\n`theories` and `plugins`; 3) perform a regular build with all\ntargets are in scope.\n\n## FAQ\n\n### Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas `opam`, `ocamlfind` or `odoc`. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there has been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative, OCaml-specific build tool that is on\nthe path to become the standard build system for the OCaml ecosystem.\n\nDune seems to be a good fit for Coq well: it is well-supported, fast,\ncompositional, and designed for large projects.\n\n### Does Dune replace the make-based build system?\n\nThe current, make-based build system is unmodified by this PR and kept\nas the default option. However, Dune has the potential\n\n### Is this PR complete? What does it provide?\n\nThis PR is ready for developer preview and feedback. The build system\nis functional, however, more work is necessary in order to make Dune\nthe default for Coq.\n\nThe main TODOs are tracked at https://github.com/coq/coq/issues/8052\n\nThis PR allows developers to use most of the features of Dune today:\n\n- Modular organization of the codebase; each component is built only\n  against declared dependencies so components are checked for\n  containment more strictly.\n- Hygienic builds; Dune places all artifacts under `_build`.\n- Automatic generation of `.install` files, simplified OPAM workflow.\n- `utop` support, `-opaque` in developer mode, etc...\n- `ml4` files are handled using `coqp5`, a native-code customized\n  camlp5 executable which brings much faster `ml4 -> ml` processing.\n\n### What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n### Some Benchs:\n\n```\n$ /usr/bin/time make DUNEOPT=\"-j 1000\" -f Makefile.dune states\n59.50user 18.81system 0:29.83elapsed 262%CPU (0avgtext+0avgdata 302996maxresident)k\n0inputs+646632outputs (0major+4893811minor)pagefaults 0swaps\n\n$ /usr/bin/time sh -c \"./configure -local -native-compiler no && make -j states\"\n88.21user 23.65system 0:32.96elapsed 339%CPU (0avgtext+0avgdata 304992maxresident)k\n0inputs+1051680outputs (0major+5300680minor)pagefaults 0swaps\n```\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-09-04T14:58:04.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/200f80ef5f73f92e031e760279e18ad18d4348bf"},"pipeline":{"id":29367552,"iid":2929,"project_id":6138686,"sha":"200f80ef5f73f92e031e760279e18ad18d4348bf","ref":"pr-6857","status":"canceled","source":"push","created_at":"2018-09-04T12:58:46.873Z","updated_at":"2018-09-04T13:06:50.102Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/29367552"},"web_url":"https://gitlab.com/coq/coq/-/jobs/94511650","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":94511649,"status":"canceled","stage":"test","name":"validate:edge+flambda","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-04T12:58:47.424Z","started_at":null,"finished_at":"2018-09-04T13:06:49.527Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"200f80ef5f73f92e031e760279e18ad18d4348bf","short_id":"200f80ef","created_at":"2018-09-04T14:58:04.000+02:00","parent_ids":["2a458c05b491ebb422e48e551b5ed41eb3ef986e"],"title":"[build] Preliminary support for building Coq with `dune`.","message":"[build] Preliminary support for building Coq with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides automatic generation of\n`version.ml`, `.merlin`, `META`, `opam`, API documentation; install\nmanagement; easy integration with external libraries, test runners,\nand modular builds.\n\nIn particular, Dune uniformly handles components regardless whether\nthey live in, or out-of-tree. This greatly simplifies cases where a\nplugin [or CoqIde] is checked out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can thus be used as a\nmore flexible `coq_makefile` replacement.\n\nFor now we provide experimental support for a Dune build. In order to\nbuild Coq + the standard library with Dune type:\n\n```\n$ make -f Makefile.dune world\n```\n\nThis PR includes a preliminary, developer-only preview of Dune for\nCoq. There is still ongoing work, see\nhttps://github.com/coq/coq/issues/8052 for tracking status towards\nfull support.\n\n## Technical description.\n\nDune works out of the box with Coq, once we have fixed some modularity\nissues. The main remaining challenge was to support `.vo` files.\n\nAs Dune doesn't support custom build rules yet, to properly build\n`.vo` files we provide a small helper script `tools/coq_dune.ml`. The\nscript will scan the Coq library directories and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript uses `coqdep` as to correctly output the dependencies of\n`.v` files. `coq_dune` is akin to `coq_makefile` and should be able to\nbe used to build Coq projects in the future.\n\nDue to this pitfall, the build process has to proceed in three stages:\n1) build `coqdep` and `coq_dune`; 2) generate `dune` files for\n`theories` and `plugins`; 3) perform a regular build with all\ntargets are in scope.\n\n## FAQ\n\n### Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas `opam`, `ocamlfind` or `odoc`. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there has been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative, OCaml-specific build tool that is on\nthe path to become the standard build system for the OCaml ecosystem.\n\nDune seems to be a good fit for Coq well: it is well-supported, fast,\ncompositional, and designed for large projects.\n\n### Does Dune replace the make-based build system?\n\nThe current, make-based build system is unmodified by this PR and kept\nas the default option. However, Dune has the potential\n\n### Is this PR complete? What does it provide?\n\nThis PR is ready for developer preview and feedback. The build system\nis functional, however, more work is necessary in order to make Dune\nthe default for Coq.\n\nThe main TODOs are tracked at https://github.com/coq/coq/issues/8052\n\nThis PR allows developers to use most of the features of Dune today:\n\n- Modular organization of the codebase; each component is built only\n  against declared dependencies so components are checked for\n  containment more strictly.\n- Hygienic builds; Dune places all artifacts under `_build`.\n- Automatic generation of `.install` files, simplified OPAM workflow.\n- `utop` support, `-opaque` in developer mode, etc...\n- `ml4` files are handled using `coqp5`, a native-code customized\n  camlp5 executable which brings much faster `ml4 -> ml` processing.\n\n### What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n### Some Benchs:\n\n```\n$ /usr/bin/time make DUNEOPT=\"-j 1000\" -f Makefile.dune states\n59.50user 18.81system 0:29.83elapsed 262%CPU (0avgtext+0avgdata 302996maxresident)k\n0inputs+646632outputs (0major+4893811minor)pagefaults 0swaps\n\n$ /usr/bin/time sh -c \"./configure -local -native-compiler no && make -j states\"\n88.21user 23.65system 0:32.96elapsed 339%CPU (0avgtext+0avgdata 304992maxresident)k\n0inputs+1051680outputs (0major+5300680minor)pagefaults 0swaps\n```\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-09-04T14:58:04.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/200f80ef5f73f92e031e760279e18ad18d4348bf"},"pipeline":{"id":29367552,"iid":2929,"project_id":6138686,"sha":"200f80ef5f73f92e031e760279e18ad18d4348bf","ref":"pr-6857","status":"canceled","source":"push","created_at":"2018-09-04T12:58:46.873Z","updated_at":"2018-09-04T13:06:50.102Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/29367552"},"web_url":"https://gitlab.com/coq/coq/-/jobs/94511649","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":94511648,"status":"canceled","stage":"test","name":"validate:edge","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-04T12:58:47.401Z","started_at":null,"finished_at":"2018-09-04T13:06:49.506Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"200f80ef5f73f92e031e760279e18ad18d4348bf","short_id":"200f80ef","created_at":"2018-09-04T14:58:04.000+02:00","parent_ids":["2a458c05b491ebb422e48e551b5ed41eb3ef986e"],"title":"[build] Preliminary support for building Coq with `dune`.","message":"[build] Preliminary support for building Coq with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides automatic generation of\n`version.ml`, `.merlin`, `META`, `opam`, API documentation; install\nmanagement; easy integration with external libraries, test runners,\nand modular builds.\n\nIn particular, Dune uniformly handles components regardless whether\nthey live in, or out-of-tree. This greatly simplifies cases where a\nplugin [or CoqIde] is checked out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can thus be used as a\nmore flexible `coq_makefile` replacement.\n\nFor now we provide experimental support for a Dune build. In order to\nbuild Coq + the standard library with Dune type:\n\n```\n$ make -f Makefile.dune world\n```\n\nThis PR includes a preliminary, developer-only preview of Dune for\nCoq. There is still ongoing work, see\nhttps://github.com/coq/coq/issues/8052 for tracking status towards\nfull support.\n\n## Technical description.\n\nDune works out of the box with Coq, once we have fixed some modularity\nissues. The main remaining challenge was to support `.vo` files.\n\nAs Dune doesn't support custom build rules yet, to properly build\n`.vo` files we provide a small helper script `tools/coq_dune.ml`. The\nscript will scan the Coq library directories and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript uses `coqdep` as to correctly output the dependencies of\n`.v` files. `coq_dune` is akin to `coq_makefile` and should be able to\nbe used to build Coq projects in the future.\n\nDue to this pitfall, the build process has to proceed in three stages:\n1) build `coqdep` and `coq_dune`; 2) generate `dune` files for\n`theories` and `plugins`; 3) perform a regular build with all\ntargets are in scope.\n\n## FAQ\n\n### Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas `opam`, `ocamlfind` or `odoc`. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there has been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative, OCaml-specific build tool that is on\nthe path to become the standard build system for the OCaml ecosystem.\n\nDune seems to be a good fit for Coq well: it is well-supported, fast,\ncompositional, and designed for large projects.\n\n### Does Dune replace the make-based build system?\n\nThe current, make-based build system is unmodified by this PR and kept\nas the default option. However, Dune has the potential\n\n### Is this PR complete? What does it provide?\n\nThis PR is ready for developer preview and feedback. The build system\nis functional, however, more work is necessary in order to make Dune\nthe default for Coq.\n\nThe main TODOs are tracked at https://github.com/coq/coq/issues/8052\n\nThis PR allows developers to use most of the features of Dune today:\n\n- Modular organization of the codebase; each component is built only\n  against declared dependencies so components are checked for\n  containment more strictly.\n- Hygienic builds; Dune places all artifacts under `_build`.\n- Automatic generation of `.install` files, simplified OPAM workflow.\n- `utop` support, `-opaque` in developer mode, etc...\n- `ml4` files are handled using `coqp5`, a native-code customized\n  camlp5 executable which brings much faster `ml4 -> ml` processing.\n\n### What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n### Some Benchs:\n\n```\n$ /usr/bin/time make DUNEOPT=\"-j 1000\" -f Makefile.dune states\n59.50user 18.81system 0:29.83elapsed 262%CPU (0avgtext+0avgdata 302996maxresident)k\n0inputs+646632outputs (0major+4893811minor)pagefaults 0swaps\n\n$ /usr/bin/time sh -c \"./configure -local -native-compiler no && make -j states\"\n88.21user 23.65system 0:32.96elapsed 339%CPU (0avgtext+0avgdata 304992maxresident)k\n0inputs+1051680outputs (0major+5300680minor)pagefaults 0swaps\n```\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-09-04T14:58:04.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/200f80ef5f73f92e031e760279e18ad18d4348bf"},"pipeline":{"id":29367552,"iid":2929,"project_id":6138686,"sha":"200f80ef5f73f92e031e760279e18ad18d4348bf","ref":"pr-6857","status":"canceled","source":"push","created_at":"2018-09-04T12:58:46.873Z","updated_at":"2018-09-04T13:06:50.102Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/29367552"},"web_url":"https://gitlab.com/coq/coq/-/jobs/94511648","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":94511647,"status":"canceled","stage":"test","name":"validate:base+32bit","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-04T12:58:47.369Z","started_at":null,"finished_at":"2018-09-04T13:06:49.487Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"200f80ef5f73f92e031e760279e18ad18d4348bf","short_id":"200f80ef","created_at":"2018-09-04T14:58:04.000+02:00","parent_ids":["2a458c05b491ebb422e48e551b5ed41eb3ef986e"],"title":"[build] Preliminary support for building Coq with `dune`.","message":"[build] Preliminary support for building Coq with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides automatic generation of\n`version.ml`, `.merlin`, `META`, `opam`, API documentation; install\nmanagement; easy integration with external libraries, test runners,\nand modular builds.\n\nIn particular, Dune uniformly handles components regardless whether\nthey live in, or out-of-tree. This greatly simplifies cases where a\nplugin [or CoqIde] is checked out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can thus be used as a\nmore flexible `coq_makefile` replacement.\n\nFor now we provide experimental support for a Dune build. In order to\nbuild Coq + the standard library with Dune type:\n\n```\n$ make -f Makefile.dune world\n```\n\nThis PR includes a preliminary, developer-only preview of Dune for\nCoq. There is still ongoing work, see\nhttps://github.com/coq/coq/issues/8052 for tracking status towards\nfull support.\n\n## Technical description.\n\nDune works out of the box with Coq, once we have fixed some modularity\nissues. The main remaining challenge was to support `.vo` files.\n\nAs Dune doesn't support custom build rules yet, to properly build\n`.vo` files we provide a small helper script `tools/coq_dune.ml`. The\nscript will scan the Coq library directories and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript uses `coqdep` as to correctly output the dependencies of\n`.v` files. `coq_dune` is akin to `coq_makefile` and should be able to\nbe used to build Coq projects in the future.\n\nDue to this pitfall, the build process has to proceed in three stages:\n1) build `coqdep` and `coq_dune`; 2) generate `dune` files for\n`theories` and `plugins`; 3) perform a regular build with all\ntargets are in scope.\n\n## FAQ\n\n### Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas `opam`, `ocamlfind` or `odoc`. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there has been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative, OCaml-specific build tool that is on\nthe path to become the standard build system for the OCaml ecosystem.\n\nDune seems to be a good fit for Coq well: it is well-supported, fast,\ncompositional, and designed for large projects.\n\n### Does Dune replace the make-based build system?\n\nThe current, make-based build system is unmodified by this PR and kept\nas the default option. However, Dune has the potential\n\n### Is this PR complete? What does it provide?\n\nThis PR is ready for developer preview and feedback. The build system\nis functional, however, more work is necessary in order to make Dune\nthe default for Coq.\n\nThe main TODOs are tracked at https://github.com/coq/coq/issues/8052\n\nThis PR allows developers to use most of the features of Dune today:\n\n- Modular organization of the codebase; each component is built only\n  against declared dependencies so components are checked for\n  containment more strictly.\n- Hygienic builds; Dune places all artifacts under `_build`.\n- Automatic generation of `.install` files, simplified OPAM workflow.\n- `utop` support, `-opaque` in developer mode, etc...\n- `ml4` files are handled using `coqp5`, a native-code customized\n  camlp5 executable which brings much faster `ml4 -> ml` processing.\n\n### What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n### Some Benchs:\n\n```\n$ /usr/bin/time make DUNEOPT=\"-j 1000\" -f Makefile.dune states\n59.50user 18.81system 0:29.83elapsed 262%CPU (0avgtext+0avgdata 302996maxresident)k\n0inputs+646632outputs (0major+4893811minor)pagefaults 0swaps\n\n$ /usr/bin/time sh -c \"./configure -local -native-compiler no && make -j states\"\n88.21user 23.65system 0:32.96elapsed 339%CPU (0avgtext+0avgdata 304992maxresident)k\n0inputs+1051680outputs (0major+5300680minor)pagefaults 0swaps\n```\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-09-04T14:58:04.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/200f80ef5f73f92e031e760279e18ad18d4348bf"},"pipeline":{"id":29367552,"iid":2929,"project_id":6138686,"sha":"200f80ef5f73f92e031e760279e18ad18d4348bf","ref":"pr-6857","status":"canceled","source":"push","created_at":"2018-09-04T12:58:46.873Z","updated_at":"2018-09-04T13:06:50.102Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/29367552"},"web_url":"https://gitlab.com/coq/coq/-/jobs/94511647","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":94511646,"status":"canceled","stage":"test","name":"validate:base","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-04T12:58:47.329Z","started_at":null,"finished_at":"2018-09-04T13:06:49.471Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"200f80ef5f73f92e031e760279e18ad18d4348bf","short_id":"200f80ef","created_at":"2018-09-04T14:58:04.000+02:00","parent_ids":["2a458c05b491ebb422e48e551b5ed41eb3ef986e"],"title":"[build] Preliminary support for building Coq with `dune`.","message":"[build] Preliminary support for building Coq with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides automatic generation of\n`version.ml`, `.merlin`, `META`, `opam`, API documentation; install\nmanagement; easy integration with external libraries, test runners,\nand modular builds.\n\nIn particular, Dune uniformly handles components regardless whether\nthey live in, or out-of-tree. This greatly simplifies cases where a\nplugin [or CoqIde] is checked out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can thus be used as a\nmore flexible `coq_makefile` replacement.\n\nFor now we provide experimental support for a Dune build. In order to\nbuild Coq + the standard library with Dune type:\n\n```\n$ make -f Makefile.dune world\n```\n\nThis PR includes a preliminary, developer-only preview of Dune for\nCoq. There is still ongoing work, see\nhttps://github.com/coq/coq/issues/8052 for tracking status towards\nfull support.\n\n## Technical description.\n\nDune works out of the box with Coq, once we have fixed some modularity\nissues. The main remaining challenge was to support `.vo` files.\n\nAs Dune doesn't support custom build rules yet, to properly build\n`.vo` files we provide a small helper script `tools/coq_dune.ml`. The\nscript will scan the Coq library directories and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript uses `coqdep` as to correctly output the dependencies of\n`.v` files. `coq_dune` is akin to `coq_makefile` and should be able to\nbe used to build Coq projects in the future.\n\nDue to this pitfall, the build process has to proceed in three stages:\n1) build `coqdep` and `coq_dune`; 2) generate `dune` files for\n`theories` and `plugins`; 3) perform a regular build with all\ntargets are in scope.\n\n## FAQ\n\n### Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas `opam`, `ocamlfind` or `odoc`. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there has been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative, OCaml-specific build tool that is on\nthe path to become the standard build system for the OCaml ecosystem.\n\nDune seems to be a good fit for Coq well: it is well-supported, fast,\ncompositional, and designed for large projects.\n\n### Does Dune replace the make-based build system?\n\nThe current, make-based build system is unmodified by this PR and kept\nas the default option. However, Dune has the potential\n\n### Is this PR complete? What does it provide?\n\nThis PR is ready for developer preview and feedback. The build system\nis functional, however, more work is necessary in order to make Dune\nthe default for Coq.\n\nThe main TODOs are tracked at https://github.com/coq/coq/issues/8052\n\nThis PR allows developers to use most of the features of Dune today:\n\n- Modular organization of the codebase; each component is built only\n  against declared dependencies so components are checked for\n  containment more strictly.\n- Hygienic builds; Dune places all artifacts under `_build`.\n- Automatic generation of `.install` files, simplified OPAM workflow.\n- `utop` support, `-opaque` in developer mode, etc...\n- `ml4` files are handled using `coqp5`, a native-code customized\n  camlp5 executable which brings much faster `ml4 -> ml` processing.\n\n### What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n### Some Benchs:\n\n```\n$ /usr/bin/time make DUNEOPT=\"-j 1000\" -f Makefile.dune states\n59.50user 18.81system 0:29.83elapsed 262%CPU (0avgtext+0avgdata 302996maxresident)k\n0inputs+646632outputs (0major+4893811minor)pagefaults 0swaps\n\n$ /usr/bin/time sh -c \"./configure -local -native-compiler no && make -j states\"\n88.21user 23.65system 0:32.96elapsed 339%CPU (0avgtext+0avgdata 304992maxresident)k\n0inputs+1051680outputs (0major+5300680minor)pagefaults 0swaps\n```\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-09-04T14:58:04.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/200f80ef5f73f92e031e760279e18ad18d4348bf"},"pipeline":{"id":29367552,"iid":2929,"project_id":6138686,"sha":"200f80ef5f73f92e031e760279e18ad18d4348bf","ref":"pr-6857","status":"canceled","source":"push","created_at":"2018-09-04T12:58:46.873Z","updated_at":"2018-09-04T13:06:50.102Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/29367552"},"web_url":"https://gitlab.com/coq/coq/-/jobs/94511646","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":94511645,"status":"canceled","stage":"test","name":"test-suite:edge+flambda","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-04T12:58:47.269Z","started_at":null,"finished_at":"2018-09-04T13:06:49.454Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"200f80ef5f73f92e031e760279e18ad18d4348bf","short_id":"200f80ef","created_at":"2018-09-04T14:58:04.000+02:00","parent_ids":["2a458c05b491ebb422e48e551b5ed41eb3ef986e"],"title":"[build] Preliminary support for building Coq with `dune`.","message":"[build] Preliminary support for building Coq with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides automatic generation of\n`version.ml`, `.merlin`, `META`, `opam`, API documentation; install\nmanagement; easy integration with external libraries, test runners,\nand modular builds.\n\nIn particular, Dune uniformly handles components regardless whether\nthey live in, or out-of-tree. This greatly simplifies cases where a\nplugin [or CoqIde] is checked out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can thus be used as a\nmore flexible `coq_makefile` replacement.\n\nFor now we provide experimental support for a Dune build. In order to\nbuild Coq + the standard library with Dune type:\n\n```\n$ make -f Makefile.dune world\n```\n\nThis PR includes a preliminary, developer-only preview of Dune for\nCoq. There is still ongoing work, see\nhttps://github.com/coq/coq/issues/8052 for tracking status towards\nfull support.\n\n## Technical description.\n\nDune works out of the box with Coq, once we have fixed some modularity\nissues. The main remaining challenge was to support `.vo` files.\n\nAs Dune doesn't support custom build rules yet, to properly build\n`.vo` files we provide a small helper script `tools/coq_dune.ml`. The\nscript will scan the Coq library directories and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript uses `coqdep` as to correctly output the dependencies of\n`.v` files. `coq_dune` is akin to `coq_makefile` and should be able to\nbe used to build Coq projects in the future.\n\nDue to this pitfall, the build process has to proceed in three stages:\n1) build `coqdep` and `coq_dune`; 2) generate `dune` files for\n`theories` and `plugins`; 3) perform a regular build with all\ntargets are in scope.\n\n## FAQ\n\n### Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas `opam`, `ocamlfind` or `odoc`. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there has been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative, OCaml-specific build tool that is on\nthe path to become the standard build system for the OCaml ecosystem.\n\nDune seems to be a good fit for Coq well: it is well-supported, fast,\ncompositional, and designed for large projects.\n\n### Does Dune replace the make-based build system?\n\nThe current, make-based build system is unmodified by this PR and kept\nas the default option. However, Dune has the potential\n\n### Is this PR complete? What does it provide?\n\nThis PR is ready for developer preview and feedback. The build system\nis functional, however, more work is necessary in order to make Dune\nthe default for Coq.\n\nThe main TODOs are tracked at https://github.com/coq/coq/issues/8052\n\nThis PR allows developers to use most of the features of Dune today:\n\n- Modular organization of the codebase; each component is built only\n  against declared dependencies so components are checked for\n  containment more strictly.\n- Hygienic builds; Dune places all artifacts under `_build`.\n- Automatic generation of `.install` files, simplified OPAM workflow.\n- `utop` support, `-opaque` in developer mode, etc...\n- `ml4` files are handled using `coqp5`, a native-code customized\n  camlp5 executable which brings much faster `ml4 -> ml` processing.\n\n### What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n### Some Benchs:\n\n```\n$ /usr/bin/time make DUNEOPT=\"-j 1000\" -f Makefile.dune states\n59.50user 18.81system 0:29.83elapsed 262%CPU (0avgtext+0avgdata 302996maxresident)k\n0inputs+646632outputs (0major+4893811minor)pagefaults 0swaps\n\n$ /usr/bin/time sh -c \"./configure -local -native-compiler no && make -j states\"\n88.21user 23.65system 0:32.96elapsed 339%CPU (0avgtext+0avgdata 304992maxresident)k\n0inputs+1051680outputs (0major+5300680minor)pagefaults 0swaps\n```\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-09-04T14:58:04.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/200f80ef5f73f92e031e760279e18ad18d4348bf"},"pipeline":{"id":29367552,"iid":2929,"project_id":6138686,"sha":"200f80ef5f73f92e031e760279e18ad18d4348bf","ref":"pr-6857","status":"canceled","source":"push","created_at":"2018-09-04T12:58:46.873Z","updated_at":"2018-09-04T13:06:50.102Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/29367552"},"web_url":"https://gitlab.com/coq/coq/-/jobs/94511645","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":94511644,"status":"canceled","stage":"test","name":"test-suite:edge","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-04T12:58:47.239Z","started_at":null,"finished_at":"2018-09-04T13:06:49.435Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"200f80ef5f73f92e031e760279e18ad18d4348bf","short_id":"200f80ef","created_at":"2018-09-04T14:58:04.000+02:00","parent_ids":["2a458c05b491ebb422e48e551b5ed41eb3ef986e"],"title":"[build] Preliminary support for building Coq with `dune`.","message":"[build] Preliminary support for building Coq with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides automatic generation of\n`version.ml`, `.merlin`, `META`, `opam`, API documentation; install\nmanagement; easy integration with external libraries, test runners,\nand modular builds.\n\nIn particular, Dune uniformly handles components regardless whether\nthey live in, or out-of-tree. This greatly simplifies cases where a\nplugin [or CoqIde] is checked out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can thus be used as a\nmore flexible `coq_makefile` replacement.\n\nFor now we provide experimental support for a Dune build. In order to\nbuild Coq + the standard library with Dune type:\n\n```\n$ make -f Makefile.dune world\n```\n\nThis PR includes a preliminary, developer-only preview of Dune for\nCoq. There is still ongoing work, see\nhttps://github.com/coq/coq/issues/8052 for tracking status towards\nfull support.\n\n## Technical description.\n\nDune works out of the box with Coq, once we have fixed some modularity\nissues. The main remaining challenge was to support `.vo` files.\n\nAs Dune doesn't support custom build rules yet, to properly build\n`.vo` files we provide a small helper script `tools/coq_dune.ml`. The\nscript will scan the Coq library directories and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript uses `coqdep` as to correctly output the dependencies of\n`.v` files. `coq_dune` is akin to `coq_makefile` and should be able to\nbe used to build Coq projects in the future.\n\nDue to this pitfall, the build process has to proceed in three stages:\n1) build `coqdep` and `coq_dune`; 2) generate `dune` files for\n`theories` and `plugins`; 3) perform a regular build with all\ntargets are in scope.\n\n## FAQ\n\n### Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas `opam`, `ocamlfind` or `odoc`. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there has been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative, OCaml-specific build tool that is on\nthe path to become the standard build system for the OCaml ecosystem.\n\nDune seems to be a good fit for Coq well: it is well-supported, fast,\ncompositional, and designed for large projects.\n\n### Does Dune replace the make-based build system?\n\nThe current, make-based build system is unmodified by this PR and kept\nas the default option. However, Dune has the potential\n\n### Is this PR complete? What does it provide?\n\nThis PR is ready for developer preview and feedback. The build system\nis functional, however, more work is necessary in order to make Dune\nthe default for Coq.\n\nThe main TODOs are tracked at https://github.com/coq/coq/issues/8052\n\nThis PR allows developers to use most of the features of Dune today:\n\n- Modular organization of the codebase; each component is built only\n  against declared dependencies so components are checked for\n  containment more strictly.\n- Hygienic builds; Dune places all artifacts under `_build`.\n- Automatic generation of `.install` files, simplified OPAM workflow.\n- `utop` support, `-opaque` in developer mode, etc...\n- `ml4` files are handled using `coqp5`, a native-code customized\n  camlp5 executable which brings much faster `ml4 -> ml` processing.\n\n### What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n### Some Benchs:\n\n```\n$ /usr/bin/time make DUNEOPT=\"-j 1000\" -f Makefile.dune states\n59.50user 18.81system 0:29.83elapsed 262%CPU (0avgtext+0avgdata 302996maxresident)k\n0inputs+646632outputs (0major+4893811minor)pagefaults 0swaps\n\n$ /usr/bin/time sh -c \"./configure -local -native-compiler no && make -j states\"\n88.21user 23.65system 0:32.96elapsed 339%CPU (0avgtext+0avgdata 304992maxresident)k\n0inputs+1051680outputs (0major+5300680minor)pagefaults 0swaps\n```\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-09-04T14:58:04.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/200f80ef5f73f92e031e760279e18ad18d4348bf"},"pipeline":{"id":29367552,"iid":2929,"project_id":6138686,"sha":"200f80ef5f73f92e031e760279e18ad18d4348bf","ref":"pr-6857","status":"canceled","source":"push","created_at":"2018-09-04T12:58:46.873Z","updated_at":"2018-09-04T13:06:50.102Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/29367552"},"web_url":"https://gitlab.com/coq/coq/-/jobs/94511644","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":94511643,"status":"canceled","stage":"test","name":"test-suite:base+32bit","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-04T12:58:47.209Z","started_at":null,"finished_at":"2018-09-04T13:06:49.414Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"200f80ef5f73f92e031e760279e18ad18d4348bf","short_id":"200f80ef","created_at":"2018-09-04T14:58:04.000+02:00","parent_ids":["2a458c05b491ebb422e48e551b5ed41eb3ef986e"],"title":"[build] Preliminary support for building Coq with `dune`.","message":"[build] Preliminary support for building Coq with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides automatic generation of\n`version.ml`, `.merlin`, `META`, `opam`, API documentation; install\nmanagement; easy integration with external libraries, test runners,\nand modular builds.\n\nIn particular, Dune uniformly handles components regardless whether\nthey live in, or out-of-tree. This greatly simplifies cases where a\nplugin [or CoqIde] is checked out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can thus be used as a\nmore flexible `coq_makefile` replacement.\n\nFor now we provide experimental support for a Dune build. In order to\nbuild Coq + the standard library with Dune type:\n\n```\n$ make -f Makefile.dune world\n```\n\nThis PR includes a preliminary, developer-only preview of Dune for\nCoq. There is still ongoing work, see\nhttps://github.com/coq/coq/issues/8052 for tracking status towards\nfull support.\n\n## Technical description.\n\nDune works out of the box with Coq, once we have fixed some modularity\nissues. The main remaining challenge was to support `.vo` files.\n\nAs Dune doesn't support custom build rules yet, to properly build\n`.vo` files we provide a small helper script `tools/coq_dune.ml`. The\nscript will scan the Coq library directories and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript uses `coqdep` as to correctly output the dependencies of\n`.v` files. `coq_dune` is akin to `coq_makefile` and should be able to\nbe used to build Coq projects in the future.\n\nDue to this pitfall, the build process has to proceed in three stages:\n1) build `coqdep` and `coq_dune`; 2) generate `dune` files for\n`theories` and `plugins`; 3) perform a regular build with all\ntargets are in scope.\n\n## FAQ\n\n### Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas `opam`, `ocamlfind` or `odoc`. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there has been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative, OCaml-specific build tool that is on\nthe path to become the standard build system for the OCaml ecosystem.\n\nDune seems to be a good fit for Coq well: it is well-supported, fast,\ncompositional, and designed for large projects.\n\n### Does Dune replace the make-based build system?\n\nThe current, make-based build system is unmodified by this PR and kept\nas the default option. However, Dune has the potential\n\n### Is this PR complete? What does it provide?\n\nThis PR is ready for developer preview and feedback. The build system\nis functional, however, more work is necessary in order to make Dune\nthe default for Coq.\n\nThe main TODOs are tracked at https://github.com/coq/coq/issues/8052\n\nThis PR allows developers to use most of the features of Dune today:\n\n- Modular organization of the codebase; each component is built only\n  against declared dependencies so components are checked for\n  containment more strictly.\n- Hygienic builds; Dune places all artifacts under `_build`.\n- Automatic generation of `.install` files, simplified OPAM workflow.\n- `utop` support, `-opaque` in developer mode, etc...\n- `ml4` files are handled using `coqp5`, a native-code customized\n  camlp5 executable which brings much faster `ml4 -> ml` processing.\n\n### What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n### Some Benchs:\n\n```\n$ /usr/bin/time make DUNEOPT=\"-j 1000\" -f Makefile.dune states\n59.50user 18.81system 0:29.83elapsed 262%CPU (0avgtext+0avgdata 302996maxresident)k\n0inputs+646632outputs (0major+4893811minor)pagefaults 0swaps\n\n$ /usr/bin/time sh -c \"./configure -local -native-compiler no && make -j states\"\n88.21user 23.65system 0:32.96elapsed 339%CPU (0avgtext+0avgdata 304992maxresident)k\n0inputs+1051680outputs (0major+5300680minor)pagefaults 0swaps\n```\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-09-04T14:58:04.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/200f80ef5f73f92e031e760279e18ad18d4348bf"},"pipeline":{"id":29367552,"iid":2929,"project_id":6138686,"sha":"200f80ef5f73f92e031e760279e18ad18d4348bf","ref":"pr-6857","status":"canceled","source":"push","created_at":"2018-09-04T12:58:46.873Z","updated_at":"2018-09-04T13:06:50.102Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/29367552"},"web_url":"https://gitlab.com/coq/coq/-/jobs/94511643","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":94511642,"status":"canceled","stage":"test","name":"test-suite:base","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-04T12:58:47.185Z","started_at":null,"finished_at":"2018-09-04T13:06:49.347Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"200f80ef5f73f92e031e760279e18ad18d4348bf","short_id":"200f80ef","created_at":"2018-09-04T14:58:04.000+02:00","parent_ids":["2a458c05b491ebb422e48e551b5ed41eb3ef986e"],"title":"[build] Preliminary support for building Coq with `dune`.","message":"[build] Preliminary support for building Coq with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides automatic generation of\n`version.ml`, `.merlin`, `META`, `opam`, API documentation; install\nmanagement; easy integration with external libraries, test runners,\nand modular builds.\n\nIn particular, Dune uniformly handles components regardless whether\nthey live in, or out-of-tree. This greatly simplifies cases where a\nplugin [or CoqIde] is checked out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can thus be used as a\nmore flexible `coq_makefile` replacement.\n\nFor now we provide experimental support for a Dune build. In order to\nbuild Coq + the standard library with Dune type:\n\n```\n$ make -f Makefile.dune world\n```\n\nThis PR includes a preliminary, developer-only preview of Dune for\nCoq. There is still ongoing work, see\nhttps://github.com/coq/coq/issues/8052 for tracking status towards\nfull support.\n\n## Technical description.\n\nDune works out of the box with Coq, once we have fixed some modularity\nissues. The main remaining challenge was to support `.vo` files.\n\nAs Dune doesn't support custom build rules yet, to properly build\n`.vo` files we provide a small helper script `tools/coq_dune.ml`. The\nscript will scan the Coq library directories and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript uses `coqdep` as to correctly output the dependencies of\n`.v` files. `coq_dune` is akin to `coq_makefile` and should be able to\nbe used to build Coq projects in the future.\n\nDue to this pitfall, the build process has to proceed in three stages:\n1) build `coqdep` and `coq_dune`; 2) generate `dune` files for\n`theories` and `plugins`; 3) perform a regular build with all\ntargets are in scope.\n\n## FAQ\n\n### Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas `opam`, `ocamlfind` or `odoc`. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there has been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative, OCaml-specific build tool that is on\nthe path to become the standard build system for the OCaml ecosystem.\n\nDune seems to be a good fit for Coq well: it is well-supported, fast,\ncompositional, and designed for large projects.\n\n### Does Dune replace the make-based build system?\n\nThe current, make-based build system is unmodified by this PR and kept\nas the default option. However, Dune has the potential\n\n### Is this PR complete? What does it provide?\n\nThis PR is ready for developer preview and feedback. The build system\nis functional, however, more work is necessary in order to make Dune\nthe default for Coq.\n\nThe main TODOs are tracked at https://github.com/coq/coq/issues/8052\n\nThis PR allows developers to use most of the features of Dune today:\n\n- Modular organization of the codebase; each component is built only\n  against declared dependencies so components are checked for\n  containment more strictly.\n- Hygienic builds; Dune places all artifacts under `_build`.\n- Automatic generation of `.install` files, simplified OPAM workflow.\n- `utop` support, `-opaque` in developer mode, etc...\n- `ml4` files are handled using `coqp5`, a native-code customized\n  camlp5 executable which brings much faster `ml4 -> ml` processing.\n\n### What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n### Some Benchs:\n\n```\n$ /usr/bin/time make DUNEOPT=\"-j 1000\" -f Makefile.dune states\n59.50user 18.81system 0:29.83elapsed 262%CPU (0avgtext+0avgdata 302996maxresident)k\n0inputs+646632outputs (0major+4893811minor)pagefaults 0swaps\n\n$ /usr/bin/time sh -c \"./configure -local -native-compiler no && make -j states\"\n88.21user 23.65system 0:32.96elapsed 339%CPU (0avgtext+0avgdata 304992maxresident)k\n0inputs+1051680outputs (0major+5300680minor)pagefaults 0swaps\n```\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-09-04T14:58:04.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/200f80ef5f73f92e031e760279e18ad18d4348bf"},"pipeline":{"id":29367552,"iid":2929,"project_id":6138686,"sha":"200f80ef5f73f92e031e760279e18ad18d4348bf","ref":"pr-6857","status":"canceled","source":"push","created_at":"2018-09-04T12:58:46.873Z","updated_at":"2018-09-04T13:06:50.102Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/29367552"},"web_url":"https://gitlab.com/coq/coq/-/jobs/94511642","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":94511641,"status":"canceled","stage":"test","name":"doc:ml-api","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-04T12:58:47.155Z","started_at":null,"finished_at":"2018-09-04T13:06:49.326Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"200f80ef5f73f92e031e760279e18ad18d4348bf","short_id":"200f80ef","created_at":"2018-09-04T14:58:04.000+02:00","parent_ids":["2a458c05b491ebb422e48e551b5ed41eb3ef986e"],"title":"[build] Preliminary support for building Coq with `dune`.","message":"[build] Preliminary support for building Coq with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides automatic generation of\n`version.ml`, `.merlin`, `META`, `opam`, API documentation; install\nmanagement; easy integration with external libraries, test runners,\nand modular builds.\n\nIn particular, Dune uniformly handles components regardless whether\nthey live in, or out-of-tree. This greatly simplifies cases where a\nplugin [or CoqIde] is checked out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can thus be used as a\nmore flexible `coq_makefile` replacement.\n\nFor now we provide experimental support for a Dune build. In order to\nbuild Coq + the standard library with Dune type:\n\n```\n$ make -f Makefile.dune world\n```\n\nThis PR includes a preliminary, developer-only preview of Dune for\nCoq. There is still ongoing work, see\nhttps://github.com/coq/coq/issues/8052 for tracking status towards\nfull support.\n\n## Technical description.\n\nDune works out of the box with Coq, once we have fixed some modularity\nissues. The main remaining challenge was to support `.vo` files.\n\nAs Dune doesn't support custom build rules yet, to properly build\n`.vo` files we provide a small helper script `tools/coq_dune.ml`. The\nscript will scan the Coq library directories and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript uses `coqdep` as to correctly output the dependencies of\n`.v` files. `coq_dune` is akin to `coq_makefile` and should be able to\nbe used to build Coq projects in the future.\n\nDue to this pitfall, the build process has to proceed in three stages:\n1) build `coqdep` and `coq_dune`; 2) generate `dune` files for\n`theories` and `plugins`; 3) perform a regular build with all\ntargets are in scope.\n\n## FAQ\n\n### Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas `opam`, `ocamlfind` or `odoc`. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there has been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative, OCaml-specific build tool that is on\nthe path to become the standard build system for the OCaml ecosystem.\n\nDune seems to be a good fit for Coq well: it is well-supported, fast,\ncompositional, and designed for large projects.\n\n### Does Dune replace the make-based build system?\n\nThe current, make-based build system is unmodified by this PR and kept\nas the default option. However, Dune has the potential\n\n### Is this PR complete? What does it provide?\n\nThis PR is ready for developer preview and feedback. The build system\nis functional, however, more work is necessary in order to make Dune\nthe default for Coq.\n\nThe main TODOs are tracked at https://github.com/coq/coq/issues/8052\n\nThis PR allows developers to use most of the features of Dune today:\n\n- Modular organization of the codebase; each component is built only\n  against declared dependencies so components are checked for\n  containment more strictly.\n- Hygienic builds; Dune places all artifacts under `_build`.\n- Automatic generation of `.install` files, simplified OPAM workflow.\n- `utop` support, `-opaque` in developer mode, etc...\n- `ml4` files are handled using `coqp5`, a native-code customized\n  camlp5 executable which brings much faster `ml4 -> ml` processing.\n\n### What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n### Some Benchs:\n\n```\n$ /usr/bin/time make DUNEOPT=\"-j 1000\" -f Makefile.dune states\n59.50user 18.81system 0:29.83elapsed 262%CPU (0avgtext+0avgdata 302996maxresident)k\n0inputs+646632outputs (0major+4893811minor)pagefaults 0swaps\n\n$ /usr/bin/time sh -c \"./configure -local -native-compiler no && make -j states\"\n88.21user 23.65system 0:32.96elapsed 339%CPU (0avgtext+0avgdata 304992maxresident)k\n0inputs+1051680outputs (0major+5300680minor)pagefaults 0swaps\n```\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-09-04T14:58:04.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/200f80ef5f73f92e031e760279e18ad18d4348bf"},"pipeline":{"id":29367552,"iid":2929,"project_id":6138686,"sha":"200f80ef5f73f92e031e760279e18ad18d4348bf","ref":"pr-6857","status":"canceled","source":"push","created_at":"2018-09-04T12:58:46.873Z","updated_at":"2018-09-04T13:06:50.102Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/29367552"},"web_url":"https://gitlab.com/coq/coq/-/jobs/94511641","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":94511638,"status":"canceled","stage":"test","name":"doc:refman","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-04T12:58:47.123Z","started_at":null,"finished_at":"2018-09-04T13:06:49.307Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"200f80ef5f73f92e031e760279e18ad18d4348bf","short_id":"200f80ef","created_at":"2018-09-04T14:58:04.000+02:00","parent_ids":["2a458c05b491ebb422e48e551b5ed41eb3ef986e"],"title":"[build] Preliminary support for building Coq with `dune`.","message":"[build] Preliminary support for building Coq with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides automatic generation of\n`version.ml`, `.merlin`, `META`, `opam`, API documentation; install\nmanagement; easy integration with external libraries, test runners,\nand modular builds.\n\nIn particular, Dune uniformly handles components regardless whether\nthey live in, or out-of-tree. This greatly simplifies cases where a\nplugin [or CoqIde] is checked out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can thus be used as a\nmore flexible `coq_makefile` replacement.\n\nFor now we provide experimental support for a Dune build. In order to\nbuild Coq + the standard library with Dune type:\n\n```\n$ make -f Makefile.dune world\n```\n\nThis PR includes a preliminary, developer-only preview of Dune for\nCoq. There is still ongoing work, see\nhttps://github.com/coq/coq/issues/8052 for tracking status towards\nfull support.\n\n## Technical description.\n\nDune works out of the box with Coq, once we have fixed some modularity\nissues. The main remaining challenge was to support `.vo` files.\n\nAs Dune doesn't support custom build rules yet, to properly build\n`.vo` files we provide a small helper script `tools/coq_dune.ml`. The\nscript will scan the Coq library directories and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript uses `coqdep` as to correctly output the dependencies of\n`.v` files. `coq_dune` is akin to `coq_makefile` and should be able to\nbe used to build Coq projects in the future.\n\nDue to this pitfall, the build process has to proceed in three stages:\n1) build `coqdep` and `coq_dune`; 2) generate `dune` files for\n`theories` and `plugins`; 3) perform a regular build with all\ntargets are in scope.\n\n## FAQ\n\n### Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas `opam`, `ocamlfind` or `odoc`. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there has been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative, OCaml-specific build tool that is on\nthe path to become the standard build system for the OCaml ecosystem.\n\nDune seems to be a good fit for Coq well: it is well-supported, fast,\ncompositional, and designed for large projects.\n\n### Does Dune replace the make-based build system?\n\nThe current, make-based build system is unmodified by this PR and kept\nas the default option. However, Dune has the potential\n\n### Is this PR complete? What does it provide?\n\nThis PR is ready for developer preview and feedback. The build system\nis functional, however, more work is necessary in order to make Dune\nthe default for Coq.\n\nThe main TODOs are tracked at https://github.com/coq/coq/issues/8052\n\nThis PR allows developers to use most of the features of Dune today:\n\n- Modular organization of the codebase; each component is built only\n  against declared dependencies so components are checked for\n  containment more strictly.\n- Hygienic builds; Dune places all artifacts under `_build`.\n- Automatic generation of `.install` files, simplified OPAM workflow.\n- `utop` support, `-opaque` in developer mode, etc...\n- `ml4` files are handled using `coqp5`, a native-code customized\n  camlp5 executable which brings much faster `ml4 -> ml` processing.\n\n### What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n### Some Benchs:\n\n```\n$ /usr/bin/time make DUNEOPT=\"-j 1000\" -f Makefile.dune states\n59.50user 18.81system 0:29.83elapsed 262%CPU (0avgtext+0avgdata 302996maxresident)k\n0inputs+646632outputs (0major+4893811minor)pagefaults 0swaps\n\n$ /usr/bin/time sh -c \"./configure -local -native-compiler no && make -j states\"\n88.21user 23.65system 0:32.96elapsed 339%CPU (0avgtext+0avgdata 304992maxresident)k\n0inputs+1051680outputs (0major+5300680minor)pagefaults 0swaps\n```\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-09-04T14:58:04.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/200f80ef5f73f92e031e760279e18ad18d4348bf"},"pipeline":{"id":29367552,"iid":2929,"project_id":6138686,"sha":"200f80ef5f73f92e031e760279e18ad18d4348bf","ref":"pr-6857","status":"canceled","source":"push","created_at":"2018-09-04T12:58:46.873Z","updated_at":"2018-09-04T13:06:50.102Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/29367552"},"web_url":"https://gitlab.com/coq/coq/-/jobs/94511638","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":94511636,"status":"canceled","stage":"test","name":"pkg:nix","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-04T12:58:47.096Z","started_at":null,"finished_at":"2018-09-04T13:06:49.291Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"200f80ef5f73f92e031e760279e18ad18d4348bf","short_id":"200f80ef","created_at":"2018-09-04T14:58:04.000+02:00","parent_ids":["2a458c05b491ebb422e48e551b5ed41eb3ef986e"],"title":"[build] Preliminary support for building Coq with `dune`.","message":"[build] Preliminary support for building Coq with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides automatic generation of\n`version.ml`, `.merlin`, `META`, `opam`, API documentation; install\nmanagement; easy integration with external libraries, test runners,\nand modular builds.\n\nIn particular, Dune uniformly handles components regardless whether\nthey live in, or out-of-tree. This greatly simplifies cases where a\nplugin [or CoqIde] is checked out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can thus be used as a\nmore flexible `coq_makefile` replacement.\n\nFor now we provide experimental support for a Dune build. In order to\nbuild Coq + the standard library with Dune type:\n\n```\n$ make -f Makefile.dune world\n```\n\nThis PR includes a preliminary, developer-only preview of Dune for\nCoq. There is still ongoing work, see\nhttps://github.com/coq/coq/issues/8052 for tracking status towards\nfull support.\n\n## Technical description.\n\nDune works out of the box with Coq, once we have fixed some modularity\nissues. The main remaining challenge was to support `.vo` files.\n\nAs Dune doesn't support custom build rules yet, to properly build\n`.vo` files we provide a small helper script `tools/coq_dune.ml`. The\nscript will scan the Coq library directories and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript uses `coqdep` as to correctly output the dependencies of\n`.v` files. `coq_dune` is akin to `coq_makefile` and should be able to\nbe used to build Coq projects in the future.\n\nDue to this pitfall, the build process has to proceed in three stages:\n1) build `coqdep` and `coq_dune`; 2) generate `dune` files for\n`theories` and `plugins`; 3) perform a regular build with all\ntargets are in scope.\n\n## FAQ\n\n### Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas `opam`, `ocamlfind` or `odoc`. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there has been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative, OCaml-specific build tool that is on\nthe path to become the standard build system for the OCaml ecosystem.\n\nDune seems to be a good fit for Coq well: it is well-supported, fast,\ncompositional, and designed for large projects.\n\n### Does Dune replace the make-based build system?\n\nThe current, make-based build system is unmodified by this PR and kept\nas the default option. However, Dune has the potential\n\n### Is this PR complete? What does it provide?\n\nThis PR is ready for developer preview and feedback. The build system\nis functional, however, more work is necessary in order to make Dune\nthe default for Coq.\n\nThe main TODOs are tracked at https://github.com/coq/coq/issues/8052\n\nThis PR allows developers to use most of the features of Dune today:\n\n- Modular organization of the codebase; each component is built only\n  against declared dependencies so components are checked for\n  containment more strictly.\n- Hygienic builds; Dune places all artifacts under `_build`.\n- Automatic generation of `.install` files, simplified OPAM workflow.\n- `utop` support, `-opaque` in developer mode, etc...\n- `ml4` files are handled using `coqp5`, a native-code customized\n  camlp5 executable which brings much faster `ml4 -> ml` processing.\n\n### What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n### Some Benchs:\n\n```\n$ /usr/bin/time make DUNEOPT=\"-j 1000\" -f Makefile.dune states\n59.50user 18.81system 0:29.83elapsed 262%CPU (0avgtext+0avgdata 302996maxresident)k\n0inputs+646632outputs (0major+4893811minor)pagefaults 0swaps\n\n$ /usr/bin/time sh -c \"./configure -local -native-compiler no && make -j states\"\n88.21user 23.65system 0:32.96elapsed 339%CPU (0avgtext+0avgdata 304992maxresident)k\n0inputs+1051680outputs (0major+5300680minor)pagefaults 0swaps\n```\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-09-04T14:58:04.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/200f80ef5f73f92e031e760279e18ad18d4348bf"},"pipeline":{"id":29367552,"iid":2929,"project_id":6138686,"sha":"200f80ef5f73f92e031e760279e18ad18d4348bf","ref":"pr-6857","status":"canceled","source":"push","created_at":"2018-09-04T12:58:46.873Z","updated_at":"2018-09-04T13:06:50.102Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/29367552"},"web_url":"https://gitlab.com/coq/coq/-/jobs/94511636","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":94511633,"status":"canceled","stage":"test","name":"windows64","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-04T12:58:47.057Z","started_at":null,"finished_at":"2018-09-04T13:06:49.271Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"200f80ef5f73f92e031e760279e18ad18d4348bf","short_id":"200f80ef","created_at":"2018-09-04T14:58:04.000+02:00","parent_ids":["2a458c05b491ebb422e48e551b5ed41eb3ef986e"],"title":"[build] Preliminary support for building Coq with `dune`.","message":"[build] Preliminary support for building Coq with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides automatic generation of\n`version.ml`, `.merlin`, `META`, `opam`, API documentation; install\nmanagement; easy integration with external libraries, test runners,\nand modular builds.\n\nIn particular, Dune uniformly handles components regardless whether\nthey live in, or out-of-tree. This greatly simplifies cases where a\nplugin [or CoqIde] is checked out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can thus be used as a\nmore flexible `coq_makefile` replacement.\n\nFor now we provide experimental support for a Dune build. In order to\nbuild Coq + the standard library with Dune type:\n\n```\n$ make -f Makefile.dune world\n```\n\nThis PR includes a preliminary, developer-only preview of Dune for\nCoq. There is still ongoing work, see\nhttps://github.com/coq/coq/issues/8052 for tracking status towards\nfull support.\n\n## Technical description.\n\nDune works out of the box with Coq, once we have fixed some modularity\nissues. The main remaining challenge was to support `.vo` files.\n\nAs Dune doesn't support custom build rules yet, to properly build\n`.vo` files we provide a small helper script `tools/coq_dune.ml`. The\nscript will scan the Coq library directories and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript uses `coqdep` as to correctly output the dependencies of\n`.v` files. `coq_dune` is akin to `coq_makefile` and should be able to\nbe used to build Coq projects in the future.\n\nDue to this pitfall, the build process has to proceed in three stages:\n1) build `coqdep` and `coq_dune`; 2) generate `dune` files for\n`theories` and `plugins`; 3) perform a regular build with all\ntargets are in scope.\n\n## FAQ\n\n### Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas `opam`, `ocamlfind` or `odoc`. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there has been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative, OCaml-specific build tool that is on\nthe path to become the standard build system for the OCaml ecosystem.\n\nDune seems to be a good fit for Coq well: it is well-supported, fast,\ncompositional, and designed for large projects.\n\n### Does Dune replace the make-based build system?\n\nThe current, make-based build system is unmodified by this PR and kept\nas the default option. However, Dune has the potential\n\n### Is this PR complete? What does it provide?\n\nThis PR is ready for developer preview and feedback. The build system\nis functional, however, more work is necessary in order to make Dune\nthe default for Coq.\n\nThe main TODOs are tracked at https://github.com/coq/coq/issues/8052\n\nThis PR allows developers to use most of the features of Dune today:\n\n- Modular organization of the codebase; each component is built only\n  against declared dependencies so components are checked for\n  containment more strictly.\n- Hygienic builds; Dune places all artifacts under `_build`.\n- Automatic generation of `.install` files, simplified OPAM workflow.\n- `utop` support, `-opaque` in developer mode, etc...\n- `ml4` files are handled using `coqp5`, a native-code customized\n  camlp5 executable which brings much faster `ml4 -> ml` processing.\n\n### What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n### Some Benchs:\n\n```\n$ /usr/bin/time make DUNEOPT=\"-j 1000\" -f Makefile.dune states\n59.50user 18.81system 0:29.83elapsed 262%CPU (0avgtext+0avgdata 302996maxresident)k\n0inputs+646632outputs (0major+4893811minor)pagefaults 0swaps\n\n$ /usr/bin/time sh -c \"./configure -local -native-compiler no && make -j states\"\n88.21user 23.65system 0:32.96elapsed 339%CPU (0avgtext+0avgdata 304992maxresident)k\n0inputs+1051680outputs (0major+5300680minor)pagefaults 0swaps\n```\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-09-04T14:58:04.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/200f80ef5f73f92e031e760279e18ad18d4348bf"},"pipeline":{"id":29367552,"iid":2929,"project_id":6138686,"sha":"200f80ef5f73f92e031e760279e18ad18d4348bf","ref":"pr-6857","status":"canceled","source":"push","created_at":"2018-09-04T12:58:46.873Z","updated_at":"2018-09-04T13:06:50.102Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/29367552"},"web_url":"https://gitlab.com/coq/coq/-/jobs/94511633","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":["windows"]}
{"id":94511629,"status":"canceled","stage":"build","name":"build:egde:dune","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-04T12:58:47.010Z","started_at":"2018-09-04T12:58:53.816Z","finished_at":"2018-09-04T13:06:49.252Z","duration":475.435461,"queued_duration":5.188809,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"200f80ef5f73f92e031e760279e18ad18d4348bf","short_id":"200f80ef","created_at":"2018-09-04T14:58:04.000+02:00","parent_ids":["2a458c05b491ebb422e48e551b5ed41eb3ef986e"],"title":"[build] Preliminary support for building Coq with `dune`.","message":"[build] Preliminary support for building Coq with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides automatic generation of\n`version.ml`, `.merlin`, `META`, `opam`, API documentation; install\nmanagement; easy integration with external libraries, test runners,\nand modular builds.\n\nIn particular, Dune uniformly handles components regardless whether\nthey live in, or out-of-tree. This greatly simplifies cases where a\nplugin [or CoqIde] is checked out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can thus be used as a\nmore flexible `coq_makefile` replacement.\n\nFor now we provide experimental support for a Dune build. In order to\nbuild Coq + the standard library with Dune type:\n\n```\n$ make -f Makefile.dune world\n```\n\nThis PR includes a preliminary, developer-only preview of Dune for\nCoq. There is still ongoing work, see\nhttps://github.com/coq/coq/issues/8052 for tracking status towards\nfull support.\n\n## Technical description.\n\nDune works out of the box with Coq, once we have fixed some modularity\nissues. The main remaining challenge was to support `.vo` files.\n\nAs Dune doesn't support custom build rules yet, to properly build\n`.vo` files we provide a small helper script `tools/coq_dune.ml`. The\nscript will scan the Coq library directories and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript uses `coqdep` as to correctly output the dependencies of\n`.v` files. `coq_dune` is akin to `coq_makefile` and should be able to\nbe used to build Coq projects in the future.\n\nDue to this pitfall, the build process has to proceed in three stages:\n1) build `coqdep` and `coq_dune`; 2) generate `dune` files for\n`theories` and `plugins`; 3) perform a regular build with all\ntargets are in scope.\n\n## FAQ\n\n### Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas `opam`, `ocamlfind` or `odoc`. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there has been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative, OCaml-specific build tool that is on\nthe path to become the standard build system for the OCaml ecosystem.\n\nDune seems to be a good fit for Coq well: it is well-supported, fast,\ncompositional, and designed for large projects.\n\n### Does Dune replace the make-based build system?\n\nThe current, make-based build system is unmodified by this PR and kept\nas the default option. However, Dune has the potential\n\n### Is this PR complete? What does it provide?\n\nThis PR is ready for developer preview and feedback. The build system\nis functional, however, more work is necessary in order to make Dune\nthe default for Coq.\n\nThe main TODOs are tracked at https://github.com/coq/coq/issues/8052\n\nThis PR allows developers to use most of the features of Dune today:\n\n- Modular organization of the codebase; each component is built only\n  against declared dependencies so components are checked for\n  containment more strictly.\n- Hygienic builds; Dune places all artifacts under `_build`.\n- Automatic generation of `.install` files, simplified OPAM workflow.\n- `utop` support, `-opaque` in developer mode, etc...\n- `ml4` files are handled using `coqp5`, a native-code customized\n  camlp5 executable which brings much faster `ml4 -> ml` processing.\n\n### What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n### Some Benchs:\n\n```\n$ /usr/bin/time make DUNEOPT=\"-j 1000\" -f Makefile.dune states\n59.50user 18.81system 0:29.83elapsed 262%CPU (0avgtext+0avgdata 302996maxresident)k\n0inputs+646632outputs (0major+4893811minor)pagefaults 0swaps\n\n$ /usr/bin/time sh -c \"./configure -local -native-compiler no && make -j states\"\n88.21user 23.65system 0:32.96elapsed 339%CPU (0avgtext+0avgdata 304992maxresident)k\n0inputs+1051680outputs (0major+5300680minor)pagefaults 0swaps\n```\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-09-04T14:58:04.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/200f80ef5f73f92e031e760279e18ad18d4348bf"},"pipeline":{"id":29367552,"iid":2929,"project_id":6138686,"sha":"200f80ef5f73f92e031e760279e18ad18d4348bf","ref":"pr-6857","status":"canceled","source":"push","created_at":"2018-09-04T12:58:46.873Z","updated_at":"2018-09-04T13:06:50.102Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/29367552"},"web_url":"https://gitlab.com/coq/coq/-/jobs/94511629","artifacts":[{"file_type":"trace","size":23425,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":94511626,"status":"canceled","stage":"build","name":"build:edge+flambda","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-04T12:58:46.981Z","started_at":"2018-09-04T12:58:53.091Z","finished_at":"2018-09-04T13:06:49.232Z","duration":476.14098,"queued_duration":4.354693,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"200f80ef5f73f92e031e760279e18ad18d4348bf","short_id":"200f80ef","created_at":"2018-09-04T14:58:04.000+02:00","parent_ids":["2a458c05b491ebb422e48e551b5ed41eb3ef986e"],"title":"[build] Preliminary support for building Coq with `dune`.","message":"[build] Preliminary support for building Coq with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides automatic generation of\n`version.ml`, `.merlin`, `META`, `opam`, API documentation; install\nmanagement; easy integration with external libraries, test runners,\nand modular builds.\n\nIn particular, Dune uniformly handles components regardless whether\nthey live in, or out-of-tree. This greatly simplifies cases where a\nplugin [or CoqIde] is checked out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can thus be used as a\nmore flexible `coq_makefile` replacement.\n\nFor now we provide experimental support for a Dune build. In order to\nbuild Coq + the standard library with Dune type:\n\n```\n$ make -f Makefile.dune world\n```\n\nThis PR includes a preliminary, developer-only preview of Dune for\nCoq. There is still ongoing work, see\nhttps://github.com/coq/coq/issues/8052 for tracking status towards\nfull support.\n\n## Technical description.\n\nDune works out of the box with Coq, once we have fixed some modularity\nissues. The main remaining challenge was to support `.vo` files.\n\nAs Dune doesn't support custom build rules yet, to properly build\n`.vo` files we provide a small helper script `tools/coq_dune.ml`. The\nscript will scan the Coq library directories and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript uses `coqdep` as to correctly output the dependencies of\n`.v` files. `coq_dune` is akin to `coq_makefile` and should be able to\nbe used to build Coq projects in the future.\n\nDue to this pitfall, the build process has to proceed in three stages:\n1) build `coqdep` and `coq_dune`; 2) generate `dune` files for\n`theories` and `plugins`; 3) perform a regular build with all\ntargets are in scope.\n\n## FAQ\n\n### Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas `opam`, `ocamlfind` or `odoc`. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there has been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative, OCaml-specific build tool that is on\nthe path to become the standard build system for the OCaml ecosystem.\n\nDune seems to be a good fit for Coq well: it is well-supported, fast,\ncompositional, and designed for large projects.\n\n### Does Dune replace the make-based build system?\n\nThe current, make-based build system is unmodified by this PR and kept\nas the default option. However, Dune has the potential\n\n### Is this PR complete? What does it provide?\n\nThis PR is ready for developer preview and feedback. The build system\nis functional, however, more work is necessary in order to make Dune\nthe default for Coq.\n\nThe main TODOs are tracked at https://github.com/coq/coq/issues/8052\n\nThis PR allows developers to use most of the features of Dune today:\n\n- Modular organization of the codebase; each component is built only\n  against declared dependencies so components are checked for\n  containment more strictly.\n- Hygienic builds; Dune places all artifacts under `_build`.\n- Automatic generation of `.install` files, simplified OPAM workflow.\n- `utop` support, `-opaque` in developer mode, etc...\n- `ml4` files are handled using `coqp5`, a native-code customized\n  camlp5 executable which brings much faster `ml4 -> ml` processing.\n\n### What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n### Some Benchs:\n\n```\n$ /usr/bin/time make DUNEOPT=\"-j 1000\" -f Makefile.dune states\n59.50user 18.81system 0:29.83elapsed 262%CPU (0avgtext+0avgdata 302996maxresident)k\n0inputs+646632outputs (0major+4893811minor)pagefaults 0swaps\n\n$ /usr/bin/time sh -c \"./configure -local -native-compiler no && make -j states\"\n88.21user 23.65system 0:32.96elapsed 339%CPU (0avgtext+0avgdata 304992maxresident)k\n0inputs+1051680outputs (0major+5300680minor)pagefaults 0swaps\n```\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-09-04T14:58:04.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/200f80ef5f73f92e031e760279e18ad18d4348bf"},"pipeline":{"id":29367552,"iid":2929,"project_id":6138686,"sha":"200f80ef5f73f92e031e760279e18ad18d4348bf","ref":"pr-6857","status":"canceled","source":"push","created_at":"2018-09-04T12:58:46.873Z","updated_at":"2018-09-04T13:06:50.102Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/29367552"},"web_url":"https://gitlab.com/coq/coq/-/jobs/94511626","artifacts":[{"file_type":"trace","size":66937,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":94511624,"status":"canceled","stage":"build","name":"build:edge","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-04T12:58:46.946Z","started_at":"2018-09-04T12:58:53.039Z","finished_at":"2018-09-04T13:06:49.212Z","duration":476.173184,"queued_duration":4.278237,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"200f80ef5f73f92e031e760279e18ad18d4348bf","short_id":"200f80ef","created_at":"2018-09-04T14:58:04.000+02:00","parent_ids":["2a458c05b491ebb422e48e551b5ed41eb3ef986e"],"title":"[build] Preliminary support for building Coq with `dune`.","message":"[build] Preliminary support for building Coq with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides automatic generation of\n`version.ml`, `.merlin`, `META`, `opam`, API documentation; install\nmanagement; easy integration with external libraries, test runners,\nand modular builds.\n\nIn particular, Dune uniformly handles components regardless whether\nthey live in, or out-of-tree. This greatly simplifies cases where a\nplugin [or CoqIde] is checked out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can thus be used as a\nmore flexible `coq_makefile` replacement.\n\nFor now we provide experimental support for a Dune build. In order to\nbuild Coq + the standard library with Dune type:\n\n```\n$ make -f Makefile.dune world\n```\n\nThis PR includes a preliminary, developer-only preview of Dune for\nCoq. There is still ongoing work, see\nhttps://github.com/coq/coq/issues/8052 for tracking status towards\nfull support.\n\n## Technical description.\n\nDune works out of the box with Coq, once we have fixed some modularity\nissues. The main remaining challenge was to support `.vo` files.\n\nAs Dune doesn't support custom build rules yet, to properly build\n`.vo` files we provide a small helper script `tools/coq_dune.ml`. The\nscript will scan the Coq library directories and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript uses `coqdep` as to correctly output the dependencies of\n`.v` files. `coq_dune` is akin to `coq_makefile` and should be able to\nbe used to build Coq projects in the future.\n\nDue to this pitfall, the build process has to proceed in three stages:\n1) build `coqdep` and `coq_dune`; 2) generate `dune` files for\n`theories` and `plugins`; 3) perform a regular build with all\ntargets are in scope.\n\n## FAQ\n\n### Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas `opam`, `ocamlfind` or `odoc`. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there has been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative, OCaml-specific build tool that is on\nthe path to become the standard build system for the OCaml ecosystem.\n\nDune seems to be a good fit for Coq well: it is well-supported, fast,\ncompositional, and designed for large projects.\n\n### Does Dune replace the make-based build system?\n\nThe current, make-based build system is unmodified by this PR and kept\nas the default option. However, Dune has the potential\n\n### Is this PR complete? What does it provide?\n\nThis PR is ready for developer preview and feedback. The build system\nis functional, however, more work is necessary in order to make Dune\nthe default for Coq.\n\nThe main TODOs are tracked at https://github.com/coq/coq/issues/8052\n\nThis PR allows developers to use most of the features of Dune today:\n\n- Modular organization of the codebase; each component is built only\n  against declared dependencies so components are checked for\n  containment more strictly.\n- Hygienic builds; Dune places all artifacts under `_build`.\n- Automatic generation of `.install` files, simplified OPAM workflow.\n- `utop` support, `-opaque` in developer mode, etc...\n- `ml4` files are handled using `coqp5`, a native-code customized\n  camlp5 executable which brings much faster `ml4 -> ml` processing.\n\n### What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n### Some Benchs:\n\n```\n$ /usr/bin/time make DUNEOPT=\"-j 1000\" -f Makefile.dune states\n59.50user 18.81system 0:29.83elapsed 262%CPU (0avgtext+0avgdata 302996maxresident)k\n0inputs+646632outputs (0major+4893811minor)pagefaults 0swaps\n\n$ /usr/bin/time sh -c \"./configure -local -native-compiler no && make -j states\"\n88.21user 23.65system 0:32.96elapsed 339%CPU (0avgtext+0avgdata 304992maxresident)k\n0inputs+1051680outputs (0major+5300680minor)pagefaults 0swaps\n```\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-09-04T14:58:04.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/200f80ef5f73f92e031e760279e18ad18d4348bf"},"pipeline":{"id":29367552,"iid":2929,"project_id":6138686,"sha":"200f80ef5f73f92e031e760279e18ad18d4348bf","ref":"pr-6857","status":"canceled","source":"push","created_at":"2018-09-04T12:58:46.873Z","updated_at":"2018-09-04T13:06:50.102Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/29367552"},"web_url":"https://gitlab.com/coq/coq/-/jobs/94511624","artifacts":[{"file_type":"trace","size":91645,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":94511619,"status":"canceled","stage":"build","name":"build:base","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-04T12:58:46.890Z","started_at":"2018-09-04T12:58:52.948Z","finished_at":"2018-09-04T13:06:49.191Z","duration":476.243262,"queued_duration":4.133551,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"200f80ef5f73f92e031e760279e18ad18d4348bf","short_id":"200f80ef","created_at":"2018-09-04T14:58:04.000+02:00","parent_ids":["2a458c05b491ebb422e48e551b5ed41eb3ef986e"],"title":"[build] Preliminary support for building Coq with `dune`.","message":"[build] Preliminary support for building Coq with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides automatic generation of\n`version.ml`, `.merlin`, `META`, `opam`, API documentation; install\nmanagement; easy integration with external libraries, test runners,\nand modular builds.\n\nIn particular, Dune uniformly handles components regardless whether\nthey live in, or out-of-tree. This greatly simplifies cases where a\nplugin [or CoqIde] is checked out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can thus be used as a\nmore flexible `coq_makefile` replacement.\n\nFor now we provide experimental support for a Dune build. In order to\nbuild Coq + the standard library with Dune type:\n\n```\n$ make -f Makefile.dune world\n```\n\nThis PR includes a preliminary, developer-only preview of Dune for\nCoq. There is still ongoing work, see\nhttps://github.com/coq/coq/issues/8052 for tracking status towards\nfull support.\n\n## Technical description.\n\nDune works out of the box with Coq, once we have fixed some modularity\nissues. The main remaining challenge was to support `.vo` files.\n\nAs Dune doesn't support custom build rules yet, to properly build\n`.vo` files we provide a small helper script `tools/coq_dune.ml`. The\nscript will scan the Coq library directories and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript uses `coqdep` as to correctly output the dependencies of\n`.v` files. `coq_dune` is akin to `coq_makefile` and should be able to\nbe used to build Coq projects in the future.\n\nDue to this pitfall, the build process has to proceed in three stages:\n1) build `coqdep` and `coq_dune`; 2) generate `dune` files for\n`theories` and `plugins`; 3) perform a regular build with all\ntargets are in scope.\n\n## FAQ\n\n### Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas `opam`, `ocamlfind` or `odoc`. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there has been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative, OCaml-specific build tool that is on\nthe path to become the standard build system for the OCaml ecosystem.\n\nDune seems to be a good fit for Coq well: it is well-supported, fast,\ncompositional, and designed for large projects.\n\n### Does Dune replace the make-based build system?\n\nThe current, make-based build system is unmodified by this PR and kept\nas the default option. However, Dune has the potential\n\n### Is this PR complete? What does it provide?\n\nThis PR is ready for developer preview and feedback. The build system\nis functional, however, more work is necessary in order to make Dune\nthe default for Coq.\n\nThe main TODOs are tracked at https://github.com/coq/coq/issues/8052\n\nThis PR allows developers to use most of the features of Dune today:\n\n- Modular organization of the codebase; each component is built only\n  against declared dependencies so components are checked for\n  containment more strictly.\n- Hygienic builds; Dune places all artifacts under `_build`.\n- Automatic generation of `.install` files, simplified OPAM workflow.\n- `utop` support, `-opaque` in developer mode, etc...\n- `ml4` files are handled using `coqp5`, a native-code customized\n  camlp5 executable which brings much faster `ml4 -> ml` processing.\n\n### What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n### Some Benchs:\n\n```\n$ /usr/bin/time make DUNEOPT=\"-j 1000\" -f Makefile.dune states\n59.50user 18.81system 0:29.83elapsed 262%CPU (0avgtext+0avgdata 302996maxresident)k\n0inputs+646632outputs (0major+4893811minor)pagefaults 0swaps\n\n$ /usr/bin/time sh -c \"./configure -local -native-compiler no && make -j states\"\n88.21user 23.65system 0:32.96elapsed 339%CPU (0avgtext+0avgdata 304992maxresident)k\n0inputs+1051680outputs (0major+5300680minor)pagefaults 0swaps\n```\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-09-04T14:58:04.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/200f80ef5f73f92e031e760279e18ad18d4348bf"},"pipeline":{"id":29367552,"iid":2929,"project_id":6138686,"sha":"200f80ef5f73f92e031e760279e18ad18d4348bf","ref":"pr-6857","status":"canceled","source":"push","created_at":"2018-09-04T12:58:46.873Z","updated_at":"2018-09-04T13:06:50.102Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/29367552"},"web_url":"https://gitlab.com/coq/coq/-/jobs/94511619","artifacts":[{"file_type":"trace","size":43840,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
