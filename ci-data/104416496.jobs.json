{"id":384946232,"status":"success","stage":"stage-2","name":"test-suite:base+32bit","ref":"pr-11258","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-12-19T16:58:47.732Z","started_at":"2019-12-19T16:58:48.747Z","finished_at":"2019-12-19T17:17:50.889Z","duration":1142.142093,"queued_duration":0.992893,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","short_id":"025dc51c","created_at":"2019-12-20T01:40:29.000+09:00","parent_ids":["6621e7cf79d7d824461de14007b2a06cabe59aef"],"title":"Coherence checking for coercions","message":"Coherence checking for coercions\n\nThis change improves the relaxed ambiguous path condition of coercions (#9743)\nto check that any circular inheritance path of `C >-> C` is definitionally equal\nto the identity function of the class `C`. Moreover, for a new inheritance path\n`p : C >-> D` and existing (valid) one `q : C >-> D`, the new mechanism does not\nreport the ambiguity of `p` and `q` if they have a common element, that is to\nsay:\n`p = p1 @ [c] @ p2` and `q = q1 @ [c] @ q2`\n  for some coercion `c` and inheritance paths `p1`, `p2`, `q1`, and `q2`.\nIn that case, convertibility of `p1` and `q1`, also, `p2` and `q2` should be\nchecked; thus, checking the ambiguity of `p` and `q` is redundant with them.\n\nIf the new mechanism does not report any ambiguous path, the inheritance graph\nmust be coherent [Barthe 1995, Sect. 3.2] [Saïbi 1997, Sect. 7]:\n1. for any circular path `p : C >-> C`, `p` is definitionally equal to the\n   identity function, and\n2. for any two paths `p, q : C >-> D`, `p` and `q` are convertible.\n\n[Barthe 1995] Gilles Barthe, Implicit coercions in type systems, In: TYPES '95,\n              LNCS, vol 1158, Springer, 1996, pp 1-15.\n[Saïbi 1997]  Amokrane Saïbi, Typing algorithm in type theory with inheritance,\n              In: POPL '97, ACM, 1997, pp 292-301.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-12-08T19:24:43.000+09:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-12-20T01:40:29.000+09:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/025dc51c2eef7e7ea302465ff05d04d6fd4e7173"},"pipeline":{"id":104416496,"iid":12767,"project_id":6138686,"sha":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","ref":"pr-11258","status":"failed","source":"push","created_at":"2019-12-19T16:40:58.112Z","updated_at":"2019-12-19T20:11:06.043Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/104416496"},"web_url":"https://gitlab.com/coq/coq/-/jobs/384946232","artifacts":[{"file_type":"trace","size":92673,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":384922466,"status":"success","stage":"stage-4","name":"library:ci-corn","ref":"pr-11258","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-12-19T16:40:59.200Z","started_at":"2019-12-19T17:28:57.395Z","finished_at":"2019-12-19T18:03:17.017Z","duration":2059.621203,"queued_duration":0.617351,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","short_id":"025dc51c","created_at":"2019-12-20T01:40:29.000+09:00","parent_ids":["6621e7cf79d7d824461de14007b2a06cabe59aef"],"title":"Coherence checking for coercions","message":"Coherence checking for coercions\n\nThis change improves the relaxed ambiguous path condition of coercions (#9743)\nto check that any circular inheritance path of `C >-> C` is definitionally equal\nto the identity function of the class `C`. Moreover, for a new inheritance path\n`p : C >-> D` and existing (valid) one `q : C >-> D`, the new mechanism does not\nreport the ambiguity of `p` and `q` if they have a common element, that is to\nsay:\n`p = p1 @ [c] @ p2` and `q = q1 @ [c] @ q2`\n  for some coercion `c` and inheritance paths `p1`, `p2`, `q1`, and `q2`.\nIn that case, convertibility of `p1` and `q1`, also, `p2` and `q2` should be\nchecked; thus, checking the ambiguity of `p` and `q` is redundant with them.\n\nIf the new mechanism does not report any ambiguous path, the inheritance graph\nmust be coherent [Barthe 1995, Sect. 3.2] [Saïbi 1997, Sect. 7]:\n1. for any circular path `p : C >-> C`, `p` is definitionally equal to the\n   identity function, and\n2. for any two paths `p, q : C >-> D`, `p` and `q` are convertible.\n\n[Barthe 1995] Gilles Barthe, Implicit coercions in type systems, In: TYPES '95,\n              LNCS, vol 1158, Springer, 1996, pp 1-15.\n[Saïbi 1997]  Amokrane Saïbi, Typing algorithm in type theory with inheritance,\n              In: POPL '97, ACM, 1997, pp 292-301.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-12-08T19:24:43.000+09:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-12-20T01:40:29.000+09:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/025dc51c2eef7e7ea302465ff05d04d6fd4e7173"},"pipeline":{"id":104416496,"iid":12767,"project_id":6138686,"sha":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","ref":"pr-11258","status":"failed","source":"push","created_at":"2019-12-19T16:40:58.112Z","updated_at":"2019-12-19T20:11:06.043Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/104416496"},"web_url":"https://gitlab.com/coq/coq/-/jobs/384922466","artifacts":[{"file_type":"trace","size":368018,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":384922463,"status":"skipped","stage":"stage-4","name":"library:ci-fiat-crypto","ref":"pr-11258","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-12-19T16:40:59.176Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","short_id":"025dc51c","created_at":"2019-12-20T01:40:29.000+09:00","parent_ids":["6621e7cf79d7d824461de14007b2a06cabe59aef"],"title":"Coherence checking for coercions","message":"Coherence checking for coercions\n\nThis change improves the relaxed ambiguous path condition of coercions (#9743)\nto check that any circular inheritance path of `C >-> C` is definitionally equal\nto the identity function of the class `C`. Moreover, for a new inheritance path\n`p : C >-> D` and existing (valid) one `q : C >-> D`, the new mechanism does not\nreport the ambiguity of `p` and `q` if they have a common element, that is to\nsay:\n`p = p1 @ [c] @ p2` and `q = q1 @ [c] @ q2`\n  for some coercion `c` and inheritance paths `p1`, `p2`, `q1`, and `q2`.\nIn that case, convertibility of `p1` and `q1`, also, `p2` and `q2` should be\nchecked; thus, checking the ambiguity of `p` and `q` is redundant with them.\n\nIf the new mechanism does not report any ambiguous path, the inheritance graph\nmust be coherent [Barthe 1995, Sect. 3.2] [Saïbi 1997, Sect. 7]:\n1. for any circular path `p : C >-> C`, `p` is definitionally equal to the\n   identity function, and\n2. for any two paths `p, q : C >-> D`, `p` and `q` are convertible.\n\n[Barthe 1995] Gilles Barthe, Implicit coercions in type systems, In: TYPES '95,\n              LNCS, vol 1158, Springer, 1996, pp 1-15.\n[Saïbi 1997]  Amokrane Saïbi, Typing algorithm in type theory with inheritance,\n              In: POPL '97, ACM, 1997, pp 292-301.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-12-08T19:24:43.000+09:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-12-20T01:40:29.000+09:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/025dc51c2eef7e7ea302465ff05d04d6fd4e7173"},"pipeline":{"id":104416496,"iid":12767,"project_id":6138686,"sha":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","ref":"pr-11258","status":"failed","source":"push","created_at":"2019-12-19T16:40:58.112Z","updated_at":"2019-12-19T20:11:06.043Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/104416496"},"web_url":"https://gitlab.com/coq/coq/-/jobs/384922463","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":384922460,"status":"success","stage":"stage-3","name":"library:ci-math-classes","ref":"pr-11258","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-12-19T16:40:59.154Z","started_at":"2019-12-19T17:14:57.219Z","finished_at":"2019-12-19T17:28:56.450Z","duration":839.231205,"queued_duration":1.064701,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","short_id":"025dc51c","created_at":"2019-12-20T01:40:29.000+09:00","parent_ids":["6621e7cf79d7d824461de14007b2a06cabe59aef"],"title":"Coherence checking for coercions","message":"Coherence checking for coercions\n\nThis change improves the relaxed ambiguous path condition of coercions (#9743)\nto check that any circular inheritance path of `C >-> C` is definitionally equal\nto the identity function of the class `C`. Moreover, for a new inheritance path\n`p : C >-> D` and existing (valid) one `q : C >-> D`, the new mechanism does not\nreport the ambiguity of `p` and `q` if they have a common element, that is to\nsay:\n`p = p1 @ [c] @ p2` and `q = q1 @ [c] @ q2`\n  for some coercion `c` and inheritance paths `p1`, `p2`, `q1`, and `q2`.\nIn that case, convertibility of `p1` and `q1`, also, `p2` and `q2` should be\nchecked; thus, checking the ambiguity of `p` and `q` is redundant with them.\n\nIf the new mechanism does not report any ambiguous path, the inheritance graph\nmust be coherent [Barthe 1995, Sect. 3.2] [Saïbi 1997, Sect. 7]:\n1. for any circular path `p : C >-> C`, `p` is definitionally equal to the\n   identity function, and\n2. for any two paths `p, q : C >-> D`, `p` and `q` are convertible.\n\n[Barthe 1995] Gilles Barthe, Implicit coercions in type systems, In: TYPES '95,\n              LNCS, vol 1158, Springer, 1996, pp 1-15.\n[Saïbi 1997]  Amokrane Saïbi, Typing algorithm in type theory with inheritance,\n              In: POPL '97, ACM, 1997, pp 292-301.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-12-08T19:24:43.000+09:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-12-20T01:40:29.000+09:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/025dc51c2eef7e7ea302465ff05d04d6fd4e7173"},"pipeline":{"id":104416496,"iid":12767,"project_id":6138686,"sha":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","ref":"pr-11258","status":"failed","source":"push","created_at":"2019-12-19T16:40:58.112Z","updated_at":"2019-12-19T20:11:06.043Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/104416496"},"web_url":"https://gitlab.com/coq/coq/-/jobs/384922460","artifacts":[{"file_type":"trace","size":174414,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":384922458,"status":"success","stage":"stage-3","name":"library:ci-coqprime","ref":"pr-11258","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-12-19T16:40:59.137Z","started_at":"2019-12-19T17:14:56.991Z","finished_at":"2019-12-19T17:22:07.455Z","duration":430.463956,"queued_duration":0.909555,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","short_id":"025dc51c","created_at":"2019-12-20T01:40:29.000+09:00","parent_ids":["6621e7cf79d7d824461de14007b2a06cabe59aef"],"title":"Coherence checking for coercions","message":"Coherence checking for coercions\n\nThis change improves the relaxed ambiguous path condition of coercions (#9743)\nto check that any circular inheritance path of `C >-> C` is definitionally equal\nto the identity function of the class `C`. Moreover, for a new inheritance path\n`p : C >-> D` and existing (valid) one `q : C >-> D`, the new mechanism does not\nreport the ambiguity of `p` and `q` if they have a common element, that is to\nsay:\n`p = p1 @ [c] @ p2` and `q = q1 @ [c] @ q2`\n  for some coercion `c` and inheritance paths `p1`, `p2`, `q1`, and `q2`.\nIn that case, convertibility of `p1` and `q1`, also, `p2` and `q2` should be\nchecked; thus, checking the ambiguity of `p` and `q` is redundant with them.\n\nIf the new mechanism does not report any ambiguous path, the inheritance graph\nmust be coherent [Barthe 1995, Sect. 3.2] [Saïbi 1997, Sect. 7]:\n1. for any circular path `p : C >-> C`, `p` is definitionally equal to the\n   identity function, and\n2. for any two paths `p, q : C >-> D`, `p` and `q` are convertible.\n\n[Barthe 1995] Gilles Barthe, Implicit coercions in type systems, In: TYPES '95,\n              LNCS, vol 1158, Springer, 1996, pp 1-15.\n[Saïbi 1997]  Amokrane Saïbi, Typing algorithm in type theory with inheritance,\n              In: POPL '97, ACM, 1997, pp 292-301.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-12-08T19:24:43.000+09:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-12-20T01:40:29.000+09:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/025dc51c2eef7e7ea302465ff05d04d6fd4e7173"},"pipeline":{"id":104416496,"iid":12767,"project_id":6138686,"sha":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","ref":"pr-11258","status":"failed","source":"push","created_at":"2019-12-19T16:40:58.112Z","updated_at":"2019-12-19T20:11:06.043Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/104416496"},"web_url":"https://gitlab.com/coq/coq/-/jobs/384922458","artifacts":[{"file_type":"trace","size":89393,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":384922455,"status":"success","stage":"stage-3","name":"library:ci-color","ref":"pr-11258","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-12-19T16:40:59.121Z","started_at":"2019-12-19T17:14:56.945Z","finished_at":"2019-12-19T18:07:25.193Z","duration":3148.247922,"queued_duration":0.913572,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","short_id":"025dc51c","created_at":"2019-12-20T01:40:29.000+09:00","parent_ids":["6621e7cf79d7d824461de14007b2a06cabe59aef"],"title":"Coherence checking for coercions","message":"Coherence checking for coercions\n\nThis change improves the relaxed ambiguous path condition of coercions (#9743)\nto check that any circular inheritance path of `C >-> C` is definitionally equal\nto the identity function of the class `C`. Moreover, for a new inheritance path\n`p : C >-> D` and existing (valid) one `q : C >-> D`, the new mechanism does not\nreport the ambiguity of `p` and `q` if they have a common element, that is to\nsay:\n`p = p1 @ [c] @ p2` and `q = q1 @ [c] @ q2`\n  for some coercion `c` and inheritance paths `p1`, `p2`, `q1`, and `q2`.\nIn that case, convertibility of `p1` and `q1`, also, `p2` and `q2` should be\nchecked; thus, checking the ambiguity of `p` and `q` is redundant with them.\n\nIf the new mechanism does not report any ambiguous path, the inheritance graph\nmust be coherent [Barthe 1995, Sect. 3.2] [Saïbi 1997, Sect. 7]:\n1. for any circular path `p : C >-> C`, `p` is definitionally equal to the\n   identity function, and\n2. for any two paths `p, q : C >-> D`, `p` and `q` are convertible.\n\n[Barthe 1995] Gilles Barthe, Implicit coercions in type systems, In: TYPES '95,\n              LNCS, vol 1158, Springer, 1996, pp 1-15.\n[Saïbi 1997]  Amokrane Saïbi, Typing algorithm in type theory with inheritance,\n              In: POPL '97, ACM, 1997, pp 292-301.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-12-08T19:24:43.000+09:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-12-20T01:40:29.000+09:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/025dc51c2eef7e7ea302465ff05d04d6fd4e7173"},"pipeline":{"id":104416496,"iid":12767,"project_id":6138686,"sha":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","ref":"pr-11258","status":"failed","source":"push","created_at":"2019-12-19T16:40:58.112Z","updated_at":"2019-12-19T20:11:06.043Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/104416496"},"web_url":"https://gitlab.com/coq/coq/-/jobs/384922455","artifacts":[{"file_type":"trace","size":210242,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":384922452,"status":"success","stage":"stage-2","name":"plugin:ci-rewriter","ref":"pr-11258","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-12-19T16:40:59.102Z","started_at":"2019-12-19T17:10:19.699Z","finished_at":"2019-12-19T17:26:21.228Z","duration":961.528231,"queued_duration":2.297323,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","short_id":"025dc51c","created_at":"2019-12-20T01:40:29.000+09:00","parent_ids":["6621e7cf79d7d824461de14007b2a06cabe59aef"],"title":"Coherence checking for coercions","message":"Coherence checking for coercions\n\nThis change improves the relaxed ambiguous path condition of coercions (#9743)\nto check that any circular inheritance path of `C >-> C` is definitionally equal\nto the identity function of the class `C`. Moreover, for a new inheritance path\n`p : C >-> D` and existing (valid) one `q : C >-> D`, the new mechanism does not\nreport the ambiguity of `p` and `q` if they have a common element, that is to\nsay:\n`p = p1 @ [c] @ p2` and `q = q1 @ [c] @ q2`\n  for some coercion `c` and inheritance paths `p1`, `p2`, `q1`, and `q2`.\nIn that case, convertibility of `p1` and `q1`, also, `p2` and `q2` should be\nchecked; thus, checking the ambiguity of `p` and `q` is redundant with them.\n\nIf the new mechanism does not report any ambiguous path, the inheritance graph\nmust be coherent [Barthe 1995, Sect. 3.2] [Saïbi 1997, Sect. 7]:\n1. for any circular path `p : C >-> C`, `p` is definitionally equal to the\n   identity function, and\n2. for any two paths `p, q : C >-> D`, `p` and `q` are convertible.\n\n[Barthe 1995] Gilles Barthe, Implicit coercions in type systems, In: TYPES '95,\n              LNCS, vol 1158, Springer, 1996, pp 1-15.\n[Saïbi 1997]  Amokrane Saïbi, Typing algorithm in type theory with inheritance,\n              In: POPL '97, ACM, 1997, pp 292-301.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-12-08T19:24:43.000+09:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-12-20T01:40:29.000+09:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/025dc51c2eef7e7ea302465ff05d04d6fd4e7173"},"pipeline":{"id":104416496,"iid":12767,"project_id":6138686,"sha":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","ref":"pr-11258","status":"failed","source":"push","created_at":"2019-12-19T16:40:58.112Z","updated_at":"2019-12-19T20:11:06.043Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/104416496"},"web_url":"https://gitlab.com/coq/coq/-/jobs/384922452","artifacts":[{"file_type":"trace","size":137204,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":384922450,"status":"success","stage":"stage-2","name":"plugin:ci-relation_algebra","ref":"pr-11258","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-12-19T16:40:59.084Z","started_at":"2019-12-19T16:59:17.434Z","finished_at":"2019-12-19T17:08:17.973Z","duration":540.53832,"queued_duration":1.877394,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","short_id":"025dc51c","created_at":"2019-12-20T01:40:29.000+09:00","parent_ids":["6621e7cf79d7d824461de14007b2a06cabe59aef"],"title":"Coherence checking for coercions","message":"Coherence checking for coercions\n\nThis change improves the relaxed ambiguous path condition of coercions (#9743)\nto check that any circular inheritance path of `C >-> C` is definitionally equal\nto the identity function of the class `C`. Moreover, for a new inheritance path\n`p : C >-> D` and existing (valid) one `q : C >-> D`, the new mechanism does not\nreport the ambiguity of `p` and `q` if they have a common element, that is to\nsay:\n`p = p1 @ [c] @ p2` and `q = q1 @ [c] @ q2`\n  for some coercion `c` and inheritance paths `p1`, `p2`, `q1`, and `q2`.\nIn that case, convertibility of `p1` and `q1`, also, `p2` and `q2` should be\nchecked; thus, checking the ambiguity of `p` and `q` is redundant with them.\n\nIf the new mechanism does not report any ambiguous path, the inheritance graph\nmust be coherent [Barthe 1995, Sect. 3.2] [Saïbi 1997, Sect. 7]:\n1. for any circular path `p : C >-> C`, `p` is definitionally equal to the\n   identity function, and\n2. for any two paths `p, q : C >-> D`, `p` and `q` are convertible.\n\n[Barthe 1995] Gilles Barthe, Implicit coercions in type systems, In: TYPES '95,\n              LNCS, vol 1158, Springer, 1996, pp 1-15.\n[Saïbi 1997]  Amokrane Saïbi, Typing algorithm in type theory with inheritance,\n              In: POPL '97, ACM, 1997, pp 292-301.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-12-08T19:24:43.000+09:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-12-20T01:40:29.000+09:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/025dc51c2eef7e7ea302465ff05d04d6fd4e7173"},"pipeline":{"id":104416496,"iid":12767,"project_id":6138686,"sha":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","ref":"pr-11258","status":"failed","source":"push","created_at":"2019-12-19T16:40:58.112Z","updated_at":"2019-12-19T20:11:06.043Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/104416496"},"web_url":"https://gitlab.com/coq/coq/-/jobs/384922450","artifacts":[{"file_type":"trace","size":88169,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":384922447,"status":"success","stage":"stage-2","name":"plugin:ci-quickchick","ref":"pr-11258","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-12-19T16:40:59.068Z","started_at":"2019-12-19T17:10:19.643Z","finished_at":"2019-12-19T17:17:10.935Z","duration":411.292831,"queued_duration":2.29484,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","short_id":"025dc51c","created_at":"2019-12-20T01:40:29.000+09:00","parent_ids":["6621e7cf79d7d824461de14007b2a06cabe59aef"],"title":"Coherence checking for coercions","message":"Coherence checking for coercions\n\nThis change improves the relaxed ambiguous path condition of coercions (#9743)\nto check that any circular inheritance path of `C >-> C` is definitionally equal\nto the identity function of the class `C`. Moreover, for a new inheritance path\n`p : C >-> D` and existing (valid) one `q : C >-> D`, the new mechanism does not\nreport the ambiguity of `p` and `q` if they have a common element, that is to\nsay:\n`p = p1 @ [c] @ p2` and `q = q1 @ [c] @ q2`\n  for some coercion `c` and inheritance paths `p1`, `p2`, `q1`, and `q2`.\nIn that case, convertibility of `p1` and `q1`, also, `p2` and `q2` should be\nchecked; thus, checking the ambiguity of `p` and `q` is redundant with them.\n\nIf the new mechanism does not report any ambiguous path, the inheritance graph\nmust be coherent [Barthe 1995, Sect. 3.2] [Saïbi 1997, Sect. 7]:\n1. for any circular path `p : C >-> C`, `p` is definitionally equal to the\n   identity function, and\n2. for any two paths `p, q : C >-> D`, `p` and `q` are convertible.\n\n[Barthe 1995] Gilles Barthe, Implicit coercions in type systems, In: TYPES '95,\n              LNCS, vol 1158, Springer, 1996, pp 1-15.\n[Saïbi 1997]  Amokrane Saïbi, Typing algorithm in type theory with inheritance,\n              In: POPL '97, ACM, 1997, pp 292-301.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-12-08T19:24:43.000+09:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-12-20T01:40:29.000+09:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/025dc51c2eef7e7ea302465ff05d04d6fd4e7173"},"pipeline":{"id":104416496,"iid":12767,"project_id":6138686,"sha":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","ref":"pr-11258","status":"failed","source":"push","created_at":"2019-12-19T16:40:58.112Z","updated_at":"2019-12-19T20:11:06.043Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/104416496"},"web_url":"https://gitlab.com/coq/coq/-/jobs/384922447","artifacts":[{"file_type":"trace","size":266758,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":384922445,"status":"success","stage":"stage-2","name":"plugin:ci-perennial","ref":"pr-11258","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-12-19T16:40:59.050Z","started_at":"2019-12-19T17:10:19.602Z","finished_at":"2019-12-19T17:45:22.272Z","duration":2102.670093,"queued_duration":2.306429,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","short_id":"025dc51c","created_at":"2019-12-20T01:40:29.000+09:00","parent_ids":["6621e7cf79d7d824461de14007b2a06cabe59aef"],"title":"Coherence checking for coercions","message":"Coherence checking for coercions\n\nThis change improves the relaxed ambiguous path condition of coercions (#9743)\nto check that any circular inheritance path of `C >-> C` is definitionally equal\nto the identity function of the class `C`. Moreover, for a new inheritance path\n`p : C >-> D` and existing (valid) one `q : C >-> D`, the new mechanism does not\nreport the ambiguity of `p` and `q` if they have a common element, that is to\nsay:\n`p = p1 @ [c] @ p2` and `q = q1 @ [c] @ q2`\n  for some coercion `c` and inheritance paths `p1`, `p2`, `q1`, and `q2`.\nIn that case, convertibility of `p1` and `q1`, also, `p2` and `q2` should be\nchecked; thus, checking the ambiguity of `p` and `q` is redundant with them.\n\nIf the new mechanism does not report any ambiguous path, the inheritance graph\nmust be coherent [Barthe 1995, Sect. 3.2] [Saïbi 1997, Sect. 7]:\n1. for any circular path `p : C >-> C`, `p` is definitionally equal to the\n   identity function, and\n2. for any two paths `p, q : C >-> D`, `p` and `q` are convertible.\n\n[Barthe 1995] Gilles Barthe, Implicit coercions in type systems, In: TYPES '95,\n              LNCS, vol 1158, Springer, 1996, pp 1-15.\n[Saïbi 1997]  Amokrane Saïbi, Typing algorithm in type theory with inheritance,\n              In: POPL '97, ACM, 1997, pp 292-301.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-12-08T19:24:43.000+09:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-12-20T01:40:29.000+09:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/025dc51c2eef7e7ea302465ff05d04d6fd4e7173"},"pipeline":{"id":104416496,"iid":12767,"project_id":6138686,"sha":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","ref":"pr-11258","status":"failed","source":"push","created_at":"2019-12-19T16:40:58.112Z","updated_at":"2019-12-19T20:11:06.043Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/104416496"},"web_url":"https://gitlab.com/coq/coq/-/jobs/384922445","artifacts":[{"file_type":"trace","size":70823,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":384922444,"status":"success","stage":"stage-2","name":"plugin:ci-paramcoq","ref":"pr-11258","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-12-19T16:40:59.032Z","started_at":"2019-12-19T16:59:17.391Z","finished_at":"2019-12-19T17:03:03.984Z","duration":226.593332,"queued_duration":1.882968,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","short_id":"025dc51c","created_at":"2019-12-20T01:40:29.000+09:00","parent_ids":["6621e7cf79d7d824461de14007b2a06cabe59aef"],"title":"Coherence checking for coercions","message":"Coherence checking for coercions\n\nThis change improves the relaxed ambiguous path condition of coercions (#9743)\nto check that any circular inheritance path of `C >-> C` is definitionally equal\nto the identity function of the class `C`. Moreover, for a new inheritance path\n`p : C >-> D` and existing (valid) one `q : C >-> D`, the new mechanism does not\nreport the ambiguity of `p` and `q` if they have a common element, that is to\nsay:\n`p = p1 @ [c] @ p2` and `q = q1 @ [c] @ q2`\n  for some coercion `c` and inheritance paths `p1`, `p2`, `q1`, and `q2`.\nIn that case, convertibility of `p1` and `q1`, also, `p2` and `q2` should be\nchecked; thus, checking the ambiguity of `p` and `q` is redundant with them.\n\nIf the new mechanism does not report any ambiguous path, the inheritance graph\nmust be coherent [Barthe 1995, Sect. 3.2] [Saïbi 1997, Sect. 7]:\n1. for any circular path `p : C >-> C`, `p` is definitionally equal to the\n   identity function, and\n2. for any two paths `p, q : C >-> D`, `p` and `q` are convertible.\n\n[Barthe 1995] Gilles Barthe, Implicit coercions in type systems, In: TYPES '95,\n              LNCS, vol 1158, Springer, 1996, pp 1-15.\n[Saïbi 1997]  Amokrane Saïbi, Typing algorithm in type theory with inheritance,\n              In: POPL '97, ACM, 1997, pp 292-301.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-12-08T19:24:43.000+09:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-12-20T01:40:29.000+09:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/025dc51c2eef7e7ea302465ff05d04d6fd4e7173"},"pipeline":{"id":104416496,"iid":12767,"project_id":6138686,"sha":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","ref":"pr-11258","status":"failed","source":"push","created_at":"2019-12-19T16:40:58.112Z","updated_at":"2019-12-19T20:11:06.043Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/104416496"},"web_url":"https://gitlab.com/coq/coq/-/jobs/384922444","artifacts":[{"file_type":"trace","size":84404,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":384922441,"status":"success","stage":"stage-2","name":"plugin:ci-mtac2","ref":"pr-11258","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-12-19T16:40:59.016Z","started_at":"2019-12-19T16:59:17.346Z","finished_at":"2019-12-19T17:04:00.852Z","duration":283.5054,"queued_duration":1.884159,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","short_id":"025dc51c","created_at":"2019-12-20T01:40:29.000+09:00","parent_ids":["6621e7cf79d7d824461de14007b2a06cabe59aef"],"title":"Coherence checking for coercions","message":"Coherence checking for coercions\n\nThis change improves the relaxed ambiguous path condition of coercions (#9743)\nto check that any circular inheritance path of `C >-> C` is definitionally equal\nto the identity function of the class `C`. Moreover, for a new inheritance path\n`p : C >-> D` and existing (valid) one `q : C >-> D`, the new mechanism does not\nreport the ambiguity of `p` and `q` if they have a common element, that is to\nsay:\n`p = p1 @ [c] @ p2` and `q = q1 @ [c] @ q2`\n  for some coercion `c` and inheritance paths `p1`, `p2`, `q1`, and `q2`.\nIn that case, convertibility of `p1` and `q1`, also, `p2` and `q2` should be\nchecked; thus, checking the ambiguity of `p` and `q` is redundant with them.\n\nIf the new mechanism does not report any ambiguous path, the inheritance graph\nmust be coherent [Barthe 1995, Sect. 3.2] [Saïbi 1997, Sect. 7]:\n1. for any circular path `p : C >-> C`, `p` is definitionally equal to the\n   identity function, and\n2. for any two paths `p, q : C >-> D`, `p` and `q` are convertible.\n\n[Barthe 1995] Gilles Barthe, Implicit coercions in type systems, In: TYPES '95,\n              LNCS, vol 1158, Springer, 1996, pp 1-15.\n[Saïbi 1997]  Amokrane Saïbi, Typing algorithm in type theory with inheritance,\n              In: POPL '97, ACM, 1997, pp 292-301.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-12-08T19:24:43.000+09:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-12-20T01:40:29.000+09:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/025dc51c2eef7e7ea302465ff05d04d6fd4e7173"},"pipeline":{"id":104416496,"iid":12767,"project_id":6138686,"sha":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","ref":"pr-11258","status":"failed","source":"push","created_at":"2019-12-19T16:40:58.112Z","updated_at":"2019-12-19T20:11:06.043Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/104416496"},"web_url":"https://gitlab.com/coq/coq/-/jobs/384922441","artifacts":[{"file_type":"trace","size":146378,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":384922440,"status":"success","stage":"stage-2","name":"plugin:ci-fiat_parsers","ref":"pr-11258","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-12-19T16:40:59.000Z","started_at":"2019-12-19T16:59:17.303Z","finished_at":"2019-12-19T17:19:11.897Z","duration":1194.594317,"queued_duration":1.887412,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","short_id":"025dc51c","created_at":"2019-12-20T01:40:29.000+09:00","parent_ids":["6621e7cf79d7d824461de14007b2a06cabe59aef"],"title":"Coherence checking for coercions","message":"Coherence checking for coercions\n\nThis change improves the relaxed ambiguous path condition of coercions (#9743)\nto check that any circular inheritance path of `C >-> C` is definitionally equal\nto the identity function of the class `C`. Moreover, for a new inheritance path\n`p : C >-> D` and existing (valid) one `q : C >-> D`, the new mechanism does not\nreport the ambiguity of `p` and `q` if they have a common element, that is to\nsay:\n`p = p1 @ [c] @ p2` and `q = q1 @ [c] @ q2`\n  for some coercion `c` and inheritance paths `p1`, `p2`, `q1`, and `q2`.\nIn that case, convertibility of `p1` and `q1`, also, `p2` and `q2` should be\nchecked; thus, checking the ambiguity of `p` and `q` is redundant with them.\n\nIf the new mechanism does not report any ambiguous path, the inheritance graph\nmust be coherent [Barthe 1995, Sect. 3.2] [Saïbi 1997, Sect. 7]:\n1. for any circular path `p : C >-> C`, `p` is definitionally equal to the\n   identity function, and\n2. for any two paths `p, q : C >-> D`, `p` and `q` are convertible.\n\n[Barthe 1995] Gilles Barthe, Implicit coercions in type systems, In: TYPES '95,\n              LNCS, vol 1158, Springer, 1996, pp 1-15.\n[Saïbi 1997]  Amokrane Saïbi, Typing algorithm in type theory with inheritance,\n              In: POPL '97, ACM, 1997, pp 292-301.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-12-08T19:24:43.000+09:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-12-20T01:40:29.000+09:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/025dc51c2eef7e7ea302465ff05d04d6fd4e7173"},"pipeline":{"id":104416496,"iid":12767,"project_id":6138686,"sha":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","ref":"pr-11258","status":"failed","source":"push","created_at":"2019-12-19T16:40:58.112Z","updated_at":"2019-12-19T20:11:06.043Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/104416496"},"web_url":"https://gitlab.com/coq/coq/-/jobs/384922440","artifacts":[{"file_type":"trace","size":238600,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":384922438,"status":"success","stage":"stage-2","name":"plugin:ci-equations","ref":"pr-11258","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-12-19T16:40:58.985Z","started_at":"2019-12-19T16:59:17.243Z","finished_at":"2019-12-19T17:07:43.027Z","duration":505.783946,"queued_duration":1.908324,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","short_id":"025dc51c","created_at":"2019-12-20T01:40:29.000+09:00","parent_ids":["6621e7cf79d7d824461de14007b2a06cabe59aef"],"title":"Coherence checking for coercions","message":"Coherence checking for coercions\n\nThis change improves the relaxed ambiguous path condition of coercions (#9743)\nto check that any circular inheritance path of `C >-> C` is definitionally equal\nto the identity function of the class `C`. Moreover, for a new inheritance path\n`p : C >-> D` and existing (valid) one `q : C >-> D`, the new mechanism does not\nreport the ambiguity of `p` and `q` if they have a common element, that is to\nsay:\n`p = p1 @ [c] @ p2` and `q = q1 @ [c] @ q2`\n  for some coercion `c` and inheritance paths `p1`, `p2`, `q1`, and `q2`.\nIn that case, convertibility of `p1` and `q1`, also, `p2` and `q2` should be\nchecked; thus, checking the ambiguity of `p` and `q` is redundant with them.\n\nIf the new mechanism does not report any ambiguous path, the inheritance graph\nmust be coherent [Barthe 1995, Sect. 3.2] [Saïbi 1997, Sect. 7]:\n1. for any circular path `p : C >-> C`, `p` is definitionally equal to the\n   identity function, and\n2. for any two paths `p, q : C >-> D`, `p` and `q` are convertible.\n\n[Barthe 1995] Gilles Barthe, Implicit coercions in type systems, In: TYPES '95,\n              LNCS, vol 1158, Springer, 1996, pp 1-15.\n[Saïbi 1997]  Amokrane Saïbi, Typing algorithm in type theory with inheritance,\n              In: POPL '97, ACM, 1997, pp 292-301.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-12-08T19:24:43.000+09:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-12-20T01:40:29.000+09:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/025dc51c2eef7e7ea302465ff05d04d6fd4e7173"},"pipeline":{"id":104416496,"iid":12767,"project_id":6138686,"sha":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","ref":"pr-11258","status":"failed","source":"push","created_at":"2019-12-19T16:40:58.112Z","updated_at":"2019-12-19T20:11:06.043Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/104416496"},"web_url":"https://gitlab.com/coq/coq/-/jobs/384922438","artifacts":[{"file_type":"trace","size":90490,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":384922436,"status":"success","stage":"stage-2","name":"plugin:ci-elpi","ref":"pr-11258","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-12-19T16:40:58.970Z","started_at":"2019-12-19T16:59:17.093Z","finished_at":"2019-12-19T17:04:01.303Z","duration":284.209541,"queued_duration":1.822612,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","short_id":"025dc51c","created_at":"2019-12-20T01:40:29.000+09:00","parent_ids":["6621e7cf79d7d824461de14007b2a06cabe59aef"],"title":"Coherence checking for coercions","message":"Coherence checking for coercions\n\nThis change improves the relaxed ambiguous path condition of coercions (#9743)\nto check that any circular inheritance path of `C >-> C` is definitionally equal\nto the identity function of the class `C`. Moreover, for a new inheritance path\n`p : C >-> D` and existing (valid) one `q : C >-> D`, the new mechanism does not\nreport the ambiguity of `p` and `q` if they have a common element, that is to\nsay:\n`p = p1 @ [c] @ p2` and `q = q1 @ [c] @ q2`\n  for some coercion `c` and inheritance paths `p1`, `p2`, `q1`, and `q2`.\nIn that case, convertibility of `p1` and `q1`, also, `p2` and `q2` should be\nchecked; thus, checking the ambiguity of `p` and `q` is redundant with them.\n\nIf the new mechanism does not report any ambiguous path, the inheritance graph\nmust be coherent [Barthe 1995, Sect. 3.2] [Saïbi 1997, Sect. 7]:\n1. for any circular path `p : C >-> C`, `p` is definitionally equal to the\n   identity function, and\n2. for any two paths `p, q : C >-> D`, `p` and `q` are convertible.\n\n[Barthe 1995] Gilles Barthe, Implicit coercions in type systems, In: TYPES '95,\n              LNCS, vol 1158, Springer, 1996, pp 1-15.\n[Saïbi 1997]  Amokrane Saïbi, Typing algorithm in type theory with inheritance,\n              In: POPL '97, ACM, 1997, pp 292-301.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-12-08T19:24:43.000+09:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-12-20T01:40:29.000+09:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/025dc51c2eef7e7ea302465ff05d04d6fd4e7173"},"pipeline":{"id":104416496,"iid":12767,"project_id":6138686,"sha":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","ref":"pr-11258","status":"failed","source":"push","created_at":"2019-12-19T16:40:58.112Z","updated_at":"2019-12-19T20:11:06.043Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/104416496"},"web_url":"https://gitlab.com/coq/coq/-/jobs/384922436","artifacts":[{"file_type":"trace","size":381010,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":384922434,"status":"success","stage":"stage-2","name":"plugin:ci-coqhammer","ref":"pr-11258","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-12-19T16:40:58.954Z","started_at":"2019-12-19T16:59:17.013Z","finished_at":"2019-12-19T17:01:23.983Z","duration":126.970414,"queued_duration":1.841663,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","short_id":"025dc51c","created_at":"2019-12-20T01:40:29.000+09:00","parent_ids":["6621e7cf79d7d824461de14007b2a06cabe59aef"],"title":"Coherence checking for coercions","message":"Coherence checking for coercions\n\nThis change improves the relaxed ambiguous path condition of coercions (#9743)\nto check that any circular inheritance path of `C >-> C` is definitionally equal\nto the identity function of the class `C`. Moreover, for a new inheritance path\n`p : C >-> D` and existing (valid) one `q : C >-> D`, the new mechanism does not\nreport the ambiguity of `p` and `q` if they have a common element, that is to\nsay:\n`p = p1 @ [c] @ p2` and `q = q1 @ [c] @ q2`\n  for some coercion `c` and inheritance paths `p1`, `p2`, `q1`, and `q2`.\nIn that case, convertibility of `p1` and `q1`, also, `p2` and `q2` should be\nchecked; thus, checking the ambiguity of `p` and `q` is redundant with them.\n\nIf the new mechanism does not report any ambiguous path, the inheritance graph\nmust be coherent [Barthe 1995, Sect. 3.2] [Saïbi 1997, Sect. 7]:\n1. for any circular path `p : C >-> C`, `p` is definitionally equal to the\n   identity function, and\n2. for any two paths `p, q : C >-> D`, `p` and `q` are convertible.\n\n[Barthe 1995] Gilles Barthe, Implicit coercions in type systems, In: TYPES '95,\n              LNCS, vol 1158, Springer, 1996, pp 1-15.\n[Saïbi 1997]  Amokrane Saïbi, Typing algorithm in type theory with inheritance,\n              In: POPL '97, ACM, 1997, pp 292-301.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-12-08T19:24:43.000+09:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-12-20T01:40:29.000+09:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/025dc51c2eef7e7ea302465ff05d04d6fd4e7173"},"pipeline":{"id":104416496,"iid":12767,"project_id":6138686,"sha":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","ref":"pr-11258","status":"failed","source":"push","created_at":"2019-12-19T16:40:58.112Z","updated_at":"2019-12-19T20:11:06.043Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/104416496"},"web_url":"https://gitlab.com/coq/coq/-/jobs/384922434","artifacts":[{"file_type":"trace","size":71689,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":384922432,"status":"success","stage":"stage-2","name":"plugin:ci-coq_dpdgraph","ref":"pr-11258","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-12-19T16:40:58.939Z","started_at":"2019-12-19T16:59:16.925Z","finished_at":"2019-12-19T17:02:35.186Z","duration":198.260173,"queued_duration":1.820754,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","short_id":"025dc51c","created_at":"2019-12-20T01:40:29.000+09:00","parent_ids":["6621e7cf79d7d824461de14007b2a06cabe59aef"],"title":"Coherence checking for coercions","message":"Coherence checking for coercions\n\nThis change improves the relaxed ambiguous path condition of coercions (#9743)\nto check that any circular inheritance path of `C >-> C` is definitionally equal\nto the identity function of the class `C`. Moreover, for a new inheritance path\n`p : C >-> D` and existing (valid) one `q : C >-> D`, the new mechanism does not\nreport the ambiguity of `p` and `q` if they have a common element, that is to\nsay:\n`p = p1 @ [c] @ p2` and `q = q1 @ [c] @ q2`\n  for some coercion `c` and inheritance paths `p1`, `p2`, `q1`, and `q2`.\nIn that case, convertibility of `p1` and `q1`, also, `p2` and `q2` should be\nchecked; thus, checking the ambiguity of `p` and `q` is redundant with them.\n\nIf the new mechanism does not report any ambiguous path, the inheritance graph\nmust be coherent [Barthe 1995, Sect. 3.2] [Saïbi 1997, Sect. 7]:\n1. for any circular path `p : C >-> C`, `p` is definitionally equal to the\n   identity function, and\n2. for any two paths `p, q : C >-> D`, `p` and `q` are convertible.\n\n[Barthe 1995] Gilles Barthe, Implicit coercions in type systems, In: TYPES '95,\n              LNCS, vol 1158, Springer, 1996, pp 1-15.\n[Saïbi 1997]  Amokrane Saïbi, Typing algorithm in type theory with inheritance,\n              In: POPL '97, ACM, 1997, pp 292-301.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-12-08T19:24:43.000+09:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-12-20T01:40:29.000+09:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/025dc51c2eef7e7ea302465ff05d04d6fd4e7173"},"pipeline":{"id":104416496,"iid":12767,"project_id":6138686,"sha":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","ref":"pr-11258","status":"failed","source":"push","created_at":"2019-12-19T16:40:58.112Z","updated_at":"2019-12-19T20:11:06.043Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/104416496"},"web_url":"https://gitlab.com/coq/coq/-/jobs/384922432","artifacts":[{"file_type":"trace","size":47684,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":384922430,"status":"success","stage":"stage-2","name":"plugin:ci-bignums","ref":"pr-11258","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-12-19T16:40:58.925Z","started_at":"2019-12-19T17:10:19.561Z","finished_at":"2019-12-19T17:14:55.947Z","duration":276.385203,"queued_duration":2.310725,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","short_id":"025dc51c","created_at":"2019-12-20T01:40:29.000+09:00","parent_ids":["6621e7cf79d7d824461de14007b2a06cabe59aef"],"title":"Coherence checking for coercions","message":"Coherence checking for coercions\n\nThis change improves the relaxed ambiguous path condition of coercions (#9743)\nto check that any circular inheritance path of `C >-> C` is definitionally equal\nto the identity function of the class `C`. Moreover, for a new inheritance path\n`p : C >-> D` and existing (valid) one `q : C >-> D`, the new mechanism does not\nreport the ambiguity of `p` and `q` if they have a common element, that is to\nsay:\n`p = p1 @ [c] @ p2` and `q = q1 @ [c] @ q2`\n  for some coercion `c` and inheritance paths `p1`, `p2`, `q1`, and `q2`.\nIn that case, convertibility of `p1` and `q1`, also, `p2` and `q2` should be\nchecked; thus, checking the ambiguity of `p` and `q` is redundant with them.\n\nIf the new mechanism does not report any ambiguous path, the inheritance graph\nmust be coherent [Barthe 1995, Sect. 3.2] [Saïbi 1997, Sect. 7]:\n1. for any circular path `p : C >-> C`, `p` is definitionally equal to the\n   identity function, and\n2. for any two paths `p, q : C >-> D`, `p` and `q` are convertible.\n\n[Barthe 1995] Gilles Barthe, Implicit coercions in type systems, In: TYPES '95,\n              LNCS, vol 1158, Springer, 1996, pp 1-15.\n[Saïbi 1997]  Amokrane Saïbi, Typing algorithm in type theory with inheritance,\n              In: POPL '97, ACM, 1997, pp 292-301.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-12-08T19:24:43.000+09:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-12-20T01:40:29.000+09:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/025dc51c2eef7e7ea302465ff05d04d6fd4e7173"},"pipeline":{"id":104416496,"iid":12767,"project_id":6138686,"sha":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","ref":"pr-11258","status":"failed","source":"push","created_at":"2019-12-19T16:40:58.112Z","updated_at":"2019-12-19T20:11:06.043Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/104416496"},"web_url":"https://gitlab.com/coq/coq/-/jobs/384922430","artifacts":[{"file_type":"trace","size":48132,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":384922427,"status":"success","stage":"stage-2","name":"plugin:ci-aac_tactics","ref":"pr-11258","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-12-19T16:40:58.907Z","started_at":"2019-12-19T16:59:16.867Z","finished_at":"2019-12-19T17:02:43.321Z","duration":206.454704,"queued_duration":1.84852,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","short_id":"025dc51c","created_at":"2019-12-20T01:40:29.000+09:00","parent_ids":["6621e7cf79d7d824461de14007b2a06cabe59aef"],"title":"Coherence checking for coercions","message":"Coherence checking for coercions\n\nThis change improves the relaxed ambiguous path condition of coercions (#9743)\nto check that any circular inheritance path of `C >-> C` is definitionally equal\nto the identity function of the class `C`. Moreover, for a new inheritance path\n`p : C >-> D` and existing (valid) one `q : C >-> D`, the new mechanism does not\nreport the ambiguity of `p` and `q` if they have a common element, that is to\nsay:\n`p = p1 @ [c] @ p2` and `q = q1 @ [c] @ q2`\n  for some coercion `c` and inheritance paths `p1`, `p2`, `q1`, and `q2`.\nIn that case, convertibility of `p1` and `q1`, also, `p2` and `q2` should be\nchecked; thus, checking the ambiguity of `p` and `q` is redundant with them.\n\nIf the new mechanism does not report any ambiguous path, the inheritance graph\nmust be coherent [Barthe 1995, Sect. 3.2] [Saïbi 1997, Sect. 7]:\n1. for any circular path `p : C >-> C`, `p` is definitionally equal to the\n   identity function, and\n2. for any two paths `p, q : C >-> D`, `p` and `q` are convertible.\n\n[Barthe 1995] Gilles Barthe, Implicit coercions in type systems, In: TYPES '95,\n              LNCS, vol 1158, Springer, 1996, pp 1-15.\n[Saïbi 1997]  Amokrane Saïbi, Typing algorithm in type theory with inheritance,\n              In: POPL '97, ACM, 1997, pp 292-301.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-12-08T19:24:43.000+09:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-12-20T01:40:29.000+09:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/025dc51c2eef7e7ea302465ff05d04d6fd4e7173"},"pipeline":{"id":104416496,"iid":12767,"project_id":6138686,"sha":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","ref":"pr-11258","status":"failed","source":"push","created_at":"2019-12-19T16:40:58.112Z","updated_at":"2019-12-19T20:11:06.043Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/104416496"},"web_url":"https://gitlab.com/coq/coq/-/jobs/384922427","artifacts":[{"file_type":"trace","size":53177,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":384922425,"status":"success","stage":"stage-2","name":"library:ci-vst","ref":"pr-11258","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-12-19T16:40:58.893Z","started_at":"2019-12-19T17:10:19.405Z","finished_at":"2019-12-19T18:22:47.679Z","duration":4348.273989,"queued_duration":2.203711,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","short_id":"025dc51c","created_at":"2019-12-20T01:40:29.000+09:00","parent_ids":["6621e7cf79d7d824461de14007b2a06cabe59aef"],"title":"Coherence checking for coercions","message":"Coherence checking for coercions\n\nThis change improves the relaxed ambiguous path condition of coercions (#9743)\nto check that any circular inheritance path of `C >-> C` is definitionally equal\nto the identity function of the class `C`. Moreover, for a new inheritance path\n`p : C >-> D` and existing (valid) one `q : C >-> D`, the new mechanism does not\nreport the ambiguity of `p` and `q` if they have a common element, that is to\nsay:\n`p = p1 @ [c] @ p2` and `q = q1 @ [c] @ q2`\n  for some coercion `c` and inheritance paths `p1`, `p2`, `q1`, and `q2`.\nIn that case, convertibility of `p1` and `q1`, also, `p2` and `q2` should be\nchecked; thus, checking the ambiguity of `p` and `q` is redundant with them.\n\nIf the new mechanism does not report any ambiguous path, the inheritance graph\nmust be coherent [Barthe 1995, Sect. 3.2] [Saïbi 1997, Sect. 7]:\n1. for any circular path `p : C >-> C`, `p` is definitionally equal to the\n   identity function, and\n2. for any two paths `p, q : C >-> D`, `p` and `q` are convertible.\n\n[Barthe 1995] Gilles Barthe, Implicit coercions in type systems, In: TYPES '95,\n              LNCS, vol 1158, Springer, 1996, pp 1-15.\n[Saïbi 1997]  Amokrane Saïbi, Typing algorithm in type theory with inheritance,\n              In: POPL '97, ACM, 1997, pp 292-301.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-12-08T19:24:43.000+09:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-12-20T01:40:29.000+09:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/025dc51c2eef7e7ea302465ff05d04d6fd4e7173"},"pipeline":{"id":104416496,"iid":12767,"project_id":6138686,"sha":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","ref":"pr-11258","status":"failed","source":"push","created_at":"2019-12-19T16:40:58.112Z","updated_at":"2019-12-19T20:11:06.043Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/104416496"},"web_url":"https://gitlab.com/coq/coq/-/jobs/384922425","artifacts":[{"file_type":"trace","size":175511,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":384922421,"status":"success","stage":"stage-2","name":"library:ci-verdi-raft","ref":"pr-11258","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-12-19T16:40:58.876Z","started_at":"2019-12-19T17:10:19.298Z","finished_at":"2019-12-19T17:39:53.506Z","duration":1774.208396,"queued_duration":2.147543,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","short_id":"025dc51c","created_at":"2019-12-20T01:40:29.000+09:00","parent_ids":["6621e7cf79d7d824461de14007b2a06cabe59aef"],"title":"Coherence checking for coercions","message":"Coherence checking for coercions\n\nThis change improves the relaxed ambiguous path condition of coercions (#9743)\nto check that any circular inheritance path of `C >-> C` is definitionally equal\nto the identity function of the class `C`. Moreover, for a new inheritance path\n`p : C >-> D` and existing (valid) one `q : C >-> D`, the new mechanism does not\nreport the ambiguity of `p` and `q` if they have a common element, that is to\nsay:\n`p = p1 @ [c] @ p2` and `q = q1 @ [c] @ q2`\n  for some coercion `c` and inheritance paths `p1`, `p2`, `q1`, and `q2`.\nIn that case, convertibility of `p1` and `q1`, also, `p2` and `q2` should be\nchecked; thus, checking the ambiguity of `p` and `q` is redundant with them.\n\nIf the new mechanism does not report any ambiguous path, the inheritance graph\nmust be coherent [Barthe 1995, Sect. 3.2] [Saïbi 1997, Sect. 7]:\n1. for any circular path `p : C >-> C`, `p` is definitionally equal to the\n   identity function, and\n2. for any two paths `p, q : C >-> D`, `p` and `q` are convertible.\n\n[Barthe 1995] Gilles Barthe, Implicit coercions in type systems, In: TYPES '95,\n              LNCS, vol 1158, Springer, 1996, pp 1-15.\n[Saïbi 1997]  Amokrane Saïbi, Typing algorithm in type theory with inheritance,\n              In: POPL '97, ACM, 1997, pp 292-301.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-12-08T19:24:43.000+09:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-12-20T01:40:29.000+09:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/025dc51c2eef7e7ea302465ff05d04d6fd4e7173"},"pipeline":{"id":104416496,"iid":12767,"project_id":6138686,"sha":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","ref":"pr-11258","status":"failed","source":"push","created_at":"2019-12-19T16:40:58.112Z","updated_at":"2019-12-19T20:11:06.043Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/104416496"},"web_url":"https://gitlab.com/coq/coq/-/jobs/384922421","artifacts":[{"file_type":"trace","size":178078,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":384922419,"status":"success","stage":"stage-2","name":"library:ci-unimath","ref":"pr-11258","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-12-19T16:40:58.863Z","started_at":"2019-12-19T17:10:19.192Z","finished_at":"2019-12-19T18:09:40.209Z","duration":3561.017236,"queued_duration":2.091472,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","short_id":"025dc51c","created_at":"2019-12-20T01:40:29.000+09:00","parent_ids":["6621e7cf79d7d824461de14007b2a06cabe59aef"],"title":"Coherence checking for coercions","message":"Coherence checking for coercions\n\nThis change improves the relaxed ambiguous path condition of coercions (#9743)\nto check that any circular inheritance path of `C >-> C` is definitionally equal\nto the identity function of the class `C`. Moreover, for a new inheritance path\n`p : C >-> D` and existing (valid) one `q : C >-> D`, the new mechanism does not\nreport the ambiguity of `p` and `q` if they have a common element, that is to\nsay:\n`p = p1 @ [c] @ p2` and `q = q1 @ [c] @ q2`\n  for some coercion `c` and inheritance paths `p1`, `p2`, `q1`, and `q2`.\nIn that case, convertibility of `p1` and `q1`, also, `p2` and `q2` should be\nchecked; thus, checking the ambiguity of `p` and `q` is redundant with them.\n\nIf the new mechanism does not report any ambiguous path, the inheritance graph\nmust be coherent [Barthe 1995, Sect. 3.2] [Saïbi 1997, Sect. 7]:\n1. for any circular path `p : C >-> C`, `p` is definitionally equal to the\n   identity function, and\n2. for any two paths `p, q : C >-> D`, `p` and `q` are convertible.\n\n[Barthe 1995] Gilles Barthe, Implicit coercions in type systems, In: TYPES '95,\n              LNCS, vol 1158, Springer, 1996, pp 1-15.\n[Saïbi 1997]  Amokrane Saïbi, Typing algorithm in type theory with inheritance,\n              In: POPL '97, ACM, 1997, pp 292-301.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-12-08T19:24:43.000+09:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-12-20T01:40:29.000+09:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/025dc51c2eef7e7ea302465ff05d04d6fd4e7173"},"pipeline":{"id":104416496,"iid":12767,"project_id":6138686,"sha":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","ref":"pr-11258","status":"failed","source":"push","created_at":"2019-12-19T16:40:58.112Z","updated_at":"2019-12-19T20:11:06.043Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/104416496"},"web_url":"https://gitlab.com/coq/coq/-/jobs/384922419","artifacts":[{"file_type":"trace","size":231081,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":384922415,"status":"success","stage":"stage-2","name":"library:ci-tlc","ref":"pr-11258","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-12-19T16:40:58.847Z","started_at":"2019-12-19T16:59:16.779Z","finished_at":"2019-12-19T17:03:52.860Z","duration":276.081448,"queued_duration":1.91046,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","short_id":"025dc51c","created_at":"2019-12-20T01:40:29.000+09:00","parent_ids":["6621e7cf79d7d824461de14007b2a06cabe59aef"],"title":"Coherence checking for coercions","message":"Coherence checking for coercions\n\nThis change improves the relaxed ambiguous path condition of coercions (#9743)\nto check that any circular inheritance path of `C >-> C` is definitionally equal\nto the identity function of the class `C`. Moreover, for a new inheritance path\n`p : C >-> D` and existing (valid) one `q : C >-> D`, the new mechanism does not\nreport the ambiguity of `p` and `q` if they have a common element, that is to\nsay:\n`p = p1 @ [c] @ p2` and `q = q1 @ [c] @ q2`\n  for some coercion `c` and inheritance paths `p1`, `p2`, `q1`, and `q2`.\nIn that case, convertibility of `p1` and `q1`, also, `p2` and `q2` should be\nchecked; thus, checking the ambiguity of `p` and `q` is redundant with them.\n\nIf the new mechanism does not report any ambiguous path, the inheritance graph\nmust be coherent [Barthe 1995, Sect. 3.2] [Saïbi 1997, Sect. 7]:\n1. for any circular path `p : C >-> C`, `p` is definitionally equal to the\n   identity function, and\n2. for any two paths `p, q : C >-> D`, `p` and `q` are convertible.\n\n[Barthe 1995] Gilles Barthe, Implicit coercions in type systems, In: TYPES '95,\n              LNCS, vol 1158, Springer, 1996, pp 1-15.\n[Saïbi 1997]  Amokrane Saïbi, Typing algorithm in type theory with inheritance,\n              In: POPL '97, ACM, 1997, pp 292-301.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-12-08T19:24:43.000+09:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-12-20T01:40:29.000+09:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/025dc51c2eef7e7ea302465ff05d04d6fd4e7173"},"pipeline":{"id":104416496,"iid":12767,"project_id":6138686,"sha":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","ref":"pr-11258","status":"failed","source":"push","created_at":"2019-12-19T16:40:58.112Z","updated_at":"2019-12-19T20:11:06.043Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/104416496"},"web_url":"https://gitlab.com/coq/coq/-/jobs/384922415","artifacts":[{"file_type":"trace","size":36793,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":384922412,"status":"success","stage":"stage-2","name":"library:ci-stdlib2","ref":"pr-11258","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-12-19T16:40:58.831Z","started_at":"2019-12-19T17:10:19.129Z","finished_at":"2019-12-19T17:16:04.989Z","duration":345.860286,"queued_duration":2.077269,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","short_id":"025dc51c","created_at":"2019-12-20T01:40:29.000+09:00","parent_ids":["6621e7cf79d7d824461de14007b2a06cabe59aef"],"title":"Coherence checking for coercions","message":"Coherence checking for coercions\n\nThis change improves the relaxed ambiguous path condition of coercions (#9743)\nto check that any circular inheritance path of `C >-> C` is definitionally equal\nto the identity function of the class `C`. Moreover, for a new inheritance path\n`p : C >-> D` and existing (valid) one `q : C >-> D`, the new mechanism does not\nreport the ambiguity of `p` and `q` if they have a common element, that is to\nsay:\n`p = p1 @ [c] @ p2` and `q = q1 @ [c] @ q2`\n  for some coercion `c` and inheritance paths `p1`, `p2`, `q1`, and `q2`.\nIn that case, convertibility of `p1` and `q1`, also, `p2` and `q2` should be\nchecked; thus, checking the ambiguity of `p` and `q` is redundant with them.\n\nIf the new mechanism does not report any ambiguous path, the inheritance graph\nmust be coherent [Barthe 1995, Sect. 3.2] [Saïbi 1997, Sect. 7]:\n1. for any circular path `p : C >-> C`, `p` is definitionally equal to the\n   identity function, and\n2. for any two paths `p, q : C >-> D`, `p` and `q` are convertible.\n\n[Barthe 1995] Gilles Barthe, Implicit coercions in type systems, In: TYPES '95,\n              LNCS, vol 1158, Springer, 1996, pp 1-15.\n[Saïbi 1997]  Amokrane Saïbi, Typing algorithm in type theory with inheritance,\n              In: POPL '97, ACM, 1997, pp 292-301.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-12-08T19:24:43.000+09:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-12-20T01:40:29.000+09:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/025dc51c2eef7e7ea302465ff05d04d6fd4e7173"},"pipeline":{"id":104416496,"iid":12767,"project_id":6138686,"sha":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","ref":"pr-11258","status":"failed","source":"push","created_at":"2019-12-19T16:40:58.112Z","updated_at":"2019-12-19T20:11:06.043Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/104416496"},"web_url":"https://gitlab.com/coq/coq/-/jobs/384922412","artifacts":[{"file_type":"trace","size":259326,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":384922410,"status":"success","stage":"stage-2","name":"library:ci-sf","ref":"pr-11258","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-12-19T16:40:58.816Z","started_at":"2019-12-19T16:59:16.695Z","finished_at":"2019-12-19T17:04:24.591Z","duration":307.895393,"queued_duration":1.990001,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","short_id":"025dc51c","created_at":"2019-12-20T01:40:29.000+09:00","parent_ids":["6621e7cf79d7d824461de14007b2a06cabe59aef"],"title":"Coherence checking for coercions","message":"Coherence checking for coercions\n\nThis change improves the relaxed ambiguous path condition of coercions (#9743)\nto check that any circular inheritance path of `C >-> C` is definitionally equal\nto the identity function of the class `C`. Moreover, for a new inheritance path\n`p : C >-> D` and existing (valid) one `q : C >-> D`, the new mechanism does not\nreport the ambiguity of `p` and `q` if they have a common element, that is to\nsay:\n`p = p1 @ [c] @ p2` and `q = q1 @ [c] @ q2`\n  for some coercion `c` and inheritance paths `p1`, `p2`, `q1`, and `q2`.\nIn that case, convertibility of `p1` and `q1`, also, `p2` and `q2` should be\nchecked; thus, checking the ambiguity of `p` and `q` is redundant with them.\n\nIf the new mechanism does not report any ambiguous path, the inheritance graph\nmust be coherent [Barthe 1995, Sect. 3.2] [Saïbi 1997, Sect. 7]:\n1. for any circular path `p : C >-> C`, `p` is definitionally equal to the\n   identity function, and\n2. for any two paths `p, q : C >-> D`, `p` and `q` are convertible.\n\n[Barthe 1995] Gilles Barthe, Implicit coercions in type systems, In: TYPES '95,\n              LNCS, vol 1158, Springer, 1996, pp 1-15.\n[Saïbi 1997]  Amokrane Saïbi, Typing algorithm in type theory with inheritance,\n              In: POPL '97, ACM, 1997, pp 292-301.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-12-08T19:24:43.000+09:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-12-20T01:40:29.000+09:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/025dc51c2eef7e7ea302465ff05d04d6fd4e7173"},"pipeline":{"id":104416496,"iid":12767,"project_id":6138686,"sha":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","ref":"pr-11258","status":"failed","source":"push","created_at":"2019-12-19T16:40:58.112Z","updated_at":"2019-12-19T20:11:06.043Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/104416496"},"web_url":"https://gitlab.com/coq/coq/-/jobs/384922410","artifacts":[{"file_type":"trace","size":434660,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":384922407,"status":"success","stage":"stage-2","name":"library:ci-math-comp","ref":"pr-11258","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-12-19T16:40:58.801Z","started_at":"2019-12-19T17:10:18.969Z","finished_at":"2019-12-19T18:34:50.003Z","duration":5071.033358,"queued_duration":1.962002,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","short_id":"025dc51c","created_at":"2019-12-20T01:40:29.000+09:00","parent_ids":["6621e7cf79d7d824461de14007b2a06cabe59aef"],"title":"Coherence checking for coercions","message":"Coherence checking for coercions\n\nThis change improves the relaxed ambiguous path condition of coercions (#9743)\nto check that any circular inheritance path of `C >-> C` is definitionally equal\nto the identity function of the class `C`. Moreover, for a new inheritance path\n`p : C >-> D` and existing (valid) one `q : C >-> D`, the new mechanism does not\nreport the ambiguity of `p` and `q` if they have a common element, that is to\nsay:\n`p = p1 @ [c] @ p2` and `q = q1 @ [c] @ q2`\n  for some coercion `c` and inheritance paths `p1`, `p2`, `q1`, and `q2`.\nIn that case, convertibility of `p1` and `q1`, also, `p2` and `q2` should be\nchecked; thus, checking the ambiguity of `p` and `q` is redundant with them.\n\nIf the new mechanism does not report any ambiguous path, the inheritance graph\nmust be coherent [Barthe 1995, Sect. 3.2] [Saïbi 1997, Sect. 7]:\n1. for any circular path `p : C >-> C`, `p` is definitionally equal to the\n   identity function, and\n2. for any two paths `p, q : C >-> D`, `p` and `q` are convertible.\n\n[Barthe 1995] Gilles Barthe, Implicit coercions in type systems, In: TYPES '95,\n              LNCS, vol 1158, Springer, 1996, pp 1-15.\n[Saïbi 1997]  Amokrane Saïbi, Typing algorithm in type theory with inheritance,\n              In: POPL '97, ACM, 1997, pp 292-301.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-12-08T19:24:43.000+09:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-12-20T01:40:29.000+09:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/025dc51c2eef7e7ea302465ff05d04d6fd4e7173"},"pipeline":{"id":104416496,"iid":12767,"project_id":6138686,"sha":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","ref":"pr-11258","status":"failed","source":"push","created_at":"2019-12-19T16:40:58.112Z","updated_at":"2019-12-19T20:11:06.043Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/104416496"},"web_url":"https://gitlab.com/coq/coq/-/jobs/384922407","artifacts":[{"file_type":"trace","size":405544,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":384922405,"status":"success","stage":"stage-2","name":"library:ci-iris-lambda-rust","ref":"pr-11258","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-12-19T16:40:58.785Z","started_at":"2019-12-19T17:10:18.925Z","finished_at":"2019-12-19T18:01:24.588Z","duration":3065.663588,"queued_duration":1.962475,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","short_id":"025dc51c","created_at":"2019-12-20T01:40:29.000+09:00","parent_ids":["6621e7cf79d7d824461de14007b2a06cabe59aef"],"title":"Coherence checking for coercions","message":"Coherence checking for coercions\n\nThis change improves the relaxed ambiguous path condition of coercions (#9743)\nto check that any circular inheritance path of `C >-> C` is definitionally equal\nto the identity function of the class `C`. Moreover, for a new inheritance path\n`p : C >-> D` and existing (valid) one `q : C >-> D`, the new mechanism does not\nreport the ambiguity of `p` and `q` if they have a common element, that is to\nsay:\n`p = p1 @ [c] @ p2` and `q = q1 @ [c] @ q2`\n  for some coercion `c` and inheritance paths `p1`, `p2`, `q1`, and `q2`.\nIn that case, convertibility of `p1` and `q1`, also, `p2` and `q2` should be\nchecked; thus, checking the ambiguity of `p` and `q` is redundant with them.\n\nIf the new mechanism does not report any ambiguous path, the inheritance graph\nmust be coherent [Barthe 1995, Sect. 3.2] [Saïbi 1997, Sect. 7]:\n1. for any circular path `p : C >-> C`, `p` is definitionally equal to the\n   identity function, and\n2. for any two paths `p, q : C >-> D`, `p` and `q` are convertible.\n\n[Barthe 1995] Gilles Barthe, Implicit coercions in type systems, In: TYPES '95,\n              LNCS, vol 1158, Springer, 1996, pp 1-15.\n[Saïbi 1997]  Amokrane Saïbi, Typing algorithm in type theory with inheritance,\n              In: POPL '97, ACM, 1997, pp 292-301.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-12-08T19:24:43.000+09:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-12-20T01:40:29.000+09:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/025dc51c2eef7e7ea302465ff05d04d6fd4e7173"},"pipeline":{"id":104416496,"iid":12767,"project_id":6138686,"sha":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","ref":"pr-11258","status":"failed","source":"push","created_at":"2019-12-19T16:40:58.112Z","updated_at":"2019-12-19T20:11:06.043Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/104416496"},"web_url":"https://gitlab.com/coq/coq/-/jobs/384922405","artifacts":[{"file_type":"trace","size":297061,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":384922402,"status":"success","stage":"stage-2","name":"library:ci-hott","ref":"pr-11258","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-12-19T16:40:58.770Z","started_at":"2019-12-19T16:59:16.639Z","finished_at":"2019-12-19T17:15:02.621Z","duration":945.982449,"queued_duration":1.980946,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","short_id":"025dc51c","created_at":"2019-12-20T01:40:29.000+09:00","parent_ids":["6621e7cf79d7d824461de14007b2a06cabe59aef"],"title":"Coherence checking for coercions","message":"Coherence checking for coercions\n\nThis change improves the relaxed ambiguous path condition of coercions (#9743)\nto check that any circular inheritance path of `C >-> C` is definitionally equal\nto the identity function of the class `C`. Moreover, for a new inheritance path\n`p : C >-> D` and existing (valid) one `q : C >-> D`, the new mechanism does not\nreport the ambiguity of `p` and `q` if they have a common element, that is to\nsay:\n`p = p1 @ [c] @ p2` and `q = q1 @ [c] @ q2`\n  for some coercion `c` and inheritance paths `p1`, `p2`, `q1`, and `q2`.\nIn that case, convertibility of `p1` and `q1`, also, `p2` and `q2` should be\nchecked; thus, checking the ambiguity of `p` and `q` is redundant with them.\n\nIf the new mechanism does not report any ambiguous path, the inheritance graph\nmust be coherent [Barthe 1995, Sect. 3.2] [Saïbi 1997, Sect. 7]:\n1. for any circular path `p : C >-> C`, `p` is definitionally equal to the\n   identity function, and\n2. for any two paths `p, q : C >-> D`, `p` and `q` are convertible.\n\n[Barthe 1995] Gilles Barthe, Implicit coercions in type systems, In: TYPES '95,\n              LNCS, vol 1158, Springer, 1996, pp 1-15.\n[Saïbi 1997]  Amokrane Saïbi, Typing algorithm in type theory with inheritance,\n              In: POPL '97, ACM, 1997, pp 292-301.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-12-08T19:24:43.000+09:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-12-20T01:40:29.000+09:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/025dc51c2eef7e7ea302465ff05d04d6fd4e7173"},"pipeline":{"id":104416496,"iid":12767,"project_id":6138686,"sha":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","ref":"pr-11258","status":"failed","source":"push","created_at":"2019-12-19T16:40:58.112Z","updated_at":"2019-12-19T20:11:06.043Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/104416496"},"web_url":"https://gitlab.com/coq/coq/-/jobs/384922402","artifacts":[{"file_type":"trace","size":121335,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":384922401,"status":"success","stage":"stage-2","name":"library:ci-geocoq","ref":"pr-11258","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-12-19T16:40:58.755Z","started_at":"2019-12-19T17:10:18.773Z","finished_at":"2019-12-19T17:48:27.014Z","duration":2288.240699,"queued_duration":1.863966,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","short_id":"025dc51c","created_at":"2019-12-20T01:40:29.000+09:00","parent_ids":["6621e7cf79d7d824461de14007b2a06cabe59aef"],"title":"Coherence checking for coercions","message":"Coherence checking for coercions\n\nThis change improves the relaxed ambiguous path condition of coercions (#9743)\nto check that any circular inheritance path of `C >-> C` is definitionally equal\nto the identity function of the class `C`. Moreover, for a new inheritance path\n`p : C >-> D` and existing (valid) one `q : C >-> D`, the new mechanism does not\nreport the ambiguity of `p` and `q` if they have a common element, that is to\nsay:\n`p = p1 @ [c] @ p2` and `q = q1 @ [c] @ q2`\n  for some coercion `c` and inheritance paths `p1`, `p2`, `q1`, and `q2`.\nIn that case, convertibility of `p1` and `q1`, also, `p2` and `q2` should be\nchecked; thus, checking the ambiguity of `p` and `q` is redundant with them.\n\nIf the new mechanism does not report any ambiguous path, the inheritance graph\nmust be coherent [Barthe 1995, Sect. 3.2] [Saïbi 1997, Sect. 7]:\n1. for any circular path `p : C >-> C`, `p` is definitionally equal to the\n   identity function, and\n2. for any two paths `p, q : C >-> D`, `p` and `q` are convertible.\n\n[Barthe 1995] Gilles Barthe, Implicit coercions in type systems, In: TYPES '95,\n              LNCS, vol 1158, Springer, 1996, pp 1-15.\n[Saïbi 1997]  Amokrane Saïbi, Typing algorithm in type theory with inheritance,\n              In: POPL '97, ACM, 1997, pp 292-301.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-12-08T19:24:43.000+09:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-12-20T01:40:29.000+09:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/025dc51c2eef7e7ea302465ff05d04d6fd4e7173"},"pipeline":{"id":104416496,"iid":12767,"project_id":6138686,"sha":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","ref":"pr-11258","status":"failed","source":"push","created_at":"2019-12-19T16:40:58.112Z","updated_at":"2019-12-19T20:11:06.043Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/104416496"},"web_url":"https://gitlab.com/coq/coq/-/jobs/384922401","artifacts":[{"file_type":"trace","size":499242,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":384922399,"status":"success","stage":"stage-2","name":"library:ci-flocq","ref":"pr-11258","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-12-19T16:40:58.740Z","started_at":"2019-12-19T16:59:16.591Z","finished_at":"2019-12-19T17:07:06.214Z","duration":469.622345,"queued_duration":1.983576,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","short_id":"025dc51c","created_at":"2019-12-20T01:40:29.000+09:00","parent_ids":["6621e7cf79d7d824461de14007b2a06cabe59aef"],"title":"Coherence checking for coercions","message":"Coherence checking for coercions\n\nThis change improves the relaxed ambiguous path condition of coercions (#9743)\nto check that any circular inheritance path of `C >-> C` is definitionally equal\nto the identity function of the class `C`. Moreover, for a new inheritance path\n`p : C >-> D` and existing (valid) one `q : C >-> D`, the new mechanism does not\nreport the ambiguity of `p` and `q` if they have a common element, that is to\nsay:\n`p = p1 @ [c] @ p2` and `q = q1 @ [c] @ q2`\n  for some coercion `c` and inheritance paths `p1`, `p2`, `q1`, and `q2`.\nIn that case, convertibility of `p1` and `q1`, also, `p2` and `q2` should be\nchecked; thus, checking the ambiguity of `p` and `q` is redundant with them.\n\nIf the new mechanism does not report any ambiguous path, the inheritance graph\nmust be coherent [Barthe 1995, Sect. 3.2] [Saïbi 1997, Sect. 7]:\n1. for any circular path `p : C >-> C`, `p` is definitionally equal to the\n   identity function, and\n2. for any two paths `p, q : C >-> D`, `p` and `q` are convertible.\n\n[Barthe 1995] Gilles Barthe, Implicit coercions in type systems, In: TYPES '95,\n              LNCS, vol 1158, Springer, 1996, pp 1-15.\n[Saïbi 1997]  Amokrane Saïbi, Typing algorithm in type theory with inheritance,\n              In: POPL '97, ACM, 1997, pp 292-301.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-12-08T19:24:43.000+09:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-12-20T01:40:29.000+09:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/025dc51c2eef7e7ea302465ff05d04d6fd4e7173"},"pipeline":{"id":104416496,"iid":12767,"project_id":6138686,"sha":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","ref":"pr-11258","status":"failed","source":"push","created_at":"2019-12-19T16:40:58.112Z","updated_at":"2019-12-19T20:11:06.043Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/104416496"},"web_url":"https://gitlab.com/coq/coq/-/jobs/384922399","artifacts":[{"file_type":"trace","size":37111,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":384922396,"status":"success","stage":"stage-2","name":"library:ci-fiat-crypto-legacy","ref":"pr-11258","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-12-19T16:40:58.725Z","started_at":"2019-12-19T17:10:18.352Z","finished_at":"2019-12-19T18:22:07.658Z","duration":4309.305792,"queued_duration":1.499449,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","short_id":"025dc51c","created_at":"2019-12-20T01:40:29.000+09:00","parent_ids":["6621e7cf79d7d824461de14007b2a06cabe59aef"],"title":"Coherence checking for coercions","message":"Coherence checking for coercions\n\nThis change improves the relaxed ambiguous path condition of coercions (#9743)\nto check that any circular inheritance path of `C >-> C` is definitionally equal\nto the identity function of the class `C`. Moreover, for a new inheritance path\n`p : C >-> D` and existing (valid) one `q : C >-> D`, the new mechanism does not\nreport the ambiguity of `p` and `q` if they have a common element, that is to\nsay:\n`p = p1 @ [c] @ p2` and `q = q1 @ [c] @ q2`\n  for some coercion `c` and inheritance paths `p1`, `p2`, `q1`, and `q2`.\nIn that case, convertibility of `p1` and `q1`, also, `p2` and `q2` should be\nchecked; thus, checking the ambiguity of `p` and `q` is redundant with them.\n\nIf the new mechanism does not report any ambiguous path, the inheritance graph\nmust be coherent [Barthe 1995, Sect. 3.2] [Saïbi 1997, Sect. 7]:\n1. for any circular path `p : C >-> C`, `p` is definitionally equal to the\n   identity function, and\n2. for any two paths `p, q : C >-> D`, `p` and `q` are convertible.\n\n[Barthe 1995] Gilles Barthe, Implicit coercions in type systems, In: TYPES '95,\n              LNCS, vol 1158, Springer, 1996, pp 1-15.\n[Saïbi 1997]  Amokrane Saïbi, Typing algorithm in type theory with inheritance,\n              In: POPL '97, ACM, 1997, pp 292-301.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-12-08T19:24:43.000+09:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-12-20T01:40:29.000+09:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/025dc51c2eef7e7ea302465ff05d04d6fd4e7173"},"pipeline":{"id":104416496,"iid":12767,"project_id":6138686,"sha":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","ref":"pr-11258","status":"failed","source":"push","created_at":"2019-12-19T16:40:58.112Z","updated_at":"2019-12-19T20:11:06.043Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/104416496"},"web_url":"https://gitlab.com/coq/coq/-/jobs/384922396","artifacts":[{"file_type":"trace","size":562505,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":384922394,"status":"success","stage":"stage-2","name":"library:ci-fcsl-pcm","ref":"pr-11258","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-12-19T16:40:58.710Z","started_at":"2019-12-19T16:59:16.551Z","finished_at":"2019-12-19T17:03:59.637Z","duration":283.085822,"queued_duration":1.990798,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","short_id":"025dc51c","created_at":"2019-12-20T01:40:29.000+09:00","parent_ids":["6621e7cf79d7d824461de14007b2a06cabe59aef"],"title":"Coherence checking for coercions","message":"Coherence checking for coercions\n\nThis change improves the relaxed ambiguous path condition of coercions (#9743)\nto check that any circular inheritance path of `C >-> C` is definitionally equal\nto the identity function of the class `C`. Moreover, for a new inheritance path\n`p : C >-> D` and existing (valid) one `q : C >-> D`, the new mechanism does not\nreport the ambiguity of `p` and `q` if they have a common element, that is to\nsay:\n`p = p1 @ [c] @ p2` and `q = q1 @ [c] @ q2`\n  for some coercion `c` and inheritance paths `p1`, `p2`, `q1`, and `q2`.\nIn that case, convertibility of `p1` and `q1`, also, `p2` and `q2` should be\nchecked; thus, checking the ambiguity of `p` and `q` is redundant with them.\n\nIf the new mechanism does not report any ambiguous path, the inheritance graph\nmust be coherent [Barthe 1995, Sect. 3.2] [Saïbi 1997, Sect. 7]:\n1. for any circular path `p : C >-> C`, `p` is definitionally equal to the\n   identity function, and\n2. for any two paths `p, q : C >-> D`, `p` and `q` are convertible.\n\n[Barthe 1995] Gilles Barthe, Implicit coercions in type systems, In: TYPES '95,\n              LNCS, vol 1158, Springer, 1996, pp 1-15.\n[Saïbi 1997]  Amokrane Saïbi, Typing algorithm in type theory with inheritance,\n              In: POPL '97, ACM, 1997, pp 292-301.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-12-08T19:24:43.000+09:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-12-20T01:40:29.000+09:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/025dc51c2eef7e7ea302465ff05d04d6fd4e7173"},"pipeline":{"id":104416496,"iid":12767,"project_id":6138686,"sha":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","ref":"pr-11258","status":"failed","source":"push","created_at":"2019-12-19T16:40:58.112Z","updated_at":"2019-12-19T20:11:06.043Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/104416496"},"web_url":"https://gitlab.com/coq/coq/-/jobs/384922394","artifacts":[{"file_type":"trace","size":130622,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":384922392,"status":"success","stage":"stage-2","name":"library:ci-cross-crypto","ref":"pr-11258","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-12-19T16:40:58.696Z","started_at":"2019-12-19T16:59:16.513Z","finished_at":"2019-12-19T17:37:24.575Z","duration":2288.06207,"queued_duration":2.003551,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","short_id":"025dc51c","created_at":"2019-12-20T01:40:29.000+09:00","parent_ids":["6621e7cf79d7d824461de14007b2a06cabe59aef"],"title":"Coherence checking for coercions","message":"Coherence checking for coercions\n\nThis change improves the relaxed ambiguous path condition of coercions (#9743)\nto check that any circular inheritance path of `C >-> C` is definitionally equal\nto the identity function of the class `C`. Moreover, for a new inheritance path\n`p : C >-> D` and existing (valid) one `q : C >-> D`, the new mechanism does not\nreport the ambiguity of `p` and `q` if they have a common element, that is to\nsay:\n`p = p1 @ [c] @ p2` and `q = q1 @ [c] @ q2`\n  for some coercion `c` and inheritance paths `p1`, `p2`, `q1`, and `q2`.\nIn that case, convertibility of `p1` and `q1`, also, `p2` and `q2` should be\nchecked; thus, checking the ambiguity of `p` and `q` is redundant with them.\n\nIf the new mechanism does not report any ambiguous path, the inheritance graph\nmust be coherent [Barthe 1995, Sect. 3.2] [Saïbi 1997, Sect. 7]:\n1. for any circular path `p : C >-> C`, `p` is definitionally equal to the\n   identity function, and\n2. for any two paths `p, q : C >-> D`, `p` and `q` are convertible.\n\n[Barthe 1995] Gilles Barthe, Implicit coercions in type systems, In: TYPES '95,\n              LNCS, vol 1158, Springer, 1996, pp 1-15.\n[Saïbi 1997]  Amokrane Saïbi, Typing algorithm in type theory with inheritance,\n              In: POPL '97, ACM, 1997, pp 292-301.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-12-08T19:24:43.000+09:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-12-20T01:40:29.000+09:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/025dc51c2eef7e7ea302465ff05d04d6fd4e7173"},"pipeline":{"id":104416496,"iid":12767,"project_id":6138686,"sha":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","ref":"pr-11258","status":"failed","source":"push","created_at":"2019-12-19T16:40:58.112Z","updated_at":"2019-12-19T20:11:06.043Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/104416496"},"web_url":"https://gitlab.com/coq/coq/-/jobs/384922392","artifacts":[{"file_type":"trace","size":50818,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":384922390,"status":"success","stage":"stage-2","name":"library:ci-coquelicot","ref":"pr-11258","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-12-19T16:40:58.680Z","started_at":"2019-12-19T16:59:16.471Z","finished_at":"2019-12-19T17:05:34.779Z","duration":378.307908,"queued_duration":2.006132,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","short_id":"025dc51c","created_at":"2019-12-20T01:40:29.000+09:00","parent_ids":["6621e7cf79d7d824461de14007b2a06cabe59aef"],"title":"Coherence checking for coercions","message":"Coherence checking for coercions\n\nThis change improves the relaxed ambiguous path condition of coercions (#9743)\nto check that any circular inheritance path of `C >-> C` is definitionally equal\nto the identity function of the class `C`. Moreover, for a new inheritance path\n`p : C >-> D` and existing (valid) one `q : C >-> D`, the new mechanism does not\nreport the ambiguity of `p` and `q` if they have a common element, that is to\nsay:\n`p = p1 @ [c] @ p2` and `q = q1 @ [c] @ q2`\n  for some coercion `c` and inheritance paths `p1`, `p2`, `q1`, and `q2`.\nIn that case, convertibility of `p1` and `q1`, also, `p2` and `q2` should be\nchecked; thus, checking the ambiguity of `p` and `q` is redundant with them.\n\nIf the new mechanism does not report any ambiguous path, the inheritance graph\nmust be coherent [Barthe 1995, Sect. 3.2] [Saïbi 1997, Sect. 7]:\n1. for any circular path `p : C >-> C`, `p` is definitionally equal to the\n   identity function, and\n2. for any two paths `p, q : C >-> D`, `p` and `q` are convertible.\n\n[Barthe 1995] Gilles Barthe, Implicit coercions in type systems, In: TYPES '95,\n              LNCS, vol 1158, Springer, 1996, pp 1-15.\n[Saïbi 1997]  Amokrane Saïbi, Typing algorithm in type theory with inheritance,\n              In: POPL '97, ACM, 1997, pp 292-301.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-12-08T19:24:43.000+09:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-12-20T01:40:29.000+09:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/025dc51c2eef7e7ea302465ff05d04d6fd4e7173"},"pipeline":{"id":104416496,"iid":12767,"project_id":6138686,"sha":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","ref":"pr-11258","status":"failed","source":"push","created_at":"2019-12-19T16:40:58.112Z","updated_at":"2019-12-19T20:11:06.043Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/104416496"},"web_url":"https://gitlab.com/coq/coq/-/jobs/384922390","artifacts":[{"file_type":"trace","size":163207,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":384922388,"status":"success","stage":"stage-2","name":"library:ci-compcert","ref":"pr-11258","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-12-19T16:40:58.665Z","started_at":"2019-12-19T17:10:17.857Z","finished_at":"2019-12-19T17:31:43.765Z","duration":1285.908372,"queued_duration":1.066109,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","short_id":"025dc51c","created_at":"2019-12-20T01:40:29.000+09:00","parent_ids":["6621e7cf79d7d824461de14007b2a06cabe59aef"],"title":"Coherence checking for coercions","message":"Coherence checking for coercions\n\nThis change improves the relaxed ambiguous path condition of coercions (#9743)\nto check that any circular inheritance path of `C >-> C` is definitionally equal\nto the identity function of the class `C`. Moreover, for a new inheritance path\n`p : C >-> D` and existing (valid) one `q : C >-> D`, the new mechanism does not\nreport the ambiguity of `p` and `q` if they have a common element, that is to\nsay:\n`p = p1 @ [c] @ p2` and `q = q1 @ [c] @ q2`\n  for some coercion `c` and inheritance paths `p1`, `p2`, `q1`, and `q2`.\nIn that case, convertibility of `p1` and `q1`, also, `p2` and `q2` should be\nchecked; thus, checking the ambiguity of `p` and `q` is redundant with them.\n\nIf the new mechanism does not report any ambiguous path, the inheritance graph\nmust be coherent [Barthe 1995, Sect. 3.2] [Saïbi 1997, Sect. 7]:\n1. for any circular path `p : C >-> C`, `p` is definitionally equal to the\n   identity function, and\n2. for any two paths `p, q : C >-> D`, `p` and `q` are convertible.\n\n[Barthe 1995] Gilles Barthe, Implicit coercions in type systems, In: TYPES '95,\n              LNCS, vol 1158, Springer, 1996, pp 1-15.\n[Saïbi 1997]  Amokrane Saïbi, Typing algorithm in type theory with inheritance,\n              In: POPL '97, ACM, 1997, pp 292-301.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-12-08T19:24:43.000+09:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-12-20T01:40:29.000+09:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/025dc51c2eef7e7ea302465ff05d04d6fd4e7173"},"pipeline":{"id":104416496,"iid":12767,"project_id":6138686,"sha":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","ref":"pr-11258","status":"failed","source":"push","created_at":"2019-12-19T16:40:58.112Z","updated_at":"2019-12-19T20:11:06.043Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/104416496"},"web_url":"https://gitlab.com/coq/coq/-/jobs/384922388","artifacts":[{"file_type":"trace","size":4194361,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":384922386,"status":"failed","stage":"stage-2","name":"library:ci-bedrock2","ref":"pr-11258","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-12-19T16:40:58.649Z","started_at":"2019-12-19T17:10:17.769Z","finished_at":"2019-12-19T20:11:05.891Z","duration":10848.12122,"queued_duration":1.031423,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","short_id":"025dc51c","created_at":"2019-12-20T01:40:29.000+09:00","parent_ids":["6621e7cf79d7d824461de14007b2a06cabe59aef"],"title":"Coherence checking for coercions","message":"Coherence checking for coercions\n\nThis change improves the relaxed ambiguous path condition of coercions (#9743)\nto check that any circular inheritance path of `C >-> C` is definitionally equal\nto the identity function of the class `C`. Moreover, for a new inheritance path\n`p : C >-> D` and existing (valid) one `q : C >-> D`, the new mechanism does not\nreport the ambiguity of `p` and `q` if they have a common element, that is to\nsay:\n`p = p1 @ [c] @ p2` and `q = q1 @ [c] @ q2`\n  for some coercion `c` and inheritance paths `p1`, `p2`, `q1`, and `q2`.\nIn that case, convertibility of `p1` and `q1`, also, `p2` and `q2` should be\nchecked; thus, checking the ambiguity of `p` and `q` is redundant with them.\n\nIf the new mechanism does not report any ambiguous path, the inheritance graph\nmust be coherent [Barthe 1995, Sect. 3.2] [Saïbi 1997, Sect. 7]:\n1. for any circular path `p : C >-> C`, `p` is definitionally equal to the\n   identity function, and\n2. for any two paths `p, q : C >-> D`, `p` and `q` are convertible.\n\n[Barthe 1995] Gilles Barthe, Implicit coercions in type systems, In: TYPES '95,\n              LNCS, vol 1158, Springer, 1996, pp 1-15.\n[Saïbi 1997]  Amokrane Saïbi, Typing algorithm in type theory with inheritance,\n              In: POPL '97, ACM, 1997, pp 292-301.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-12-08T19:24:43.000+09:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-12-20T01:40:29.000+09:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/025dc51c2eef7e7ea302465ff05d04d6fd4e7173"},"pipeline":{"id":104416496,"iid":12767,"project_id":6138686,"sha":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","ref":"pr-11258","status":"failed","source":"push","created_at":"2019-12-19T16:40:58.112Z","updated_at":"2019-12-19T20:11:06.043Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/104416496"},"failure_reason":"job_execution_timeout","web_url":"https://gitlab.com/coq/coq/-/jobs/384922386","artifacts":[{"file_type":"trace","size":162661,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":384922383,"status":"success","stage":"stage-2","name":"library:ci-argosy","ref":"pr-11258","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-12-19T16:40:58.633Z","started_at":"2019-12-19T16:59:16.317Z","finished_at":"2019-12-19T17:03:47.366Z","duration":271.04887,"queued_duration":1.900078,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","short_id":"025dc51c","created_at":"2019-12-20T01:40:29.000+09:00","parent_ids":["6621e7cf79d7d824461de14007b2a06cabe59aef"],"title":"Coherence checking for coercions","message":"Coherence checking for coercions\n\nThis change improves the relaxed ambiguous path condition of coercions (#9743)\nto check that any circular inheritance path of `C >-> C` is definitionally equal\nto the identity function of the class `C`. Moreover, for a new inheritance path\n`p : C >-> D` and existing (valid) one `q : C >-> D`, the new mechanism does not\nreport the ambiguity of `p` and `q` if they have a common element, that is to\nsay:\n`p = p1 @ [c] @ p2` and `q = q1 @ [c] @ q2`\n  for some coercion `c` and inheritance paths `p1`, `p2`, `q1`, and `q2`.\nIn that case, convertibility of `p1` and `q1`, also, `p2` and `q2` should be\nchecked; thus, checking the ambiguity of `p` and `q` is redundant with them.\n\nIf the new mechanism does not report any ambiguous path, the inheritance graph\nmust be coherent [Barthe 1995, Sect. 3.2] [Saïbi 1997, Sect. 7]:\n1. for any circular path `p : C >-> C`, `p` is definitionally equal to the\n   identity function, and\n2. for any two paths `p, q : C >-> D`, `p` and `q` are convertible.\n\n[Barthe 1995] Gilles Barthe, Implicit coercions in type systems, In: TYPES '95,\n              LNCS, vol 1158, Springer, 1996, pp 1-15.\n[Saïbi 1997]  Amokrane Saïbi, Typing algorithm in type theory with inheritance,\n              In: POPL '97, ACM, 1997, pp 292-301.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-12-08T19:24:43.000+09:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-12-20T01:40:29.000+09:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/025dc51c2eef7e7ea302465ff05d04d6fd4e7173"},"pipeline":{"id":104416496,"iid":12767,"project_id":6138686,"sha":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","ref":"pr-11258","status":"failed","source":"push","created_at":"2019-12-19T16:40:58.112Z","updated_at":"2019-12-19T20:11:06.043Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/104416496"},"web_url":"https://gitlab.com/coq/coq/-/jobs/384922383","artifacts":[{"file_type":"trace","size":31206,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":384922382,"status":"success","stage":"stage-2","name":"validate:quick","ref":"pr-11258","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-12-19T16:40:58.614Z","started_at":"2019-12-19T17:00:12.741Z","finished_at":"2019-12-19T17:05:05.005Z","duration":292.264089,"queued_duration":0.61392,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","short_id":"025dc51c","created_at":"2019-12-20T01:40:29.000+09:00","parent_ids":["6621e7cf79d7d824461de14007b2a06cabe59aef"],"title":"Coherence checking for coercions","message":"Coherence checking for coercions\n\nThis change improves the relaxed ambiguous path condition of coercions (#9743)\nto check that any circular inheritance path of `C >-> C` is definitionally equal\nto the identity function of the class `C`. Moreover, for a new inheritance path\n`p : C >-> D` and existing (valid) one `q : C >-> D`, the new mechanism does not\nreport the ambiguity of `p` and `q` if they have a common element, that is to\nsay:\n`p = p1 @ [c] @ p2` and `q = q1 @ [c] @ q2`\n  for some coercion `c` and inheritance paths `p1`, `p2`, `q1`, and `q2`.\nIn that case, convertibility of `p1` and `q1`, also, `p2` and `q2` should be\nchecked; thus, checking the ambiguity of `p` and `q` is redundant with them.\n\nIf the new mechanism does not report any ambiguous path, the inheritance graph\nmust be coherent [Barthe 1995, Sect. 3.2] [Saïbi 1997, Sect. 7]:\n1. for any circular path `p : C >-> C`, `p` is definitionally equal to the\n   identity function, and\n2. for any two paths `p, q : C >-> D`, `p` and `q` are convertible.\n\n[Barthe 1995] Gilles Barthe, Implicit coercions in type systems, In: TYPES '95,\n              LNCS, vol 1158, Springer, 1996, pp 1-15.\n[Saïbi 1997]  Amokrane Saïbi, Typing algorithm in type theory with inheritance,\n              In: POPL '97, ACM, 1997, pp 292-301.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-12-08T19:24:43.000+09:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-12-20T01:40:29.000+09:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/025dc51c2eef7e7ea302465ff05d04d6fd4e7173"},"pipeline":{"id":104416496,"iid":12767,"project_id":6138686,"sha":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","ref":"pr-11258","status":"failed","source":"push","created_at":"2019-12-19T16:40:58.112Z","updated_at":"2019-12-19T20:11:06.043Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/104416496"},"web_url":"https://gitlab.com/coq/coq/-/jobs/384922382","artifacts":[{"file_type":"trace","size":70519,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2020-02-17T17:05:03.719Z","tag_list":[]}
{"id":384922379,"status":"success","stage":"stage-2","name":"validate:edge+flambda","ref":"pr-11258","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-12-19T16:40:58.595Z","started_at":"2019-12-19T17:10:17.729Z","finished_at":"2019-12-19T17:15:00.518Z","duration":282.78989,"queued_duration":1.046539,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","short_id":"025dc51c","created_at":"2019-12-20T01:40:29.000+09:00","parent_ids":["6621e7cf79d7d824461de14007b2a06cabe59aef"],"title":"Coherence checking for coercions","message":"Coherence checking for coercions\n\nThis change improves the relaxed ambiguous path condition of coercions (#9743)\nto check that any circular inheritance path of `C >-> C` is definitionally equal\nto the identity function of the class `C`. Moreover, for a new inheritance path\n`p : C >-> D` and existing (valid) one `q : C >-> D`, the new mechanism does not\nreport the ambiguity of `p` and `q` if they have a common element, that is to\nsay:\n`p = p1 @ [c] @ p2` and `q = q1 @ [c] @ q2`\n  for some coercion `c` and inheritance paths `p1`, `p2`, `q1`, and `q2`.\nIn that case, convertibility of `p1` and `q1`, also, `p2` and `q2` should be\nchecked; thus, checking the ambiguity of `p` and `q` is redundant with them.\n\nIf the new mechanism does not report any ambiguous path, the inheritance graph\nmust be coherent [Barthe 1995, Sect. 3.2] [Saïbi 1997, Sect. 7]:\n1. for any circular path `p : C >-> C`, `p` is definitionally equal to the\n   identity function, and\n2. for any two paths `p, q : C >-> D`, `p` and `q` are convertible.\n\n[Barthe 1995] Gilles Barthe, Implicit coercions in type systems, In: TYPES '95,\n              LNCS, vol 1158, Springer, 1996, pp 1-15.\n[Saïbi 1997]  Amokrane Saïbi, Typing algorithm in type theory with inheritance,\n              In: POPL '97, ACM, 1997, pp 292-301.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-12-08T19:24:43.000+09:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-12-20T01:40:29.000+09:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/025dc51c2eef7e7ea302465ff05d04d6fd4e7173"},"pipeline":{"id":104416496,"iid":12767,"project_id":6138686,"sha":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","ref":"pr-11258","status":"failed","source":"push","created_at":"2019-12-19T16:40:58.112Z","updated_at":"2019-12-19T20:11:06.043Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/104416496"},"web_url":"https://gitlab.com/coq/coq/-/jobs/384922379","artifacts":[{"file_type":"trace","size":71206,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2020-02-17T17:14:58.816Z","tag_list":[]}
{"id":384922377,"status":"success","stage":"stage-2","name":"validate:base+32bit","ref":"pr-11258","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-12-19T16:40:58.579Z","started_at":"2019-12-19T16:52:03.430Z","finished_at":"2019-12-19T16:56:45.238Z","duration":281.807567,"queued_duration":0.842362,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","short_id":"025dc51c","created_at":"2019-12-20T01:40:29.000+09:00","parent_ids":["6621e7cf79d7d824461de14007b2a06cabe59aef"],"title":"Coherence checking for coercions","message":"Coherence checking for coercions\n\nThis change improves the relaxed ambiguous path condition of coercions (#9743)\nto check that any circular inheritance path of `C >-> C` is definitionally equal\nto the identity function of the class `C`. Moreover, for a new inheritance path\n`p : C >-> D` and existing (valid) one `q : C >-> D`, the new mechanism does not\nreport the ambiguity of `p` and `q` if they have a common element, that is to\nsay:\n`p = p1 @ [c] @ p2` and `q = q1 @ [c] @ q2`\n  for some coercion `c` and inheritance paths `p1`, `p2`, `q1`, and `q2`.\nIn that case, convertibility of `p1` and `q1`, also, `p2` and `q2` should be\nchecked; thus, checking the ambiguity of `p` and `q` is redundant with them.\n\nIf the new mechanism does not report any ambiguous path, the inheritance graph\nmust be coherent [Barthe 1995, Sect. 3.2] [Saïbi 1997, Sect. 7]:\n1. for any circular path `p : C >-> C`, `p` is definitionally equal to the\n   identity function, and\n2. for any two paths `p, q : C >-> D`, `p` and `q` are convertible.\n\n[Barthe 1995] Gilles Barthe, Implicit coercions in type systems, In: TYPES '95,\n              LNCS, vol 1158, Springer, 1996, pp 1-15.\n[Saïbi 1997]  Amokrane Saïbi, Typing algorithm in type theory with inheritance,\n              In: POPL '97, ACM, 1997, pp 292-301.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-12-08T19:24:43.000+09:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-12-20T01:40:29.000+09:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/025dc51c2eef7e7ea302465ff05d04d6fd4e7173"},"pipeline":{"id":104416496,"iid":12767,"project_id":6138686,"sha":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","ref":"pr-11258","status":"failed","source":"push","created_at":"2019-12-19T16:40:58.112Z","updated_at":"2019-12-19T20:11:06.043Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/104416496"},"web_url":"https://gitlab.com/coq/coq/-/jobs/384922377","artifacts":[{"file_type":"trace","size":69211,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2020-02-17T16:56:44.086Z","tag_list":[]}
{"id":384922373,"status":"success","stage":"stage-2","name":"validate:base","ref":"pr-11258","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-12-19T16:40:58.557Z","started_at":"2019-12-19T16:59:16.115Z","finished_at":"2019-12-19T17:03:56.585Z","duration":280.470379,"queued_duration":1.743755,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","short_id":"025dc51c","created_at":"2019-12-20T01:40:29.000+09:00","parent_ids":["6621e7cf79d7d824461de14007b2a06cabe59aef"],"title":"Coherence checking for coercions","message":"Coherence checking for coercions\n\nThis change improves the relaxed ambiguous path condition of coercions (#9743)\nto check that any circular inheritance path of `C >-> C` is definitionally equal\nto the identity function of the class `C`. Moreover, for a new inheritance path\n`p : C >-> D` and existing (valid) one `q : C >-> D`, the new mechanism does not\nreport the ambiguity of `p` and `q` if they have a common element, that is to\nsay:\n`p = p1 @ [c] @ p2` and `q = q1 @ [c] @ q2`\n  for some coercion `c` and inheritance paths `p1`, `p2`, `q1`, and `q2`.\nIn that case, convertibility of `p1` and `q1`, also, `p2` and `q2` should be\nchecked; thus, checking the ambiguity of `p` and `q` is redundant with them.\n\nIf the new mechanism does not report any ambiguous path, the inheritance graph\nmust be coherent [Barthe 1995, Sect. 3.2] [Saïbi 1997, Sect. 7]:\n1. for any circular path `p : C >-> C`, `p` is definitionally equal to the\n   identity function, and\n2. for any two paths `p, q : C >-> D`, `p` and `q` are convertible.\n\n[Barthe 1995] Gilles Barthe, Implicit coercions in type systems, In: TYPES '95,\n              LNCS, vol 1158, Springer, 1996, pp 1-15.\n[Saïbi 1997]  Amokrane Saïbi, Typing algorithm in type theory with inheritance,\n              In: POPL '97, ACM, 1997, pp 292-301.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-12-08T19:24:43.000+09:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-12-20T01:40:29.000+09:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/025dc51c2eef7e7ea302465ff05d04d6fd4e7173"},"pipeline":{"id":104416496,"iid":12767,"project_id":6138686,"sha":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","ref":"pr-11258","status":"failed","source":"push","created_at":"2019-12-19T16:40:58.112Z","updated_at":"2019-12-19T20:11:06.043Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/104416496"},"web_url":"https://gitlab.com/coq/coq/-/jobs/384922373","artifacts":[{"file_type":"trace","size":110699,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":"2020-02-17T17:03:53.679Z","tag_list":[]}
{"id":384922372,"status":"success","stage":"stage-2","name":"test-suite:base+async","ref":"pr-11258","tag":false,"coverage":null,"allow_failure":true,"created_at":"2019-12-19T16:40:58.540Z","started_at":"2019-12-19T16:59:16.034Z","finished_at":"2019-12-19T17:32:45.917Z","duration":2009.882574,"queued_duration":1.715002,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","short_id":"025dc51c","created_at":"2019-12-20T01:40:29.000+09:00","parent_ids":["6621e7cf79d7d824461de14007b2a06cabe59aef"],"title":"Coherence checking for coercions","message":"Coherence checking for coercions\n\nThis change improves the relaxed ambiguous path condition of coercions (#9743)\nto check that any circular inheritance path of `C >-> C` is definitionally equal\nto the identity function of the class `C`. Moreover, for a new inheritance path\n`p : C >-> D` and existing (valid) one `q : C >-> D`, the new mechanism does not\nreport the ambiguity of `p` and `q` if they have a common element, that is to\nsay:\n`p = p1 @ [c] @ p2` and `q = q1 @ [c] @ q2`\n  for some coercion `c` and inheritance paths `p1`, `p2`, `q1`, and `q2`.\nIn that case, convertibility of `p1` and `q1`, also, `p2` and `q2` should be\nchecked; thus, checking the ambiguity of `p` and `q` is redundant with them.\n\nIf the new mechanism does not report any ambiguous path, the inheritance graph\nmust be coherent [Barthe 1995, Sect. 3.2] [Saïbi 1997, Sect. 7]:\n1. for any circular path `p : C >-> C`, `p` is definitionally equal to the\n   identity function, and\n2. for any two paths `p, q : C >-> D`, `p` and `q` are convertible.\n\n[Barthe 1995] Gilles Barthe, Implicit coercions in type systems, In: TYPES '95,\n              LNCS, vol 1158, Springer, 1996, pp 1-15.\n[Saïbi 1997]  Amokrane Saïbi, Typing algorithm in type theory with inheritance,\n              In: POPL '97, ACM, 1997, pp 292-301.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-12-08T19:24:43.000+09:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-12-20T01:40:29.000+09:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/025dc51c2eef7e7ea302465ff05d04d6fd4e7173"},"pipeline":{"id":104416496,"iid":12767,"project_id":6138686,"sha":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","ref":"pr-11258","status":"failed","source":"push","created_at":"2019-12-19T16:40:58.112Z","updated_at":"2019-12-19T20:11:06.043Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/104416496"},"web_url":"https://gitlab.com/coq/coq/-/jobs/384922372","artifacts":[{"file_type":"trace","size":94042,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":384922369,"status":"success","stage":"stage-2","name":"test-suite:edge:dune:dev","ref":"pr-11258","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-12-19T16:40:58.523Z","started_at":"2019-12-19T16:59:54.703Z","finished_at":"2019-12-19T17:19:38.890Z","duration":1184.18718,"queued_duration":1.261591,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","short_id":"025dc51c","created_at":"2019-12-20T01:40:29.000+09:00","parent_ids":["6621e7cf79d7d824461de14007b2a06cabe59aef"],"title":"Coherence checking for coercions","message":"Coherence checking for coercions\n\nThis change improves the relaxed ambiguous path condition of coercions (#9743)\nto check that any circular inheritance path of `C >-> C` is definitionally equal\nto the identity function of the class `C`. Moreover, for a new inheritance path\n`p : C >-> D` and existing (valid) one `q : C >-> D`, the new mechanism does not\nreport the ambiguity of `p` and `q` if they have a common element, that is to\nsay:\n`p = p1 @ [c] @ p2` and `q = q1 @ [c] @ q2`\n  for some coercion `c` and inheritance paths `p1`, `p2`, `q1`, and `q2`.\nIn that case, convertibility of `p1` and `q1`, also, `p2` and `q2` should be\nchecked; thus, checking the ambiguity of `p` and `q` is redundant with them.\n\nIf the new mechanism does not report any ambiguous path, the inheritance graph\nmust be coherent [Barthe 1995, Sect. 3.2] [Saïbi 1997, Sect. 7]:\n1. for any circular path `p : C >-> C`, `p` is definitionally equal to the\n   identity function, and\n2. for any two paths `p, q : C >-> D`, `p` and `q` are convertible.\n\n[Barthe 1995] Gilles Barthe, Implicit coercions in type systems, In: TYPES '95,\n              LNCS, vol 1158, Springer, 1996, pp 1-15.\n[Saïbi 1997]  Amokrane Saïbi, Typing algorithm in type theory with inheritance,\n              In: POPL '97, ACM, 1997, pp 292-301.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-12-08T19:24:43.000+09:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-12-20T01:40:29.000+09:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/025dc51c2eef7e7ea302465ff05d04d6fd4e7173"},"pipeline":{"id":104416496,"iid":12767,"project_id":6138686,"sha":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","ref":"pr-11258","status":"failed","source":"push","created_at":"2019-12-19T16:40:58.112Z","updated_at":"2019-12-19T20:11:06.043Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/104416496"},"web_url":"https://gitlab.com/coq/coq/-/jobs/384922369","artifacts":[{"file_type":"trace","size":94565,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":384922366,"status":"success","stage":"stage-2","name":"test-suite:edge+flambda","ref":"pr-11258","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-12-19T16:40:58.507Z","started_at":"2019-12-19T17:10:17.513Z","finished_at":"2019-12-19T17:30:24.625Z","duration":1207.112178,"queued_duration":0.888881,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","short_id":"025dc51c","created_at":"2019-12-20T01:40:29.000+09:00","parent_ids":["6621e7cf79d7d824461de14007b2a06cabe59aef"],"title":"Coherence checking for coercions","message":"Coherence checking for coercions\n\nThis change improves the relaxed ambiguous path condition of coercions (#9743)\nto check that any circular inheritance path of `C >-> C` is definitionally equal\nto the identity function of the class `C`. Moreover, for a new inheritance path\n`p : C >-> D` and existing (valid) one `q : C >-> D`, the new mechanism does not\nreport the ambiguity of `p` and `q` if they have a common element, that is to\nsay:\n`p = p1 @ [c] @ p2` and `q = q1 @ [c] @ q2`\n  for some coercion `c` and inheritance paths `p1`, `p2`, `q1`, and `q2`.\nIn that case, convertibility of `p1` and `q1`, also, `p2` and `q2` should be\nchecked; thus, checking the ambiguity of `p` and `q` is redundant with them.\n\nIf the new mechanism does not report any ambiguous path, the inheritance graph\nmust be coherent [Barthe 1995, Sect. 3.2] [Saïbi 1997, Sect. 7]:\n1. for any circular path `p : C >-> C`, `p` is definitionally equal to the\n   identity function, and\n2. for any two paths `p, q : C >-> D`, `p` and `q` are convertible.\n\n[Barthe 1995] Gilles Barthe, Implicit coercions in type systems, In: TYPES '95,\n              LNCS, vol 1158, Springer, 1996, pp 1-15.\n[Saïbi 1997]  Amokrane Saïbi, Typing algorithm in type theory with inheritance,\n              In: POPL '97, ACM, 1997, pp 292-301.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-12-08T19:24:43.000+09:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-12-20T01:40:29.000+09:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/025dc51c2eef7e7ea302465ff05d04d6fd4e7173"},"pipeline":{"id":104416496,"iid":12767,"project_id":6138686,"sha":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","ref":"pr-11258","status":"failed","source":"push","created_at":"2019-12-19T16:40:58.112Z","updated_at":"2019-12-19T20:11:06.043Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/104416496"},"web_url":"https://gitlab.com/coq/coq/-/jobs/384922366","artifacts":[{"file_type":"trace","size":118549,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":384922362,"status":"success","stage":"stage-2","name":"test-suite:base","ref":"pr-11258","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-12-19T16:40:58.469Z","started_at":"2019-12-19T16:59:15.884Z","finished_at":"2019-12-19T17:20:16.197Z","duration":1260.312742,"queued_duration":1.61225,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","short_id":"025dc51c","created_at":"2019-12-20T01:40:29.000+09:00","parent_ids":["6621e7cf79d7d824461de14007b2a06cabe59aef"],"title":"Coherence checking for coercions","message":"Coherence checking for coercions\n\nThis change improves the relaxed ambiguous path condition of coercions (#9743)\nto check that any circular inheritance path of `C >-> C` is definitionally equal\nto the identity function of the class `C`. Moreover, for a new inheritance path\n`p : C >-> D` and existing (valid) one `q : C >-> D`, the new mechanism does not\nreport the ambiguity of `p` and `q` if they have a common element, that is to\nsay:\n`p = p1 @ [c] @ p2` and `q = q1 @ [c] @ q2`\n  for some coercion `c` and inheritance paths `p1`, `p2`, `q1`, and `q2`.\nIn that case, convertibility of `p1` and `q1`, also, `p2` and `q2` should be\nchecked; thus, checking the ambiguity of `p` and `q` is redundant with them.\n\nIf the new mechanism does not report any ambiguous path, the inheritance graph\nmust be coherent [Barthe 1995, Sect. 3.2] [Saïbi 1997, Sect. 7]:\n1. for any circular path `p : C >-> C`, `p` is definitionally equal to the\n   identity function, and\n2. for any two paths `p, q : C >-> D`, `p` and `q` are convertible.\n\n[Barthe 1995] Gilles Barthe, Implicit coercions in type systems, In: TYPES '95,\n              LNCS, vol 1158, Springer, 1996, pp 1-15.\n[Saïbi 1997]  Amokrane Saïbi, Typing algorithm in type theory with inheritance,\n              In: POPL '97, ACM, 1997, pp 292-301.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-12-08T19:24:43.000+09:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-12-20T01:40:29.000+09:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/025dc51c2eef7e7ea302465ff05d04d6fd4e7173"},"pipeline":{"id":104416496,"iid":12767,"project_id":6138686,"sha":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","ref":"pr-11258","status":"failed","source":"push","created_at":"2019-12-19T16:40:58.112Z","updated_at":"2019-12-19T20:11:06.043Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/104416496"},"web_url":"https://gitlab.com/coq/coq/-/jobs/384922362","artifacts":[{"file_type":"trace","size":93915,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":384922360,"status":"success","stage":"stage-2","name":"doc:ml-api:odoc","ref":"pr-11258","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-12-19T16:40:58.454Z","started_at":"2019-12-19T16:59:54.626Z","finished_at":"2019-12-19T17:04:23.275Z","duration":268.648801,"queued_duration":1.240939,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","short_id":"025dc51c","created_at":"2019-12-20T01:40:29.000+09:00","parent_ids":["6621e7cf79d7d824461de14007b2a06cabe59aef"],"title":"Coherence checking for coercions","message":"Coherence checking for coercions\n\nThis change improves the relaxed ambiguous path condition of coercions (#9743)\nto check that any circular inheritance path of `C >-> C` is definitionally equal\nto the identity function of the class `C`. Moreover, for a new inheritance path\n`p : C >-> D` and existing (valid) one `q : C >-> D`, the new mechanism does not\nreport the ambiguity of `p` and `q` if they have a common element, that is to\nsay:\n`p = p1 @ [c] @ p2` and `q = q1 @ [c] @ q2`\n  for some coercion `c` and inheritance paths `p1`, `p2`, `q1`, and `q2`.\nIn that case, convertibility of `p1` and `q1`, also, `p2` and `q2` should be\nchecked; thus, checking the ambiguity of `p` and `q` is redundant with them.\n\nIf the new mechanism does not report any ambiguous path, the inheritance graph\nmust be coherent [Barthe 1995, Sect. 3.2] [Saïbi 1997, Sect. 7]:\n1. for any circular path `p : C >-> C`, `p` is definitionally equal to the\n   identity function, and\n2. for any two paths `p, q : C >-> D`, `p` and `q` are convertible.\n\n[Barthe 1995] Gilles Barthe, Implicit coercions in type systems, In: TYPES '95,\n              LNCS, vol 1158, Springer, 1996, pp 1-15.\n[Saïbi 1997]  Amokrane Saïbi, Typing algorithm in type theory with inheritance,\n              In: POPL '97, ACM, 1997, pp 292-301.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-12-08T19:24:43.000+09:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-12-20T01:40:29.000+09:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/025dc51c2eef7e7ea302465ff05d04d6fd4e7173"},"pipeline":{"id":104416496,"iid":12767,"project_id":6138686,"sha":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","ref":"pr-11258","status":"failed","source":"push","created_at":"2019-12-19T16:40:58.112Z","updated_at":"2019-12-19T20:11:06.043Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/104416496"},"web_url":"https://gitlab.com/coq/coq/-/jobs/384922360","artifacts":[{"file_type":"trace","size":77381,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2020-02-17T17:04:22.028Z","tag_list":[]}
{"id":384922359,"status":"success","stage":"stage-2","name":"doc:stdlib:dune","ref":"pr-11258","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-12-19T16:40:58.437Z","started_at":"2019-12-19T16:59:54.477Z","finished_at":"2019-12-19T17:04:29.072Z","duration":274.59474,"queued_duration":1.136143,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","short_id":"025dc51c","created_at":"2019-12-20T01:40:29.000+09:00","parent_ids":["6621e7cf79d7d824461de14007b2a06cabe59aef"],"title":"Coherence checking for coercions","message":"Coherence checking for coercions\n\nThis change improves the relaxed ambiguous path condition of coercions (#9743)\nto check that any circular inheritance path of `C >-> C` is definitionally equal\nto the identity function of the class `C`. Moreover, for a new inheritance path\n`p : C >-> D` and existing (valid) one `q : C >-> D`, the new mechanism does not\nreport the ambiguity of `p` and `q` if they have a common element, that is to\nsay:\n`p = p1 @ [c] @ p2` and `q = q1 @ [c] @ q2`\n  for some coercion `c` and inheritance paths `p1`, `p2`, `q1`, and `q2`.\nIn that case, convertibility of `p1` and `q1`, also, `p2` and `q2` should be\nchecked; thus, checking the ambiguity of `p` and `q` is redundant with them.\n\nIf the new mechanism does not report any ambiguous path, the inheritance graph\nmust be coherent [Barthe 1995, Sect. 3.2] [Saïbi 1997, Sect. 7]:\n1. for any circular path `p : C >-> C`, `p` is definitionally equal to the\n   identity function, and\n2. for any two paths `p, q : C >-> D`, `p` and `q` are convertible.\n\n[Barthe 1995] Gilles Barthe, Implicit coercions in type systems, In: TYPES '95,\n              LNCS, vol 1158, Springer, 1996, pp 1-15.\n[Saïbi 1997]  Amokrane Saïbi, Typing algorithm in type theory with inheritance,\n              In: POPL '97, ACM, 1997, pp 292-301.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-12-08T19:24:43.000+09:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-12-20T01:40:29.000+09:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/025dc51c2eef7e7ea302465ff05d04d6fd4e7173"},"pipeline":{"id":104416496,"iid":12767,"project_id":6138686,"sha":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","ref":"pr-11258","status":"failed","source":"push","created_at":"2019-12-19T16:40:58.112Z","updated_at":"2019-12-19T20:11:06.043Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/104416496"},"web_url":"https://gitlab.com/coq/coq/-/jobs/384922359","artifacts":[{"file_type":"trace","size":27301,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2020-02-17T17:04:27.282Z","tag_list":[]}
{"id":384922357,"status":"success","stage":"stage-2","name":"doc:refman:dune","ref":"pr-11258","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-12-19T16:40:58.421Z","started_at":"2019-12-19T16:59:54.307Z","finished_at":"2019-12-19T17:06:13.009Z","duration":378.701808,"queued_duration":1.012353,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","short_id":"025dc51c","created_at":"2019-12-20T01:40:29.000+09:00","parent_ids":["6621e7cf79d7d824461de14007b2a06cabe59aef"],"title":"Coherence checking for coercions","message":"Coherence checking for coercions\n\nThis change improves the relaxed ambiguous path condition of coercions (#9743)\nto check that any circular inheritance path of `C >-> C` is definitionally equal\nto the identity function of the class `C`. Moreover, for a new inheritance path\n`p : C >-> D` and existing (valid) one `q : C >-> D`, the new mechanism does not\nreport the ambiguity of `p` and `q` if they have a common element, that is to\nsay:\n`p = p1 @ [c] @ p2` and `q = q1 @ [c] @ q2`\n  for some coercion `c` and inheritance paths `p1`, `p2`, `q1`, and `q2`.\nIn that case, convertibility of `p1` and `q1`, also, `p2` and `q2` should be\nchecked; thus, checking the ambiguity of `p` and `q` is redundant with them.\n\nIf the new mechanism does not report any ambiguous path, the inheritance graph\nmust be coherent [Barthe 1995, Sect. 3.2] [Saïbi 1997, Sect. 7]:\n1. for any circular path `p : C >-> C`, `p` is definitionally equal to the\n   identity function, and\n2. for any two paths `p, q : C >-> D`, `p` and `q` are convertible.\n\n[Barthe 1995] Gilles Barthe, Implicit coercions in type systems, In: TYPES '95,\n              LNCS, vol 1158, Springer, 1996, pp 1-15.\n[Saïbi 1997]  Amokrane Saïbi, Typing algorithm in type theory with inheritance,\n              In: POPL '97, ACM, 1997, pp 292-301.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-12-08T19:24:43.000+09:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-12-20T01:40:29.000+09:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/025dc51c2eef7e7ea302465ff05d04d6fd4e7173"},"pipeline":{"id":104416496,"iid":12767,"project_id":6138686,"sha":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","ref":"pr-11258","status":"failed","source":"push","created_at":"2019-12-19T16:40:58.112Z","updated_at":"2019-12-19T20:11:06.043Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/104416496"},"web_url":"https://gitlab.com/coq/coq/-/jobs/384922357","artifacts":[{"file_type":"trace","size":25289,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2020-02-17T17:06:11.006Z","tag_list":[]}
{"id":384922355,"status":"success","stage":"stage-2","name":"doc:refman","ref":"pr-11258","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-12-19T16:40:58.402Z","started_at":"2019-12-19T16:59:15.794Z","finished_at":"2019-12-19T17:07:16.176Z","duration":480.382434,"queued_duration":1.572074,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","short_id":"025dc51c","created_at":"2019-12-20T01:40:29.000+09:00","parent_ids":["6621e7cf79d7d824461de14007b2a06cabe59aef"],"title":"Coherence checking for coercions","message":"Coherence checking for coercions\n\nThis change improves the relaxed ambiguous path condition of coercions (#9743)\nto check that any circular inheritance path of `C >-> C` is definitionally equal\nto the identity function of the class `C`. Moreover, for a new inheritance path\n`p : C >-> D` and existing (valid) one `q : C >-> D`, the new mechanism does not\nreport the ambiguity of `p` and `q` if they have a common element, that is to\nsay:\n`p = p1 @ [c] @ p2` and `q = q1 @ [c] @ q2`\n  for some coercion `c` and inheritance paths `p1`, `p2`, `q1`, and `q2`.\nIn that case, convertibility of `p1` and `q1`, also, `p2` and `q2` should be\nchecked; thus, checking the ambiguity of `p` and `q` is redundant with them.\n\nIf the new mechanism does not report any ambiguous path, the inheritance graph\nmust be coherent [Barthe 1995, Sect. 3.2] [Saïbi 1997, Sect. 7]:\n1. for any circular path `p : C >-> C`, `p` is definitionally equal to the\n   identity function, and\n2. for any two paths `p, q : C >-> D`, `p` and `q` are convertible.\n\n[Barthe 1995] Gilles Barthe, Implicit coercions in type systems, In: TYPES '95,\n              LNCS, vol 1158, Springer, 1996, pp 1-15.\n[Saïbi 1997]  Amokrane Saïbi, Typing algorithm in type theory with inheritance,\n              In: POPL '97, ACM, 1997, pp 292-301.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-12-08T19:24:43.000+09:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-12-20T01:40:29.000+09:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/025dc51c2eef7e7ea302465ff05d04d6fd4e7173"},"pipeline":{"id":104416496,"iid":12767,"project_id":6138686,"sha":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","ref":"pr-11258","status":"failed","source":"push","created_at":"2019-12-19T16:40:58.112Z","updated_at":"2019-12-19T20:11:06.043Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/104416496"},"web_url":"https://gitlab.com/coq/coq/-/jobs/384922355","artifacts":[{"file_type":"trace","size":1249930,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2020-02-17T17:07:14.425Z","tag_list":[]}
{"id":384922351,"status":"success","stage":"stage-1","name":"plugin:plugin-tutorial","ref":"pr-11258","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-12-19T16:40:58.368Z","started_at":"2019-12-19T16:41:02.412Z","finished_at":"2019-12-19T16:45:15.893Z","duration":253.481307,"queued_duration":2.304476,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","short_id":"025dc51c","created_at":"2019-12-20T01:40:29.000+09:00","parent_ids":["6621e7cf79d7d824461de14007b2a06cabe59aef"],"title":"Coherence checking for coercions","message":"Coherence checking for coercions\n\nThis change improves the relaxed ambiguous path condition of coercions (#9743)\nto check that any circular inheritance path of `C >-> C` is definitionally equal\nto the identity function of the class `C`. Moreover, for a new inheritance path\n`p : C >-> D` and existing (valid) one `q : C >-> D`, the new mechanism does not\nreport the ambiguity of `p` and `q` if they have a common element, that is to\nsay:\n`p = p1 @ [c] @ p2` and `q = q1 @ [c] @ q2`\n  for some coercion `c` and inheritance paths `p1`, `p2`, `q1`, and `q2`.\nIn that case, convertibility of `p1` and `q1`, also, `p2` and `q2` should be\nchecked; thus, checking the ambiguity of `p` and `q` is redundant with them.\n\nIf the new mechanism does not report any ambiguous path, the inheritance graph\nmust be coherent [Barthe 1995, Sect. 3.2] [Saïbi 1997, Sect. 7]:\n1. for any circular path `p : C >-> C`, `p` is definitionally equal to the\n   identity function, and\n2. for any two paths `p, q : C >-> D`, `p` and `q` are convertible.\n\n[Barthe 1995] Gilles Barthe, Implicit coercions in type systems, In: TYPES '95,\n              LNCS, vol 1158, Springer, 1996, pp 1-15.\n[Saïbi 1997]  Amokrane Saïbi, Typing algorithm in type theory with inheritance,\n              In: POPL '97, ACM, 1997, pp 292-301.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-12-08T19:24:43.000+09:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-12-20T01:40:29.000+09:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/025dc51c2eef7e7ea302465ff05d04d6fd4e7173"},"pipeline":{"id":104416496,"iid":12767,"project_id":6138686,"sha":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","ref":"pr-11258","status":"failed","source":"push","created_at":"2019-12-19T16:40:58.112Z","updated_at":"2019-12-19T20:11:06.043Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/104416496"},"web_url":"https://gitlab.com/coq/coq/-/jobs/384922351","artifacts":[{"file_type":"trace","size":59245,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":384922349,"status":"success","stage":"stage-1","name":"pkg:nix","ref":"pr-11258","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-12-19T16:40:58.351Z","started_at":"2019-12-19T16:41:02.181Z","finished_at":"2019-12-19T17:02:13.423Z","duration":1271.241937,"queued_duration":2.114245,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","short_id":"025dc51c","created_at":"2019-12-20T01:40:29.000+09:00","parent_ids":["6621e7cf79d7d824461de14007b2a06cabe59aef"],"title":"Coherence checking for coercions","message":"Coherence checking for coercions\n\nThis change improves the relaxed ambiguous path condition of coercions (#9743)\nto check that any circular inheritance path of `C >-> C` is definitionally equal\nto the identity function of the class `C`. Moreover, for a new inheritance path\n`p : C >-> D` and existing (valid) one `q : C >-> D`, the new mechanism does not\nreport the ambiguity of `p` and `q` if they have a common element, that is to\nsay:\n`p = p1 @ [c] @ p2` and `q = q1 @ [c] @ q2`\n  for some coercion `c` and inheritance paths `p1`, `p2`, `q1`, and `q2`.\nIn that case, convertibility of `p1` and `q1`, also, `p2` and `q2` should be\nchecked; thus, checking the ambiguity of `p` and `q` is redundant with them.\n\nIf the new mechanism does not report any ambiguous path, the inheritance graph\nmust be coherent [Barthe 1995, Sect. 3.2] [Saïbi 1997, Sect. 7]:\n1. for any circular path `p : C >-> C`, `p` is definitionally equal to the\n   identity function, and\n2. for any two paths `p, q : C >-> D`, `p` and `q` are convertible.\n\n[Barthe 1995] Gilles Barthe, Implicit coercions in type systems, In: TYPES '95,\n              LNCS, vol 1158, Springer, 1996, pp 1-15.\n[Saïbi 1997]  Amokrane Saïbi, Typing algorithm in type theory with inheritance,\n              In: POPL '97, ACM, 1997, pp 292-301.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-12-08T19:24:43.000+09:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-12-20T01:40:29.000+09:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/025dc51c2eef7e7ea302465ff05d04d6fd4e7173"},"pipeline":{"id":104416496,"iid":12767,"project_id":6138686,"sha":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","ref":"pr-11258","status":"failed","source":"push","created_at":"2019-12-19T16:40:58.112Z","updated_at":"2019-12-19T20:11:06.043Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/104416496"},"web_url":"https://gitlab.com/coq/coq/-/jobs/384922349","artifacts":[{"file_type":"trace","size":607181,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":384922345,"status":"success","stage":"stage-1","name":"pkg:opam","ref":"pr-11258","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-12-19T16:40:58.333Z","started_at":"2019-12-19T16:41:02.012Z","finished_at":"2019-12-19T16:57:47.001Z","duration":1004.988969,"queued_duration":1.973812,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","short_id":"025dc51c","created_at":"2019-12-20T01:40:29.000+09:00","parent_ids":["6621e7cf79d7d824461de14007b2a06cabe59aef"],"title":"Coherence checking for coercions","message":"Coherence checking for coercions\n\nThis change improves the relaxed ambiguous path condition of coercions (#9743)\nto check that any circular inheritance path of `C >-> C` is definitionally equal\nto the identity function of the class `C`. Moreover, for a new inheritance path\n`p : C >-> D` and existing (valid) one `q : C >-> D`, the new mechanism does not\nreport the ambiguity of `p` and `q` if they have a common element, that is to\nsay:\n`p = p1 @ [c] @ p2` and `q = q1 @ [c] @ q2`\n  for some coercion `c` and inheritance paths `p1`, `p2`, `q1`, and `q2`.\nIn that case, convertibility of `p1` and `q1`, also, `p2` and `q2` should be\nchecked; thus, checking the ambiguity of `p` and `q` is redundant with them.\n\nIf the new mechanism does not report any ambiguous path, the inheritance graph\nmust be coherent [Barthe 1995, Sect. 3.2] [Saïbi 1997, Sect. 7]:\n1. for any circular path `p : C >-> C`, `p` is definitionally equal to the\n   identity function, and\n2. for any two paths `p, q : C >-> D`, `p` and `q` are convertible.\n\n[Barthe 1995] Gilles Barthe, Implicit coercions in type systems, In: TYPES '95,\n              LNCS, vol 1158, Springer, 1996, pp 1-15.\n[Saïbi 1997]  Amokrane Saïbi, Typing algorithm in type theory with inheritance,\n              In: POPL '97, ACM, 1997, pp 292-301.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-12-08T19:24:43.000+09:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-12-20T01:40:29.000+09:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/025dc51c2eef7e7ea302465ff05d04d6fd4e7173"},"pipeline":{"id":104416496,"iid":12767,"project_id":6138686,"sha":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","ref":"pr-11258","status":"failed","source":"push","created_at":"2019-12-19T16:40:58.112Z","updated_at":"2019-12-19T20:11:06.043Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/104416496"},"web_url":"https://gitlab.com/coq/coq/-/jobs/384922345","artifacts":[{"file_type":"trace","size":45858,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":384922344,"status":"success","stage":"stage-1","name":"lint","ref":"pr-11258","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-12-19T16:40:58.317Z","started_at":"2019-12-19T16:41:01.691Z","finished_at":"2019-12-19T16:46:48.001Z","duration":346.309888,"queued_duration":1.682725,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","short_id":"025dc51c","created_at":"2019-12-20T01:40:29.000+09:00","parent_ids":["6621e7cf79d7d824461de14007b2a06cabe59aef"],"title":"Coherence checking for coercions","message":"Coherence checking for coercions\n\nThis change improves the relaxed ambiguous path condition of coercions (#9743)\nto check that any circular inheritance path of `C >-> C` is definitionally equal\nto the identity function of the class `C`. Moreover, for a new inheritance path\n`p : C >-> D` and existing (valid) one `q : C >-> D`, the new mechanism does not\nreport the ambiguity of `p` and `q` if they have a common element, that is to\nsay:\n`p = p1 @ [c] @ p2` and `q = q1 @ [c] @ q2`\n  for some coercion `c` and inheritance paths `p1`, `p2`, `q1`, and `q2`.\nIn that case, convertibility of `p1` and `q1`, also, `p2` and `q2` should be\nchecked; thus, checking the ambiguity of `p` and `q` is redundant with them.\n\nIf the new mechanism does not report any ambiguous path, the inheritance graph\nmust be coherent [Barthe 1995, Sect. 3.2] [Saïbi 1997, Sect. 7]:\n1. for any circular path `p : C >-> C`, `p` is definitionally equal to the\n   identity function, and\n2. for any two paths `p, q : C >-> D`, `p` and `q` are convertible.\n\n[Barthe 1995] Gilles Barthe, Implicit coercions in type systems, In: TYPES '95,\n              LNCS, vol 1158, Springer, 1996, pp 1-15.\n[Saïbi 1997]  Amokrane Saïbi, Typing algorithm in type theory with inheritance,\n              In: POPL '97, ACM, 1997, pp 292-301.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-12-08T19:24:43.000+09:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-12-20T01:40:29.000+09:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/025dc51c2eef7e7ea302465ff05d04d6fd4e7173"},"pipeline":{"id":104416496,"iid":12767,"project_id":6138686,"sha":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","ref":"pr-11258","status":"failed","source":"push","created_at":"2019-12-19T16:40:58.112Z","updated_at":"2019-12-19T20:11:06.043Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/104416496"},"web_url":"https://gitlab.com/coq/coq/-/jobs/384922344","artifacts":[{"file_type":"trace","size":37630,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":384922339,"status":"success","stage":"stage-1","name":"windows64","ref":"pr-11258","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-12-19T16:40:58.288Z","started_at":"2019-12-19T17:55:25.729Z","finished_at":"2019-12-19T18:57:30.599Z","duration":3724.869911,"queued_duration":4465.755119,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","short_id":"025dc51c","created_at":"2019-12-20T01:40:29.000+09:00","parent_ids":["6621e7cf79d7d824461de14007b2a06cabe59aef"],"title":"Coherence checking for coercions","message":"Coherence checking for coercions\n\nThis change improves the relaxed ambiguous path condition of coercions (#9743)\nto check that any circular inheritance path of `C >-> C` is definitionally equal\nto the identity function of the class `C`. Moreover, for a new inheritance path\n`p : C >-> D` and existing (valid) one `q : C >-> D`, the new mechanism does not\nreport the ambiguity of `p` and `q` if they have a common element, that is to\nsay:\n`p = p1 @ [c] @ p2` and `q = q1 @ [c] @ q2`\n  for some coercion `c` and inheritance paths `p1`, `p2`, `q1`, and `q2`.\nIn that case, convertibility of `p1` and `q1`, also, `p2` and `q2` should be\nchecked; thus, checking the ambiguity of `p` and `q` is redundant with them.\n\nIf the new mechanism does not report any ambiguous path, the inheritance graph\nmust be coherent [Barthe 1995, Sect. 3.2] [Saïbi 1997, Sect. 7]:\n1. for any circular path `p : C >-> C`, `p` is definitionally equal to the\n   identity function, and\n2. for any two paths `p, q : C >-> D`, `p` and `q` are convertible.\n\n[Barthe 1995] Gilles Barthe, Implicit coercions in type systems, In: TYPES '95,\n              LNCS, vol 1158, Springer, 1996, pp 1-15.\n[Saïbi 1997]  Amokrane Saïbi, Typing algorithm in type theory with inheritance,\n              In: POPL '97, ACM, 1997, pp 292-301.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-12-08T19:24:43.000+09:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-12-20T01:40:29.000+09:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/025dc51c2eef7e7ea302465ff05d04d6fd4e7173"},"pipeline":{"id":104416496,"iid":12767,"project_id":6138686,"sha":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","ref":"pr-11258","status":"failed","source":"push","created_at":"2019-12-19T16:40:58.112Z","updated_at":"2019-12-19T20:11:06.043Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/104416496"},"web_url":"https://gitlab.com/coq/coq/-/jobs/384922339","artifacts":[{"file_type":"trace","size":277618,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":"2019-12-26T18:57:29.297Z","tag_list":["windows"]}
{"id":384922337,"status":"success","stage":"stage-1","name":"build:quick","ref":"pr-11258","tag":false,"coverage":null,"allow_failure":true,"created_at":"2019-12-19T16:40:58.265Z","started_at":"2019-12-19T16:41:01.644Z","finished_at":"2019-12-19T17:00:10.155Z","duration":1148.510042,"queued_duration":1.712035,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","short_id":"025dc51c","created_at":"2019-12-20T01:40:29.000+09:00","parent_ids":["6621e7cf79d7d824461de14007b2a06cabe59aef"],"title":"Coherence checking for coercions","message":"Coherence checking for coercions\n\nThis change improves the relaxed ambiguous path condition of coercions (#9743)\nto check that any circular inheritance path of `C >-> C` is definitionally equal\nto the identity function of the class `C`. Moreover, for a new inheritance path\n`p : C >-> D` and existing (valid) one `q : C >-> D`, the new mechanism does not\nreport the ambiguity of `p` and `q` if they have a common element, that is to\nsay:\n`p = p1 @ [c] @ p2` and `q = q1 @ [c] @ q2`\n  for some coercion `c` and inheritance paths `p1`, `p2`, `q1`, and `q2`.\nIn that case, convertibility of `p1` and `q1`, also, `p2` and `q2` should be\nchecked; thus, checking the ambiguity of `p` and `q` is redundant with them.\n\nIf the new mechanism does not report any ambiguous path, the inheritance graph\nmust be coherent [Barthe 1995, Sect. 3.2] [Saïbi 1997, Sect. 7]:\n1. for any circular path `p : C >-> C`, `p` is definitionally equal to the\n   identity function, and\n2. for any two paths `p, q : C >-> D`, `p` and `q` are convertible.\n\n[Barthe 1995] Gilles Barthe, Implicit coercions in type systems, In: TYPES '95,\n              LNCS, vol 1158, Springer, 1996, pp 1-15.\n[Saïbi 1997]  Amokrane Saïbi, Typing algorithm in type theory with inheritance,\n              In: POPL '97, ACM, 1997, pp 292-301.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-12-08T19:24:43.000+09:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-12-20T01:40:29.000+09:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/025dc51c2eef7e7ea302465ff05d04d6fd4e7173"},"pipeline":{"id":104416496,"iid":12767,"project_id":6138686,"sha":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","ref":"pr-11258","status":"failed","source":"push","created_at":"2019-12-19T16:40:58.112Z","updated_at":"2019-12-19T20:11:06.043Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/104416496"},"web_url":"https://gitlab.com/coq/coq/-/jobs/384922337","artifacts":[{"file_type":"trace","size":240366,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2019-12-26T17:00:08.411Z","tag_list":[]}
{"id":384922335,"status":"success","stage":"stage-1","name":"build:base+async","ref":"pr-11258","tag":false,"coverage":null,"allow_failure":true,"created_at":"2019-12-19T16:40:58.239Z","started_at":"2019-12-19T16:41:01.563Z","finished_at":"2019-12-19T17:22:09.482Z","duration":2467.918571,"queued_duration":1.678494,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","short_id":"025dc51c","created_at":"2019-12-20T01:40:29.000+09:00","parent_ids":["6621e7cf79d7d824461de14007b2a06cabe59aef"],"title":"Coherence checking for coercions","message":"Coherence checking for coercions\n\nThis change improves the relaxed ambiguous path condition of coercions (#9743)\nto check that any circular inheritance path of `C >-> C` is definitionally equal\nto the identity function of the class `C`. Moreover, for a new inheritance path\n`p : C >-> D` and existing (valid) one `q : C >-> D`, the new mechanism does not\nreport the ambiguity of `p` and `q` if they have a common element, that is to\nsay:\n`p = p1 @ [c] @ p2` and `q = q1 @ [c] @ q2`\n  for some coercion `c` and inheritance paths `p1`, `p2`, `q1`, and `q2`.\nIn that case, convertibility of `p1` and `q1`, also, `p2` and `q2` should be\nchecked; thus, checking the ambiguity of `p` and `q` is redundant with them.\n\nIf the new mechanism does not report any ambiguous path, the inheritance graph\nmust be coherent [Barthe 1995, Sect. 3.2] [Saïbi 1997, Sect. 7]:\n1. for any circular path `p : C >-> C`, `p` is definitionally equal to the\n   identity function, and\n2. for any two paths `p, q : C >-> D`, `p` and `q` are convertible.\n\n[Barthe 1995] Gilles Barthe, Implicit coercions in type systems, In: TYPES '95,\n              LNCS, vol 1158, Springer, 1996, pp 1-15.\n[Saïbi 1997]  Amokrane Saïbi, Typing algorithm in type theory with inheritance,\n              In: POPL '97, ACM, 1997, pp 292-301.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-12-08T19:24:43.000+09:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-12-20T01:40:29.000+09:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/025dc51c2eef7e7ea302465ff05d04d6fd4e7173"},"pipeline":{"id":104416496,"iid":12767,"project_id":6138686,"sha":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","ref":"pr-11258","status":"failed","source":"push","created_at":"2019-12-19T16:40:58.112Z","updated_at":"2019-12-19T20:11:06.043Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/104416496"},"web_url":"https://gitlab.com/coq/coq/-/jobs/384922335","artifacts":[{"file_type":"trace","size":303832,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":"2019-12-26T17:22:05.614Z","tag_list":[]}
{"id":384922332,"status":"success","stage":"stage-1","name":"build:edge+flambda:dune:dev","ref":"pr-11258","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-12-19T16:40:58.210Z","started_at":"2019-12-19T16:41:01.492Z","finished_at":"2019-12-19T16:59:53.215Z","duration":1131.722313,"queued_duration":1.649296,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","short_id":"025dc51c","created_at":"2019-12-20T01:40:29.000+09:00","parent_ids":["6621e7cf79d7d824461de14007b2a06cabe59aef"],"title":"Coherence checking for coercions","message":"Coherence checking for coercions\n\nThis change improves the relaxed ambiguous path condition of coercions (#9743)\nto check that any circular inheritance path of `C >-> C` is definitionally equal\nto the identity function of the class `C`. Moreover, for a new inheritance path\n`p : C >-> D` and existing (valid) one `q : C >-> D`, the new mechanism does not\nreport the ambiguity of `p` and `q` if they have a common element, that is to\nsay:\n`p = p1 @ [c] @ p2` and `q = q1 @ [c] @ q2`\n  for some coercion `c` and inheritance paths `p1`, `p2`, `q1`, and `q2`.\nIn that case, convertibility of `p1` and `q1`, also, `p2` and `q2` should be\nchecked; thus, checking the ambiguity of `p` and `q` is redundant with them.\n\nIf the new mechanism does not report any ambiguous path, the inheritance graph\nmust be coherent [Barthe 1995, Sect. 3.2] [Saïbi 1997, Sect. 7]:\n1. for any circular path `p : C >-> C`, `p` is definitionally equal to the\n   identity function, and\n2. for any two paths `p, q : C >-> D`, `p` and `q` are convertible.\n\n[Barthe 1995] Gilles Barthe, Implicit coercions in type systems, In: TYPES '95,\n              LNCS, vol 1158, Springer, 1996, pp 1-15.\n[Saïbi 1997]  Amokrane Saïbi, Typing algorithm in type theory with inheritance,\n              In: POPL '97, ACM, 1997, pp 292-301.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-12-08T19:24:43.000+09:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-12-20T01:40:29.000+09:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/025dc51c2eef7e7ea302465ff05d04d6fd4e7173"},"pipeline":{"id":104416496,"iid":12767,"project_id":6138686,"sha":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","ref":"pr-11258","status":"failed","source":"push","created_at":"2019-12-19T16:40:58.112Z","updated_at":"2019-12-19T20:11:06.043Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/104416496"},"web_url":"https://gitlab.com/coq/coq/-/jobs/384922332","artifacts":[{"file_type":"trace","size":21926,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2019-12-26T16:59:51.517Z","tag_list":[]}
{"id":384922330,"status":"success","stage":"stage-1","name":"build:edge+flambda","ref":"pr-11258","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-12-19T16:40:58.188Z","started_at":"2019-12-19T16:41:01.439Z","finished_at":"2019-12-19T17:10:16.522Z","duration":1755.082867,"queued_duration":1.670496,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","short_id":"025dc51c","created_at":"2019-12-20T01:40:29.000+09:00","parent_ids":["6621e7cf79d7d824461de14007b2a06cabe59aef"],"title":"Coherence checking for coercions","message":"Coherence checking for coercions\n\nThis change improves the relaxed ambiguous path condition of coercions (#9743)\nto check that any circular inheritance path of `C >-> C` is definitionally equal\nto the identity function of the class `C`. Moreover, for a new inheritance path\n`p : C >-> D` and existing (valid) one `q : C >-> D`, the new mechanism does not\nreport the ambiguity of `p` and `q` if they have a common element, that is to\nsay:\n`p = p1 @ [c] @ p2` and `q = q1 @ [c] @ q2`\n  for some coercion `c` and inheritance paths `p1`, `p2`, `q1`, and `q2`.\nIn that case, convertibility of `p1` and `q1`, also, `p2` and `q2` should be\nchecked; thus, checking the ambiguity of `p` and `q` is redundant with them.\n\nIf the new mechanism does not report any ambiguous path, the inheritance graph\nmust be coherent [Barthe 1995, Sect. 3.2] [Saïbi 1997, Sect. 7]:\n1. for any circular path `p : C >-> C`, `p` is definitionally equal to the\n   identity function, and\n2. for any two paths `p, q : C >-> D`, `p` and `q` are convertible.\n\n[Barthe 1995] Gilles Barthe, Implicit coercions in type systems, In: TYPES '95,\n              LNCS, vol 1158, Springer, 1996, pp 1-15.\n[Saïbi 1997]  Amokrane Saïbi, Typing algorithm in type theory with inheritance,\n              In: POPL '97, ACM, 1997, pp 292-301.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-12-08T19:24:43.000+09:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-12-20T01:40:29.000+09:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/025dc51c2eef7e7ea302465ff05d04d6fd4e7173"},"pipeline":{"id":104416496,"iid":12767,"project_id":6138686,"sha":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","ref":"pr-11258","status":"failed","source":"push","created_at":"2019-12-19T16:40:58.112Z","updated_at":"2019-12-19T20:11:06.043Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/104416496"},"web_url":"https://gitlab.com/coq/coq/-/jobs/384922330","artifacts":[{"file_type":"trace","size":281418,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2019-12-26T17:10:14.878Z","tag_list":[]}
{"id":384922327,"status":"success","stage":"stage-1","name":"build:base+32bit","ref":"pr-11258","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-12-19T16:40:58.148Z","started_at":"2019-12-19T16:41:01.391Z","finished_at":"2019-12-19T16:52:02.454Z","duration":661.062679,"queued_duration":1.693313,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","short_id":"025dc51c","created_at":"2019-12-20T01:40:29.000+09:00","parent_ids":["6621e7cf79d7d824461de14007b2a06cabe59aef"],"title":"Coherence checking for coercions","message":"Coherence checking for coercions\n\nThis change improves the relaxed ambiguous path condition of coercions (#9743)\nto check that any circular inheritance path of `C >-> C` is definitionally equal\nto the identity function of the class `C`. Moreover, for a new inheritance path\n`p : C >-> D` and existing (valid) one `q : C >-> D`, the new mechanism does not\nreport the ambiguity of `p` and `q` if they have a common element, that is to\nsay:\n`p = p1 @ [c] @ p2` and `q = q1 @ [c] @ q2`\n  for some coercion `c` and inheritance paths `p1`, `p2`, `q1`, and `q2`.\nIn that case, convertibility of `p1` and `q1`, also, `p2` and `q2` should be\nchecked; thus, checking the ambiguity of `p` and `q` is redundant with them.\n\nIf the new mechanism does not report any ambiguous path, the inheritance graph\nmust be coherent [Barthe 1995, Sect. 3.2] [Saïbi 1997, Sect. 7]:\n1. for any circular path `p : C >-> C`, `p` is definitionally equal to the\n   identity function, and\n2. for any two paths `p, q : C >-> D`, `p` and `q` are convertible.\n\n[Barthe 1995] Gilles Barthe, Implicit coercions in type systems, In: TYPES '95,\n              LNCS, vol 1158, Springer, 1996, pp 1-15.\n[Saïbi 1997]  Amokrane Saïbi, Typing algorithm in type theory with inheritance,\n              In: POPL '97, ACM, 1997, pp 292-301.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-12-08T19:24:43.000+09:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-12-20T01:40:29.000+09:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/025dc51c2eef7e7ea302465ff05d04d6fd4e7173"},"pipeline":{"id":104416496,"iid":12767,"project_id":6138686,"sha":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","ref":"pr-11258","status":"failed","source":"push","created_at":"2019-12-19T16:40:58.112Z","updated_at":"2019-12-19T20:11:06.043Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/104416496"},"web_url":"https://gitlab.com/coq/coq/-/jobs/384922327","artifacts":[{"file_type":"trace","size":778554,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":"2019-12-26T16:51:59.463Z","tag_list":[]}
{"id":384922326,"status":"success","stage":"stage-1","name":"build:base","ref":"pr-11258","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-12-19T16:40:58.128Z","started_at":"2019-12-19T16:41:01.309Z","finished_at":"2019-12-19T16:59:14.134Z","duration":1092.825009,"queued_duration":1.6602,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","short_id":"025dc51c","created_at":"2019-12-20T01:40:29.000+09:00","parent_ids":["6621e7cf79d7d824461de14007b2a06cabe59aef"],"title":"Coherence checking for coercions","message":"Coherence checking for coercions\n\nThis change improves the relaxed ambiguous path condition of coercions (#9743)\nto check that any circular inheritance path of `C >-> C` is definitionally equal\nto the identity function of the class `C`. Moreover, for a new inheritance path\n`p : C >-> D` and existing (valid) one `q : C >-> D`, the new mechanism does not\nreport the ambiguity of `p` and `q` if they have a common element, that is to\nsay:\n`p = p1 @ [c] @ p2` and `q = q1 @ [c] @ q2`\n  for some coercion `c` and inheritance paths `p1`, `p2`, `q1`, and `q2`.\nIn that case, convertibility of `p1` and `q1`, also, `p2` and `q2` should be\nchecked; thus, checking the ambiguity of `p` and `q` is redundant with them.\n\nIf the new mechanism does not report any ambiguous path, the inheritance graph\nmust be coherent [Barthe 1995, Sect. 3.2] [Saïbi 1997, Sect. 7]:\n1. for any circular path `p : C >-> C`, `p` is definitionally equal to the\n   identity function, and\n2. for any two paths `p, q : C >-> D`, `p` and `q` are convertible.\n\n[Barthe 1995] Gilles Barthe, Implicit coercions in type systems, In: TYPES '95,\n              LNCS, vol 1158, Springer, 1996, pp 1-15.\n[Saïbi 1997]  Amokrane Saïbi, Typing algorithm in type theory with inheritance,\n              In: POPL '97, ACM, 1997, pp 292-301.\n","author_name":"Kazuhiko Sakaguchi","author_email":"pi8027@gmail.com","authored_date":"2019-12-08T19:24:43.000+09:00","committer_name":"Kazuhiko Sakaguchi","committer_email":"pi8027@gmail.com","committed_date":"2019-12-20T01:40:29.000+09:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/025dc51c2eef7e7ea302465ff05d04d6fd4e7173"},"pipeline":{"id":104416496,"iid":12767,"project_id":6138686,"sha":"025dc51c2eef7e7ea302465ff05d04d6fd4e7173","ref":"pr-11258","status":"failed","source":"push","created_at":"2019-12-19T16:40:58.112Z","updated_at":"2019-12-19T20:11:06.043Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/104416496"},"web_url":"https://gitlab.com/coq/coq/-/jobs/384922326","artifacts":[{"file_type":"trace","size":333987,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2019-12-26T16:59:12.626Z","tag_list":[]}
