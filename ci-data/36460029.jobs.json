{"id":119976657,"status":"success","stage":"test","name":"ci-vst","ref":"pr-8729","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-13T17:23:56.478Z","started_at":"2018-11-13T17:41:09.645Z","finished_at":"2018-11-13T18:55:13.847Z","duration":4444.202099,"queued_duration":15.199227,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c573f2aaac6af48415301d520e63ea5e8c137ea4","short_id":"c573f2aa","created_at":"2018-11-13T18:23:41.000+01:00","parent_ids":["91a25055bc409ae0f70ff10a82580c7329773b61"],"title":"[dune] Switch to a Dune-based build system.","message":"[dune] Switch to a Dune-based build system.\n\nOver the last months we have added support to build Coq with Dune, I\nfeel we have reached a point where we can start to discuss if we\nshould replace the make-based system with a Dune-based one.\n\nThe *main rationale* for the switch is that maintaining two build\nsystems is hard, and Dune seems superior to make in almost every\naspect.\n\nIndeed, I think it is going to be hard to find technical arguments to\ndefend the make-base system. Dune outperforms it on almost every\npossible metric.\n\nAdditionally, the make-based system has grew organically over the\nyears, and these days we are spending significant developer resources\non it. The number of bugs that would be fixed by Dune is large [see #8052].\nIt is not a coincidence that few large projects do use `make` anymore,\nbut most have moved to `CMake`, `Ninja`, or some other alternative.\n\nOn this side, Dune provides a well-defined model that seems to git\nCoq's present and future necessities well.\n\n*Blockers*: the single blocker for a merge as of today, apart from the\ndepending PRs, is the lack of native-compute support. This is due to a\ntechnical limitation wrt targets and can be solved in several\ndifferent ways. Also, it is likely that a smooth developer profile is\nnot possible until https://github.com/ocaml/dune/issues/1155 lands in\nDune itself. https://github.com/ocaml/dune/issues/1377 may be\nconvenient for the reference manual but we can have a small workaround\nto generate the install file for now.\n\n*Risk analysis*: it is important to understand the risks that such a\nmove would entail. After Dune support is merged we could always go\nback to a make-based system, however we are very likely to depend on\nDune-specific features that would be hard to replicate. The main risks are:\n\n- lock-in: indeed lock-in risk is significant and Coq's source code\n  may depend on some Dune features. On the other hand, Dune is\n  strongly poised to be the standard build tool for the OCaml platform\n  and ecosystem, and more than 50% of OPAM packages use it.\n\n  It is safe to say that if Dune would become unsupported in the\n  future, there would be more important problems than Coq itself.\n\n- lack of in-house knowledge: indeed, Dune requires some specific\n  training in order to understand its build rules, which may become a\n  problem. This risk is mitigated in 2 different ways and attenuated\n  by an additional consideration: first, Dune rules are fairly simple\n  and declarative and it is reasonable to expect developers get to\n  know them without too much effort. This is one of the reasons for\n  the high adoption numbers in the ecosystem. Second, Dune developers\n  are very reactive and care about Coq, thus it is safe to assume that\n  we would get external help if needed. The additional consideration\n  that may make this less of a problem is that our in-house knowledge\n  of make may be even worse than Dune's. A non-negligible number of\n  developers have expressed discomfort with make and the amount of\n  required knowledge to master make seems way higher than what you\n  need to use Dune.\n\n- lack of flexibility: indeed, Dune is way less flexible than\n  make. Dune only knows how to do well two things: building OCaml\n  executables and libraries. However, that is basically 99% of what\n  building Coq entails; building other parts [documentation or Coq\n  libraries] is fairly straightforward and seem to pose not a problem.\n\n- lack of maturity: indeed, Dune develops fast, it is not free of\n  bugs, and some amount of adaptation is expected from us. This risk\n  can only be mitigated if there is continued developer interest.  In\n  the worst case, Coq could become stuck in a particular Dune version.\n\n- bootstrapping: this is not a problem as witnessed by #8615, Dune can\n  be bootstrapped very easily as it depends only on OCaml and it is\n  designed to do so.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-10-15T18:05:29.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-11-13T18:23:41.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c573f2aaac6af48415301d520e63ea5e8c137ea4"},"pipeline":{"id":36460029,"iid":5223,"project_id":6138686,"sha":"c573f2aaac6af48415301d520e63ea5e8c137ea4","ref":"pr-8729","status":"failed","source":"push","created_at":"2018-11-13T17:23:55.577Z","updated_at":"2018-11-13T18:55:13.916Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36460029"},"web_url":"https://gitlab.com/coq/coq/-/jobs/119976657","artifacts":[{"file_type":"trace","size":230410,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":119976656,"status":"success","stage":"test","name":"ci-unimath","ref":"pr-8729","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-13T17:23:56.461Z","started_at":"2018-11-13T17:41:09.534Z","finished_at":"2018-11-13T18:16:19.235Z","duration":2109.701155,"queued_duration":15.049059,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c573f2aaac6af48415301d520e63ea5e8c137ea4","short_id":"c573f2aa","created_at":"2018-11-13T18:23:41.000+01:00","parent_ids":["91a25055bc409ae0f70ff10a82580c7329773b61"],"title":"[dune] Switch to a Dune-based build system.","message":"[dune] Switch to a Dune-based build system.\n\nOver the last months we have added support to build Coq with Dune, I\nfeel we have reached a point where we can start to discuss if we\nshould replace the make-based system with a Dune-based one.\n\nThe *main rationale* for the switch is that maintaining two build\nsystems is hard, and Dune seems superior to make in almost every\naspect.\n\nIndeed, I think it is going to be hard to find technical arguments to\ndefend the make-base system. Dune outperforms it on almost every\npossible metric.\n\nAdditionally, the make-based system has grew organically over the\nyears, and these days we are spending significant developer resources\non it. The number of bugs that would be fixed by Dune is large [see #8052].\nIt is not a coincidence that few large projects do use `make` anymore,\nbut most have moved to `CMake`, `Ninja`, or some other alternative.\n\nOn this side, Dune provides a well-defined model that seems to git\nCoq's present and future necessities well.\n\n*Blockers*: the single blocker for a merge as of today, apart from the\ndepending PRs, is the lack of native-compute support. This is due to a\ntechnical limitation wrt targets and can be solved in several\ndifferent ways. Also, it is likely that a smooth developer profile is\nnot possible until https://github.com/ocaml/dune/issues/1155 lands in\nDune itself. https://github.com/ocaml/dune/issues/1377 may be\nconvenient for the reference manual but we can have a small workaround\nto generate the install file for now.\n\n*Risk analysis*: it is important to understand the risks that such a\nmove would entail. After Dune support is merged we could always go\nback to a make-based system, however we are very likely to depend on\nDune-specific features that would be hard to replicate. The main risks are:\n\n- lock-in: indeed lock-in risk is significant and Coq's source code\n  may depend on some Dune features. On the other hand, Dune is\n  strongly poised to be the standard build tool for the OCaml platform\n  and ecosystem, and more than 50% of OPAM packages use it.\n\n  It is safe to say that if Dune would become unsupported in the\n  future, there would be more important problems than Coq itself.\n\n- lack of in-house knowledge: indeed, Dune requires some specific\n  training in order to understand its build rules, which may become a\n  problem. This risk is mitigated in 2 different ways and attenuated\n  by an additional consideration: first, Dune rules are fairly simple\n  and declarative and it is reasonable to expect developers get to\n  know them without too much effort. This is one of the reasons for\n  the high adoption numbers in the ecosystem. Second, Dune developers\n  are very reactive and care about Coq, thus it is safe to assume that\n  we would get external help if needed. The additional consideration\n  that may make this less of a problem is that our in-house knowledge\n  of make may be even worse than Dune's. A non-negligible number of\n  developers have expressed discomfort with make and the amount of\n  required knowledge to master make seems way higher than what you\n  need to use Dune.\n\n- lack of flexibility: indeed, Dune is way less flexible than\n  make. Dune only knows how to do well two things: building OCaml\n  executables and libraries. However, that is basically 99% of what\n  building Coq entails; building other parts [documentation or Coq\n  libraries] is fairly straightforward and seem to pose not a problem.\n\n- lack of maturity: indeed, Dune develops fast, it is not free of\n  bugs, and some amount of adaptation is expected from us. This risk\n  can only be mitigated if there is continued developer interest.  In\n  the worst case, Coq could become stuck in a particular Dune version.\n\n- bootstrapping: this is not a problem as witnessed by #8615, Dune can\n  be bootstrapped very easily as it depends only on OCaml and it is\n  designed to do so.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-10-15T18:05:29.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-11-13T18:23:41.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c573f2aaac6af48415301d520e63ea5e8c137ea4"},"pipeline":{"id":36460029,"iid":5223,"project_id":6138686,"sha":"c573f2aaac6af48415301d520e63ea5e8c137ea4","ref":"pr-8729","status":"failed","source":"push","created_at":"2018-11-13T17:23:55.577Z","updated_at":"2018-11-13T18:55:13.916Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36460029"},"web_url":"https://gitlab.com/coq/coq/-/jobs/119976656","artifacts":[{"file_type":"trace","size":170008,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":119976655,"status":"success","stage":"test","name":"ci-sf","ref":"pr-8729","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-13T17:23:56.442Z","started_at":"2018-11-13T17:41:09.235Z","finished_at":"2018-11-13T17:45:51.055Z","duration":281.820374,"queued_duration":14.64009,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c573f2aaac6af48415301d520e63ea5e8c137ea4","short_id":"c573f2aa","created_at":"2018-11-13T18:23:41.000+01:00","parent_ids":["91a25055bc409ae0f70ff10a82580c7329773b61"],"title":"[dune] Switch to a Dune-based build system.","message":"[dune] Switch to a Dune-based build system.\n\nOver the last months we have added support to build Coq with Dune, I\nfeel we have reached a point where we can start to discuss if we\nshould replace the make-based system with a Dune-based one.\n\nThe *main rationale* for the switch is that maintaining two build\nsystems is hard, and Dune seems superior to make in almost every\naspect.\n\nIndeed, I think it is going to be hard to find technical arguments to\ndefend the make-base system. Dune outperforms it on almost every\npossible metric.\n\nAdditionally, the make-based system has grew organically over the\nyears, and these days we are spending significant developer resources\non it. The number of bugs that would be fixed by Dune is large [see #8052].\nIt is not a coincidence that few large projects do use `make` anymore,\nbut most have moved to `CMake`, `Ninja`, or some other alternative.\n\nOn this side, Dune provides a well-defined model that seems to git\nCoq's present and future necessities well.\n\n*Blockers*: the single blocker for a merge as of today, apart from the\ndepending PRs, is the lack of native-compute support. This is due to a\ntechnical limitation wrt targets and can be solved in several\ndifferent ways. Also, it is likely that a smooth developer profile is\nnot possible until https://github.com/ocaml/dune/issues/1155 lands in\nDune itself. https://github.com/ocaml/dune/issues/1377 may be\nconvenient for the reference manual but we can have a small workaround\nto generate the install file for now.\n\n*Risk analysis*: it is important to understand the risks that such a\nmove would entail. After Dune support is merged we could always go\nback to a make-based system, however we are very likely to depend on\nDune-specific features that would be hard to replicate. The main risks are:\n\n- lock-in: indeed lock-in risk is significant and Coq's source code\n  may depend on some Dune features. On the other hand, Dune is\n  strongly poised to be the standard build tool for the OCaml platform\n  and ecosystem, and more than 50% of OPAM packages use it.\n\n  It is safe to say that if Dune would become unsupported in the\n  future, there would be more important problems than Coq itself.\n\n- lack of in-house knowledge: indeed, Dune requires some specific\n  training in order to understand its build rules, which may become a\n  problem. This risk is mitigated in 2 different ways and attenuated\n  by an additional consideration: first, Dune rules are fairly simple\n  and declarative and it is reasonable to expect developers get to\n  know them without too much effort. This is one of the reasons for\n  the high adoption numbers in the ecosystem. Second, Dune developers\n  are very reactive and care about Coq, thus it is safe to assume that\n  we would get external help if needed. The additional consideration\n  that may make this less of a problem is that our in-house knowledge\n  of make may be even worse than Dune's. A non-negligible number of\n  developers have expressed discomfort with make and the amount of\n  required knowledge to master make seems way higher than what you\n  need to use Dune.\n\n- lack of flexibility: indeed, Dune is way less flexible than\n  make. Dune only knows how to do well two things: building OCaml\n  executables and libraries. However, that is basically 99% of what\n  building Coq entails; building other parts [documentation or Coq\n  libraries] is fairly straightforward and seem to pose not a problem.\n\n- lack of maturity: indeed, Dune develops fast, it is not free of\n  bugs, and some amount of adaptation is expected from us. This risk\n  can only be mitigated if there is continued developer interest.  In\n  the worst case, Coq could become stuck in a particular Dune version.\n\n- bootstrapping: this is not a problem as witnessed by #8615, Dune can\n  be bootstrapped very easily as it depends only on OCaml and it is\n  designed to do so.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-10-15T18:05:29.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-11-13T18:23:41.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c573f2aaac6af48415301d520e63ea5e8c137ea4"},"pipeline":{"id":36460029,"iid":5223,"project_id":6138686,"sha":"c573f2aaac6af48415301d520e63ea5e8c137ea4","ref":"pr-8729","status":"failed","source":"push","created_at":"2018-11-13T17:23:55.577Z","updated_at":"2018-11-13T18:55:13.916Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36460029"},"web_url":"https://gitlab.com/coq/coq/-/jobs/119976655","artifacts":[{"file_type":"trace","size":277917,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":119976654,"status":"success","stage":"test","name":"ci-quickchick","ref":"pr-8729","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-13T17:23:56.423Z","started_at":"2018-11-13T17:41:08.967Z","finished_at":"2018-11-13T17:46:19.950Z","duration":310.982841,"queued_duration":14.231438,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c573f2aaac6af48415301d520e63ea5e8c137ea4","short_id":"c573f2aa","created_at":"2018-11-13T18:23:41.000+01:00","parent_ids":["91a25055bc409ae0f70ff10a82580c7329773b61"],"title":"[dune] Switch to a Dune-based build system.","message":"[dune] Switch to a Dune-based build system.\n\nOver the last months we have added support to build Coq with Dune, I\nfeel we have reached a point where we can start to discuss if we\nshould replace the make-based system with a Dune-based one.\n\nThe *main rationale* for the switch is that maintaining two build\nsystems is hard, and Dune seems superior to make in almost every\naspect.\n\nIndeed, I think it is going to be hard to find technical arguments to\ndefend the make-base system. Dune outperforms it on almost every\npossible metric.\n\nAdditionally, the make-based system has grew organically over the\nyears, and these days we are spending significant developer resources\non it. The number of bugs that would be fixed by Dune is large [see #8052].\nIt is not a coincidence that few large projects do use `make` anymore,\nbut most have moved to `CMake`, `Ninja`, or some other alternative.\n\nOn this side, Dune provides a well-defined model that seems to git\nCoq's present and future necessities well.\n\n*Blockers*: the single blocker for a merge as of today, apart from the\ndepending PRs, is the lack of native-compute support. This is due to a\ntechnical limitation wrt targets and can be solved in several\ndifferent ways. Also, it is likely that a smooth developer profile is\nnot possible until https://github.com/ocaml/dune/issues/1155 lands in\nDune itself. https://github.com/ocaml/dune/issues/1377 may be\nconvenient for the reference manual but we can have a small workaround\nto generate the install file for now.\n\n*Risk analysis*: it is important to understand the risks that such a\nmove would entail. After Dune support is merged we could always go\nback to a make-based system, however we are very likely to depend on\nDune-specific features that would be hard to replicate. The main risks are:\n\n- lock-in: indeed lock-in risk is significant and Coq's source code\n  may depend on some Dune features. On the other hand, Dune is\n  strongly poised to be the standard build tool for the OCaml platform\n  and ecosystem, and more than 50% of OPAM packages use it.\n\n  It is safe to say that if Dune would become unsupported in the\n  future, there would be more important problems than Coq itself.\n\n- lack of in-house knowledge: indeed, Dune requires some specific\n  training in order to understand its build rules, which may become a\n  problem. This risk is mitigated in 2 different ways and attenuated\n  by an additional consideration: first, Dune rules are fairly simple\n  and declarative and it is reasonable to expect developers get to\n  know them without too much effort. This is one of the reasons for\n  the high adoption numbers in the ecosystem. Second, Dune developers\n  are very reactive and care about Coq, thus it is safe to assume that\n  we would get external help if needed. The additional consideration\n  that may make this less of a problem is that our in-house knowledge\n  of make may be even worse than Dune's. A non-negligible number of\n  developers have expressed discomfort with make and the amount of\n  required knowledge to master make seems way higher than what you\n  need to use Dune.\n\n- lack of flexibility: indeed, Dune is way less flexible than\n  make. Dune only knows how to do well two things: building OCaml\n  executables and libraries. However, that is basically 99% of what\n  building Coq entails; building other parts [documentation or Coq\n  libraries] is fairly straightforward and seem to pose not a problem.\n\n- lack of maturity: indeed, Dune develops fast, it is not free of\n  bugs, and some amount of adaptation is expected from us. This risk\n  can only be mitigated if there is continued developer interest.  In\n  the worst case, Coq could become stuck in a particular Dune version.\n\n- bootstrapping: this is not a problem as witnessed by #8615, Dune can\n  be bootstrapped very easily as it depends only on OCaml and it is\n  designed to do so.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-10-15T18:05:29.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-11-13T18:23:41.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c573f2aaac6af48415301d520e63ea5e8c137ea4"},"pipeline":{"id":36460029,"iid":5223,"project_id":6138686,"sha":"c573f2aaac6af48415301d520e63ea5e8c137ea4","ref":"pr-8729","status":"failed","source":"push","created_at":"2018-11-13T17:23:55.577Z","updated_at":"2018-11-13T18:55:13.916Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36460029"},"web_url":"https://gitlab.com/coq/coq/-/jobs/119976654","artifacts":[{"file_type":"trace","size":282002,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":119976653,"status":"success","stage":"test","name":"ci-plugin-tutorial","ref":"pr-8729","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-13T17:23:56.406Z","started_at":"2018-11-13T17:41:08.797Z","finished_at":"2018-11-13T17:43:49.200Z","duration":160.402843,"queued_duration":13.961151,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c573f2aaac6af48415301d520e63ea5e8c137ea4","short_id":"c573f2aa","created_at":"2018-11-13T18:23:41.000+01:00","parent_ids":["91a25055bc409ae0f70ff10a82580c7329773b61"],"title":"[dune] Switch to a Dune-based build system.","message":"[dune] Switch to a Dune-based build system.\n\nOver the last months we have added support to build Coq with Dune, I\nfeel we have reached a point where we can start to discuss if we\nshould replace the make-based system with a Dune-based one.\n\nThe *main rationale* for the switch is that maintaining two build\nsystems is hard, and Dune seems superior to make in almost every\naspect.\n\nIndeed, I think it is going to be hard to find technical arguments to\ndefend the make-base system. Dune outperforms it on almost every\npossible metric.\n\nAdditionally, the make-based system has grew organically over the\nyears, and these days we are spending significant developer resources\non it. The number of bugs that would be fixed by Dune is large [see #8052].\nIt is not a coincidence that few large projects do use `make` anymore,\nbut most have moved to `CMake`, `Ninja`, or some other alternative.\n\nOn this side, Dune provides a well-defined model that seems to git\nCoq's present and future necessities well.\n\n*Blockers*: the single blocker for a merge as of today, apart from the\ndepending PRs, is the lack of native-compute support. This is due to a\ntechnical limitation wrt targets and can be solved in several\ndifferent ways. Also, it is likely that a smooth developer profile is\nnot possible until https://github.com/ocaml/dune/issues/1155 lands in\nDune itself. https://github.com/ocaml/dune/issues/1377 may be\nconvenient for the reference manual but we can have a small workaround\nto generate the install file for now.\n\n*Risk analysis*: it is important to understand the risks that such a\nmove would entail. After Dune support is merged we could always go\nback to a make-based system, however we are very likely to depend on\nDune-specific features that would be hard to replicate. The main risks are:\n\n- lock-in: indeed lock-in risk is significant and Coq's source code\n  may depend on some Dune features. On the other hand, Dune is\n  strongly poised to be the standard build tool for the OCaml platform\n  and ecosystem, and more than 50% of OPAM packages use it.\n\n  It is safe to say that if Dune would become unsupported in the\n  future, there would be more important problems than Coq itself.\n\n- lack of in-house knowledge: indeed, Dune requires some specific\n  training in order to understand its build rules, which may become a\n  problem. This risk is mitigated in 2 different ways and attenuated\n  by an additional consideration: first, Dune rules are fairly simple\n  and declarative and it is reasonable to expect developers get to\n  know them without too much effort. This is one of the reasons for\n  the high adoption numbers in the ecosystem. Second, Dune developers\n  are very reactive and care about Coq, thus it is safe to assume that\n  we would get external help if needed. The additional consideration\n  that may make this less of a problem is that our in-house knowledge\n  of make may be even worse than Dune's. A non-negligible number of\n  developers have expressed discomfort with make and the amount of\n  required knowledge to master make seems way higher than what you\n  need to use Dune.\n\n- lack of flexibility: indeed, Dune is way less flexible than\n  make. Dune only knows how to do well two things: building OCaml\n  executables and libraries. However, that is basically 99% of what\n  building Coq entails; building other parts [documentation or Coq\n  libraries] is fairly straightforward and seem to pose not a problem.\n\n- lack of maturity: indeed, Dune develops fast, it is not free of\n  bugs, and some amount of adaptation is expected from us. This risk\n  can only be mitigated if there is continued developer interest.  In\n  the worst case, Coq could become stuck in a particular Dune version.\n\n- bootstrapping: this is not a problem as witnessed by #8615, Dune can\n  be bootstrapped very easily as it depends only on OCaml and it is\n  designed to do so.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-10-15T18:05:29.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-11-13T18:23:41.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c573f2aaac6af48415301d520e63ea5e8c137ea4"},"pipeline":{"id":36460029,"iid":5223,"project_id":6138686,"sha":"c573f2aaac6af48415301d520e63ea5e8c137ea4","ref":"pr-8729","status":"failed","source":"push","created_at":"2018-11-13T17:23:55.577Z","updated_at":"2018-11-13T18:55:13.916Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36460029"},"web_url":"https://gitlab.com/coq/coq/-/jobs/119976653","artifacts":[{"file_type":"trace","size":43749,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":119976652,"status":"failed","stage":"test","name":"ci-pidetop","ref":"pr-8729","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-13T17:23:56.389Z","started_at":"2018-11-13T17:41:08.743Z","finished_at":"2018-11-13T17:43:49.715Z","duration":160.972194,"queued_duration":13.717539,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c573f2aaac6af48415301d520e63ea5e8c137ea4","short_id":"c573f2aa","created_at":"2018-11-13T18:23:41.000+01:00","parent_ids":["91a25055bc409ae0f70ff10a82580c7329773b61"],"title":"[dune] Switch to a Dune-based build system.","message":"[dune] Switch to a Dune-based build system.\n\nOver the last months we have added support to build Coq with Dune, I\nfeel we have reached a point where we can start to discuss if we\nshould replace the make-based system with a Dune-based one.\n\nThe *main rationale* for the switch is that maintaining two build\nsystems is hard, and Dune seems superior to make in almost every\naspect.\n\nIndeed, I think it is going to be hard to find technical arguments to\ndefend the make-base system. Dune outperforms it on almost every\npossible metric.\n\nAdditionally, the make-based system has grew organically over the\nyears, and these days we are spending significant developer resources\non it. The number of bugs that would be fixed by Dune is large [see #8052].\nIt is not a coincidence that few large projects do use `make` anymore,\nbut most have moved to `CMake`, `Ninja`, or some other alternative.\n\nOn this side, Dune provides a well-defined model that seems to git\nCoq's present and future necessities well.\n\n*Blockers*: the single blocker for a merge as of today, apart from the\ndepending PRs, is the lack of native-compute support. This is due to a\ntechnical limitation wrt targets and can be solved in several\ndifferent ways. Also, it is likely that a smooth developer profile is\nnot possible until https://github.com/ocaml/dune/issues/1155 lands in\nDune itself. https://github.com/ocaml/dune/issues/1377 may be\nconvenient for the reference manual but we can have a small workaround\nto generate the install file for now.\n\n*Risk analysis*: it is important to understand the risks that such a\nmove would entail. After Dune support is merged we could always go\nback to a make-based system, however we are very likely to depend on\nDune-specific features that would be hard to replicate. The main risks are:\n\n- lock-in: indeed lock-in risk is significant and Coq's source code\n  may depend on some Dune features. On the other hand, Dune is\n  strongly poised to be the standard build tool for the OCaml platform\n  and ecosystem, and more than 50% of OPAM packages use it.\n\n  It is safe to say that if Dune would become unsupported in the\n  future, there would be more important problems than Coq itself.\n\n- lack of in-house knowledge: indeed, Dune requires some specific\n  training in order to understand its build rules, which may become a\n  problem. This risk is mitigated in 2 different ways and attenuated\n  by an additional consideration: first, Dune rules are fairly simple\n  and declarative and it is reasonable to expect developers get to\n  know them without too much effort. This is one of the reasons for\n  the high adoption numbers in the ecosystem. Second, Dune developers\n  are very reactive and care about Coq, thus it is safe to assume that\n  we would get external help if needed. The additional consideration\n  that may make this less of a problem is that our in-house knowledge\n  of make may be even worse than Dune's. A non-negligible number of\n  developers have expressed discomfort with make and the amount of\n  required knowledge to master make seems way higher than what you\n  need to use Dune.\n\n- lack of flexibility: indeed, Dune is way less flexible than\n  make. Dune only knows how to do well two things: building OCaml\n  executables and libraries. However, that is basically 99% of what\n  building Coq entails; building other parts [documentation or Coq\n  libraries] is fairly straightforward and seem to pose not a problem.\n\n- lack of maturity: indeed, Dune develops fast, it is not free of\n  bugs, and some amount of adaptation is expected from us. This risk\n  can only be mitigated if there is continued developer interest.  In\n  the worst case, Coq could become stuck in a particular Dune version.\n\n- bootstrapping: this is not a problem as witnessed by #8615, Dune can\n  be bootstrapped very easily as it depends only on OCaml and it is\n  designed to do so.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-10-15T18:05:29.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-11-13T18:23:41.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c573f2aaac6af48415301d520e63ea5e8c137ea4"},"pipeline":{"id":36460029,"iid":5223,"project_id":6138686,"sha":"c573f2aaac6af48415301d520e63ea5e8c137ea4","ref":"pr-8729","status":"failed","source":"push","created_at":"2018-11-13T17:23:55.577Z","updated_at":"2018-11-13T18:55:13.916Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36460029"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/119976652","artifacts":[{"file_type":"trace","size":42124,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":119976650,"status":"success","stage":"test","name":"ci-paramcoq","ref":"pr-8729","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-13T17:23:56.369Z","started_at":"2018-11-13T17:41:08.281Z","finished_at":"2018-11-13T17:44:12.352Z","duration":184.07035,"queued_duration":13.011324,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c573f2aaac6af48415301d520e63ea5e8c137ea4","short_id":"c573f2aa","created_at":"2018-11-13T18:23:41.000+01:00","parent_ids":["91a25055bc409ae0f70ff10a82580c7329773b61"],"title":"[dune] Switch to a Dune-based build system.","message":"[dune] Switch to a Dune-based build system.\n\nOver the last months we have added support to build Coq with Dune, I\nfeel we have reached a point where we can start to discuss if we\nshould replace the make-based system with a Dune-based one.\n\nThe *main rationale* for the switch is that maintaining two build\nsystems is hard, and Dune seems superior to make in almost every\naspect.\n\nIndeed, I think it is going to be hard to find technical arguments to\ndefend the make-base system. Dune outperforms it on almost every\npossible metric.\n\nAdditionally, the make-based system has grew organically over the\nyears, and these days we are spending significant developer resources\non it. The number of bugs that would be fixed by Dune is large [see #8052].\nIt is not a coincidence that few large projects do use `make` anymore,\nbut most have moved to `CMake`, `Ninja`, or some other alternative.\n\nOn this side, Dune provides a well-defined model that seems to git\nCoq's present and future necessities well.\n\n*Blockers*: the single blocker for a merge as of today, apart from the\ndepending PRs, is the lack of native-compute support. This is due to a\ntechnical limitation wrt targets and can be solved in several\ndifferent ways. Also, it is likely that a smooth developer profile is\nnot possible until https://github.com/ocaml/dune/issues/1155 lands in\nDune itself. https://github.com/ocaml/dune/issues/1377 may be\nconvenient for the reference manual but we can have a small workaround\nto generate the install file for now.\n\n*Risk analysis*: it is important to understand the risks that such a\nmove would entail. After Dune support is merged we could always go\nback to a make-based system, however we are very likely to depend on\nDune-specific features that would be hard to replicate. The main risks are:\n\n- lock-in: indeed lock-in risk is significant and Coq's source code\n  may depend on some Dune features. On the other hand, Dune is\n  strongly poised to be the standard build tool for the OCaml platform\n  and ecosystem, and more than 50% of OPAM packages use it.\n\n  It is safe to say that if Dune would become unsupported in the\n  future, there would be more important problems than Coq itself.\n\n- lack of in-house knowledge: indeed, Dune requires some specific\n  training in order to understand its build rules, which may become a\n  problem. This risk is mitigated in 2 different ways and attenuated\n  by an additional consideration: first, Dune rules are fairly simple\n  and declarative and it is reasonable to expect developers get to\n  know them without too much effort. This is one of the reasons for\n  the high adoption numbers in the ecosystem. Second, Dune developers\n  are very reactive and care about Coq, thus it is safe to assume that\n  we would get external help if needed. The additional consideration\n  that may make this less of a problem is that our in-house knowledge\n  of make may be even worse than Dune's. A non-negligible number of\n  developers have expressed discomfort with make and the amount of\n  required knowledge to master make seems way higher than what you\n  need to use Dune.\n\n- lack of flexibility: indeed, Dune is way less flexible than\n  make. Dune only knows how to do well two things: building OCaml\n  executables and libraries. However, that is basically 99% of what\n  building Coq entails; building other parts [documentation or Coq\n  libraries] is fairly straightforward and seem to pose not a problem.\n\n- lack of maturity: indeed, Dune develops fast, it is not free of\n  bugs, and some amount of adaptation is expected from us. This risk\n  can only be mitigated if there is continued developer interest.  In\n  the worst case, Coq could become stuck in a particular Dune version.\n\n- bootstrapping: this is not a problem as witnessed by #8615, Dune can\n  be bootstrapped very easily as it depends only on OCaml and it is\n  designed to do so.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-10-15T18:05:29.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-11-13T18:23:41.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c573f2aaac6af48415301d520e63ea5e8c137ea4"},"pipeline":{"id":36460029,"iid":5223,"project_id":6138686,"sha":"c573f2aaac6af48415301d520e63ea5e8c137ea4","ref":"pr-8729","status":"failed","source":"push","created_at":"2018-11-13T17:23:55.577Z","updated_at":"2018-11-13T18:55:13.916Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36460029"},"web_url":"https://gitlab.com/coq/coq/-/jobs/119976650","artifacts":[{"file_type":"trace","size":37918,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":119976649,"status":"success","stage":"test","name":"ci-mtac2","ref":"pr-8729","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-13T17:23:56.353Z","started_at":"2018-11-13T17:41:08.085Z","finished_at":"2018-11-13T17:44:04.964Z","duration":176.878997,"queued_duration":12.565105,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c573f2aaac6af48415301d520e63ea5e8c137ea4","short_id":"c573f2aa","created_at":"2018-11-13T18:23:41.000+01:00","parent_ids":["91a25055bc409ae0f70ff10a82580c7329773b61"],"title":"[dune] Switch to a Dune-based build system.","message":"[dune] Switch to a Dune-based build system.\n\nOver the last months we have added support to build Coq with Dune, I\nfeel we have reached a point where we can start to discuss if we\nshould replace the make-based system with a Dune-based one.\n\nThe *main rationale* for the switch is that maintaining two build\nsystems is hard, and Dune seems superior to make in almost every\naspect.\n\nIndeed, I think it is going to be hard to find technical arguments to\ndefend the make-base system. Dune outperforms it on almost every\npossible metric.\n\nAdditionally, the make-based system has grew organically over the\nyears, and these days we are spending significant developer resources\non it. The number of bugs that would be fixed by Dune is large [see #8052].\nIt is not a coincidence that few large projects do use `make` anymore,\nbut most have moved to `CMake`, `Ninja`, or some other alternative.\n\nOn this side, Dune provides a well-defined model that seems to git\nCoq's present and future necessities well.\n\n*Blockers*: the single blocker for a merge as of today, apart from the\ndepending PRs, is the lack of native-compute support. This is due to a\ntechnical limitation wrt targets and can be solved in several\ndifferent ways. Also, it is likely that a smooth developer profile is\nnot possible until https://github.com/ocaml/dune/issues/1155 lands in\nDune itself. https://github.com/ocaml/dune/issues/1377 may be\nconvenient for the reference manual but we can have a small workaround\nto generate the install file for now.\n\n*Risk analysis*: it is important to understand the risks that such a\nmove would entail. After Dune support is merged we could always go\nback to a make-based system, however we are very likely to depend on\nDune-specific features that would be hard to replicate. The main risks are:\n\n- lock-in: indeed lock-in risk is significant and Coq's source code\n  may depend on some Dune features. On the other hand, Dune is\n  strongly poised to be the standard build tool for the OCaml platform\n  and ecosystem, and more than 50% of OPAM packages use it.\n\n  It is safe to say that if Dune would become unsupported in the\n  future, there would be more important problems than Coq itself.\n\n- lack of in-house knowledge: indeed, Dune requires some specific\n  training in order to understand its build rules, which may become a\n  problem. This risk is mitigated in 2 different ways and attenuated\n  by an additional consideration: first, Dune rules are fairly simple\n  and declarative and it is reasonable to expect developers get to\n  know them without too much effort. This is one of the reasons for\n  the high adoption numbers in the ecosystem. Second, Dune developers\n  are very reactive and care about Coq, thus it is safe to assume that\n  we would get external help if needed. The additional consideration\n  that may make this less of a problem is that our in-house knowledge\n  of make may be even worse than Dune's. A non-negligible number of\n  developers have expressed discomfort with make and the amount of\n  required knowledge to master make seems way higher than what you\n  need to use Dune.\n\n- lack of flexibility: indeed, Dune is way less flexible than\n  make. Dune only knows how to do well two things: building OCaml\n  executables and libraries. However, that is basically 99% of what\n  building Coq entails; building other parts [documentation or Coq\n  libraries] is fairly straightforward and seem to pose not a problem.\n\n- lack of maturity: indeed, Dune develops fast, it is not free of\n  bugs, and some amount of adaptation is expected from us. This risk\n  can only be mitigated if there is continued developer interest.  In\n  the worst case, Coq could become stuck in a particular Dune version.\n\n- bootstrapping: this is not a problem as witnessed by #8615, Dune can\n  be bootstrapped very easily as it depends only on OCaml and it is\n  designed to do so.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-10-15T18:05:29.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-11-13T18:23:41.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c573f2aaac6af48415301d520e63ea5e8c137ea4"},"pipeline":{"id":36460029,"iid":5223,"project_id":6138686,"sha":"c573f2aaac6af48415301d520e63ea5e8c137ea4","ref":"pr-8729","status":"failed","source":"push","created_at":"2018-11-13T17:23:55.577Z","updated_at":"2018-11-13T18:55:13.916Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36460029"},"web_url":"https://gitlab.com/coq/coq/-/jobs/119976649","artifacts":[{"file_type":"trace","size":180578,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":119976647,"status":"success","stage":"test","name":"ci-math-comp","ref":"pr-8729","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-13T17:23:56.336Z","started_at":"2018-11-13T17:41:08.029Z","finished_at":"2018-11-13T18:36:49.937Z","duration":3341.90789,"queued_duration":12.341068,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c573f2aaac6af48415301d520e63ea5e8c137ea4","short_id":"c573f2aa","created_at":"2018-11-13T18:23:41.000+01:00","parent_ids":["91a25055bc409ae0f70ff10a82580c7329773b61"],"title":"[dune] Switch to a Dune-based build system.","message":"[dune] Switch to a Dune-based build system.\n\nOver the last months we have added support to build Coq with Dune, I\nfeel we have reached a point where we can start to discuss if we\nshould replace the make-based system with a Dune-based one.\n\nThe *main rationale* for the switch is that maintaining two build\nsystems is hard, and Dune seems superior to make in almost every\naspect.\n\nIndeed, I think it is going to be hard to find technical arguments to\ndefend the make-base system. Dune outperforms it on almost every\npossible metric.\n\nAdditionally, the make-based system has grew organically over the\nyears, and these days we are spending significant developer resources\non it. The number of bugs that would be fixed by Dune is large [see #8052].\nIt is not a coincidence that few large projects do use `make` anymore,\nbut most have moved to `CMake`, `Ninja`, or some other alternative.\n\nOn this side, Dune provides a well-defined model that seems to git\nCoq's present and future necessities well.\n\n*Blockers*: the single blocker for a merge as of today, apart from the\ndepending PRs, is the lack of native-compute support. This is due to a\ntechnical limitation wrt targets and can be solved in several\ndifferent ways. Also, it is likely that a smooth developer profile is\nnot possible until https://github.com/ocaml/dune/issues/1155 lands in\nDune itself. https://github.com/ocaml/dune/issues/1377 may be\nconvenient for the reference manual but we can have a small workaround\nto generate the install file for now.\n\n*Risk analysis*: it is important to understand the risks that such a\nmove would entail. After Dune support is merged we could always go\nback to a make-based system, however we are very likely to depend on\nDune-specific features that would be hard to replicate. The main risks are:\n\n- lock-in: indeed lock-in risk is significant and Coq's source code\n  may depend on some Dune features. On the other hand, Dune is\n  strongly poised to be the standard build tool for the OCaml platform\n  and ecosystem, and more than 50% of OPAM packages use it.\n\n  It is safe to say that if Dune would become unsupported in the\n  future, there would be more important problems than Coq itself.\n\n- lack of in-house knowledge: indeed, Dune requires some specific\n  training in order to understand its build rules, which may become a\n  problem. This risk is mitigated in 2 different ways and attenuated\n  by an additional consideration: first, Dune rules are fairly simple\n  and declarative and it is reasonable to expect developers get to\n  know them without too much effort. This is one of the reasons for\n  the high adoption numbers in the ecosystem. Second, Dune developers\n  are very reactive and care about Coq, thus it is safe to assume that\n  we would get external help if needed. The additional consideration\n  that may make this less of a problem is that our in-house knowledge\n  of make may be even worse than Dune's. A non-negligible number of\n  developers have expressed discomfort with make and the amount of\n  required knowledge to master make seems way higher than what you\n  need to use Dune.\n\n- lack of flexibility: indeed, Dune is way less flexible than\n  make. Dune only knows how to do well two things: building OCaml\n  executables and libraries. However, that is basically 99% of what\n  building Coq entails; building other parts [documentation or Coq\n  libraries] is fairly straightforward and seem to pose not a problem.\n\n- lack of maturity: indeed, Dune develops fast, it is not free of\n  bugs, and some amount of adaptation is expected from us. This risk\n  can only be mitigated if there is continued developer interest.  In\n  the worst case, Coq could become stuck in a particular Dune version.\n\n- bootstrapping: this is not a problem as witnessed by #8615, Dune can\n  be bootstrapped very easily as it depends only on OCaml and it is\n  designed to do so.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-10-15T18:05:29.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-11-13T18:23:41.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c573f2aaac6af48415301d520e63ea5e8c137ea4"},"pipeline":{"id":36460029,"iid":5223,"project_id":6138686,"sha":"c573f2aaac6af48415301d520e63ea5e8c137ea4","ref":"pr-8729","status":"failed","source":"push","created_at":"2018-11-13T17:23:55.577Z","updated_at":"2018-11-13T18:55:13.916Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36460029"},"web_url":"https://gitlab.com/coq/coq/-/jobs/119976647","artifacts":[{"file_type":"trace","size":372400,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":119976646,"status":"success","stage":"test","name":"ci-ltac2","ref":"pr-8729","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-13T17:23:56.318Z","started_at":"2018-11-13T17:41:07.733Z","finished_at":"2018-11-13T17:43:55.143Z","duration":167.409621,"queued_duration":11.978095,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c573f2aaac6af48415301d520e63ea5e8c137ea4","short_id":"c573f2aa","created_at":"2018-11-13T18:23:41.000+01:00","parent_ids":["91a25055bc409ae0f70ff10a82580c7329773b61"],"title":"[dune] Switch to a Dune-based build system.","message":"[dune] Switch to a Dune-based build system.\n\nOver the last months we have added support to build Coq with Dune, I\nfeel we have reached a point where we can start to discuss if we\nshould replace the make-based system with a Dune-based one.\n\nThe *main rationale* for the switch is that maintaining two build\nsystems is hard, and Dune seems superior to make in almost every\naspect.\n\nIndeed, I think it is going to be hard to find technical arguments to\ndefend the make-base system. Dune outperforms it on almost every\npossible metric.\n\nAdditionally, the make-based system has grew organically over the\nyears, and these days we are spending significant developer resources\non it. The number of bugs that would be fixed by Dune is large [see #8052].\nIt is not a coincidence that few large projects do use `make` anymore,\nbut most have moved to `CMake`, `Ninja`, or some other alternative.\n\nOn this side, Dune provides a well-defined model that seems to git\nCoq's present and future necessities well.\n\n*Blockers*: the single blocker for a merge as of today, apart from the\ndepending PRs, is the lack of native-compute support. This is due to a\ntechnical limitation wrt targets and can be solved in several\ndifferent ways. Also, it is likely that a smooth developer profile is\nnot possible until https://github.com/ocaml/dune/issues/1155 lands in\nDune itself. https://github.com/ocaml/dune/issues/1377 may be\nconvenient for the reference manual but we can have a small workaround\nto generate the install file for now.\n\n*Risk analysis*: it is important to understand the risks that such a\nmove would entail. After Dune support is merged we could always go\nback to a make-based system, however we are very likely to depend on\nDune-specific features that would be hard to replicate. The main risks are:\n\n- lock-in: indeed lock-in risk is significant and Coq's source code\n  may depend on some Dune features. On the other hand, Dune is\n  strongly poised to be the standard build tool for the OCaml platform\n  and ecosystem, and more than 50% of OPAM packages use it.\n\n  It is safe to say that if Dune would become unsupported in the\n  future, there would be more important problems than Coq itself.\n\n- lack of in-house knowledge: indeed, Dune requires some specific\n  training in order to understand its build rules, which may become a\n  problem. This risk is mitigated in 2 different ways and attenuated\n  by an additional consideration: first, Dune rules are fairly simple\n  and declarative and it is reasonable to expect developers get to\n  know them without too much effort. This is one of the reasons for\n  the high adoption numbers in the ecosystem. Second, Dune developers\n  are very reactive and care about Coq, thus it is safe to assume that\n  we would get external help if needed. The additional consideration\n  that may make this less of a problem is that our in-house knowledge\n  of make may be even worse than Dune's. A non-negligible number of\n  developers have expressed discomfort with make and the amount of\n  required knowledge to master make seems way higher than what you\n  need to use Dune.\n\n- lack of flexibility: indeed, Dune is way less flexible than\n  make. Dune only knows how to do well two things: building OCaml\n  executables and libraries. However, that is basically 99% of what\n  building Coq entails; building other parts [documentation or Coq\n  libraries] is fairly straightforward and seem to pose not a problem.\n\n- lack of maturity: indeed, Dune develops fast, it is not free of\n  bugs, and some amount of adaptation is expected from us. This risk\n  can only be mitigated if there is continued developer interest.  In\n  the worst case, Coq could become stuck in a particular Dune version.\n\n- bootstrapping: this is not a problem as witnessed by #8615, Dune can\n  be bootstrapped very easily as it depends only on OCaml and it is\n  designed to do so.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-10-15T18:05:29.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-11-13T18:23:41.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c573f2aaac6af48415301d520e63ea5e8c137ea4"},"pipeline":{"id":36460029,"iid":5223,"project_id":6138686,"sha":"c573f2aaac6af48415301d520e63ea5e8c137ea4","ref":"pr-8729","status":"failed","source":"push","created_at":"2018-11-13T17:23:55.577Z","updated_at":"2018-11-13T18:55:13.916Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36460029"},"web_url":"https://gitlab.com/coq/coq/-/jobs/119976646","artifacts":[{"file_type":"trace","size":49111,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":119976645,"status":"success","stage":"test","name":"ci-iris-lambda-rust","ref":"pr-8729","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-13T17:23:56.300Z","started_at":"2018-11-13T17:41:07.543Z","finished_at":"2018-11-13T18:50:40.791Z","duration":4173.248321,"queued_duration":11.663397,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c573f2aaac6af48415301d520e63ea5e8c137ea4","short_id":"c573f2aa","created_at":"2018-11-13T18:23:41.000+01:00","parent_ids":["91a25055bc409ae0f70ff10a82580c7329773b61"],"title":"[dune] Switch to a Dune-based build system.","message":"[dune] Switch to a Dune-based build system.\n\nOver the last months we have added support to build Coq with Dune, I\nfeel we have reached a point where we can start to discuss if we\nshould replace the make-based system with a Dune-based one.\n\nThe *main rationale* for the switch is that maintaining two build\nsystems is hard, and Dune seems superior to make in almost every\naspect.\n\nIndeed, I think it is going to be hard to find technical arguments to\ndefend the make-base system. Dune outperforms it on almost every\npossible metric.\n\nAdditionally, the make-based system has grew organically over the\nyears, and these days we are spending significant developer resources\non it. The number of bugs that would be fixed by Dune is large [see #8052].\nIt is not a coincidence that few large projects do use `make` anymore,\nbut most have moved to `CMake`, `Ninja`, or some other alternative.\n\nOn this side, Dune provides a well-defined model that seems to git\nCoq's present and future necessities well.\n\n*Blockers*: the single blocker for a merge as of today, apart from the\ndepending PRs, is the lack of native-compute support. This is due to a\ntechnical limitation wrt targets and can be solved in several\ndifferent ways. Also, it is likely that a smooth developer profile is\nnot possible until https://github.com/ocaml/dune/issues/1155 lands in\nDune itself. https://github.com/ocaml/dune/issues/1377 may be\nconvenient for the reference manual but we can have a small workaround\nto generate the install file for now.\n\n*Risk analysis*: it is important to understand the risks that such a\nmove would entail. After Dune support is merged we could always go\nback to a make-based system, however we are very likely to depend on\nDune-specific features that would be hard to replicate. The main risks are:\n\n- lock-in: indeed lock-in risk is significant and Coq's source code\n  may depend on some Dune features. On the other hand, Dune is\n  strongly poised to be the standard build tool for the OCaml platform\n  and ecosystem, and more than 50% of OPAM packages use it.\n\n  It is safe to say that if Dune would become unsupported in the\n  future, there would be more important problems than Coq itself.\n\n- lack of in-house knowledge: indeed, Dune requires some specific\n  training in order to understand its build rules, which may become a\n  problem. This risk is mitigated in 2 different ways and attenuated\n  by an additional consideration: first, Dune rules are fairly simple\n  and declarative and it is reasonable to expect developers get to\n  know them without too much effort. This is one of the reasons for\n  the high adoption numbers in the ecosystem. Second, Dune developers\n  are very reactive and care about Coq, thus it is safe to assume that\n  we would get external help if needed. The additional consideration\n  that may make this less of a problem is that our in-house knowledge\n  of make may be even worse than Dune's. A non-negligible number of\n  developers have expressed discomfort with make and the amount of\n  required knowledge to master make seems way higher than what you\n  need to use Dune.\n\n- lack of flexibility: indeed, Dune is way less flexible than\n  make. Dune only knows how to do well two things: building OCaml\n  executables and libraries. However, that is basically 99% of what\n  building Coq entails; building other parts [documentation or Coq\n  libraries] is fairly straightforward and seem to pose not a problem.\n\n- lack of maturity: indeed, Dune develops fast, it is not free of\n  bugs, and some amount of adaptation is expected from us. This risk\n  can only be mitigated if there is continued developer interest.  In\n  the worst case, Coq could become stuck in a particular Dune version.\n\n- bootstrapping: this is not a problem as witnessed by #8615, Dune can\n  be bootstrapped very easily as it depends only on OCaml and it is\n  designed to do so.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-10-15T18:05:29.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-11-13T18:23:41.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c573f2aaac6af48415301d520e63ea5e8c137ea4"},"pipeline":{"id":36460029,"iid":5223,"project_id":6138686,"sha":"c573f2aaac6af48415301d520e63ea5e8c137ea4","ref":"pr-8729","status":"failed","source":"push","created_at":"2018-11-13T17:23:55.577Z","updated_at":"2018-11-13T18:55:13.916Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36460029"},"web_url":"https://gitlab.com/coq/coq/-/jobs/119976645","artifacts":[{"file_type":"trace","size":309534,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":119976643,"status":"success","stage":"test","name":"ci-hott","ref":"pr-8729","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-13T17:23:56.260Z","started_at":"2018-11-13T17:41:06.857Z","finished_at":"2018-11-13T17:56:00.750Z","duration":893.893076,"queued_duration":10.933119,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c573f2aaac6af48415301d520e63ea5e8c137ea4","short_id":"c573f2aa","created_at":"2018-11-13T18:23:41.000+01:00","parent_ids":["91a25055bc409ae0f70ff10a82580c7329773b61"],"title":"[dune] Switch to a Dune-based build system.","message":"[dune] Switch to a Dune-based build system.\n\nOver the last months we have added support to build Coq with Dune, I\nfeel we have reached a point where we can start to discuss if we\nshould replace the make-based system with a Dune-based one.\n\nThe *main rationale* for the switch is that maintaining two build\nsystems is hard, and Dune seems superior to make in almost every\naspect.\n\nIndeed, I think it is going to be hard to find technical arguments to\ndefend the make-base system. Dune outperforms it on almost every\npossible metric.\n\nAdditionally, the make-based system has grew organically over the\nyears, and these days we are spending significant developer resources\non it. The number of bugs that would be fixed by Dune is large [see #8052].\nIt is not a coincidence that few large projects do use `make` anymore,\nbut most have moved to `CMake`, `Ninja`, or some other alternative.\n\nOn this side, Dune provides a well-defined model that seems to git\nCoq's present and future necessities well.\n\n*Blockers*: the single blocker for a merge as of today, apart from the\ndepending PRs, is the lack of native-compute support. This is due to a\ntechnical limitation wrt targets and can be solved in several\ndifferent ways. Also, it is likely that a smooth developer profile is\nnot possible until https://github.com/ocaml/dune/issues/1155 lands in\nDune itself. https://github.com/ocaml/dune/issues/1377 may be\nconvenient for the reference manual but we can have a small workaround\nto generate the install file for now.\n\n*Risk analysis*: it is important to understand the risks that such a\nmove would entail. After Dune support is merged we could always go\nback to a make-based system, however we are very likely to depend on\nDune-specific features that would be hard to replicate. The main risks are:\n\n- lock-in: indeed lock-in risk is significant and Coq's source code\n  may depend on some Dune features. On the other hand, Dune is\n  strongly poised to be the standard build tool for the OCaml platform\n  and ecosystem, and more than 50% of OPAM packages use it.\n\n  It is safe to say that if Dune would become unsupported in the\n  future, there would be more important problems than Coq itself.\n\n- lack of in-house knowledge: indeed, Dune requires some specific\n  training in order to understand its build rules, which may become a\n  problem. This risk is mitigated in 2 different ways and attenuated\n  by an additional consideration: first, Dune rules are fairly simple\n  and declarative and it is reasonable to expect developers get to\n  know them without too much effort. This is one of the reasons for\n  the high adoption numbers in the ecosystem. Second, Dune developers\n  are very reactive and care about Coq, thus it is safe to assume that\n  we would get external help if needed. The additional consideration\n  that may make this less of a problem is that our in-house knowledge\n  of make may be even worse than Dune's. A non-negligible number of\n  developers have expressed discomfort with make and the amount of\n  required knowledge to master make seems way higher than what you\n  need to use Dune.\n\n- lack of flexibility: indeed, Dune is way less flexible than\n  make. Dune only knows how to do well two things: building OCaml\n  executables and libraries. However, that is basically 99% of what\n  building Coq entails; building other parts [documentation or Coq\n  libraries] is fairly straightforward and seem to pose not a problem.\n\n- lack of maturity: indeed, Dune develops fast, it is not free of\n  bugs, and some amount of adaptation is expected from us. This risk\n  can only be mitigated if there is continued developer interest.  In\n  the worst case, Coq could become stuck in a particular Dune version.\n\n- bootstrapping: this is not a problem as witnessed by #8615, Dune can\n  be bootstrapped very easily as it depends only on OCaml and it is\n  designed to do so.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-10-15T18:05:29.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-11-13T18:23:41.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c573f2aaac6af48415301d520e63ea5e8c137ea4"},"pipeline":{"id":36460029,"iid":5223,"project_id":6138686,"sha":"c573f2aaac6af48415301d520e63ea5e8c137ea4","ref":"pr-8729","status":"failed","source":"push","created_at":"2018-11-13T17:23:55.577Z","updated_at":"2018-11-13T18:55:13.916Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36460029"},"web_url":"https://gitlab.com/coq/coq/-/jobs/119976643","artifacts":[{"file_type":"trace","size":104370,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":119976642,"status":"failed","stage":"test","name":"ci-coqhammer","ref":"pr-8729","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-13T17:23:56.242Z","started_at":"2018-11-13T17:41:06.658Z","finished_at":"2018-11-13T17:44:02.129Z","duration":175.470763,"queued_duration":10.683886,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c573f2aaac6af48415301d520e63ea5e8c137ea4","short_id":"c573f2aa","created_at":"2018-11-13T18:23:41.000+01:00","parent_ids":["91a25055bc409ae0f70ff10a82580c7329773b61"],"title":"[dune] Switch to a Dune-based build system.","message":"[dune] Switch to a Dune-based build system.\n\nOver the last months we have added support to build Coq with Dune, I\nfeel we have reached a point where we can start to discuss if we\nshould replace the make-based system with a Dune-based one.\n\nThe *main rationale* for the switch is that maintaining two build\nsystems is hard, and Dune seems superior to make in almost every\naspect.\n\nIndeed, I think it is going to be hard to find technical arguments to\ndefend the make-base system. Dune outperforms it on almost every\npossible metric.\n\nAdditionally, the make-based system has grew organically over the\nyears, and these days we are spending significant developer resources\non it. The number of bugs that would be fixed by Dune is large [see #8052].\nIt is not a coincidence that few large projects do use `make` anymore,\nbut most have moved to `CMake`, `Ninja`, or some other alternative.\n\nOn this side, Dune provides a well-defined model that seems to git\nCoq's present and future necessities well.\n\n*Blockers*: the single blocker for a merge as of today, apart from the\ndepending PRs, is the lack of native-compute support. This is due to a\ntechnical limitation wrt targets and can be solved in several\ndifferent ways. Also, it is likely that a smooth developer profile is\nnot possible until https://github.com/ocaml/dune/issues/1155 lands in\nDune itself. https://github.com/ocaml/dune/issues/1377 may be\nconvenient for the reference manual but we can have a small workaround\nto generate the install file for now.\n\n*Risk analysis*: it is important to understand the risks that such a\nmove would entail. After Dune support is merged we could always go\nback to a make-based system, however we are very likely to depend on\nDune-specific features that would be hard to replicate. The main risks are:\n\n- lock-in: indeed lock-in risk is significant and Coq's source code\n  may depend on some Dune features. On the other hand, Dune is\n  strongly poised to be the standard build tool for the OCaml platform\n  and ecosystem, and more than 50% of OPAM packages use it.\n\n  It is safe to say that if Dune would become unsupported in the\n  future, there would be more important problems than Coq itself.\n\n- lack of in-house knowledge: indeed, Dune requires some specific\n  training in order to understand its build rules, which may become a\n  problem. This risk is mitigated in 2 different ways and attenuated\n  by an additional consideration: first, Dune rules are fairly simple\n  and declarative and it is reasonable to expect developers get to\n  know them without too much effort. This is one of the reasons for\n  the high adoption numbers in the ecosystem. Second, Dune developers\n  are very reactive and care about Coq, thus it is safe to assume that\n  we would get external help if needed. The additional consideration\n  that may make this less of a problem is that our in-house knowledge\n  of make may be even worse than Dune's. A non-negligible number of\n  developers have expressed discomfort with make and the amount of\n  required knowledge to master make seems way higher than what you\n  need to use Dune.\n\n- lack of flexibility: indeed, Dune is way less flexible than\n  make. Dune only knows how to do well two things: building OCaml\n  executables and libraries. However, that is basically 99% of what\n  building Coq entails; building other parts [documentation or Coq\n  libraries] is fairly straightforward and seem to pose not a problem.\n\n- lack of maturity: indeed, Dune develops fast, it is not free of\n  bugs, and some amount of adaptation is expected from us. This risk\n  can only be mitigated if there is continued developer interest.  In\n  the worst case, Coq could become stuck in a particular Dune version.\n\n- bootstrapping: this is not a problem as witnessed by #8615, Dune can\n  be bootstrapped very easily as it depends only on OCaml and it is\n  designed to do so.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-10-15T18:05:29.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-11-13T18:23:41.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c573f2aaac6af48415301d520e63ea5e8c137ea4"},"pipeline":{"id":36460029,"iid":5223,"project_id":6138686,"sha":"c573f2aaac6af48415301d520e63ea5e8c137ea4","ref":"pr-8729","status":"failed","source":"push","created_at":"2018-11-13T17:23:55.577Z","updated_at":"2018-11-13T18:55:13.916Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36460029"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/119976642","artifacts":[{"file_type":"trace","size":39390,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":119976641,"status":"success","stage":"test","name":"ci-geocoq","ref":"pr-8729","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-13T17:23:56.224Z","started_at":"2018-11-13T17:41:06.591Z","finished_at":"2018-11-13T18:38:48.090Z","duration":3461.499962,"queued_duration":10.565106,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c573f2aaac6af48415301d520e63ea5e8c137ea4","short_id":"c573f2aa","created_at":"2018-11-13T18:23:41.000+01:00","parent_ids":["91a25055bc409ae0f70ff10a82580c7329773b61"],"title":"[dune] Switch to a Dune-based build system.","message":"[dune] Switch to a Dune-based build system.\n\nOver the last months we have added support to build Coq with Dune, I\nfeel we have reached a point where we can start to discuss if we\nshould replace the make-based system with a Dune-based one.\n\nThe *main rationale* for the switch is that maintaining two build\nsystems is hard, and Dune seems superior to make in almost every\naspect.\n\nIndeed, I think it is going to be hard to find technical arguments to\ndefend the make-base system. Dune outperforms it on almost every\npossible metric.\n\nAdditionally, the make-based system has grew organically over the\nyears, and these days we are spending significant developer resources\non it. The number of bugs that would be fixed by Dune is large [see #8052].\nIt is not a coincidence that few large projects do use `make` anymore,\nbut most have moved to `CMake`, `Ninja`, or some other alternative.\n\nOn this side, Dune provides a well-defined model that seems to git\nCoq's present and future necessities well.\n\n*Blockers*: the single blocker for a merge as of today, apart from the\ndepending PRs, is the lack of native-compute support. This is due to a\ntechnical limitation wrt targets and can be solved in several\ndifferent ways. Also, it is likely that a smooth developer profile is\nnot possible until https://github.com/ocaml/dune/issues/1155 lands in\nDune itself. https://github.com/ocaml/dune/issues/1377 may be\nconvenient for the reference manual but we can have a small workaround\nto generate the install file for now.\n\n*Risk analysis*: it is important to understand the risks that such a\nmove would entail. After Dune support is merged we could always go\nback to a make-based system, however we are very likely to depend on\nDune-specific features that would be hard to replicate. The main risks are:\n\n- lock-in: indeed lock-in risk is significant and Coq's source code\n  may depend on some Dune features. On the other hand, Dune is\n  strongly poised to be the standard build tool for the OCaml platform\n  and ecosystem, and more than 50% of OPAM packages use it.\n\n  It is safe to say that if Dune would become unsupported in the\n  future, there would be more important problems than Coq itself.\n\n- lack of in-house knowledge: indeed, Dune requires some specific\n  training in order to understand its build rules, which may become a\n  problem. This risk is mitigated in 2 different ways and attenuated\n  by an additional consideration: first, Dune rules are fairly simple\n  and declarative and it is reasonable to expect developers get to\n  know them without too much effort. This is one of the reasons for\n  the high adoption numbers in the ecosystem. Second, Dune developers\n  are very reactive and care about Coq, thus it is safe to assume that\n  we would get external help if needed. The additional consideration\n  that may make this less of a problem is that our in-house knowledge\n  of make may be even worse than Dune's. A non-negligible number of\n  developers have expressed discomfort with make and the amount of\n  required knowledge to master make seems way higher than what you\n  need to use Dune.\n\n- lack of flexibility: indeed, Dune is way less flexible than\n  make. Dune only knows how to do well two things: building OCaml\n  executables and libraries. However, that is basically 99% of what\n  building Coq entails; building other parts [documentation or Coq\n  libraries] is fairly straightforward and seem to pose not a problem.\n\n- lack of maturity: indeed, Dune develops fast, it is not free of\n  bugs, and some amount of adaptation is expected from us. This risk\n  can only be mitigated if there is continued developer interest.  In\n  the worst case, Coq could become stuck in a particular Dune version.\n\n- bootstrapping: this is not a problem as witnessed by #8615, Dune can\n  be bootstrapped very easily as it depends only on OCaml and it is\n  designed to do so.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-10-15T18:05:29.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-11-13T18:23:41.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c573f2aaac6af48415301d520e63ea5e8c137ea4"},"pipeline":{"id":36460029,"iid":5223,"project_id":6138686,"sha":"c573f2aaac6af48415301d520e63ea5e8c137ea4","ref":"pr-8729","status":"failed","source":"push","created_at":"2018-11-13T17:23:55.577Z","updated_at":"2018-11-13T18:55:13.916Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36460029"},"web_url":"https://gitlab.com/coq/coq/-/jobs/119976641","artifacts":[{"file_type":"trace","size":349294,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":119976640,"status":"success","stage":"test","name":"ci-formal-topology","ref":"pr-8729","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-13T17:23:56.203Z","started_at":"2018-11-13T17:41:06.091Z","finished_at":"2018-11-13T18:27:51.076Z","duration":2804.98473,"queued_duration":9.990602,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c573f2aaac6af48415301d520e63ea5e8c137ea4","short_id":"c573f2aa","created_at":"2018-11-13T18:23:41.000+01:00","parent_ids":["91a25055bc409ae0f70ff10a82580c7329773b61"],"title":"[dune] Switch to a Dune-based build system.","message":"[dune] Switch to a Dune-based build system.\n\nOver the last months we have added support to build Coq with Dune, I\nfeel we have reached a point where we can start to discuss if we\nshould replace the make-based system with a Dune-based one.\n\nThe *main rationale* for the switch is that maintaining two build\nsystems is hard, and Dune seems superior to make in almost every\naspect.\n\nIndeed, I think it is going to be hard to find technical arguments to\ndefend the make-base system. Dune outperforms it on almost every\npossible metric.\n\nAdditionally, the make-based system has grew organically over the\nyears, and these days we are spending significant developer resources\non it. The number of bugs that would be fixed by Dune is large [see #8052].\nIt is not a coincidence that few large projects do use `make` anymore,\nbut most have moved to `CMake`, `Ninja`, or some other alternative.\n\nOn this side, Dune provides a well-defined model that seems to git\nCoq's present and future necessities well.\n\n*Blockers*: the single blocker for a merge as of today, apart from the\ndepending PRs, is the lack of native-compute support. This is due to a\ntechnical limitation wrt targets and can be solved in several\ndifferent ways. Also, it is likely that a smooth developer profile is\nnot possible until https://github.com/ocaml/dune/issues/1155 lands in\nDune itself. https://github.com/ocaml/dune/issues/1377 may be\nconvenient for the reference manual but we can have a small workaround\nto generate the install file for now.\n\n*Risk analysis*: it is important to understand the risks that such a\nmove would entail. After Dune support is merged we could always go\nback to a make-based system, however we are very likely to depend on\nDune-specific features that would be hard to replicate. The main risks are:\n\n- lock-in: indeed lock-in risk is significant and Coq's source code\n  may depend on some Dune features. On the other hand, Dune is\n  strongly poised to be the standard build tool for the OCaml platform\n  and ecosystem, and more than 50% of OPAM packages use it.\n\n  It is safe to say that if Dune would become unsupported in the\n  future, there would be more important problems than Coq itself.\n\n- lack of in-house knowledge: indeed, Dune requires some specific\n  training in order to understand its build rules, which may become a\n  problem. This risk is mitigated in 2 different ways and attenuated\n  by an additional consideration: first, Dune rules are fairly simple\n  and declarative and it is reasonable to expect developers get to\n  know them without too much effort. This is one of the reasons for\n  the high adoption numbers in the ecosystem. Second, Dune developers\n  are very reactive and care about Coq, thus it is safe to assume that\n  we would get external help if needed. The additional consideration\n  that may make this less of a problem is that our in-house knowledge\n  of make may be even worse than Dune's. A non-negligible number of\n  developers have expressed discomfort with make and the amount of\n  required knowledge to master make seems way higher than what you\n  need to use Dune.\n\n- lack of flexibility: indeed, Dune is way less flexible than\n  make. Dune only knows how to do well two things: building OCaml\n  executables and libraries. However, that is basically 99% of what\n  building Coq entails; building other parts [documentation or Coq\n  libraries] is fairly straightforward and seem to pose not a problem.\n\n- lack of maturity: indeed, Dune develops fast, it is not free of\n  bugs, and some amount of adaptation is expected from us. This risk\n  can only be mitigated if there is continued developer interest.  In\n  the worst case, Coq could become stuck in a particular Dune version.\n\n- bootstrapping: this is not a problem as witnessed by #8615, Dune can\n  be bootstrapped very easily as it depends only on OCaml and it is\n  designed to do so.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-10-15T18:05:29.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-11-13T18:23:41.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c573f2aaac6af48415301d520e63ea5e8c137ea4"},"pipeline":{"id":36460029,"iid":5223,"project_id":6138686,"sha":"c573f2aaac6af48415301d520e63ea5e8c137ea4","ref":"pr-8729","status":"failed","source":"push","created_at":"2018-11-13T17:23:55.577Z","updated_at":"2018-11-13T18:55:13.916Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36460029"},"web_url":"https://gitlab.com/coq/coq/-/jobs/119976640","artifacts":[{"file_type":"trace","size":619342,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":119976639,"status":"success","stage":"test","name":"ci-flocq","ref":"pr-8729","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-13T17:23:56.185Z","started_at":"2018-11-13T17:41:05.074Z","finished_at":"2018-11-13T17:58:48.765Z","duration":1063.690907,"queued_duration":8.912891,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c573f2aaac6af48415301d520e63ea5e8c137ea4","short_id":"c573f2aa","created_at":"2018-11-13T18:23:41.000+01:00","parent_ids":["91a25055bc409ae0f70ff10a82580c7329773b61"],"title":"[dune] Switch to a Dune-based build system.","message":"[dune] Switch to a Dune-based build system.\n\nOver the last months we have added support to build Coq with Dune, I\nfeel we have reached a point where we can start to discuss if we\nshould replace the make-based system with a Dune-based one.\n\nThe *main rationale* for the switch is that maintaining two build\nsystems is hard, and Dune seems superior to make in almost every\naspect.\n\nIndeed, I think it is going to be hard to find technical arguments to\ndefend the make-base system. Dune outperforms it on almost every\npossible metric.\n\nAdditionally, the make-based system has grew organically over the\nyears, and these days we are spending significant developer resources\non it. The number of bugs that would be fixed by Dune is large [see #8052].\nIt is not a coincidence that few large projects do use `make` anymore,\nbut most have moved to `CMake`, `Ninja`, or some other alternative.\n\nOn this side, Dune provides a well-defined model that seems to git\nCoq's present and future necessities well.\n\n*Blockers*: the single blocker for a merge as of today, apart from the\ndepending PRs, is the lack of native-compute support. This is due to a\ntechnical limitation wrt targets and can be solved in several\ndifferent ways. Also, it is likely that a smooth developer profile is\nnot possible until https://github.com/ocaml/dune/issues/1155 lands in\nDune itself. https://github.com/ocaml/dune/issues/1377 may be\nconvenient for the reference manual but we can have a small workaround\nto generate the install file for now.\n\n*Risk analysis*: it is important to understand the risks that such a\nmove would entail. After Dune support is merged we could always go\nback to a make-based system, however we are very likely to depend on\nDune-specific features that would be hard to replicate. The main risks are:\n\n- lock-in: indeed lock-in risk is significant and Coq's source code\n  may depend on some Dune features. On the other hand, Dune is\n  strongly poised to be the standard build tool for the OCaml platform\n  and ecosystem, and more than 50% of OPAM packages use it.\n\n  It is safe to say that if Dune would become unsupported in the\n  future, there would be more important problems than Coq itself.\n\n- lack of in-house knowledge: indeed, Dune requires some specific\n  training in order to understand its build rules, which may become a\n  problem. This risk is mitigated in 2 different ways and attenuated\n  by an additional consideration: first, Dune rules are fairly simple\n  and declarative and it is reasonable to expect developers get to\n  know them without too much effort. This is one of the reasons for\n  the high adoption numbers in the ecosystem. Second, Dune developers\n  are very reactive and care about Coq, thus it is safe to assume that\n  we would get external help if needed. The additional consideration\n  that may make this less of a problem is that our in-house knowledge\n  of make may be even worse than Dune's. A non-negligible number of\n  developers have expressed discomfort with make and the amount of\n  required knowledge to master make seems way higher than what you\n  need to use Dune.\n\n- lack of flexibility: indeed, Dune is way less flexible than\n  make. Dune only knows how to do well two things: building OCaml\n  executables and libraries. However, that is basically 99% of what\n  building Coq entails; building other parts [documentation or Coq\n  libraries] is fairly straightforward and seem to pose not a problem.\n\n- lack of maturity: indeed, Dune develops fast, it is not free of\n  bugs, and some amount of adaptation is expected from us. This risk\n  can only be mitigated if there is continued developer interest.  In\n  the worst case, Coq could become stuck in a particular Dune version.\n\n- bootstrapping: this is not a problem as witnessed by #8615, Dune can\n  be bootstrapped very easily as it depends only on OCaml and it is\n  designed to do so.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-10-15T18:05:29.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-11-13T18:23:41.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c573f2aaac6af48415301d520e63ea5e8c137ea4"},"pipeline":{"id":36460029,"iid":5223,"project_id":6138686,"sha":"c573f2aaac6af48415301d520e63ea5e8c137ea4","ref":"pr-8729","status":"failed","source":"push","created_at":"2018-11-13T17:23:55.577Z","updated_at":"2018-11-13T18:55:13.916Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36460029"},"web_url":"https://gitlab.com/coq/coq/-/jobs/119976639","artifacts":[{"file_type":"trace","size":41890,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":119976638,"status":"success","stage":"test","name":"ci-fiat-parsers","ref":"pr-8729","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-13T17:23:56.167Z","started_at":"2018-11-13T17:41:05.011Z","finished_at":"2018-11-13T18:02:00.478Z","duration":1255.467359,"queued_duration":8.784702,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c573f2aaac6af48415301d520e63ea5e8c137ea4","short_id":"c573f2aa","created_at":"2018-11-13T18:23:41.000+01:00","parent_ids":["91a25055bc409ae0f70ff10a82580c7329773b61"],"title":"[dune] Switch to a Dune-based build system.","message":"[dune] Switch to a Dune-based build system.\n\nOver the last months we have added support to build Coq with Dune, I\nfeel we have reached a point where we can start to discuss if we\nshould replace the make-based system with a Dune-based one.\n\nThe *main rationale* for the switch is that maintaining two build\nsystems is hard, and Dune seems superior to make in almost every\naspect.\n\nIndeed, I think it is going to be hard to find technical arguments to\ndefend the make-base system. Dune outperforms it on almost every\npossible metric.\n\nAdditionally, the make-based system has grew organically over the\nyears, and these days we are spending significant developer resources\non it. The number of bugs that would be fixed by Dune is large [see #8052].\nIt is not a coincidence that few large projects do use `make` anymore,\nbut most have moved to `CMake`, `Ninja`, or some other alternative.\n\nOn this side, Dune provides a well-defined model that seems to git\nCoq's present and future necessities well.\n\n*Blockers*: the single blocker for a merge as of today, apart from the\ndepending PRs, is the lack of native-compute support. This is due to a\ntechnical limitation wrt targets and can be solved in several\ndifferent ways. Also, it is likely that a smooth developer profile is\nnot possible until https://github.com/ocaml/dune/issues/1155 lands in\nDune itself. https://github.com/ocaml/dune/issues/1377 may be\nconvenient for the reference manual but we can have a small workaround\nto generate the install file for now.\n\n*Risk analysis*: it is important to understand the risks that such a\nmove would entail. After Dune support is merged we could always go\nback to a make-based system, however we are very likely to depend on\nDune-specific features that would be hard to replicate. The main risks are:\n\n- lock-in: indeed lock-in risk is significant and Coq's source code\n  may depend on some Dune features. On the other hand, Dune is\n  strongly poised to be the standard build tool for the OCaml platform\n  and ecosystem, and more than 50% of OPAM packages use it.\n\n  It is safe to say that if Dune would become unsupported in the\n  future, there would be more important problems than Coq itself.\n\n- lack of in-house knowledge: indeed, Dune requires some specific\n  training in order to understand its build rules, which may become a\n  problem. This risk is mitigated in 2 different ways and attenuated\n  by an additional consideration: first, Dune rules are fairly simple\n  and declarative and it is reasonable to expect developers get to\n  know them without too much effort. This is one of the reasons for\n  the high adoption numbers in the ecosystem. Second, Dune developers\n  are very reactive and care about Coq, thus it is safe to assume that\n  we would get external help if needed. The additional consideration\n  that may make this less of a problem is that our in-house knowledge\n  of make may be even worse than Dune's. A non-negligible number of\n  developers have expressed discomfort with make and the amount of\n  required knowledge to master make seems way higher than what you\n  need to use Dune.\n\n- lack of flexibility: indeed, Dune is way less flexible than\n  make. Dune only knows how to do well two things: building OCaml\n  executables and libraries. However, that is basically 99% of what\n  building Coq entails; building other parts [documentation or Coq\n  libraries] is fairly straightforward and seem to pose not a problem.\n\n- lack of maturity: indeed, Dune develops fast, it is not free of\n  bugs, and some amount of adaptation is expected from us. This risk\n  can only be mitigated if there is continued developer interest.  In\n  the worst case, Coq could become stuck in a particular Dune version.\n\n- bootstrapping: this is not a problem as witnessed by #8615, Dune can\n  be bootstrapped very easily as it depends only on OCaml and it is\n  designed to do so.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-10-15T18:05:29.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-11-13T18:23:41.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c573f2aaac6af48415301d520e63ea5e8c137ea4"},"pipeline":{"id":36460029,"iid":5223,"project_id":6138686,"sha":"c573f2aaac6af48415301d520e63ea5e8c137ea4","ref":"pr-8729","status":"failed","source":"push","created_at":"2018-11-13T17:23:55.577Z","updated_at":"2018-11-13T18:55:13.916Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36460029"},"web_url":"https://gitlab.com/coq/coq/-/jobs/119976638","artifacts":[{"file_type":"trace","size":246294,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":119976637,"status":"success","stage":"test","name":"ci-fiat-crypto-legacy","ref":"pr-8729","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-13T17:23:56.149Z","started_at":"2018-11-13T17:41:04.902Z","finished_at":"2018-11-13T18:52:38.913Z","duration":4294.010815,"queued_duration":8.562269,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c573f2aaac6af48415301d520e63ea5e8c137ea4","short_id":"c573f2aa","created_at":"2018-11-13T18:23:41.000+01:00","parent_ids":["91a25055bc409ae0f70ff10a82580c7329773b61"],"title":"[dune] Switch to a Dune-based build system.","message":"[dune] Switch to a Dune-based build system.\n\nOver the last months we have added support to build Coq with Dune, I\nfeel we have reached a point where we can start to discuss if we\nshould replace the make-based system with a Dune-based one.\n\nThe *main rationale* for the switch is that maintaining two build\nsystems is hard, and Dune seems superior to make in almost every\naspect.\n\nIndeed, I think it is going to be hard to find technical arguments to\ndefend the make-base system. Dune outperforms it on almost every\npossible metric.\n\nAdditionally, the make-based system has grew organically over the\nyears, and these days we are spending significant developer resources\non it. The number of bugs that would be fixed by Dune is large [see #8052].\nIt is not a coincidence that few large projects do use `make` anymore,\nbut most have moved to `CMake`, `Ninja`, or some other alternative.\n\nOn this side, Dune provides a well-defined model that seems to git\nCoq's present and future necessities well.\n\n*Blockers*: the single blocker for a merge as of today, apart from the\ndepending PRs, is the lack of native-compute support. This is due to a\ntechnical limitation wrt targets and can be solved in several\ndifferent ways. Also, it is likely that a smooth developer profile is\nnot possible until https://github.com/ocaml/dune/issues/1155 lands in\nDune itself. https://github.com/ocaml/dune/issues/1377 may be\nconvenient for the reference manual but we can have a small workaround\nto generate the install file for now.\n\n*Risk analysis*: it is important to understand the risks that such a\nmove would entail. After Dune support is merged we could always go\nback to a make-based system, however we are very likely to depend on\nDune-specific features that would be hard to replicate. The main risks are:\n\n- lock-in: indeed lock-in risk is significant and Coq's source code\n  may depend on some Dune features. On the other hand, Dune is\n  strongly poised to be the standard build tool for the OCaml platform\n  and ecosystem, and more than 50% of OPAM packages use it.\n\n  It is safe to say that if Dune would become unsupported in the\n  future, there would be more important problems than Coq itself.\n\n- lack of in-house knowledge: indeed, Dune requires some specific\n  training in order to understand its build rules, which may become a\n  problem. This risk is mitigated in 2 different ways and attenuated\n  by an additional consideration: first, Dune rules are fairly simple\n  and declarative and it is reasonable to expect developers get to\n  know them without too much effort. This is one of the reasons for\n  the high adoption numbers in the ecosystem. Second, Dune developers\n  are very reactive and care about Coq, thus it is safe to assume that\n  we would get external help if needed. The additional consideration\n  that may make this less of a problem is that our in-house knowledge\n  of make may be even worse than Dune's. A non-negligible number of\n  developers have expressed discomfort with make and the amount of\n  required knowledge to master make seems way higher than what you\n  need to use Dune.\n\n- lack of flexibility: indeed, Dune is way less flexible than\n  make. Dune only knows how to do well two things: building OCaml\n  executables and libraries. However, that is basically 99% of what\n  building Coq entails; building other parts [documentation or Coq\n  libraries] is fairly straightforward and seem to pose not a problem.\n\n- lack of maturity: indeed, Dune develops fast, it is not free of\n  bugs, and some amount of adaptation is expected from us. This risk\n  can only be mitigated if there is continued developer interest.  In\n  the worst case, Coq could become stuck in a particular Dune version.\n\n- bootstrapping: this is not a problem as witnessed by #8615, Dune can\n  be bootstrapped very easily as it depends only on OCaml and it is\n  designed to do so.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-10-15T18:05:29.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-11-13T18:23:41.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c573f2aaac6af48415301d520e63ea5e8c137ea4"},"pipeline":{"id":36460029,"iid":5223,"project_id":6138686,"sha":"c573f2aaac6af48415301d520e63ea5e8c137ea4","ref":"pr-8729","status":"failed","source":"push","created_at":"2018-11-13T17:23:55.577Z","updated_at":"2018-11-13T18:55:13.916Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36460029"},"web_url":"https://gitlab.com/coq/coq/-/jobs/119976637","artifacts":[{"file_type":"trace","size":657505,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":119976636,"status":"failed","stage":"test","name":"ci-fiat-crypto","ref":"pr-8729","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-13T17:23:56.132Z","started_at":"2018-11-13T17:41:04.847Z","finished_at":"2018-11-13T18:37:21.850Z","duration":3377.002865,"queued_duration":8.468109,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c573f2aaac6af48415301d520e63ea5e8c137ea4","short_id":"c573f2aa","created_at":"2018-11-13T18:23:41.000+01:00","parent_ids":["91a25055bc409ae0f70ff10a82580c7329773b61"],"title":"[dune] Switch to a Dune-based build system.","message":"[dune] Switch to a Dune-based build system.\n\nOver the last months we have added support to build Coq with Dune, I\nfeel we have reached a point where we can start to discuss if we\nshould replace the make-based system with a Dune-based one.\n\nThe *main rationale* for the switch is that maintaining two build\nsystems is hard, and Dune seems superior to make in almost every\naspect.\n\nIndeed, I think it is going to be hard to find technical arguments to\ndefend the make-base system. Dune outperforms it on almost every\npossible metric.\n\nAdditionally, the make-based system has grew organically over the\nyears, and these days we are spending significant developer resources\non it. The number of bugs that would be fixed by Dune is large [see #8052].\nIt is not a coincidence that few large projects do use `make` anymore,\nbut most have moved to `CMake`, `Ninja`, or some other alternative.\n\nOn this side, Dune provides a well-defined model that seems to git\nCoq's present and future necessities well.\n\n*Blockers*: the single blocker for a merge as of today, apart from the\ndepending PRs, is the lack of native-compute support. This is due to a\ntechnical limitation wrt targets and can be solved in several\ndifferent ways. Also, it is likely that a smooth developer profile is\nnot possible until https://github.com/ocaml/dune/issues/1155 lands in\nDune itself. https://github.com/ocaml/dune/issues/1377 may be\nconvenient for the reference manual but we can have a small workaround\nto generate the install file for now.\n\n*Risk analysis*: it is important to understand the risks that such a\nmove would entail. After Dune support is merged we could always go\nback to a make-based system, however we are very likely to depend on\nDune-specific features that would be hard to replicate. The main risks are:\n\n- lock-in: indeed lock-in risk is significant and Coq's source code\n  may depend on some Dune features. On the other hand, Dune is\n  strongly poised to be the standard build tool for the OCaml platform\n  and ecosystem, and more than 50% of OPAM packages use it.\n\n  It is safe to say that if Dune would become unsupported in the\n  future, there would be more important problems than Coq itself.\n\n- lack of in-house knowledge: indeed, Dune requires some specific\n  training in order to understand its build rules, which may become a\n  problem. This risk is mitigated in 2 different ways and attenuated\n  by an additional consideration: first, Dune rules are fairly simple\n  and declarative and it is reasonable to expect developers get to\n  know them without too much effort. This is one of the reasons for\n  the high adoption numbers in the ecosystem. Second, Dune developers\n  are very reactive and care about Coq, thus it is safe to assume that\n  we would get external help if needed. The additional consideration\n  that may make this less of a problem is that our in-house knowledge\n  of make may be even worse than Dune's. A non-negligible number of\n  developers have expressed discomfort with make and the amount of\n  required knowledge to master make seems way higher than what you\n  need to use Dune.\n\n- lack of flexibility: indeed, Dune is way less flexible than\n  make. Dune only knows how to do well two things: building OCaml\n  executables and libraries. However, that is basically 99% of what\n  building Coq entails; building other parts [documentation or Coq\n  libraries] is fairly straightforward and seem to pose not a problem.\n\n- lack of maturity: indeed, Dune develops fast, it is not free of\n  bugs, and some amount of adaptation is expected from us. This risk\n  can only be mitigated if there is continued developer interest.  In\n  the worst case, Coq could become stuck in a particular Dune version.\n\n- bootstrapping: this is not a problem as witnessed by #8615, Dune can\n  be bootstrapped very easily as it depends only on OCaml and it is\n  designed to do so.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-10-15T18:05:29.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-11-13T18:23:41.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c573f2aaac6af48415301d520e63ea5e8c137ea4"},"pipeline":{"id":36460029,"iid":5223,"project_id":6138686,"sha":"c573f2aaac6af48415301d520e63ea5e8c137ea4","ref":"pr-8729","status":"failed","source":"push","created_at":"2018-11-13T17:23:55.577Z","updated_at":"2018-11-13T18:55:13.916Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36460029"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/119976636","artifacts":[{"file_type":"trace","size":895310,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":119976635,"status":"success","stage":"test","name":"ci-fcsl-pcm","ref":"pr-8729","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-13T17:23:56.114Z","started_at":"2018-11-13T17:41:04.790Z","finished_at":"2018-11-13T17:45:47.359Z","duration":282.569043,"queued_duration":8.358504,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c573f2aaac6af48415301d520e63ea5e8c137ea4","short_id":"c573f2aa","created_at":"2018-11-13T18:23:41.000+01:00","parent_ids":["91a25055bc409ae0f70ff10a82580c7329773b61"],"title":"[dune] Switch to a Dune-based build system.","message":"[dune] Switch to a Dune-based build system.\n\nOver the last months we have added support to build Coq with Dune, I\nfeel we have reached a point where we can start to discuss if we\nshould replace the make-based system with a Dune-based one.\n\nThe *main rationale* for the switch is that maintaining two build\nsystems is hard, and Dune seems superior to make in almost every\naspect.\n\nIndeed, I think it is going to be hard to find technical arguments to\ndefend the make-base system. Dune outperforms it on almost every\npossible metric.\n\nAdditionally, the make-based system has grew organically over the\nyears, and these days we are spending significant developer resources\non it. The number of bugs that would be fixed by Dune is large [see #8052].\nIt is not a coincidence that few large projects do use `make` anymore,\nbut most have moved to `CMake`, `Ninja`, or some other alternative.\n\nOn this side, Dune provides a well-defined model that seems to git\nCoq's present and future necessities well.\n\n*Blockers*: the single blocker for a merge as of today, apart from the\ndepending PRs, is the lack of native-compute support. This is due to a\ntechnical limitation wrt targets and can be solved in several\ndifferent ways. Also, it is likely that a smooth developer profile is\nnot possible until https://github.com/ocaml/dune/issues/1155 lands in\nDune itself. https://github.com/ocaml/dune/issues/1377 may be\nconvenient for the reference manual but we can have a small workaround\nto generate the install file for now.\n\n*Risk analysis*: it is important to understand the risks that such a\nmove would entail. After Dune support is merged we could always go\nback to a make-based system, however we are very likely to depend on\nDune-specific features that would be hard to replicate. The main risks are:\n\n- lock-in: indeed lock-in risk is significant and Coq's source code\n  may depend on some Dune features. On the other hand, Dune is\n  strongly poised to be the standard build tool for the OCaml platform\n  and ecosystem, and more than 50% of OPAM packages use it.\n\n  It is safe to say that if Dune would become unsupported in the\n  future, there would be more important problems than Coq itself.\n\n- lack of in-house knowledge: indeed, Dune requires some specific\n  training in order to understand its build rules, which may become a\n  problem. This risk is mitigated in 2 different ways and attenuated\n  by an additional consideration: first, Dune rules are fairly simple\n  and declarative and it is reasonable to expect developers get to\n  know them without too much effort. This is one of the reasons for\n  the high adoption numbers in the ecosystem. Second, Dune developers\n  are very reactive and care about Coq, thus it is safe to assume that\n  we would get external help if needed. The additional consideration\n  that may make this less of a problem is that our in-house knowledge\n  of make may be even worse than Dune's. A non-negligible number of\n  developers have expressed discomfort with make and the amount of\n  required knowledge to master make seems way higher than what you\n  need to use Dune.\n\n- lack of flexibility: indeed, Dune is way less flexible than\n  make. Dune only knows how to do well two things: building OCaml\n  executables and libraries. However, that is basically 99% of what\n  building Coq entails; building other parts [documentation or Coq\n  libraries] is fairly straightforward and seem to pose not a problem.\n\n- lack of maturity: indeed, Dune develops fast, it is not free of\n  bugs, and some amount of adaptation is expected from us. This risk\n  can only be mitigated if there is continued developer interest.  In\n  the worst case, Coq could become stuck in a particular Dune version.\n\n- bootstrapping: this is not a problem as witnessed by #8615, Dune can\n  be bootstrapped very easily as it depends only on OCaml and it is\n  designed to do so.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-10-15T18:05:29.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-11-13T18:23:41.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c573f2aaac6af48415301d520e63ea5e8c137ea4"},"pipeline":{"id":36460029,"iid":5223,"project_id":6138686,"sha":"c573f2aaac6af48415301d520e63ea5e8c137ea4","ref":"pr-8729","status":"failed","source":"push","created_at":"2018-11-13T17:23:55.577Z","updated_at":"2018-11-13T18:55:13.916Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36460029"},"web_url":"https://gitlab.com/coq/coq/-/jobs/119976635","artifacts":[{"file_type":"trace","size":141215,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":119976634,"status":"success","stage":"test","name":"ci-equations","ref":"pr-8729","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-13T17:23:56.096Z","started_at":"2018-11-13T17:41:04.452Z","finished_at":"2018-11-13T17:48:21.239Z","duration":436.787342,"queued_duration":7.985054,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c573f2aaac6af48415301d520e63ea5e8c137ea4","short_id":"c573f2aa","created_at":"2018-11-13T18:23:41.000+01:00","parent_ids":["91a25055bc409ae0f70ff10a82580c7329773b61"],"title":"[dune] Switch to a Dune-based build system.","message":"[dune] Switch to a Dune-based build system.\n\nOver the last months we have added support to build Coq with Dune, I\nfeel we have reached a point where we can start to discuss if we\nshould replace the make-based system with a Dune-based one.\n\nThe *main rationale* for the switch is that maintaining two build\nsystems is hard, and Dune seems superior to make in almost every\naspect.\n\nIndeed, I think it is going to be hard to find technical arguments to\ndefend the make-base system. Dune outperforms it on almost every\npossible metric.\n\nAdditionally, the make-based system has grew organically over the\nyears, and these days we are spending significant developer resources\non it. The number of bugs that would be fixed by Dune is large [see #8052].\nIt is not a coincidence that few large projects do use `make` anymore,\nbut most have moved to `CMake`, `Ninja`, or some other alternative.\n\nOn this side, Dune provides a well-defined model that seems to git\nCoq's present and future necessities well.\n\n*Blockers*: the single blocker for a merge as of today, apart from the\ndepending PRs, is the lack of native-compute support. This is due to a\ntechnical limitation wrt targets and can be solved in several\ndifferent ways. Also, it is likely that a smooth developer profile is\nnot possible until https://github.com/ocaml/dune/issues/1155 lands in\nDune itself. https://github.com/ocaml/dune/issues/1377 may be\nconvenient for the reference manual but we can have a small workaround\nto generate the install file for now.\n\n*Risk analysis*: it is important to understand the risks that such a\nmove would entail. After Dune support is merged we could always go\nback to a make-based system, however we are very likely to depend on\nDune-specific features that would be hard to replicate. The main risks are:\n\n- lock-in: indeed lock-in risk is significant and Coq's source code\n  may depend on some Dune features. On the other hand, Dune is\n  strongly poised to be the standard build tool for the OCaml platform\n  and ecosystem, and more than 50% of OPAM packages use it.\n\n  It is safe to say that if Dune would become unsupported in the\n  future, there would be more important problems than Coq itself.\n\n- lack of in-house knowledge: indeed, Dune requires some specific\n  training in order to understand its build rules, which may become a\n  problem. This risk is mitigated in 2 different ways and attenuated\n  by an additional consideration: first, Dune rules are fairly simple\n  and declarative and it is reasonable to expect developers get to\n  know them without too much effort. This is one of the reasons for\n  the high adoption numbers in the ecosystem. Second, Dune developers\n  are very reactive and care about Coq, thus it is safe to assume that\n  we would get external help if needed. The additional consideration\n  that may make this less of a problem is that our in-house knowledge\n  of make may be even worse than Dune's. A non-negligible number of\n  developers have expressed discomfort with make and the amount of\n  required knowledge to master make seems way higher than what you\n  need to use Dune.\n\n- lack of flexibility: indeed, Dune is way less flexible than\n  make. Dune only knows how to do well two things: building OCaml\n  executables and libraries. However, that is basically 99% of what\n  building Coq entails; building other parts [documentation or Coq\n  libraries] is fairly straightforward and seem to pose not a problem.\n\n- lack of maturity: indeed, Dune develops fast, it is not free of\n  bugs, and some amount of adaptation is expected from us. This risk\n  can only be mitigated if there is continued developer interest.  In\n  the worst case, Coq could become stuck in a particular Dune version.\n\n- bootstrapping: this is not a problem as witnessed by #8615, Dune can\n  be bootstrapped very easily as it depends only on OCaml and it is\n  designed to do so.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-10-15T18:05:29.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-11-13T18:23:41.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c573f2aaac6af48415301d520e63ea5e8c137ea4"},"pipeline":{"id":36460029,"iid":5223,"project_id":6138686,"sha":"c573f2aaac6af48415301d520e63ea5e8c137ea4","ref":"pr-8729","status":"failed","source":"push","created_at":"2018-11-13T17:23:55.577Z","updated_at":"2018-11-13T18:55:13.916Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36460029"},"web_url":"https://gitlab.com/coq/coq/-/jobs/119976634","artifacts":[{"file_type":"trace","size":75753,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":119976633,"status":"failed","stage":"test","name":"ci-elpi","ref":"pr-8729","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-13T17:23:56.078Z","started_at":"2018-11-13T17:41:04.160Z","finished_at":"2018-11-13T17:43:46.613Z","duration":162.452907,"queued_duration":7.651092,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c573f2aaac6af48415301d520e63ea5e8c137ea4","short_id":"c573f2aa","created_at":"2018-11-13T18:23:41.000+01:00","parent_ids":["91a25055bc409ae0f70ff10a82580c7329773b61"],"title":"[dune] Switch to a Dune-based build system.","message":"[dune] Switch to a Dune-based build system.\n\nOver the last months we have added support to build Coq with Dune, I\nfeel we have reached a point where we can start to discuss if we\nshould replace the make-based system with a Dune-based one.\n\nThe *main rationale* for the switch is that maintaining two build\nsystems is hard, and Dune seems superior to make in almost every\naspect.\n\nIndeed, I think it is going to be hard to find technical arguments to\ndefend the make-base system. Dune outperforms it on almost every\npossible metric.\n\nAdditionally, the make-based system has grew organically over the\nyears, and these days we are spending significant developer resources\non it. The number of bugs that would be fixed by Dune is large [see #8052].\nIt is not a coincidence that few large projects do use `make` anymore,\nbut most have moved to `CMake`, `Ninja`, or some other alternative.\n\nOn this side, Dune provides a well-defined model that seems to git\nCoq's present and future necessities well.\n\n*Blockers*: the single blocker for a merge as of today, apart from the\ndepending PRs, is the lack of native-compute support. This is due to a\ntechnical limitation wrt targets and can be solved in several\ndifferent ways. Also, it is likely that a smooth developer profile is\nnot possible until https://github.com/ocaml/dune/issues/1155 lands in\nDune itself. https://github.com/ocaml/dune/issues/1377 may be\nconvenient for the reference manual but we can have a small workaround\nto generate the install file for now.\n\n*Risk analysis*: it is important to understand the risks that such a\nmove would entail. After Dune support is merged we could always go\nback to a make-based system, however we are very likely to depend on\nDune-specific features that would be hard to replicate. The main risks are:\n\n- lock-in: indeed lock-in risk is significant and Coq's source code\n  may depend on some Dune features. On the other hand, Dune is\n  strongly poised to be the standard build tool for the OCaml platform\n  and ecosystem, and more than 50% of OPAM packages use it.\n\n  It is safe to say that if Dune would become unsupported in the\n  future, there would be more important problems than Coq itself.\n\n- lack of in-house knowledge: indeed, Dune requires some specific\n  training in order to understand its build rules, which may become a\n  problem. This risk is mitigated in 2 different ways and attenuated\n  by an additional consideration: first, Dune rules are fairly simple\n  and declarative and it is reasonable to expect developers get to\n  know them without too much effort. This is one of the reasons for\n  the high adoption numbers in the ecosystem. Second, Dune developers\n  are very reactive and care about Coq, thus it is safe to assume that\n  we would get external help if needed. The additional consideration\n  that may make this less of a problem is that our in-house knowledge\n  of make may be even worse than Dune's. A non-negligible number of\n  developers have expressed discomfort with make and the amount of\n  required knowledge to master make seems way higher than what you\n  need to use Dune.\n\n- lack of flexibility: indeed, Dune is way less flexible than\n  make. Dune only knows how to do well two things: building OCaml\n  executables and libraries. However, that is basically 99% of what\n  building Coq entails; building other parts [documentation or Coq\n  libraries] is fairly straightforward and seem to pose not a problem.\n\n- lack of maturity: indeed, Dune develops fast, it is not free of\n  bugs, and some amount of adaptation is expected from us. This risk\n  can only be mitigated if there is continued developer interest.  In\n  the worst case, Coq could become stuck in a particular Dune version.\n\n- bootstrapping: this is not a problem as witnessed by #8615, Dune can\n  be bootstrapped very easily as it depends only on OCaml and it is\n  designed to do so.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-10-15T18:05:29.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-11-13T18:23:41.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c573f2aaac6af48415301d520e63ea5e8c137ea4"},"pipeline":{"id":36460029,"iid":5223,"project_id":6138686,"sha":"c573f2aaac6af48415301d520e63ea5e8c137ea4","ref":"pr-8729","status":"failed","source":"push","created_at":"2018-11-13T17:23:55.577Z","updated_at":"2018-11-13T18:55:13.916Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36460029"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/119976633","artifacts":[{"file_type":"trace","size":43144,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":119976632,"status":"success","stage":"test","name":"ci-cross-crypto","ref":"pr-8729","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-13T17:23:56.059Z","started_at":"2018-11-13T17:41:04.009Z","finished_at":"2018-11-13T18:34:36.739Z","duration":3212.729624,"queued_duration":7.443963,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c573f2aaac6af48415301d520e63ea5e8c137ea4","short_id":"c573f2aa","created_at":"2018-11-13T18:23:41.000+01:00","parent_ids":["91a25055bc409ae0f70ff10a82580c7329773b61"],"title":"[dune] Switch to a Dune-based build system.","message":"[dune] Switch to a Dune-based build system.\n\nOver the last months we have added support to build Coq with Dune, I\nfeel we have reached a point where we can start to discuss if we\nshould replace the make-based system with a Dune-based one.\n\nThe *main rationale* for the switch is that maintaining two build\nsystems is hard, and Dune seems superior to make in almost every\naspect.\n\nIndeed, I think it is going to be hard to find technical arguments to\ndefend the make-base system. Dune outperforms it on almost every\npossible metric.\n\nAdditionally, the make-based system has grew organically over the\nyears, and these days we are spending significant developer resources\non it. The number of bugs that would be fixed by Dune is large [see #8052].\nIt is not a coincidence that few large projects do use `make` anymore,\nbut most have moved to `CMake`, `Ninja`, or some other alternative.\n\nOn this side, Dune provides a well-defined model that seems to git\nCoq's present and future necessities well.\n\n*Blockers*: the single blocker for a merge as of today, apart from the\ndepending PRs, is the lack of native-compute support. This is due to a\ntechnical limitation wrt targets and can be solved in several\ndifferent ways. Also, it is likely that a smooth developer profile is\nnot possible until https://github.com/ocaml/dune/issues/1155 lands in\nDune itself. https://github.com/ocaml/dune/issues/1377 may be\nconvenient for the reference manual but we can have a small workaround\nto generate the install file for now.\n\n*Risk analysis*: it is important to understand the risks that such a\nmove would entail. After Dune support is merged we could always go\nback to a make-based system, however we are very likely to depend on\nDune-specific features that would be hard to replicate. The main risks are:\n\n- lock-in: indeed lock-in risk is significant and Coq's source code\n  may depend on some Dune features. On the other hand, Dune is\n  strongly poised to be the standard build tool for the OCaml platform\n  and ecosystem, and more than 50% of OPAM packages use it.\n\n  It is safe to say that if Dune would become unsupported in the\n  future, there would be more important problems than Coq itself.\n\n- lack of in-house knowledge: indeed, Dune requires some specific\n  training in order to understand its build rules, which may become a\n  problem. This risk is mitigated in 2 different ways and attenuated\n  by an additional consideration: first, Dune rules are fairly simple\n  and declarative and it is reasonable to expect developers get to\n  know them without too much effort. This is one of the reasons for\n  the high adoption numbers in the ecosystem. Second, Dune developers\n  are very reactive and care about Coq, thus it is safe to assume that\n  we would get external help if needed. The additional consideration\n  that may make this less of a problem is that our in-house knowledge\n  of make may be even worse than Dune's. A non-negligible number of\n  developers have expressed discomfort with make and the amount of\n  required knowledge to master make seems way higher than what you\n  need to use Dune.\n\n- lack of flexibility: indeed, Dune is way less flexible than\n  make. Dune only knows how to do well two things: building OCaml\n  executables and libraries. However, that is basically 99% of what\n  building Coq entails; building other parts [documentation or Coq\n  libraries] is fairly straightforward and seem to pose not a problem.\n\n- lack of maturity: indeed, Dune develops fast, it is not free of\n  bugs, and some amount of adaptation is expected from us. This risk\n  can only be mitigated if there is continued developer interest.  In\n  the worst case, Coq could become stuck in a particular Dune version.\n\n- bootstrapping: this is not a problem as witnessed by #8615, Dune can\n  be bootstrapped very easily as it depends only on OCaml and it is\n  designed to do so.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-10-15T18:05:29.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-11-13T18:23:41.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c573f2aaac6af48415301d520e63ea5e8c137ea4"},"pipeline":{"id":36460029,"iid":5223,"project_id":6138686,"sha":"c573f2aaac6af48415301d520e63ea5e8c137ea4","ref":"pr-8729","status":"failed","source":"push","created_at":"2018-11-13T17:23:55.577Z","updated_at":"2018-11-13T18:55:13.916Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36460029"},"web_url":"https://gitlab.com/coq/coq/-/jobs/119976632","artifacts":[{"file_type":"trace","size":51314,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":119976631,"status":"success","stage":"test","name":"ci-coquelicot","ref":"pr-8729","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-13T17:23:56.042Z","started_at":"2018-11-13T17:41:03.356Z","finished_at":"2018-11-13T17:47:05.116Z","duration":361.759965,"queued_duration":6.696836,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c573f2aaac6af48415301d520e63ea5e8c137ea4","short_id":"c573f2aa","created_at":"2018-11-13T18:23:41.000+01:00","parent_ids":["91a25055bc409ae0f70ff10a82580c7329773b61"],"title":"[dune] Switch to a Dune-based build system.","message":"[dune] Switch to a Dune-based build system.\n\nOver the last months we have added support to build Coq with Dune, I\nfeel we have reached a point where we can start to discuss if we\nshould replace the make-based system with a Dune-based one.\n\nThe *main rationale* for the switch is that maintaining two build\nsystems is hard, and Dune seems superior to make in almost every\naspect.\n\nIndeed, I think it is going to be hard to find technical arguments to\ndefend the make-base system. Dune outperforms it on almost every\npossible metric.\n\nAdditionally, the make-based system has grew organically over the\nyears, and these days we are spending significant developer resources\non it. The number of bugs that would be fixed by Dune is large [see #8052].\nIt is not a coincidence that few large projects do use `make` anymore,\nbut most have moved to `CMake`, `Ninja`, or some other alternative.\n\nOn this side, Dune provides a well-defined model that seems to git\nCoq's present and future necessities well.\n\n*Blockers*: the single blocker for a merge as of today, apart from the\ndepending PRs, is the lack of native-compute support. This is due to a\ntechnical limitation wrt targets and can be solved in several\ndifferent ways. Also, it is likely that a smooth developer profile is\nnot possible until https://github.com/ocaml/dune/issues/1155 lands in\nDune itself. https://github.com/ocaml/dune/issues/1377 may be\nconvenient for the reference manual but we can have a small workaround\nto generate the install file for now.\n\n*Risk analysis*: it is important to understand the risks that such a\nmove would entail. After Dune support is merged we could always go\nback to a make-based system, however we are very likely to depend on\nDune-specific features that would be hard to replicate. The main risks are:\n\n- lock-in: indeed lock-in risk is significant and Coq's source code\n  may depend on some Dune features. On the other hand, Dune is\n  strongly poised to be the standard build tool for the OCaml platform\n  and ecosystem, and more than 50% of OPAM packages use it.\n\n  It is safe to say that if Dune would become unsupported in the\n  future, there would be more important problems than Coq itself.\n\n- lack of in-house knowledge: indeed, Dune requires some specific\n  training in order to understand its build rules, which may become a\n  problem. This risk is mitigated in 2 different ways and attenuated\n  by an additional consideration: first, Dune rules are fairly simple\n  and declarative and it is reasonable to expect developers get to\n  know them without too much effort. This is one of the reasons for\n  the high adoption numbers in the ecosystem. Second, Dune developers\n  are very reactive and care about Coq, thus it is safe to assume that\n  we would get external help if needed. The additional consideration\n  that may make this less of a problem is that our in-house knowledge\n  of make may be even worse than Dune's. A non-negligible number of\n  developers have expressed discomfort with make and the amount of\n  required knowledge to master make seems way higher than what you\n  need to use Dune.\n\n- lack of flexibility: indeed, Dune is way less flexible than\n  make. Dune only knows how to do well two things: building OCaml\n  executables and libraries. However, that is basically 99% of what\n  building Coq entails; building other parts [documentation or Coq\n  libraries] is fairly straightforward and seem to pose not a problem.\n\n- lack of maturity: indeed, Dune develops fast, it is not free of\n  bugs, and some amount of adaptation is expected from us. This risk\n  can only be mitigated if there is continued developer interest.  In\n  the worst case, Coq could become stuck in a particular Dune version.\n\n- bootstrapping: this is not a problem as witnessed by #8615, Dune can\n  be bootstrapped very easily as it depends only on OCaml and it is\n  designed to do so.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-10-15T18:05:29.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-11-13T18:23:41.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c573f2aaac6af48415301d520e63ea5e8c137ea4"},"pipeline":{"id":36460029,"iid":5223,"project_id":6138686,"sha":"c573f2aaac6af48415301d520e63ea5e8c137ea4","ref":"pr-8729","status":"failed","source":"push","created_at":"2018-11-13T17:23:55.577Z","updated_at":"2018-11-13T18:55:13.916Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36460029"},"web_url":"https://gitlab.com/coq/coq/-/jobs/119976631","artifacts":[{"file_type":"trace","size":143140,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":119976630,"status":"success","stage":"test","name":"ci-coq-dpdgraph","ref":"pr-8729","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-13T17:23:56.022Z","started_at":"2018-11-13T17:41:03.240Z","finished_at":"2018-11-13T17:43:57.157Z","duration":173.917667,"queued_duration":6.527761,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c573f2aaac6af48415301d520e63ea5e8c137ea4","short_id":"c573f2aa","created_at":"2018-11-13T18:23:41.000+01:00","parent_ids":["91a25055bc409ae0f70ff10a82580c7329773b61"],"title":"[dune] Switch to a Dune-based build system.","message":"[dune] Switch to a Dune-based build system.\n\nOver the last months we have added support to build Coq with Dune, I\nfeel we have reached a point where we can start to discuss if we\nshould replace the make-based system with a Dune-based one.\n\nThe *main rationale* for the switch is that maintaining two build\nsystems is hard, and Dune seems superior to make in almost every\naspect.\n\nIndeed, I think it is going to be hard to find technical arguments to\ndefend the make-base system. Dune outperforms it on almost every\npossible metric.\n\nAdditionally, the make-based system has grew organically over the\nyears, and these days we are spending significant developer resources\non it. The number of bugs that would be fixed by Dune is large [see #8052].\nIt is not a coincidence that few large projects do use `make` anymore,\nbut most have moved to `CMake`, `Ninja`, or some other alternative.\n\nOn this side, Dune provides a well-defined model that seems to git\nCoq's present and future necessities well.\n\n*Blockers*: the single blocker for a merge as of today, apart from the\ndepending PRs, is the lack of native-compute support. This is due to a\ntechnical limitation wrt targets and can be solved in several\ndifferent ways. Also, it is likely that a smooth developer profile is\nnot possible until https://github.com/ocaml/dune/issues/1155 lands in\nDune itself. https://github.com/ocaml/dune/issues/1377 may be\nconvenient for the reference manual but we can have a small workaround\nto generate the install file for now.\n\n*Risk analysis*: it is important to understand the risks that such a\nmove would entail. After Dune support is merged we could always go\nback to a make-based system, however we are very likely to depend on\nDune-specific features that would be hard to replicate. The main risks are:\n\n- lock-in: indeed lock-in risk is significant and Coq's source code\n  may depend on some Dune features. On the other hand, Dune is\n  strongly poised to be the standard build tool for the OCaml platform\n  and ecosystem, and more than 50% of OPAM packages use it.\n\n  It is safe to say that if Dune would become unsupported in the\n  future, there would be more important problems than Coq itself.\n\n- lack of in-house knowledge: indeed, Dune requires some specific\n  training in order to understand its build rules, which may become a\n  problem. This risk is mitigated in 2 different ways and attenuated\n  by an additional consideration: first, Dune rules are fairly simple\n  and declarative and it is reasonable to expect developers get to\n  know them without too much effort. This is one of the reasons for\n  the high adoption numbers in the ecosystem. Second, Dune developers\n  are very reactive and care about Coq, thus it is safe to assume that\n  we would get external help if needed. The additional consideration\n  that may make this less of a problem is that our in-house knowledge\n  of make may be even worse than Dune's. A non-negligible number of\n  developers have expressed discomfort with make and the amount of\n  required knowledge to master make seems way higher than what you\n  need to use Dune.\n\n- lack of flexibility: indeed, Dune is way less flexible than\n  make. Dune only knows how to do well two things: building OCaml\n  executables and libraries. However, that is basically 99% of what\n  building Coq entails; building other parts [documentation or Coq\n  libraries] is fairly straightforward and seem to pose not a problem.\n\n- lack of maturity: indeed, Dune develops fast, it is not free of\n  bugs, and some amount of adaptation is expected from us. This risk\n  can only be mitigated if there is continued developer interest.  In\n  the worst case, Coq could become stuck in a particular Dune version.\n\n- bootstrapping: this is not a problem as witnessed by #8615, Dune can\n  be bootstrapped very easily as it depends only on OCaml and it is\n  designed to do so.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-10-15T18:05:29.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-11-13T18:23:41.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c573f2aaac6af48415301d520e63ea5e8c137ea4"},"pipeline":{"id":36460029,"iid":5223,"project_id":6138686,"sha":"c573f2aaac6af48415301d520e63ea5e8c137ea4","ref":"pr-8729","status":"failed","source":"push","created_at":"2018-11-13T17:23:55.577Z","updated_at":"2018-11-13T18:55:13.916Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36460029"},"web_url":"https://gitlab.com/coq/coq/-/jobs/119976630","artifacts":[{"file_type":"trace","size":48511,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":119976629,"status":"success","stage":"test","name":"ci-compcert","ref":"pr-8729","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-13T17:23:56.000Z","started_at":"2018-11-13T17:41:02.802Z","finished_at":"2018-11-13T18:08:41.753Z","duration":1658.950955,"queued_duration":6.013062,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c573f2aaac6af48415301d520e63ea5e8c137ea4","short_id":"c573f2aa","created_at":"2018-11-13T18:23:41.000+01:00","parent_ids":["91a25055bc409ae0f70ff10a82580c7329773b61"],"title":"[dune] Switch to a Dune-based build system.","message":"[dune] Switch to a Dune-based build system.\n\nOver the last months we have added support to build Coq with Dune, I\nfeel we have reached a point where we can start to discuss if we\nshould replace the make-based system with a Dune-based one.\n\nThe *main rationale* for the switch is that maintaining two build\nsystems is hard, and Dune seems superior to make in almost every\naspect.\n\nIndeed, I think it is going to be hard to find technical arguments to\ndefend the make-base system. Dune outperforms it on almost every\npossible metric.\n\nAdditionally, the make-based system has grew organically over the\nyears, and these days we are spending significant developer resources\non it. The number of bugs that would be fixed by Dune is large [see #8052].\nIt is not a coincidence that few large projects do use `make` anymore,\nbut most have moved to `CMake`, `Ninja`, or some other alternative.\n\nOn this side, Dune provides a well-defined model that seems to git\nCoq's present and future necessities well.\n\n*Blockers*: the single blocker for a merge as of today, apart from the\ndepending PRs, is the lack of native-compute support. This is due to a\ntechnical limitation wrt targets and can be solved in several\ndifferent ways. Also, it is likely that a smooth developer profile is\nnot possible until https://github.com/ocaml/dune/issues/1155 lands in\nDune itself. https://github.com/ocaml/dune/issues/1377 may be\nconvenient for the reference manual but we can have a small workaround\nto generate the install file for now.\n\n*Risk analysis*: it is important to understand the risks that such a\nmove would entail. After Dune support is merged we could always go\nback to a make-based system, however we are very likely to depend on\nDune-specific features that would be hard to replicate. The main risks are:\n\n- lock-in: indeed lock-in risk is significant and Coq's source code\n  may depend on some Dune features. On the other hand, Dune is\n  strongly poised to be the standard build tool for the OCaml platform\n  and ecosystem, and more than 50% of OPAM packages use it.\n\n  It is safe to say that if Dune would become unsupported in the\n  future, there would be more important problems than Coq itself.\n\n- lack of in-house knowledge: indeed, Dune requires some specific\n  training in order to understand its build rules, which may become a\n  problem. This risk is mitigated in 2 different ways and attenuated\n  by an additional consideration: first, Dune rules are fairly simple\n  and declarative and it is reasonable to expect developers get to\n  know them without too much effort. This is one of the reasons for\n  the high adoption numbers in the ecosystem. Second, Dune developers\n  are very reactive and care about Coq, thus it is safe to assume that\n  we would get external help if needed. The additional consideration\n  that may make this less of a problem is that our in-house knowledge\n  of make may be even worse than Dune's. A non-negligible number of\n  developers have expressed discomfort with make and the amount of\n  required knowledge to master make seems way higher than what you\n  need to use Dune.\n\n- lack of flexibility: indeed, Dune is way less flexible than\n  make. Dune only knows how to do well two things: building OCaml\n  executables and libraries. However, that is basically 99% of what\n  building Coq entails; building other parts [documentation or Coq\n  libraries] is fairly straightforward and seem to pose not a problem.\n\n- lack of maturity: indeed, Dune develops fast, it is not free of\n  bugs, and some amount of adaptation is expected from us. This risk\n  can only be mitigated if there is continued developer interest.  In\n  the worst case, Coq could become stuck in a particular Dune version.\n\n- bootstrapping: this is not a problem as witnessed by #8615, Dune can\n  be bootstrapped very easily as it depends only on OCaml and it is\n  designed to do so.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-10-15T18:05:29.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-11-13T18:23:41.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c573f2aaac6af48415301d520e63ea5e8c137ea4"},"pipeline":{"id":36460029,"iid":5223,"project_id":6138686,"sha":"c573f2aaac6af48415301d520e63ea5e8c137ea4","ref":"pr-8729","status":"failed","source":"push","created_at":"2018-11-13T17:23:55.577Z","updated_at":"2018-11-13T18:55:13.916Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36460029"},"web_url":"https://gitlab.com/coq/coq/-/jobs/119976629","artifacts":[{"file_type":"trace","size":2112795,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":119976628,"status":"success","stage":"test","name":"ci-color","ref":"pr-8729","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-13T17:23:55.978Z","started_at":"2018-11-13T17:41:02.745Z","finished_at":"2018-11-13T18:03:33.320Z","duration":1350.575069,"queued_duration":5.882967,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c573f2aaac6af48415301d520e63ea5e8c137ea4","short_id":"c573f2aa","created_at":"2018-11-13T18:23:41.000+01:00","parent_ids":["91a25055bc409ae0f70ff10a82580c7329773b61"],"title":"[dune] Switch to a Dune-based build system.","message":"[dune] Switch to a Dune-based build system.\n\nOver the last months we have added support to build Coq with Dune, I\nfeel we have reached a point where we can start to discuss if we\nshould replace the make-based system with a Dune-based one.\n\nThe *main rationale* for the switch is that maintaining two build\nsystems is hard, and Dune seems superior to make in almost every\naspect.\n\nIndeed, I think it is going to be hard to find technical arguments to\ndefend the make-base system. Dune outperforms it on almost every\npossible metric.\n\nAdditionally, the make-based system has grew organically over the\nyears, and these days we are spending significant developer resources\non it. The number of bugs that would be fixed by Dune is large [see #8052].\nIt is not a coincidence that few large projects do use `make` anymore,\nbut most have moved to `CMake`, `Ninja`, or some other alternative.\n\nOn this side, Dune provides a well-defined model that seems to git\nCoq's present and future necessities well.\n\n*Blockers*: the single blocker for a merge as of today, apart from the\ndepending PRs, is the lack of native-compute support. This is due to a\ntechnical limitation wrt targets and can be solved in several\ndifferent ways. Also, it is likely that a smooth developer profile is\nnot possible until https://github.com/ocaml/dune/issues/1155 lands in\nDune itself. https://github.com/ocaml/dune/issues/1377 may be\nconvenient for the reference manual but we can have a small workaround\nto generate the install file for now.\n\n*Risk analysis*: it is important to understand the risks that such a\nmove would entail. After Dune support is merged we could always go\nback to a make-based system, however we are very likely to depend on\nDune-specific features that would be hard to replicate. The main risks are:\n\n- lock-in: indeed lock-in risk is significant and Coq's source code\n  may depend on some Dune features. On the other hand, Dune is\n  strongly poised to be the standard build tool for the OCaml platform\n  and ecosystem, and more than 50% of OPAM packages use it.\n\n  It is safe to say that if Dune would become unsupported in the\n  future, there would be more important problems than Coq itself.\n\n- lack of in-house knowledge: indeed, Dune requires some specific\n  training in order to understand its build rules, which may become a\n  problem. This risk is mitigated in 2 different ways and attenuated\n  by an additional consideration: first, Dune rules are fairly simple\n  and declarative and it is reasonable to expect developers get to\n  know them without too much effort. This is one of the reasons for\n  the high adoption numbers in the ecosystem. Second, Dune developers\n  are very reactive and care about Coq, thus it is safe to assume that\n  we would get external help if needed. The additional consideration\n  that may make this less of a problem is that our in-house knowledge\n  of make may be even worse than Dune's. A non-negligible number of\n  developers have expressed discomfort with make and the amount of\n  required knowledge to master make seems way higher than what you\n  need to use Dune.\n\n- lack of flexibility: indeed, Dune is way less flexible than\n  make. Dune only knows how to do well two things: building OCaml\n  executables and libraries. However, that is basically 99% of what\n  building Coq entails; building other parts [documentation or Coq\n  libraries] is fairly straightforward and seem to pose not a problem.\n\n- lack of maturity: indeed, Dune develops fast, it is not free of\n  bugs, and some amount of adaptation is expected from us. This risk\n  can only be mitigated if there is continued developer interest.  In\n  the worst case, Coq could become stuck in a particular Dune version.\n\n- bootstrapping: this is not a problem as witnessed by #8615, Dune can\n  be bootstrapped very easily as it depends only on OCaml and it is\n  designed to do so.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-10-15T18:05:29.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-11-13T18:23:41.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c573f2aaac6af48415301d520e63ea5e8c137ea4"},"pipeline":{"id":36460029,"iid":5223,"project_id":6138686,"sha":"c573f2aaac6af48415301d520e63ea5e8c137ea4","ref":"pr-8729","status":"failed","source":"push","created_at":"2018-11-13T17:23:55.577Z","updated_at":"2018-11-13T18:55:13.916Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36460029"},"web_url":"https://gitlab.com/coq/coq/-/jobs/119976628","artifacts":[{"file_type":"trace","size":234490,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":119976627,"status":"success","stage":"test","name":"ci-bignums","ref":"pr-8729","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-13T17:23:55.958Z","started_at":"2018-11-13T17:41:02.599Z","finished_at":"2018-11-13T17:45:51.452Z","duration":288.853324,"queued_duration":5.63652,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c573f2aaac6af48415301d520e63ea5e8c137ea4","short_id":"c573f2aa","created_at":"2018-11-13T18:23:41.000+01:00","parent_ids":["91a25055bc409ae0f70ff10a82580c7329773b61"],"title":"[dune] Switch to a Dune-based build system.","message":"[dune] Switch to a Dune-based build system.\n\nOver the last months we have added support to build Coq with Dune, I\nfeel we have reached a point where we can start to discuss if we\nshould replace the make-based system with a Dune-based one.\n\nThe *main rationale* for the switch is that maintaining two build\nsystems is hard, and Dune seems superior to make in almost every\naspect.\n\nIndeed, I think it is going to be hard to find technical arguments to\ndefend the make-base system. Dune outperforms it on almost every\npossible metric.\n\nAdditionally, the make-based system has grew organically over the\nyears, and these days we are spending significant developer resources\non it. The number of bugs that would be fixed by Dune is large [see #8052].\nIt is not a coincidence that few large projects do use `make` anymore,\nbut most have moved to `CMake`, `Ninja`, or some other alternative.\n\nOn this side, Dune provides a well-defined model that seems to git\nCoq's present and future necessities well.\n\n*Blockers*: the single blocker for a merge as of today, apart from the\ndepending PRs, is the lack of native-compute support. This is due to a\ntechnical limitation wrt targets and can be solved in several\ndifferent ways. Also, it is likely that a smooth developer profile is\nnot possible until https://github.com/ocaml/dune/issues/1155 lands in\nDune itself. https://github.com/ocaml/dune/issues/1377 may be\nconvenient for the reference manual but we can have a small workaround\nto generate the install file for now.\n\n*Risk analysis*: it is important to understand the risks that such a\nmove would entail. After Dune support is merged we could always go\nback to a make-based system, however we are very likely to depend on\nDune-specific features that would be hard to replicate. The main risks are:\n\n- lock-in: indeed lock-in risk is significant and Coq's source code\n  may depend on some Dune features. On the other hand, Dune is\n  strongly poised to be the standard build tool for the OCaml platform\n  and ecosystem, and more than 50% of OPAM packages use it.\n\n  It is safe to say that if Dune would become unsupported in the\n  future, there would be more important problems than Coq itself.\n\n- lack of in-house knowledge: indeed, Dune requires some specific\n  training in order to understand its build rules, which may become a\n  problem. This risk is mitigated in 2 different ways and attenuated\n  by an additional consideration: first, Dune rules are fairly simple\n  and declarative and it is reasonable to expect developers get to\n  know them without too much effort. This is one of the reasons for\n  the high adoption numbers in the ecosystem. Second, Dune developers\n  are very reactive and care about Coq, thus it is safe to assume that\n  we would get external help if needed. The additional consideration\n  that may make this less of a problem is that our in-house knowledge\n  of make may be even worse than Dune's. A non-negligible number of\n  developers have expressed discomfort with make and the amount of\n  required knowledge to master make seems way higher than what you\n  need to use Dune.\n\n- lack of flexibility: indeed, Dune is way less flexible than\n  make. Dune only knows how to do well two things: building OCaml\n  executables and libraries. However, that is basically 99% of what\n  building Coq entails; building other parts [documentation or Coq\n  libraries] is fairly straightforward and seem to pose not a problem.\n\n- lack of maturity: indeed, Dune develops fast, it is not free of\n  bugs, and some amount of adaptation is expected from us. This risk\n  can only be mitigated if there is continued developer interest.  In\n  the worst case, Coq could become stuck in a particular Dune version.\n\n- bootstrapping: this is not a problem as witnessed by #8615, Dune can\n  be bootstrapped very easily as it depends only on OCaml and it is\n  designed to do so.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-10-15T18:05:29.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-11-13T18:23:41.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c573f2aaac6af48415301d520e63ea5e8c137ea4"},"pipeline":{"id":36460029,"iid":5223,"project_id":6138686,"sha":"c573f2aaac6af48415301d520e63ea5e8c137ea4","ref":"pr-8729","status":"failed","source":"push","created_at":"2018-11-13T17:23:55.577Z","updated_at":"2018-11-13T18:55:13.916Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36460029"},"web_url":"https://gitlab.com/coq/coq/-/jobs/119976627","artifacts":[{"file_type":"trace","size":62755,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":119976626,"status":"success","stage":"test","name":"ci-bedrock2","ref":"pr-8729","tag":false,"coverage":null,"allow_failure":true,"created_at":"2018-11-13T17:23:55.941Z","started_at":"2018-11-13T17:41:02.535Z","finished_at":"2018-11-13T18:06:37.227Z","duration":1534.691834,"queued_duration":5.38231,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c573f2aaac6af48415301d520e63ea5e8c137ea4","short_id":"c573f2aa","created_at":"2018-11-13T18:23:41.000+01:00","parent_ids":["91a25055bc409ae0f70ff10a82580c7329773b61"],"title":"[dune] Switch to a Dune-based build system.","message":"[dune] Switch to a Dune-based build system.\n\nOver the last months we have added support to build Coq with Dune, I\nfeel we have reached a point where we can start to discuss if we\nshould replace the make-based system with a Dune-based one.\n\nThe *main rationale* for the switch is that maintaining two build\nsystems is hard, and Dune seems superior to make in almost every\naspect.\n\nIndeed, I think it is going to be hard to find technical arguments to\ndefend the make-base system. Dune outperforms it on almost every\npossible metric.\n\nAdditionally, the make-based system has grew organically over the\nyears, and these days we are spending significant developer resources\non it. The number of bugs that would be fixed by Dune is large [see #8052].\nIt is not a coincidence that few large projects do use `make` anymore,\nbut most have moved to `CMake`, `Ninja`, or some other alternative.\n\nOn this side, Dune provides a well-defined model that seems to git\nCoq's present and future necessities well.\n\n*Blockers*: the single blocker for a merge as of today, apart from the\ndepending PRs, is the lack of native-compute support. This is due to a\ntechnical limitation wrt targets and can be solved in several\ndifferent ways. Also, it is likely that a smooth developer profile is\nnot possible until https://github.com/ocaml/dune/issues/1155 lands in\nDune itself. https://github.com/ocaml/dune/issues/1377 may be\nconvenient for the reference manual but we can have a small workaround\nto generate the install file for now.\n\n*Risk analysis*: it is important to understand the risks that such a\nmove would entail. After Dune support is merged we could always go\nback to a make-based system, however we are very likely to depend on\nDune-specific features that would be hard to replicate. The main risks are:\n\n- lock-in: indeed lock-in risk is significant and Coq's source code\n  may depend on some Dune features. On the other hand, Dune is\n  strongly poised to be the standard build tool for the OCaml platform\n  and ecosystem, and more than 50% of OPAM packages use it.\n\n  It is safe to say that if Dune would become unsupported in the\n  future, there would be more important problems than Coq itself.\n\n- lack of in-house knowledge: indeed, Dune requires some specific\n  training in order to understand its build rules, which may become a\n  problem. This risk is mitigated in 2 different ways and attenuated\n  by an additional consideration: first, Dune rules are fairly simple\n  and declarative and it is reasonable to expect developers get to\n  know them without too much effort. This is one of the reasons for\n  the high adoption numbers in the ecosystem. Second, Dune developers\n  are very reactive and care about Coq, thus it is safe to assume that\n  we would get external help if needed. The additional consideration\n  that may make this less of a problem is that our in-house knowledge\n  of make may be even worse than Dune's. A non-negligible number of\n  developers have expressed discomfort with make and the amount of\n  required knowledge to master make seems way higher than what you\n  need to use Dune.\n\n- lack of flexibility: indeed, Dune is way less flexible than\n  make. Dune only knows how to do well two things: building OCaml\n  executables and libraries. However, that is basically 99% of what\n  building Coq entails; building other parts [documentation or Coq\n  libraries] is fairly straightforward and seem to pose not a problem.\n\n- lack of maturity: indeed, Dune develops fast, it is not free of\n  bugs, and some amount of adaptation is expected from us. This risk\n  can only be mitigated if there is continued developer interest.  In\n  the worst case, Coq could become stuck in a particular Dune version.\n\n- bootstrapping: this is not a problem as witnessed by #8615, Dune can\n  be bootstrapped very easily as it depends only on OCaml and it is\n  designed to do so.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-10-15T18:05:29.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-11-13T18:23:41.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c573f2aaac6af48415301d520e63ea5e8c137ea4"},"pipeline":{"id":36460029,"iid":5223,"project_id":6138686,"sha":"c573f2aaac6af48415301d520e63ea5e8c137ea4","ref":"pr-8729","status":"failed","source":"push","created_at":"2018-11-13T17:23:55.577Z","updated_at":"2018-11-13T18:55:13.916Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36460029"},"web_url":"https://gitlab.com/coq/coq/-/jobs/119976626","artifacts":[{"file_type":"trace","size":291393,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":119976625,"status":"success","stage":"test","name":"ci-aac-tactics","ref":"pr-8729","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-13T17:23:55.923Z","started_at":"2018-11-13T17:41:02.325Z","finished_at":"2018-11-13T17:44:11.353Z","duration":189.027908,"queued_duration":5.063028,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c573f2aaac6af48415301d520e63ea5e8c137ea4","short_id":"c573f2aa","created_at":"2018-11-13T18:23:41.000+01:00","parent_ids":["91a25055bc409ae0f70ff10a82580c7329773b61"],"title":"[dune] Switch to a Dune-based build system.","message":"[dune] Switch to a Dune-based build system.\n\nOver the last months we have added support to build Coq with Dune, I\nfeel we have reached a point where we can start to discuss if we\nshould replace the make-based system with a Dune-based one.\n\nThe *main rationale* for the switch is that maintaining two build\nsystems is hard, and Dune seems superior to make in almost every\naspect.\n\nIndeed, I think it is going to be hard to find technical arguments to\ndefend the make-base system. Dune outperforms it on almost every\npossible metric.\n\nAdditionally, the make-based system has grew organically over the\nyears, and these days we are spending significant developer resources\non it. The number of bugs that would be fixed by Dune is large [see #8052].\nIt is not a coincidence that few large projects do use `make` anymore,\nbut most have moved to `CMake`, `Ninja`, or some other alternative.\n\nOn this side, Dune provides a well-defined model that seems to git\nCoq's present and future necessities well.\n\n*Blockers*: the single blocker for a merge as of today, apart from the\ndepending PRs, is the lack of native-compute support. This is due to a\ntechnical limitation wrt targets and can be solved in several\ndifferent ways. Also, it is likely that a smooth developer profile is\nnot possible until https://github.com/ocaml/dune/issues/1155 lands in\nDune itself. https://github.com/ocaml/dune/issues/1377 may be\nconvenient for the reference manual but we can have a small workaround\nto generate the install file for now.\n\n*Risk analysis*: it is important to understand the risks that such a\nmove would entail. After Dune support is merged we could always go\nback to a make-based system, however we are very likely to depend on\nDune-specific features that would be hard to replicate. The main risks are:\n\n- lock-in: indeed lock-in risk is significant and Coq's source code\n  may depend on some Dune features. On the other hand, Dune is\n  strongly poised to be the standard build tool for the OCaml platform\n  and ecosystem, and more than 50% of OPAM packages use it.\n\n  It is safe to say that if Dune would become unsupported in the\n  future, there would be more important problems than Coq itself.\n\n- lack of in-house knowledge: indeed, Dune requires some specific\n  training in order to understand its build rules, which may become a\n  problem. This risk is mitigated in 2 different ways and attenuated\n  by an additional consideration: first, Dune rules are fairly simple\n  and declarative and it is reasonable to expect developers get to\n  know them without too much effort. This is one of the reasons for\n  the high adoption numbers in the ecosystem. Second, Dune developers\n  are very reactive and care about Coq, thus it is safe to assume that\n  we would get external help if needed. The additional consideration\n  that may make this less of a problem is that our in-house knowledge\n  of make may be even worse than Dune's. A non-negligible number of\n  developers have expressed discomfort with make and the amount of\n  required knowledge to master make seems way higher than what you\n  need to use Dune.\n\n- lack of flexibility: indeed, Dune is way less flexible than\n  make. Dune only knows how to do well two things: building OCaml\n  executables and libraries. However, that is basically 99% of what\n  building Coq entails; building other parts [documentation or Coq\n  libraries] is fairly straightforward and seem to pose not a problem.\n\n- lack of maturity: indeed, Dune develops fast, it is not free of\n  bugs, and some amount of adaptation is expected from us. This risk\n  can only be mitigated if there is continued developer interest.  In\n  the worst case, Coq could become stuck in a particular Dune version.\n\n- bootstrapping: this is not a problem as witnessed by #8615, Dune can\n  be bootstrapped very easily as it depends only on OCaml and it is\n  designed to do so.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-10-15T18:05:29.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-11-13T18:23:41.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c573f2aaac6af48415301d520e63ea5e8c137ea4"},"pipeline":{"id":36460029,"iid":5223,"project_id":6138686,"sha":"c573f2aaac6af48415301d520e63ea5e8c137ea4","ref":"pr-8729","status":"failed","source":"push","created_at":"2018-11-13T17:23:55.577Z","updated_at":"2018-11-13T18:55:13.916Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36460029"},"web_url":"https://gitlab.com/coq/coq/-/jobs/119976625","artifacts":[{"file_type":"trace","size":57740,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":119976624,"status":"success","stage":"test","name":"validate:edge+flambda","ref":"pr-8729","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-13T17:23:55.907Z","started_at":"2018-11-13T17:41:00.750Z","finished_at":"2018-11-13T17:45:16.159Z","duration":255.409156,"queued_duration":3.398912,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c573f2aaac6af48415301d520e63ea5e8c137ea4","short_id":"c573f2aa","created_at":"2018-11-13T18:23:41.000+01:00","parent_ids":["91a25055bc409ae0f70ff10a82580c7329773b61"],"title":"[dune] Switch to a Dune-based build system.","message":"[dune] Switch to a Dune-based build system.\n\nOver the last months we have added support to build Coq with Dune, I\nfeel we have reached a point where we can start to discuss if we\nshould replace the make-based system with a Dune-based one.\n\nThe *main rationale* for the switch is that maintaining two build\nsystems is hard, and Dune seems superior to make in almost every\naspect.\n\nIndeed, I think it is going to be hard to find technical arguments to\ndefend the make-base system. Dune outperforms it on almost every\npossible metric.\n\nAdditionally, the make-based system has grew organically over the\nyears, and these days we are spending significant developer resources\non it. The number of bugs that would be fixed by Dune is large [see #8052].\nIt is not a coincidence that few large projects do use `make` anymore,\nbut most have moved to `CMake`, `Ninja`, or some other alternative.\n\nOn this side, Dune provides a well-defined model that seems to git\nCoq's present and future necessities well.\n\n*Blockers*: the single blocker for a merge as of today, apart from the\ndepending PRs, is the lack of native-compute support. This is due to a\ntechnical limitation wrt targets and can be solved in several\ndifferent ways. Also, it is likely that a smooth developer profile is\nnot possible until https://github.com/ocaml/dune/issues/1155 lands in\nDune itself. https://github.com/ocaml/dune/issues/1377 may be\nconvenient for the reference manual but we can have a small workaround\nto generate the install file for now.\n\n*Risk analysis*: it is important to understand the risks that such a\nmove would entail. After Dune support is merged we could always go\nback to a make-based system, however we are very likely to depend on\nDune-specific features that would be hard to replicate. The main risks are:\n\n- lock-in: indeed lock-in risk is significant and Coq's source code\n  may depend on some Dune features. On the other hand, Dune is\n  strongly poised to be the standard build tool for the OCaml platform\n  and ecosystem, and more than 50% of OPAM packages use it.\n\n  It is safe to say that if Dune would become unsupported in the\n  future, there would be more important problems than Coq itself.\n\n- lack of in-house knowledge: indeed, Dune requires some specific\n  training in order to understand its build rules, which may become a\n  problem. This risk is mitigated in 2 different ways and attenuated\n  by an additional consideration: first, Dune rules are fairly simple\n  and declarative and it is reasonable to expect developers get to\n  know them without too much effort. This is one of the reasons for\n  the high adoption numbers in the ecosystem. Second, Dune developers\n  are very reactive and care about Coq, thus it is safe to assume that\n  we would get external help if needed. The additional consideration\n  that may make this less of a problem is that our in-house knowledge\n  of make may be even worse than Dune's. A non-negligible number of\n  developers have expressed discomfort with make and the amount of\n  required knowledge to master make seems way higher than what you\n  need to use Dune.\n\n- lack of flexibility: indeed, Dune is way less flexible than\n  make. Dune only knows how to do well two things: building OCaml\n  executables and libraries. However, that is basically 99% of what\n  building Coq entails; building other parts [documentation or Coq\n  libraries] is fairly straightforward and seem to pose not a problem.\n\n- lack of maturity: indeed, Dune develops fast, it is not free of\n  bugs, and some amount of adaptation is expected from us. This risk\n  can only be mitigated if there is continued developer interest.  In\n  the worst case, Coq could become stuck in a particular Dune version.\n\n- bootstrapping: this is not a problem as witnessed by #8615, Dune can\n  be bootstrapped very easily as it depends only on OCaml and it is\n  designed to do so.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-10-15T18:05:29.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-11-13T18:23:41.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c573f2aaac6af48415301d520e63ea5e8c137ea4"},"pipeline":{"id":36460029,"iid":5223,"project_id":6138686,"sha":"c573f2aaac6af48415301d520e63ea5e8c137ea4","ref":"pr-8729","status":"failed","source":"push","created_at":"2018-11-13T17:23:55.577Z","updated_at":"2018-11-13T18:55:13.916Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36460029"},"web_url":"https://gitlab.com/coq/coq/-/jobs/119976624","artifacts":[{"file_type":"trace","size":26669,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":119976623,"status":"success","stage":"test","name":"validate:edge","ref":"pr-8729","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-13T17:23:55.890Z","started_at":"2018-11-13T17:41:00.105Z","finished_at":"2018-11-13T17:45:01.169Z","duration":241.063907,"queued_duration":2.649661,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c573f2aaac6af48415301d520e63ea5e8c137ea4","short_id":"c573f2aa","created_at":"2018-11-13T18:23:41.000+01:00","parent_ids":["91a25055bc409ae0f70ff10a82580c7329773b61"],"title":"[dune] Switch to a Dune-based build system.","message":"[dune] Switch to a Dune-based build system.\n\nOver the last months we have added support to build Coq with Dune, I\nfeel we have reached a point where we can start to discuss if we\nshould replace the make-based system with a Dune-based one.\n\nThe *main rationale* for the switch is that maintaining two build\nsystems is hard, and Dune seems superior to make in almost every\naspect.\n\nIndeed, I think it is going to be hard to find technical arguments to\ndefend the make-base system. Dune outperforms it on almost every\npossible metric.\n\nAdditionally, the make-based system has grew organically over the\nyears, and these days we are spending significant developer resources\non it. The number of bugs that would be fixed by Dune is large [see #8052].\nIt is not a coincidence that few large projects do use `make` anymore,\nbut most have moved to `CMake`, `Ninja`, or some other alternative.\n\nOn this side, Dune provides a well-defined model that seems to git\nCoq's present and future necessities well.\n\n*Blockers*: the single blocker for a merge as of today, apart from the\ndepending PRs, is the lack of native-compute support. This is due to a\ntechnical limitation wrt targets and can be solved in several\ndifferent ways. Also, it is likely that a smooth developer profile is\nnot possible until https://github.com/ocaml/dune/issues/1155 lands in\nDune itself. https://github.com/ocaml/dune/issues/1377 may be\nconvenient for the reference manual but we can have a small workaround\nto generate the install file for now.\n\n*Risk analysis*: it is important to understand the risks that such a\nmove would entail. After Dune support is merged we could always go\nback to a make-based system, however we are very likely to depend on\nDune-specific features that would be hard to replicate. The main risks are:\n\n- lock-in: indeed lock-in risk is significant and Coq's source code\n  may depend on some Dune features. On the other hand, Dune is\n  strongly poised to be the standard build tool for the OCaml platform\n  and ecosystem, and more than 50% of OPAM packages use it.\n\n  It is safe to say that if Dune would become unsupported in the\n  future, there would be more important problems than Coq itself.\n\n- lack of in-house knowledge: indeed, Dune requires some specific\n  training in order to understand its build rules, which may become a\n  problem. This risk is mitigated in 2 different ways and attenuated\n  by an additional consideration: first, Dune rules are fairly simple\n  and declarative and it is reasonable to expect developers get to\n  know them without too much effort. This is one of the reasons for\n  the high adoption numbers in the ecosystem. Second, Dune developers\n  are very reactive and care about Coq, thus it is safe to assume that\n  we would get external help if needed. The additional consideration\n  that may make this less of a problem is that our in-house knowledge\n  of make may be even worse than Dune's. A non-negligible number of\n  developers have expressed discomfort with make and the amount of\n  required knowledge to master make seems way higher than what you\n  need to use Dune.\n\n- lack of flexibility: indeed, Dune is way less flexible than\n  make. Dune only knows how to do well two things: building OCaml\n  executables and libraries. However, that is basically 99% of what\n  building Coq entails; building other parts [documentation or Coq\n  libraries] is fairly straightforward and seem to pose not a problem.\n\n- lack of maturity: indeed, Dune develops fast, it is not free of\n  bugs, and some amount of adaptation is expected from us. This risk\n  can only be mitigated if there is continued developer interest.  In\n  the worst case, Coq could become stuck in a particular Dune version.\n\n- bootstrapping: this is not a problem as witnessed by #8615, Dune can\n  be bootstrapped very easily as it depends only on OCaml and it is\n  designed to do so.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-10-15T18:05:29.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-11-13T18:23:41.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c573f2aaac6af48415301d520e63ea5e8c137ea4"},"pipeline":{"id":36460029,"iid":5223,"project_id":6138686,"sha":"c573f2aaac6af48415301d520e63ea5e8c137ea4","ref":"pr-8729","status":"failed","source":"push","created_at":"2018-11-13T17:23:55.577Z","updated_at":"2018-11-13T18:55:13.916Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36460029"},"web_url":"https://gitlab.com/coq/coq/-/jobs/119976623","artifacts":[{"file_type":"trace","size":25501,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":119976622,"status":"success","stage":"test","name":"validate:base+32bit","ref":"pr-8729","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-13T17:23:55.872Z","started_at":"2018-11-13T17:40:59.784Z","finished_at":"2018-11-13T17:45:01.132Z","duration":241.347999,"queued_duration":2.264295,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c573f2aaac6af48415301d520e63ea5e8c137ea4","short_id":"c573f2aa","created_at":"2018-11-13T18:23:41.000+01:00","parent_ids":["91a25055bc409ae0f70ff10a82580c7329773b61"],"title":"[dune] Switch to a Dune-based build system.","message":"[dune] Switch to a Dune-based build system.\n\nOver the last months we have added support to build Coq with Dune, I\nfeel we have reached a point where we can start to discuss if we\nshould replace the make-based system with a Dune-based one.\n\nThe *main rationale* for the switch is that maintaining two build\nsystems is hard, and Dune seems superior to make in almost every\naspect.\n\nIndeed, I think it is going to be hard to find technical arguments to\ndefend the make-base system. Dune outperforms it on almost every\npossible metric.\n\nAdditionally, the make-based system has grew organically over the\nyears, and these days we are spending significant developer resources\non it. The number of bugs that would be fixed by Dune is large [see #8052].\nIt is not a coincidence that few large projects do use `make` anymore,\nbut most have moved to `CMake`, `Ninja`, or some other alternative.\n\nOn this side, Dune provides a well-defined model that seems to git\nCoq's present and future necessities well.\n\n*Blockers*: the single blocker for a merge as of today, apart from the\ndepending PRs, is the lack of native-compute support. This is due to a\ntechnical limitation wrt targets and can be solved in several\ndifferent ways. Also, it is likely that a smooth developer profile is\nnot possible until https://github.com/ocaml/dune/issues/1155 lands in\nDune itself. https://github.com/ocaml/dune/issues/1377 may be\nconvenient for the reference manual but we can have a small workaround\nto generate the install file for now.\n\n*Risk analysis*: it is important to understand the risks that such a\nmove would entail. After Dune support is merged we could always go\nback to a make-based system, however we are very likely to depend on\nDune-specific features that would be hard to replicate. The main risks are:\n\n- lock-in: indeed lock-in risk is significant and Coq's source code\n  may depend on some Dune features. On the other hand, Dune is\n  strongly poised to be the standard build tool for the OCaml platform\n  and ecosystem, and more than 50% of OPAM packages use it.\n\n  It is safe to say that if Dune would become unsupported in the\n  future, there would be more important problems than Coq itself.\n\n- lack of in-house knowledge: indeed, Dune requires some specific\n  training in order to understand its build rules, which may become a\n  problem. This risk is mitigated in 2 different ways and attenuated\n  by an additional consideration: first, Dune rules are fairly simple\n  and declarative and it is reasonable to expect developers get to\n  know them without too much effort. This is one of the reasons for\n  the high adoption numbers in the ecosystem. Second, Dune developers\n  are very reactive and care about Coq, thus it is safe to assume that\n  we would get external help if needed. The additional consideration\n  that may make this less of a problem is that our in-house knowledge\n  of make may be even worse than Dune's. A non-negligible number of\n  developers have expressed discomfort with make and the amount of\n  required knowledge to master make seems way higher than what you\n  need to use Dune.\n\n- lack of flexibility: indeed, Dune is way less flexible than\n  make. Dune only knows how to do well two things: building OCaml\n  executables and libraries. However, that is basically 99% of what\n  building Coq entails; building other parts [documentation or Coq\n  libraries] is fairly straightforward and seem to pose not a problem.\n\n- lack of maturity: indeed, Dune develops fast, it is not free of\n  bugs, and some amount of adaptation is expected from us. This risk\n  can only be mitigated if there is continued developer interest.  In\n  the worst case, Coq could become stuck in a particular Dune version.\n\n- bootstrapping: this is not a problem as witnessed by #8615, Dune can\n  be bootstrapped very easily as it depends only on OCaml and it is\n  designed to do so.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-10-15T18:05:29.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-11-13T18:23:41.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c573f2aaac6af48415301d520e63ea5e8c137ea4"},"pipeline":{"id":36460029,"iid":5223,"project_id":6138686,"sha":"c573f2aaac6af48415301d520e63ea5e8c137ea4","ref":"pr-8729","status":"failed","source":"push","created_at":"2018-11-13T17:23:55.577Z","updated_at":"2018-11-13T18:55:13.916Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36460029"},"web_url":"https://gitlab.com/coq/coq/-/jobs/119976622","artifacts":[{"file_type":"trace","size":24925,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":119976621,"status":"success","stage":"test","name":"validate:base","ref":"pr-8729","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-13T17:23:55.853Z","started_at":"2018-11-13T17:40:58.386Z","finished_at":"2018-11-13T17:45:29.132Z","duration":270.74568,"queued_duration":0.675817,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c573f2aaac6af48415301d520e63ea5e8c137ea4","short_id":"c573f2aa","created_at":"2018-11-13T18:23:41.000+01:00","parent_ids":["91a25055bc409ae0f70ff10a82580c7329773b61"],"title":"[dune] Switch to a Dune-based build system.","message":"[dune] Switch to a Dune-based build system.\n\nOver the last months we have added support to build Coq with Dune, I\nfeel we have reached a point where we can start to discuss if we\nshould replace the make-based system with a Dune-based one.\n\nThe *main rationale* for the switch is that maintaining two build\nsystems is hard, and Dune seems superior to make in almost every\naspect.\n\nIndeed, I think it is going to be hard to find technical arguments to\ndefend the make-base system. Dune outperforms it on almost every\npossible metric.\n\nAdditionally, the make-based system has grew organically over the\nyears, and these days we are spending significant developer resources\non it. The number of bugs that would be fixed by Dune is large [see #8052].\nIt is not a coincidence that few large projects do use `make` anymore,\nbut most have moved to `CMake`, `Ninja`, or some other alternative.\n\nOn this side, Dune provides a well-defined model that seems to git\nCoq's present and future necessities well.\n\n*Blockers*: the single blocker for a merge as of today, apart from the\ndepending PRs, is the lack of native-compute support. This is due to a\ntechnical limitation wrt targets and can be solved in several\ndifferent ways. Also, it is likely that a smooth developer profile is\nnot possible until https://github.com/ocaml/dune/issues/1155 lands in\nDune itself. https://github.com/ocaml/dune/issues/1377 may be\nconvenient for the reference manual but we can have a small workaround\nto generate the install file for now.\n\n*Risk analysis*: it is important to understand the risks that such a\nmove would entail. After Dune support is merged we could always go\nback to a make-based system, however we are very likely to depend on\nDune-specific features that would be hard to replicate. The main risks are:\n\n- lock-in: indeed lock-in risk is significant and Coq's source code\n  may depend on some Dune features. On the other hand, Dune is\n  strongly poised to be the standard build tool for the OCaml platform\n  and ecosystem, and more than 50% of OPAM packages use it.\n\n  It is safe to say that if Dune would become unsupported in the\n  future, there would be more important problems than Coq itself.\n\n- lack of in-house knowledge: indeed, Dune requires some specific\n  training in order to understand its build rules, which may become a\n  problem. This risk is mitigated in 2 different ways and attenuated\n  by an additional consideration: first, Dune rules are fairly simple\n  and declarative and it is reasonable to expect developers get to\n  know them without too much effort. This is one of the reasons for\n  the high adoption numbers in the ecosystem. Second, Dune developers\n  are very reactive and care about Coq, thus it is safe to assume that\n  we would get external help if needed. The additional consideration\n  that may make this less of a problem is that our in-house knowledge\n  of make may be even worse than Dune's. A non-negligible number of\n  developers have expressed discomfort with make and the amount of\n  required knowledge to master make seems way higher than what you\n  need to use Dune.\n\n- lack of flexibility: indeed, Dune is way less flexible than\n  make. Dune only knows how to do well two things: building OCaml\n  executables and libraries. However, that is basically 99% of what\n  building Coq entails; building other parts [documentation or Coq\n  libraries] is fairly straightforward and seem to pose not a problem.\n\n- lack of maturity: indeed, Dune develops fast, it is not free of\n  bugs, and some amount of adaptation is expected from us. This risk\n  can only be mitigated if there is continued developer interest.  In\n  the worst case, Coq could become stuck in a particular Dune version.\n\n- bootstrapping: this is not a problem as witnessed by #8615, Dune can\n  be bootstrapped very easily as it depends only on OCaml and it is\n  designed to do so.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-10-15T18:05:29.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-11-13T18:23:41.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c573f2aaac6af48415301d520e63ea5e8c137ea4"},"pipeline":{"id":36460029,"iid":5223,"project_id":6138686,"sha":"c573f2aaac6af48415301d520e63ea5e8c137ea4","ref":"pr-8729","status":"failed","source":"push","created_at":"2018-11-13T17:23:55.577Z","updated_at":"2018-11-13T18:55:13.916Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36460029"},"web_url":"https://gitlab.com/coq/coq/-/jobs/119976621","artifacts":[{"file_type":"trace","size":26219,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":119976620,"status":"success","stage":"test","name":"test-suite:edge+flambda","ref":"pr-8729","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-13T17:23:55.836Z","started_at":"2018-11-13T17:40:58.328Z","finished_at":"2018-11-13T18:02:34.166Z","duration":1295.837975,"queued_duration":0.528383,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c573f2aaac6af48415301d520e63ea5e8c137ea4","short_id":"c573f2aa","created_at":"2018-11-13T18:23:41.000+01:00","parent_ids":["91a25055bc409ae0f70ff10a82580c7329773b61"],"title":"[dune] Switch to a Dune-based build system.","message":"[dune] Switch to a Dune-based build system.\n\nOver the last months we have added support to build Coq with Dune, I\nfeel we have reached a point where we can start to discuss if we\nshould replace the make-based system with a Dune-based one.\n\nThe *main rationale* for the switch is that maintaining two build\nsystems is hard, and Dune seems superior to make in almost every\naspect.\n\nIndeed, I think it is going to be hard to find technical arguments to\ndefend the make-base system. Dune outperforms it on almost every\npossible metric.\n\nAdditionally, the make-based system has grew organically over the\nyears, and these days we are spending significant developer resources\non it. The number of bugs that would be fixed by Dune is large [see #8052].\nIt is not a coincidence that few large projects do use `make` anymore,\nbut most have moved to `CMake`, `Ninja`, or some other alternative.\n\nOn this side, Dune provides a well-defined model that seems to git\nCoq's present and future necessities well.\n\n*Blockers*: the single blocker for a merge as of today, apart from the\ndepending PRs, is the lack of native-compute support. This is due to a\ntechnical limitation wrt targets and can be solved in several\ndifferent ways. Also, it is likely that a smooth developer profile is\nnot possible until https://github.com/ocaml/dune/issues/1155 lands in\nDune itself. https://github.com/ocaml/dune/issues/1377 may be\nconvenient for the reference manual but we can have a small workaround\nto generate the install file for now.\n\n*Risk analysis*: it is important to understand the risks that such a\nmove would entail. After Dune support is merged we could always go\nback to a make-based system, however we are very likely to depend on\nDune-specific features that would be hard to replicate. The main risks are:\n\n- lock-in: indeed lock-in risk is significant and Coq's source code\n  may depend on some Dune features. On the other hand, Dune is\n  strongly poised to be the standard build tool for the OCaml platform\n  and ecosystem, and more than 50% of OPAM packages use it.\n\n  It is safe to say that if Dune would become unsupported in the\n  future, there would be more important problems than Coq itself.\n\n- lack of in-house knowledge: indeed, Dune requires some specific\n  training in order to understand its build rules, which may become a\n  problem. This risk is mitigated in 2 different ways and attenuated\n  by an additional consideration: first, Dune rules are fairly simple\n  and declarative and it is reasonable to expect developers get to\n  know them without too much effort. This is one of the reasons for\n  the high adoption numbers in the ecosystem. Second, Dune developers\n  are very reactive and care about Coq, thus it is safe to assume that\n  we would get external help if needed. The additional consideration\n  that may make this less of a problem is that our in-house knowledge\n  of make may be even worse than Dune's. A non-negligible number of\n  developers have expressed discomfort with make and the amount of\n  required knowledge to master make seems way higher than what you\n  need to use Dune.\n\n- lack of flexibility: indeed, Dune is way less flexible than\n  make. Dune only knows how to do well two things: building OCaml\n  executables and libraries. However, that is basically 99% of what\n  building Coq entails; building other parts [documentation or Coq\n  libraries] is fairly straightforward and seem to pose not a problem.\n\n- lack of maturity: indeed, Dune develops fast, it is not free of\n  bugs, and some amount of adaptation is expected from us. This risk\n  can only be mitigated if there is continued developer interest.  In\n  the worst case, Coq could become stuck in a particular Dune version.\n\n- bootstrapping: this is not a problem as witnessed by #8615, Dune can\n  be bootstrapped very easily as it depends only on OCaml and it is\n  designed to do so.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-10-15T18:05:29.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-11-13T18:23:41.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c573f2aaac6af48415301d520e63ea5e8c137ea4"},"pipeline":{"id":36460029,"iid":5223,"project_id":6138686,"sha":"c573f2aaac6af48415301d520e63ea5e8c137ea4","ref":"pr-8729","status":"failed","source":"push","created_at":"2018-11-13T17:23:55.577Z","updated_at":"2018-11-13T18:55:13.916Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36460029"},"web_url":"https://gitlab.com/coq/coq/-/jobs/119976620","artifacts":[{"file_type":"trace","size":75987,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":119976619,"status":"success","stage":"test","name":"test-suite:edge","ref":"pr-8729","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-13T17:23:55.818Z","started_at":"2018-11-13T17:40:58.277Z","finished_at":"2018-11-13T18:01:22.055Z","duration":1223.777458,"queued_duration":0.345484,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c573f2aaac6af48415301d520e63ea5e8c137ea4","short_id":"c573f2aa","created_at":"2018-11-13T18:23:41.000+01:00","parent_ids":["91a25055bc409ae0f70ff10a82580c7329773b61"],"title":"[dune] Switch to a Dune-based build system.","message":"[dune] Switch to a Dune-based build system.\n\nOver the last months we have added support to build Coq with Dune, I\nfeel we have reached a point where we can start to discuss if we\nshould replace the make-based system with a Dune-based one.\n\nThe *main rationale* for the switch is that maintaining two build\nsystems is hard, and Dune seems superior to make in almost every\naspect.\n\nIndeed, I think it is going to be hard to find technical arguments to\ndefend the make-base system. Dune outperforms it on almost every\npossible metric.\n\nAdditionally, the make-based system has grew organically over the\nyears, and these days we are spending significant developer resources\non it. The number of bugs that would be fixed by Dune is large [see #8052].\nIt is not a coincidence that few large projects do use `make` anymore,\nbut most have moved to `CMake`, `Ninja`, or some other alternative.\n\nOn this side, Dune provides a well-defined model that seems to git\nCoq's present and future necessities well.\n\n*Blockers*: the single blocker for a merge as of today, apart from the\ndepending PRs, is the lack of native-compute support. This is due to a\ntechnical limitation wrt targets and can be solved in several\ndifferent ways. Also, it is likely that a smooth developer profile is\nnot possible until https://github.com/ocaml/dune/issues/1155 lands in\nDune itself. https://github.com/ocaml/dune/issues/1377 may be\nconvenient for the reference manual but we can have a small workaround\nto generate the install file for now.\n\n*Risk analysis*: it is important to understand the risks that such a\nmove would entail. After Dune support is merged we could always go\nback to a make-based system, however we are very likely to depend on\nDune-specific features that would be hard to replicate. The main risks are:\n\n- lock-in: indeed lock-in risk is significant and Coq's source code\n  may depend on some Dune features. On the other hand, Dune is\n  strongly poised to be the standard build tool for the OCaml platform\n  and ecosystem, and more than 50% of OPAM packages use it.\n\n  It is safe to say that if Dune would become unsupported in the\n  future, there would be more important problems than Coq itself.\n\n- lack of in-house knowledge: indeed, Dune requires some specific\n  training in order to understand its build rules, which may become a\n  problem. This risk is mitigated in 2 different ways and attenuated\n  by an additional consideration: first, Dune rules are fairly simple\n  and declarative and it is reasonable to expect developers get to\n  know them without too much effort. This is one of the reasons for\n  the high adoption numbers in the ecosystem. Second, Dune developers\n  are very reactive and care about Coq, thus it is safe to assume that\n  we would get external help if needed. The additional consideration\n  that may make this less of a problem is that our in-house knowledge\n  of make may be even worse than Dune's. A non-negligible number of\n  developers have expressed discomfort with make and the amount of\n  required knowledge to master make seems way higher than what you\n  need to use Dune.\n\n- lack of flexibility: indeed, Dune is way less flexible than\n  make. Dune only knows how to do well two things: building OCaml\n  executables and libraries. However, that is basically 99% of what\n  building Coq entails; building other parts [documentation or Coq\n  libraries] is fairly straightforward and seem to pose not a problem.\n\n- lack of maturity: indeed, Dune develops fast, it is not free of\n  bugs, and some amount of adaptation is expected from us. This risk\n  can only be mitigated if there is continued developer interest.  In\n  the worst case, Coq could become stuck in a particular Dune version.\n\n- bootstrapping: this is not a problem as witnessed by #8615, Dune can\n  be bootstrapped very easily as it depends only on OCaml and it is\n  designed to do so.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-10-15T18:05:29.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-11-13T18:23:41.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c573f2aaac6af48415301d520e63ea5e8c137ea4"},"pipeline":{"id":36460029,"iid":5223,"project_id":6138686,"sha":"c573f2aaac6af48415301d520e63ea5e8c137ea4","ref":"pr-8729","status":"failed","source":"push","created_at":"2018-11-13T17:23:55.577Z","updated_at":"2018-11-13T18:55:13.916Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36460029"},"web_url":"https://gitlab.com/coq/coq/-/jobs/119976619","artifacts":[{"file_type":"trace","size":74756,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":119976618,"status":"success","stage":"test","name":"test-suite:base+32bit","ref":"pr-8729","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-13T17:23:55.800Z","started_at":"2018-11-13T17:40:58.300Z","finished_at":"2018-11-13T17:58:08.074Z","duration":1029.773929,"queued_duration":0.244406,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c573f2aaac6af48415301d520e63ea5e8c137ea4","short_id":"c573f2aa","created_at":"2018-11-13T18:23:41.000+01:00","parent_ids":["91a25055bc409ae0f70ff10a82580c7329773b61"],"title":"[dune] Switch to a Dune-based build system.","message":"[dune] Switch to a Dune-based build system.\n\nOver the last months we have added support to build Coq with Dune, I\nfeel we have reached a point where we can start to discuss if we\nshould replace the make-based system with a Dune-based one.\n\nThe *main rationale* for the switch is that maintaining two build\nsystems is hard, and Dune seems superior to make in almost every\naspect.\n\nIndeed, I think it is going to be hard to find technical arguments to\ndefend the make-base system. Dune outperforms it on almost every\npossible metric.\n\nAdditionally, the make-based system has grew organically over the\nyears, and these days we are spending significant developer resources\non it. The number of bugs that would be fixed by Dune is large [see #8052].\nIt is not a coincidence that few large projects do use `make` anymore,\nbut most have moved to `CMake`, `Ninja`, or some other alternative.\n\nOn this side, Dune provides a well-defined model that seems to git\nCoq's present and future necessities well.\n\n*Blockers*: the single blocker for a merge as of today, apart from the\ndepending PRs, is the lack of native-compute support. This is due to a\ntechnical limitation wrt targets and can be solved in several\ndifferent ways. Also, it is likely that a smooth developer profile is\nnot possible until https://github.com/ocaml/dune/issues/1155 lands in\nDune itself. https://github.com/ocaml/dune/issues/1377 may be\nconvenient for the reference manual but we can have a small workaround\nto generate the install file for now.\n\n*Risk analysis*: it is important to understand the risks that such a\nmove would entail. After Dune support is merged we could always go\nback to a make-based system, however we are very likely to depend on\nDune-specific features that would be hard to replicate. The main risks are:\n\n- lock-in: indeed lock-in risk is significant and Coq's source code\n  may depend on some Dune features. On the other hand, Dune is\n  strongly poised to be the standard build tool for the OCaml platform\n  and ecosystem, and more than 50% of OPAM packages use it.\n\n  It is safe to say that if Dune would become unsupported in the\n  future, there would be more important problems than Coq itself.\n\n- lack of in-house knowledge: indeed, Dune requires some specific\n  training in order to understand its build rules, which may become a\n  problem. This risk is mitigated in 2 different ways and attenuated\n  by an additional consideration: first, Dune rules are fairly simple\n  and declarative and it is reasonable to expect developers get to\n  know them without too much effort. This is one of the reasons for\n  the high adoption numbers in the ecosystem. Second, Dune developers\n  are very reactive and care about Coq, thus it is safe to assume that\n  we would get external help if needed. The additional consideration\n  that may make this less of a problem is that our in-house knowledge\n  of make may be even worse than Dune's. A non-negligible number of\n  developers have expressed discomfort with make and the amount of\n  required knowledge to master make seems way higher than what you\n  need to use Dune.\n\n- lack of flexibility: indeed, Dune is way less flexible than\n  make. Dune only knows how to do well two things: building OCaml\n  executables and libraries. However, that is basically 99% of what\n  building Coq entails; building other parts [documentation or Coq\n  libraries] is fairly straightforward and seem to pose not a problem.\n\n- lack of maturity: indeed, Dune develops fast, it is not free of\n  bugs, and some amount of adaptation is expected from us. This risk\n  can only be mitigated if there is continued developer interest.  In\n  the worst case, Coq could become stuck in a particular Dune version.\n\n- bootstrapping: this is not a problem as witnessed by #8615, Dune can\n  be bootstrapped very easily as it depends only on OCaml and it is\n  designed to do so.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-10-15T18:05:29.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-11-13T18:23:41.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c573f2aaac6af48415301d520e63ea5e8c137ea4"},"pipeline":{"id":36460029,"iid":5223,"project_id":6138686,"sha":"c573f2aaac6af48415301d520e63ea5e8c137ea4","ref":"pr-8729","status":"failed","source":"push","created_at":"2018-11-13T17:23:55.577Z","updated_at":"2018-11-13T18:55:13.916Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36460029"},"web_url":"https://gitlab.com/coq/coq/-/jobs/119976618","artifacts":[{"file_type":"trace","size":74486,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":119976617,"status":"success","stage":"test","name":"test-suite:base","ref":"pr-8729","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-13T17:23:55.782Z","started_at":"2018-11-13T17:40:59.644Z","finished_at":"2018-11-13T18:00:06.092Z","duration":1146.448396,"queued_duration":1.47859,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c573f2aaac6af48415301d520e63ea5e8c137ea4","short_id":"c573f2aa","created_at":"2018-11-13T18:23:41.000+01:00","parent_ids":["91a25055bc409ae0f70ff10a82580c7329773b61"],"title":"[dune] Switch to a Dune-based build system.","message":"[dune] Switch to a Dune-based build system.\n\nOver the last months we have added support to build Coq with Dune, I\nfeel we have reached a point where we can start to discuss if we\nshould replace the make-based system with a Dune-based one.\n\nThe *main rationale* for the switch is that maintaining two build\nsystems is hard, and Dune seems superior to make in almost every\naspect.\n\nIndeed, I think it is going to be hard to find technical arguments to\ndefend the make-base system. Dune outperforms it on almost every\npossible metric.\n\nAdditionally, the make-based system has grew organically over the\nyears, and these days we are spending significant developer resources\non it. The number of bugs that would be fixed by Dune is large [see #8052].\nIt is not a coincidence that few large projects do use `make` anymore,\nbut most have moved to `CMake`, `Ninja`, or some other alternative.\n\nOn this side, Dune provides a well-defined model that seems to git\nCoq's present and future necessities well.\n\n*Blockers*: the single blocker for a merge as of today, apart from the\ndepending PRs, is the lack of native-compute support. This is due to a\ntechnical limitation wrt targets and can be solved in several\ndifferent ways. Also, it is likely that a smooth developer profile is\nnot possible until https://github.com/ocaml/dune/issues/1155 lands in\nDune itself. https://github.com/ocaml/dune/issues/1377 may be\nconvenient for the reference manual but we can have a small workaround\nto generate the install file for now.\n\n*Risk analysis*: it is important to understand the risks that such a\nmove would entail. After Dune support is merged we could always go\nback to a make-based system, however we are very likely to depend on\nDune-specific features that would be hard to replicate. The main risks are:\n\n- lock-in: indeed lock-in risk is significant and Coq's source code\n  may depend on some Dune features. On the other hand, Dune is\n  strongly poised to be the standard build tool for the OCaml platform\n  and ecosystem, and more than 50% of OPAM packages use it.\n\n  It is safe to say that if Dune would become unsupported in the\n  future, there would be more important problems than Coq itself.\n\n- lack of in-house knowledge: indeed, Dune requires some specific\n  training in order to understand its build rules, which may become a\n  problem. This risk is mitigated in 2 different ways and attenuated\n  by an additional consideration: first, Dune rules are fairly simple\n  and declarative and it is reasonable to expect developers get to\n  know them without too much effort. This is one of the reasons for\n  the high adoption numbers in the ecosystem. Second, Dune developers\n  are very reactive and care about Coq, thus it is safe to assume that\n  we would get external help if needed. The additional consideration\n  that may make this less of a problem is that our in-house knowledge\n  of make may be even worse than Dune's. A non-negligible number of\n  developers have expressed discomfort with make and the amount of\n  required knowledge to master make seems way higher than what you\n  need to use Dune.\n\n- lack of flexibility: indeed, Dune is way less flexible than\n  make. Dune only knows how to do well two things: building OCaml\n  executables and libraries. However, that is basically 99% of what\n  building Coq entails; building other parts [documentation or Coq\n  libraries] is fairly straightforward and seem to pose not a problem.\n\n- lack of maturity: indeed, Dune develops fast, it is not free of\n  bugs, and some amount of adaptation is expected from us. This risk\n  can only be mitigated if there is continued developer interest.  In\n  the worst case, Coq could become stuck in a particular Dune version.\n\n- bootstrapping: this is not a problem as witnessed by #8615, Dune can\n  be bootstrapped very easily as it depends only on OCaml and it is\n  designed to do so.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-10-15T18:05:29.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-11-13T18:23:41.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c573f2aaac6af48415301d520e63ea5e8c137ea4"},"pipeline":{"id":36460029,"iid":5223,"project_id":6138686,"sha":"c573f2aaac6af48415301d520e63ea5e8c137ea4","ref":"pr-8729","status":"failed","source":"push","created_at":"2018-11-13T17:23:55.577Z","updated_at":"2018-11-13T18:55:13.916Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36460029"},"web_url":"https://gitlab.com/coq/coq/-/jobs/119976617","artifacts":[{"file_type":"trace","size":75474,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":119976616,"status":"success","stage":"test","name":"doc:ml-api","ref":"pr-8729","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-13T17:23:55.763Z","started_at":"2018-11-13T17:40:59.594Z","finished_at":"2018-11-13T17:44:29.294Z","duration":209.699277,"queued_duration":1.19209,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c573f2aaac6af48415301d520e63ea5e8c137ea4","short_id":"c573f2aa","created_at":"2018-11-13T18:23:41.000+01:00","parent_ids":["91a25055bc409ae0f70ff10a82580c7329773b61"],"title":"[dune] Switch to a Dune-based build system.","message":"[dune] Switch to a Dune-based build system.\n\nOver the last months we have added support to build Coq with Dune, I\nfeel we have reached a point where we can start to discuss if we\nshould replace the make-based system with a Dune-based one.\n\nThe *main rationale* for the switch is that maintaining two build\nsystems is hard, and Dune seems superior to make in almost every\naspect.\n\nIndeed, I think it is going to be hard to find technical arguments to\ndefend the make-base system. Dune outperforms it on almost every\npossible metric.\n\nAdditionally, the make-based system has grew organically over the\nyears, and these days we are spending significant developer resources\non it. The number of bugs that would be fixed by Dune is large [see #8052].\nIt is not a coincidence that few large projects do use `make` anymore,\nbut most have moved to `CMake`, `Ninja`, or some other alternative.\n\nOn this side, Dune provides a well-defined model that seems to git\nCoq's present and future necessities well.\n\n*Blockers*: the single blocker for a merge as of today, apart from the\ndepending PRs, is the lack of native-compute support. This is due to a\ntechnical limitation wrt targets and can be solved in several\ndifferent ways. Also, it is likely that a smooth developer profile is\nnot possible until https://github.com/ocaml/dune/issues/1155 lands in\nDune itself. https://github.com/ocaml/dune/issues/1377 may be\nconvenient for the reference manual but we can have a small workaround\nto generate the install file for now.\n\n*Risk analysis*: it is important to understand the risks that such a\nmove would entail. After Dune support is merged we could always go\nback to a make-based system, however we are very likely to depend on\nDune-specific features that would be hard to replicate. The main risks are:\n\n- lock-in: indeed lock-in risk is significant and Coq's source code\n  may depend on some Dune features. On the other hand, Dune is\n  strongly poised to be the standard build tool for the OCaml platform\n  and ecosystem, and more than 50% of OPAM packages use it.\n\n  It is safe to say that if Dune would become unsupported in the\n  future, there would be more important problems than Coq itself.\n\n- lack of in-house knowledge: indeed, Dune requires some specific\n  training in order to understand its build rules, which may become a\n  problem. This risk is mitigated in 2 different ways and attenuated\n  by an additional consideration: first, Dune rules are fairly simple\n  and declarative and it is reasonable to expect developers get to\n  know them without too much effort. This is one of the reasons for\n  the high adoption numbers in the ecosystem. Second, Dune developers\n  are very reactive and care about Coq, thus it is safe to assume that\n  we would get external help if needed. The additional consideration\n  that may make this less of a problem is that our in-house knowledge\n  of make may be even worse than Dune's. A non-negligible number of\n  developers have expressed discomfort with make and the amount of\n  required knowledge to master make seems way higher than what you\n  need to use Dune.\n\n- lack of flexibility: indeed, Dune is way less flexible than\n  make. Dune only knows how to do well two things: building OCaml\n  executables and libraries. However, that is basically 99% of what\n  building Coq entails; building other parts [documentation or Coq\n  libraries] is fairly straightforward and seem to pose not a problem.\n\n- lack of maturity: indeed, Dune develops fast, it is not free of\n  bugs, and some amount of adaptation is expected from us. This risk\n  can only be mitigated if there is continued developer interest.  In\n  the worst case, Coq could become stuck in a particular Dune version.\n\n- bootstrapping: this is not a problem as witnessed by #8615, Dune can\n  be bootstrapped very easily as it depends only on OCaml and it is\n  designed to do so.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-10-15T18:05:29.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-11-13T18:23:41.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c573f2aaac6af48415301d520e63ea5e8c137ea4"},"pipeline":{"id":36460029,"iid":5223,"project_id":6138686,"sha":"c573f2aaac6af48415301d520e63ea5e8c137ea4","ref":"pr-8729","status":"failed","source":"push","created_at":"2018-11-13T17:23:55.577Z","updated_at":"2018-11-13T18:55:13.916Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36460029"},"web_url":"https://gitlab.com/coq/coq/-/jobs/119976616","artifacts":[{"file_type":"trace","size":97947,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":119976615,"status":"success","stage":"test","name":"doc:refman","ref":"pr-8729","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-13T17:23:55.745Z","started_at":"2018-11-13T17:40:59.545Z","finished_at":"2018-11-13T17:55:25.692Z","duration":866.146956,"queued_duration":1.058595,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c573f2aaac6af48415301d520e63ea5e8c137ea4","short_id":"c573f2aa","created_at":"2018-11-13T18:23:41.000+01:00","parent_ids":["91a25055bc409ae0f70ff10a82580c7329773b61"],"title":"[dune] Switch to a Dune-based build system.","message":"[dune] Switch to a Dune-based build system.\n\nOver the last months we have added support to build Coq with Dune, I\nfeel we have reached a point where we can start to discuss if we\nshould replace the make-based system with a Dune-based one.\n\nThe *main rationale* for the switch is that maintaining two build\nsystems is hard, and Dune seems superior to make in almost every\naspect.\n\nIndeed, I think it is going to be hard to find technical arguments to\ndefend the make-base system. Dune outperforms it on almost every\npossible metric.\n\nAdditionally, the make-based system has grew organically over the\nyears, and these days we are spending significant developer resources\non it. The number of bugs that would be fixed by Dune is large [see #8052].\nIt is not a coincidence that few large projects do use `make` anymore,\nbut most have moved to `CMake`, `Ninja`, or some other alternative.\n\nOn this side, Dune provides a well-defined model that seems to git\nCoq's present and future necessities well.\n\n*Blockers*: the single blocker for a merge as of today, apart from the\ndepending PRs, is the lack of native-compute support. This is due to a\ntechnical limitation wrt targets and can be solved in several\ndifferent ways. Also, it is likely that a smooth developer profile is\nnot possible until https://github.com/ocaml/dune/issues/1155 lands in\nDune itself. https://github.com/ocaml/dune/issues/1377 may be\nconvenient for the reference manual but we can have a small workaround\nto generate the install file for now.\n\n*Risk analysis*: it is important to understand the risks that such a\nmove would entail. After Dune support is merged we could always go\nback to a make-based system, however we are very likely to depend on\nDune-specific features that would be hard to replicate. The main risks are:\n\n- lock-in: indeed lock-in risk is significant and Coq's source code\n  may depend on some Dune features. On the other hand, Dune is\n  strongly poised to be the standard build tool for the OCaml platform\n  and ecosystem, and more than 50% of OPAM packages use it.\n\n  It is safe to say that if Dune would become unsupported in the\n  future, there would be more important problems than Coq itself.\n\n- lack of in-house knowledge: indeed, Dune requires some specific\n  training in order to understand its build rules, which may become a\n  problem. This risk is mitigated in 2 different ways and attenuated\n  by an additional consideration: first, Dune rules are fairly simple\n  and declarative and it is reasonable to expect developers get to\n  know them without too much effort. This is one of the reasons for\n  the high adoption numbers in the ecosystem. Second, Dune developers\n  are very reactive and care about Coq, thus it is safe to assume that\n  we would get external help if needed. The additional consideration\n  that may make this less of a problem is that our in-house knowledge\n  of make may be even worse than Dune's. A non-negligible number of\n  developers have expressed discomfort with make and the amount of\n  required knowledge to master make seems way higher than what you\n  need to use Dune.\n\n- lack of flexibility: indeed, Dune is way less flexible than\n  make. Dune only knows how to do well two things: building OCaml\n  executables and libraries. However, that is basically 99% of what\n  building Coq entails; building other parts [documentation or Coq\n  libraries] is fairly straightforward and seem to pose not a problem.\n\n- lack of maturity: indeed, Dune develops fast, it is not free of\n  bugs, and some amount of adaptation is expected from us. This risk\n  can only be mitigated if there is continued developer interest.  In\n  the worst case, Coq could become stuck in a particular Dune version.\n\n- bootstrapping: this is not a problem as witnessed by #8615, Dune can\n  be bootstrapped very easily as it depends only on OCaml and it is\n  designed to do so.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-10-15T18:05:29.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-11-13T18:23:41.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c573f2aaac6af48415301d520e63ea5e8c137ea4"},"pipeline":{"id":36460029,"iid":5223,"project_id":6138686,"sha":"c573f2aaac6af48415301d520e63ea5e8c137ea4","ref":"pr-8729","status":"failed","source":"push","created_at":"2018-11-13T17:23:55.577Z","updated_at":"2018-11-13T18:55:13.916Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36460029"},"web_url":"https://gitlab.com/coq/coq/-/jobs/119976615","artifacts":[{"file_type":"trace","size":27515,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":119976614,"status":"failed","stage":"test","name":"pkg:nix","ref":"pr-8729","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-13T17:23:55.727Z","started_at":"2018-11-13T17:40:59.132Z","finished_at":"2018-11-13T17:56:18.763Z","duration":919.631376,"queued_duration":0.525158,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c573f2aaac6af48415301d520e63ea5e8c137ea4","short_id":"c573f2aa","created_at":"2018-11-13T18:23:41.000+01:00","parent_ids":["91a25055bc409ae0f70ff10a82580c7329773b61"],"title":"[dune] Switch to a Dune-based build system.","message":"[dune] Switch to a Dune-based build system.\n\nOver the last months we have added support to build Coq with Dune, I\nfeel we have reached a point where we can start to discuss if we\nshould replace the make-based system with a Dune-based one.\n\nThe *main rationale* for the switch is that maintaining two build\nsystems is hard, and Dune seems superior to make in almost every\naspect.\n\nIndeed, I think it is going to be hard to find technical arguments to\ndefend the make-base system. Dune outperforms it on almost every\npossible metric.\n\nAdditionally, the make-based system has grew organically over the\nyears, and these days we are spending significant developer resources\non it. The number of bugs that would be fixed by Dune is large [see #8052].\nIt is not a coincidence that few large projects do use `make` anymore,\nbut most have moved to `CMake`, `Ninja`, or some other alternative.\n\nOn this side, Dune provides a well-defined model that seems to git\nCoq's present and future necessities well.\n\n*Blockers*: the single blocker for a merge as of today, apart from the\ndepending PRs, is the lack of native-compute support. This is due to a\ntechnical limitation wrt targets and can be solved in several\ndifferent ways. Also, it is likely that a smooth developer profile is\nnot possible until https://github.com/ocaml/dune/issues/1155 lands in\nDune itself. https://github.com/ocaml/dune/issues/1377 may be\nconvenient for the reference manual but we can have a small workaround\nto generate the install file for now.\n\n*Risk analysis*: it is important to understand the risks that such a\nmove would entail. After Dune support is merged we could always go\nback to a make-based system, however we are very likely to depend on\nDune-specific features that would be hard to replicate. The main risks are:\n\n- lock-in: indeed lock-in risk is significant and Coq's source code\n  may depend on some Dune features. On the other hand, Dune is\n  strongly poised to be the standard build tool for the OCaml platform\n  and ecosystem, and more than 50% of OPAM packages use it.\n\n  It is safe to say that if Dune would become unsupported in the\n  future, there would be more important problems than Coq itself.\n\n- lack of in-house knowledge: indeed, Dune requires some specific\n  training in order to understand its build rules, which may become a\n  problem. This risk is mitigated in 2 different ways and attenuated\n  by an additional consideration: first, Dune rules are fairly simple\n  and declarative and it is reasonable to expect developers get to\n  know them without too much effort. This is one of the reasons for\n  the high adoption numbers in the ecosystem. Second, Dune developers\n  are very reactive and care about Coq, thus it is safe to assume that\n  we would get external help if needed. The additional consideration\n  that may make this less of a problem is that our in-house knowledge\n  of make may be even worse than Dune's. A non-negligible number of\n  developers have expressed discomfort with make and the amount of\n  required knowledge to master make seems way higher than what you\n  need to use Dune.\n\n- lack of flexibility: indeed, Dune is way less flexible than\n  make. Dune only knows how to do well two things: building OCaml\n  executables and libraries. However, that is basically 99% of what\n  building Coq entails; building other parts [documentation or Coq\n  libraries] is fairly straightforward and seem to pose not a problem.\n\n- lack of maturity: indeed, Dune develops fast, it is not free of\n  bugs, and some amount of adaptation is expected from us. This risk\n  can only be mitigated if there is continued developer interest.  In\n  the worst case, Coq could become stuck in a particular Dune version.\n\n- bootstrapping: this is not a problem as witnessed by #8615, Dune can\n  be bootstrapped very easily as it depends only on OCaml and it is\n  designed to do so.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-10-15T18:05:29.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-11-13T18:23:41.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c573f2aaac6af48415301d520e63ea5e8c137ea4"},"pipeline":{"id":36460029,"iid":5223,"project_id":6138686,"sha":"c573f2aaac6af48415301d520e63ea5e8c137ea4","ref":"pr-8729","status":"failed","source":"push","created_at":"2018-11-13T17:23:55.577Z","updated_at":"2018-11-13T18:55:13.916Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36460029"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/119976614","artifacts":[{"file_type":"trace","size":208827,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":119976613,"status":"success","stage":"test","name":"pkg:opam","ref":"pr-8729","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-13T17:23:55.710Z","started_at":"2018-11-13T17:40:58.973Z","finished_at":"2018-11-13T17:54:35.196Z","duration":816.222693,"queued_duration":0.317966,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c573f2aaac6af48415301d520e63ea5e8c137ea4","short_id":"c573f2aa","created_at":"2018-11-13T18:23:41.000+01:00","parent_ids":["91a25055bc409ae0f70ff10a82580c7329773b61"],"title":"[dune] Switch to a Dune-based build system.","message":"[dune] Switch to a Dune-based build system.\n\nOver the last months we have added support to build Coq with Dune, I\nfeel we have reached a point where we can start to discuss if we\nshould replace the make-based system with a Dune-based one.\n\nThe *main rationale* for the switch is that maintaining two build\nsystems is hard, and Dune seems superior to make in almost every\naspect.\n\nIndeed, I think it is going to be hard to find technical arguments to\ndefend the make-base system. Dune outperforms it on almost every\npossible metric.\n\nAdditionally, the make-based system has grew organically over the\nyears, and these days we are spending significant developer resources\non it. The number of bugs that would be fixed by Dune is large [see #8052].\nIt is not a coincidence that few large projects do use `make` anymore,\nbut most have moved to `CMake`, `Ninja`, or some other alternative.\n\nOn this side, Dune provides a well-defined model that seems to git\nCoq's present and future necessities well.\n\n*Blockers*: the single blocker for a merge as of today, apart from the\ndepending PRs, is the lack of native-compute support. This is due to a\ntechnical limitation wrt targets and can be solved in several\ndifferent ways. Also, it is likely that a smooth developer profile is\nnot possible until https://github.com/ocaml/dune/issues/1155 lands in\nDune itself. https://github.com/ocaml/dune/issues/1377 may be\nconvenient for the reference manual but we can have a small workaround\nto generate the install file for now.\n\n*Risk analysis*: it is important to understand the risks that such a\nmove would entail. After Dune support is merged we could always go\nback to a make-based system, however we are very likely to depend on\nDune-specific features that would be hard to replicate. The main risks are:\n\n- lock-in: indeed lock-in risk is significant and Coq's source code\n  may depend on some Dune features. On the other hand, Dune is\n  strongly poised to be the standard build tool for the OCaml platform\n  and ecosystem, and more than 50% of OPAM packages use it.\n\n  It is safe to say that if Dune would become unsupported in the\n  future, there would be more important problems than Coq itself.\n\n- lack of in-house knowledge: indeed, Dune requires some specific\n  training in order to understand its build rules, which may become a\n  problem. This risk is mitigated in 2 different ways and attenuated\n  by an additional consideration: first, Dune rules are fairly simple\n  and declarative and it is reasonable to expect developers get to\n  know them without too much effort. This is one of the reasons for\n  the high adoption numbers in the ecosystem. Second, Dune developers\n  are very reactive and care about Coq, thus it is safe to assume that\n  we would get external help if needed. The additional consideration\n  that may make this less of a problem is that our in-house knowledge\n  of make may be even worse than Dune's. A non-negligible number of\n  developers have expressed discomfort with make and the amount of\n  required knowledge to master make seems way higher than what you\n  need to use Dune.\n\n- lack of flexibility: indeed, Dune is way less flexible than\n  make. Dune only knows how to do well two things: building OCaml\n  executables and libraries. However, that is basically 99% of what\n  building Coq entails; building other parts [documentation or Coq\n  libraries] is fairly straightforward and seem to pose not a problem.\n\n- lack of maturity: indeed, Dune develops fast, it is not free of\n  bugs, and some amount of adaptation is expected from us. This risk\n  can only be mitigated if there is continued developer interest.  In\n  the worst case, Coq could become stuck in a particular Dune version.\n\n- bootstrapping: this is not a problem as witnessed by #8615, Dune can\n  be bootstrapped very easily as it depends only on OCaml and it is\n  designed to do so.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-10-15T18:05:29.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-11-13T18:23:41.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c573f2aaac6af48415301d520e63ea5e8c137ea4"},"pipeline":{"id":36460029,"iid":5223,"project_id":6138686,"sha":"c573f2aaac6af48415301d520e63ea5e8c137ea4","ref":"pr-8729","status":"failed","source":"push","created_at":"2018-11-13T17:23:55.577Z","updated_at":"2018-11-13T18:55:13.916Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36460029"},"web_url":"https://gitlab.com/coq/coq/-/jobs/119976613","artifacts":[{"file_type":"trace","size":24106,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":119976612,"status":"success","stage":"test","name":"windows64","ref":"pr-8729","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-13T17:23:55.689Z","started_at":"2018-11-13T18:02:26.713Z","finished_at":"2018-11-13T18:50:56.366Z","duration":2909.652873,"queued_duration":1288.012888,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c573f2aaac6af48415301d520e63ea5e8c137ea4","short_id":"c573f2aa","created_at":"2018-11-13T18:23:41.000+01:00","parent_ids":["91a25055bc409ae0f70ff10a82580c7329773b61"],"title":"[dune] Switch to a Dune-based build system.","message":"[dune] Switch to a Dune-based build system.\n\nOver the last months we have added support to build Coq with Dune, I\nfeel we have reached a point where we can start to discuss if we\nshould replace the make-based system with a Dune-based one.\n\nThe *main rationale* for the switch is that maintaining two build\nsystems is hard, and Dune seems superior to make in almost every\naspect.\n\nIndeed, I think it is going to be hard to find technical arguments to\ndefend the make-base system. Dune outperforms it on almost every\npossible metric.\n\nAdditionally, the make-based system has grew organically over the\nyears, and these days we are spending significant developer resources\non it. The number of bugs that would be fixed by Dune is large [see #8052].\nIt is not a coincidence that few large projects do use `make` anymore,\nbut most have moved to `CMake`, `Ninja`, or some other alternative.\n\nOn this side, Dune provides a well-defined model that seems to git\nCoq's present and future necessities well.\n\n*Blockers*: the single blocker for a merge as of today, apart from the\ndepending PRs, is the lack of native-compute support. This is due to a\ntechnical limitation wrt targets and can be solved in several\ndifferent ways. Also, it is likely that a smooth developer profile is\nnot possible until https://github.com/ocaml/dune/issues/1155 lands in\nDune itself. https://github.com/ocaml/dune/issues/1377 may be\nconvenient for the reference manual but we can have a small workaround\nto generate the install file for now.\n\n*Risk analysis*: it is important to understand the risks that such a\nmove would entail. After Dune support is merged we could always go\nback to a make-based system, however we are very likely to depend on\nDune-specific features that would be hard to replicate. The main risks are:\n\n- lock-in: indeed lock-in risk is significant and Coq's source code\n  may depend on some Dune features. On the other hand, Dune is\n  strongly poised to be the standard build tool for the OCaml platform\n  and ecosystem, and more than 50% of OPAM packages use it.\n\n  It is safe to say that if Dune would become unsupported in the\n  future, there would be more important problems than Coq itself.\n\n- lack of in-house knowledge: indeed, Dune requires some specific\n  training in order to understand its build rules, which may become a\n  problem. This risk is mitigated in 2 different ways and attenuated\n  by an additional consideration: first, Dune rules are fairly simple\n  and declarative and it is reasonable to expect developers get to\n  know them without too much effort. This is one of the reasons for\n  the high adoption numbers in the ecosystem. Second, Dune developers\n  are very reactive and care about Coq, thus it is safe to assume that\n  we would get external help if needed. The additional consideration\n  that may make this less of a problem is that our in-house knowledge\n  of make may be even worse than Dune's. A non-negligible number of\n  developers have expressed discomfort with make and the amount of\n  required knowledge to master make seems way higher than what you\n  need to use Dune.\n\n- lack of flexibility: indeed, Dune is way less flexible than\n  make. Dune only knows how to do well two things: building OCaml\n  executables and libraries. However, that is basically 99% of what\n  building Coq entails; building other parts [documentation or Coq\n  libraries] is fairly straightforward and seem to pose not a problem.\n\n- lack of maturity: indeed, Dune develops fast, it is not free of\n  bugs, and some amount of adaptation is expected from us. This risk\n  can only be mitigated if there is continued developer interest.  In\n  the worst case, Coq could become stuck in a particular Dune version.\n\n- bootstrapping: this is not a problem as witnessed by #8615, Dune can\n  be bootstrapped very easily as it depends only on OCaml and it is\n  designed to do so.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-10-15T18:05:29.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-11-13T18:23:41.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c573f2aaac6af48415301d520e63ea5e8c137ea4"},"pipeline":{"id":36460029,"iid":5223,"project_id":6138686,"sha":"c573f2aaac6af48415301d520e63ea5e8c137ea4","ref":"pr-8729","status":"failed","source":"push","created_at":"2018-11-13T17:23:55.577Z","updated_at":"2018-11-13T18:55:13.916Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36460029"},"web_url":"https://gitlab.com/coq/coq/-/jobs/119976612","artifacts":[{"file_type":"trace","size":356358,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":"2018-11-20T18:50:51.698Z","tag_list":["windows"]}
{"id":119976609,"status":"success","stage":"build","name":"build:edge+flambda","ref":"pr-8729","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-13T17:23:55.663Z","started_at":"2018-11-13T17:23:57.874Z","finished_at":"2018-11-13T17:39:41.976Z","duration":944.102295,"queued_duration":1.175941,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c573f2aaac6af48415301d520e63ea5e8c137ea4","short_id":"c573f2aa","created_at":"2018-11-13T18:23:41.000+01:00","parent_ids":["91a25055bc409ae0f70ff10a82580c7329773b61"],"title":"[dune] Switch to a Dune-based build system.","message":"[dune] Switch to a Dune-based build system.\n\nOver the last months we have added support to build Coq with Dune, I\nfeel we have reached a point where we can start to discuss if we\nshould replace the make-based system with a Dune-based one.\n\nThe *main rationale* for the switch is that maintaining two build\nsystems is hard, and Dune seems superior to make in almost every\naspect.\n\nIndeed, I think it is going to be hard to find technical arguments to\ndefend the make-base system. Dune outperforms it on almost every\npossible metric.\n\nAdditionally, the make-based system has grew organically over the\nyears, and these days we are spending significant developer resources\non it. The number of bugs that would be fixed by Dune is large [see #8052].\nIt is not a coincidence that few large projects do use `make` anymore,\nbut most have moved to `CMake`, `Ninja`, or some other alternative.\n\nOn this side, Dune provides a well-defined model that seems to git\nCoq's present and future necessities well.\n\n*Blockers*: the single blocker for a merge as of today, apart from the\ndepending PRs, is the lack of native-compute support. This is due to a\ntechnical limitation wrt targets and can be solved in several\ndifferent ways. Also, it is likely that a smooth developer profile is\nnot possible until https://github.com/ocaml/dune/issues/1155 lands in\nDune itself. https://github.com/ocaml/dune/issues/1377 may be\nconvenient for the reference manual but we can have a small workaround\nto generate the install file for now.\n\n*Risk analysis*: it is important to understand the risks that such a\nmove would entail. After Dune support is merged we could always go\nback to a make-based system, however we are very likely to depend on\nDune-specific features that would be hard to replicate. The main risks are:\n\n- lock-in: indeed lock-in risk is significant and Coq's source code\n  may depend on some Dune features. On the other hand, Dune is\n  strongly poised to be the standard build tool for the OCaml platform\n  and ecosystem, and more than 50% of OPAM packages use it.\n\n  It is safe to say that if Dune would become unsupported in the\n  future, there would be more important problems than Coq itself.\n\n- lack of in-house knowledge: indeed, Dune requires some specific\n  training in order to understand its build rules, which may become a\n  problem. This risk is mitigated in 2 different ways and attenuated\n  by an additional consideration: first, Dune rules are fairly simple\n  and declarative and it is reasonable to expect developers get to\n  know them without too much effort. This is one of the reasons for\n  the high adoption numbers in the ecosystem. Second, Dune developers\n  are very reactive and care about Coq, thus it is safe to assume that\n  we would get external help if needed. The additional consideration\n  that may make this less of a problem is that our in-house knowledge\n  of make may be even worse than Dune's. A non-negligible number of\n  developers have expressed discomfort with make and the amount of\n  required knowledge to master make seems way higher than what you\n  need to use Dune.\n\n- lack of flexibility: indeed, Dune is way less flexible than\n  make. Dune only knows how to do well two things: building OCaml\n  executables and libraries. However, that is basically 99% of what\n  building Coq entails; building other parts [documentation or Coq\n  libraries] is fairly straightforward and seem to pose not a problem.\n\n- lack of maturity: indeed, Dune develops fast, it is not free of\n  bugs, and some amount of adaptation is expected from us. This risk\n  can only be mitigated if there is continued developer interest.  In\n  the worst case, Coq could become stuck in a particular Dune version.\n\n- bootstrapping: this is not a problem as witnessed by #8615, Dune can\n  be bootstrapped very easily as it depends only on OCaml and it is\n  designed to do so.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-10-15T18:05:29.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-11-13T18:23:41.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c573f2aaac6af48415301d520e63ea5e8c137ea4"},"pipeline":{"id":36460029,"iid":5223,"project_id":6138686,"sha":"c573f2aaac6af48415301d520e63ea5e8c137ea4","ref":"pr-8729","status":"failed","source":"push","created_at":"2018-11-13T17:23:55.577Z","updated_at":"2018-11-13T18:55:13.916Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36460029"},"web_url":"https://gitlab.com/coq/coq/-/jobs/119976609","artifacts":[{"file_type":"trace","size":24113,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2018-11-20T17:39:35.373Z","tag_list":[]}
{"id":119976608,"status":"success","stage":"build","name":"build:edge","ref":"pr-8729","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-13T17:23:55.644Z","started_at":"2018-11-13T17:23:57.675Z","finished_at":"2018-11-13T17:40:25.210Z","duration":987.53562,"queued_duration":0.940939,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c573f2aaac6af48415301d520e63ea5e8c137ea4","short_id":"c573f2aa","created_at":"2018-11-13T18:23:41.000+01:00","parent_ids":["91a25055bc409ae0f70ff10a82580c7329773b61"],"title":"[dune] Switch to a Dune-based build system.","message":"[dune] Switch to a Dune-based build system.\n\nOver the last months we have added support to build Coq with Dune, I\nfeel we have reached a point where we can start to discuss if we\nshould replace the make-based system with a Dune-based one.\n\nThe *main rationale* for the switch is that maintaining two build\nsystems is hard, and Dune seems superior to make in almost every\naspect.\n\nIndeed, I think it is going to be hard to find technical arguments to\ndefend the make-base system. Dune outperforms it on almost every\npossible metric.\n\nAdditionally, the make-based system has grew organically over the\nyears, and these days we are spending significant developer resources\non it. The number of bugs that would be fixed by Dune is large [see #8052].\nIt is not a coincidence that few large projects do use `make` anymore,\nbut most have moved to `CMake`, `Ninja`, or some other alternative.\n\nOn this side, Dune provides a well-defined model that seems to git\nCoq's present and future necessities well.\n\n*Blockers*: the single blocker for a merge as of today, apart from the\ndepending PRs, is the lack of native-compute support. This is due to a\ntechnical limitation wrt targets and can be solved in several\ndifferent ways. Also, it is likely that a smooth developer profile is\nnot possible until https://github.com/ocaml/dune/issues/1155 lands in\nDune itself. https://github.com/ocaml/dune/issues/1377 may be\nconvenient for the reference manual but we can have a small workaround\nto generate the install file for now.\n\n*Risk analysis*: it is important to understand the risks that such a\nmove would entail. After Dune support is merged we could always go\nback to a make-based system, however we are very likely to depend on\nDune-specific features that would be hard to replicate. The main risks are:\n\n- lock-in: indeed lock-in risk is significant and Coq's source code\n  may depend on some Dune features. On the other hand, Dune is\n  strongly poised to be the standard build tool for the OCaml platform\n  and ecosystem, and more than 50% of OPAM packages use it.\n\n  It is safe to say that if Dune would become unsupported in the\n  future, there would be more important problems than Coq itself.\n\n- lack of in-house knowledge: indeed, Dune requires some specific\n  training in order to understand its build rules, which may become a\n  problem. This risk is mitigated in 2 different ways and attenuated\n  by an additional consideration: first, Dune rules are fairly simple\n  and declarative and it is reasonable to expect developers get to\n  know them without too much effort. This is one of the reasons for\n  the high adoption numbers in the ecosystem. Second, Dune developers\n  are very reactive and care about Coq, thus it is safe to assume that\n  we would get external help if needed. The additional consideration\n  that may make this less of a problem is that our in-house knowledge\n  of make may be even worse than Dune's. A non-negligible number of\n  developers have expressed discomfort with make and the amount of\n  required knowledge to master make seems way higher than what you\n  need to use Dune.\n\n- lack of flexibility: indeed, Dune is way less flexible than\n  make. Dune only knows how to do well two things: building OCaml\n  executables and libraries. However, that is basically 99% of what\n  building Coq entails; building other parts [documentation or Coq\n  libraries] is fairly straightforward and seem to pose not a problem.\n\n- lack of maturity: indeed, Dune develops fast, it is not free of\n  bugs, and some amount of adaptation is expected from us. This risk\n  can only be mitigated if there is continued developer interest.  In\n  the worst case, Coq could become stuck in a particular Dune version.\n\n- bootstrapping: this is not a problem as witnessed by #8615, Dune can\n  be bootstrapped very easily as it depends only on OCaml and it is\n  designed to do so.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-10-15T18:05:29.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-11-13T18:23:41.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c573f2aaac6af48415301d520e63ea5e8c137ea4"},"pipeline":{"id":36460029,"iid":5223,"project_id":6138686,"sha":"c573f2aaac6af48415301d520e63ea5e8c137ea4","ref":"pr-8729","status":"failed","source":"push","created_at":"2018-11-13T17:23:55.577Z","updated_at":"2018-11-13T18:55:13.916Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36460029"},"web_url":"https://gitlab.com/coq/coq/-/jobs/119976608","artifacts":[{"file_type":"trace","size":22890,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2018-11-20T17:40:19.405Z","tag_list":[]}
{"id":119976607,"status":"success","stage":"build","name":"build:base+32bit","ref":"pr-8729","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-13T17:23:55.627Z","started_at":"2018-11-13T17:23:57.514Z","finished_at":"2018-11-13T17:38:15.489Z","duration":857.975174,"queued_duration":0.717737,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c573f2aaac6af48415301d520e63ea5e8c137ea4","short_id":"c573f2aa","created_at":"2018-11-13T18:23:41.000+01:00","parent_ids":["91a25055bc409ae0f70ff10a82580c7329773b61"],"title":"[dune] Switch to a Dune-based build system.","message":"[dune] Switch to a Dune-based build system.\n\nOver the last months we have added support to build Coq with Dune, I\nfeel we have reached a point where we can start to discuss if we\nshould replace the make-based system with a Dune-based one.\n\nThe *main rationale* for the switch is that maintaining two build\nsystems is hard, and Dune seems superior to make in almost every\naspect.\n\nIndeed, I think it is going to be hard to find technical arguments to\ndefend the make-base system. Dune outperforms it on almost every\npossible metric.\n\nAdditionally, the make-based system has grew organically over the\nyears, and these days we are spending significant developer resources\non it. The number of bugs that would be fixed by Dune is large [see #8052].\nIt is not a coincidence that few large projects do use `make` anymore,\nbut most have moved to `CMake`, `Ninja`, or some other alternative.\n\nOn this side, Dune provides a well-defined model that seems to git\nCoq's present and future necessities well.\n\n*Blockers*: the single blocker for a merge as of today, apart from the\ndepending PRs, is the lack of native-compute support. This is due to a\ntechnical limitation wrt targets and can be solved in several\ndifferent ways. Also, it is likely that a smooth developer profile is\nnot possible until https://github.com/ocaml/dune/issues/1155 lands in\nDune itself. https://github.com/ocaml/dune/issues/1377 may be\nconvenient for the reference manual but we can have a small workaround\nto generate the install file for now.\n\n*Risk analysis*: it is important to understand the risks that such a\nmove would entail. After Dune support is merged we could always go\nback to a make-based system, however we are very likely to depend on\nDune-specific features that would be hard to replicate. The main risks are:\n\n- lock-in: indeed lock-in risk is significant and Coq's source code\n  may depend on some Dune features. On the other hand, Dune is\n  strongly poised to be the standard build tool for the OCaml platform\n  and ecosystem, and more than 50% of OPAM packages use it.\n\n  It is safe to say that if Dune would become unsupported in the\n  future, there would be more important problems than Coq itself.\n\n- lack of in-house knowledge: indeed, Dune requires some specific\n  training in order to understand its build rules, which may become a\n  problem. This risk is mitigated in 2 different ways and attenuated\n  by an additional consideration: first, Dune rules are fairly simple\n  and declarative and it is reasonable to expect developers get to\n  know them without too much effort. This is one of the reasons for\n  the high adoption numbers in the ecosystem. Second, Dune developers\n  are very reactive and care about Coq, thus it is safe to assume that\n  we would get external help if needed. The additional consideration\n  that may make this less of a problem is that our in-house knowledge\n  of make may be even worse than Dune's. A non-negligible number of\n  developers have expressed discomfort with make and the amount of\n  required knowledge to master make seems way higher than what you\n  need to use Dune.\n\n- lack of flexibility: indeed, Dune is way less flexible than\n  make. Dune only knows how to do well two things: building OCaml\n  executables and libraries. However, that is basically 99% of what\n  building Coq entails; building other parts [documentation or Coq\n  libraries] is fairly straightforward and seem to pose not a problem.\n\n- lack of maturity: indeed, Dune develops fast, it is not free of\n  bugs, and some amount of adaptation is expected from us. This risk\n  can only be mitigated if there is continued developer interest.  In\n  the worst case, Coq could become stuck in a particular Dune version.\n\n- bootstrapping: this is not a problem as witnessed by #8615, Dune can\n  be bootstrapped very easily as it depends only on OCaml and it is\n  designed to do so.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-10-15T18:05:29.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-11-13T18:23:41.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c573f2aaac6af48415301d520e63ea5e8c137ea4"},"pipeline":{"id":36460029,"iid":5223,"project_id":6138686,"sha":"c573f2aaac6af48415301d520e63ea5e8c137ea4","ref":"pr-8729","status":"failed","source":"push","created_at":"2018-11-13T17:23:55.577Z","updated_at":"2018-11-13T18:55:13.916Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36460029"},"web_url":"https://gitlab.com/coq/coq/-/jobs/119976607","artifacts":[{"file_type":"trace","size":22624,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2018-11-20T17:38:09.422Z","tag_list":[]}
{"id":119976605,"status":"success","stage":"build","name":"build:base","ref":"pr-8729","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-13T17:23:55.610Z","started_at":"2018-11-13T17:23:57.457Z","finished_at":"2018-11-13T17:40:54.342Z","duration":1016.884265,"queued_duration":0.631131,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c573f2aaac6af48415301d520e63ea5e8c137ea4","short_id":"c573f2aa","created_at":"2018-11-13T18:23:41.000+01:00","parent_ids":["91a25055bc409ae0f70ff10a82580c7329773b61"],"title":"[dune] Switch to a Dune-based build system.","message":"[dune] Switch to a Dune-based build system.\n\nOver the last months we have added support to build Coq with Dune, I\nfeel we have reached a point where we can start to discuss if we\nshould replace the make-based system with a Dune-based one.\n\nThe *main rationale* for the switch is that maintaining two build\nsystems is hard, and Dune seems superior to make in almost every\naspect.\n\nIndeed, I think it is going to be hard to find technical arguments to\ndefend the make-base system. Dune outperforms it on almost every\npossible metric.\n\nAdditionally, the make-based system has grew organically over the\nyears, and these days we are spending significant developer resources\non it. The number of bugs that would be fixed by Dune is large [see #8052].\nIt is not a coincidence that few large projects do use `make` anymore,\nbut most have moved to `CMake`, `Ninja`, or some other alternative.\n\nOn this side, Dune provides a well-defined model that seems to git\nCoq's present and future necessities well.\n\n*Blockers*: the single blocker for a merge as of today, apart from the\ndepending PRs, is the lack of native-compute support. This is due to a\ntechnical limitation wrt targets and can be solved in several\ndifferent ways. Also, it is likely that a smooth developer profile is\nnot possible until https://github.com/ocaml/dune/issues/1155 lands in\nDune itself. https://github.com/ocaml/dune/issues/1377 may be\nconvenient for the reference manual but we can have a small workaround\nto generate the install file for now.\n\n*Risk analysis*: it is important to understand the risks that such a\nmove would entail. After Dune support is merged we could always go\nback to a make-based system, however we are very likely to depend on\nDune-specific features that would be hard to replicate. The main risks are:\n\n- lock-in: indeed lock-in risk is significant and Coq's source code\n  may depend on some Dune features. On the other hand, Dune is\n  strongly poised to be the standard build tool for the OCaml platform\n  and ecosystem, and more than 50% of OPAM packages use it.\n\n  It is safe to say that if Dune would become unsupported in the\n  future, there would be more important problems than Coq itself.\n\n- lack of in-house knowledge: indeed, Dune requires some specific\n  training in order to understand its build rules, which may become a\n  problem. This risk is mitigated in 2 different ways and attenuated\n  by an additional consideration: first, Dune rules are fairly simple\n  and declarative and it is reasonable to expect developers get to\n  know them without too much effort. This is one of the reasons for\n  the high adoption numbers in the ecosystem. Second, Dune developers\n  are very reactive and care about Coq, thus it is safe to assume that\n  we would get external help if needed. The additional consideration\n  that may make this less of a problem is that our in-house knowledge\n  of make may be even worse than Dune's. A non-negligible number of\n  developers have expressed discomfort with make and the amount of\n  required knowledge to master make seems way higher than what you\n  need to use Dune.\n\n- lack of flexibility: indeed, Dune is way less flexible than\n  make. Dune only knows how to do well two things: building OCaml\n  executables and libraries. However, that is basically 99% of what\n  building Coq entails; building other parts [documentation or Coq\n  libraries] is fairly straightforward and seem to pose not a problem.\n\n- lack of maturity: indeed, Dune develops fast, it is not free of\n  bugs, and some amount of adaptation is expected from us. This risk\n  can only be mitigated if there is continued developer interest.  In\n  the worst case, Coq could become stuck in a particular Dune version.\n\n- bootstrapping: this is not a problem as witnessed by #8615, Dune can\n  be bootstrapped very easily as it depends only on OCaml and it is\n  designed to do so.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-10-15T18:05:29.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-11-13T18:23:41.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c573f2aaac6af48415301d520e63ea5e8c137ea4"},"pipeline":{"id":36460029,"iid":5223,"project_id":6138686,"sha":"c573f2aaac6af48415301d520e63ea5e8c137ea4","ref":"pr-8729","status":"failed","source":"push","created_at":"2018-11-13T17:23:55.577Z","updated_at":"2018-11-13T18:55:13.916Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36460029"},"web_url":"https://gitlab.com/coq/coq/-/jobs/119976605","artifacts":[{"file_type":"trace","size":23608,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2018-11-20T17:40:50.045Z","tag_list":[]}
{"id":119976604,"status":"success","stage":"build","name":"build:make:base","ref":"pr-8729","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-13T17:23:55.586Z","started_at":"2018-11-13T17:23:57.236Z","finished_at":"2018-11-13T17:40:29.051Z","duration":991.815682,"queued_duration":0.385825,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c573f2aaac6af48415301d520e63ea5e8c137ea4","short_id":"c573f2aa","created_at":"2018-11-13T18:23:41.000+01:00","parent_ids":["91a25055bc409ae0f70ff10a82580c7329773b61"],"title":"[dune] Switch to a Dune-based build system.","message":"[dune] Switch to a Dune-based build system.\n\nOver the last months we have added support to build Coq with Dune, I\nfeel we have reached a point where we can start to discuss if we\nshould replace the make-based system with a Dune-based one.\n\nThe *main rationale* for the switch is that maintaining two build\nsystems is hard, and Dune seems superior to make in almost every\naspect.\n\nIndeed, I think it is going to be hard to find technical arguments to\ndefend the make-base system. Dune outperforms it on almost every\npossible metric.\n\nAdditionally, the make-based system has grew organically over the\nyears, and these days we are spending significant developer resources\non it. The number of bugs that would be fixed by Dune is large [see #8052].\nIt is not a coincidence that few large projects do use `make` anymore,\nbut most have moved to `CMake`, `Ninja`, or some other alternative.\n\nOn this side, Dune provides a well-defined model that seems to git\nCoq's present and future necessities well.\n\n*Blockers*: the single blocker for a merge as of today, apart from the\ndepending PRs, is the lack of native-compute support. This is due to a\ntechnical limitation wrt targets and can be solved in several\ndifferent ways. Also, it is likely that a smooth developer profile is\nnot possible until https://github.com/ocaml/dune/issues/1155 lands in\nDune itself. https://github.com/ocaml/dune/issues/1377 may be\nconvenient for the reference manual but we can have a small workaround\nto generate the install file for now.\n\n*Risk analysis*: it is important to understand the risks that such a\nmove would entail. After Dune support is merged we could always go\nback to a make-based system, however we are very likely to depend on\nDune-specific features that would be hard to replicate. The main risks are:\n\n- lock-in: indeed lock-in risk is significant and Coq's source code\n  may depend on some Dune features. On the other hand, Dune is\n  strongly poised to be the standard build tool for the OCaml platform\n  and ecosystem, and more than 50% of OPAM packages use it.\n\n  It is safe to say that if Dune would become unsupported in the\n  future, there would be more important problems than Coq itself.\n\n- lack of in-house knowledge: indeed, Dune requires some specific\n  training in order to understand its build rules, which may become a\n  problem. This risk is mitigated in 2 different ways and attenuated\n  by an additional consideration: first, Dune rules are fairly simple\n  and declarative and it is reasonable to expect developers get to\n  know them without too much effort. This is one of the reasons for\n  the high adoption numbers in the ecosystem. Second, Dune developers\n  are very reactive and care about Coq, thus it is safe to assume that\n  we would get external help if needed. The additional consideration\n  that may make this less of a problem is that our in-house knowledge\n  of make may be even worse than Dune's. A non-negligible number of\n  developers have expressed discomfort with make and the amount of\n  required knowledge to master make seems way higher than what you\n  need to use Dune.\n\n- lack of flexibility: indeed, Dune is way less flexible than\n  make. Dune only knows how to do well two things: building OCaml\n  executables and libraries. However, that is basically 99% of what\n  building Coq entails; building other parts [documentation or Coq\n  libraries] is fairly straightforward and seem to pose not a problem.\n\n- lack of maturity: indeed, Dune develops fast, it is not free of\n  bugs, and some amount of adaptation is expected from us. This risk\n  can only be mitigated if there is continued developer interest.  In\n  the worst case, Coq could become stuck in a particular Dune version.\n\n- bootstrapping: this is not a problem as witnessed by #8615, Dune can\n  be bootstrapped very easily as it depends only on OCaml and it is\n  designed to do so.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-10-15T18:05:29.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-11-13T18:23:41.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c573f2aaac6af48415301d520e63ea5e8c137ea4"},"pipeline":{"id":36460029,"iid":5223,"project_id":6138686,"sha":"c573f2aaac6af48415301d520e63ea5e8c137ea4","ref":"pr-8729","status":"failed","source":"push","created_at":"2018-11-13T17:23:55.577Z","updated_at":"2018-11-13T18:55:13.916Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36460029"},"web_url":"https://gitlab.com/coq/coq/-/jobs/119976604","artifacts":[{"file_type":"trace","size":237718,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2018-11-20T17:40:23.655Z","tag_list":[]}
