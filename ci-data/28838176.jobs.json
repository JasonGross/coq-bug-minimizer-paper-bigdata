{"id":92633026,"status":"success","stage":"test","name":"ci-vst","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-08-28T09:08:23.579Z","started_at":"2018-08-28T09:08:24.242Z","finished_at":"2018-08-28T10:14:22.286Z","duration":3958.044346,"queued_duration":0.638723,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"774286b6837d04931719fcf74eb666e64952b0a8","short_id":"774286b6","created_at":"2018-08-28T10:33:30.000+02:00","parent_ids":["d0901e424a2ade85fb070eca83384e61070eec5b"],"title":"[build] Preliminary support for building with `dune`.","message":"[build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides automatic generation of\n`version.ml`, `.merlin`, `META`, `opam`, API documentation; install\nmanagement; easy integration with external libraries, test runners,\nand modular builds.\n\nIn particular, Dune uniformly handles components regardless whether\nthey live in, or out-of-tree. This greatly simplifies cases where a\nplugin [or CoqIde] is checked out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can thus be used as a\nmore flexible `coq_makefile` replacement.\n\nFor now we provide experimental support for a Dune build. In order to\nbuild Coq + the standard library with Dune type:\n\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_ by default. This\npatch provides a `dune` library specification for each Coq source\ncomponent, mirroring the existing `META` setup.\n\nDune doesn't support custom build rules [yet], so in order to properly\nbuild the `.vo` files, we provide a small helper script\n`tools/coq_dune.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files. This tool is akin to `coq_makefile`.\n\nDue to this pitfall, the build process has to proceed in three stages:\n1) build `coqdep` and `coq_dune`; 2) generate `dune` files for\n`theories` and `plugins`; 3) perform a regular build, now that all\ntargets are in scope.\n\nThe current, make-based build system is unmodified by this PR and kept\nas the default option.\n\nThe main TODOs are written down in issue #xxxx\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nconfigure: Implement dune / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for dune.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n```\n$ /usr/bin/time make DUNEOPT=\"-j 1000\" -f Makefile.dune states\n59.50user 18.81system 0:29.83elapsed 262%CPU (0avgtext+0avgdata 302996maxresident)k\n0inputs+646632outputs (0major+4893811minor)pagefaults 0swaps\n\n$ /usr/bin/time sh -c \"./configure -local -native-compiler no && make -j states\"\n88.21user 23.65system 0:32.96elapsed 339%CPU (0avgtext+0avgdata 304992maxresident)k\n0inputs+1051680outputs (0major+5300680minor)pagefaults 0swaps\n```\n\n- 4857\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-08-28T10:33:30.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/774286b6837d04931719fcf74eb666e64952b0a8"},"pipeline":{"id":28838176,"iid":2717,"project_id":6138686,"sha":"774286b6837d04931719fcf74eb666e64952b0a8","ref":"pr-6857","status":"success","source":"push","created_at":"2018-08-28T08:34:10.297Z","updated_at":"2018-08-28T10:50:01.475Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/28838176"},"web_url":"https://gitlab.com/coq/coq/-/jobs/92633026","artifacts":[{"file_type":"trace","size":150139,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":92616176,"status":"success","stage":"test","name":"ci-unimath","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-08-28T08:34:11.234Z","started_at":"2018-08-28T09:02:35.680Z","finished_at":"2018-08-28T09:29:22.891Z","duration":1607.210894,"queued_duration":1.26615,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"774286b6837d04931719fcf74eb666e64952b0a8","short_id":"774286b6","created_at":"2018-08-28T10:33:30.000+02:00","parent_ids":["d0901e424a2ade85fb070eca83384e61070eec5b"],"title":"[build] Preliminary support for building with `dune`.","message":"[build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides automatic generation of\n`version.ml`, `.merlin`, `META`, `opam`, API documentation; install\nmanagement; easy integration with external libraries, test runners,\nand modular builds.\n\nIn particular, Dune uniformly handles components regardless whether\nthey live in, or out-of-tree. This greatly simplifies cases where a\nplugin [or CoqIde] is checked out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can thus be used as a\nmore flexible `coq_makefile` replacement.\n\nFor now we provide experimental support for a Dune build. In order to\nbuild Coq + the standard library with Dune type:\n\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_ by default. This\npatch provides a `dune` library specification for each Coq source\ncomponent, mirroring the existing `META` setup.\n\nDune doesn't support custom build rules [yet], so in order to properly\nbuild the `.vo` files, we provide a small helper script\n`tools/coq_dune.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files. This tool is akin to `coq_makefile`.\n\nDue to this pitfall, the build process has to proceed in three stages:\n1) build `coqdep` and `coq_dune`; 2) generate `dune` files for\n`theories` and `plugins`; 3) perform a regular build, now that all\ntargets are in scope.\n\nThe current, make-based build system is unmodified by this PR and kept\nas the default option.\n\nThe main TODOs are written down in issue #xxxx\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nconfigure: Implement dune / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for dune.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n```\n$ /usr/bin/time make DUNEOPT=\"-j 1000\" -f Makefile.dune states\n59.50user 18.81system 0:29.83elapsed 262%CPU (0avgtext+0avgdata 302996maxresident)k\n0inputs+646632outputs (0major+4893811minor)pagefaults 0swaps\n\n$ /usr/bin/time sh -c \"./configure -local -native-compiler no && make -j states\"\n88.21user 23.65system 0:32.96elapsed 339%CPU (0avgtext+0avgdata 304992maxresident)k\n0inputs+1051680outputs (0major+5300680minor)pagefaults 0swaps\n```\n\n- 4857\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-08-28T10:33:30.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/774286b6837d04931719fcf74eb666e64952b0a8"},"pipeline":{"id":28838176,"iid":2717,"project_id":6138686,"sha":"774286b6837d04931719fcf74eb666e64952b0a8","ref":"pr-6857","status":"success","source":"push","created_at":"2018-08-28T08:34:10.297Z","updated_at":"2018-08-28T10:50:01.475Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/28838176"},"web_url":"https://gitlab.com/coq/coq/-/jobs/92616176","artifacts":[{"file_type":"trace","size":124253,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":92616174,"status":"success","stage":"test","name":"ci-sf","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-08-28T08:34:11.211Z","started_at":"2018-08-28T09:02:37.511Z","finished_at":"2018-08-28T09:07:18.747Z","duration":281.236723,"queued_duration":1.613543,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"774286b6837d04931719fcf74eb666e64952b0a8","short_id":"774286b6","created_at":"2018-08-28T10:33:30.000+02:00","parent_ids":["d0901e424a2ade85fb070eca83384e61070eec5b"],"title":"[build] Preliminary support for building with `dune`.","message":"[build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides automatic generation of\n`version.ml`, `.merlin`, `META`, `opam`, API documentation; install\nmanagement; easy integration with external libraries, test runners,\nand modular builds.\n\nIn particular, Dune uniformly handles components regardless whether\nthey live in, or out-of-tree. This greatly simplifies cases where a\nplugin [or CoqIde] is checked out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can thus be used as a\nmore flexible `coq_makefile` replacement.\n\nFor now we provide experimental support for a Dune build. In order to\nbuild Coq + the standard library with Dune type:\n\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_ by default. This\npatch provides a `dune` library specification for each Coq source\ncomponent, mirroring the existing `META` setup.\n\nDune doesn't support custom build rules [yet], so in order to properly\nbuild the `.vo` files, we provide a small helper script\n`tools/coq_dune.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files. This tool is akin to `coq_makefile`.\n\nDue to this pitfall, the build process has to proceed in three stages:\n1) build `coqdep` and `coq_dune`; 2) generate `dune` files for\n`theories` and `plugins`; 3) perform a regular build, now that all\ntargets are in scope.\n\nThe current, make-based build system is unmodified by this PR and kept\nas the default option.\n\nThe main TODOs are written down in issue #xxxx\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nconfigure: Implement dune / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for dune.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n```\n$ /usr/bin/time make DUNEOPT=\"-j 1000\" -f Makefile.dune states\n59.50user 18.81system 0:29.83elapsed 262%CPU (0avgtext+0avgdata 302996maxresident)k\n0inputs+646632outputs (0major+4893811minor)pagefaults 0swaps\n\n$ /usr/bin/time sh -c \"./configure -local -native-compiler no && make -j states\"\n88.21user 23.65system 0:32.96elapsed 339%CPU (0avgtext+0avgdata 304992maxresident)k\n0inputs+1051680outputs (0major+5300680minor)pagefaults 0swaps\n```\n\n- 4857\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-08-28T10:33:30.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/774286b6837d04931719fcf74eb666e64952b0a8"},"pipeline":{"id":28838176,"iid":2717,"project_id":6138686,"sha":"774286b6837d04931719fcf74eb666e64952b0a8","ref":"pr-6857","status":"success","source":"push","created_at":"2018-08-28T08:34:10.297Z","updated_at":"2018-08-28T10:50:01.475Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/28838176"},"web_url":"https://gitlab.com/coq/coq/-/jobs/92616174","artifacts":[{"file_type":"trace","size":270368,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":92616173,"status":"success","stage":"test","name":"ci-quickchick","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-08-28T08:34:11.190Z","started_at":"2018-08-28T09:02:38.041Z","finished_at":"2018-08-28T09:07:42.668Z","duration":304.626515,"queued_duration":0.721367,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"774286b6837d04931719fcf74eb666e64952b0a8","short_id":"774286b6","created_at":"2018-08-28T10:33:30.000+02:00","parent_ids":["d0901e424a2ade85fb070eca83384e61070eec5b"],"title":"[build] Preliminary support for building with `dune`.","message":"[build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides automatic generation of\n`version.ml`, `.merlin`, `META`, `opam`, API documentation; install\nmanagement; easy integration with external libraries, test runners,\nand modular builds.\n\nIn particular, Dune uniformly handles components regardless whether\nthey live in, or out-of-tree. This greatly simplifies cases where a\nplugin [or CoqIde] is checked out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can thus be used as a\nmore flexible `coq_makefile` replacement.\n\nFor now we provide experimental support for a Dune build. In order to\nbuild Coq + the standard library with Dune type:\n\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_ by default. This\npatch provides a `dune` library specification for each Coq source\ncomponent, mirroring the existing `META` setup.\n\nDune doesn't support custom build rules [yet], so in order to properly\nbuild the `.vo` files, we provide a small helper script\n`tools/coq_dune.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files. This tool is akin to `coq_makefile`.\n\nDue to this pitfall, the build process has to proceed in three stages:\n1) build `coqdep` and `coq_dune`; 2) generate `dune` files for\n`theories` and `plugins`; 3) perform a regular build, now that all\ntargets are in scope.\n\nThe current, make-based build system is unmodified by this PR and kept\nas the default option.\n\nThe main TODOs are written down in issue #xxxx\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nconfigure: Implement dune / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for dune.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n```\n$ /usr/bin/time make DUNEOPT=\"-j 1000\" -f Makefile.dune states\n59.50user 18.81system 0:29.83elapsed 262%CPU (0avgtext+0avgdata 302996maxresident)k\n0inputs+646632outputs (0major+4893811minor)pagefaults 0swaps\n\n$ /usr/bin/time sh -c \"./configure -local -native-compiler no && make -j states\"\n88.21user 23.65system 0:32.96elapsed 339%CPU (0avgtext+0avgdata 304992maxresident)k\n0inputs+1051680outputs (0major+5300680minor)pagefaults 0swaps\n```\n\n- 4857\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-08-28T10:33:30.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/774286b6837d04931719fcf74eb666e64952b0a8"},"pipeline":{"id":28838176,"iid":2717,"project_id":6138686,"sha":"774286b6837d04931719fcf74eb666e64952b0a8","ref":"pr-6857","status":"success","source":"push","created_at":"2018-08-28T08:34:10.297Z","updated_at":"2018-08-28T10:50:01.475Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/28838176"},"web_url":"https://gitlab.com/coq/coq/-/jobs/92616173","artifacts":[{"file_type":"trace","size":193184,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":92616171,"status":"success","stage":"test","name":"ci-pidetop","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-08-28T08:34:11.170Z","started_at":"2018-08-28T09:02:39.237Z","finished_at":"2018-08-28T09:06:01.205Z","duration":201.968696,"queued_duration":1.053361,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"774286b6837d04931719fcf74eb666e64952b0a8","short_id":"774286b6","created_at":"2018-08-28T10:33:30.000+02:00","parent_ids":["d0901e424a2ade85fb070eca83384e61070eec5b"],"title":"[build] Preliminary support for building with `dune`.","message":"[build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides automatic generation of\n`version.ml`, `.merlin`, `META`, `opam`, API documentation; install\nmanagement; easy integration with external libraries, test runners,\nand modular builds.\n\nIn particular, Dune uniformly handles components regardless whether\nthey live in, or out-of-tree. This greatly simplifies cases where a\nplugin [or CoqIde] is checked out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can thus be used as a\nmore flexible `coq_makefile` replacement.\n\nFor now we provide experimental support for a Dune build. In order to\nbuild Coq + the standard library with Dune type:\n\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_ by default. This\npatch provides a `dune` library specification for each Coq source\ncomponent, mirroring the existing `META` setup.\n\nDune doesn't support custom build rules [yet], so in order to properly\nbuild the `.vo` files, we provide a small helper script\n`tools/coq_dune.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files. This tool is akin to `coq_makefile`.\n\nDue to this pitfall, the build process has to proceed in three stages:\n1) build `coqdep` and `coq_dune`; 2) generate `dune` files for\n`theories` and `plugins`; 3) perform a regular build, now that all\ntargets are in scope.\n\nThe current, make-based build system is unmodified by this PR and kept\nas the default option.\n\nThe main TODOs are written down in issue #xxxx\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nconfigure: Implement dune / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for dune.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n```\n$ /usr/bin/time make DUNEOPT=\"-j 1000\" -f Makefile.dune states\n59.50user 18.81system 0:29.83elapsed 262%CPU (0avgtext+0avgdata 302996maxresident)k\n0inputs+646632outputs (0major+4893811minor)pagefaults 0swaps\n\n$ /usr/bin/time sh -c \"./configure -local -native-compiler no && make -j states\"\n88.21user 23.65system 0:32.96elapsed 339%CPU (0avgtext+0avgdata 304992maxresident)k\n0inputs+1051680outputs (0major+5300680minor)pagefaults 0swaps\n```\n\n- 4857\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-08-28T10:33:30.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/774286b6837d04931719fcf74eb666e64952b0a8"},"pipeline":{"id":28838176,"iid":2717,"project_id":6138686,"sha":"774286b6837d04931719fcf74eb666e64952b0a8","ref":"pr-6857","status":"success","source":"push","created_at":"2018-08-28T08:34:10.297Z","updated_at":"2018-08-28T10:50:01.475Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/28838176"},"web_url":"https://gitlab.com/coq/coq/-/jobs/92616171","artifacts":[{"file_type":"trace","size":29887,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":92616169,"status":"success","stage":"test","name":"ci-mtac2","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-08-28T08:34:11.147Z","started_at":"2018-08-28T09:02:40.022Z","finished_at":"2018-08-28T09:06:58.183Z","duration":258.160652,"queued_duration":0.748396,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"774286b6837d04931719fcf74eb666e64952b0a8","short_id":"774286b6","created_at":"2018-08-28T10:33:30.000+02:00","parent_ids":["d0901e424a2ade85fb070eca83384e61070eec5b"],"title":"[build] Preliminary support for building with `dune`.","message":"[build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides automatic generation of\n`version.ml`, `.merlin`, `META`, `opam`, API documentation; install\nmanagement; easy integration with external libraries, test runners,\nand modular builds.\n\nIn particular, Dune uniformly handles components regardless whether\nthey live in, or out-of-tree. This greatly simplifies cases where a\nplugin [or CoqIde] is checked out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can thus be used as a\nmore flexible `coq_makefile` replacement.\n\nFor now we provide experimental support for a Dune build. In order to\nbuild Coq + the standard library with Dune type:\n\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_ by default. This\npatch provides a `dune` library specification for each Coq source\ncomponent, mirroring the existing `META` setup.\n\nDune doesn't support custom build rules [yet], so in order to properly\nbuild the `.vo` files, we provide a small helper script\n`tools/coq_dune.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files. This tool is akin to `coq_makefile`.\n\nDue to this pitfall, the build process has to proceed in three stages:\n1) build `coqdep` and `coq_dune`; 2) generate `dune` files for\n`theories` and `plugins`; 3) perform a regular build, now that all\ntargets are in scope.\n\nThe current, make-based build system is unmodified by this PR and kept\nas the default option.\n\nThe main TODOs are written down in issue #xxxx\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nconfigure: Implement dune / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for dune.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n```\n$ /usr/bin/time make DUNEOPT=\"-j 1000\" -f Makefile.dune states\n59.50user 18.81system 0:29.83elapsed 262%CPU (0avgtext+0avgdata 302996maxresident)k\n0inputs+646632outputs (0major+4893811minor)pagefaults 0swaps\n\n$ /usr/bin/time sh -c \"./configure -local -native-compiler no && make -j states\"\n88.21user 23.65system 0:32.96elapsed 339%CPU (0avgtext+0avgdata 304992maxresident)k\n0inputs+1051680outputs (0major+5300680minor)pagefaults 0swaps\n```\n\n- 4857\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-08-28T10:33:30.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/774286b6837d04931719fcf74eb666e64952b0a8"},"pipeline":{"id":28838176,"iid":2717,"project_id":6138686,"sha":"774286b6837d04931719fcf74eb666e64952b0a8","ref":"pr-6857","status":"success","source":"push","created_at":"2018-08-28T08:34:10.297Z","updated_at":"2018-08-28T10:50:01.475Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/28838176"},"web_url":"https://gitlab.com/coq/coq/-/jobs/92616169","artifacts":[{"file_type":"trace","size":87981,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":92616167,"status":"success","stage":"test","name":"ci-math-comp","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-08-28T08:34:11.126Z","started_at":"2018-08-28T09:02:40.821Z","finished_at":"2018-08-28T09:54:03.661Z","duration":3082.839547,"queued_duration":0.708979,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"774286b6837d04931719fcf74eb666e64952b0a8","short_id":"774286b6","created_at":"2018-08-28T10:33:30.000+02:00","parent_ids":["d0901e424a2ade85fb070eca83384e61070eec5b"],"title":"[build] Preliminary support for building with `dune`.","message":"[build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides automatic generation of\n`version.ml`, `.merlin`, `META`, `opam`, API documentation; install\nmanagement; easy integration with external libraries, test runners,\nand modular builds.\n\nIn particular, Dune uniformly handles components regardless whether\nthey live in, or out-of-tree. This greatly simplifies cases where a\nplugin [or CoqIde] is checked out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can thus be used as a\nmore flexible `coq_makefile` replacement.\n\nFor now we provide experimental support for a Dune build. In order to\nbuild Coq + the standard library with Dune type:\n\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_ by default. This\npatch provides a `dune` library specification for each Coq source\ncomponent, mirroring the existing `META` setup.\n\nDune doesn't support custom build rules [yet], so in order to properly\nbuild the `.vo` files, we provide a small helper script\n`tools/coq_dune.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files. This tool is akin to `coq_makefile`.\n\nDue to this pitfall, the build process has to proceed in three stages:\n1) build `coqdep` and `coq_dune`; 2) generate `dune` files for\n`theories` and `plugins`; 3) perform a regular build, now that all\ntargets are in scope.\n\nThe current, make-based build system is unmodified by this PR and kept\nas the default option.\n\nThe main TODOs are written down in issue #xxxx\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nconfigure: Implement dune / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for dune.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n```\n$ /usr/bin/time make DUNEOPT=\"-j 1000\" -f Makefile.dune states\n59.50user 18.81system 0:29.83elapsed 262%CPU (0avgtext+0avgdata 302996maxresident)k\n0inputs+646632outputs (0major+4893811minor)pagefaults 0swaps\n\n$ /usr/bin/time sh -c \"./configure -local -native-compiler no && make -j states\"\n88.21user 23.65system 0:32.96elapsed 339%CPU (0avgtext+0avgdata 304992maxresident)k\n0inputs+1051680outputs (0major+5300680minor)pagefaults 0swaps\n```\n\n- 4857\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-08-28T10:33:30.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/774286b6837d04931719fcf74eb666e64952b0a8"},"pipeline":{"id":28838176,"iid":2717,"project_id":6138686,"sha":"774286b6837d04931719fcf74eb666e64952b0a8","ref":"pr-6857","status":"success","source":"push","created_at":"2018-08-28T08:34:10.297Z","updated_at":"2018-08-28T10:50:01.475Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/28838176"},"web_url":"https://gitlab.com/coq/coq/-/jobs/92616167","artifacts":[{"file_type":"trace","size":312935,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":92616165,"status":"success","stage":"test","name":"ci-ltac2","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-08-28T08:34:11.105Z","started_at":"2018-08-28T09:02:41.638Z","finished_at":"2018-08-28T09:06:21.431Z","duration":219.792535,"queued_duration":0.666319,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"774286b6837d04931719fcf74eb666e64952b0a8","short_id":"774286b6","created_at":"2018-08-28T10:33:30.000+02:00","parent_ids":["d0901e424a2ade85fb070eca83384e61070eec5b"],"title":"[build] Preliminary support for building with `dune`.","message":"[build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides automatic generation of\n`version.ml`, `.merlin`, `META`, `opam`, API documentation; install\nmanagement; easy integration with external libraries, test runners,\nand modular builds.\n\nIn particular, Dune uniformly handles components regardless whether\nthey live in, or out-of-tree. This greatly simplifies cases where a\nplugin [or CoqIde] is checked out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can thus be used as a\nmore flexible `coq_makefile` replacement.\n\nFor now we provide experimental support for a Dune build. In order to\nbuild Coq + the standard library with Dune type:\n\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_ by default. This\npatch provides a `dune` library specification for each Coq source\ncomponent, mirroring the existing `META` setup.\n\nDune doesn't support custom build rules [yet], so in order to properly\nbuild the `.vo` files, we provide a small helper script\n`tools/coq_dune.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files. This tool is akin to `coq_makefile`.\n\nDue to this pitfall, the build process has to proceed in three stages:\n1) build `coqdep` and `coq_dune`; 2) generate `dune` files for\n`theories` and `plugins`; 3) perform a regular build, now that all\ntargets are in scope.\n\nThe current, make-based build system is unmodified by this PR and kept\nas the default option.\n\nThe main TODOs are written down in issue #xxxx\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nconfigure: Implement dune / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for dune.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n```\n$ /usr/bin/time make DUNEOPT=\"-j 1000\" -f Makefile.dune states\n59.50user 18.81system 0:29.83elapsed 262%CPU (0avgtext+0avgdata 302996maxresident)k\n0inputs+646632outputs (0major+4893811minor)pagefaults 0swaps\n\n$ /usr/bin/time sh -c \"./configure -local -native-compiler no && make -j states\"\n88.21user 23.65system 0:32.96elapsed 339%CPU (0avgtext+0avgdata 304992maxresident)k\n0inputs+1051680outputs (0major+5300680minor)pagefaults 0swaps\n```\n\n- 4857\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-08-28T10:33:30.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/774286b6837d04931719fcf74eb666e64952b0a8"},"pipeline":{"id":28838176,"iid":2717,"project_id":6138686,"sha":"774286b6837d04931719fcf74eb666e64952b0a8","ref":"pr-6857","status":"success","source":"push","created_at":"2018-08-28T08:34:10.297Z","updated_at":"2018-08-28T10:50:01.475Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/28838176"},"web_url":"https://gitlab.com/coq/coq/-/jobs/92616165","artifacts":[{"file_type":"trace","size":40893,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":92616164,"status":"success","stage":"test","name":"ci-iris-lambda-rust","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-08-28T08:34:11.082Z","started_at":"2018-08-28T09:02:42.760Z","finished_at":"2018-08-28T10:13:18.564Z","duration":4235.803228,"queued_duration":1.039854,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"774286b6837d04931719fcf74eb666e64952b0a8","short_id":"774286b6","created_at":"2018-08-28T10:33:30.000+02:00","parent_ids":["d0901e424a2ade85fb070eca83384e61070eec5b"],"title":"[build] Preliminary support for building with `dune`.","message":"[build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides automatic generation of\n`version.ml`, `.merlin`, `META`, `opam`, API documentation; install\nmanagement; easy integration with external libraries, test runners,\nand modular builds.\n\nIn particular, Dune uniformly handles components regardless whether\nthey live in, or out-of-tree. This greatly simplifies cases where a\nplugin [or CoqIde] is checked out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can thus be used as a\nmore flexible `coq_makefile` replacement.\n\nFor now we provide experimental support for a Dune build. In order to\nbuild Coq + the standard library with Dune type:\n\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_ by default. This\npatch provides a `dune` library specification for each Coq source\ncomponent, mirroring the existing `META` setup.\n\nDune doesn't support custom build rules [yet], so in order to properly\nbuild the `.vo` files, we provide a small helper script\n`tools/coq_dune.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files. This tool is akin to `coq_makefile`.\n\nDue to this pitfall, the build process has to proceed in three stages:\n1) build `coqdep` and `coq_dune`; 2) generate `dune` files for\n`theories` and `plugins`; 3) perform a regular build, now that all\ntargets are in scope.\n\nThe current, make-based build system is unmodified by this PR and kept\nas the default option.\n\nThe main TODOs are written down in issue #xxxx\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nconfigure: Implement dune / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for dune.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n```\n$ /usr/bin/time make DUNEOPT=\"-j 1000\" -f Makefile.dune states\n59.50user 18.81system 0:29.83elapsed 262%CPU (0avgtext+0avgdata 302996maxresident)k\n0inputs+646632outputs (0major+4893811minor)pagefaults 0swaps\n\n$ /usr/bin/time sh -c \"./configure -local -native-compiler no && make -j states\"\n88.21user 23.65system 0:32.96elapsed 339%CPU (0avgtext+0avgdata 304992maxresident)k\n0inputs+1051680outputs (0major+5300680minor)pagefaults 0swaps\n```\n\n- 4857\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-08-28T10:33:30.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/774286b6837d04931719fcf74eb666e64952b0a8"},"pipeline":{"id":28838176,"iid":2717,"project_id":6138686,"sha":"774286b6837d04931719fcf74eb666e64952b0a8","ref":"pr-6857","status":"success","source":"push","created_at":"2018-08-28T08:34:10.297Z","updated_at":"2018-08-28T10:50:01.475Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/28838176"},"web_url":"https://gitlab.com/coq/coq/-/jobs/92616164","artifacts":[{"file_type":"trace","size":216455,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":92616163,"status":"success","stage":"test","name":"ci-hott","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-08-28T08:34:11.060Z","started_at":"2018-08-28T09:02:43.746Z","finished_at":"2018-08-28T09:16:57.975Z","duration":854.229015,"queued_duration":1.056228,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"774286b6837d04931719fcf74eb666e64952b0a8","short_id":"774286b6","created_at":"2018-08-28T10:33:30.000+02:00","parent_ids":["d0901e424a2ade85fb070eca83384e61070eec5b"],"title":"[build] Preliminary support for building with `dune`.","message":"[build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides automatic generation of\n`version.ml`, `.merlin`, `META`, `opam`, API documentation; install\nmanagement; easy integration with external libraries, test runners,\nand modular builds.\n\nIn particular, Dune uniformly handles components regardless whether\nthey live in, or out-of-tree. This greatly simplifies cases where a\nplugin [or CoqIde] is checked out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can thus be used as a\nmore flexible `coq_makefile` replacement.\n\nFor now we provide experimental support for a Dune build. In order to\nbuild Coq + the standard library with Dune type:\n\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_ by default. This\npatch provides a `dune` library specification for each Coq source\ncomponent, mirroring the existing `META` setup.\n\nDune doesn't support custom build rules [yet], so in order to properly\nbuild the `.vo` files, we provide a small helper script\n`tools/coq_dune.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files. This tool is akin to `coq_makefile`.\n\nDue to this pitfall, the build process has to proceed in three stages:\n1) build `coqdep` and `coq_dune`; 2) generate `dune` files for\n`theories` and `plugins`; 3) perform a regular build, now that all\ntargets are in scope.\n\nThe current, make-based build system is unmodified by this PR and kept\nas the default option.\n\nThe main TODOs are written down in issue #xxxx\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nconfigure: Implement dune / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for dune.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n```\n$ /usr/bin/time make DUNEOPT=\"-j 1000\" -f Makefile.dune states\n59.50user 18.81system 0:29.83elapsed 262%CPU (0avgtext+0avgdata 302996maxresident)k\n0inputs+646632outputs (0major+4893811minor)pagefaults 0swaps\n\n$ /usr/bin/time sh -c \"./configure -local -native-compiler no && make -j states\"\n88.21user 23.65system 0:32.96elapsed 339%CPU (0avgtext+0avgdata 304992maxresident)k\n0inputs+1051680outputs (0major+5300680minor)pagefaults 0swaps\n```\n\n- 4857\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-08-28T10:33:30.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/774286b6837d04931719fcf74eb666e64952b0a8"},"pipeline":{"id":28838176,"iid":2717,"project_id":6138686,"sha":"774286b6837d04931719fcf74eb666e64952b0a8","ref":"pr-6857","status":"success","source":"push","created_at":"2018-08-28T08:34:10.297Z","updated_at":"2018-08-28T10:50:01.475Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/28838176"},"web_url":"https://gitlab.com/coq/coq/-/jobs/92616163","artifacts":[{"file_type":"trace","size":66794,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":92616161,"status":"success","stage":"test","name":"ci-geocoq","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-08-28T08:34:11.039Z","started_at":"2018-08-28T09:02:45.161Z","finished_at":"2018-08-28T10:06:44.268Z","duration":3839.107401,"queued_duration":1.482287,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"774286b6837d04931719fcf74eb666e64952b0a8","short_id":"774286b6","created_at":"2018-08-28T10:33:30.000+02:00","parent_ids":["d0901e424a2ade85fb070eca83384e61070eec5b"],"title":"[build] Preliminary support for building with `dune`.","message":"[build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides automatic generation of\n`version.ml`, `.merlin`, `META`, `opam`, API documentation; install\nmanagement; easy integration with external libraries, test runners,\nand modular builds.\n\nIn particular, Dune uniformly handles components regardless whether\nthey live in, or out-of-tree. This greatly simplifies cases where a\nplugin [or CoqIde] is checked out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can thus be used as a\nmore flexible `coq_makefile` replacement.\n\nFor now we provide experimental support for a Dune build. In order to\nbuild Coq + the standard library with Dune type:\n\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_ by default. This\npatch provides a `dune` library specification for each Coq source\ncomponent, mirroring the existing `META` setup.\n\nDune doesn't support custom build rules [yet], so in order to properly\nbuild the `.vo` files, we provide a small helper script\n`tools/coq_dune.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files. This tool is akin to `coq_makefile`.\n\nDue to this pitfall, the build process has to proceed in three stages:\n1) build `coqdep` and `coq_dune`; 2) generate `dune` files for\n`theories` and `plugins`; 3) perform a regular build, now that all\ntargets are in scope.\n\nThe current, make-based build system is unmodified by this PR and kept\nas the default option.\n\nThe main TODOs are written down in issue #xxxx\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nconfigure: Implement dune / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for dune.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n```\n$ /usr/bin/time make DUNEOPT=\"-j 1000\" -f Makefile.dune states\n59.50user 18.81system 0:29.83elapsed 262%CPU (0avgtext+0avgdata 302996maxresident)k\n0inputs+646632outputs (0major+4893811minor)pagefaults 0swaps\n\n$ /usr/bin/time sh -c \"./configure -local -native-compiler no && make -j states\"\n88.21user 23.65system 0:32.96elapsed 339%CPU (0avgtext+0avgdata 304992maxresident)k\n0inputs+1051680outputs (0major+5300680minor)pagefaults 0swaps\n```\n\n- 4857\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-08-28T10:33:30.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/774286b6837d04931719fcf74eb666e64952b0a8"},"pipeline":{"id":28838176,"iid":2717,"project_id":6138686,"sha":"774286b6837d04931719fcf74eb666e64952b0a8","ref":"pr-6857","status":"success","source":"push","created_at":"2018-08-28T08:34:10.297Z","updated_at":"2018-08-28T10:50:01.475Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/28838176"},"web_url":"https://gitlab.com/coq/coq/-/jobs/92616161","artifacts":[{"file_type":"trace","size":268067,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":92616160,"status":"success","stage":"test","name":"ci-formal-topology","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-08-28T08:34:11.018Z","started_at":"2018-08-28T09:02:46.992Z","finished_at":"2018-08-28T09:41:31.856Z","duration":2324.863334,"queued_duration":2.047688,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"774286b6837d04931719fcf74eb666e64952b0a8","short_id":"774286b6","created_at":"2018-08-28T10:33:30.000+02:00","parent_ids":["d0901e424a2ade85fb070eca83384e61070eec5b"],"title":"[build] Preliminary support for building with `dune`.","message":"[build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides automatic generation of\n`version.ml`, `.merlin`, `META`, `opam`, API documentation; install\nmanagement; easy integration with external libraries, test runners,\nand modular builds.\n\nIn particular, Dune uniformly handles components regardless whether\nthey live in, or out-of-tree. This greatly simplifies cases where a\nplugin [or CoqIde] is checked out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can thus be used as a\nmore flexible `coq_makefile` replacement.\n\nFor now we provide experimental support for a Dune build. In order to\nbuild Coq + the standard library with Dune type:\n\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_ by default. This\npatch provides a `dune` library specification for each Coq source\ncomponent, mirroring the existing `META` setup.\n\nDune doesn't support custom build rules [yet], so in order to properly\nbuild the `.vo` files, we provide a small helper script\n`tools/coq_dune.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files. This tool is akin to `coq_makefile`.\n\nDue to this pitfall, the build process has to proceed in three stages:\n1) build `coqdep` and `coq_dune`; 2) generate `dune` files for\n`theories` and `plugins`; 3) perform a regular build, now that all\ntargets are in scope.\n\nThe current, make-based build system is unmodified by this PR and kept\nas the default option.\n\nThe main TODOs are written down in issue #xxxx\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nconfigure: Implement dune / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for dune.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n```\n$ /usr/bin/time make DUNEOPT=\"-j 1000\" -f Makefile.dune states\n59.50user 18.81system 0:29.83elapsed 262%CPU (0avgtext+0avgdata 302996maxresident)k\n0inputs+646632outputs (0major+4893811minor)pagefaults 0swaps\n\n$ /usr/bin/time sh -c \"./configure -local -native-compiler no && make -j states\"\n88.21user 23.65system 0:32.96elapsed 339%CPU (0avgtext+0avgdata 304992maxresident)k\n0inputs+1051680outputs (0major+5300680minor)pagefaults 0swaps\n```\n\n- 4857\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-08-28T10:33:30.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/774286b6837d04931719fcf74eb666e64952b0a8"},"pipeline":{"id":28838176,"iid":2717,"project_id":6138686,"sha":"774286b6837d04931719fcf74eb666e64952b0a8","ref":"pr-6857","status":"success","source":"push","created_at":"2018-08-28T08:34:10.297Z","updated_at":"2018-08-28T10:50:01.475Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/28838176"},"web_url":"https://gitlab.com/coq/coq/-/jobs/92616160","artifacts":[{"file_type":"trace","size":564263,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":92616159,"status":"success","stage":"test","name":"ci-flocq","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-08-28T08:34:10.996Z","started_at":"2018-08-28T09:02:46.940Z","finished_at":"2018-08-28T09:17:49.662Z","duration":902.722953,"queued_duration":0.721371,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"774286b6837d04931719fcf74eb666e64952b0a8","short_id":"774286b6","created_at":"2018-08-28T10:33:30.000+02:00","parent_ids":["d0901e424a2ade85fb070eca83384e61070eec5b"],"title":"[build] Preliminary support for building with `dune`.","message":"[build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides automatic generation of\n`version.ml`, `.merlin`, `META`, `opam`, API documentation; install\nmanagement; easy integration with external libraries, test runners,\nand modular builds.\n\nIn particular, Dune uniformly handles components regardless whether\nthey live in, or out-of-tree. This greatly simplifies cases where a\nplugin [or CoqIde] is checked out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can thus be used as a\nmore flexible `coq_makefile` replacement.\n\nFor now we provide experimental support for a Dune build. In order to\nbuild Coq + the standard library with Dune type:\n\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_ by default. This\npatch provides a `dune` library specification for each Coq source\ncomponent, mirroring the existing `META` setup.\n\nDune doesn't support custom build rules [yet], so in order to properly\nbuild the `.vo` files, we provide a small helper script\n`tools/coq_dune.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files. This tool is akin to `coq_makefile`.\n\nDue to this pitfall, the build process has to proceed in three stages:\n1) build `coqdep` and `coq_dune`; 2) generate `dune` files for\n`theories` and `plugins`; 3) perform a regular build, now that all\ntargets are in scope.\n\nThe current, make-based build system is unmodified by this PR and kept\nas the default option.\n\nThe main TODOs are written down in issue #xxxx\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nconfigure: Implement dune / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for dune.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n```\n$ /usr/bin/time make DUNEOPT=\"-j 1000\" -f Makefile.dune states\n59.50user 18.81system 0:29.83elapsed 262%CPU (0avgtext+0avgdata 302996maxresident)k\n0inputs+646632outputs (0major+4893811minor)pagefaults 0swaps\n\n$ /usr/bin/time sh -c \"./configure -local -native-compiler no && make -j states\"\n88.21user 23.65system 0:32.96elapsed 339%CPU (0avgtext+0avgdata 304992maxresident)k\n0inputs+1051680outputs (0major+5300680minor)pagefaults 0swaps\n```\n\n- 4857\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-08-28T10:33:30.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/774286b6837d04931719fcf74eb666e64952b0a8"},"pipeline":{"id":28838176,"iid":2717,"project_id":6138686,"sha":"774286b6837d04931719fcf74eb666e64952b0a8","ref":"pr-6857","status":"success","source":"push","created_at":"2018-08-28T08:34:10.297Z","updated_at":"2018-08-28T10:50:01.475Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/28838176"},"web_url":"https://gitlab.com/coq/coq/-/jobs/92616159","artifacts":[{"file_type":"trace","size":618622,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":92616158,"status":"success","stage":"test","name":"ci-fiat-parsers","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-08-28T08:34:10.975Z","started_at":"2018-08-28T09:02:47.969Z","finished_at":"2018-08-28T09:24:07.403Z","duration":1279.43407,"queued_duration":0.852542,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"774286b6837d04931719fcf74eb666e64952b0a8","short_id":"774286b6","created_at":"2018-08-28T10:33:30.000+02:00","parent_ids":["d0901e424a2ade85fb070eca83384e61070eec5b"],"title":"[build] Preliminary support for building with `dune`.","message":"[build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides automatic generation of\n`version.ml`, `.merlin`, `META`, `opam`, API documentation; install\nmanagement; easy integration with external libraries, test runners,\nand modular builds.\n\nIn particular, Dune uniformly handles components regardless whether\nthey live in, or out-of-tree. This greatly simplifies cases where a\nplugin [or CoqIde] is checked out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can thus be used as a\nmore flexible `coq_makefile` replacement.\n\nFor now we provide experimental support for a Dune build. In order to\nbuild Coq + the standard library with Dune type:\n\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_ by default. This\npatch provides a `dune` library specification for each Coq source\ncomponent, mirroring the existing `META` setup.\n\nDune doesn't support custom build rules [yet], so in order to properly\nbuild the `.vo` files, we provide a small helper script\n`tools/coq_dune.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files. This tool is akin to `coq_makefile`.\n\nDue to this pitfall, the build process has to proceed in three stages:\n1) build `coqdep` and `coq_dune`; 2) generate `dune` files for\n`theories` and `plugins`; 3) perform a regular build, now that all\ntargets are in scope.\n\nThe current, make-based build system is unmodified by this PR and kept\nas the default option.\n\nThe main TODOs are written down in issue #xxxx\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nconfigure: Implement dune / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for dune.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n```\n$ /usr/bin/time make DUNEOPT=\"-j 1000\" -f Makefile.dune states\n59.50user 18.81system 0:29.83elapsed 262%CPU (0avgtext+0avgdata 302996maxresident)k\n0inputs+646632outputs (0major+4893811minor)pagefaults 0swaps\n\n$ /usr/bin/time sh -c \"./configure -local -native-compiler no && make -j states\"\n88.21user 23.65system 0:32.96elapsed 339%CPU (0avgtext+0avgdata 304992maxresident)k\n0inputs+1051680outputs (0major+5300680minor)pagefaults 0swaps\n```\n\n- 4857\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-08-28T10:33:30.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/774286b6837d04931719fcf74eb666e64952b0a8"},"pipeline":{"id":28838176,"iid":2717,"project_id":6138686,"sha":"774286b6837d04931719fcf74eb666e64952b0a8","ref":"pr-6857","status":"success","source":"push","created_at":"2018-08-28T08:34:10.297Z","updated_at":"2018-08-28T10:50:01.475Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/28838176"},"web_url":"https://gitlab.com/coq/coq/-/jobs/92616158","artifacts":[{"file_type":"trace","size":235915,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":92616157,"status":"success","stage":"test","name":"ci-fiat-crypto-legacy","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-08-28T08:34:10.955Z","started_at":"2018-08-28T09:02:48.972Z","finished_at":"2018-08-28T10:50:00.032Z","duration":6431.060421,"queued_duration":1.007893,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"774286b6837d04931719fcf74eb666e64952b0a8","short_id":"774286b6","created_at":"2018-08-28T10:33:30.000+02:00","parent_ids":["d0901e424a2ade85fb070eca83384e61070eec5b"],"title":"[build] Preliminary support for building with `dune`.","message":"[build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides automatic generation of\n`version.ml`, `.merlin`, `META`, `opam`, API documentation; install\nmanagement; easy integration with external libraries, test runners,\nand modular builds.\n\nIn particular, Dune uniformly handles components regardless whether\nthey live in, or out-of-tree. This greatly simplifies cases where a\nplugin [or CoqIde] is checked out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can thus be used as a\nmore flexible `coq_makefile` replacement.\n\nFor now we provide experimental support for a Dune build. In order to\nbuild Coq + the standard library with Dune type:\n\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_ by default. This\npatch provides a `dune` library specification for each Coq source\ncomponent, mirroring the existing `META` setup.\n\nDune doesn't support custom build rules [yet], so in order to properly\nbuild the `.vo` files, we provide a small helper script\n`tools/coq_dune.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files. This tool is akin to `coq_makefile`.\n\nDue to this pitfall, the build process has to proceed in three stages:\n1) build `coqdep` and `coq_dune`; 2) generate `dune` files for\n`theories` and `plugins`; 3) perform a regular build, now that all\ntargets are in scope.\n\nThe current, make-based build system is unmodified by this PR and kept\nas the default option.\n\nThe main TODOs are written down in issue #xxxx\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nconfigure: Implement dune / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for dune.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n```\n$ /usr/bin/time make DUNEOPT=\"-j 1000\" -f Makefile.dune states\n59.50user 18.81system 0:29.83elapsed 262%CPU (0avgtext+0avgdata 302996maxresident)k\n0inputs+646632outputs (0major+4893811minor)pagefaults 0swaps\n\n$ /usr/bin/time sh -c \"./configure -local -native-compiler no && make -j states\"\n88.21user 23.65system 0:32.96elapsed 339%CPU (0avgtext+0avgdata 304992maxresident)k\n0inputs+1051680outputs (0major+5300680minor)pagefaults 0swaps\n```\n\n- 4857\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-08-28T10:33:30.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/774286b6837d04931719fcf74eb666e64952b0a8"},"pipeline":{"id":28838176,"iid":2717,"project_id":6138686,"sha":"774286b6837d04931719fcf74eb666e64952b0a8","ref":"pr-6857","status":"success","source":"push","created_at":"2018-08-28T08:34:10.297Z","updated_at":"2018-08-28T10:50:01.475Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/28838176"},"web_url":"https://gitlab.com/coq/coq/-/jobs/92616157","artifacts":[{"file_type":"trace","size":644242,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":92616155,"status":"success","stage":"test","name":"ci-fiat-crypto","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-08-28T08:34:10.934Z","started_at":"2018-08-28T09:02:51.823Z","finished_at":"2018-08-28T09:47:33.227Z","duration":2681.404,"queued_duration":2.90104,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"774286b6837d04931719fcf74eb666e64952b0a8","short_id":"774286b6","created_at":"2018-08-28T10:33:30.000+02:00","parent_ids":["d0901e424a2ade85fb070eca83384e61070eec5b"],"title":"[build] Preliminary support for building with `dune`.","message":"[build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides automatic generation of\n`version.ml`, `.merlin`, `META`, `opam`, API documentation; install\nmanagement; easy integration with external libraries, test runners,\nand modular builds.\n\nIn particular, Dune uniformly handles components regardless whether\nthey live in, or out-of-tree. This greatly simplifies cases where a\nplugin [or CoqIde] is checked out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can thus be used as a\nmore flexible `coq_makefile` replacement.\n\nFor now we provide experimental support for a Dune build. In order to\nbuild Coq + the standard library with Dune type:\n\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_ by default. This\npatch provides a `dune` library specification for each Coq source\ncomponent, mirroring the existing `META` setup.\n\nDune doesn't support custom build rules [yet], so in order to properly\nbuild the `.vo` files, we provide a small helper script\n`tools/coq_dune.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files. This tool is akin to `coq_makefile`.\n\nDue to this pitfall, the build process has to proceed in three stages:\n1) build `coqdep` and `coq_dune`; 2) generate `dune` files for\n`theories` and `plugins`; 3) perform a regular build, now that all\ntargets are in scope.\n\nThe current, make-based build system is unmodified by this PR and kept\nas the default option.\n\nThe main TODOs are written down in issue #xxxx\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nconfigure: Implement dune / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for dune.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n```\n$ /usr/bin/time make DUNEOPT=\"-j 1000\" -f Makefile.dune states\n59.50user 18.81system 0:29.83elapsed 262%CPU (0avgtext+0avgdata 302996maxresident)k\n0inputs+646632outputs (0major+4893811minor)pagefaults 0swaps\n\n$ /usr/bin/time sh -c \"./configure -local -native-compiler no && make -j states\"\n88.21user 23.65system 0:32.96elapsed 339%CPU (0avgtext+0avgdata 304992maxresident)k\n0inputs+1051680outputs (0major+5300680minor)pagefaults 0swaps\n```\n\n- 4857\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-08-28T10:33:30.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/774286b6837d04931719fcf74eb666e64952b0a8"},"pipeline":{"id":28838176,"iid":2717,"project_id":6138686,"sha":"774286b6837d04931719fcf74eb666e64952b0a8","ref":"pr-6857","status":"success","source":"push","created_at":"2018-08-28T08:34:10.297Z","updated_at":"2018-08-28T10:50:01.475Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/28838176"},"web_url":"https://gitlab.com/coq/coq/-/jobs/92616155","artifacts":[{"file_type":"trace","size":868067,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":92616153,"status":"success","stage":"test","name":"ci-fcsl-pcm","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-08-28T08:34:10.912Z","started_at":"2018-08-28T09:02:51.741Z","finished_at":"2018-08-28T09:09:12.791Z","duration":381.050578,"queued_duration":1.953069,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"774286b6837d04931719fcf74eb666e64952b0a8","short_id":"774286b6","created_at":"2018-08-28T10:33:30.000+02:00","parent_ids":["d0901e424a2ade85fb070eca83384e61070eec5b"],"title":"[build] Preliminary support for building with `dune`.","message":"[build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides automatic generation of\n`version.ml`, `.merlin`, `META`, `opam`, API documentation; install\nmanagement; easy integration with external libraries, test runners,\nand modular builds.\n\nIn particular, Dune uniformly handles components regardless whether\nthey live in, or out-of-tree. This greatly simplifies cases where a\nplugin [or CoqIde] is checked out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can thus be used as a\nmore flexible `coq_makefile` replacement.\n\nFor now we provide experimental support for a Dune build. In order to\nbuild Coq + the standard library with Dune type:\n\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_ by default. This\npatch provides a `dune` library specification for each Coq source\ncomponent, mirroring the existing `META` setup.\n\nDune doesn't support custom build rules [yet], so in order to properly\nbuild the `.vo` files, we provide a small helper script\n`tools/coq_dune.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files. This tool is akin to `coq_makefile`.\n\nDue to this pitfall, the build process has to proceed in three stages:\n1) build `coqdep` and `coq_dune`; 2) generate `dune` files for\n`theories` and `plugins`; 3) perform a regular build, now that all\ntargets are in scope.\n\nThe current, make-based build system is unmodified by this PR and kept\nas the default option.\n\nThe main TODOs are written down in issue #xxxx\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nconfigure: Implement dune / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for dune.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n```\n$ /usr/bin/time make DUNEOPT=\"-j 1000\" -f Makefile.dune states\n59.50user 18.81system 0:29.83elapsed 262%CPU (0avgtext+0avgdata 302996maxresident)k\n0inputs+646632outputs (0major+4893811minor)pagefaults 0swaps\n\n$ /usr/bin/time sh -c \"./configure -local -native-compiler no && make -j states\"\n88.21user 23.65system 0:32.96elapsed 339%CPU (0avgtext+0avgdata 304992maxresident)k\n0inputs+1051680outputs (0major+5300680minor)pagefaults 0swaps\n```\n\n- 4857\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-08-28T10:33:30.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/774286b6837d04931719fcf74eb666e64952b0a8"},"pipeline":{"id":28838176,"iid":2717,"project_id":6138686,"sha":"774286b6837d04931719fcf74eb666e64952b0a8","ref":"pr-6857","status":"success","source":"push","created_at":"2018-08-28T08:34:10.297Z","updated_at":"2018-08-28T10:50:01.475Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/28838176"},"web_url":"https://gitlab.com/coq/coq/-/jobs/92616153","artifacts":[{"file_type":"trace","size":91792,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":92616152,"status":"success","stage":"test","name":"ci-equations","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-08-28T08:34:10.891Z","started_at":"2018-08-28T09:02:51.628Z","finished_at":"2018-08-28T09:09:28.292Z","duration":396.664685,"queued_duration":0.855329,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"774286b6837d04931719fcf74eb666e64952b0a8","short_id":"774286b6","created_at":"2018-08-28T10:33:30.000+02:00","parent_ids":["d0901e424a2ade85fb070eca83384e61070eec5b"],"title":"[build] Preliminary support for building with `dune`.","message":"[build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides automatic generation of\n`version.ml`, `.merlin`, `META`, `opam`, API documentation; install\nmanagement; easy integration with external libraries, test runners,\nand modular builds.\n\nIn particular, Dune uniformly handles components regardless whether\nthey live in, or out-of-tree. This greatly simplifies cases where a\nplugin [or CoqIde] is checked out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can thus be used as a\nmore flexible `coq_makefile` replacement.\n\nFor now we provide experimental support for a Dune build. In order to\nbuild Coq + the standard library with Dune type:\n\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_ by default. This\npatch provides a `dune` library specification for each Coq source\ncomponent, mirroring the existing `META` setup.\n\nDune doesn't support custom build rules [yet], so in order to properly\nbuild the `.vo` files, we provide a small helper script\n`tools/coq_dune.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files. This tool is akin to `coq_makefile`.\n\nDue to this pitfall, the build process has to proceed in three stages:\n1) build `coqdep` and `coq_dune`; 2) generate `dune` files for\n`theories` and `plugins`; 3) perform a regular build, now that all\ntargets are in scope.\n\nThe current, make-based build system is unmodified by this PR and kept\nas the default option.\n\nThe main TODOs are written down in issue #xxxx\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nconfigure: Implement dune / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for dune.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n```\n$ /usr/bin/time make DUNEOPT=\"-j 1000\" -f Makefile.dune states\n59.50user 18.81system 0:29.83elapsed 262%CPU (0avgtext+0avgdata 302996maxresident)k\n0inputs+646632outputs (0major+4893811minor)pagefaults 0swaps\n\n$ /usr/bin/time sh -c \"./configure -local -native-compiler no && make -j states\"\n88.21user 23.65system 0:32.96elapsed 339%CPU (0avgtext+0avgdata 304992maxresident)k\n0inputs+1051680outputs (0major+5300680minor)pagefaults 0swaps\n```\n\n- 4857\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-08-28T10:33:30.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/774286b6837d04931719fcf74eb666e64952b0a8"},"pipeline":{"id":28838176,"iid":2717,"project_id":6138686,"sha":"774286b6837d04931719fcf74eb666e64952b0a8","ref":"pr-6857","status":"success","source":"push","created_at":"2018-08-28T08:34:10.297Z","updated_at":"2018-08-28T10:50:01.475Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/28838176"},"web_url":"https://gitlab.com/coq/coq/-/jobs/92616152","artifacts":[{"file_type":"trace","size":62641,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":92616151,"status":"success","stage":"test","name":"ci-elpi","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-08-28T08:34:10.870Z","started_at":"2018-08-28T09:02:53.268Z","finished_at":"2018-08-28T09:07:06.269Z","duration":253.000916,"queued_duration":1.557529,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"774286b6837d04931719fcf74eb666e64952b0a8","short_id":"774286b6","created_at":"2018-08-28T10:33:30.000+02:00","parent_ids":["d0901e424a2ade85fb070eca83384e61070eec5b"],"title":"[build] Preliminary support for building with `dune`.","message":"[build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides automatic generation of\n`version.ml`, `.merlin`, `META`, `opam`, API documentation; install\nmanagement; easy integration with external libraries, test runners,\nand modular builds.\n\nIn particular, Dune uniformly handles components regardless whether\nthey live in, or out-of-tree. This greatly simplifies cases where a\nplugin [or CoqIde] is checked out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can thus be used as a\nmore flexible `coq_makefile` replacement.\n\nFor now we provide experimental support for a Dune build. In order to\nbuild Coq + the standard library with Dune type:\n\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_ by default. This\npatch provides a `dune` library specification for each Coq source\ncomponent, mirroring the existing `META` setup.\n\nDune doesn't support custom build rules [yet], so in order to properly\nbuild the `.vo` files, we provide a small helper script\n`tools/coq_dune.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files. This tool is akin to `coq_makefile`.\n\nDue to this pitfall, the build process has to proceed in three stages:\n1) build `coqdep` and `coq_dune`; 2) generate `dune` files for\n`theories` and `plugins`; 3) perform a regular build, now that all\ntargets are in scope.\n\nThe current, make-based build system is unmodified by this PR and kept\nas the default option.\n\nThe main TODOs are written down in issue #xxxx\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nconfigure: Implement dune / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for dune.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n```\n$ /usr/bin/time make DUNEOPT=\"-j 1000\" -f Makefile.dune states\n59.50user 18.81system 0:29.83elapsed 262%CPU (0avgtext+0avgdata 302996maxresident)k\n0inputs+646632outputs (0major+4893811minor)pagefaults 0swaps\n\n$ /usr/bin/time sh -c \"./configure -local -native-compiler no && make -j states\"\n88.21user 23.65system 0:32.96elapsed 339%CPU (0avgtext+0avgdata 304992maxresident)k\n0inputs+1051680outputs (0major+5300680minor)pagefaults 0swaps\n```\n\n- 4857\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-08-28T10:33:30.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/774286b6837d04931719fcf74eb666e64952b0a8"},"pipeline":{"id":28838176,"iid":2717,"project_id":6138686,"sha":"774286b6837d04931719fcf74eb666e64952b0a8","ref":"pr-6857","status":"success","source":"push","created_at":"2018-08-28T08:34:10.297Z","updated_at":"2018-08-28T10:50:01.475Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/28838176"},"web_url":"https://gitlab.com/coq/coq/-/jobs/92616151","artifacts":[{"file_type":"trace","size":462942,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":92616150,"status":"success","stage":"test","name":"ci-cross-crypto","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-08-28T08:34:10.847Z","started_at":"2018-08-28T09:02:54.158Z","finished_at":"2018-08-28T09:43:43.612Z","duration":2449.453799,"queued_duration":1.481272,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"774286b6837d04931719fcf74eb666e64952b0a8","short_id":"774286b6","created_at":"2018-08-28T10:33:30.000+02:00","parent_ids":["d0901e424a2ade85fb070eca83384e61070eec5b"],"title":"[build] Preliminary support for building with `dune`.","message":"[build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides automatic generation of\n`version.ml`, `.merlin`, `META`, `opam`, API documentation; install\nmanagement; easy integration with external libraries, test runners,\nand modular builds.\n\nIn particular, Dune uniformly handles components regardless whether\nthey live in, or out-of-tree. This greatly simplifies cases where a\nplugin [or CoqIde] is checked out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can thus be used as a\nmore flexible `coq_makefile` replacement.\n\nFor now we provide experimental support for a Dune build. In order to\nbuild Coq + the standard library with Dune type:\n\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_ by default. This\npatch provides a `dune` library specification for each Coq source\ncomponent, mirroring the existing `META` setup.\n\nDune doesn't support custom build rules [yet], so in order to properly\nbuild the `.vo` files, we provide a small helper script\n`tools/coq_dune.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files. This tool is akin to `coq_makefile`.\n\nDue to this pitfall, the build process has to proceed in three stages:\n1) build `coqdep` and `coq_dune`; 2) generate `dune` files for\n`theories` and `plugins`; 3) perform a regular build, now that all\ntargets are in scope.\n\nThe current, make-based build system is unmodified by this PR and kept\nas the default option.\n\nThe main TODOs are written down in issue #xxxx\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nconfigure: Implement dune / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for dune.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n```\n$ /usr/bin/time make DUNEOPT=\"-j 1000\" -f Makefile.dune states\n59.50user 18.81system 0:29.83elapsed 262%CPU (0avgtext+0avgdata 302996maxresident)k\n0inputs+646632outputs (0major+4893811minor)pagefaults 0swaps\n\n$ /usr/bin/time sh -c \"./configure -local -native-compiler no && make -j states\"\n88.21user 23.65system 0:32.96elapsed 339%CPU (0avgtext+0avgdata 304992maxresident)k\n0inputs+1051680outputs (0major+5300680minor)pagefaults 0swaps\n```\n\n- 4857\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-08-28T10:33:30.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/774286b6837d04931719fcf74eb666e64952b0a8"},"pipeline":{"id":28838176,"iid":2717,"project_id":6138686,"sha":"774286b6837d04931719fcf74eb666e64952b0a8","ref":"pr-6857","status":"success","source":"push","created_at":"2018-08-28T08:34:10.297Z","updated_at":"2018-08-28T10:50:01.475Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/28838176"},"web_url":"https://gitlab.com/coq/coq/-/jobs/92616150","artifacts":[{"file_type":"trace","size":74583,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":92616149,"status":"success","stage":"test","name":"ci-coquelicot","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-08-28T08:34:10.826Z","started_at":"2018-08-28T09:02:56.013Z","finished_at":"2018-08-28T09:08:59.990Z","duration":363.976765,"queued_duration":1.808898,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"774286b6837d04931719fcf74eb666e64952b0a8","short_id":"774286b6","created_at":"2018-08-28T10:33:30.000+02:00","parent_ids":["d0901e424a2ade85fb070eca83384e61070eec5b"],"title":"[build] Preliminary support for building with `dune`.","message":"[build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides automatic generation of\n`version.ml`, `.merlin`, `META`, `opam`, API documentation; install\nmanagement; easy integration with external libraries, test runners,\nand modular builds.\n\nIn particular, Dune uniformly handles components regardless whether\nthey live in, or out-of-tree. This greatly simplifies cases where a\nplugin [or CoqIde] is checked out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can thus be used as a\nmore flexible `coq_makefile` replacement.\n\nFor now we provide experimental support for a Dune build. In order to\nbuild Coq + the standard library with Dune type:\n\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_ by default. This\npatch provides a `dune` library specification for each Coq source\ncomponent, mirroring the existing `META` setup.\n\nDune doesn't support custom build rules [yet], so in order to properly\nbuild the `.vo` files, we provide a small helper script\n`tools/coq_dune.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files. This tool is akin to `coq_makefile`.\n\nDue to this pitfall, the build process has to proceed in three stages:\n1) build `coqdep` and `coq_dune`; 2) generate `dune` files for\n`theories` and `plugins`; 3) perform a regular build, now that all\ntargets are in scope.\n\nThe current, make-based build system is unmodified by this PR and kept\nas the default option.\n\nThe main TODOs are written down in issue #xxxx\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nconfigure: Implement dune / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for dune.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n```\n$ /usr/bin/time make DUNEOPT=\"-j 1000\" -f Makefile.dune states\n59.50user 18.81system 0:29.83elapsed 262%CPU (0avgtext+0avgdata 302996maxresident)k\n0inputs+646632outputs (0major+4893811minor)pagefaults 0swaps\n\n$ /usr/bin/time sh -c \"./configure -local -native-compiler no && make -j states\"\n88.21user 23.65system 0:32.96elapsed 339%CPU (0avgtext+0avgdata 304992maxresident)k\n0inputs+1051680outputs (0major+5300680minor)pagefaults 0swaps\n```\n\n- 4857\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-08-28T10:33:30.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/774286b6837d04931719fcf74eb666e64952b0a8"},"pipeline":{"id":28838176,"iid":2717,"project_id":6138686,"sha":"774286b6837d04931719fcf74eb666e64952b0a8","ref":"pr-6857","status":"success","source":"push","created_at":"2018-08-28T08:34:10.297Z","updated_at":"2018-08-28T10:50:01.475Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/28838176"},"web_url":"https://gitlab.com/coq/coq/-/jobs/92616149","artifacts":[{"file_type":"trace","size":94647,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":92616148,"status":"success","stage":"test","name":"ci-coq-dpdgraph","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-08-28T08:34:10.805Z","started_at":"2018-08-28T09:02:57.218Z","finished_at":"2018-08-28T09:05:49.504Z","duration":172.285885,"queued_duration":1.119701,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"774286b6837d04931719fcf74eb666e64952b0a8","short_id":"774286b6","created_at":"2018-08-28T10:33:30.000+02:00","parent_ids":["d0901e424a2ade85fb070eca83384e61070eec5b"],"title":"[build] Preliminary support for building with `dune`.","message":"[build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides automatic generation of\n`version.ml`, `.merlin`, `META`, `opam`, API documentation; install\nmanagement; easy integration with external libraries, test runners,\nand modular builds.\n\nIn particular, Dune uniformly handles components regardless whether\nthey live in, or out-of-tree. This greatly simplifies cases where a\nplugin [or CoqIde] is checked out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can thus be used as a\nmore flexible `coq_makefile` replacement.\n\nFor now we provide experimental support for a Dune build. In order to\nbuild Coq + the standard library with Dune type:\n\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_ by default. This\npatch provides a `dune` library specification for each Coq source\ncomponent, mirroring the existing `META` setup.\n\nDune doesn't support custom build rules [yet], so in order to properly\nbuild the `.vo` files, we provide a small helper script\n`tools/coq_dune.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files. This tool is akin to `coq_makefile`.\n\nDue to this pitfall, the build process has to proceed in three stages:\n1) build `coqdep` and `coq_dune`; 2) generate `dune` files for\n`theories` and `plugins`; 3) perform a regular build, now that all\ntargets are in scope.\n\nThe current, make-based build system is unmodified by this PR and kept\nas the default option.\n\nThe main TODOs are written down in issue #xxxx\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nconfigure: Implement dune / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for dune.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n```\n$ /usr/bin/time make DUNEOPT=\"-j 1000\" -f Makefile.dune states\n59.50user 18.81system 0:29.83elapsed 262%CPU (0avgtext+0avgdata 302996maxresident)k\n0inputs+646632outputs (0major+4893811minor)pagefaults 0swaps\n\n$ /usr/bin/time sh -c \"./configure -local -native-compiler no && make -j states\"\n88.21user 23.65system 0:32.96elapsed 339%CPU (0avgtext+0avgdata 304992maxresident)k\n0inputs+1051680outputs (0major+5300680minor)pagefaults 0swaps\n```\n\n- 4857\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-08-28T10:33:30.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/774286b6837d04931719fcf74eb666e64952b0a8"},"pipeline":{"id":28838176,"iid":2717,"project_id":6138686,"sha":"774286b6837d04931719fcf74eb666e64952b0a8","ref":"pr-6857","status":"success","source":"push","created_at":"2018-08-28T08:34:10.297Z","updated_at":"2018-08-28T10:50:01.475Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/28838176"},"web_url":"https://gitlab.com/coq/coq/-/jobs/92616148","artifacts":[{"file_type":"trace","size":39445,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":92616147,"status":"success","stage":"test","name":"ci-compcert","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-08-28T08:34:10.784Z","started_at":"2018-08-28T09:02:57.509Z","finished_at":"2018-08-28T09:30:45.325Z","duration":1667.816012,"queued_duration":0.62704,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"774286b6837d04931719fcf74eb666e64952b0a8","short_id":"774286b6","created_at":"2018-08-28T10:33:30.000+02:00","parent_ids":["d0901e424a2ade85fb070eca83384e61070eec5b"],"title":"[build] Preliminary support for building with `dune`.","message":"[build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides automatic generation of\n`version.ml`, `.merlin`, `META`, `opam`, API documentation; install\nmanagement; easy integration with external libraries, test runners,\nand modular builds.\n\nIn particular, Dune uniformly handles components regardless whether\nthey live in, or out-of-tree. This greatly simplifies cases where a\nplugin [or CoqIde] is checked out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can thus be used as a\nmore flexible `coq_makefile` replacement.\n\nFor now we provide experimental support for a Dune build. In order to\nbuild Coq + the standard library with Dune type:\n\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_ by default. This\npatch provides a `dune` library specification for each Coq source\ncomponent, mirroring the existing `META` setup.\n\nDune doesn't support custom build rules [yet], so in order to properly\nbuild the `.vo` files, we provide a small helper script\n`tools/coq_dune.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files. This tool is akin to `coq_makefile`.\n\nDue to this pitfall, the build process has to proceed in three stages:\n1) build `coqdep` and `coq_dune`; 2) generate `dune` files for\n`theories` and `plugins`; 3) perform a regular build, now that all\ntargets are in scope.\n\nThe current, make-based build system is unmodified by this PR and kept\nas the default option.\n\nThe main TODOs are written down in issue #xxxx\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nconfigure: Implement dune / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for dune.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n```\n$ /usr/bin/time make DUNEOPT=\"-j 1000\" -f Makefile.dune states\n59.50user 18.81system 0:29.83elapsed 262%CPU (0avgtext+0avgdata 302996maxresident)k\n0inputs+646632outputs (0major+4893811minor)pagefaults 0swaps\n\n$ /usr/bin/time sh -c \"./configure -local -native-compiler no && make -j states\"\n88.21user 23.65system 0:32.96elapsed 339%CPU (0avgtext+0avgdata 304992maxresident)k\n0inputs+1051680outputs (0major+5300680minor)pagefaults 0swaps\n```\n\n- 4857\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-08-28T10:33:30.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/774286b6837d04931719fcf74eb666e64952b0a8"},"pipeline":{"id":28838176,"iid":2717,"project_id":6138686,"sha":"774286b6837d04931719fcf74eb666e64952b0a8","ref":"pr-6857","status":"success","source":"push","created_at":"2018-08-28T08:34:10.297Z","updated_at":"2018-08-28T10:50:01.475Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/28838176"},"web_url":"https://gitlab.com/coq/coq/-/jobs/92616147","artifacts":[{"file_type":"trace","size":1998727,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":92616146,"status":"success","stage":"test","name":"ci-color","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-08-28T08:34:10.762Z","started_at":"2018-08-28T09:02:58.601Z","finished_at":"2018-08-28T09:23:52.068Z","duration":1253.466566,"queued_duration":1.040418,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"774286b6837d04931719fcf74eb666e64952b0a8","short_id":"774286b6","created_at":"2018-08-28T10:33:30.000+02:00","parent_ids":["d0901e424a2ade85fb070eca83384e61070eec5b"],"title":"[build] Preliminary support for building with `dune`.","message":"[build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides automatic generation of\n`version.ml`, `.merlin`, `META`, `opam`, API documentation; install\nmanagement; easy integration with external libraries, test runners,\nand modular builds.\n\nIn particular, Dune uniformly handles components regardless whether\nthey live in, or out-of-tree. This greatly simplifies cases where a\nplugin [or CoqIde] is checked out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can thus be used as a\nmore flexible `coq_makefile` replacement.\n\nFor now we provide experimental support for a Dune build. In order to\nbuild Coq + the standard library with Dune type:\n\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_ by default. This\npatch provides a `dune` library specification for each Coq source\ncomponent, mirroring the existing `META` setup.\n\nDune doesn't support custom build rules [yet], so in order to properly\nbuild the `.vo` files, we provide a small helper script\n`tools/coq_dune.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files. This tool is akin to `coq_makefile`.\n\nDue to this pitfall, the build process has to proceed in three stages:\n1) build `coqdep` and `coq_dune`; 2) generate `dune` files for\n`theories` and `plugins`; 3) perform a regular build, now that all\ntargets are in scope.\n\nThe current, make-based build system is unmodified by this PR and kept\nas the default option.\n\nThe main TODOs are written down in issue #xxxx\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nconfigure: Implement dune / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for dune.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n```\n$ /usr/bin/time make DUNEOPT=\"-j 1000\" -f Makefile.dune states\n59.50user 18.81system 0:29.83elapsed 262%CPU (0avgtext+0avgdata 302996maxresident)k\n0inputs+646632outputs (0major+4893811minor)pagefaults 0swaps\n\n$ /usr/bin/time sh -c \"./configure -local -native-compiler no && make -j states\"\n88.21user 23.65system 0:32.96elapsed 339%CPU (0avgtext+0avgdata 304992maxresident)k\n0inputs+1051680outputs (0major+5300680minor)pagefaults 0swaps\n```\n\n- 4857\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-08-28T10:33:30.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/774286b6837d04931719fcf74eb666e64952b0a8"},"pipeline":{"id":28838176,"iid":2717,"project_id":6138686,"sha":"774286b6837d04931719fcf74eb666e64952b0a8","ref":"pr-6857","status":"success","source":"push","created_at":"2018-08-28T08:34:10.297Z","updated_at":"2018-08-28T10:50:01.475Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/28838176"},"web_url":"https://gitlab.com/coq/coq/-/jobs/92616146","artifacts":[{"file_type":"trace","size":183191,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":92616145,"status":"success","stage":"test","name":"ci-bignums","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-08-28T08:34:10.741Z","started_at":"2018-08-28T09:02:59.133Z","finished_at":"2018-08-28T09:07:43.919Z","duration":284.78595,"queued_duration":0.619538,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"774286b6837d04931719fcf74eb666e64952b0a8","short_id":"774286b6","created_at":"2018-08-28T10:33:30.000+02:00","parent_ids":["d0901e424a2ade85fb070eca83384e61070eec5b"],"title":"[build] Preliminary support for building with `dune`.","message":"[build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides automatic generation of\n`version.ml`, `.merlin`, `META`, `opam`, API documentation; install\nmanagement; easy integration with external libraries, test runners,\nand modular builds.\n\nIn particular, Dune uniformly handles components regardless whether\nthey live in, or out-of-tree. This greatly simplifies cases where a\nplugin [or CoqIde] is checked out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can thus be used as a\nmore flexible `coq_makefile` replacement.\n\nFor now we provide experimental support for a Dune build. In order to\nbuild Coq + the standard library with Dune type:\n\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_ by default. This\npatch provides a `dune` library specification for each Coq source\ncomponent, mirroring the existing `META` setup.\n\nDune doesn't support custom build rules [yet], so in order to properly\nbuild the `.vo` files, we provide a small helper script\n`tools/coq_dune.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files. This tool is akin to `coq_makefile`.\n\nDue to this pitfall, the build process has to proceed in three stages:\n1) build `coqdep` and `coq_dune`; 2) generate `dune` files for\n`theories` and `plugins`; 3) perform a regular build, now that all\ntargets are in scope.\n\nThe current, make-based build system is unmodified by this PR and kept\nas the default option.\n\nThe main TODOs are written down in issue #xxxx\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nconfigure: Implement dune / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for dune.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n```\n$ /usr/bin/time make DUNEOPT=\"-j 1000\" -f Makefile.dune states\n59.50user 18.81system 0:29.83elapsed 262%CPU (0avgtext+0avgdata 302996maxresident)k\n0inputs+646632outputs (0major+4893811minor)pagefaults 0swaps\n\n$ /usr/bin/time sh -c \"./configure -local -native-compiler no && make -j states\"\n88.21user 23.65system 0:32.96elapsed 339%CPU (0avgtext+0avgdata 304992maxresident)k\n0inputs+1051680outputs (0major+5300680minor)pagefaults 0swaps\n```\n\n- 4857\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-08-28T10:33:30.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/774286b6837d04931719fcf74eb666e64952b0a8"},"pipeline":{"id":28838176,"iid":2717,"project_id":6138686,"sha":"774286b6837d04931719fcf74eb666e64952b0a8","ref":"pr-6857","status":"success","source":"push","created_at":"2018-08-28T08:34:10.297Z","updated_at":"2018-08-28T10:50:01.475Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/28838176"},"web_url":"https://gitlab.com/coq/coq/-/jobs/92616145","artifacts":[{"file_type":"trace","size":41353,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":92616144,"status":"success","stage":"test","name":"ci-bedrock2","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-08-28T08:34:10.720Z","started_at":"2018-08-28T09:03:01.283Z","finished_at":"2018-08-28T09:23:56.828Z","duration":1255.545806,"queued_duration":2.079588,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"774286b6837d04931719fcf74eb666e64952b0a8","short_id":"774286b6","created_at":"2018-08-28T10:33:30.000+02:00","parent_ids":["d0901e424a2ade85fb070eca83384e61070eec5b"],"title":"[build] Preliminary support for building with `dune`.","message":"[build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides automatic generation of\n`version.ml`, `.merlin`, `META`, `opam`, API documentation; install\nmanagement; easy integration with external libraries, test runners,\nand modular builds.\n\nIn particular, Dune uniformly handles components regardless whether\nthey live in, or out-of-tree. This greatly simplifies cases where a\nplugin [or CoqIde] is checked out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can thus be used as a\nmore flexible `coq_makefile` replacement.\n\nFor now we provide experimental support for a Dune build. In order to\nbuild Coq + the standard library with Dune type:\n\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_ by default. This\npatch provides a `dune` library specification for each Coq source\ncomponent, mirroring the existing `META` setup.\n\nDune doesn't support custom build rules [yet], so in order to properly\nbuild the `.vo` files, we provide a small helper script\n`tools/coq_dune.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files. This tool is akin to `coq_makefile`.\n\nDue to this pitfall, the build process has to proceed in three stages:\n1) build `coqdep` and `coq_dune`; 2) generate `dune` files for\n`theories` and `plugins`; 3) perform a regular build, now that all\ntargets are in scope.\n\nThe current, make-based build system is unmodified by this PR and kept\nas the default option.\n\nThe main TODOs are written down in issue #xxxx\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nconfigure: Implement dune / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for dune.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n```\n$ /usr/bin/time make DUNEOPT=\"-j 1000\" -f Makefile.dune states\n59.50user 18.81system 0:29.83elapsed 262%CPU (0avgtext+0avgdata 302996maxresident)k\n0inputs+646632outputs (0major+4893811minor)pagefaults 0swaps\n\n$ /usr/bin/time sh -c \"./configure -local -native-compiler no && make -j states\"\n88.21user 23.65system 0:32.96elapsed 339%CPU (0avgtext+0avgdata 304992maxresident)k\n0inputs+1051680outputs (0major+5300680minor)pagefaults 0swaps\n```\n\n- 4857\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-08-28T10:33:30.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/774286b6837d04931719fcf74eb666e64952b0a8"},"pipeline":{"id":28838176,"iid":2717,"project_id":6138686,"sha":"774286b6837d04931719fcf74eb666e64952b0a8","ref":"pr-6857","status":"success","source":"push","created_at":"2018-08-28T08:34:10.297Z","updated_at":"2018-08-28T10:50:01.475Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/28838176"},"web_url":"https://gitlab.com/coq/coq/-/jobs/92616144","artifacts":[{"file_type":"trace","size":101480,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":92616143,"status":"success","stage":"test","name":"validate:edge+flambda","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-08-28T08:34:10.699Z","started_at":"2018-08-28T09:03:00.710Z","finished_at":"2018-08-28T09:11:37.697Z","duration":516.98668,"queued_duration":0.939289,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"774286b6837d04931719fcf74eb666e64952b0a8","short_id":"774286b6","created_at":"2018-08-28T10:33:30.000+02:00","parent_ids":["d0901e424a2ade85fb070eca83384e61070eec5b"],"title":"[build] Preliminary support for building with `dune`.","message":"[build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides automatic generation of\n`version.ml`, `.merlin`, `META`, `opam`, API documentation; install\nmanagement; easy integration with external libraries, test runners,\nand modular builds.\n\nIn particular, Dune uniformly handles components regardless whether\nthey live in, or out-of-tree. This greatly simplifies cases where a\nplugin [or CoqIde] is checked out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can thus be used as a\nmore flexible `coq_makefile` replacement.\n\nFor now we provide experimental support for a Dune build. In order to\nbuild Coq + the standard library with Dune type:\n\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_ by default. This\npatch provides a `dune` library specification for each Coq source\ncomponent, mirroring the existing `META` setup.\n\nDune doesn't support custom build rules [yet], so in order to properly\nbuild the `.vo` files, we provide a small helper script\n`tools/coq_dune.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files. This tool is akin to `coq_makefile`.\n\nDue to this pitfall, the build process has to proceed in three stages:\n1) build `coqdep` and `coq_dune`; 2) generate `dune` files for\n`theories` and `plugins`; 3) perform a regular build, now that all\ntargets are in scope.\n\nThe current, make-based build system is unmodified by this PR and kept\nas the default option.\n\nThe main TODOs are written down in issue #xxxx\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nconfigure: Implement dune / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for dune.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n```\n$ /usr/bin/time make DUNEOPT=\"-j 1000\" -f Makefile.dune states\n59.50user 18.81system 0:29.83elapsed 262%CPU (0avgtext+0avgdata 302996maxresident)k\n0inputs+646632outputs (0major+4893811minor)pagefaults 0swaps\n\n$ /usr/bin/time sh -c \"./configure -local -native-compiler no && make -j states\"\n88.21user 23.65system 0:32.96elapsed 339%CPU (0avgtext+0avgdata 304992maxresident)k\n0inputs+1051680outputs (0major+5300680minor)pagefaults 0swaps\n```\n\n- 4857\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-08-28T10:33:30.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/774286b6837d04931719fcf74eb666e64952b0a8"},"pipeline":{"id":28838176,"iid":2717,"project_id":6138686,"sha":"774286b6837d04931719fcf74eb666e64952b0a8","ref":"pr-6857","status":"success","source":"push","created_at":"2018-08-28T08:34:10.297Z","updated_at":"2018-08-28T10:50:01.475Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/28838176"},"web_url":"https://gitlab.com/coq/coq/-/jobs/92616143","artifacts":[{"file_type":"trace","size":26575,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":92616142,"status":"success","stage":"test","name":"validate:edge","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-08-28T08:34:10.679Z","started_at":"2018-08-28T09:03:01.130Z","finished_at":"2018-08-28T09:11:25.529Z","duration":504.39836,"queued_duration":0.74405,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"774286b6837d04931719fcf74eb666e64952b0a8","short_id":"774286b6","created_at":"2018-08-28T10:33:30.000+02:00","parent_ids":["d0901e424a2ade85fb070eca83384e61070eec5b"],"title":"[build] Preliminary support for building with `dune`.","message":"[build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides automatic generation of\n`version.ml`, `.merlin`, `META`, `opam`, API documentation; install\nmanagement; easy integration with external libraries, test runners,\nand modular builds.\n\nIn particular, Dune uniformly handles components regardless whether\nthey live in, or out-of-tree. This greatly simplifies cases where a\nplugin [or CoqIde] is checked out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can thus be used as a\nmore flexible `coq_makefile` replacement.\n\nFor now we provide experimental support for a Dune build. In order to\nbuild Coq + the standard library with Dune type:\n\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_ by default. This\npatch provides a `dune` library specification for each Coq source\ncomponent, mirroring the existing `META` setup.\n\nDune doesn't support custom build rules [yet], so in order to properly\nbuild the `.vo` files, we provide a small helper script\n`tools/coq_dune.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files. This tool is akin to `coq_makefile`.\n\nDue to this pitfall, the build process has to proceed in three stages:\n1) build `coqdep` and `coq_dune`; 2) generate `dune` files for\n`theories` and `plugins`; 3) perform a regular build, now that all\ntargets are in scope.\n\nThe current, make-based build system is unmodified by this PR and kept\nas the default option.\n\nThe main TODOs are written down in issue #xxxx\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nconfigure: Implement dune / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for dune.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n```\n$ /usr/bin/time make DUNEOPT=\"-j 1000\" -f Makefile.dune states\n59.50user 18.81system 0:29.83elapsed 262%CPU (0avgtext+0avgdata 302996maxresident)k\n0inputs+646632outputs (0major+4893811minor)pagefaults 0swaps\n\n$ /usr/bin/time sh -c \"./configure -local -native-compiler no && make -j states\"\n88.21user 23.65system 0:32.96elapsed 339%CPU (0avgtext+0avgdata 304992maxresident)k\n0inputs+1051680outputs (0major+5300680minor)pagefaults 0swaps\n```\n\n- 4857\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-08-28T10:33:30.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/774286b6837d04931719fcf74eb666e64952b0a8"},"pipeline":{"id":28838176,"iid":2717,"project_id":6138686,"sha":"774286b6837d04931719fcf74eb666e64952b0a8","ref":"pr-6857","status":"success","source":"push","created_at":"2018-08-28T08:34:10.297Z","updated_at":"2018-08-28T10:50:01.475Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/28838176"},"web_url":"https://gitlab.com/coq/coq/-/jobs/92616142","artifacts":[{"file_type":"trace","size":25481,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":92616141,"status":"success","stage":"test","name":"validate:base+32bit","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-08-28T08:34:10.659Z","started_at":"2018-08-28T09:03:07.815Z","finished_at":"2018-08-28T09:11:57.304Z","duration":529.488938,"queued_duration":6.817174,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"774286b6837d04931719fcf74eb666e64952b0a8","short_id":"774286b6","created_at":"2018-08-28T10:33:30.000+02:00","parent_ids":["d0901e424a2ade85fb070eca83384e61070eec5b"],"title":"[build] Preliminary support for building with `dune`.","message":"[build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides automatic generation of\n`version.ml`, `.merlin`, `META`, `opam`, API documentation; install\nmanagement; easy integration with external libraries, test runners,\nand modular builds.\n\nIn particular, Dune uniformly handles components regardless whether\nthey live in, or out-of-tree. This greatly simplifies cases where a\nplugin [or CoqIde] is checked out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can thus be used as a\nmore flexible `coq_makefile` replacement.\n\nFor now we provide experimental support for a Dune build. In order to\nbuild Coq + the standard library with Dune type:\n\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_ by default. This\npatch provides a `dune` library specification for each Coq source\ncomponent, mirroring the existing `META` setup.\n\nDune doesn't support custom build rules [yet], so in order to properly\nbuild the `.vo` files, we provide a small helper script\n`tools/coq_dune.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files. This tool is akin to `coq_makefile`.\n\nDue to this pitfall, the build process has to proceed in three stages:\n1) build `coqdep` and `coq_dune`; 2) generate `dune` files for\n`theories` and `plugins`; 3) perform a regular build, now that all\ntargets are in scope.\n\nThe current, make-based build system is unmodified by this PR and kept\nas the default option.\n\nThe main TODOs are written down in issue #xxxx\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nconfigure: Implement dune / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for dune.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n```\n$ /usr/bin/time make DUNEOPT=\"-j 1000\" -f Makefile.dune states\n59.50user 18.81system 0:29.83elapsed 262%CPU (0avgtext+0avgdata 302996maxresident)k\n0inputs+646632outputs (0major+4893811minor)pagefaults 0swaps\n\n$ /usr/bin/time sh -c \"./configure -local -native-compiler no && make -j states\"\n88.21user 23.65system 0:32.96elapsed 339%CPU (0avgtext+0avgdata 304992maxresident)k\n0inputs+1051680outputs (0major+5300680minor)pagefaults 0swaps\n```\n\n- 4857\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-08-28T10:33:30.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/774286b6837d04931719fcf74eb666e64952b0a8"},"pipeline":{"id":28838176,"iid":2717,"project_id":6138686,"sha":"774286b6837d04931719fcf74eb666e64952b0a8","ref":"pr-6857","status":"success","source":"push","created_at":"2018-08-28T08:34:10.297Z","updated_at":"2018-08-28T10:50:01.475Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/28838176"},"web_url":"https://gitlab.com/coq/coq/-/jobs/92616141","artifacts":[{"file_type":"trace","size":25479,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":92616140,"status":"success","stage":"test","name":"validate:base","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-08-28T08:34:10.639Z","started_at":"2018-08-28T09:03:07.769Z","finished_at":"2018-08-28T09:11:34.601Z","duration":506.831294,"queued_duration":5.832327,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"774286b6837d04931719fcf74eb666e64952b0a8","short_id":"774286b6","created_at":"2018-08-28T10:33:30.000+02:00","parent_ids":["d0901e424a2ade85fb070eca83384e61070eec5b"],"title":"[build] Preliminary support for building with `dune`.","message":"[build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides automatic generation of\n`version.ml`, `.merlin`, `META`, `opam`, API documentation; install\nmanagement; easy integration with external libraries, test runners,\nand modular builds.\n\nIn particular, Dune uniformly handles components regardless whether\nthey live in, or out-of-tree. This greatly simplifies cases where a\nplugin [or CoqIde] is checked out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can thus be used as a\nmore flexible `coq_makefile` replacement.\n\nFor now we provide experimental support for a Dune build. In order to\nbuild Coq + the standard library with Dune type:\n\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_ by default. This\npatch provides a `dune` library specification for each Coq source\ncomponent, mirroring the existing `META` setup.\n\nDune doesn't support custom build rules [yet], so in order to properly\nbuild the `.vo` files, we provide a small helper script\n`tools/coq_dune.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files. This tool is akin to `coq_makefile`.\n\nDue to this pitfall, the build process has to proceed in three stages:\n1) build `coqdep` and `coq_dune`; 2) generate `dune` files for\n`theories` and `plugins`; 3) perform a regular build, now that all\ntargets are in scope.\n\nThe current, make-based build system is unmodified by this PR and kept\nas the default option.\n\nThe main TODOs are written down in issue #xxxx\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nconfigure: Implement dune / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for dune.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n```\n$ /usr/bin/time make DUNEOPT=\"-j 1000\" -f Makefile.dune states\n59.50user 18.81system 0:29.83elapsed 262%CPU (0avgtext+0avgdata 302996maxresident)k\n0inputs+646632outputs (0major+4893811minor)pagefaults 0swaps\n\n$ /usr/bin/time sh -c \"./configure -local -native-compiler no && make -j states\"\n88.21user 23.65system 0:32.96elapsed 339%CPU (0avgtext+0avgdata 304992maxresident)k\n0inputs+1051680outputs (0major+5300680minor)pagefaults 0swaps\n```\n\n- 4857\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-08-28T10:33:30.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/774286b6837d04931719fcf74eb666e64952b0a8"},"pipeline":{"id":28838176,"iid":2717,"project_id":6138686,"sha":"774286b6837d04931719fcf74eb666e64952b0a8","ref":"pr-6857","status":"success","source":"push","created_at":"2018-08-28T08:34:10.297Z","updated_at":"2018-08-28T10:50:01.475Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/28838176"},"web_url":"https://gitlab.com/coq/coq/-/jobs/92616140","artifacts":[{"file_type":"trace","size":26455,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":92616139,"status":"success","stage":"test","name":"test-suite:edge+flambda","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-08-28T08:34:10.617Z","started_at":"2018-08-28T09:03:04.499Z","finished_at":"2018-08-28T09:14:44.988Z","duration":700.488662,"queued_duration":1.772868,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"774286b6837d04931719fcf74eb666e64952b0a8","short_id":"774286b6","created_at":"2018-08-28T10:33:30.000+02:00","parent_ids":["d0901e424a2ade85fb070eca83384e61070eec5b"],"title":"[build] Preliminary support for building with `dune`.","message":"[build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides automatic generation of\n`version.ml`, `.merlin`, `META`, `opam`, API documentation; install\nmanagement; easy integration with external libraries, test runners,\nand modular builds.\n\nIn particular, Dune uniformly handles components regardless whether\nthey live in, or out-of-tree. This greatly simplifies cases where a\nplugin [or CoqIde] is checked out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can thus be used as a\nmore flexible `coq_makefile` replacement.\n\nFor now we provide experimental support for a Dune build. In order to\nbuild Coq + the standard library with Dune type:\n\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_ by default. This\npatch provides a `dune` library specification for each Coq source\ncomponent, mirroring the existing `META` setup.\n\nDune doesn't support custom build rules [yet], so in order to properly\nbuild the `.vo` files, we provide a small helper script\n`tools/coq_dune.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files. This tool is akin to `coq_makefile`.\n\nDue to this pitfall, the build process has to proceed in three stages:\n1) build `coqdep` and `coq_dune`; 2) generate `dune` files for\n`theories` and `plugins`; 3) perform a regular build, now that all\ntargets are in scope.\n\nThe current, make-based build system is unmodified by this PR and kept\nas the default option.\n\nThe main TODOs are written down in issue #xxxx\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nconfigure: Implement dune / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for dune.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n```\n$ /usr/bin/time make DUNEOPT=\"-j 1000\" -f Makefile.dune states\n59.50user 18.81system 0:29.83elapsed 262%CPU (0avgtext+0avgdata 302996maxresident)k\n0inputs+646632outputs (0major+4893811minor)pagefaults 0swaps\n\n$ /usr/bin/time sh -c \"./configure -local -native-compiler no && make -j states\"\n88.21user 23.65system 0:32.96elapsed 339%CPU (0avgtext+0avgdata 304992maxresident)k\n0inputs+1051680outputs (0major+5300680minor)pagefaults 0swaps\n```\n\n- 4857\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-08-28T10:33:30.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/774286b6837d04931719fcf74eb666e64952b0a8"},"pipeline":{"id":28838176,"iid":2717,"project_id":6138686,"sha":"774286b6837d04931719fcf74eb666e64952b0a8","ref":"pr-6857","status":"success","source":"push","created_at":"2018-08-28T08:34:10.297Z","updated_at":"2018-08-28T10:50:01.475Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/28838176"},"web_url":"https://gitlab.com/coq/coq/-/jobs/92616139","artifacts":[{"file_type":"trace","size":70354,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":92616138,"status":"success","stage":"test","name":"test-suite:edge","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-08-28T08:34:10.595Z","started_at":"2018-08-28T09:03:04.001Z","finished_at":"2018-08-28T09:13:13.244Z","duration":609.243281,"queued_duration":0.693748,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"774286b6837d04931719fcf74eb666e64952b0a8","short_id":"774286b6","created_at":"2018-08-28T10:33:30.000+02:00","parent_ids":["d0901e424a2ade85fb070eca83384e61070eec5b"],"title":"[build] Preliminary support for building with `dune`.","message":"[build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides automatic generation of\n`version.ml`, `.merlin`, `META`, `opam`, API documentation; install\nmanagement; easy integration with external libraries, test runners,\nand modular builds.\n\nIn particular, Dune uniformly handles components regardless whether\nthey live in, or out-of-tree. This greatly simplifies cases where a\nplugin [or CoqIde] is checked out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can thus be used as a\nmore flexible `coq_makefile` replacement.\n\nFor now we provide experimental support for a Dune build. In order to\nbuild Coq + the standard library with Dune type:\n\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_ by default. This\npatch provides a `dune` library specification for each Coq source\ncomponent, mirroring the existing `META` setup.\n\nDune doesn't support custom build rules [yet], so in order to properly\nbuild the `.vo` files, we provide a small helper script\n`tools/coq_dune.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files. This tool is akin to `coq_makefile`.\n\nDue to this pitfall, the build process has to proceed in three stages:\n1) build `coqdep` and `coq_dune`; 2) generate `dune` files for\n`theories` and `plugins`; 3) perform a regular build, now that all\ntargets are in scope.\n\nThe current, make-based build system is unmodified by this PR and kept\nas the default option.\n\nThe main TODOs are written down in issue #xxxx\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nconfigure: Implement dune / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for dune.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n```\n$ /usr/bin/time make DUNEOPT=\"-j 1000\" -f Makefile.dune states\n59.50user 18.81system 0:29.83elapsed 262%CPU (0avgtext+0avgdata 302996maxresident)k\n0inputs+646632outputs (0major+4893811minor)pagefaults 0swaps\n\n$ /usr/bin/time sh -c \"./configure -local -native-compiler no && make -j states\"\n88.21user 23.65system 0:32.96elapsed 339%CPU (0avgtext+0avgdata 304992maxresident)k\n0inputs+1051680outputs (0major+5300680minor)pagefaults 0swaps\n```\n\n- 4857\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-08-28T10:33:30.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/774286b6837d04931719fcf74eb666e64952b0a8"},"pipeline":{"id":28838176,"iid":2717,"project_id":6138686,"sha":"774286b6837d04931719fcf74eb666e64952b0a8","ref":"pr-6857","status":"success","source":"push","created_at":"2018-08-28T08:34:10.297Z","updated_at":"2018-08-28T10:50:01.475Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/28838176"},"web_url":"https://gitlab.com/coq/coq/-/jobs/92616138","artifacts":[{"file_type":"trace","size":69502,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":92616136,"status":"success","stage":"test","name":"test-suite:base+32bit","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-08-28T08:34:10.571Z","started_at":"2018-08-28T09:03:07.500Z","finished_at":"2018-08-28T09:12:49.736Z","duration":582.235606,"queued_duration":3.459608,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"774286b6837d04931719fcf74eb666e64952b0a8","short_id":"774286b6","created_at":"2018-08-28T10:33:30.000+02:00","parent_ids":["d0901e424a2ade85fb070eca83384e61070eec5b"],"title":"[build] Preliminary support for building with `dune`.","message":"[build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides automatic generation of\n`version.ml`, `.merlin`, `META`, `opam`, API documentation; install\nmanagement; easy integration with external libraries, test runners,\nand modular builds.\n\nIn particular, Dune uniformly handles components regardless whether\nthey live in, or out-of-tree. This greatly simplifies cases where a\nplugin [or CoqIde] is checked out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can thus be used as a\nmore flexible `coq_makefile` replacement.\n\nFor now we provide experimental support for a Dune build. In order to\nbuild Coq + the standard library with Dune type:\n\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_ by default. This\npatch provides a `dune` library specification for each Coq source\ncomponent, mirroring the existing `META` setup.\n\nDune doesn't support custom build rules [yet], so in order to properly\nbuild the `.vo` files, we provide a small helper script\n`tools/coq_dune.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files. This tool is akin to `coq_makefile`.\n\nDue to this pitfall, the build process has to proceed in three stages:\n1) build `coqdep` and `coq_dune`; 2) generate `dune` files for\n`theories` and `plugins`; 3) perform a regular build, now that all\ntargets are in scope.\n\nThe current, make-based build system is unmodified by this PR and kept\nas the default option.\n\nThe main TODOs are written down in issue #xxxx\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nconfigure: Implement dune / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for dune.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n```\n$ /usr/bin/time make DUNEOPT=\"-j 1000\" -f Makefile.dune states\n59.50user 18.81system 0:29.83elapsed 262%CPU (0avgtext+0avgdata 302996maxresident)k\n0inputs+646632outputs (0major+4893811minor)pagefaults 0swaps\n\n$ /usr/bin/time sh -c \"./configure -local -native-compiler no && make -j states\"\n88.21user 23.65system 0:32.96elapsed 339%CPU (0avgtext+0avgdata 304992maxresident)k\n0inputs+1051680outputs (0major+5300680minor)pagefaults 0swaps\n```\n\n- 4857\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-08-28T10:33:30.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/774286b6837d04931719fcf74eb666e64952b0a8"},"pipeline":{"id":28838176,"iid":2717,"project_id":6138686,"sha":"774286b6837d04931719fcf74eb666e64952b0a8","ref":"pr-6857","status":"success","source":"push","created_at":"2018-08-28T08:34:10.297Z","updated_at":"2018-08-28T10:50:01.475Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/28838176"},"web_url":"https://gitlab.com/coq/coq/-/jobs/92616136","artifacts":[{"file_type":"trace","size":69500,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":92616134,"status":"success","stage":"test","name":"test-suite:base","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-08-28T08:34:10.549Z","started_at":"2018-08-28T09:03:05.433Z","finished_at":"2018-08-28T09:15:11.431Z","duration":725.998089,"queued_duration":0.649854,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"774286b6837d04931719fcf74eb666e64952b0a8","short_id":"774286b6","created_at":"2018-08-28T10:33:30.000+02:00","parent_ids":["d0901e424a2ade85fb070eca83384e61070eec5b"],"title":"[build] Preliminary support for building with `dune`.","message":"[build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides automatic generation of\n`version.ml`, `.merlin`, `META`, `opam`, API documentation; install\nmanagement; easy integration with external libraries, test runners,\nand modular builds.\n\nIn particular, Dune uniformly handles components regardless whether\nthey live in, or out-of-tree. This greatly simplifies cases where a\nplugin [or CoqIde] is checked out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can thus be used as a\nmore flexible `coq_makefile` replacement.\n\nFor now we provide experimental support for a Dune build. In order to\nbuild Coq + the standard library with Dune type:\n\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_ by default. This\npatch provides a `dune` library specification for each Coq source\ncomponent, mirroring the existing `META` setup.\n\nDune doesn't support custom build rules [yet], so in order to properly\nbuild the `.vo` files, we provide a small helper script\n`tools/coq_dune.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files. This tool is akin to `coq_makefile`.\n\nDue to this pitfall, the build process has to proceed in three stages:\n1) build `coqdep` and `coq_dune`; 2) generate `dune` files for\n`theories` and `plugins`; 3) perform a regular build, now that all\ntargets are in scope.\n\nThe current, make-based build system is unmodified by this PR and kept\nas the default option.\n\nThe main TODOs are written down in issue #xxxx\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nconfigure: Implement dune / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for dune.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n```\n$ /usr/bin/time make DUNEOPT=\"-j 1000\" -f Makefile.dune states\n59.50user 18.81system 0:29.83elapsed 262%CPU (0avgtext+0avgdata 302996maxresident)k\n0inputs+646632outputs (0major+4893811minor)pagefaults 0swaps\n\n$ /usr/bin/time sh -c \"./configure -local -native-compiler no && make -j states\"\n88.21user 23.65system 0:32.96elapsed 339%CPU (0avgtext+0avgdata 304992maxresident)k\n0inputs+1051680outputs (0major+5300680minor)pagefaults 0swaps\n```\n\n- 4857\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-08-28T10:33:30.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/774286b6837d04931719fcf74eb666e64952b0a8"},"pipeline":{"id":28838176,"iid":2717,"project_id":6138686,"sha":"774286b6837d04931719fcf74eb666e64952b0a8","ref":"pr-6857","status":"success","source":"push","created_at":"2018-08-28T08:34:10.297Z","updated_at":"2018-08-28T10:50:01.475Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/28838176"},"web_url":"https://gitlab.com/coq/coq/-/jobs/92616134","artifacts":[{"file_type":"trace","size":70413,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":92616132,"status":"success","stage":"test","name":"documentation","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-08-28T08:34:10.527Z","started_at":"2018-08-28T09:03:06.082Z","finished_at":"2018-08-28T09:08:53.347Z","duration":347.26472,"queued_duration":0.620397,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"774286b6837d04931719fcf74eb666e64952b0a8","short_id":"774286b6","created_at":"2018-08-28T10:33:30.000+02:00","parent_ids":["d0901e424a2ade85fb070eca83384e61070eec5b"],"title":"[build] Preliminary support for building with `dune`.","message":"[build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides automatic generation of\n`version.ml`, `.merlin`, `META`, `opam`, API documentation; install\nmanagement; easy integration with external libraries, test runners,\nand modular builds.\n\nIn particular, Dune uniformly handles components regardless whether\nthey live in, or out-of-tree. This greatly simplifies cases where a\nplugin [or CoqIde] is checked out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can thus be used as a\nmore flexible `coq_makefile` replacement.\n\nFor now we provide experimental support for a Dune build. In order to\nbuild Coq + the standard library with Dune type:\n\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_ by default. This\npatch provides a `dune` library specification for each Coq source\ncomponent, mirroring the existing `META` setup.\n\nDune doesn't support custom build rules [yet], so in order to properly\nbuild the `.vo` files, we provide a small helper script\n`tools/coq_dune.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files. This tool is akin to `coq_makefile`.\n\nDue to this pitfall, the build process has to proceed in three stages:\n1) build `coqdep` and `coq_dune`; 2) generate `dune` files for\n`theories` and `plugins`; 3) perform a regular build, now that all\ntargets are in scope.\n\nThe current, make-based build system is unmodified by this PR and kept\nas the default option.\n\nThe main TODOs are written down in issue #xxxx\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nconfigure: Implement dune / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for dune.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n```\n$ /usr/bin/time make DUNEOPT=\"-j 1000\" -f Makefile.dune states\n59.50user 18.81system 0:29.83elapsed 262%CPU (0avgtext+0avgdata 302996maxresident)k\n0inputs+646632outputs (0major+4893811minor)pagefaults 0swaps\n\n$ /usr/bin/time sh -c \"./configure -local -native-compiler no && make -j states\"\n88.21user 23.65system 0:32.96elapsed 339%CPU (0avgtext+0avgdata 304992maxresident)k\n0inputs+1051680outputs (0major+5300680minor)pagefaults 0swaps\n```\n\n- 4857\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-08-28T10:33:30.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/774286b6837d04931719fcf74eb666e64952b0a8"},"pipeline":{"id":28838176,"iid":2717,"project_id":6138686,"sha":"774286b6837d04931719fcf74eb666e64952b0a8","ref":"pr-6857","status":"success","source":"push","created_at":"2018-08-28T08:34:10.297Z","updated_at":"2018-08-28T10:50:01.475Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/28838176"},"web_url":"https://gitlab.com/coq/coq/-/jobs/92616132","artifacts":[{"file_type":"trace","size":32275,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":92616130,"status":"success","stage":"test","name":"pkg:nix","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-08-28T08:34:10.476Z","started_at":"2018-08-28T09:03:06.851Z","finished_at":"2018-08-28T09:29:27.734Z","duration":1580.882651,"queued_duration":0.637516,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"774286b6837d04931719fcf74eb666e64952b0a8","short_id":"774286b6","created_at":"2018-08-28T10:33:30.000+02:00","parent_ids":["d0901e424a2ade85fb070eca83384e61070eec5b"],"title":"[build] Preliminary support for building with `dune`.","message":"[build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides automatic generation of\n`version.ml`, `.merlin`, `META`, `opam`, API documentation; install\nmanagement; easy integration with external libraries, test runners,\nand modular builds.\n\nIn particular, Dune uniformly handles components regardless whether\nthey live in, or out-of-tree. This greatly simplifies cases where a\nplugin [or CoqIde] is checked out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can thus be used as a\nmore flexible `coq_makefile` replacement.\n\nFor now we provide experimental support for a Dune build. In order to\nbuild Coq + the standard library with Dune type:\n\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_ by default. This\npatch provides a `dune` library specification for each Coq source\ncomponent, mirroring the existing `META` setup.\n\nDune doesn't support custom build rules [yet], so in order to properly\nbuild the `.vo` files, we provide a small helper script\n`tools/coq_dune.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files. This tool is akin to `coq_makefile`.\n\nDue to this pitfall, the build process has to proceed in three stages:\n1) build `coqdep` and `coq_dune`; 2) generate `dune` files for\n`theories` and `plugins`; 3) perform a regular build, now that all\ntargets are in scope.\n\nThe current, make-based build system is unmodified by this PR and kept\nas the default option.\n\nThe main TODOs are written down in issue #xxxx\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nconfigure: Implement dune / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for dune.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n```\n$ /usr/bin/time make DUNEOPT=\"-j 1000\" -f Makefile.dune states\n59.50user 18.81system 0:29.83elapsed 262%CPU (0avgtext+0avgdata 302996maxresident)k\n0inputs+646632outputs (0major+4893811minor)pagefaults 0swaps\n\n$ /usr/bin/time sh -c \"./configure -local -native-compiler no && make -j states\"\n88.21user 23.65system 0:32.96elapsed 339%CPU (0avgtext+0avgdata 304992maxresident)k\n0inputs+1051680outputs (0major+5300680minor)pagefaults 0swaps\n```\n\n- 4857\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-08-28T10:33:30.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/774286b6837d04931719fcf74eb666e64952b0a8"},"pipeline":{"id":28838176,"iid":2717,"project_id":6138686,"sha":"774286b6837d04931719fcf74eb666e64952b0a8","ref":"pr-6857","status":"success","source":"push","created_at":"2018-08-28T08:34:10.297Z","updated_at":"2018-08-28T10:50:01.475Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/28838176"},"web_url":"https://gitlab.com/coq/coq/-/jobs/92616130","artifacts":[{"file_type":"trace","size":471037,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":92616128,"status":"success","stage":"test","name":"windows64","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-08-28T08:34:10.444Z","started_at":"2018-08-28T09:03:16.545Z","finished_at":"2018-08-28T10:19:46.247Z","duration":4589.701605,"queued_duration":9.783688,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"774286b6837d04931719fcf74eb666e64952b0a8","short_id":"774286b6","created_at":"2018-08-28T10:33:30.000+02:00","parent_ids":["d0901e424a2ade85fb070eca83384e61070eec5b"],"title":"[build] Preliminary support for building with `dune`.","message":"[build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides automatic generation of\n`version.ml`, `.merlin`, `META`, `opam`, API documentation; install\nmanagement; easy integration with external libraries, test runners,\nand modular builds.\n\nIn particular, Dune uniformly handles components regardless whether\nthey live in, or out-of-tree. This greatly simplifies cases where a\nplugin [or CoqIde] is checked out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can thus be used as a\nmore flexible `coq_makefile` replacement.\n\nFor now we provide experimental support for a Dune build. In order to\nbuild Coq + the standard library with Dune type:\n\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_ by default. This\npatch provides a `dune` library specification for each Coq source\ncomponent, mirroring the existing `META` setup.\n\nDune doesn't support custom build rules [yet], so in order to properly\nbuild the `.vo` files, we provide a small helper script\n`tools/coq_dune.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files. This tool is akin to `coq_makefile`.\n\nDue to this pitfall, the build process has to proceed in three stages:\n1) build `coqdep` and `coq_dune`; 2) generate `dune` files for\n`theories` and `plugins`; 3) perform a regular build, now that all\ntargets are in scope.\n\nThe current, make-based build system is unmodified by this PR and kept\nas the default option.\n\nThe main TODOs are written down in issue #xxxx\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nconfigure: Implement dune / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for dune.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n```\n$ /usr/bin/time make DUNEOPT=\"-j 1000\" -f Makefile.dune states\n59.50user 18.81system 0:29.83elapsed 262%CPU (0avgtext+0avgdata 302996maxresident)k\n0inputs+646632outputs (0major+4893811minor)pagefaults 0swaps\n\n$ /usr/bin/time sh -c \"./configure -local -native-compiler no && make -j states\"\n88.21user 23.65system 0:32.96elapsed 339%CPU (0avgtext+0avgdata 304992maxresident)k\n0inputs+1051680outputs (0major+5300680minor)pagefaults 0swaps\n```\n\n- 4857\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-08-28T10:33:30.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/774286b6837d04931719fcf74eb666e64952b0a8"},"pipeline":{"id":28838176,"iid":2717,"project_id":6138686,"sha":"774286b6837d04931719fcf74eb666e64952b0a8","ref":"pr-6857","status":"success","source":"push","created_at":"2018-08-28T08:34:10.297Z","updated_at":"2018-08-28T10:50:01.475Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/28838176"},"web_url":"https://gitlab.com/coq/coq/-/jobs/92616128","artifacts":[{"file_type":"trace","size":3883568,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":"2018-09-04T10:19:07.662Z","tag_list":["windows"]}
{"id":92616126,"status":"success","stage":"build","name":"build:egde:dune","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-08-28T08:34:10.413Z","started_at":"2018-08-28T08:34:12.896Z","finished_at":"2018-08-28T08:49:00.463Z","duration":887.567285,"queued_duration":1.075937,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"774286b6837d04931719fcf74eb666e64952b0a8","short_id":"774286b6","created_at":"2018-08-28T10:33:30.000+02:00","parent_ids":["d0901e424a2ade85fb070eca83384e61070eec5b"],"title":"[build] Preliminary support for building with `dune`.","message":"[build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides automatic generation of\n`version.ml`, `.merlin`, `META`, `opam`, API documentation; install\nmanagement; easy integration with external libraries, test runners,\nand modular builds.\n\nIn particular, Dune uniformly handles components regardless whether\nthey live in, or out-of-tree. This greatly simplifies cases where a\nplugin [or CoqIde] is checked out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can thus be used as a\nmore flexible `coq_makefile` replacement.\n\nFor now we provide experimental support for a Dune build. In order to\nbuild Coq + the standard library with Dune type:\n\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_ by default. This\npatch provides a `dune` library specification for each Coq source\ncomponent, mirroring the existing `META` setup.\n\nDune doesn't support custom build rules [yet], so in order to properly\nbuild the `.vo` files, we provide a small helper script\n`tools/coq_dune.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files. This tool is akin to `coq_makefile`.\n\nDue to this pitfall, the build process has to proceed in three stages:\n1) build `coqdep` and `coq_dune`; 2) generate `dune` files for\n`theories` and `plugins`; 3) perform a regular build, now that all\ntargets are in scope.\n\nThe current, make-based build system is unmodified by this PR and kept\nas the default option.\n\nThe main TODOs are written down in issue #xxxx\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nconfigure: Implement dune / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for dune.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n```\n$ /usr/bin/time make DUNEOPT=\"-j 1000\" -f Makefile.dune states\n59.50user 18.81system 0:29.83elapsed 262%CPU (0avgtext+0avgdata 302996maxresident)k\n0inputs+646632outputs (0major+4893811minor)pagefaults 0swaps\n\n$ /usr/bin/time sh -c \"./configure -local -native-compiler no && make -j states\"\n88.21user 23.65system 0:32.96elapsed 339%CPU (0avgtext+0avgdata 304992maxresident)k\n0inputs+1051680outputs (0major+5300680minor)pagefaults 0swaps\n```\n\n- 4857\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-08-28T10:33:30.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/774286b6837d04931719fcf74eb666e64952b0a8"},"pipeline":{"id":28838176,"iid":2717,"project_id":6138686,"sha":"774286b6837d04931719fcf74eb666e64952b0a8","ref":"pr-6857","status":"success","source":"push","created_at":"2018-08-28T08:34:10.297Z","updated_at":"2018-08-28T10:50:01.475Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/28838176"},"web_url":"https://gitlab.com/coq/coq/-/jobs/92616126","artifacts":[{"file_type":"trace","size":24429,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2018-09-04T08:48:52.796Z","tag_list":[]}
{"id":92616124,"status":"success","stage":"build","name":"build:edge+flambda","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-08-28T08:34:10.388Z","started_at":"2018-08-28T08:34:12.643Z","finished_at":"2018-08-28T09:02:30.054Z","duration":1697.411874,"queued_duration":0.737102,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"774286b6837d04931719fcf74eb666e64952b0a8","short_id":"774286b6","created_at":"2018-08-28T10:33:30.000+02:00","parent_ids":["d0901e424a2ade85fb070eca83384e61070eec5b"],"title":"[build] Preliminary support for building with `dune`.","message":"[build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides automatic generation of\n`version.ml`, `.merlin`, `META`, `opam`, API documentation; install\nmanagement; easy integration with external libraries, test runners,\nand modular builds.\n\nIn particular, Dune uniformly handles components regardless whether\nthey live in, or out-of-tree. This greatly simplifies cases where a\nplugin [or CoqIde] is checked out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can thus be used as a\nmore flexible `coq_makefile` replacement.\n\nFor now we provide experimental support for a Dune build. In order to\nbuild Coq + the standard library with Dune type:\n\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_ by default. This\npatch provides a `dune` library specification for each Coq source\ncomponent, mirroring the existing `META` setup.\n\nDune doesn't support custom build rules [yet], so in order to properly\nbuild the `.vo` files, we provide a small helper script\n`tools/coq_dune.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files. This tool is akin to `coq_makefile`.\n\nDue to this pitfall, the build process has to proceed in three stages:\n1) build `coqdep` and `coq_dune`; 2) generate `dune` files for\n`theories` and `plugins`; 3) perform a regular build, now that all\ntargets are in scope.\n\nThe current, make-based build system is unmodified by this PR and kept\nas the default option.\n\nThe main TODOs are written down in issue #xxxx\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nconfigure: Implement dune / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for dune.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n```\n$ /usr/bin/time make DUNEOPT=\"-j 1000\" -f Makefile.dune states\n59.50user 18.81system 0:29.83elapsed 262%CPU (0avgtext+0avgdata 302996maxresident)k\n0inputs+646632outputs (0major+4893811minor)pagefaults 0swaps\n\n$ /usr/bin/time sh -c \"./configure -local -native-compiler no && make -j states\"\n88.21user 23.65system 0:32.96elapsed 339%CPU (0avgtext+0avgdata 304992maxresident)k\n0inputs+1051680outputs (0major+5300680minor)pagefaults 0swaps\n```\n\n- 4857\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-08-28T10:33:30.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/774286b6837d04931719fcf74eb666e64952b0a8"},"pipeline":{"id":28838176,"iid":2717,"project_id":6138686,"sha":"774286b6837d04931719fcf74eb666e64952b0a8","ref":"pr-6857","status":"success","source":"push","created_at":"2018-08-28T08:34:10.297Z","updated_at":"2018-08-28T10:50:01.475Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/28838176"},"web_url":"https://gitlab.com/coq/coq/-/jobs/92616124","artifacts":[{"file_type":"trace","size":239399,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2018-09-04T09:02:15.021Z","tag_list":[]}
{"id":92616122,"status":"success","stage":"build","name":"build:edge","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-08-28T08:34:10.364Z","started_at":"2018-08-28T08:34:12.448Z","finished_at":"2018-08-28T08:50:17.992Z","duration":965.543823,"queued_duration":0.46933,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"774286b6837d04931719fcf74eb666e64952b0a8","short_id":"774286b6","created_at":"2018-08-28T10:33:30.000+02:00","parent_ids":["d0901e424a2ade85fb070eca83384e61070eec5b"],"title":"[build] Preliminary support for building with `dune`.","message":"[build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides automatic generation of\n`version.ml`, `.merlin`, `META`, `opam`, API documentation; install\nmanagement; easy integration with external libraries, test runners,\nand modular builds.\n\nIn particular, Dune uniformly handles components regardless whether\nthey live in, or out-of-tree. This greatly simplifies cases where a\nplugin [or CoqIde] is checked out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can thus be used as a\nmore flexible `coq_makefile` replacement.\n\nFor now we provide experimental support for a Dune build. In order to\nbuild Coq + the standard library with Dune type:\n\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_ by default. This\npatch provides a `dune` library specification for each Coq source\ncomponent, mirroring the existing `META` setup.\n\nDune doesn't support custom build rules [yet], so in order to properly\nbuild the `.vo` files, we provide a small helper script\n`tools/coq_dune.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files. This tool is akin to `coq_makefile`.\n\nDue to this pitfall, the build process has to proceed in three stages:\n1) build `coqdep` and `coq_dune`; 2) generate `dune` files for\n`theories` and `plugins`; 3) perform a regular build, now that all\ntargets are in scope.\n\nThe current, make-based build system is unmodified by this PR and kept\nas the default option.\n\nThe main TODOs are written down in issue #xxxx\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nconfigure: Implement dune / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for dune.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n```\n$ /usr/bin/time make DUNEOPT=\"-j 1000\" -f Makefile.dune states\n59.50user 18.81system 0:29.83elapsed 262%CPU (0avgtext+0avgdata 302996maxresident)k\n0inputs+646632outputs (0major+4893811minor)pagefaults 0swaps\n\n$ /usr/bin/time sh -c \"./configure -local -native-compiler no && make -j states\"\n88.21user 23.65system 0:32.96elapsed 339%CPU (0avgtext+0avgdata 304992maxresident)k\n0inputs+1051680outputs (0major+5300680minor)pagefaults 0swaps\n```\n\n- 4857\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-08-28T10:33:30.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/774286b6837d04931719fcf74eb666e64952b0a8"},"pipeline":{"id":28838176,"iid":2717,"project_id":6138686,"sha":"774286b6837d04931719fcf74eb666e64952b0a8","ref":"pr-6857","status":"success","source":"push","created_at":"2018-08-28T08:34:10.297Z","updated_at":"2018-08-28T10:50:01.475Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/28838176"},"web_url":"https://gitlab.com/coq/coq/-/jobs/92616122","artifacts":[{"file_type":"trace","size":238174,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2018-09-04T08:50:10.659Z","tag_list":[]}
{"id":92616121,"status":"success","stage":"build","name":"build:base+32bit","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-08-28T08:34:10.340Z","started_at":"2018-08-28T08:34:12.137Z","finished_at":"2018-08-28T08:48:50.152Z","duration":878.014997,"queued_duration":0.092373,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"774286b6837d04931719fcf74eb666e64952b0a8","short_id":"774286b6","created_at":"2018-08-28T10:33:30.000+02:00","parent_ids":["d0901e424a2ade85fb070eca83384e61070eec5b"],"title":"[build] Preliminary support for building with `dune`.","message":"[build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides automatic generation of\n`version.ml`, `.merlin`, `META`, `opam`, API documentation; install\nmanagement; easy integration with external libraries, test runners,\nand modular builds.\n\nIn particular, Dune uniformly handles components regardless whether\nthey live in, or out-of-tree. This greatly simplifies cases where a\nplugin [or CoqIde] is checked out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can thus be used as a\nmore flexible `coq_makefile` replacement.\n\nFor now we provide experimental support for a Dune build. In order to\nbuild Coq + the standard library with Dune type:\n\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_ by default. This\npatch provides a `dune` library specification for each Coq source\ncomponent, mirroring the existing `META` setup.\n\nDune doesn't support custom build rules [yet], so in order to properly\nbuild the `.vo` files, we provide a small helper script\n`tools/coq_dune.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files. This tool is akin to `coq_makefile`.\n\nDue to this pitfall, the build process has to proceed in three stages:\n1) build `coqdep` and `coq_dune`; 2) generate `dune` files for\n`theories` and `plugins`; 3) perform a regular build, now that all\ntargets are in scope.\n\nThe current, make-based build system is unmodified by this PR and kept\nas the default option.\n\nThe main TODOs are written down in issue #xxxx\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nconfigure: Implement dune / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for dune.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n```\n$ /usr/bin/time make DUNEOPT=\"-j 1000\" -f Makefile.dune states\n59.50user 18.81system 0:29.83elapsed 262%CPU (0avgtext+0avgdata 302996maxresident)k\n0inputs+646632outputs (0major+4893811minor)pagefaults 0swaps\n\n$ /usr/bin/time sh -c \"./configure -local -native-compiler no && make -j states\"\n88.21user 23.65system 0:32.96elapsed 339%CPU (0avgtext+0avgdata 304992maxresident)k\n0inputs+1051680outputs (0major+5300680minor)pagefaults 0swaps\n```\n\n- 4857\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-08-28T10:33:30.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/774286b6837d04931719fcf74eb666e64952b0a8"},"pipeline":{"id":28838176,"iid":2717,"project_id":6138686,"sha":"774286b6837d04931719fcf74eb666e64952b0a8","ref":"pr-6857","status":"success","source":"push","created_at":"2018-08-28T08:34:10.297Z","updated_at":"2018-08-28T10:50:01.475Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/28838176"},"web_url":"https://gitlab.com/coq/coq/-/jobs/92616121","artifacts":[{"file_type":"trace","size":233961,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2018-09-04T08:48:43.894Z","tag_list":[]}
{"id":92616120,"status":"success","stage":"build","name":"build:base","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-08-28T08:34:10.313Z","started_at":"2018-08-28T08:34:12.372Z","finished_at":"2018-08-28T08:50:04.280Z","duration":951.907674,"queued_duration":0.245777,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"774286b6837d04931719fcf74eb666e64952b0a8","short_id":"774286b6","created_at":"2018-08-28T10:33:30.000+02:00","parent_ids":["d0901e424a2ade85fb070eca83384e61070eec5b"],"title":"[build] Preliminary support for building with `dune`.","message":"[build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides automatic generation of\n`version.ml`, `.merlin`, `META`, `opam`, API documentation; install\nmanagement; easy integration with external libraries, test runners,\nand modular builds.\n\nIn particular, Dune uniformly handles components regardless whether\nthey live in, or out-of-tree. This greatly simplifies cases where a\nplugin [or CoqIde] is checked out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can thus be used as a\nmore flexible `coq_makefile` replacement.\n\nFor now we provide experimental support for a Dune build. In order to\nbuild Coq + the standard library with Dune type:\n\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_ by default. This\npatch provides a `dune` library specification for each Coq source\ncomponent, mirroring the existing `META` setup.\n\nDune doesn't support custom build rules [yet], so in order to properly\nbuild the `.vo` files, we provide a small helper script\n`tools/coq_dune.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files. This tool is akin to `coq_makefile`.\n\nDue to this pitfall, the build process has to proceed in three stages:\n1) build `coqdep` and `coq_dune`; 2) generate `dune` files for\n`theories` and `plugins`; 3) perform a regular build, now that all\ntargets are in scope.\n\nThe current, make-based build system is unmodified by this PR and kept\nas the default option.\n\nThe main TODOs are written down in issue #xxxx\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nconfigure: Implement dune / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for dune.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n```\n$ /usr/bin/time make DUNEOPT=\"-j 1000\" -f Makefile.dune states\n59.50user 18.81system 0:29.83elapsed 262%CPU (0avgtext+0avgdata 302996maxresident)k\n0inputs+646632outputs (0major+4893811minor)pagefaults 0swaps\n\n$ /usr/bin/time sh -c \"./configure -local -native-compiler no && make -j states\"\n88.21user 23.65system 0:32.96elapsed 339%CPU (0avgtext+0avgdata 304992maxresident)k\n0inputs+1051680outputs (0major+5300680minor)pagefaults 0swaps\n```\n\n- 4857\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-08-28T10:33:30.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/774286b6837d04931719fcf74eb666e64952b0a8"},"pipeline":{"id":28838176,"iid":2717,"project_id":6138686,"sha":"774286b6837d04931719fcf74eb666e64952b0a8","ref":"pr-6857","status":"success","source":"push","created_at":"2018-08-28T08:34:10.297Z","updated_at":"2018-08-28T10:50:01.475Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/28838176"},"web_url":"https://gitlab.com/coq/coq/-/jobs/92616120","artifacts":[{"file_type":"trace","size":278396,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2018-09-04T08:49:56.386Z","tag_list":[]}
