{"id":479729115,"status":"success","stage":"stage-1","name":"windows64","ref":"pr-11867","tag":false,"coverage":null,"allow_failure":false,"created_at":"2020-03-20T16:13:49.703Z","started_at":"2020-03-20T16:56:59.155Z","finished_at":"2020-03-20T17:57:05.762Z","duration":3606.607644,"queued_duration":2589.415105,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c64a18bcdd0489586f8ff386f7daa432f7229407","short_id":"c64a18bc","created_at":"2020-03-20T15:53:57.000+01:00","parent_ids":["4d025d4161599ea20cd1dbf489a6412f019a7a7e"],"title":"Fix the computation of recursive principles with let-bindings.","message":"Fix the computation of recursive principles with let-bindings.\n\nWe use a more robust implementation that does not assume that the type\nof the inductive is in ζ-normal form. This code path is not exercised,\nbecause due to the kernel typing algorithm, let-bindings in the type\nof a recursor are expanded away.\n","author_name":"Pierre-Marie Pédrot","author_email":"pierre-marie.pedrot@inria.fr","authored_date":"2020-03-20T15:28:49.000+01:00","committer_name":"Pierre-Marie Pédrot","committer_email":"pierre-marie.pedrot@inria.fr","committed_date":"2020-03-20T15:53:57.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c64a18bcdd0489586f8ff386f7daa432f7229407"},"pipeline":{"id":128195846,"iid":14578,"project_id":6138686,"sha":"c64a18bcdd0489586f8ff386f7daa432f7229407","ref":"pr-11867","status":"failed","source":"push","created_at":"2020-03-20T14:56:50.977Z","updated_at":"2020-03-20T17:57:05.893Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/128195846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/479729115","artifacts":[{"file_type":"trace","size":236491,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":"2020-03-27T17:57:04.411Z","tag_list":["windows-inria"]}
{"id":479719634,"status":"failed","stage":"stage-2","name":"library:ci-vst","ref":"pr-11867","tag":false,"coverage":null,"allow_failure":false,"created_at":"2020-03-20T16:09:23.676Z","started_at":"2020-03-20T16:09:24.663Z","finished_at":"2020-03-20T16:19:34.822Z","duration":610.158702,"queued_duration":0.951027,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c64a18bcdd0489586f8ff386f7daa432f7229407","short_id":"c64a18bc","created_at":"2020-03-20T15:53:57.000+01:00","parent_ids":["4d025d4161599ea20cd1dbf489a6412f019a7a7e"],"title":"Fix the computation of recursive principles with let-bindings.","message":"Fix the computation of recursive principles with let-bindings.\n\nWe use a more robust implementation that does not assume that the type\nof the inductive is in ζ-normal form. This code path is not exercised,\nbecause due to the kernel typing algorithm, let-bindings in the type\nof a recursor are expanded away.\n","author_name":"Pierre-Marie Pédrot","author_email":"pierre-marie.pedrot@inria.fr","authored_date":"2020-03-20T15:28:49.000+01:00","committer_name":"Pierre-Marie Pédrot","committer_email":"pierre-marie.pedrot@inria.fr","committed_date":"2020-03-20T15:53:57.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c64a18bcdd0489586f8ff386f7daa432f7229407"},"pipeline":{"id":128195846,"iid":14578,"project_id":6138686,"sha":"c64a18bcdd0489586f8ff386f7daa432f7229407","ref":"pr-11867","status":"failed","source":"push","created_at":"2020-03-20T14:56:50.977Z","updated_at":"2020-03-20T17:57:05.893Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/128195846"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/479719634","artifacts":[{"file_type":"trace","size":180274,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":479664278,"status":"success","stage":"stage-4","name":"library:ci-fiat-crypto","ref":"pr-11867","tag":false,"coverage":null,"allow_failure":false,"created_at":"2020-03-20T15:35:46.649Z","started_at":"2020-03-20T15:35:48.327Z","finished_at":"2020-03-20T17:41:56.346Z","duration":7568.019391,"queued_duration":1.634809,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c64a18bcdd0489586f8ff386f7daa432f7229407","short_id":"c64a18bc","created_at":"2020-03-20T15:53:57.000+01:00","parent_ids":["4d025d4161599ea20cd1dbf489a6412f019a7a7e"],"title":"Fix the computation of recursive principles with let-bindings.","message":"Fix the computation of recursive principles with let-bindings.\n\nWe use a more robust implementation that does not assume that the type\nof the inductive is in ζ-normal form. This code path is not exercised,\nbecause due to the kernel typing algorithm, let-bindings in the type\nof a recursor are expanded away.\n","author_name":"Pierre-Marie Pédrot","author_email":"pierre-marie.pedrot@inria.fr","authored_date":"2020-03-20T15:28:49.000+01:00","committer_name":"Pierre-Marie Pédrot","committer_email":"pierre-marie.pedrot@inria.fr","committed_date":"2020-03-20T15:53:57.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c64a18bcdd0489586f8ff386f7daa432f7229407"},"pipeline":{"id":128195846,"iid":14578,"project_id":6138686,"sha":"c64a18bcdd0489586f8ff386f7daa432f7229407","ref":"pr-11867","status":"failed","source":"push","created_at":"2020-03-20T14:56:50.977Z","updated_at":"2020-03-20T17:57:05.893Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/128195846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/479664278","artifacts":[{"file_type":"trace","size":281425,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":479649435,"status":"success","stage":"stage-3","name":"library:ci-color","ref":"pr-11867","tag":false,"coverage":null,"allow_failure":false,"created_at":"2020-03-20T15:27:17.870Z","started_at":"2020-03-20T15:27:18.653Z","finished_at":"2020-03-20T15:45:32.757Z","duration":1094.103759,"queued_duration":0.748892,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c64a18bcdd0489586f8ff386f7daa432f7229407","short_id":"c64a18bc","created_at":"2020-03-20T15:53:57.000+01:00","parent_ids":["4d025d4161599ea20cd1dbf489a6412f019a7a7e"],"title":"Fix the computation of recursive principles with let-bindings.","message":"Fix the computation of recursive principles with let-bindings.\n\nWe use a more robust implementation that does not assume that the type\nof the inductive is in ζ-normal form. This code path is not exercised,\nbecause due to the kernel typing algorithm, let-bindings in the type\nof a recursor are expanded away.\n","author_name":"Pierre-Marie Pédrot","author_email":"pierre-marie.pedrot@inria.fr","authored_date":"2020-03-20T15:28:49.000+01:00","committer_name":"Pierre-Marie Pédrot","committer_email":"pierre-marie.pedrot@inria.fr","committed_date":"2020-03-20T15:53:57.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c64a18bcdd0489586f8ff386f7daa432f7229407"},"pipeline":{"id":128195846,"iid":14578,"project_id":6138686,"sha":"c64a18bcdd0489586f8ff386f7daa432f7229407","ref":"pr-11867","status":"failed","source":"push","created_at":"2020-03-20T14:56:50.977Z","updated_at":"2020-03-20T17:57:05.893Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/128195846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/479649435","artifacts":[{"file_type":"trace","size":232764,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":479641865,"status":"success","stage":"stage-2","name":"doc:refman","ref":"pr-11867","tag":false,"coverage":null,"allow_failure":false,"created_at":"2020-03-20T15:22:18.913Z","started_at":"2020-03-20T15:22:20.672Z","finished_at":"2020-03-20T15:32:12.552Z","duration":591.880718,"queued_duration":1.712076,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c64a18bcdd0489586f8ff386f7daa432f7229407","short_id":"c64a18bc","created_at":"2020-03-20T15:53:57.000+01:00","parent_ids":["4d025d4161599ea20cd1dbf489a6412f019a7a7e"],"title":"Fix the computation of recursive principles with let-bindings.","message":"Fix the computation of recursive principles with let-bindings.\n\nWe use a more robust implementation that does not assume that the type\nof the inductive is in ζ-normal form. This code path is not exercised,\nbecause due to the kernel typing algorithm, let-bindings in the type\nof a recursor are expanded away.\n","author_name":"Pierre-Marie Pédrot","author_email":"pierre-marie.pedrot@inria.fr","authored_date":"2020-03-20T15:28:49.000+01:00","committer_name":"Pierre-Marie Pédrot","committer_email":"pierre-marie.pedrot@inria.fr","committed_date":"2020-03-20T15:53:57.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c64a18bcdd0489586f8ff386f7daa432f7229407"},"pipeline":{"id":128195846,"iid":14578,"project_id":6138686,"sha":"c64a18bcdd0489586f8ff386f7daa432f7229407","ref":"pr-11867","status":"failed","source":"push","created_at":"2020-03-20T14:56:50.977Z","updated_at":"2020-03-20T17:57:05.893Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/128195846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/479641865","artifacts":[{"file_type":"trace","size":1841180,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2020-05-19T15:32:10.900Z","tag_list":[]}
{"id":479634832,"status":"success","stage":"stage-2","name":"test-suite:base+32bit","ref":"pr-11867","tag":false,"coverage":null,"allow_failure":false,"created_at":"2020-03-20T15:19:05.385Z","started_at":"2020-03-20T15:19:06.173Z","finished_at":"2020-03-20T15:37:50.680Z","duration":1124.507356,"queued_duration":0.71164,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c64a18bcdd0489586f8ff386f7daa432f7229407","short_id":"c64a18bc","created_at":"2020-03-20T15:53:57.000+01:00","parent_ids":["4d025d4161599ea20cd1dbf489a6412f019a7a7e"],"title":"Fix the computation of recursive principles with let-bindings.","message":"Fix the computation of recursive principles with let-bindings.\n\nWe use a more robust implementation that does not assume that the type\nof the inductive is in ζ-normal form. This code path is not exercised,\nbecause due to the kernel typing algorithm, let-bindings in the type\nof a recursor are expanded away.\n","author_name":"Pierre-Marie Pédrot","author_email":"pierre-marie.pedrot@inria.fr","authored_date":"2020-03-20T15:28:49.000+01:00","committer_name":"Pierre-Marie Pédrot","committer_email":"pierre-marie.pedrot@inria.fr","committed_date":"2020-03-20T15:53:57.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c64a18bcdd0489586f8ff386f7daa432f7229407"},"pipeline":{"id":128195846,"iid":14578,"project_id":6138686,"sha":"c64a18bcdd0489586f8ff386f7daa432f7229407","ref":"pr-11867","status":"failed","source":"push","created_at":"2020-03-20T14:56:50.977Z","updated_at":"2020-03-20T17:57:05.893Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/128195846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/479634832","artifacts":[{"file_type":"trace","size":93266,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":479615672,"status":"success","stage":"stage-1","name":"build:base","ref":"pr-11867","tag":false,"coverage":null,"allow_failure":false,"created_at":"2020-03-20T15:06:40.151Z","started_at":"2020-03-20T15:06:40.805Z","finished_at":"2020-03-20T15:17:29.284Z","duration":648.478799,"queued_duration":0.463224,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c64a18bcdd0489586f8ff386f7daa432f7229407","short_id":"c64a18bc","created_at":"2020-03-20T15:53:57.000+01:00","parent_ids":["4d025d4161599ea20cd1dbf489a6412f019a7a7e"],"title":"Fix the computation of recursive principles with let-bindings.","message":"Fix the computation of recursive principles with let-bindings.\n\nWe use a more robust implementation that does not assume that the type\nof the inductive is in ζ-normal form. This code path is not exercised,\nbecause due to the kernel typing algorithm, let-bindings in the type\nof a recursor are expanded away.\n","author_name":"Pierre-Marie Pédrot","author_email":"pierre-marie.pedrot@inria.fr","authored_date":"2020-03-20T15:28:49.000+01:00","committer_name":"Pierre-Marie Pédrot","committer_email":"pierre-marie.pedrot@inria.fr","committed_date":"2020-03-20T15:53:57.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c64a18bcdd0489586f8ff386f7daa432f7229407"},"pipeline":{"id":128195846,"iid":14578,"project_id":6138686,"sha":"c64a18bcdd0489586f8ff386f7daa432f7229407","ref":"pr-11867","status":"failed","source":"push","created_at":"2020-03-20T14:56:50.977Z","updated_at":"2020-03-20T17:57:05.893Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/128195846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/479615672","artifacts":[{"file_type":"trace","size":347063,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":"2020-03-27T15:17:25.455Z","tag_list":[]}
{"id":479596515,"status":"success","stage":"stage-4","name":"library:ci-corn","ref":"pr-11867","tag":false,"coverage":null,"allow_failure":false,"created_at":"2020-03-20T14:56:52.380Z","started_at":"2020-03-20T15:26:46.404Z","finished_at":"2020-03-20T15:49:00.635Z","duration":1334.230645,"queued_duration":0.40538,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c64a18bcdd0489586f8ff386f7daa432f7229407","short_id":"c64a18bc","created_at":"2020-03-20T15:53:57.000+01:00","parent_ids":["4d025d4161599ea20cd1dbf489a6412f019a7a7e"],"title":"Fix the computation of recursive principles with let-bindings.","message":"Fix the computation of recursive principles with let-bindings.\n\nWe use a more robust implementation that does not assume that the type\nof the inductive is in ζ-normal form. This code path is not exercised,\nbecause due to the kernel typing algorithm, let-bindings in the type\nof a recursor are expanded away.\n","author_name":"Pierre-Marie Pédrot","author_email":"pierre-marie.pedrot@inria.fr","authored_date":"2020-03-20T15:28:49.000+01:00","committer_name":"Pierre-Marie Pédrot","committer_email":"pierre-marie.pedrot@inria.fr","committed_date":"2020-03-20T15:53:57.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c64a18bcdd0489586f8ff386f7daa432f7229407"},"pipeline":{"id":128195846,"iid":14578,"project_id":6138686,"sha":"c64a18bcdd0489586f8ff386f7daa432f7229407","ref":"pr-11867","status":"failed","source":"push","created_at":"2020-03-20T14:56:50.977Z","updated_at":"2020-03-20T17:57:05.893Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/128195846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/479596515","artifacts":[{"file_type":"trace","size":367493,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":479596511,"status":"success","stage":"stage-3","name":"library:ci-math-classes","ref":"pr-11867","tag":false,"coverage":null,"allow_failure":false,"created_at":"2020-03-20T14:56:52.340Z","started_at":"2020-03-20T15:20:38.235Z","finished_at":"2020-03-20T15:26:45.822Z","duration":367.586685,"queued_duration":2.589047,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c64a18bcdd0489586f8ff386f7daa432f7229407","short_id":"c64a18bc","created_at":"2020-03-20T15:53:57.000+01:00","parent_ids":["4d025d4161599ea20cd1dbf489a6412f019a7a7e"],"title":"Fix the computation of recursive principles with let-bindings.","message":"Fix the computation of recursive principles with let-bindings.\n\nWe use a more robust implementation that does not assume that the type\nof the inductive is in ζ-normal form. This code path is not exercised,\nbecause due to the kernel typing algorithm, let-bindings in the type\nof a recursor are expanded away.\n","author_name":"Pierre-Marie Pédrot","author_email":"pierre-marie.pedrot@inria.fr","authored_date":"2020-03-20T15:28:49.000+01:00","committer_name":"Pierre-Marie Pédrot","committer_email":"pierre-marie.pedrot@inria.fr","committed_date":"2020-03-20T15:53:57.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c64a18bcdd0489586f8ff386f7daa432f7229407"},"pipeline":{"id":128195846,"iid":14578,"project_id":6138686,"sha":"c64a18bcdd0489586f8ff386f7daa432f7229407","ref":"pr-11867","status":"failed","source":"push","created_at":"2020-03-20T14:56:50.977Z","updated_at":"2020-03-20T17:57:05.893Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/128195846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/479596511","artifacts":[{"file_type":"trace","size":188353,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":479596510,"status":"success","stage":"stage-3","name":"library:ci-coqprime","ref":"pr-11867","tag":false,"coverage":null,"allow_failure":false,"created_at":"2020-03-20T14:56:52.322Z","started_at":"2020-03-20T15:20:38.066Z","finished_at":"2020-03-20T15:26:17.262Z","duration":339.195705,"queued_duration":2.550845,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c64a18bcdd0489586f8ff386f7daa432f7229407","short_id":"c64a18bc","created_at":"2020-03-20T15:53:57.000+01:00","parent_ids":["4d025d4161599ea20cd1dbf489a6412f019a7a7e"],"title":"Fix the computation of recursive principles with let-bindings.","message":"Fix the computation of recursive principles with let-bindings.\n\nWe use a more robust implementation that does not assume that the type\nof the inductive is in ζ-normal form. This code path is not exercised,\nbecause due to the kernel typing algorithm, let-bindings in the type\nof a recursor are expanded away.\n","author_name":"Pierre-Marie Pédrot","author_email":"pierre-marie.pedrot@inria.fr","authored_date":"2020-03-20T15:28:49.000+01:00","committer_name":"Pierre-Marie Pédrot","committer_email":"pierre-marie.pedrot@inria.fr","committed_date":"2020-03-20T15:53:57.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c64a18bcdd0489586f8ff386f7daa432f7229407"},"pipeline":{"id":128195846,"iid":14578,"project_id":6138686,"sha":"c64a18bcdd0489586f8ff386f7daa432f7229407","ref":"pr-11867","status":"failed","source":"push","created_at":"2020-03-20T14:56:50.977Z","updated_at":"2020-03-20T17:57:05.893Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/128195846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/479596510","artifacts":[{"file_type":"trace","size":596295,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":479596508,"status":"success","stage":"stage-2","name":"plugin:ci-rewriter","ref":"pr-11867","tag":false,"coverage":null,"allow_failure":false,"created_at":"2020-03-20T14:56:52.285Z","started_at":"2020-03-20T15:14:42.303Z","finished_at":"2020-03-20T15:28:59.041Z","duration":856.737392,"queued_duration":1.96049,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c64a18bcdd0489586f8ff386f7daa432f7229407","short_id":"c64a18bc","created_at":"2020-03-20T15:53:57.000+01:00","parent_ids":["4d025d4161599ea20cd1dbf489a6412f019a7a7e"],"title":"Fix the computation of recursive principles with let-bindings.","message":"Fix the computation of recursive principles with let-bindings.\n\nWe use a more robust implementation that does not assume that the type\nof the inductive is in ζ-normal form. This code path is not exercised,\nbecause due to the kernel typing algorithm, let-bindings in the type\nof a recursor are expanded away.\n","author_name":"Pierre-Marie Pédrot","author_email":"pierre-marie.pedrot@inria.fr","authored_date":"2020-03-20T15:28:49.000+01:00","committer_name":"Pierre-Marie Pédrot","committer_email":"pierre-marie.pedrot@inria.fr","committed_date":"2020-03-20T15:53:57.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c64a18bcdd0489586f8ff386f7daa432f7229407"},"pipeline":{"id":128195846,"iid":14578,"project_id":6138686,"sha":"c64a18bcdd0489586f8ff386f7daa432f7229407","ref":"pr-11867","status":"failed","source":"push","created_at":"2020-03-20T14:56:50.977Z","updated_at":"2020-03-20T17:57:05.893Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/128195846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/479596508","artifacts":[{"file_type":"trace","size":136693,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":479596507,"status":"success","stage":"stage-2","name":"plugin:ci-relation_algebra","ref":"pr-11867","tag":false,"coverage":null,"allow_failure":false,"created_at":"2020-03-20T14:56:52.268Z","started_at":"2020-03-20T15:17:34.850Z","finished_at":"2020-03-20T15:23:46.858Z","duration":372.007831,"queued_duration":2.949373,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c64a18bcdd0489586f8ff386f7daa432f7229407","short_id":"c64a18bc","created_at":"2020-03-20T15:53:57.000+01:00","parent_ids":["4d025d4161599ea20cd1dbf489a6412f019a7a7e"],"title":"Fix the computation of recursive principles with let-bindings.","message":"Fix the computation of recursive principles with let-bindings.\n\nWe use a more robust implementation that does not assume that the type\nof the inductive is in ζ-normal form. This code path is not exercised,\nbecause due to the kernel typing algorithm, let-bindings in the type\nof a recursor are expanded away.\n","author_name":"Pierre-Marie Pédrot","author_email":"pierre-marie.pedrot@inria.fr","authored_date":"2020-03-20T15:28:49.000+01:00","committer_name":"Pierre-Marie Pédrot","committer_email":"pierre-marie.pedrot@inria.fr","committed_date":"2020-03-20T15:53:57.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c64a18bcdd0489586f8ff386f7daa432f7229407"},"pipeline":{"id":128195846,"iid":14578,"project_id":6138686,"sha":"c64a18bcdd0489586f8ff386f7daa432f7229407","ref":"pr-11867","status":"failed","source":"push","created_at":"2020-03-20T14:56:50.977Z","updated_at":"2020-03-20T17:57:05.893Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/128195846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/479596507","artifacts":[{"file_type":"trace","size":50945,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":479596506,"status":"success","stage":"stage-2","name":"plugin:ci-reduction_effects","ref":"pr-11867","tag":false,"coverage":null,"allow_failure":false,"created_at":"2020-03-20T14:56:52.251Z","started_at":"2020-03-20T15:17:34.803Z","finished_at":"2020-03-20T15:20:40.121Z","duration":185.31712,"queued_duration":2.995028,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c64a18bcdd0489586f8ff386f7daa432f7229407","short_id":"c64a18bc","created_at":"2020-03-20T15:53:57.000+01:00","parent_ids":["4d025d4161599ea20cd1dbf489a6412f019a7a7e"],"title":"Fix the computation of recursive principles with let-bindings.","message":"Fix the computation of recursive principles with let-bindings.\n\nWe use a more robust implementation that does not assume that the type\nof the inductive is in ζ-normal form. This code path is not exercised,\nbecause due to the kernel typing algorithm, let-bindings in the type\nof a recursor are expanded away.\n","author_name":"Pierre-Marie Pédrot","author_email":"pierre-marie.pedrot@inria.fr","authored_date":"2020-03-20T15:28:49.000+01:00","committer_name":"Pierre-Marie Pédrot","committer_email":"pierre-marie.pedrot@inria.fr","committed_date":"2020-03-20T15:53:57.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c64a18bcdd0489586f8ff386f7daa432f7229407"},"pipeline":{"id":128195846,"iid":14578,"project_id":6138686,"sha":"c64a18bcdd0489586f8ff386f7daa432f7229407","ref":"pr-11867","status":"failed","source":"push","created_at":"2020-03-20T14:56:50.977Z","updated_at":"2020-03-20T17:57:05.893Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/128195846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/479596506","artifacts":[{"file_type":"trace","size":28121,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":479596505,"status":"success","stage":"stage-2","name":"plugin:ci-quickchick","ref":"pr-11867","tag":false,"coverage":null,"allow_failure":false,"created_at":"2020-03-20T14:56:52.234Z","started_at":"2020-03-20T15:14:42.060Z","finished_at":"2020-03-20T15:21:37.045Z","duration":414.984976,"queued_duration":1.77317,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c64a18bcdd0489586f8ff386f7daa432f7229407","short_id":"c64a18bc","created_at":"2020-03-20T15:53:57.000+01:00","parent_ids":["4d025d4161599ea20cd1dbf489a6412f019a7a7e"],"title":"Fix the computation of recursive principles with let-bindings.","message":"Fix the computation of recursive principles with let-bindings.\n\nWe use a more robust implementation that does not assume that the type\nof the inductive is in ζ-normal form. This code path is not exercised,\nbecause due to the kernel typing algorithm, let-bindings in the type\nof a recursor are expanded away.\n","author_name":"Pierre-Marie Pédrot","author_email":"pierre-marie.pedrot@inria.fr","authored_date":"2020-03-20T15:28:49.000+01:00","committer_name":"Pierre-Marie Pédrot","committer_email":"pierre-marie.pedrot@inria.fr","committed_date":"2020-03-20T15:53:57.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c64a18bcdd0489586f8ff386f7daa432f7229407"},"pipeline":{"id":128195846,"iid":14578,"project_id":6138686,"sha":"c64a18bcdd0489586f8ff386f7daa432f7229407","ref":"pr-11867","status":"failed","source":"push","created_at":"2020-03-20T14:56:50.977Z","updated_at":"2020-03-20T17:57:05.893Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/128195846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/479596505","artifacts":[{"file_type":"trace","size":293832,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":479596504,"status":"success","stage":"stage-2","name":"plugin:ci-perennial","ref":"pr-11867","tag":false,"coverage":null,"allow_failure":false,"created_at":"2020-03-20T14:56:52.208Z","started_at":"2020-03-20T15:14:41.987Z","finished_at":"2020-03-20T15:48:13.174Z","duration":2011.187612,"queued_duration":1.770655,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c64a18bcdd0489586f8ff386f7daa432f7229407","short_id":"c64a18bc","created_at":"2020-03-20T15:53:57.000+01:00","parent_ids":["4d025d4161599ea20cd1dbf489a6412f019a7a7e"],"title":"Fix the computation of recursive principles with let-bindings.","message":"Fix the computation of recursive principles with let-bindings.\n\nWe use a more robust implementation that does not assume that the type\nof the inductive is in ζ-normal form. This code path is not exercised,\nbecause due to the kernel typing algorithm, let-bindings in the type\nof a recursor are expanded away.\n","author_name":"Pierre-Marie Pédrot","author_email":"pierre-marie.pedrot@inria.fr","authored_date":"2020-03-20T15:28:49.000+01:00","committer_name":"Pierre-Marie Pédrot","committer_email":"pierre-marie.pedrot@inria.fr","committed_date":"2020-03-20T15:53:57.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c64a18bcdd0489586f8ff386f7daa432f7229407"},"pipeline":{"id":128195846,"iid":14578,"project_id":6138686,"sha":"c64a18bcdd0489586f8ff386f7daa432f7229407","ref":"pr-11867","status":"failed","source":"push","created_at":"2020-03-20T14:56:50.977Z","updated_at":"2020-03-20T17:57:05.893Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/128195846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/479596504","artifacts":[{"file_type":"trace","size":33501,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":479596502,"status":"success","stage":"stage-2","name":"plugin:ci-paramcoq","ref":"pr-11867","tag":false,"coverage":null,"allow_failure":false,"created_at":"2020-03-20T14:56:52.188Z","started_at":"2020-03-20T15:17:34.742Z","finished_at":"2020-03-20T15:21:15.170Z","duration":220.428106,"queued_duration":3.046672,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c64a18bcdd0489586f8ff386f7daa432f7229407","short_id":"c64a18bc","created_at":"2020-03-20T15:53:57.000+01:00","parent_ids":["4d025d4161599ea20cd1dbf489a6412f019a7a7e"],"title":"Fix the computation of recursive principles with let-bindings.","message":"Fix the computation of recursive principles with let-bindings.\n\nWe use a more robust implementation that does not assume that the type\nof the inductive is in ζ-normal form. This code path is not exercised,\nbecause due to the kernel typing algorithm, let-bindings in the type\nof a recursor are expanded away.\n","author_name":"Pierre-Marie Pédrot","author_email":"pierre-marie.pedrot@inria.fr","authored_date":"2020-03-20T15:28:49.000+01:00","committer_name":"Pierre-Marie Pédrot","committer_email":"pierre-marie.pedrot@inria.fr","committed_date":"2020-03-20T15:53:57.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c64a18bcdd0489586f8ff386f7daa432f7229407"},"pipeline":{"id":128195846,"iid":14578,"project_id":6138686,"sha":"c64a18bcdd0489586f8ff386f7daa432f7229407","ref":"pr-11867","status":"failed","source":"push","created_at":"2020-03-20T14:56:50.977Z","updated_at":"2020-03-20T17:57:05.893Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/128195846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/479596502","artifacts":[{"file_type":"trace","size":77810,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":479596501,"status":"success","stage":"stage-2","name":"plugin:ci-mtac2","ref":"pr-11867","tag":false,"coverage":null,"allow_failure":false,"created_at":"2020-03-20T14:56:52.167Z","started_at":"2020-03-20T15:17:34.677Z","finished_at":"2020-03-20T15:22:23.476Z","duration":288.798211,"queued_duration":3.084238,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c64a18bcdd0489586f8ff386f7daa432f7229407","short_id":"c64a18bc","created_at":"2020-03-20T15:53:57.000+01:00","parent_ids":["4d025d4161599ea20cd1dbf489a6412f019a7a7e"],"title":"Fix the computation of recursive principles with let-bindings.","message":"Fix the computation of recursive principles with let-bindings.\n\nWe use a more robust implementation that does not assume that the type\nof the inductive is in ζ-normal form. This code path is not exercised,\nbecause due to the kernel typing algorithm, let-bindings in the type\nof a recursor are expanded away.\n","author_name":"Pierre-Marie Pédrot","author_email":"pierre-marie.pedrot@inria.fr","authored_date":"2020-03-20T15:28:49.000+01:00","committer_name":"Pierre-Marie Pédrot","committer_email":"pierre-marie.pedrot@inria.fr","committed_date":"2020-03-20T15:53:57.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c64a18bcdd0489586f8ff386f7daa432f7229407"},"pipeline":{"id":128195846,"iid":14578,"project_id":6138686,"sha":"c64a18bcdd0489586f8ff386f7daa432f7229407","ref":"pr-11867","status":"failed","source":"push","created_at":"2020-03-20T14:56:50.977Z","updated_at":"2020-03-20T17:57:05.893Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/128195846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/479596501","artifacts":[{"file_type":"trace","size":143642,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":479596500,"status":"success","stage":"stage-2","name":"plugin:ci-fiat_parsers","ref":"pr-11867","tag":false,"coverage":null,"allow_failure":false,"created_at":"2020-03-20T14:56:52.146Z","started_at":"2020-03-20T15:17:34.622Z","finished_at":"2020-03-20T15:37:52.495Z","duration":1217.872666,"queued_duration":3.107044,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c64a18bcdd0489586f8ff386f7daa432f7229407","short_id":"c64a18bc","created_at":"2020-03-20T15:53:57.000+01:00","parent_ids":["4d025d4161599ea20cd1dbf489a6412f019a7a7e"],"title":"Fix the computation of recursive principles with let-bindings.","message":"Fix the computation of recursive principles with let-bindings.\n\nWe use a more robust implementation that does not assume that the type\nof the inductive is in ζ-normal form. This code path is not exercised,\nbecause due to the kernel typing algorithm, let-bindings in the type\nof a recursor are expanded away.\n","author_name":"Pierre-Marie Pédrot","author_email":"pierre-marie.pedrot@inria.fr","authored_date":"2020-03-20T15:28:49.000+01:00","committer_name":"Pierre-Marie Pédrot","committer_email":"pierre-marie.pedrot@inria.fr","committed_date":"2020-03-20T15:53:57.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c64a18bcdd0489586f8ff386f7daa432f7229407"},"pipeline":{"id":128195846,"iid":14578,"project_id":6138686,"sha":"c64a18bcdd0489586f8ff386f7daa432f7229407","ref":"pr-11867","status":"failed","source":"push","created_at":"2020-03-20T14:56:50.977Z","updated_at":"2020-03-20T17:57:05.893Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/128195846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/479596500","artifacts":[{"file_type":"trace","size":236644,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":479596499,"status":"success","stage":"stage-2","name":"plugin:ci-equations","ref":"pr-11867","tag":false,"coverage":null,"allow_failure":false,"created_at":"2020-03-20T14:56:52.122Z","started_at":"2020-03-20T15:17:34.574Z","finished_at":"2020-03-20T15:25:50.149Z","duration":495.575653,"queued_duration":3.128329,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c64a18bcdd0489586f8ff386f7daa432f7229407","short_id":"c64a18bc","created_at":"2020-03-20T15:53:57.000+01:00","parent_ids":["4d025d4161599ea20cd1dbf489a6412f019a7a7e"],"title":"Fix the computation of recursive principles with let-bindings.","message":"Fix the computation of recursive principles with let-bindings.\n\nWe use a more robust implementation that does not assume that the type\nof the inductive is in ζ-normal form. This code path is not exercised,\nbecause due to the kernel typing algorithm, let-bindings in the type\nof a recursor are expanded away.\n","author_name":"Pierre-Marie Pédrot","author_email":"pierre-marie.pedrot@inria.fr","authored_date":"2020-03-20T15:28:49.000+01:00","committer_name":"Pierre-Marie Pédrot","committer_email":"pierre-marie.pedrot@inria.fr","committed_date":"2020-03-20T15:53:57.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c64a18bcdd0489586f8ff386f7daa432f7229407"},"pipeline":{"id":128195846,"iid":14578,"project_id":6138686,"sha":"c64a18bcdd0489586f8ff386f7daa432f7229407","ref":"pr-11867","status":"failed","source":"push","created_at":"2020-03-20T14:56:50.977Z","updated_at":"2020-03-20T17:57:05.893Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/128195846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/479596499","artifacts":[{"file_type":"trace","size":86987,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":479596498,"status":"success","stage":"stage-2","name":"plugin:ci-elpi","ref":"pr-11867","tag":false,"coverage":null,"allow_failure":false,"created_at":"2020-03-20T14:56:52.095Z","started_at":"2020-03-20T15:17:34.485Z","finished_at":"2020-03-20T15:23:35.095Z","duration":360.609751,"queued_duration":3.114301,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c64a18bcdd0489586f8ff386f7daa432f7229407","short_id":"c64a18bc","created_at":"2020-03-20T15:53:57.000+01:00","parent_ids":["4d025d4161599ea20cd1dbf489a6412f019a7a7e"],"title":"Fix the computation of recursive principles with let-bindings.","message":"Fix the computation of recursive principles with let-bindings.\n\nWe use a more robust implementation that does not assume that the type\nof the inductive is in ζ-normal form. This code path is not exercised,\nbecause due to the kernel typing algorithm, let-bindings in the type\nof a recursor are expanded away.\n","author_name":"Pierre-Marie Pédrot","author_email":"pierre-marie.pedrot@inria.fr","authored_date":"2020-03-20T15:28:49.000+01:00","committer_name":"Pierre-Marie Pédrot","committer_email":"pierre-marie.pedrot@inria.fr","committed_date":"2020-03-20T15:53:57.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c64a18bcdd0489586f8ff386f7daa432f7229407"},"pipeline":{"id":128195846,"iid":14578,"project_id":6138686,"sha":"c64a18bcdd0489586f8ff386f7daa432f7229407","ref":"pr-11867","status":"failed","source":"push","created_at":"2020-03-20T14:56:50.977Z","updated_at":"2020-03-20T17:57:05.893Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/128195846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/479596498","artifacts":[{"file_type":"trace","size":317298,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":479596497,"status":"success","stage":"stage-2","name":"plugin:ci-coqhammer","ref":"pr-11867","tag":false,"coverage":null,"allow_failure":false,"created_at":"2020-03-20T14:56:52.067Z","started_at":"2020-03-20T15:17:34.412Z","finished_at":"2020-03-20T15:21:10.537Z","duration":216.124512,"queued_duration":3.130202,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c64a18bcdd0489586f8ff386f7daa432f7229407","short_id":"c64a18bc","created_at":"2020-03-20T15:53:57.000+01:00","parent_ids":["4d025d4161599ea20cd1dbf489a6412f019a7a7e"],"title":"Fix the computation of recursive principles with let-bindings.","message":"Fix the computation of recursive principles with let-bindings.\n\nWe use a more robust implementation that does not assume that the type\nof the inductive is in ζ-normal form. This code path is not exercised,\nbecause due to the kernel typing algorithm, let-bindings in the type\nof a recursor are expanded away.\n","author_name":"Pierre-Marie Pédrot","author_email":"pierre-marie.pedrot@inria.fr","authored_date":"2020-03-20T15:28:49.000+01:00","committer_name":"Pierre-Marie Pédrot","committer_email":"pierre-marie.pedrot@inria.fr","committed_date":"2020-03-20T15:53:57.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c64a18bcdd0489586f8ff386f7daa432f7229407"},"pipeline":{"id":128195846,"iid":14578,"project_id":6138686,"sha":"c64a18bcdd0489586f8ff386f7daa432f7229407","ref":"pr-11867","status":"failed","source":"push","created_at":"2020-03-20T14:56:50.977Z","updated_at":"2020-03-20T17:57:05.893Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/128195846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/479596497","artifacts":[{"file_type":"trace","size":35536,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":479596494,"status":"success","stage":"stage-2","name":"plugin:ci-coq_dpdgraph","ref":"pr-11867","tag":false,"coverage":null,"allow_failure":false,"created_at":"2020-03-20T14:56:52.047Z","started_at":"2020-03-20T15:17:34.362Z","finished_at":"2020-03-20T15:20:51.543Z","duration":197.181401,"queued_duration":3.165086,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c64a18bcdd0489586f8ff386f7daa432f7229407","short_id":"c64a18bc","created_at":"2020-03-20T15:53:57.000+01:00","parent_ids":["4d025d4161599ea20cd1dbf489a6412f019a7a7e"],"title":"Fix the computation of recursive principles with let-bindings.","message":"Fix the computation of recursive principles with let-bindings.\n\nWe use a more robust implementation that does not assume that the type\nof the inductive is in ζ-normal form. This code path is not exercised,\nbecause due to the kernel typing algorithm, let-bindings in the type\nof a recursor are expanded away.\n","author_name":"Pierre-Marie Pédrot","author_email":"pierre-marie.pedrot@inria.fr","authored_date":"2020-03-20T15:28:49.000+01:00","committer_name":"Pierre-Marie Pédrot","committer_email":"pierre-marie.pedrot@inria.fr","committed_date":"2020-03-20T15:53:57.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c64a18bcdd0489586f8ff386f7daa432f7229407"},"pipeline":{"id":128195846,"iid":14578,"project_id":6138686,"sha":"c64a18bcdd0489586f8ff386f7daa432f7229407","ref":"pr-11867","status":"failed","source":"push","created_at":"2020-03-20T14:56:50.977Z","updated_at":"2020-03-20T17:57:05.893Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/128195846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/479596494","artifacts":[{"file_type":"trace","size":40599,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":479596492,"status":"success","stage":"stage-2","name":"plugin:ci-bignums","ref":"pr-11867","tag":false,"coverage":null,"allow_failure":false,"created_at":"2020-03-20T14:56:52.026Z","started_at":"2020-03-20T15:14:41.894Z","finished_at":"2020-03-20T15:20:31.527Z","duration":349.632772,"queued_duration":1.737163,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c64a18bcdd0489586f8ff386f7daa432f7229407","short_id":"c64a18bc","created_at":"2020-03-20T15:53:57.000+01:00","parent_ids":["4d025d4161599ea20cd1dbf489a6412f019a7a7e"],"title":"Fix the computation of recursive principles with let-bindings.","message":"Fix the computation of recursive principles with let-bindings.\n\nWe use a more robust implementation that does not assume that the type\nof the inductive is in ζ-normal form. This code path is not exercised,\nbecause due to the kernel typing algorithm, let-bindings in the type\nof a recursor are expanded away.\n","author_name":"Pierre-Marie Pédrot","author_email":"pierre-marie.pedrot@inria.fr","authored_date":"2020-03-20T15:28:49.000+01:00","committer_name":"Pierre-Marie Pédrot","committer_email":"pierre-marie.pedrot@inria.fr","committed_date":"2020-03-20T15:53:57.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c64a18bcdd0489586f8ff386f7daa432f7229407"},"pipeline":{"id":128195846,"iid":14578,"project_id":6138686,"sha":"c64a18bcdd0489586f8ff386f7daa432f7229407","ref":"pr-11867","status":"failed","source":"push","created_at":"2020-03-20T14:56:50.977Z","updated_at":"2020-03-20T17:57:05.893Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/128195846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/479596492","artifacts":[{"file_type":"trace","size":256858,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":479596489,"status":"success","stage":"stage-2","name":"plugin:ci-aac_tactics","ref":"pr-11867","tag":false,"coverage":null,"allow_failure":false,"created_at":"2020-03-20T14:56:52.005Z","started_at":"2020-03-20T15:17:34.278Z","finished_at":"2020-03-20T15:21:10.386Z","duration":216.107576,"queued_duration":3.149255,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c64a18bcdd0489586f8ff386f7daa432f7229407","short_id":"c64a18bc","created_at":"2020-03-20T15:53:57.000+01:00","parent_ids":["4d025d4161599ea20cd1dbf489a6412f019a7a7e"],"title":"Fix the computation of recursive principles with let-bindings.","message":"Fix the computation of recursive principles with let-bindings.\n\nWe use a more robust implementation that does not assume that the type\nof the inductive is in ζ-normal form. This code path is not exercised,\nbecause due to the kernel typing algorithm, let-bindings in the type\nof a recursor are expanded away.\n","author_name":"Pierre-Marie Pédrot","author_email":"pierre-marie.pedrot@inria.fr","authored_date":"2020-03-20T15:28:49.000+01:00","committer_name":"Pierre-Marie Pédrot","committer_email":"pierre-marie.pedrot@inria.fr","committed_date":"2020-03-20T15:53:57.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c64a18bcdd0489586f8ff386f7daa432f7229407"},"pipeline":{"id":128195846,"iid":14578,"project_id":6138686,"sha":"c64a18bcdd0489586f8ff386f7daa432f7229407","ref":"pr-11867","status":"failed","source":"push","created_at":"2020-03-20T14:56:50.977Z","updated_at":"2020-03-20T17:57:05.893Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/128195846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/479596489","artifacts":[{"file_type":"trace","size":46928,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":479596486,"status":"success","stage":"stage-2","name":"library:ci-verdi-raft","ref":"pr-11867","tag":false,"coverage":null,"allow_failure":false,"created_at":"2020-03-20T14:56:51.967Z","started_at":"2020-03-20T15:14:41.760Z","finished_at":"2020-03-20T15:44:20.029Z","duration":1778.269202,"queued_duration":1.774668,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c64a18bcdd0489586f8ff386f7daa432f7229407","short_id":"c64a18bc","created_at":"2020-03-20T15:53:57.000+01:00","parent_ids":["4d025d4161599ea20cd1dbf489a6412f019a7a7e"],"title":"Fix the computation of recursive principles with let-bindings.","message":"Fix the computation of recursive principles with let-bindings.\n\nWe use a more robust implementation that does not assume that the type\nof the inductive is in ζ-normal form. This code path is not exercised,\nbecause due to the kernel typing algorithm, let-bindings in the type\nof a recursor are expanded away.\n","author_name":"Pierre-Marie Pédrot","author_email":"pierre-marie.pedrot@inria.fr","authored_date":"2020-03-20T15:28:49.000+01:00","committer_name":"Pierre-Marie Pédrot","committer_email":"pierre-marie.pedrot@inria.fr","committed_date":"2020-03-20T15:53:57.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c64a18bcdd0489586f8ff386f7daa432f7229407"},"pipeline":{"id":128195846,"iid":14578,"project_id":6138686,"sha":"c64a18bcdd0489586f8ff386f7daa432f7229407","ref":"pr-11867","status":"failed","source":"push","created_at":"2020-03-20T14:56:50.977Z","updated_at":"2020-03-20T17:57:05.893Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/128195846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/479596486","artifacts":[{"file_type":"trace","size":169959,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":479596485,"status":"success","stage":"stage-2","name":"library:ci-unimath","ref":"pr-11867","tag":false,"coverage":null,"allow_failure":false,"created_at":"2020-03-20T14:56:51.950Z","started_at":"2020-03-20T15:14:41.527Z","finished_at":"2020-03-20T16:24:05.815Z","duration":4164.288538,"queued_duration":1.600531,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c64a18bcdd0489586f8ff386f7daa432f7229407","short_id":"c64a18bc","created_at":"2020-03-20T15:53:57.000+01:00","parent_ids":["4d025d4161599ea20cd1dbf489a6412f019a7a7e"],"title":"Fix the computation of recursive principles with let-bindings.","message":"Fix the computation of recursive principles with let-bindings.\n\nWe use a more robust implementation that does not assume that the type\nof the inductive is in ζ-normal form. This code path is not exercised,\nbecause due to the kernel typing algorithm, let-bindings in the type\nof a recursor are expanded away.\n","author_name":"Pierre-Marie Pédrot","author_email":"pierre-marie.pedrot@inria.fr","authored_date":"2020-03-20T15:28:49.000+01:00","committer_name":"Pierre-Marie Pédrot","committer_email":"pierre-marie.pedrot@inria.fr","committed_date":"2020-03-20T15:53:57.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c64a18bcdd0489586f8ff386f7daa432f7229407"},"pipeline":{"id":128195846,"iid":14578,"project_id":6138686,"sha":"c64a18bcdd0489586f8ff386f7daa432f7229407","ref":"pr-11867","status":"failed","source":"push","created_at":"2020-03-20T14:56:50.977Z","updated_at":"2020-03-20T17:57:05.893Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/128195846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/479596485","artifacts":[{"file_type":"trace","size":210838,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":479596482,"status":"success","stage":"stage-2","name":"library:ci-tlc","ref":"pr-11867","tag":false,"coverage":null,"allow_failure":false,"created_at":"2020-03-20T14:56:51.924Z","started_at":"2020-03-20T15:17:34.118Z","finished_at":"2020-03-20T15:22:17.815Z","duration":283.697709,"queued_duration":3.075504,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c64a18bcdd0489586f8ff386f7daa432f7229407","short_id":"c64a18bc","created_at":"2020-03-20T15:53:57.000+01:00","parent_ids":["4d025d4161599ea20cd1dbf489a6412f019a7a7e"],"title":"Fix the computation of recursive principles with let-bindings.","message":"Fix the computation of recursive principles with let-bindings.\n\nWe use a more robust implementation that does not assume that the type\nof the inductive is in ζ-normal form. This code path is not exercised,\nbecause due to the kernel typing algorithm, let-bindings in the type\nof a recursor are expanded away.\n","author_name":"Pierre-Marie Pédrot","author_email":"pierre-marie.pedrot@inria.fr","authored_date":"2020-03-20T15:28:49.000+01:00","committer_name":"Pierre-Marie Pédrot","committer_email":"pierre-marie.pedrot@inria.fr","committed_date":"2020-03-20T15:53:57.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c64a18bcdd0489586f8ff386f7daa432f7229407"},"pipeline":{"id":128195846,"iid":14578,"project_id":6138686,"sha":"c64a18bcdd0489586f8ff386f7daa432f7229407","ref":"pr-11867","status":"failed","source":"push","created_at":"2020-03-20T14:56:50.977Z","updated_at":"2020-03-20T17:57:05.893Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/128195846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/479596482","artifacts":[{"file_type":"trace","size":30501,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":479596480,"status":"success","stage":"stage-2","name":"library:ci-stdlib2","ref":"pr-11867","tag":false,"coverage":null,"allow_failure":false,"created_at":"2020-03-20T14:56:51.905Z","started_at":"2020-03-20T15:14:41.371Z","finished_at":"2020-03-20T15:19:31.100Z","duration":289.728511,"queued_duration":1.50636,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c64a18bcdd0489586f8ff386f7daa432f7229407","short_id":"c64a18bc","created_at":"2020-03-20T15:53:57.000+01:00","parent_ids":["4d025d4161599ea20cd1dbf489a6412f019a7a7e"],"title":"Fix the computation of recursive principles with let-bindings.","message":"Fix the computation of recursive principles with let-bindings.\n\nWe use a more robust implementation that does not assume that the type\nof the inductive is in ζ-normal form. This code path is not exercised,\nbecause due to the kernel typing algorithm, let-bindings in the type\nof a recursor are expanded away.\n","author_name":"Pierre-Marie Pédrot","author_email":"pierre-marie.pedrot@inria.fr","authored_date":"2020-03-20T15:28:49.000+01:00","committer_name":"Pierre-Marie Pédrot","committer_email":"pierre-marie.pedrot@inria.fr","committed_date":"2020-03-20T15:53:57.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c64a18bcdd0489586f8ff386f7daa432f7229407"},"pipeline":{"id":128195846,"iid":14578,"project_id":6138686,"sha":"c64a18bcdd0489586f8ff386f7daa432f7229407","ref":"pr-11867","status":"failed","source":"push","created_at":"2020-03-20T14:56:50.977Z","updated_at":"2020-03-20T17:57:05.893Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/128195846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/479596480","artifacts":[{"file_type":"trace","size":57337,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":479596479,"status":"success","stage":"stage-2","name":"library:ci-sf","ref":"pr-11867","tag":false,"coverage":null,"allow_failure":false,"created_at":"2020-03-20T14:56:51.889Z","started_at":"2020-03-20T15:17:34.021Z","finished_at":"2020-03-20T15:22:43.763Z","duration":309.742255,"queued_duration":3.040431,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c64a18bcdd0489586f8ff386f7daa432f7229407","short_id":"c64a18bc","created_at":"2020-03-20T15:53:57.000+01:00","parent_ids":["4d025d4161599ea20cd1dbf489a6412f019a7a7e"],"title":"Fix the computation of recursive principles with let-bindings.","message":"Fix the computation of recursive principles with let-bindings.\n\nWe use a more robust implementation that does not assume that the type\nof the inductive is in ζ-normal form. This code path is not exercised,\nbecause due to the kernel typing algorithm, let-bindings in the type\nof a recursor are expanded away.\n","author_name":"Pierre-Marie Pédrot","author_email":"pierre-marie.pedrot@inria.fr","authored_date":"2020-03-20T15:28:49.000+01:00","committer_name":"Pierre-Marie Pédrot","committer_email":"pierre-marie.pedrot@inria.fr","committed_date":"2020-03-20T15:53:57.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c64a18bcdd0489586f8ff386f7daa432f7229407"},"pipeline":{"id":128195846,"iid":14578,"project_id":6138686,"sha":"c64a18bcdd0489586f8ff386f7daa432f7229407","ref":"pr-11867","status":"failed","source":"push","created_at":"2020-03-20T14:56:50.977Z","updated_at":"2020-03-20T17:57:05.893Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/128195846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/479596479","artifacts":[{"file_type":"trace","size":431173,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":479596478,"status":"success","stage":"stage-2","name":"library:ci-math-comp","ref":"pr-11867","tag":false,"coverage":null,"allow_failure":false,"created_at":"2020-03-20T14:56:51.873Z","started_at":"2020-03-20T15:14:41.145Z","finished_at":"2020-03-20T16:41:27.470Z","duration":5206.324564,"queued_duration":1.341601,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c64a18bcdd0489586f8ff386f7daa432f7229407","short_id":"c64a18bc","created_at":"2020-03-20T15:53:57.000+01:00","parent_ids":["4d025d4161599ea20cd1dbf489a6412f019a7a7e"],"title":"Fix the computation of recursive principles with let-bindings.","message":"Fix the computation of recursive principles with let-bindings.\n\nWe use a more robust implementation that does not assume that the type\nof the inductive is in ζ-normal form. This code path is not exercised,\nbecause due to the kernel typing algorithm, let-bindings in the type\nof a recursor are expanded away.\n","author_name":"Pierre-Marie Pédrot","author_email":"pierre-marie.pedrot@inria.fr","authored_date":"2020-03-20T15:28:49.000+01:00","committer_name":"Pierre-Marie Pédrot","committer_email":"pierre-marie.pedrot@inria.fr","committed_date":"2020-03-20T15:53:57.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c64a18bcdd0489586f8ff386f7daa432f7229407"},"pipeline":{"id":128195846,"iid":14578,"project_id":6138686,"sha":"c64a18bcdd0489586f8ff386f7daa432f7229407","ref":"pr-11867","status":"failed","source":"push","created_at":"2020-03-20T14:56:50.977Z","updated_at":"2020-03-20T17:57:05.893Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/128195846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/479596478","artifacts":[{"file_type":"trace","size":408558,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":479596477,"status":"success","stage":"stage-2","name":"library:ci-iris-lambda-rust","ref":"pr-11867","tag":false,"coverage":null,"allow_failure":false,"created_at":"2020-03-20T14:56:51.857Z","started_at":"2020-03-20T15:14:40.966Z","finished_at":"2020-03-20T16:08:42.070Z","duration":3241.104442,"queued_duration":1.227226,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c64a18bcdd0489586f8ff386f7daa432f7229407","short_id":"c64a18bc","created_at":"2020-03-20T15:53:57.000+01:00","parent_ids":["4d025d4161599ea20cd1dbf489a6412f019a7a7e"],"title":"Fix the computation of recursive principles with let-bindings.","message":"Fix the computation of recursive principles with let-bindings.\n\nWe use a more robust implementation that does not assume that the type\nof the inductive is in ζ-normal form. This code path is not exercised,\nbecause due to the kernel typing algorithm, let-bindings in the type\nof a recursor are expanded away.\n","author_name":"Pierre-Marie Pédrot","author_email":"pierre-marie.pedrot@inria.fr","authored_date":"2020-03-20T15:28:49.000+01:00","committer_name":"Pierre-Marie Pédrot","committer_email":"pierre-marie.pedrot@inria.fr","committed_date":"2020-03-20T15:53:57.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c64a18bcdd0489586f8ff386f7daa432f7229407"},"pipeline":{"id":128195846,"iid":14578,"project_id":6138686,"sha":"c64a18bcdd0489586f8ff386f7daa432f7229407","ref":"pr-11867","status":"failed","source":"push","created_at":"2020-03-20T14:56:50.977Z","updated_at":"2020-03-20T17:57:05.893Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/128195846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/479596477","artifacts":[{"file_type":"trace","size":307821,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":479596475,"status":"success","stage":"stage-2","name":"library:ci-hott","ref":"pr-11867","tag":false,"coverage":null,"allow_failure":false,"created_at":"2020-03-20T14:56:51.838Z","started_at":"2020-03-20T15:17:33.809Z","finished_at":"2020-03-20T15:28:28.587Z","duration":654.777605,"queued_duration":2.892373,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c64a18bcdd0489586f8ff386f7daa432f7229407","short_id":"c64a18bc","created_at":"2020-03-20T15:53:57.000+01:00","parent_ids":["4d025d4161599ea20cd1dbf489a6412f019a7a7e"],"title":"Fix the computation of recursive principles with let-bindings.","message":"Fix the computation of recursive principles with let-bindings.\n\nWe use a more robust implementation that does not assume that the type\nof the inductive is in ζ-normal form. This code path is not exercised,\nbecause due to the kernel typing algorithm, let-bindings in the type\nof a recursor are expanded away.\n","author_name":"Pierre-Marie Pédrot","author_email":"pierre-marie.pedrot@inria.fr","authored_date":"2020-03-20T15:28:49.000+01:00","committer_name":"Pierre-Marie Pédrot","committer_email":"pierre-marie.pedrot@inria.fr","committed_date":"2020-03-20T15:53:57.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c64a18bcdd0489586f8ff386f7daa432f7229407"},"pipeline":{"id":128195846,"iid":14578,"project_id":6138686,"sha":"c64a18bcdd0489586f8ff386f7daa432f7229407","ref":"pr-11867","status":"failed","source":"push","created_at":"2020-03-20T14:56:50.977Z","updated_at":"2020-03-20T17:57:05.893Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/128195846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/479596475","artifacts":[{"file_type":"trace","size":126934,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":479596474,"status":"success","stage":"stage-2","name":"library:ci-geocoq","ref":"pr-11867","tag":false,"coverage":null,"allow_failure":false,"created_at":"2020-03-20T14:56:51.811Z","started_at":"2020-03-20T15:14:40.912Z","finished_at":"2020-03-20T15:52:04.153Z","duration":2243.240745,"queued_duration":1.24802,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c64a18bcdd0489586f8ff386f7daa432f7229407","short_id":"c64a18bc","created_at":"2020-03-20T15:53:57.000+01:00","parent_ids":["4d025d4161599ea20cd1dbf489a6412f019a7a7e"],"title":"Fix the computation of recursive principles with let-bindings.","message":"Fix the computation of recursive principles with let-bindings.\n\nWe use a more robust implementation that does not assume that the type\nof the inductive is in ζ-normal form. This code path is not exercised,\nbecause due to the kernel typing algorithm, let-bindings in the type\nof a recursor are expanded away.\n","author_name":"Pierre-Marie Pédrot","author_email":"pierre-marie.pedrot@inria.fr","authored_date":"2020-03-20T15:28:49.000+01:00","committer_name":"Pierre-Marie Pédrot","committer_email":"pierre-marie.pedrot@inria.fr","committed_date":"2020-03-20T15:53:57.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c64a18bcdd0489586f8ff386f7daa432f7229407"},"pipeline":{"id":128195846,"iid":14578,"project_id":6138686,"sha":"c64a18bcdd0489586f8ff386f7daa432f7229407","ref":"pr-11867","status":"failed","source":"push","created_at":"2020-03-20T14:56:50.977Z","updated_at":"2020-03-20T17:57:05.893Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/128195846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/479596474","artifacts":[{"file_type":"trace","size":483955,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":479596472,"status":"success","stage":"stage-2","name":"library:ci-flocq","ref":"pr-11867","tag":false,"coverage":null,"allow_failure":false,"created_at":"2020-03-20T14:56:51.767Z","started_at":"2020-03-20T15:17:33.707Z","finished_at":"2020-03-20T15:24:03.052Z","duration":389.345126,"queued_duration":2.860219,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c64a18bcdd0489586f8ff386f7daa432f7229407","short_id":"c64a18bc","created_at":"2020-03-20T15:53:57.000+01:00","parent_ids":["4d025d4161599ea20cd1dbf489a6412f019a7a7e"],"title":"Fix the computation of recursive principles with let-bindings.","message":"Fix the computation of recursive principles with let-bindings.\n\nWe use a more robust implementation that does not assume that the type\nof the inductive is in ζ-normal form. This code path is not exercised,\nbecause due to the kernel typing algorithm, let-bindings in the type\nof a recursor are expanded away.\n","author_name":"Pierre-Marie Pédrot","author_email":"pierre-marie.pedrot@inria.fr","authored_date":"2020-03-20T15:28:49.000+01:00","committer_name":"Pierre-Marie Pédrot","committer_email":"pierre-marie.pedrot@inria.fr","committed_date":"2020-03-20T15:53:57.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c64a18bcdd0489586f8ff386f7daa432f7229407"},"pipeline":{"id":128195846,"iid":14578,"project_id":6138686,"sha":"c64a18bcdd0489586f8ff386f7daa432f7229407","ref":"pr-11867","status":"failed","source":"push","created_at":"2020-03-20T14:56:50.977Z","updated_at":"2020-03-20T17:57:05.893Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/128195846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/479596472","artifacts":[{"file_type":"trace","size":30499,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":479596469,"status":"success","stage":"stage-2","name":"library:ci-fcsl-pcm","ref":"pr-11867","tag":false,"coverage":null,"allow_failure":false,"created_at":"2020-03-20T14:56:51.740Z","started_at":"2020-03-20T15:17:33.643Z","finished_at":"2020-03-20T15:22:26.400Z","duration":292.757244,"queued_duration":2.870143,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c64a18bcdd0489586f8ff386f7daa432f7229407","short_id":"c64a18bc","created_at":"2020-03-20T15:53:57.000+01:00","parent_ids":["4d025d4161599ea20cd1dbf489a6412f019a7a7e"],"title":"Fix the computation of recursive principles with let-bindings.","message":"Fix the computation of recursive principles with let-bindings.\n\nWe use a more robust implementation that does not assume that the type\nof the inductive is in ζ-normal form. This code path is not exercised,\nbecause due to the kernel typing algorithm, let-bindings in the type\nof a recursor are expanded away.\n","author_name":"Pierre-Marie Pédrot","author_email":"pierre-marie.pedrot@inria.fr","authored_date":"2020-03-20T15:28:49.000+01:00","committer_name":"Pierre-Marie Pédrot","committer_email":"pierre-marie.pedrot@inria.fr","committed_date":"2020-03-20T15:53:57.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c64a18bcdd0489586f8ff386f7daa432f7229407"},"pipeline":{"id":128195846,"iid":14578,"project_id":6138686,"sha":"c64a18bcdd0489586f8ff386f7daa432f7229407","ref":"pr-11867","status":"failed","source":"push","created_at":"2020-03-20T14:56:50.977Z","updated_at":"2020-03-20T17:57:05.893Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/128195846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/479596469","artifacts":[{"file_type":"trace","size":138041,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":479596463,"status":"success","stage":"stage-2","name":"library:ci-cross-crypto","ref":"pr-11867","tag":false,"coverage":null,"allow_failure":false,"created_at":"2020-03-20T14:56:51.697Z","started_at":"2020-03-20T15:17:33.585Z","finished_at":"2020-03-20T15:55:55.920Z","duration":2302.334792,"queued_duration":2.927466,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c64a18bcdd0489586f8ff386f7daa432f7229407","short_id":"c64a18bc","created_at":"2020-03-20T15:53:57.000+01:00","parent_ids":["4d025d4161599ea20cd1dbf489a6412f019a7a7e"],"title":"Fix the computation of recursive principles with let-bindings.","message":"Fix the computation of recursive principles with let-bindings.\n\nWe use a more robust implementation that does not assume that the type\nof the inductive is in ζ-normal form. This code path is not exercised,\nbecause due to the kernel typing algorithm, let-bindings in the type\nof a recursor are expanded away.\n","author_name":"Pierre-Marie Pédrot","author_email":"pierre-marie.pedrot@inria.fr","authored_date":"2020-03-20T15:28:49.000+01:00","committer_name":"Pierre-Marie Pédrot","committer_email":"pierre-marie.pedrot@inria.fr","committed_date":"2020-03-20T15:53:57.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c64a18bcdd0489586f8ff386f7daa432f7229407"},"pipeline":{"id":128195846,"iid":14578,"project_id":6138686,"sha":"c64a18bcdd0489586f8ff386f7daa432f7229407","ref":"pr-11867","status":"failed","source":"push","created_at":"2020-03-20T14:56:50.977Z","updated_at":"2020-03-20T17:57:05.893Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/128195846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/479596463","artifacts":[{"file_type":"trace","size":46774,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":479596456,"status":"success","stage":"stage-2","name":"library:ci-coquelicot","ref":"pr-11867","tag":false,"coverage":null,"allow_failure":false,"created_at":"2020-03-20T14:56:51.648Z","started_at":"2020-03-20T15:17:33.530Z","finished_at":"2020-03-20T15:23:18.281Z","duration":344.750459,"queued_duration":3.015809,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c64a18bcdd0489586f8ff386f7daa432f7229407","short_id":"c64a18bc","created_at":"2020-03-20T15:53:57.000+01:00","parent_ids":["4d025d4161599ea20cd1dbf489a6412f019a7a7e"],"title":"Fix the computation of recursive principles with let-bindings.","message":"Fix the computation of recursive principles with let-bindings.\n\nWe use a more robust implementation that does not assume that the type\nof the inductive is in ζ-normal form. This code path is not exercised,\nbecause due to the kernel typing algorithm, let-bindings in the type\nof a recursor are expanded away.\n","author_name":"Pierre-Marie Pédrot","author_email":"pierre-marie.pedrot@inria.fr","authored_date":"2020-03-20T15:28:49.000+01:00","committer_name":"Pierre-Marie Pédrot","committer_email":"pierre-marie.pedrot@inria.fr","committed_date":"2020-03-20T15:53:57.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c64a18bcdd0489586f8ff386f7daa432f7229407"},"pipeline":{"id":128195846,"iid":14578,"project_id":6138686,"sha":"c64a18bcdd0489586f8ff386f7daa432f7229407","ref":"pr-11867","status":"failed","source":"push","created_at":"2020-03-20T14:56:50.977Z","updated_at":"2020-03-20T17:57:05.893Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/128195846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/479596456","artifacts":[{"file_type":"trace","size":176170,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":479596451,"status":"success","stage":"stage-2","name":"library:ci-compcert","ref":"pr-11867","tag":false,"coverage":null,"allow_failure":false,"created_at":"2020-03-20T14:56:51.620Z","started_at":"2020-03-20T15:14:40.807Z","finished_at":"2020-03-20T15:33:31.731Z","duration":1130.923185,"queued_duration":1.220657,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c64a18bcdd0489586f8ff386f7daa432f7229407","short_id":"c64a18bc","created_at":"2020-03-20T15:53:57.000+01:00","parent_ids":["4d025d4161599ea20cd1dbf489a6412f019a7a7e"],"title":"Fix the computation of recursive principles with let-bindings.","message":"Fix the computation of recursive principles with let-bindings.\n\nWe use a more robust implementation that does not assume that the type\nof the inductive is in ζ-normal form. This code path is not exercised,\nbecause due to the kernel typing algorithm, let-bindings in the type\nof a recursor are expanded away.\n","author_name":"Pierre-Marie Pédrot","author_email":"pierre-marie.pedrot@inria.fr","authored_date":"2020-03-20T15:28:49.000+01:00","committer_name":"Pierre-Marie Pédrot","committer_email":"pierre-marie.pedrot@inria.fr","committed_date":"2020-03-20T15:53:57.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c64a18bcdd0489586f8ff386f7daa432f7229407"},"pipeline":{"id":128195846,"iid":14578,"project_id":6138686,"sha":"c64a18bcdd0489586f8ff386f7daa432f7229407","ref":"pr-11867","status":"failed","source":"push","created_at":"2020-03-20T14:56:50.977Z","updated_at":"2020-03-20T17:57:05.893Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/128195846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/479596451","artifacts":[{"file_type":"trace","size":4194360,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":479596441,"status":"success","stage":"stage-2","name":"library:ci-bedrock2","ref":"pr-11867","tag":false,"coverage":null,"allow_failure":false,"created_at":"2020-03-20T14:56:51.523Z","started_at":"2020-03-20T15:14:40.712Z","finished_at":"2020-03-20T16:43:28.033Z","duration":5327.321257,"queued_duration":1.184985,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c64a18bcdd0489586f8ff386f7daa432f7229407","short_id":"c64a18bc","created_at":"2020-03-20T15:53:57.000+01:00","parent_ids":["4d025d4161599ea20cd1dbf489a6412f019a7a7e"],"title":"Fix the computation of recursive principles with let-bindings.","message":"Fix the computation of recursive principles with let-bindings.\n\nWe use a more robust implementation that does not assume that the type\nof the inductive is in ζ-normal form. This code path is not exercised,\nbecause due to the kernel typing algorithm, let-bindings in the type\nof a recursor are expanded away.\n","author_name":"Pierre-Marie Pédrot","author_email":"pierre-marie.pedrot@inria.fr","authored_date":"2020-03-20T15:28:49.000+01:00","committer_name":"Pierre-Marie Pédrot","committer_email":"pierre-marie.pedrot@inria.fr","committed_date":"2020-03-20T15:53:57.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c64a18bcdd0489586f8ff386f7daa432f7229407"},"pipeline":{"id":128195846,"iid":14578,"project_id":6138686,"sha":"c64a18bcdd0489586f8ff386f7daa432f7229407","ref":"pr-11867","status":"failed","source":"push","created_at":"2020-03-20T14:56:50.977Z","updated_at":"2020-03-20T17:57:05.893Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/128195846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/479596441","artifacts":[{"file_type":"trace","size":320910,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":479596438,"status":"success","stage":"stage-2","name":"library:ci-argosy","ref":"pr-11867","tag":false,"coverage":null,"allow_failure":false,"created_at":"2020-03-20T14:56:51.498Z","started_at":"2020-03-20T15:17:33.471Z","finished_at":"2020-03-20T15:21:40.438Z","duration":246.966636,"queued_duration":3.072155,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c64a18bcdd0489586f8ff386f7daa432f7229407","short_id":"c64a18bc","created_at":"2020-03-20T15:53:57.000+01:00","parent_ids":["4d025d4161599ea20cd1dbf489a6412f019a7a7e"],"title":"Fix the computation of recursive principles with let-bindings.","message":"Fix the computation of recursive principles with let-bindings.\n\nWe use a more robust implementation that does not assume that the type\nof the inductive is in ζ-normal form. This code path is not exercised,\nbecause due to the kernel typing algorithm, let-bindings in the type\nof a recursor are expanded away.\n","author_name":"Pierre-Marie Pédrot","author_email":"pierre-marie.pedrot@inria.fr","authored_date":"2020-03-20T15:28:49.000+01:00","committer_name":"Pierre-Marie Pédrot","committer_email":"pierre-marie.pedrot@inria.fr","committed_date":"2020-03-20T15:53:57.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c64a18bcdd0489586f8ff386f7daa432f7229407"},"pipeline":{"id":128195846,"iid":14578,"project_id":6138686,"sha":"c64a18bcdd0489586f8ff386f7daa432f7229407","ref":"pr-11867","status":"failed","source":"push","created_at":"2020-03-20T14:56:50.977Z","updated_at":"2020-03-20T17:57:05.893Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/128195846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/479596438","artifacts":[{"file_type":"trace","size":24595,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":479596435,"status":"success","stage":"stage-2","name":"validate:quick","ref":"pr-11867","tag":false,"coverage":null,"allow_failure":false,"created_at":"2020-03-20T14:56:51.476Z","started_at":"2020-03-20T15:17:05.302Z","finished_at":"2020-03-20T15:21:53.200Z","duration":287.898676,"queued_duration":2.624496,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c64a18bcdd0489586f8ff386f7daa432f7229407","short_id":"c64a18bc","created_at":"2020-03-20T15:53:57.000+01:00","parent_ids":["4d025d4161599ea20cd1dbf489a6412f019a7a7e"],"title":"Fix the computation of recursive principles with let-bindings.","message":"Fix the computation of recursive principles with let-bindings.\n\nWe use a more robust implementation that does not assume that the type\nof the inductive is in ζ-normal form. This code path is not exercised,\nbecause due to the kernel typing algorithm, let-bindings in the type\nof a recursor are expanded away.\n","author_name":"Pierre-Marie Pédrot","author_email":"pierre-marie.pedrot@inria.fr","authored_date":"2020-03-20T15:28:49.000+01:00","committer_name":"Pierre-Marie Pédrot","committer_email":"pierre-marie.pedrot@inria.fr","committed_date":"2020-03-20T15:53:57.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c64a18bcdd0489586f8ff386f7daa432f7229407"},"pipeline":{"id":128195846,"iid":14578,"project_id":6138686,"sha":"c64a18bcdd0489586f8ff386f7daa432f7229407","ref":"pr-11867","status":"failed","source":"push","created_at":"2020-03-20T14:56:50.977Z","updated_at":"2020-03-20T17:57:05.893Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/128195846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/479596435","artifacts":[{"file_type":"trace","size":69025,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2020-05-19T15:21:52.122Z","tag_list":[]}
{"id":479596433,"status":"success","stage":"stage-2","name":"validate:edge+flambda","ref":"pr-11867","tag":false,"coverage":null,"allow_failure":false,"created_at":"2020-03-20T14:56:51.451Z","started_at":"2020-03-20T15:14:40.150Z","finished_at":"2020-03-20T15:21:12.791Z","duration":392.640776,"queued_duration":0.691878,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c64a18bcdd0489586f8ff386f7daa432f7229407","short_id":"c64a18bc","created_at":"2020-03-20T15:53:57.000+01:00","parent_ids":["4d025d4161599ea20cd1dbf489a6412f019a7a7e"],"title":"Fix the computation of recursive principles with let-bindings.","message":"Fix the computation of recursive principles with let-bindings.\n\nWe use a more robust implementation that does not assume that the type\nof the inductive is in ζ-normal form. This code path is not exercised,\nbecause due to the kernel typing algorithm, let-bindings in the type\nof a recursor are expanded away.\n","author_name":"Pierre-Marie Pédrot","author_email":"pierre-marie.pedrot@inria.fr","authored_date":"2020-03-20T15:28:49.000+01:00","committer_name":"Pierre-Marie Pédrot","committer_email":"pierre-marie.pedrot@inria.fr","committed_date":"2020-03-20T15:53:57.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c64a18bcdd0489586f8ff386f7daa432f7229407"},"pipeline":{"id":128195846,"iid":14578,"project_id":6138686,"sha":"c64a18bcdd0489586f8ff386f7daa432f7229407","ref":"pr-11867","status":"failed","source":"push","created_at":"2020-03-20T14:56:50.977Z","updated_at":"2020-03-20T17:57:05.893Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/128195846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/479596433","artifacts":[{"file_type":"trace","size":86871,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":"2020-05-19T15:21:10.287Z","tag_list":[]}
{"id":479596430,"status":"success","stage":"stage-2","name":"validate:base+32bit","ref":"pr-11867","tag":false,"coverage":null,"allow_failure":false,"created_at":"2020-03-20T14:56:51.429Z","started_at":"2020-03-20T15:07:14.323Z","finished_at":"2020-03-20T15:10:48.247Z","duration":213.923912,"queued_duration":0.555102,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c64a18bcdd0489586f8ff386f7daa432f7229407","short_id":"c64a18bc","created_at":"2020-03-20T15:53:57.000+01:00","parent_ids":["4d025d4161599ea20cd1dbf489a6412f019a7a7e"],"title":"Fix the computation of recursive principles with let-bindings.","message":"Fix the computation of recursive principles with let-bindings.\n\nWe use a more robust implementation that does not assume that the type\nof the inductive is in ζ-normal form. This code path is not exercised,\nbecause due to the kernel typing algorithm, let-bindings in the type\nof a recursor are expanded away.\n","author_name":"Pierre-Marie Pédrot","author_email":"pierre-marie.pedrot@inria.fr","authored_date":"2020-03-20T15:28:49.000+01:00","committer_name":"Pierre-Marie Pédrot","committer_email":"pierre-marie.pedrot@inria.fr","committed_date":"2020-03-20T15:53:57.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c64a18bcdd0489586f8ff386f7daa432f7229407"},"pipeline":{"id":128195846,"iid":14578,"project_id":6138686,"sha":"c64a18bcdd0489586f8ff386f7daa432f7229407","ref":"pr-11867","status":"failed","source":"push","created_at":"2020-03-20T14:56:50.977Z","updated_at":"2020-03-20T17:57:05.893Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/128195846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/479596430","artifacts":[{"file_type":"trace","size":272184,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":"2020-05-19T15:10:45.806Z","tag_list":[]}
{"id":479596429,"status":"success","stage":"stage-2","name":"validate:base","ref":"pr-11867","tag":false,"coverage":null,"allow_failure":false,"created_at":"2020-03-20T14:56:51.407Z","started_at":"2020-03-20T15:17:33.240Z","finished_at":"2020-03-20T15:22:26.339Z","duration":293.099183,"queued_duration":2.935409,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c64a18bcdd0489586f8ff386f7daa432f7229407","short_id":"c64a18bc","created_at":"2020-03-20T15:53:57.000+01:00","parent_ids":["4d025d4161599ea20cd1dbf489a6412f019a7a7e"],"title":"Fix the computation of recursive principles with let-bindings.","message":"Fix the computation of recursive principles with let-bindings.\n\nWe use a more robust implementation that does not assume that the type\nof the inductive is in ζ-normal form. This code path is not exercised,\nbecause due to the kernel typing algorithm, let-bindings in the type\nof a recursor are expanded away.\n","author_name":"Pierre-Marie Pédrot","author_email":"pierre-marie.pedrot@inria.fr","authored_date":"2020-03-20T15:28:49.000+01:00","committer_name":"Pierre-Marie Pédrot","committer_email":"pierre-marie.pedrot@inria.fr","committed_date":"2020-03-20T15:53:57.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c64a18bcdd0489586f8ff386f7daa432f7229407"},"pipeline":{"id":128195846,"iid":14578,"project_id":6138686,"sha":"c64a18bcdd0489586f8ff386f7daa432f7229407","ref":"pr-11867","status":"failed","source":"push","created_at":"2020-03-20T14:56:50.977Z","updated_at":"2020-03-20T17:57:05.893Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/128195846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/479596429","artifacts":[{"file_type":"trace","size":69021,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2020-05-19T15:22:25.188Z","tag_list":[]}
{"id":479596427,"status":"success","stage":"stage-2","name":"test-suite:base+async","ref":"pr-11867","tag":false,"coverage":null,"allow_failure":true,"created_at":"2020-03-20T14:56:51.386Z","started_at":"2020-03-20T15:17:32.685Z","finished_at":"2020-03-20T15:39:58.435Z","duration":1345.75027,"queued_duration":2.514203,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c64a18bcdd0489586f8ff386f7daa432f7229407","short_id":"c64a18bc","created_at":"2020-03-20T15:53:57.000+01:00","parent_ids":["4d025d4161599ea20cd1dbf489a6412f019a7a7e"],"title":"Fix the computation of recursive principles with let-bindings.","message":"Fix the computation of recursive principles with let-bindings.\n\nWe use a more robust implementation that does not assume that the type\nof the inductive is in ζ-normal form. This code path is not exercised,\nbecause due to the kernel typing algorithm, let-bindings in the type\nof a recursor are expanded away.\n","author_name":"Pierre-Marie Pédrot","author_email":"pierre-marie.pedrot@inria.fr","authored_date":"2020-03-20T15:28:49.000+01:00","committer_name":"Pierre-Marie Pédrot","committer_email":"pierre-marie.pedrot@inria.fr","committed_date":"2020-03-20T15:53:57.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c64a18bcdd0489586f8ff386f7daa432f7229407"},"pipeline":{"id":128195846,"iid":14578,"project_id":6138686,"sha":"c64a18bcdd0489586f8ff386f7daa432f7229407","ref":"pr-11867","status":"failed","source":"push","created_at":"2020-03-20T14:56:50.977Z","updated_at":"2020-03-20T17:57:05.893Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/128195846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/479596427","artifacts":[{"file_type":"trace","size":310381,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":479596425,"status":"success","stage":"stage-2","name":"test-suite:edge:dune:dev","ref":"pr-11867","tag":false,"coverage":null,"allow_failure":false,"created_at":"2020-03-20T14:56:51.368Z","started_at":"2020-03-20T15:16:17.695Z","finished_at":"2020-03-20T15:40:36.934Z","duration":1459.238861,"queued_duration":1.967186,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c64a18bcdd0489586f8ff386f7daa432f7229407","short_id":"c64a18bc","created_at":"2020-03-20T15:53:57.000+01:00","parent_ids":["4d025d4161599ea20cd1dbf489a6412f019a7a7e"],"title":"Fix the computation of recursive principles with let-bindings.","message":"Fix the computation of recursive principles with let-bindings.\n\nWe use a more robust implementation that does not assume that the type\nof the inductive is in ζ-normal form. This code path is not exercised,\nbecause due to the kernel typing algorithm, let-bindings in the type\nof a recursor are expanded away.\n","author_name":"Pierre-Marie Pédrot","author_email":"pierre-marie.pedrot@inria.fr","authored_date":"2020-03-20T15:28:49.000+01:00","committer_name":"Pierre-Marie Pédrot","committer_email":"pierre-marie.pedrot@inria.fr","committed_date":"2020-03-20T15:53:57.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c64a18bcdd0489586f8ff386f7daa432f7229407"},"pipeline":{"id":128195846,"iid":14578,"project_id":6138686,"sha":"c64a18bcdd0489586f8ff386f7daa432f7229407","ref":"pr-11867","status":"failed","source":"push","created_at":"2020-03-20T14:56:50.977Z","updated_at":"2020-03-20T17:57:05.893Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/128195846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/479596425","artifacts":[{"file_type":"trace","size":95052,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":479596422,"status":"success","stage":"stage-2","name":"test-suite:edge+flambda","ref":"pr-11867","tag":false,"coverage":null,"allow_failure":false,"created_at":"2020-03-20T14:56:51.341Z","started_at":"2020-03-20T15:14:40.070Z","finished_at":"2020-03-20T15:39:10.607Z","duration":1470.537125,"queued_duration":0.676911,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c64a18bcdd0489586f8ff386f7daa432f7229407","short_id":"c64a18bc","created_at":"2020-03-20T15:53:57.000+01:00","parent_ids":["4d025d4161599ea20cd1dbf489a6412f019a7a7e"],"title":"Fix the computation of recursive principles with let-bindings.","message":"Fix the computation of recursive principles with let-bindings.\n\nWe use a more robust implementation that does not assume that the type\nof the inductive is in ζ-normal form. This code path is not exercised,\nbecause due to the kernel typing algorithm, let-bindings in the type\nof a recursor are expanded away.\n","author_name":"Pierre-Marie Pédrot","author_email":"pierre-marie.pedrot@inria.fr","authored_date":"2020-03-20T15:28:49.000+01:00","committer_name":"Pierre-Marie Pédrot","committer_email":"pierre-marie.pedrot@inria.fr","committed_date":"2020-03-20T15:53:57.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c64a18bcdd0489586f8ff386f7daa432f7229407"},"pipeline":{"id":128195846,"iid":14578,"project_id":6138686,"sha":"c64a18bcdd0489586f8ff386f7daa432f7229407","ref":"pr-11867","status":"failed","source":"push","created_at":"2020-03-20T14:56:50.977Z","updated_at":"2020-03-20T17:57:05.893Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/128195846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/479596422","artifacts":[{"file_type":"trace","size":95164,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":479596419,"status":"success","stage":"stage-2","name":"test-suite:base","ref":"pr-11867","tag":false,"coverage":null,"allow_failure":false,"created_at":"2020-03-20T14:56:51.300Z","started_at":"2020-03-20T15:17:32.277Z","finished_at":"2020-03-20T15:38:43.335Z","duration":1271.05863,"queued_duration":2.303657,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c64a18bcdd0489586f8ff386f7daa432f7229407","short_id":"c64a18bc","created_at":"2020-03-20T15:53:57.000+01:00","parent_ids":["4d025d4161599ea20cd1dbf489a6412f019a7a7e"],"title":"Fix the computation of recursive principles with let-bindings.","message":"Fix the computation of recursive principles with let-bindings.\n\nWe use a more robust implementation that does not assume that the type\nof the inductive is in ζ-normal form. This code path is not exercised,\nbecause due to the kernel typing algorithm, let-bindings in the type\nof a recursor are expanded away.\n","author_name":"Pierre-Marie Pédrot","author_email":"pierre-marie.pedrot@inria.fr","authored_date":"2020-03-20T15:28:49.000+01:00","committer_name":"Pierre-Marie Pédrot","committer_email":"pierre-marie.pedrot@inria.fr","committed_date":"2020-03-20T15:53:57.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c64a18bcdd0489586f8ff386f7daa432f7229407"},"pipeline":{"id":128195846,"iid":14578,"project_id":6138686,"sha":"c64a18bcdd0489586f8ff386f7daa432f7229407","ref":"pr-11867","status":"failed","source":"push","created_at":"2020-03-20T14:56:50.977Z","updated_at":"2020-03-20T17:57:05.893Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/128195846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/479596419","artifacts":[{"file_type":"trace","size":94568,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":479596418,"status":"success","stage":"stage-2","name":"doc:ml-api:odoc","ref":"pr-11867","tag":false,"coverage":null,"allow_failure":false,"created_at":"2020-03-20T14:56:51.282Z","started_at":"2020-03-20T15:16:17.643Z","finished_at":"2020-03-20T15:21:04.175Z","duration":286.531497,"queued_duration":1.988153,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c64a18bcdd0489586f8ff386f7daa432f7229407","short_id":"c64a18bc","created_at":"2020-03-20T15:53:57.000+01:00","parent_ids":["4d025d4161599ea20cd1dbf489a6412f019a7a7e"],"title":"Fix the computation of recursive principles with let-bindings.","message":"Fix the computation of recursive principles with let-bindings.\n\nWe use a more robust implementation that does not assume that the type\nof the inductive is in ζ-normal form. This code path is not exercised,\nbecause due to the kernel typing algorithm, let-bindings in the type\nof a recursor are expanded away.\n","author_name":"Pierre-Marie Pédrot","author_email":"pierre-marie.pedrot@inria.fr","authored_date":"2020-03-20T15:28:49.000+01:00","committer_name":"Pierre-Marie Pédrot","committer_email":"pierre-marie.pedrot@inria.fr","committed_date":"2020-03-20T15:53:57.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c64a18bcdd0489586f8ff386f7daa432f7229407"},"pipeline":{"id":128195846,"iid":14578,"project_id":6138686,"sha":"c64a18bcdd0489586f8ff386f7daa432f7229407","ref":"pr-11867","status":"failed","source":"push","created_at":"2020-03-20T14:56:50.977Z","updated_at":"2020-03-20T17:57:05.893Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/128195846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/479596418","artifacts":[{"file_type":"trace","size":76281,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2020-05-19T15:21:02.662Z","tag_list":[]}
{"id":479596416,"status":"success","stage":"stage-2","name":"doc:stdlib:dune","ref":"pr-11867","tag":false,"coverage":null,"allow_failure":false,"created_at":"2020-03-20T14:56:51.261Z","started_at":"2020-03-20T15:16:17.537Z","finished_at":"2020-03-20T15:21:06.421Z","duration":288.883738,"queued_duration":1.964896,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c64a18bcdd0489586f8ff386f7daa432f7229407","short_id":"c64a18bc","created_at":"2020-03-20T15:53:57.000+01:00","parent_ids":["4d025d4161599ea20cd1dbf489a6412f019a7a7e"],"title":"Fix the computation of recursive principles with let-bindings.","message":"Fix the computation of recursive principles with let-bindings.\n\nWe use a more robust implementation that does not assume that the type\nof the inductive is in ζ-normal form. This code path is not exercised,\nbecause due to the kernel typing algorithm, let-bindings in the type\nof a recursor are expanded away.\n","author_name":"Pierre-Marie Pédrot","author_email":"pierre-marie.pedrot@inria.fr","authored_date":"2020-03-20T15:28:49.000+01:00","committer_name":"Pierre-Marie Pédrot","committer_email":"pierre-marie.pedrot@inria.fr","committed_date":"2020-03-20T15:53:57.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c64a18bcdd0489586f8ff386f7daa432f7229407"},"pipeline":{"id":128195846,"iid":14578,"project_id":6138686,"sha":"c64a18bcdd0489586f8ff386f7daa432f7229407","ref":"pr-11867","status":"failed","source":"push","created_at":"2020-03-20T14:56:50.977Z","updated_at":"2020-03-20T17:57:05.893Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/128195846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/479596416","artifacts":[{"file_type":"trace","size":26158,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2020-05-19T15:21:04.535Z","tag_list":[]}
{"id":479596414,"status":"success","stage":"stage-2","name":"doc:refman:dune","ref":"pr-11867","tag":false,"coverage":null,"allow_failure":false,"created_at":"2020-03-20T14:56:51.242Z","started_at":"2020-03-20T15:16:15.956Z","finished_at":"2020-03-20T15:27:00.859Z","duration":644.902633,"queued_duration":0.454163,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c64a18bcdd0489586f8ff386f7daa432f7229407","short_id":"c64a18bc","created_at":"2020-03-20T15:53:57.000+01:00","parent_ids":["4d025d4161599ea20cd1dbf489a6412f019a7a7e"],"title":"Fix the computation of recursive principles with let-bindings.","message":"Fix the computation of recursive principles with let-bindings.\n\nWe use a more robust implementation that does not assume that the type\nof the inductive is in ζ-normal form. This code path is not exercised,\nbecause due to the kernel typing algorithm, let-bindings in the type\nof a recursor are expanded away.\n","author_name":"Pierre-Marie Pédrot","author_email":"pierre-marie.pedrot@inria.fr","authored_date":"2020-03-20T15:28:49.000+01:00","committer_name":"Pierre-Marie Pédrot","committer_email":"pierre-marie.pedrot@inria.fr","committed_date":"2020-03-20T15:53:57.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c64a18bcdd0489586f8ff386f7daa432f7229407"},"pipeline":{"id":128195846,"iid":14578,"project_id":6138686,"sha":"c64a18bcdd0489586f8ff386f7daa432f7229407","ref":"pr-11867","status":"failed","source":"push","created_at":"2020-03-20T14:56:50.977Z","updated_at":"2020-03-20T17:57:05.893Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/128195846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/479596414","artifacts":[{"file_type":"trace","size":244918,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":"2020-05-19T15:26:58.571Z","tag_list":[]}
{"id":479596411,"status":"success","stage":"stage-1","name":"plugin:plugin-tutorial","ref":"pr-11867","tag":false,"coverage":null,"allow_failure":false,"created_at":"2020-03-20T14:56:51.184Z","started_at":"2020-03-20T14:56:55.400Z","finished_at":"2020-03-20T15:01:10.299Z","duration":254.899269,"queued_duration":0.712049,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c64a18bcdd0489586f8ff386f7daa432f7229407","short_id":"c64a18bc","created_at":"2020-03-20T15:53:57.000+01:00","parent_ids":["4d025d4161599ea20cd1dbf489a6412f019a7a7e"],"title":"Fix the computation of recursive principles with let-bindings.","message":"Fix the computation of recursive principles with let-bindings.\n\nWe use a more robust implementation that does not assume that the type\nof the inductive is in ζ-normal form. This code path is not exercised,\nbecause due to the kernel typing algorithm, let-bindings in the type\nof a recursor are expanded away.\n","author_name":"Pierre-Marie Pédrot","author_email":"pierre-marie.pedrot@inria.fr","authored_date":"2020-03-20T15:28:49.000+01:00","committer_name":"Pierre-Marie Pédrot","committer_email":"pierre-marie.pedrot@inria.fr","committed_date":"2020-03-20T15:53:57.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c64a18bcdd0489586f8ff386f7daa432f7229407"},"pipeline":{"id":128195846,"iid":14578,"project_id":6138686,"sha":"c64a18bcdd0489586f8ff386f7daa432f7229407","ref":"pr-11867","status":"failed","source":"push","created_at":"2020-03-20T14:56:50.977Z","updated_at":"2020-03-20T17:57:05.893Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/128195846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/479596411","artifacts":[{"file_type":"trace","size":57904,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":479596409,"status":"success","stage":"stage-1","name":"pkg:nix","ref":"pr-11867","tag":false,"coverage":null,"allow_failure":false,"created_at":"2020-03-20T14:56:51.168Z","started_at":"2020-03-20T14:56:55.348Z","finished_at":"2020-03-20T15:38:09.770Z","duration":2474.421977,"queued_duration":0.7162,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c64a18bcdd0489586f8ff386f7daa432f7229407","short_id":"c64a18bc","created_at":"2020-03-20T15:53:57.000+01:00","parent_ids":["4d025d4161599ea20cd1dbf489a6412f019a7a7e"],"title":"Fix the computation of recursive principles with let-bindings.","message":"Fix the computation of recursive principles with let-bindings.\n\nWe use a more robust implementation that does not assume that the type\nof the inductive is in ζ-normal form. This code path is not exercised,\nbecause due to the kernel typing algorithm, let-bindings in the type\nof a recursor are expanded away.\n","author_name":"Pierre-Marie Pédrot","author_email":"pierre-marie.pedrot@inria.fr","authored_date":"2020-03-20T15:28:49.000+01:00","committer_name":"Pierre-Marie Pédrot","committer_email":"pierre-marie.pedrot@inria.fr","committed_date":"2020-03-20T15:53:57.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c64a18bcdd0489586f8ff386f7daa432f7229407"},"pipeline":{"id":128195846,"iid":14578,"project_id":6138686,"sha":"c64a18bcdd0489586f8ff386f7daa432f7229407","ref":"pr-11867","status":"failed","source":"push","created_at":"2020-03-20T14:56:50.977Z","updated_at":"2020-03-20T17:57:05.893Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/128195846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/479596409","artifacts":[{"file_type":"trace","size":583629,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":479596407,"status":"success","stage":"stage-1","name":"pkg:opam","ref":"pr-11867","tag":false,"coverage":null,"allow_failure":false,"created_at":"2020-03-20T14:56:51.142Z","started_at":"2020-03-20T14:56:54.996Z","finished_at":"2020-03-20T15:21:26.480Z","duration":1471.483449,"queued_duration":0.394786,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c64a18bcdd0489586f8ff386f7daa432f7229407","short_id":"c64a18bc","created_at":"2020-03-20T15:53:57.000+01:00","parent_ids":["4d025d4161599ea20cd1dbf489a6412f019a7a7e"],"title":"Fix the computation of recursive principles with let-bindings.","message":"Fix the computation of recursive principles with let-bindings.\n\nWe use a more robust implementation that does not assume that the type\nof the inductive is in ζ-normal form. This code path is not exercised,\nbecause due to the kernel typing algorithm, let-bindings in the type\nof a recursor are expanded away.\n","author_name":"Pierre-Marie Pédrot","author_email":"pierre-marie.pedrot@inria.fr","authored_date":"2020-03-20T15:28:49.000+01:00","committer_name":"Pierre-Marie Pédrot","committer_email":"pierre-marie.pedrot@inria.fr","committed_date":"2020-03-20T15:53:57.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c64a18bcdd0489586f8ff386f7daa432f7229407"},"pipeline":{"id":128195846,"iid":14578,"project_id":6138686,"sha":"c64a18bcdd0489586f8ff386f7daa432f7229407","ref":"pr-11867","status":"failed","source":"push","created_at":"2020-03-20T14:56:50.977Z","updated_at":"2020-03-20T17:57:05.893Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/128195846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/479596407","artifacts":[{"file_type":"trace","size":101463,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":479596404,"status":"success","stage":"stage-1","name":"lint","ref":"pr-11867","tag":false,"coverage":null,"allow_failure":false,"created_at":"2020-03-20T14:56:51.125Z","started_at":"2020-03-20T14:56:54.604Z","finished_at":"2020-03-20T14:59:50.682Z","duration":176.077772,"queued_duration":1.074676,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c64a18bcdd0489586f8ff386f7daa432f7229407","short_id":"c64a18bc","created_at":"2020-03-20T15:53:57.000+01:00","parent_ids":["4d025d4161599ea20cd1dbf489a6412f019a7a7e"],"title":"Fix the computation of recursive principles with let-bindings.","message":"Fix the computation of recursive principles with let-bindings.\n\nWe use a more robust implementation that does not assume that the type\nof the inductive is in ζ-normal form. This code path is not exercised,\nbecause due to the kernel typing algorithm, let-bindings in the type\nof a recursor are expanded away.\n","author_name":"Pierre-Marie Pédrot","author_email":"pierre-marie.pedrot@inria.fr","authored_date":"2020-03-20T15:28:49.000+01:00","committer_name":"Pierre-Marie Pédrot","committer_email":"pierre-marie.pedrot@inria.fr","committed_date":"2020-03-20T15:53:57.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c64a18bcdd0489586f8ff386f7daa432f7229407"},"pipeline":{"id":128195846,"iid":14578,"project_id":6138686,"sha":"c64a18bcdd0489586f8ff386f7daa432f7229407","ref":"pr-11867","status":"failed","source":"push","created_at":"2020-03-20T14:56:50.977Z","updated_at":"2020-03-20T17:57:05.893Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/128195846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/479596404","artifacts":[{"file_type":"trace","size":51375,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":479596399,"status":"success","stage":"stage-1","name":"build:quick","ref":"pr-11867","tag":false,"coverage":null,"allow_failure":true,"created_at":"2020-03-20T14:56:51.083Z","started_at":"2020-03-20T14:56:54.550Z","finished_at":"2020-03-20T15:17:02.491Z","duration":1207.941945,"queued_duration":1.165827,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c64a18bcdd0489586f8ff386f7daa432f7229407","short_id":"c64a18bc","created_at":"2020-03-20T15:53:57.000+01:00","parent_ids":["4d025d4161599ea20cd1dbf489a6412f019a7a7e"],"title":"Fix the computation of recursive principles with let-bindings.","message":"Fix the computation of recursive principles with let-bindings.\n\nWe use a more robust implementation that does not assume that the type\nof the inductive is in ζ-normal form. This code path is not exercised,\nbecause due to the kernel typing algorithm, let-bindings in the type\nof a recursor are expanded away.\n","author_name":"Pierre-Marie Pédrot","author_email":"pierre-marie.pedrot@inria.fr","authored_date":"2020-03-20T15:28:49.000+01:00","committer_name":"Pierre-Marie Pédrot","committer_email":"pierre-marie.pedrot@inria.fr","committed_date":"2020-03-20T15:53:57.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c64a18bcdd0489586f8ff386f7daa432f7229407"},"pipeline":{"id":128195846,"iid":14578,"project_id":6138686,"sha":"c64a18bcdd0489586f8ff386f7daa432f7229407","ref":"pr-11867","status":"failed","source":"push","created_at":"2020-03-20T14:56:50.977Z","updated_at":"2020-03-20T17:57:05.893Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/128195846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/479596399","artifacts":[{"file_type":"trace","size":194249,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2020-03-27T15:17:00.697Z","tag_list":[]}
{"id":479596397,"status":"success","stage":"stage-1","name":"build:base+async","ref":"pr-11867","tag":false,"coverage":null,"allow_failure":true,"created_at":"2020-03-20T14:56:51.065Z","started_at":"2020-03-20T14:56:54.488Z","finished_at":"2020-03-20T16:01:40.909Z","duration":3886.420918,"queued_duration":1.189197,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c64a18bcdd0489586f8ff386f7daa432f7229407","short_id":"c64a18bc","created_at":"2020-03-20T15:53:57.000+01:00","parent_ids":["4d025d4161599ea20cd1dbf489a6412f019a7a7e"],"title":"Fix the computation of recursive principles with let-bindings.","message":"Fix the computation of recursive principles with let-bindings.\n\nWe use a more robust implementation that does not assume that the type\nof the inductive is in ζ-normal form. This code path is not exercised,\nbecause due to the kernel typing algorithm, let-bindings in the type\nof a recursor are expanded away.\n","author_name":"Pierre-Marie Pédrot","author_email":"pierre-marie.pedrot@inria.fr","authored_date":"2020-03-20T15:28:49.000+01:00","committer_name":"Pierre-Marie Pédrot","committer_email":"pierre-marie.pedrot@inria.fr","committed_date":"2020-03-20T15:53:57.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c64a18bcdd0489586f8ff386f7daa432f7229407"},"pipeline":{"id":128195846,"iid":14578,"project_id":6138686,"sha":"c64a18bcdd0489586f8ff386f7daa432f7229407","ref":"pr-11867","status":"failed","source":"push","created_at":"2020-03-20T14:56:50.977Z","updated_at":"2020-03-20T17:57:05.893Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/128195846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/479596397","artifacts":[{"file_type":"trace","size":275067,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2020-03-27T16:01:39.597Z","tag_list":[]}
{"id":479596395,"status":"success","stage":"stage-1","name":"build:edge+flambda:dune:dev","ref":"pr-11867","tag":false,"coverage":null,"allow_failure":false,"created_at":"2020-03-20T14:56:51.050Z","started_at":"2020-03-20T14:56:54.407Z","finished_at":"2020-03-20T15:16:15.364Z","duration":1160.956694,"queued_duration":1.260844,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c64a18bcdd0489586f8ff386f7daa432f7229407","short_id":"c64a18bc","created_at":"2020-03-20T15:53:57.000+01:00","parent_ids":["4d025d4161599ea20cd1dbf489a6412f019a7a7e"],"title":"Fix the computation of recursive principles with let-bindings.","message":"Fix the computation of recursive principles with let-bindings.\n\nWe use a more robust implementation that does not assume that the type\nof the inductive is in ζ-normal form. This code path is not exercised,\nbecause due to the kernel typing algorithm, let-bindings in the type\nof a recursor are expanded away.\n","author_name":"Pierre-Marie Pédrot","author_email":"pierre-marie.pedrot@inria.fr","authored_date":"2020-03-20T15:28:49.000+01:00","committer_name":"Pierre-Marie Pédrot","committer_email":"pierre-marie.pedrot@inria.fr","committed_date":"2020-03-20T15:53:57.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c64a18bcdd0489586f8ff386f7daa432f7229407"},"pipeline":{"id":128195846,"iid":14578,"project_id":6138686,"sha":"c64a18bcdd0489586f8ff386f7daa432f7229407","ref":"pr-11867","status":"failed","source":"push","created_at":"2020-03-20T14:56:50.977Z","updated_at":"2020-03-20T17:57:05.893Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/128195846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/479596395","artifacts":[{"file_type":"trace","size":20665,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2020-03-27T15:16:13.321Z","tag_list":[]}
{"id":479596393,"status":"success","stage":"stage-1","name":"build:edge+flambda","ref":"pr-11867","tag":false,"coverage":null,"allow_failure":false,"created_at":"2020-03-20T14:56:51.034Z","started_at":"2020-03-20T14:56:54.157Z","finished_at":"2020-03-20T15:14:39.257Z","duration":1065.099892,"queued_duration":1.170351,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c64a18bcdd0489586f8ff386f7daa432f7229407","short_id":"c64a18bc","created_at":"2020-03-20T15:53:57.000+01:00","parent_ids":["4d025d4161599ea20cd1dbf489a6412f019a7a7e"],"title":"Fix the computation of recursive principles with let-bindings.","message":"Fix the computation of recursive principles with let-bindings.\n\nWe use a more robust implementation that does not assume that the type\nof the inductive is in ζ-normal form. This code path is not exercised,\nbecause due to the kernel typing algorithm, let-bindings in the type\nof a recursor are expanded away.\n","author_name":"Pierre-Marie Pédrot","author_email":"pierre-marie.pedrot@inria.fr","authored_date":"2020-03-20T15:28:49.000+01:00","committer_name":"Pierre-Marie Pédrot","committer_email":"pierre-marie.pedrot@inria.fr","committed_date":"2020-03-20T15:53:57.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c64a18bcdd0489586f8ff386f7daa432f7229407"},"pipeline":{"id":128195846,"iid":14578,"project_id":6138686,"sha":"c64a18bcdd0489586f8ff386f7daa432f7229407","ref":"pr-11867","status":"failed","source":"push","created_at":"2020-03-20T14:56:50.977Z","updated_at":"2020-03-20T17:57:05.893Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/128195846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/479596393","artifacts":[{"file_type":"trace","size":300876,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":"2020-03-27T15:14:36.682Z","tag_list":[]}
{"id":479596392,"status":"success","stage":"stage-1","name":"build:base+32bit","ref":"pr-11867","tag":false,"coverage":null,"allow_failure":false,"created_at":"2020-03-20T14:56:51.014Z","started_at":"2020-03-20T14:56:53.686Z","finished_at":"2020-03-20T15:07:13.527Z","duration":619.841328,"queued_duration":0.80866,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"c64a18bcdd0489586f8ff386f7daa432f7229407","short_id":"c64a18bc","created_at":"2020-03-20T15:53:57.000+01:00","parent_ids":["4d025d4161599ea20cd1dbf489a6412f019a7a7e"],"title":"Fix the computation of recursive principles with let-bindings.","message":"Fix the computation of recursive principles with let-bindings.\n\nWe use a more robust implementation that does not assume that the type\nof the inductive is in ζ-normal form. This code path is not exercised,\nbecause due to the kernel typing algorithm, let-bindings in the type\nof a recursor are expanded away.\n","author_name":"Pierre-Marie Pédrot","author_email":"pierre-marie.pedrot@inria.fr","authored_date":"2020-03-20T15:28:49.000+01:00","committer_name":"Pierre-Marie Pédrot","committer_email":"pierre-marie.pedrot@inria.fr","committed_date":"2020-03-20T15:53:57.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/c64a18bcdd0489586f8ff386f7daa432f7229407"},"pipeline":{"id":128195846,"iid":14578,"project_id":6138686,"sha":"c64a18bcdd0489586f8ff386f7daa432f7229407","ref":"pr-11867","status":"failed","source":"push","created_at":"2020-03-20T14:56:50.977Z","updated_at":"2020-03-20T17:57:05.893Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/128195846"},"web_url":"https://gitlab.com/coq/coq/-/jobs/479596392","artifacts":[{"file_type":"trace","size":293332,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":"2020-03-27T15:07:10.546Z","tag_list":[]}
