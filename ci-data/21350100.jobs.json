{"id":65889898,"status":"failed","stage":"test","name":"ci-vst","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-01T15:34:35.182Z","started_at":"2018-05-01T16:31:21.762Z","finished_at":"2018-05-01T16:33:53.691Z","duration":151.929176,"queued_duration":1.203254,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"527593a043eea865abda39b5850916bc9483e0ef","short_id":"527593a0","created_at":"2018-05-01T01:27:58.000+02:00","parent_ids":["df39205c5e75f9f6cc6697993fbfcae5569c2ebd"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-01T01:27:58.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/527593a043eea865abda39b5850916bc9483e0ef"},"pipeline":{"id":21350100,"iid":null,"project_id":6138686,"sha":"527593a043eea865abda39b5850916bc9483e0ef","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-01T15:34:33.889Z","updated_at":"2018-05-01T17:05:46.346Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/21350100"},"failure_reason":"runner_system_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/65889898","artifacts":[{"file_type":"trace","size":133343,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":65889897,"status":"success","stage":"test","name":"ci-unimath","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-01T15:34:35.149Z","started_at":"2018-05-01T16:31:21.390Z","finished_at":"2018-05-01T16:42:56.848Z","duration":695.458344,"queued_duration":0.694842,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"527593a043eea865abda39b5850916bc9483e0ef","short_id":"527593a0","created_at":"2018-05-01T01:27:58.000+02:00","parent_ids":["df39205c5e75f9f6cc6697993fbfcae5569c2ebd"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-01T01:27:58.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/527593a043eea865abda39b5850916bc9483e0ef"},"pipeline":{"id":21350100,"iid":null,"project_id":6138686,"sha":"527593a043eea865abda39b5850916bc9483e0ef","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-01T15:34:33.889Z","updated_at":"2018-05-01T17:05:46.346Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/21350100"},"web_url":"https://gitlab.com/coq/coq/-/jobs/65889897","artifacts":[{"file_type":"trace","size":139821,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":65889896,"status":"success","stage":"test","name":"ci-sf","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-01T15:34:35.116Z","started_at":"2018-05-01T16:31:21.264Z","finished_at":"2018-05-01T16:35:43.530Z","duration":262.266054,"queued_duration":0.292009,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"527593a043eea865abda39b5850916bc9483e0ef","short_id":"527593a0","created_at":"2018-05-01T01:27:58.000+02:00","parent_ids":["df39205c5e75f9f6cc6697993fbfcae5569c2ebd"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-01T01:27:58.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/527593a043eea865abda39b5850916bc9483e0ef"},"pipeline":{"id":21350100,"iid":null,"project_id":6138686,"sha":"527593a043eea865abda39b5850916bc9483e0ef","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-01T15:34:33.889Z","updated_at":"2018-05-01T17:05:46.346Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/21350100"},"web_url":"https://gitlab.com/coq/coq/-/jobs/65889896","artifacts":[{"file_type":"trace","size":300272,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":65889895,"status":"success","stage":"test","name":"ci-mtac2","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-01T15:34:35.072Z","started_at":"2018-05-01T16:31:21.643Z","finished_at":"2018-05-01T16:35:07.895Z","duration":226.251968,"queued_duration":0.323157,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"527593a043eea865abda39b5850916bc9483e0ef","short_id":"527593a0","created_at":"2018-05-01T01:27:58.000+02:00","parent_ids":["df39205c5e75f9f6cc6697993fbfcae5569c2ebd"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-01T01:27:58.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/527593a043eea865abda39b5850916bc9483e0ef"},"pipeline":{"id":21350100,"iid":null,"project_id":6138686,"sha":"527593a043eea865abda39b5850916bc9483e0ef","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-01T15:34:33.889Z","updated_at":"2018-05-01T17:05:46.346Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/21350100"},"web_url":"https://gitlab.com/coq/coq/-/jobs/65889895","artifacts":[{"file_type":"trace","size":116218,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":65889894,"status":"success","stage":"test","name":"ci-math-comp","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-01T15:34:35.023Z","started_at":"2018-05-01T16:31:21.859Z","finished_at":"2018-05-01T17:02:05.054Z","duration":1843.195767,"queued_duration":0.29052,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"527593a043eea865abda39b5850916bc9483e0ef","short_id":"527593a0","created_at":"2018-05-01T01:27:58.000+02:00","parent_ids":["df39205c5e75f9f6cc6697993fbfcae5569c2ebd"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-01T01:27:58.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/527593a043eea865abda39b5850916bc9483e0ef"},"pipeline":{"id":21350100,"iid":null,"project_id":6138686,"sha":"527593a043eea865abda39b5850916bc9483e0ef","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-01T15:34:33.889Z","updated_at":"2018-05-01T17:05:46.346Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/21350100"},"web_url":"https://gitlab.com/coq/coq/-/jobs/65889894","artifacts":[{"file_type":"trace","size":249324,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":65889893,"status":"success","stage":"test","name":"ci-math-classes","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-01T15:34:34.962Z","started_at":"2018-05-01T16:31:22.153Z","finished_at":"2018-05-01T16:37:55.547Z","duration":393.393524,"queued_duration":0.243776,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"527593a043eea865abda39b5850916bc9483e0ef","short_id":"527593a0","created_at":"2018-05-01T01:27:58.000+02:00","parent_ids":["df39205c5e75f9f6cc6697993fbfcae5569c2ebd"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-01T01:27:58.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/527593a043eea865abda39b5850916bc9483e0ef"},"pipeline":{"id":21350100,"iid":null,"project_id":6138686,"sha":"527593a043eea865abda39b5850916bc9483e0ef","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-01T15:34:33.889Z","updated_at":"2018-05-01T17:05:46.346Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/21350100"},"web_url":"https://gitlab.com/coq/coq/-/jobs/65889893","artifacts":[{"file_type":"trace","size":179253,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":65889892,"status":"success","stage":"test","name":"ci-ltac2","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-01T15:34:34.915Z","started_at":"2018-05-01T16:31:22.840Z","finished_at":"2018-05-01T16:34:05.482Z","duration":162.641548,"queued_duration":0.680319,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"527593a043eea865abda39b5850916bc9483e0ef","short_id":"527593a0","created_at":"2018-05-01T01:27:58.000+02:00","parent_ids":["df39205c5e75f9f6cc6697993fbfcae5569c2ebd"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-01T01:27:58.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/527593a043eea865abda39b5850916bc9483e0ef"},"pipeline":{"id":21350100,"iid":null,"project_id":6138686,"sha":"527593a043eea865abda39b5850916bc9483e0ef","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-01T15:34:33.889Z","updated_at":"2018-05-01T17:05:46.346Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/21350100"},"web_url":"https://gitlab.com/coq/coq/-/jobs/65889892","artifacts":[{"file_type":"trace","size":69520,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":65889891,"status":"success","stage":"test","name":"ci-iris-lambda-rust","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-01T15:34:34.880Z","started_at":"2018-05-01T16:31:22.715Z","finished_at":"2018-05-01T17:05:46.024Z","duration":2063.308828,"queued_duration":0.32858,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"527593a043eea865abda39b5850916bc9483e0ef","short_id":"527593a0","created_at":"2018-05-01T01:27:58.000+02:00","parent_ids":["df39205c5e75f9f6cc6697993fbfcae5569c2ebd"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-01T01:27:58.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/527593a043eea865abda39b5850916bc9483e0ef"},"pipeline":{"id":21350100,"iid":null,"project_id":6138686,"sha":"527593a043eea865abda39b5850916bc9483e0ef","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-01T15:34:33.889Z","updated_at":"2018-05-01T17:05:46.346Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/21350100"},"web_url":"https://gitlab.com/coq/coq/-/jobs/65889891","artifacts":[{"file_type":"trace","size":222453,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":65889890,"status":"success","stage":"test","name":"ci-hott","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-01T15:34:34.846Z","started_at":"2018-05-01T16:31:23.114Z","finished_at":"2018-05-01T16:38:31.206Z","duration":428.091573,"queued_duration":0.434799,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"527593a043eea865abda39b5850916bc9483e0ef","short_id":"527593a0","created_at":"2018-05-01T01:27:58.000+02:00","parent_ids":["df39205c5e75f9f6cc6697993fbfcae5569c2ebd"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-01T01:27:58.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/527593a043eea865abda39b5850916bc9483e0ef"},"pipeline":{"id":21350100,"iid":null,"project_id":6138686,"sha":"527593a043eea865abda39b5850916bc9483e0ef","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-01T15:34:33.889Z","updated_at":"2018-05-01T17:05:46.346Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/21350100"},"web_url":"https://gitlab.com/coq/coq/-/jobs/65889890","artifacts":[{"file_type":"trace","size":94089,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":65889889,"status":"success","stage":"test","name":"ci-formal-topology","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-01T15:34:34.813Z","started_at":"2018-05-01T16:31:23.719Z","finished_at":"2018-05-01T17:02:11.515Z","duration":1847.796328,"queued_duration":0.56787,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"527593a043eea865abda39b5850916bc9483e0ef","short_id":"527593a0","created_at":"2018-05-01T01:27:58.000+02:00","parent_ids":["df39205c5e75f9f6cc6697993fbfcae5569c2ebd"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-01T01:27:58.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/527593a043eea865abda39b5850916bc9483e0ef"},"pipeline":{"id":21350100,"iid":null,"project_id":6138686,"sha":"527593a043eea865abda39b5850916bc9483e0ef","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-01T15:34:33.889Z","updated_at":"2018-05-01T17:05:46.346Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/21350100"},"web_url":"https://gitlab.com/coq/coq/-/jobs/65889889","artifacts":[{"file_type":"trace","size":593757,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":65889888,"status":"success","stage":"test","name":"ci-flocq","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-01T15:34:34.771Z","started_at":"2018-05-01T16:31:23.925Z","finished_at":"2018-05-01T16:39:49.522Z","duration":505.59667,"queued_duration":0.36206,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"527593a043eea865abda39b5850916bc9483e0ef","short_id":"527593a0","created_at":"2018-05-01T01:27:58.000+02:00","parent_ids":["df39205c5e75f9f6cc6697993fbfcae5569c2ebd"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-01T01:27:58.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/527593a043eea865abda39b5850916bc9483e0ef"},"pipeline":{"id":21350100,"iid":null,"project_id":6138686,"sha":"527593a043eea865abda39b5850916bc9483e0ef","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-01T15:34:33.889Z","updated_at":"2018-05-01T17:05:46.346Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/21350100"},"web_url":"https://gitlab.com/coq/coq/-/jobs/65889888","artifacts":[{"file_type":"trace","size":681253,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":65889887,"status":"success","stage":"test","name":"ci-fiat-parsers","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-01T15:34:34.739Z","started_at":"2018-05-01T16:31:24.591Z","finished_at":"2018-05-01T16:44:26.789Z","duration":782.198664,"queued_duration":0.583468,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"527593a043eea865abda39b5850916bc9483e0ef","short_id":"527593a0","created_at":"2018-05-01T01:27:58.000+02:00","parent_ids":["df39205c5e75f9f6cc6697993fbfcae5569c2ebd"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-01T01:27:58.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/527593a043eea865abda39b5850916bc9483e0ef"},"pipeline":{"id":21350100,"iid":null,"project_id":6138686,"sha":"527593a043eea865abda39b5850916bc9483e0ef","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-01T15:34:33.889Z","updated_at":"2018-05-01T17:05:46.346Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/21350100"},"web_url":"https://gitlab.com/coq/coq/-/jobs/65889887","artifacts":[{"file_type":"trace","size":265118,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":65889886,"status":"success","stage":"test","name":"ci-fcsl-pcm","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-01T15:34:34.708Z","started_at":"2018-05-01T16:31:24.655Z","finished_at":"2018-05-01T16:35:42.488Z","duration":257.832411,"queued_duration":0.268296,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"527593a043eea865abda39b5850916bc9483e0ef","short_id":"527593a0","created_at":"2018-05-01T01:27:58.000+02:00","parent_ids":["df39205c5e75f9f6cc6697993fbfcae5569c2ebd"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-01T01:27:58.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/527593a043eea865abda39b5850916bc9483e0ef"},"pipeline":{"id":21350100,"iid":null,"project_id":6138686,"sha":"527593a043eea865abda39b5850916bc9483e0ef","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-01T15:34:33.889Z","updated_at":"2018-05-01T17:05:46.346Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/21350100"},"web_url":"https://gitlab.com/coq/coq/-/jobs/65889886","artifacts":[{"file_type":"trace","size":103769,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":65889885,"status":"success","stage":"test","name":"ci-geocoq","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":true,"created_at":"2018-05-01T15:34:34.676Z","started_at":"2018-05-01T16:31:25.615Z","finished_at":"2018-05-01T16:58:32.392Z","duration":1626.776652,"queued_duration":0.883253,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"527593a043eea865abda39b5850916bc9483e0ef","short_id":"527593a0","created_at":"2018-05-01T01:27:58.000+02:00","parent_ids":["df39205c5e75f9f6cc6697993fbfcae5569c2ebd"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-01T01:27:58.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/527593a043eea865abda39b5850916bc9483e0ef"},"pipeline":{"id":21350100,"iid":null,"project_id":6138686,"sha":"527593a043eea865abda39b5850916bc9483e0ef","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-01T15:34:33.889Z","updated_at":"2018-05-01T17:05:46.346Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/21350100"},"web_url":"https://gitlab.com/coq/coq/-/jobs/65889885","artifacts":[{"file_type":"trace","size":160234,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":65889884,"status":"success","stage":"test","name":"ci-equations","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-01T15:34:34.630Z","started_at":"2018-05-01T16:31:25.490Z","finished_at":"2018-05-01T16:37:15.922Z","duration":350.432459,"queued_duration":0.488196,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"527593a043eea865abda39b5850916bc9483e0ef","short_id":"527593a0","created_at":"2018-05-01T01:27:58.000+02:00","parent_ids":["df39205c5e75f9f6cc6697993fbfcae5569c2ebd"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-01T01:27:58.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/527593a043eea865abda39b5850916bc9483e0ef"},"pipeline":{"id":21350100,"iid":null,"project_id":6138686,"sha":"527593a043eea865abda39b5850916bc9483e0ef","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-01T15:34:33.889Z","updated_at":"2018-05-01T17:05:46.346Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/21350100"},"web_url":"https://gitlab.com/coq/coq/-/jobs/65889884","artifacts":[{"file_type":"trace","size":102339,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":65889883,"status":"success","stage":"test","name":"ci-elpi","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-01T15:34:34.599Z","started_at":"2018-05-01T16:31:25.641Z","finished_at":"2018-05-01T16:33:58.756Z","duration":153.114418,"queued_duration":0.229312,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"527593a043eea865abda39b5850916bc9483e0ef","short_id":"527593a0","created_at":"2018-05-01T01:27:58.000+02:00","parent_ids":["df39205c5e75f9f6cc6697993fbfcae5569c2ebd"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-01T01:27:58.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/527593a043eea865abda39b5850916bc9483e0ef"},"pipeline":{"id":21350100,"iid":null,"project_id":6138686,"sha":"527593a043eea865abda39b5850916bc9483e0ef","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-01T15:34:33.889Z","updated_at":"2018-05-01T17:05:46.346Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/21350100"},"web_url":"https://gitlab.com/coq/coq/-/jobs/65889883","artifacts":[{"file_type":"trace","size":394865,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":65889882,"status":"success","stage":"test","name":"ci-coquelicot","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-01T15:34:34.559Z","started_at":"2018-05-01T16:31:27.282Z","finished_at":"2018-05-01T16:36:23.191Z","duration":295.909021,"queued_duration":1.538687,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"527593a043eea865abda39b5850916bc9483e0ef","short_id":"527593a0","created_at":"2018-05-01T01:27:58.000+02:00","parent_ids":["df39205c5e75f9f6cc6697993fbfcae5569c2ebd"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-01T01:27:58.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/527593a043eea865abda39b5850916bc9483e0ef"},"pipeline":{"id":21350100,"iid":null,"project_id":6138686,"sha":"527593a043eea865abda39b5850916bc9483e0ef","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-01T15:34:33.889Z","updated_at":"2018-05-01T17:05:46.346Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/21350100"},"web_url":"https://gitlab.com/coq/coq/-/jobs/65889882","artifacts":[{"file_type":"trace","size":108220,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":65889881,"status":"success","stage":"test","name":"ci-coq-dpdgraph","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-01T15:34:34.527Z","started_at":"2018-05-01T16:31:26.781Z","finished_at":"2018-05-01T16:34:06.618Z","duration":159.837227,"queued_duration":0.434295,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"527593a043eea865abda39b5850916bc9483e0ef","short_id":"527593a0","created_at":"2018-05-01T01:27:58.000+02:00","parent_ids":["df39205c5e75f9f6cc6697993fbfcae5569c2ebd"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-01T01:27:58.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/527593a043eea865abda39b5850916bc9483e0ef"},"pipeline":{"id":21350100,"iid":null,"project_id":6138686,"sha":"527593a043eea865abda39b5850916bc9483e0ef","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-01T15:34:33.889Z","updated_at":"2018-05-01T17:05:46.346Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/21350100"},"web_url":"https://gitlab.com/coq/coq/-/jobs/65889881","artifacts":[{"file_type":"trace","size":70428,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":65889880,"status":"success","stage":"test","name":"ci-compcert","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-01T15:34:34.495Z","started_at":"2018-05-01T16:31:26.967Z","finished_at":"2018-05-01T16:55:45.496Z","duration":1458.529395,"queued_duration":0.360018,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"527593a043eea865abda39b5850916bc9483e0ef","short_id":"527593a0","created_at":"2018-05-01T01:27:58.000+02:00","parent_ids":["df39205c5e75f9f6cc6697993fbfcae5569c2ebd"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-01T01:27:58.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/527593a043eea865abda39b5850916bc9483e0ef"},"pipeline":{"id":21350100,"iid":null,"project_id":6138686,"sha":"527593a043eea865abda39b5850916bc9483e0ef","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-01T15:34:33.889Z","updated_at":"2018-05-01T17:05:46.346Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/21350100"},"web_url":"https://gitlab.com/coq/coq/-/jobs/65889880","artifacts":[{"file_type":"trace","size":2028400,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":65889879,"status":"success","stage":"test","name":"ci-color","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-01T15:34:34.462Z","started_at":"2018-05-01T16:31:27.801Z","finished_at":"2018-05-01T16:44:57.950Z","duration":810.148796,"queued_duration":0.924291,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"527593a043eea865abda39b5850916bc9483e0ef","short_id":"527593a0","created_at":"2018-05-01T01:27:58.000+02:00","parent_ids":["df39205c5e75f9f6cc6697993fbfcae5569c2ebd"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-01T01:27:58.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/527593a043eea865abda39b5850916bc9483e0ef"},"pipeline":{"id":21350100,"iid":null,"project_id":6138686,"sha":"527593a043eea865abda39b5850916bc9483e0ef","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-01T15:34:33.889Z","updated_at":"2018-05-01T17:05:46.346Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/21350100"},"web_url":"https://gitlab.com/coq/coq/-/jobs/65889879","artifacts":[{"file_type":"trace","size":317519,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":65889878,"status":"success","stage":"test","name":"ci-bignums","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-01T15:34:34.419Z","started_at":"2018-05-01T16:31:27.902Z","finished_at":"2018-05-01T16:36:08.560Z","duration":280.657672,"queued_duration":0.4663,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"527593a043eea865abda39b5850916bc9483e0ef","short_id":"527593a0","created_at":"2018-05-01T01:27:58.000+02:00","parent_ids":["df39205c5e75f9f6cc6697993fbfcae5569c2ebd"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-01T01:27:58.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/527593a043eea865abda39b5850916bc9483e0ef"},"pipeline":{"id":21350100,"iid":null,"project_id":6138686,"sha":"527593a043eea865abda39b5850916bc9483e0ef","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-01T15:34:33.889Z","updated_at":"2018-05-01T17:05:46.346Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/21350100"},"web_url":"https://gitlab.com/coq/coq/-/jobs/65889878","artifacts":[{"file_type":"trace","size":69705,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":65889877,"status":"success","stage":"test","name":"validate:32bit","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-01T15:34:34.383Z","started_at":"2018-05-01T16:31:29.013Z","finished_at":"2018-05-01T16:40:15.798Z","duration":526.78466,"queued_duration":1.198532,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"527593a043eea865abda39b5850916bc9483e0ef","short_id":"527593a0","created_at":"2018-05-01T01:27:58.000+02:00","parent_ids":["df39205c5e75f9f6cc6697993fbfcae5569c2ebd"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-01T01:27:58.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/527593a043eea865abda39b5850916bc9483e0ef"},"pipeline":{"id":21350100,"iid":null,"project_id":6138686,"sha":"527593a043eea865abda39b5850916bc9483e0ef","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-01T15:34:33.889Z","updated_at":"2018-05-01T17:05:46.346Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/21350100"},"web_url":"https://gitlab.com/coq/coq/-/jobs/65889877","artifacts":[{"file_type":"trace","size":59369,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":65889876,"status":"success","stage":"test","name":"validate","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-01T15:34:34.349Z","started_at":"2018-05-01T16:31:28.808Z","finished_at":"2018-05-01T16:39:31.113Z","duration":482.305237,"queued_duration":0.654405,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"527593a043eea865abda39b5850916bc9483e0ef","short_id":"527593a0","created_at":"2018-05-01T01:27:58.000+02:00","parent_ids":["df39205c5e75f9f6cc6697993fbfcae5569c2ebd"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-01T01:27:58.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/527593a043eea865abda39b5850916bc9483e0ef"},"pipeline":{"id":21350100,"iid":null,"project_id":6138686,"sha":"527593a043eea865abda39b5850916bc9483e0ef","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-01T15:34:33.889Z","updated_at":"2018-05-01T17:05:46.346Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/21350100"},"web_url":"https://gitlab.com/coq/coq/-/jobs/65889876","artifacts":[{"file_type":"trace","size":53244,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":65889875,"status":"success","stage":"test","name":"test-suite:bleeding-edge","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-01T15:34:34.314Z","started_at":"2018-05-01T16:31:28.892Z","finished_at":"2018-05-01T16:37:18.700Z","duration":349.807575,"queued_duration":0.349035,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"527593a043eea865abda39b5850916bc9483e0ef","short_id":"527593a0","created_at":"2018-05-01T01:27:58.000+02:00","parent_ids":["df39205c5e75f9f6cc6697993fbfcae5569c2ebd"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-01T01:27:58.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/527593a043eea865abda39b5850916bc9483e0ef"},"pipeline":{"id":21350100,"iid":null,"project_id":6138686,"sha":"527593a043eea865abda39b5850916bc9483e0ef","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-01T15:34:33.889Z","updated_at":"2018-05-01T17:05:46.346Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/21350100"},"web_url":"https://gitlab.com/coq/coq/-/jobs/65889875","artifacts":[{"file_type":"trace","size":96924,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":65889874,"status":"success","stage":"test","name":"test-suite:32bit","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-01T15:34:34.268Z","started_at":"2018-05-01T16:31:29.903Z","finished_at":"2018-05-01T16:40:14.790Z","duration":524.887664,"queued_duration":1.028265,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"527593a043eea865abda39b5850916bc9483e0ef","short_id":"527593a0","created_at":"2018-05-01T01:27:58.000+02:00","parent_ids":["df39205c5e75f9f6cc6697993fbfcae5569c2ebd"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-01T01:27:58.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/527593a043eea865abda39b5850916bc9483e0ef"},"pipeline":{"id":21350100,"iid":null,"project_id":6138686,"sha":"527593a043eea865abda39b5850916bc9483e0ef","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-01T15:34:33.889Z","updated_at":"2018-05-01T17:05:46.346Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/21350100"},"web_url":"https://gitlab.com/coq/coq/-/jobs/65889874","artifacts":[{"file_type":"trace","size":101944,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":65889873,"status":"success","stage":"test","name":"test-suite","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-01T15:34:34.233Z","started_at":"2018-05-01T16:31:29.792Z","finished_at":"2018-05-01T16:41:51.297Z","duration":621.504648,"queued_duration":0.24399,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"527593a043eea865abda39b5850916bc9483e0ef","short_id":"527593a0","created_at":"2018-05-01T01:27:58.000+02:00","parent_ids":["df39205c5e75f9f6cc6697993fbfcae5569c2ebd"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-01T01:27:58.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/527593a043eea865abda39b5850916bc9483e0ef"},"pipeline":{"id":21350100,"iid":null,"project_id":6138686,"sha":"527593a043eea865abda39b5850916bc9483e0ef","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-01T15:34:33.889Z","updated_at":"2018-05-01T17:05:46.346Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/21350100"},"web_url":"https://gitlab.com/coq/coq/-/jobs/65889873","artifacts":[{"file_type":"trace","size":263741,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":65889872,"status":"failed","stage":"test","name":"warnings:bleeding-edge","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-01T15:34:34.201Z","started_at":"2018-05-01T16:31:30.216Z","finished_at":"2018-05-01T16:33:53.379Z","duration":143.162797,"queued_duration":0.361871,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"527593a043eea865abda39b5850916bc9483e0ef","short_id":"527593a0","created_at":"2018-05-01T01:27:58.000+02:00","parent_ids":["df39205c5e75f9f6cc6697993fbfcae5569c2ebd"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-01T01:27:58.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/527593a043eea865abda39b5850916bc9483e0ef"},"pipeline":{"id":21350100,"iid":null,"project_id":6138686,"sha":"527593a043eea865abda39b5850916bc9483e0ef","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-01T15:34:33.889Z","updated_at":"2018-05-01T17:05:46.346Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/21350100"},"failure_reason":"runner_system_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/65889872","artifacts":[{"file_type":"trace","size":136818,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":65889871,"status":"failed","stage":"test","name":"warnings","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-01T15:34:34.168Z","started_at":"2018-05-01T16:31:30.657Z","finished_at":"2018-05-01T16:34:22.695Z","duration":172.037767,"queued_duration":0.486279,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"527593a043eea865abda39b5850916bc9483e0ef","short_id":"527593a0","created_at":"2018-05-01T01:27:58.000+02:00","parent_ids":["df39205c5e75f9f6cc6697993fbfcae5569c2ebd"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-01T01:27:58.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/527593a043eea865abda39b5850916bc9483e0ef"},"pipeline":{"id":21350100,"iid":null,"project_id":6138686,"sha":"527593a043eea865abda39b5850916bc9483e0ef","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-01T15:34:33.889Z","updated_at":"2018-05-01T17:05:46.346Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/21350100"},"failure_reason":"runner_system_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/65889871","artifacts":[{"file_type":"trace","size":4554,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":65889870,"status":"success","stage":"build","name":"build:dune","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-01T15:34:34.128Z","started_at":"2018-05-01T15:46:02.790Z","finished_at":"2018-05-01T16:08:03.835Z","duration":1321.045485,"queued_duration":9.771976,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"527593a043eea865abda39b5850916bc9483e0ef","short_id":"527593a0","created_at":"2018-05-01T01:27:58.000+02:00","parent_ids":["df39205c5e75f9f6cc6697993fbfcae5569c2ebd"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-01T01:27:58.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/527593a043eea865abda39b5850916bc9483e0ef"},"pipeline":{"id":21350100,"iid":null,"project_id":6138686,"sha":"527593a043eea865abda39b5850916bc9483e0ef","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-01T15:34:33.889Z","updated_at":"2018-05-01T17:05:46.346Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/21350100"},"web_url":"https://gitlab.com/coq/coq/-/jobs/65889870","artifacts":[{"file_type":"trace","size":131545,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":65889869,"status":"success","stage":"build","name":"build:bleeding-edge","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-01T15:34:34.092Z","started_at":"2018-05-01T15:46:02.163Z","finished_at":"2018-05-01T16:21:49.684Z","duration":2147.521304,"queued_duration":9.0311,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"527593a043eea865abda39b5850916bc9483e0ef","short_id":"527593a0","created_at":"2018-05-01T01:27:58.000+02:00","parent_ids":["df39205c5e75f9f6cc6697993fbfcae5569c2ebd"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-01T01:27:58.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/527593a043eea865abda39b5850916bc9483e0ef"},"pipeline":{"id":21350100,"iid":null,"project_id":6138686,"sha":"527593a043eea865abda39b5850916bc9483e0ef","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-01T15:34:33.889Z","updated_at":"2018-05-01T17:05:46.346Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/21350100"},"web_url":"https://gitlab.com/coq/coq/-/jobs/65889869","artifacts":[{"file_type":"trace","size":338018,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":"2018-05-08T16:21:46.355Z","tag_list":[]}
{"id":65889868,"status":"success","stage":"build","name":"build:32bit","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-01T15:34:34.054Z","started_at":"2018-05-01T15:46:00.294Z","finished_at":"2018-05-01T16:08:46.091Z","duration":1365.796053,"queued_duration":7.058,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"527593a043eea865abda39b5850916bc9483e0ef","short_id":"527593a0","created_at":"2018-05-01T01:27:58.000+02:00","parent_ids":["df39205c5e75f9f6cc6697993fbfcae5569c2ebd"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-01T01:27:58.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/527593a043eea865abda39b5850916bc9483e0ef"},"pipeline":{"id":21350100,"iid":null,"project_id":6138686,"sha":"527593a043eea865abda39b5850916bc9483e0ef","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-01T15:34:33.889Z","updated_at":"2018-05-01T17:05:46.346Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/21350100"},"web_url":"https://gitlab.com/coq/coq/-/jobs/65889868","artifacts":[{"file_type":"trace","size":298809,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":"2018-05-08T16:08:42.699Z","tag_list":[]}
{"id":65889867,"status":"success","stage":"build","name":"build","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-01T15:34:34.011Z","started_at":"2018-05-01T15:45:58.514Z","finished_at":"2018-05-01T16:31:20.302Z","duration":2721.787573,"queued_duration":5.073805,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"527593a043eea865abda39b5850916bc9483e0ef","short_id":"527593a0","created_at":"2018-05-01T01:27:58.000+02:00","parent_ids":["df39205c5e75f9f6cc6697993fbfcae5569c2ebd"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-01T01:27:58.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/527593a043eea865abda39b5850916bc9483e0ef"},"pipeline":{"id":21350100,"iid":null,"project_id":6138686,"sha":"527593a043eea865abda39b5850916bc9483e0ef","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-01T15:34:33.889Z","updated_at":"2018-05-01T17:05:46.346Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/21350100"},"web_url":"https://gitlab.com/coq/coq/-/jobs/65889867","artifacts":[{"file_type":"trace","size":430277,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":"2018-05-08T16:31:18.184Z","tag_list":[]}
{"id":65889866,"status":"success","stage":"opam-boot","name":"opam-boot:bleeding-edge","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-01T15:34:33.972Z","started_at":"2018-05-01T15:34:37.811Z","finished_at":"2018-05-01T15:45:52.835Z","duration":675.023566,"queued_duration":1.756904,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"527593a043eea865abda39b5850916bc9483e0ef","short_id":"527593a0","created_at":"2018-05-01T01:27:58.000+02:00","parent_ids":["df39205c5e75f9f6cc6697993fbfcae5569c2ebd"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-01T01:27:58.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/527593a043eea865abda39b5850916bc9483e0ef"},"pipeline":{"id":21350100,"iid":null,"project_id":6138686,"sha":"527593a043eea865abda39b5850916bc9483e0ef","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-01T15:34:33.889Z","updated_at":"2018-05-01T17:05:46.346Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/21350100"},"web_url":"https://gitlab.com/coq/coq/-/jobs/65889866","artifacts":[{"file_type":"trace","size":108448,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":"2018-05-08T15:45:49.017Z","tag_list":[]}
{"id":65889865,"status":"success","stage":"opam-boot","name":"opam-boot:32bit","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-01T15:34:33.939Z","started_at":"2018-05-01T15:34:37.591Z","finished_at":"2018-05-01T15:42:31.205Z","duration":473.61435,"queued_duration":1.486947,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"527593a043eea865abda39b5850916bc9483e0ef","short_id":"527593a0","created_at":"2018-05-01T01:27:58.000+02:00","parent_ids":["df39205c5e75f9f6cc6697993fbfcae5569c2ebd"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-01T01:27:58.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/527593a043eea865abda39b5850916bc9483e0ef"},"pipeline":{"id":21350100,"iid":null,"project_id":6138686,"sha":"527593a043eea865abda39b5850916bc9483e0ef","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-01T15:34:33.889Z","updated_at":"2018-05-01T17:05:46.346Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/21350100"},"web_url":"https://gitlab.com/coq/coq/-/jobs/65889865","artifacts":[{"file_type":"trace","size":64426,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2018-05-08T15:42:29.383Z","tag_list":[]}
{"id":65889864,"status":"success","stage":"opam-boot","name":"opam-boot","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-01T15:34:33.903Z","started_at":"2018-05-01T15:34:37.357Z","finished_at":"2018-05-01T15:44:19.164Z","duration":581.806792,"queued_duration":1.211355,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"527593a043eea865abda39b5850916bc9483e0ef","short_id":"527593a0","created_at":"2018-05-01T01:27:58.000+02:00","parent_ids":["df39205c5e75f9f6cc6697993fbfcae5569c2ebd"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-01T01:27:58.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/527593a043eea865abda39b5850916bc9483e0ef"},"pipeline":{"id":21350100,"iid":null,"project_id":6138686,"sha":"527593a043eea865abda39b5850916bc9483e0ef","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-01T15:34:33.889Z","updated_at":"2018-05-01T17:05:46.346Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/21350100"},"web_url":"https://gitlab.com/coq/coq/-/jobs/65889864","artifacts":[{"file_type":"trace","size":103739,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2018-05-08T15:44:17.537Z","tag_list":[]}
