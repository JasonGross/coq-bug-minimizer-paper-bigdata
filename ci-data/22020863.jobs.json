{"id":68242504,"status":"canceled","stage":"test","name":"ci-vst","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-15T02:58:14.035Z","started_at":null,"finished_at":"2018-05-15T03:15:00.235Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9c5bd01789389f33e15318f2173fc495aa08b595","short_id":"9c5bd017","created_at":"2018-05-15T04:57:44.000+02:00","parent_ids":["50ab46ad16fb03aef120dcfc33f3122b3a2ca837"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-15T04:57:44.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9c5bd01789389f33e15318f2173fc495aa08b595"},"pipeline":{"id":22020863,"iid":null,"project_id":6138686,"sha":"9c5bd01789389f33e15318f2173fc495aa08b595","ref":"pr-6857","status":"canceled","source":"push","created_at":"2018-05-15T02:58:12.209Z","updated_at":"2018-05-15T03:15:00.416Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22020863"},"web_url":"https://gitlab.com/coq/coq/-/jobs/68242504","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":68242503,"status":"canceled","stage":"test","name":"ci-unimath","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-15T02:58:14.004Z","started_at":null,"finished_at":"2018-05-15T03:15:00.214Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9c5bd01789389f33e15318f2173fc495aa08b595","short_id":"9c5bd017","created_at":"2018-05-15T04:57:44.000+02:00","parent_ids":["50ab46ad16fb03aef120dcfc33f3122b3a2ca837"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-15T04:57:44.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9c5bd01789389f33e15318f2173fc495aa08b595"},"pipeline":{"id":22020863,"iid":null,"project_id":6138686,"sha":"9c5bd01789389f33e15318f2173fc495aa08b595","ref":"pr-6857","status":"canceled","source":"push","created_at":"2018-05-15T02:58:12.209Z","updated_at":"2018-05-15T03:15:00.416Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22020863"},"web_url":"https://gitlab.com/coq/coq/-/jobs/68242503","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":68242502,"status":"canceled","stage":"test","name":"ci-sf","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-15T02:58:13.972Z","started_at":null,"finished_at":"2018-05-15T03:15:00.194Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9c5bd01789389f33e15318f2173fc495aa08b595","short_id":"9c5bd017","created_at":"2018-05-15T04:57:44.000+02:00","parent_ids":["50ab46ad16fb03aef120dcfc33f3122b3a2ca837"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-15T04:57:44.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9c5bd01789389f33e15318f2173fc495aa08b595"},"pipeline":{"id":22020863,"iid":null,"project_id":6138686,"sha":"9c5bd01789389f33e15318f2173fc495aa08b595","ref":"pr-6857","status":"canceled","source":"push","created_at":"2018-05-15T02:58:12.209Z","updated_at":"2018-05-15T03:15:00.416Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22020863"},"web_url":"https://gitlab.com/coq/coq/-/jobs/68242502","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":68242501,"status":"canceled","stage":"test","name":"ci-pidetop","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-15T02:58:13.943Z","started_at":null,"finished_at":"2018-05-15T03:15:00.171Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9c5bd01789389f33e15318f2173fc495aa08b595","short_id":"9c5bd017","created_at":"2018-05-15T04:57:44.000+02:00","parent_ids":["50ab46ad16fb03aef120dcfc33f3122b3a2ca837"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-15T04:57:44.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9c5bd01789389f33e15318f2173fc495aa08b595"},"pipeline":{"id":22020863,"iid":null,"project_id":6138686,"sha":"9c5bd01789389f33e15318f2173fc495aa08b595","ref":"pr-6857","status":"canceled","source":"push","created_at":"2018-05-15T02:58:12.209Z","updated_at":"2018-05-15T03:15:00.416Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22020863"},"web_url":"https://gitlab.com/coq/coq/-/jobs/68242501","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":68242500,"status":"canceled","stage":"test","name":"ci-mtac2","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-15T02:58:13.913Z","started_at":null,"finished_at":"2018-05-15T03:15:00.150Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9c5bd01789389f33e15318f2173fc495aa08b595","short_id":"9c5bd017","created_at":"2018-05-15T04:57:44.000+02:00","parent_ids":["50ab46ad16fb03aef120dcfc33f3122b3a2ca837"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-15T04:57:44.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9c5bd01789389f33e15318f2173fc495aa08b595"},"pipeline":{"id":22020863,"iid":null,"project_id":6138686,"sha":"9c5bd01789389f33e15318f2173fc495aa08b595","ref":"pr-6857","status":"canceled","source":"push","created_at":"2018-05-15T02:58:12.209Z","updated_at":"2018-05-15T03:15:00.416Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22020863"},"web_url":"https://gitlab.com/coq/coq/-/jobs/68242500","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":68242499,"status":"canceled","stage":"test","name":"ci-math-comp","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-15T02:58:13.861Z","started_at":null,"finished_at":"2018-05-15T03:15:00.129Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9c5bd01789389f33e15318f2173fc495aa08b595","short_id":"9c5bd017","created_at":"2018-05-15T04:57:44.000+02:00","parent_ids":["50ab46ad16fb03aef120dcfc33f3122b3a2ca837"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-15T04:57:44.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9c5bd01789389f33e15318f2173fc495aa08b595"},"pipeline":{"id":22020863,"iid":null,"project_id":6138686,"sha":"9c5bd01789389f33e15318f2173fc495aa08b595","ref":"pr-6857","status":"canceled","source":"push","created_at":"2018-05-15T02:58:12.209Z","updated_at":"2018-05-15T03:15:00.416Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22020863"},"web_url":"https://gitlab.com/coq/coq/-/jobs/68242499","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":68242498,"status":"canceled","stage":"test","name":"ci-ltac2","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-15T02:58:13.829Z","started_at":null,"finished_at":"2018-05-15T03:15:00.107Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9c5bd01789389f33e15318f2173fc495aa08b595","short_id":"9c5bd017","created_at":"2018-05-15T04:57:44.000+02:00","parent_ids":["50ab46ad16fb03aef120dcfc33f3122b3a2ca837"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-15T04:57:44.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9c5bd01789389f33e15318f2173fc495aa08b595"},"pipeline":{"id":22020863,"iid":null,"project_id":6138686,"sha":"9c5bd01789389f33e15318f2173fc495aa08b595","ref":"pr-6857","status":"canceled","source":"push","created_at":"2018-05-15T02:58:12.209Z","updated_at":"2018-05-15T03:15:00.416Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22020863"},"web_url":"https://gitlab.com/coq/coq/-/jobs/68242498","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":68242497,"status":"canceled","stage":"test","name":"ci-iris-lambda-rust","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-15T02:58:13.794Z","started_at":null,"finished_at":"2018-05-15T03:15:00.086Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9c5bd01789389f33e15318f2173fc495aa08b595","short_id":"9c5bd017","created_at":"2018-05-15T04:57:44.000+02:00","parent_ids":["50ab46ad16fb03aef120dcfc33f3122b3a2ca837"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-15T04:57:44.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9c5bd01789389f33e15318f2173fc495aa08b595"},"pipeline":{"id":22020863,"iid":null,"project_id":6138686,"sha":"9c5bd01789389f33e15318f2173fc495aa08b595","ref":"pr-6857","status":"canceled","source":"push","created_at":"2018-05-15T02:58:12.209Z","updated_at":"2018-05-15T03:15:00.416Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22020863"},"web_url":"https://gitlab.com/coq/coq/-/jobs/68242497","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":68242496,"status":"canceled","stage":"test","name":"ci-hott","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-15T02:58:13.761Z","started_at":null,"finished_at":"2018-05-15T03:15:00.066Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9c5bd01789389f33e15318f2173fc495aa08b595","short_id":"9c5bd017","created_at":"2018-05-15T04:57:44.000+02:00","parent_ids":["50ab46ad16fb03aef120dcfc33f3122b3a2ca837"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-15T04:57:44.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9c5bd01789389f33e15318f2173fc495aa08b595"},"pipeline":{"id":22020863,"iid":null,"project_id":6138686,"sha":"9c5bd01789389f33e15318f2173fc495aa08b595","ref":"pr-6857","status":"canceled","source":"push","created_at":"2018-05-15T02:58:12.209Z","updated_at":"2018-05-15T03:15:00.416Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22020863"},"web_url":"https://gitlab.com/coq/coq/-/jobs/68242496","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":68242495,"status":"canceled","stage":"test","name":"ci-geocoq","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-15T02:58:13.723Z","started_at":null,"finished_at":"2018-05-15T03:15:00.045Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9c5bd01789389f33e15318f2173fc495aa08b595","short_id":"9c5bd017","created_at":"2018-05-15T04:57:44.000+02:00","parent_ids":["50ab46ad16fb03aef120dcfc33f3122b3a2ca837"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-15T04:57:44.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9c5bd01789389f33e15318f2173fc495aa08b595"},"pipeline":{"id":22020863,"iid":null,"project_id":6138686,"sha":"9c5bd01789389f33e15318f2173fc495aa08b595","ref":"pr-6857","status":"canceled","source":"push","created_at":"2018-05-15T02:58:12.209Z","updated_at":"2018-05-15T03:15:00.416Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22020863"},"web_url":"https://gitlab.com/coq/coq/-/jobs/68242495","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":68242494,"status":"canceled","stage":"test","name":"ci-formal-topology","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-15T02:58:13.677Z","started_at":null,"finished_at":"2018-05-15T03:15:00.008Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9c5bd01789389f33e15318f2173fc495aa08b595","short_id":"9c5bd017","created_at":"2018-05-15T04:57:44.000+02:00","parent_ids":["50ab46ad16fb03aef120dcfc33f3122b3a2ca837"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-15T04:57:44.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9c5bd01789389f33e15318f2173fc495aa08b595"},"pipeline":{"id":22020863,"iid":null,"project_id":6138686,"sha":"9c5bd01789389f33e15318f2173fc495aa08b595","ref":"pr-6857","status":"canceled","source":"push","created_at":"2018-05-15T02:58:12.209Z","updated_at":"2018-05-15T03:15:00.416Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22020863"},"web_url":"https://gitlab.com/coq/coq/-/jobs/68242494","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":68242493,"status":"canceled","stage":"test","name":"ci-flocq","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-15T02:58:13.629Z","started_at":null,"finished_at":"2018-05-15T03:14:59.987Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9c5bd01789389f33e15318f2173fc495aa08b595","short_id":"9c5bd017","created_at":"2018-05-15T04:57:44.000+02:00","parent_ids":["50ab46ad16fb03aef120dcfc33f3122b3a2ca837"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-15T04:57:44.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9c5bd01789389f33e15318f2173fc495aa08b595"},"pipeline":{"id":22020863,"iid":null,"project_id":6138686,"sha":"9c5bd01789389f33e15318f2173fc495aa08b595","ref":"pr-6857","status":"canceled","source":"push","created_at":"2018-05-15T02:58:12.209Z","updated_at":"2018-05-15T03:15:00.416Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22020863"},"web_url":"https://gitlab.com/coq/coq/-/jobs/68242493","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":68242492,"status":"canceled","stage":"test","name":"ci-fiat-parsers","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-15T02:58:13.592Z","started_at":null,"finished_at":"2018-05-15T03:14:59.961Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9c5bd01789389f33e15318f2173fc495aa08b595","short_id":"9c5bd017","created_at":"2018-05-15T04:57:44.000+02:00","parent_ids":["50ab46ad16fb03aef120dcfc33f3122b3a2ca837"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-15T04:57:44.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9c5bd01789389f33e15318f2173fc495aa08b595"},"pipeline":{"id":22020863,"iid":null,"project_id":6138686,"sha":"9c5bd01789389f33e15318f2173fc495aa08b595","ref":"pr-6857","status":"canceled","source":"push","created_at":"2018-05-15T02:58:12.209Z","updated_at":"2018-05-15T03:15:00.416Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22020863"},"web_url":"https://gitlab.com/coq/coq/-/jobs/68242492","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":68242491,"status":"canceled","stage":"test","name":"ci-fiat-crypto","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-15T02:58:13.538Z","started_at":null,"finished_at":"2018-05-15T03:14:59.937Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9c5bd01789389f33e15318f2173fc495aa08b595","short_id":"9c5bd017","created_at":"2018-05-15T04:57:44.000+02:00","parent_ids":["50ab46ad16fb03aef120dcfc33f3122b3a2ca837"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-15T04:57:44.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9c5bd01789389f33e15318f2173fc495aa08b595"},"pipeline":{"id":22020863,"iid":null,"project_id":6138686,"sha":"9c5bd01789389f33e15318f2173fc495aa08b595","ref":"pr-6857","status":"canceled","source":"push","created_at":"2018-05-15T02:58:12.209Z","updated_at":"2018-05-15T03:15:00.416Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22020863"},"web_url":"https://gitlab.com/coq/coq/-/jobs/68242491","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":68242490,"status":"canceled","stage":"test","name":"ci-fcsl-pcm","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-15T02:58:13.459Z","started_at":null,"finished_at":"2018-05-15T03:14:59.916Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9c5bd01789389f33e15318f2173fc495aa08b595","short_id":"9c5bd017","created_at":"2018-05-15T04:57:44.000+02:00","parent_ids":["50ab46ad16fb03aef120dcfc33f3122b3a2ca837"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-15T04:57:44.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9c5bd01789389f33e15318f2173fc495aa08b595"},"pipeline":{"id":22020863,"iid":null,"project_id":6138686,"sha":"9c5bd01789389f33e15318f2173fc495aa08b595","ref":"pr-6857","status":"canceled","source":"push","created_at":"2018-05-15T02:58:12.209Z","updated_at":"2018-05-15T03:15:00.416Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22020863"},"web_url":"https://gitlab.com/coq/coq/-/jobs/68242490","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":68242489,"status":"canceled","stage":"test","name":"ci-equations","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-15T02:58:13.417Z","started_at":null,"finished_at":"2018-05-15T03:14:59.877Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9c5bd01789389f33e15318f2173fc495aa08b595","short_id":"9c5bd017","created_at":"2018-05-15T04:57:44.000+02:00","parent_ids":["50ab46ad16fb03aef120dcfc33f3122b3a2ca837"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-15T04:57:44.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9c5bd01789389f33e15318f2173fc495aa08b595"},"pipeline":{"id":22020863,"iid":null,"project_id":6138686,"sha":"9c5bd01789389f33e15318f2173fc495aa08b595","ref":"pr-6857","status":"canceled","source":"push","created_at":"2018-05-15T02:58:12.209Z","updated_at":"2018-05-15T03:15:00.416Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22020863"},"web_url":"https://gitlab.com/coq/coq/-/jobs/68242489","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":68242488,"status":"canceled","stage":"test","name":"ci-elpi","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-15T02:58:13.374Z","started_at":null,"finished_at":"2018-05-15T03:14:59.850Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9c5bd01789389f33e15318f2173fc495aa08b595","short_id":"9c5bd017","created_at":"2018-05-15T04:57:44.000+02:00","parent_ids":["50ab46ad16fb03aef120dcfc33f3122b3a2ca837"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-15T04:57:44.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9c5bd01789389f33e15318f2173fc495aa08b595"},"pipeline":{"id":22020863,"iid":null,"project_id":6138686,"sha":"9c5bd01789389f33e15318f2173fc495aa08b595","ref":"pr-6857","status":"canceled","source":"push","created_at":"2018-05-15T02:58:12.209Z","updated_at":"2018-05-15T03:15:00.416Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22020863"},"web_url":"https://gitlab.com/coq/coq/-/jobs/68242488","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":68242487,"status":"canceled","stage":"test","name":"ci-cross-crypto","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-15T02:58:13.330Z","started_at":null,"finished_at":"2018-05-15T03:14:59.829Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9c5bd01789389f33e15318f2173fc495aa08b595","short_id":"9c5bd017","created_at":"2018-05-15T04:57:44.000+02:00","parent_ids":["50ab46ad16fb03aef120dcfc33f3122b3a2ca837"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-15T04:57:44.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9c5bd01789389f33e15318f2173fc495aa08b595"},"pipeline":{"id":22020863,"iid":null,"project_id":6138686,"sha":"9c5bd01789389f33e15318f2173fc495aa08b595","ref":"pr-6857","status":"canceled","source":"push","created_at":"2018-05-15T02:58:12.209Z","updated_at":"2018-05-15T03:15:00.416Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22020863"},"web_url":"https://gitlab.com/coq/coq/-/jobs/68242487","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":68242486,"status":"canceled","stage":"test","name":"ci-coquelicot","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-15T02:58:13.287Z","started_at":null,"finished_at":"2018-05-15T03:14:59.789Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9c5bd01789389f33e15318f2173fc495aa08b595","short_id":"9c5bd017","created_at":"2018-05-15T04:57:44.000+02:00","parent_ids":["50ab46ad16fb03aef120dcfc33f3122b3a2ca837"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-15T04:57:44.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9c5bd01789389f33e15318f2173fc495aa08b595"},"pipeline":{"id":22020863,"iid":null,"project_id":6138686,"sha":"9c5bd01789389f33e15318f2173fc495aa08b595","ref":"pr-6857","status":"canceled","source":"push","created_at":"2018-05-15T02:58:12.209Z","updated_at":"2018-05-15T03:15:00.416Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22020863"},"web_url":"https://gitlab.com/coq/coq/-/jobs/68242486","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":68242485,"status":"canceled","stage":"test","name":"ci-coq-dpdgraph","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-15T02:58:13.183Z","started_at":null,"finished_at":"2018-05-15T03:14:59.753Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9c5bd01789389f33e15318f2173fc495aa08b595","short_id":"9c5bd017","created_at":"2018-05-15T04:57:44.000+02:00","parent_ids":["50ab46ad16fb03aef120dcfc33f3122b3a2ca837"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-15T04:57:44.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9c5bd01789389f33e15318f2173fc495aa08b595"},"pipeline":{"id":22020863,"iid":null,"project_id":6138686,"sha":"9c5bd01789389f33e15318f2173fc495aa08b595","ref":"pr-6857","status":"canceled","source":"push","created_at":"2018-05-15T02:58:12.209Z","updated_at":"2018-05-15T03:15:00.416Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22020863"},"web_url":"https://gitlab.com/coq/coq/-/jobs/68242485","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":68242484,"status":"canceled","stage":"test","name":"ci-compcert","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-15T02:58:13.142Z","started_at":null,"finished_at":"2018-05-15T03:14:59.731Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9c5bd01789389f33e15318f2173fc495aa08b595","short_id":"9c5bd017","created_at":"2018-05-15T04:57:44.000+02:00","parent_ids":["50ab46ad16fb03aef120dcfc33f3122b3a2ca837"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-15T04:57:44.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9c5bd01789389f33e15318f2173fc495aa08b595"},"pipeline":{"id":22020863,"iid":null,"project_id":6138686,"sha":"9c5bd01789389f33e15318f2173fc495aa08b595","ref":"pr-6857","status":"canceled","source":"push","created_at":"2018-05-15T02:58:12.209Z","updated_at":"2018-05-15T03:15:00.416Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22020863"},"web_url":"https://gitlab.com/coq/coq/-/jobs/68242484","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":68242483,"status":"canceled","stage":"test","name":"ci-color","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-15T02:58:13.096Z","started_at":null,"finished_at":"2018-05-15T03:14:59.713Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9c5bd01789389f33e15318f2173fc495aa08b595","short_id":"9c5bd017","created_at":"2018-05-15T04:57:44.000+02:00","parent_ids":["50ab46ad16fb03aef120dcfc33f3122b3a2ca837"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-15T04:57:44.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9c5bd01789389f33e15318f2173fc495aa08b595"},"pipeline":{"id":22020863,"iid":null,"project_id":6138686,"sha":"9c5bd01789389f33e15318f2173fc495aa08b595","ref":"pr-6857","status":"canceled","source":"push","created_at":"2018-05-15T02:58:12.209Z","updated_at":"2018-05-15T03:15:00.416Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22020863"},"web_url":"https://gitlab.com/coq/coq/-/jobs/68242483","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":68242482,"status":"canceled","stage":"test","name":"ci-bignums","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-15T02:58:13.048Z","started_at":null,"finished_at":"2018-05-15T03:14:59.692Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9c5bd01789389f33e15318f2173fc495aa08b595","short_id":"9c5bd017","created_at":"2018-05-15T04:57:44.000+02:00","parent_ids":["50ab46ad16fb03aef120dcfc33f3122b3a2ca837"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-15T04:57:44.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9c5bd01789389f33e15318f2173fc495aa08b595"},"pipeline":{"id":22020863,"iid":null,"project_id":6138686,"sha":"9c5bd01789389f33e15318f2173fc495aa08b595","ref":"pr-6857","status":"canceled","source":"push","created_at":"2018-05-15T02:58:12.209Z","updated_at":"2018-05-15T03:15:00.416Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22020863"},"web_url":"https://gitlab.com/coq/coq/-/jobs/68242482","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":68242481,"status":"canceled","stage":"test","name":"validate:edge+flambda","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-15T02:58:13.003Z","started_at":null,"finished_at":"2018-05-15T03:14:59.669Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9c5bd01789389f33e15318f2173fc495aa08b595","short_id":"9c5bd017","created_at":"2018-05-15T04:57:44.000+02:00","parent_ids":["50ab46ad16fb03aef120dcfc33f3122b3a2ca837"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-15T04:57:44.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9c5bd01789389f33e15318f2173fc495aa08b595"},"pipeline":{"id":22020863,"iid":null,"project_id":6138686,"sha":"9c5bd01789389f33e15318f2173fc495aa08b595","ref":"pr-6857","status":"canceled","source":"push","created_at":"2018-05-15T02:58:12.209Z","updated_at":"2018-05-15T03:15:00.416Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22020863"},"web_url":"https://gitlab.com/coq/coq/-/jobs/68242481","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":68242480,"status":"canceled","stage":"test","name":"validate:edge","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-15T02:58:12.965Z","started_at":null,"finished_at":"2018-05-15T03:14:59.650Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9c5bd01789389f33e15318f2173fc495aa08b595","short_id":"9c5bd017","created_at":"2018-05-15T04:57:44.000+02:00","parent_ids":["50ab46ad16fb03aef120dcfc33f3122b3a2ca837"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-15T04:57:44.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9c5bd01789389f33e15318f2173fc495aa08b595"},"pipeline":{"id":22020863,"iid":null,"project_id":6138686,"sha":"9c5bd01789389f33e15318f2173fc495aa08b595","ref":"pr-6857","status":"canceled","source":"push","created_at":"2018-05-15T02:58:12.209Z","updated_at":"2018-05-15T03:15:00.416Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22020863"},"web_url":"https://gitlab.com/coq/coq/-/jobs/68242480","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":68242479,"status":"canceled","stage":"test","name":"validate:base+32bit","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-15T02:58:12.933Z","started_at":null,"finished_at":"2018-05-15T03:14:59.628Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9c5bd01789389f33e15318f2173fc495aa08b595","short_id":"9c5bd017","created_at":"2018-05-15T04:57:44.000+02:00","parent_ids":["50ab46ad16fb03aef120dcfc33f3122b3a2ca837"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-15T04:57:44.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9c5bd01789389f33e15318f2173fc495aa08b595"},"pipeline":{"id":22020863,"iid":null,"project_id":6138686,"sha":"9c5bd01789389f33e15318f2173fc495aa08b595","ref":"pr-6857","status":"canceled","source":"push","created_at":"2018-05-15T02:58:12.209Z","updated_at":"2018-05-15T03:15:00.416Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22020863"},"web_url":"https://gitlab.com/coq/coq/-/jobs/68242479","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":68242478,"status":"canceled","stage":"test","name":"validate:base","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-15T02:58:12.900Z","started_at":null,"finished_at":"2018-05-15T03:14:59.609Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9c5bd01789389f33e15318f2173fc495aa08b595","short_id":"9c5bd017","created_at":"2018-05-15T04:57:44.000+02:00","parent_ids":["50ab46ad16fb03aef120dcfc33f3122b3a2ca837"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-15T04:57:44.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9c5bd01789389f33e15318f2173fc495aa08b595"},"pipeline":{"id":22020863,"iid":null,"project_id":6138686,"sha":"9c5bd01789389f33e15318f2173fc495aa08b595","ref":"pr-6857","status":"canceled","source":"push","created_at":"2018-05-15T02:58:12.209Z","updated_at":"2018-05-15T03:15:00.416Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22020863"},"web_url":"https://gitlab.com/coq/coq/-/jobs/68242478","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":68242477,"status":"canceled","stage":"test","name":"test-suite:edge+flambda","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-15T02:58:12.861Z","started_at":null,"finished_at":"2018-05-15T03:14:59.589Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9c5bd01789389f33e15318f2173fc495aa08b595","short_id":"9c5bd017","created_at":"2018-05-15T04:57:44.000+02:00","parent_ids":["50ab46ad16fb03aef120dcfc33f3122b3a2ca837"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-15T04:57:44.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9c5bd01789389f33e15318f2173fc495aa08b595"},"pipeline":{"id":22020863,"iid":null,"project_id":6138686,"sha":"9c5bd01789389f33e15318f2173fc495aa08b595","ref":"pr-6857","status":"canceled","source":"push","created_at":"2018-05-15T02:58:12.209Z","updated_at":"2018-05-15T03:15:00.416Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22020863"},"web_url":"https://gitlab.com/coq/coq/-/jobs/68242477","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":68242476,"status":"canceled","stage":"test","name":"test-suite:edge","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-15T02:58:12.809Z","started_at":null,"finished_at":"2018-05-15T03:14:59.568Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9c5bd01789389f33e15318f2173fc495aa08b595","short_id":"9c5bd017","created_at":"2018-05-15T04:57:44.000+02:00","parent_ids":["50ab46ad16fb03aef120dcfc33f3122b3a2ca837"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-15T04:57:44.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9c5bd01789389f33e15318f2173fc495aa08b595"},"pipeline":{"id":22020863,"iid":null,"project_id":6138686,"sha":"9c5bd01789389f33e15318f2173fc495aa08b595","ref":"pr-6857","status":"canceled","source":"push","created_at":"2018-05-15T02:58:12.209Z","updated_at":"2018-05-15T03:15:00.416Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22020863"},"web_url":"https://gitlab.com/coq/coq/-/jobs/68242476","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":68242475,"status":"canceled","stage":"test","name":"test-suite:base+32bit","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-15T02:58:12.772Z","started_at":null,"finished_at":"2018-05-15T03:14:59.543Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9c5bd01789389f33e15318f2173fc495aa08b595","short_id":"9c5bd017","created_at":"2018-05-15T04:57:44.000+02:00","parent_ids":["50ab46ad16fb03aef120dcfc33f3122b3a2ca837"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-15T04:57:44.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9c5bd01789389f33e15318f2173fc495aa08b595"},"pipeline":{"id":22020863,"iid":null,"project_id":6138686,"sha":"9c5bd01789389f33e15318f2173fc495aa08b595","ref":"pr-6857","status":"canceled","source":"push","created_at":"2018-05-15T02:58:12.209Z","updated_at":"2018-05-15T03:15:00.416Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22020863"},"web_url":"https://gitlab.com/coq/coq/-/jobs/68242475","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":68242474,"status":"canceled","stage":"test","name":"test-suite:base","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-15T02:58:12.742Z","started_at":null,"finished_at":"2018-05-15T03:14:59.519Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9c5bd01789389f33e15318f2173fc495aa08b595","short_id":"9c5bd017","created_at":"2018-05-15T04:57:44.000+02:00","parent_ids":["50ab46ad16fb03aef120dcfc33f3122b3a2ca837"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-15T04:57:44.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9c5bd01789389f33e15318f2173fc495aa08b595"},"pipeline":{"id":22020863,"iid":null,"project_id":6138686,"sha":"9c5bd01789389f33e15318f2173fc495aa08b595","ref":"pr-6857","status":"canceled","source":"push","created_at":"2018-05-15T02:58:12.209Z","updated_at":"2018-05-15T03:15:00.416Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22020863"},"web_url":"https://gitlab.com/coq/coq/-/jobs/68242474","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":68242473,"status":"canceled","stage":"test","name":"warnings:edge","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-15T02:58:12.709Z","started_at":null,"finished_at":"2018-05-15T03:14:59.500Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9c5bd01789389f33e15318f2173fc495aa08b595","short_id":"9c5bd017","created_at":"2018-05-15T04:57:44.000+02:00","parent_ids":["50ab46ad16fb03aef120dcfc33f3122b3a2ca837"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-15T04:57:44.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9c5bd01789389f33e15318f2173fc495aa08b595"},"pipeline":{"id":22020863,"iid":null,"project_id":6138686,"sha":"9c5bd01789389f33e15318f2173fc495aa08b595","ref":"pr-6857","status":"canceled","source":"push","created_at":"2018-05-15T02:58:12.209Z","updated_at":"2018-05-15T03:15:00.416Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22020863"},"web_url":"https://gitlab.com/coq/coq/-/jobs/68242473","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":68242472,"status":"canceled","stage":"test","name":"warnings:base","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-15T02:58:12.667Z","started_at":null,"finished_at":"2018-05-15T03:14:59.477Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9c5bd01789389f33e15318f2173fc495aa08b595","short_id":"9c5bd017","created_at":"2018-05-15T04:57:44.000+02:00","parent_ids":["50ab46ad16fb03aef120dcfc33f3122b3a2ca837"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-15T04:57:44.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9c5bd01789389f33e15318f2173fc495aa08b595"},"pipeline":{"id":22020863,"iid":null,"project_id":6138686,"sha":"9c5bd01789389f33e15318f2173fc495aa08b595","ref":"pr-6857","status":"canceled","source":"push","created_at":"2018-05-15T02:58:12.209Z","updated_at":"2018-05-15T03:15:00.416Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22020863"},"web_url":"https://gitlab.com/coq/coq/-/jobs/68242472","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":68242471,"status":"canceled","stage":"test","name":"windows32","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-15T02:58:12.592Z","started_at":null,"finished_at":"2018-05-15T03:14:59.456Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9c5bd01789389f33e15318f2173fc495aa08b595","short_id":"9c5bd017","created_at":"2018-05-15T04:57:44.000+02:00","parent_ids":["50ab46ad16fb03aef120dcfc33f3122b3a2ca837"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-15T04:57:44.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9c5bd01789389f33e15318f2173fc495aa08b595"},"pipeline":{"id":22020863,"iid":null,"project_id":6138686,"sha":"9c5bd01789389f33e15318f2173fc495aa08b595","ref":"pr-6857","status":"canceled","source":"push","created_at":"2018-05-15T02:58:12.209Z","updated_at":"2018-05-15T03:15:00.416Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22020863"},"web_url":"https://gitlab.com/coq/coq/-/jobs/68242471","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":["windows"]}
{"id":68242470,"status":"canceled","stage":"test","name":"windows64","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-15T02:58:12.539Z","started_at":null,"finished_at":"2018-05-15T03:14:59.436Z","duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9c5bd01789389f33e15318f2173fc495aa08b595","short_id":"9c5bd017","created_at":"2018-05-15T04:57:44.000+02:00","parent_ids":["50ab46ad16fb03aef120dcfc33f3122b3a2ca837"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-15T04:57:44.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9c5bd01789389f33e15318f2173fc495aa08b595"},"pipeline":{"id":22020863,"iid":null,"project_id":6138686,"sha":"9c5bd01789389f33e15318f2173fc495aa08b595","ref":"pr-6857","status":"canceled","source":"push","created_at":"2018-05-15T02:58:12.209Z","updated_at":"2018-05-15T03:15:00.416Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22020863"},"web_url":"https://gitlab.com/coq/coq/-/jobs/68242470","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":["windows"]}
{"id":68242469,"status":"success","stage":"build","name":"build:dune","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-15T02:58:12.491Z","started_at":"2018-05-15T02:58:24.348Z","finished_at":"2018-05-15T03:06:21.996Z","duration":477.647975,"queued_duration":9.963426,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9c5bd01789389f33e15318f2173fc495aa08b595","short_id":"9c5bd017","created_at":"2018-05-15T04:57:44.000+02:00","parent_ids":["50ab46ad16fb03aef120dcfc33f3122b3a2ca837"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-15T04:57:44.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9c5bd01789389f33e15318f2173fc495aa08b595"},"pipeline":{"id":22020863,"iid":null,"project_id":6138686,"sha":"9c5bd01789389f33e15318f2173fc495aa08b595","ref":"pr-6857","status":"canceled","source":"push","created_at":"2018-05-15T02:58:12.209Z","updated_at":"2018-05-15T03:15:00.416Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22020863"},"web_url":"https://gitlab.com/coq/coq/-/jobs/68242469","artifacts":[{"file_type":"trace","size":24581,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":68242468,"status":"canceled","stage":"build","name":"build:edge+flambda","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-15T02:58:12.426Z","started_at":"2018-05-15T02:58:23.884Z","finished_at":"2018-05-15T03:14:59.411Z","duration":995.526849,"queued_duration":9.405693,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9c5bd01789389f33e15318f2173fc495aa08b595","short_id":"9c5bd017","created_at":"2018-05-15T04:57:44.000+02:00","parent_ids":["50ab46ad16fb03aef120dcfc33f3122b3a2ca837"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-15T04:57:44.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9c5bd01789389f33e15318f2173fc495aa08b595"},"pipeline":{"id":22020863,"iid":null,"project_id":6138686,"sha":"9c5bd01789389f33e15318f2173fc495aa08b595","ref":"pr-6857","status":"canceled","source":"push","created_at":"2018-05-15T02:58:12.209Z","updated_at":"2018-05-15T03:15:00.416Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22020863"},"web_url":"https://gitlab.com/coq/coq/-/jobs/68242468","artifacts":[{"file_type":"trace","size":102582,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":68242466,"status":"success","stage":"build","name":"build:edge","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-15T02:58:12.339Z","started_at":"2018-05-15T02:58:23.193Z","finished_at":"2018-05-15T03:14:35.372Z","duration":972.17899,"queued_duration":8.606193,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9c5bd01789389f33e15318f2173fc495aa08b595","short_id":"9c5bd017","created_at":"2018-05-15T04:57:44.000+02:00","parent_ids":["50ab46ad16fb03aef120dcfc33f3122b3a2ca837"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-15T04:57:44.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9c5bd01789389f33e15318f2173fc495aa08b595"},"pipeline":{"id":22020863,"iid":null,"project_id":6138686,"sha":"9c5bd01789389f33e15318f2173fc495aa08b595","ref":"pr-6857","status":"canceled","source":"push","created_at":"2018-05-15T02:58:12.209Z","updated_at":"2018-05-15T03:15:00.416Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22020863"},"web_url":"https://gitlab.com/coq/coq/-/jobs/68242466","artifacts":[{"file_type":"trace","size":230494,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2018-05-22T03:14:21.741Z","tag_list":[]}
{"id":68242465,"status":"success","stage":"build","name":"build:base+32bit","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-15T02:58:12.294Z","started_at":"2018-05-15T02:58:22.720Z","finished_at":"2018-05-15T03:07:23.690Z","duration":540.970239,"queued_duration":8.042919,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9c5bd01789389f33e15318f2173fc495aa08b595","short_id":"9c5bd017","created_at":"2018-05-15T04:57:44.000+02:00","parent_ids":["50ab46ad16fb03aef120dcfc33f3122b3a2ca837"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-15T04:57:44.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9c5bd01789389f33e15318f2173fc495aa08b595"},"pipeline":{"id":22020863,"iid":null,"project_id":6138686,"sha":"9c5bd01789389f33e15318f2173fc495aa08b595","ref":"pr-6857","status":"canceled","source":"push","created_at":"2018-05-15T02:58:12.209Z","updated_at":"2018-05-15T03:15:00.416Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22020863"},"web_url":"https://gitlab.com/coq/coq/-/jobs/68242465","artifacts":[{"file_type":"trace","size":227308,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":"2018-05-22T03:07:22.007Z","tag_list":[]}
{"id":68242464,"status":"canceled","stage":"build","name":"build:base","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-15T02:58:12.237Z","started_at":"2018-05-15T02:58:22.234Z","finished_at":"2018-05-15T03:14:59.376Z","duration":997.14207,"queued_duration":7.479522,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"9c5bd01789389f33e15318f2173fc495aa08b595","short_id":"9c5bd017","created_at":"2018-05-15T04:57:44.000+02:00","parent_ids":["50ab46ad16fb03aef120dcfc33f3122b3a2ca837"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-15T04:57:44.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/9c5bd01789389f33e15318f2173fc495aa08b595"},"pipeline":{"id":22020863,"iid":null,"project_id":6138686,"sha":"9c5bd01789389f33e15318f2173fc495aa08b595","ref":"pr-6857","status":"canceled","source":"push","created_at":"2018-05-15T02:58:12.209Z","updated_at":"2018-05-15T03:15:00.416Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22020863"},"web_url":"https://gitlab.com/coq/coq/-/jobs/68242464","artifacts":[{"file_type":"trace","size":123641,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
