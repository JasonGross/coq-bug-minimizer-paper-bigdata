{"id":81558064,"status":"success","stage":"test","name":"ci-elpi","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-07-13T11:12:05.885Z","started_at":"2018-07-13T11:12:06.561Z","finished_at":"2018-07-13T11:17:00.850Z","duration":294.289215,"queued_duration":0.628764,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a","short_id":"55e4850e","created_at":"2018-07-13T12:41:28.000+02:00","parent_ids":["95b6a6582830ac3abd534b6a6e1098c5fbe7d210"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-07-13T12:41:28.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a"},"pipeline":{"id":25705922,"iid":2145,"project_id":6138686,"sha":"55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a","ref":"pr-6857","status":"success","source":"push","created_at":"2018-07-13T10:42:18.206Z","updated_at":"2018-07-13T12:45:31.136Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/25705922"},"web_url":"https://gitlab.com/coq/coq/-/jobs/81558064","artifacts":[{"file_type":"trace","size":444010,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":81557996,"status":"success","stage":"test","name":"validate:edge","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-07-13T11:11:37.296Z","started_at":"2018-07-13T11:11:37.904Z","finished_at":"2018-07-13T11:20:00.618Z","duration":502.714799,"queued_duration":0.567326,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a","short_id":"55e4850e","created_at":"2018-07-13T12:41:28.000+02:00","parent_ids":["95b6a6582830ac3abd534b6a6e1098c5fbe7d210"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-07-13T12:41:28.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a"},"pipeline":{"id":25705922,"iid":2145,"project_id":6138686,"sha":"55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a","ref":"pr-6857","status":"success","source":"push","created_at":"2018-07-13T10:42:18.206Z","updated_at":"2018-07-13T12:45:31.136Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/25705922"},"web_url":"https://gitlab.com/coq/coq/-/jobs/81557996","artifacts":[{"file_type":"trace","size":24415,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":81557437,"status":"success","stage":"test","name":"ci-iris-lambda-rust","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-07-13T11:09:04.398Z","started_at":"2018-07-13T11:09:04.710Z","finished_at":"2018-07-13T12:19:41.224Z","duration":4236.513917,"queued_duration":0.25534,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a","short_id":"55e4850e","created_at":"2018-07-13T12:41:28.000+02:00","parent_ids":["95b6a6582830ac3abd534b6a6e1098c5fbe7d210"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-07-13T12:41:28.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a"},"pipeline":{"id":25705922,"iid":2145,"project_id":6138686,"sha":"55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a","ref":"pr-6857","status":"success","source":"push","created_at":"2018-07-13T10:42:18.206Z","updated_at":"2018-07-13T12:45:31.136Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/25705922"},"web_url":"https://gitlab.com/coq/coq/-/jobs/81557437","artifacts":[{"file_type":"trace","size":214095,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":81557287,"status":"success","stage":"test","name":"ci-compcert","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-07-13T11:08:10.205Z","started_at":"2018-07-13T11:08:10.969Z","finished_at":"2018-07-13T11:35:59.765Z","duration":1668.795539,"queued_duration":0.711438,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a","short_id":"55e4850e","created_at":"2018-07-13T12:41:28.000+02:00","parent_ids":["95b6a6582830ac3abd534b6a6e1098c5fbe7d210"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-07-13T12:41:28.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a"},"pipeline":{"id":25705922,"iid":2145,"project_id":6138686,"sha":"55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a","ref":"pr-6857","status":"success","source":"push","created_at":"2018-07-13T10:42:18.206Z","updated_at":"2018-07-13T12:45:31.136Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/25705922"},"web_url":"https://gitlab.com/coq/coq/-/jobs/81557287","artifacts":[{"file_type":"trace","size":1996977,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":81549044,"status":"success","stage":"test","name":"ci-vst","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-07-13T10:42:19.166Z","started_at":"2018-07-13T11:04:58.902Z","finished_at":"2018-07-13T12:19:08.847Z","duration":4449.945508,"queued_duration":22.342755,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a","short_id":"55e4850e","created_at":"2018-07-13T12:41:28.000+02:00","parent_ids":["95b6a6582830ac3abd534b6a6e1098c5fbe7d210"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-07-13T12:41:28.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a"},"pipeline":{"id":25705922,"iid":2145,"project_id":6138686,"sha":"55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a","ref":"pr-6857","status":"success","source":"push","created_at":"2018-07-13T10:42:18.206Z","updated_at":"2018-07-13T12:45:31.136Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/25705922"},"web_url":"https://gitlab.com/coq/coq/-/jobs/81549044","artifacts":[{"file_type":"trace","size":169477,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":81549043,"status":"success","stage":"test","name":"ci-unimath","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-07-13T10:42:19.141Z","started_at":"2018-07-13T11:04:57.497Z","finished_at":"2018-07-13T11:29:53.188Z","duration":1495.691692,"queued_duration":20.90675,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a","short_id":"55e4850e","created_at":"2018-07-13T12:41:28.000+02:00","parent_ids":["95b6a6582830ac3abd534b6a6e1098c5fbe7d210"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-07-13T12:41:28.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a"},"pipeline":{"id":25705922,"iid":2145,"project_id":6138686,"sha":"55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a","ref":"pr-6857","status":"success","source":"push","created_at":"2018-07-13T10:42:18.206Z","updated_at":"2018-07-13T12:45:31.136Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/25705922"},"web_url":"https://gitlab.com/coq/coq/-/jobs/81549043","artifacts":[{"file_type":"trace","size":121681,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":81549042,"status":"success","stage":"test","name":"ci-sf","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-07-13T10:42:19.116Z","started_at":"2018-07-13T11:04:57.430Z","finished_at":"2018-07-13T11:09:52.134Z","duration":294.703604,"queued_duration":20.808148,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a","short_id":"55e4850e","created_at":"2018-07-13T12:41:28.000+02:00","parent_ids":["95b6a6582830ac3abd534b6a6e1098c5fbe7d210"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-07-13T12:41:28.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a"},"pipeline":{"id":25705922,"iid":2145,"project_id":6138686,"sha":"55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a","ref":"pr-6857","status":"success","source":"push","created_at":"2018-07-13T10:42:18.206Z","updated_at":"2018-07-13T12:45:31.136Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/25705922"},"web_url":"https://gitlab.com/coq/coq/-/jobs/81549042","artifacts":[{"file_type":"trace","size":265691,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":81549041,"status":"success","stage":"test","name":"ci-quickchick","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-07-13T10:42:19.093Z","started_at":"2018-07-13T11:04:57.349Z","finished_at":"2018-07-13T11:10:12.104Z","duration":314.75549,"queued_duration":20.695061,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a","short_id":"55e4850e","created_at":"2018-07-13T12:41:28.000+02:00","parent_ids":["95b6a6582830ac3abd534b6a6e1098c5fbe7d210"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-07-13T12:41:28.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a"},"pipeline":{"id":25705922,"iid":2145,"project_id":6138686,"sha":"55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a","ref":"pr-6857","status":"success","source":"push","created_at":"2018-07-13T10:42:18.206Z","updated_at":"2018-07-13T12:45:31.136Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/25705922"},"web_url":"https://gitlab.com/coq/coq/-/jobs/81549041","artifacts":[{"file_type":"trace","size":190968,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":81549040,"status":"success","stage":"test","name":"ci-pidetop","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-07-13T10:42:19.069Z","started_at":"2018-07-13T11:04:57.238Z","finished_at":"2018-07-13T11:08:32.717Z","duration":215.479539,"queued_duration":20.5523,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a","short_id":"55e4850e","created_at":"2018-07-13T12:41:28.000+02:00","parent_ids":["95b6a6582830ac3abd534b6a6e1098c5fbe7d210"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-07-13T12:41:28.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a"},"pipeline":{"id":25705922,"iid":2145,"project_id":6138686,"sha":"55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a","ref":"pr-6857","status":"success","source":"push","created_at":"2018-07-13T10:42:18.206Z","updated_at":"2018-07-13T12:45:31.136Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/25705922"},"web_url":"https://gitlab.com/coq/coq/-/jobs/81549040","artifacts":[{"file_type":"trace","size":27903,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":81549039,"status":"success","stage":"test","name":"ci-mtac2","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-07-13T10:42:19.047Z","started_at":"2018-07-13T11:04:55.439Z","finished_at":"2018-07-13T11:08:48.838Z","duration":233.399177,"queued_duration":18.70358,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a","short_id":"55e4850e","created_at":"2018-07-13T12:41:28.000+02:00","parent_ids":["95b6a6582830ac3abd534b6a6e1098c5fbe7d210"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-07-13T12:41:28.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a"},"pipeline":{"id":25705922,"iid":2145,"project_id":6138686,"sha":"55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a","ref":"pr-6857","status":"success","source":"push","created_at":"2018-07-13T10:42:18.206Z","updated_at":"2018-07-13T12:45:31.136Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/25705922"},"web_url":"https://gitlab.com/coq/coq/-/jobs/81549039","artifacts":[{"file_type":"trace","size":85364,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":81549038,"status":"success","stage":"test","name":"ci-math-comp","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-07-13T10:42:19.026Z","started_at":"2018-07-13T11:04:54.474Z","finished_at":"2018-07-13T11:55:10.229Z","duration":3015.754749,"queued_duration":17.662019,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a","short_id":"55e4850e","created_at":"2018-07-13T12:41:28.000+02:00","parent_ids":["95b6a6582830ac3abd534b6a6e1098c5fbe7d210"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-07-13T12:41:28.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a"},"pipeline":{"id":25705922,"iid":2145,"project_id":6138686,"sha":"55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a","ref":"pr-6857","status":"success","source":"push","created_at":"2018-07-13T10:42:18.206Z","updated_at":"2018-07-13T12:45:31.136Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/25705922"},"web_url":"https://gitlab.com/coq/coq/-/jobs/81549038","artifacts":[{"file_type":"trace","size":308243,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":81549037,"status":"success","stage":"test","name":"ci-ltac2","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-07-13T10:42:19.004Z","started_at":"2018-07-13T11:04:54.399Z","finished_at":"2018-07-13T11:08:11.457Z","duration":197.058398,"queued_duration":17.496074,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a","short_id":"55e4850e","created_at":"2018-07-13T12:41:28.000+02:00","parent_ids":["95b6a6582830ac3abd534b6a6e1098c5fbe7d210"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-07-13T12:41:28.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a"},"pipeline":{"id":25705922,"iid":2145,"project_id":6138686,"sha":"55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a","ref":"pr-6857","status":"success","source":"push","created_at":"2018-07-13T10:42:18.206Z","updated_at":"2018-07-13T12:45:31.136Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/25705922"},"web_url":"https://gitlab.com/coq/coq/-/jobs/81549037","artifacts":[{"file_type":"trace","size":44662,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":81549035,"status":"success","stage":"test","name":"ci-hott","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-07-13T10:42:18.957Z","started_at":"2018-07-13T11:04:54.144Z","finished_at":"2018-07-13T11:15:47.574Z","duration":653.429117,"queued_duration":17.127189,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a","short_id":"55e4850e","created_at":"2018-07-13T12:41:28.000+02:00","parent_ids":["95b6a6582830ac3abd534b6a6e1098c5fbe7d210"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-07-13T12:41:28.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a"},"pipeline":{"id":25705922,"iid":2145,"project_id":6138686,"sha":"55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a","ref":"pr-6857","status":"success","source":"push","created_at":"2018-07-13T10:42:18.206Z","updated_at":"2018-07-13T12:45:31.136Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/25705922"},"web_url":"https://gitlab.com/coq/coq/-/jobs/81549035","artifacts":[{"file_type":"trace","size":61458,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":81549034,"status":"success","stage":"test","name":"ci-geocoq","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-07-13T10:42:18.935Z","started_at":"2018-07-13T11:04:53.509Z","finished_at":"2018-07-13T12:10:53.536Z","duration":3960.026986,"queued_duration":16.447793,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a","short_id":"55e4850e","created_at":"2018-07-13T12:41:28.000+02:00","parent_ids":["95b6a6582830ac3abd534b6a6e1098c5fbe7d210"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-07-13T12:41:28.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a"},"pipeline":{"id":25705922,"iid":2145,"project_id":6138686,"sha":"55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a","ref":"pr-6857","status":"success","source":"push","created_at":"2018-07-13T10:42:18.206Z","updated_at":"2018-07-13T12:45:31.136Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/25705922"},"web_url":"https://gitlab.com/coq/coq/-/jobs/81549034","artifacts":[{"file_type":"trace","size":265439,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":81549033,"status":"success","stage":"test","name":"ci-formal-topology","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-07-13T10:42:18.913Z","started_at":"2018-07-13T11:04:53.309Z","finished_at":"2018-07-13T11:43:59.526Z","duration":2346.216694,"queued_duration":16.218561,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a","short_id":"55e4850e","created_at":"2018-07-13T12:41:28.000+02:00","parent_ids":["95b6a6582830ac3abd534b6a6e1098c5fbe7d210"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-07-13T12:41:28.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a"},"pipeline":{"id":25705922,"iid":2145,"project_id":6138686,"sha":"55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a","ref":"pr-6857","status":"success","source":"push","created_at":"2018-07-13T10:42:18.206Z","updated_at":"2018-07-13T12:45:31.136Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/25705922"},"web_url":"https://gitlab.com/coq/coq/-/jobs/81549033","artifacts":[{"file_type":"trace","size":558286,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":81549032,"status":"success","stage":"test","name":"ci-flocq","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-07-13T10:42:18.892Z","started_at":"2018-07-13T11:04:52.871Z","finished_at":"2018-07-13T11:13:25.156Z","duration":512.285332,"queued_duration":15.732254,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a","short_id":"55e4850e","created_at":"2018-07-13T12:41:28.000+02:00","parent_ids":["95b6a6582830ac3abd534b6a6e1098c5fbe7d210"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-07-13T12:41:28.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a"},"pipeline":{"id":25705922,"iid":2145,"project_id":6138686,"sha":"55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a","ref":"pr-6857","status":"success","source":"push","created_at":"2018-07-13T10:42:18.206Z","updated_at":"2018-07-13T12:45:31.136Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/25705922"},"web_url":"https://gitlab.com/coq/coq/-/jobs/81549032","artifacts":[{"file_type":"trace","size":651746,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":81549031,"status":"success","stage":"test","name":"ci-fiat-parsers","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-07-13T10:42:18.871Z","started_at":"2018-07-13T11:04:49.483Z","finished_at":"2018-07-13T11:24:00.347Z","duration":1150.864483,"queued_duration":12.28798,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a","short_id":"55e4850e","created_at":"2018-07-13T12:41:28.000+02:00","parent_ids":["95b6a6582830ac3abd534b6a6e1098c5fbe7d210"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-07-13T12:41:28.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a"},"pipeline":{"id":25705922,"iid":2145,"project_id":6138686,"sha":"55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a","ref":"pr-6857","status":"success","source":"push","created_at":"2018-07-13T10:42:18.206Z","updated_at":"2018-07-13T12:45:31.136Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/25705922"},"web_url":"https://gitlab.com/coq/coq/-/jobs/81549031","artifacts":[{"file_type":"trace","size":233893,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":81549030,"status":"success","stage":"test","name":"ci-fiat-crypto","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-07-13T10:42:18.849Z","started_at":"2018-07-13T11:04:49.152Z","finished_at":"2018-07-13T12:39:06.035Z","duration":5656.882721,"queued_duration":11.887388,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a","short_id":"55e4850e","created_at":"2018-07-13T12:41:28.000+02:00","parent_ids":["95b6a6582830ac3abd534b6a6e1098c5fbe7d210"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-07-13T12:41:28.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a"},"pipeline":{"id":25705922,"iid":2145,"project_id":6138686,"sha":"55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a","ref":"pr-6857","status":"success","source":"push","created_at":"2018-07-13T10:42:18.206Z","updated_at":"2018-07-13T12:45:31.136Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/25705922"},"web_url":"https://gitlab.com/coq/coq/-/jobs/81549030","artifacts":[{"file_type":"trace","size":1388608,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":81549029,"status":"success","stage":"test","name":"ci-fcsl-pcm","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-07-13T10:42:18.830Z","started_at":"2018-07-13T11:04:48.780Z","finished_at":"2018-07-13T11:09:41.915Z","duration":293.134964,"queued_duration":11.396636,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a","short_id":"55e4850e","created_at":"2018-07-13T12:41:28.000+02:00","parent_ids":["95b6a6582830ac3abd534b6a6e1098c5fbe7d210"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-07-13T12:41:28.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a"},"pipeline":{"id":25705922,"iid":2145,"project_id":6138686,"sha":"55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a","ref":"pr-6857","status":"success","source":"push","created_at":"2018-07-13T10:42:18.206Z","updated_at":"2018-07-13T12:45:31.136Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/25705922"},"web_url":"https://gitlab.com/coq/coq/-/jobs/81549029","artifacts":[{"file_type":"trace","size":88638,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":81549028,"status":"success","stage":"test","name":"ci-equations","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-07-13T10:42:18.808Z","started_at":"2018-07-13T11:04:48.054Z","finished_at":"2018-07-13T11:11:55.625Z","duration":427.570914,"queued_duration":10.620268,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a","short_id":"55e4850e","created_at":"2018-07-13T12:41:28.000+02:00","parent_ids":["95b6a6582830ac3abd534b6a6e1098c5fbe7d210"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-07-13T12:41:28.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a"},"pipeline":{"id":25705922,"iid":2145,"project_id":6138686,"sha":"55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a","ref":"pr-6857","status":"success","source":"push","created_at":"2018-07-13T10:42:18.206Z","updated_at":"2018-07-13T12:45:31.136Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/25705922"},"web_url":"https://gitlab.com/coq/coq/-/jobs/81549028","artifacts":[{"file_type":"trace","size":61605,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":81549026,"status":"success","stage":"test","name":"ci-cross-crypto","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-07-13T10:42:18.770Z","started_at":"2018-07-13T11:04:44.600Z","finished_at":"2018-07-13T11:43:14.945Z","duration":2310.344773,"queued_duration":7.070587,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a","short_id":"55e4850e","created_at":"2018-07-13T12:41:28.000+02:00","parent_ids":["95b6a6582830ac3abd534b6a6e1098c5fbe7d210"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-07-13T12:41:28.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a"},"pipeline":{"id":25705922,"iid":2145,"project_id":6138686,"sha":"55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a","ref":"pr-6857","status":"success","source":"push","created_at":"2018-07-13T10:42:18.206Z","updated_at":"2018-07-13T12:45:31.136Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/25705922"},"web_url":"https://gitlab.com/coq/coq/-/jobs/81549026","artifacts":[{"file_type":"trace","size":72486,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":81549025,"status":"success","stage":"test","name":"ci-coquelicot","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-07-13T10:42:18.744Z","started_at":"2018-07-13T11:04:44.045Z","finished_at":"2018-07-13T11:11:05.306Z","duration":381.261126,"queued_duration":6.449462,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a","short_id":"55e4850e","created_at":"2018-07-13T12:41:28.000+02:00","parent_ids":["95b6a6582830ac3abd534b6a6e1098c5fbe7d210"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-07-13T12:41:28.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a"},"pipeline":{"id":25705922,"iid":2145,"project_id":6138686,"sha":"55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a","ref":"pr-6857","status":"success","source":"push","created_at":"2018-07-13T10:42:18.206Z","updated_at":"2018-07-13T12:45:31.136Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/25705922"},"web_url":"https://gitlab.com/coq/coq/-/jobs/81549025","artifacts":[{"file_type":"trace","size":91892,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":81549024,"status":"success","stage":"test","name":"ci-coq-dpdgraph","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-07-13T10:42:18.723Z","started_at":"2018-07-13T11:04:43.905Z","finished_at":"2018-07-13T11:08:10.355Z","duration":206.450263,"queued_duration":6.204121,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a","short_id":"55e4850e","created_at":"2018-07-13T12:41:28.000+02:00","parent_ids":["95b6a6582830ac3abd534b6a6e1098c5fbe7d210"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-07-13T12:41:28.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a"},"pipeline":{"id":25705922,"iid":2145,"project_id":6138686,"sha":"55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a","ref":"pr-6857","status":"success","source":"push","created_at":"2018-07-13T10:42:18.206Z","updated_at":"2018-07-13T12:45:31.136Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/25705922"},"web_url":"https://gitlab.com/coq/coq/-/jobs/81549024","artifacts":[{"file_type":"trace","size":37584,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":81549022,"status":"success","stage":"test","name":"ci-color","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-07-13T10:42:18.683Z","started_at":"2018-07-13T11:04:43.290Z","finished_at":"2018-07-13T11:25:34.861Z","duration":1251.571682,"queued_duration":5.345374,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a","short_id":"55e4850e","created_at":"2018-07-13T12:41:28.000+02:00","parent_ids":["95b6a6582830ac3abd534b6a6e1098c5fbe7d210"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-07-13T12:41:28.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a"},"pipeline":{"id":25705922,"iid":2145,"project_id":6138686,"sha":"55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a","ref":"pr-6857","status":"success","source":"push","created_at":"2018-07-13T10:42:18.206Z","updated_at":"2018-07-13T12:45:31.136Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/25705922"},"web_url":"https://gitlab.com/coq/coq/-/jobs/81549022","artifacts":[{"file_type":"trace","size":180518,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":81549021,"status":"success","stage":"test","name":"ci-bignums","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-07-13T10:42:18.663Z","started_at":"2018-07-13T11:04:42.919Z","finished_at":"2018-07-13T11:09:41.865Z","duration":298.94582,"queued_duration":4.858376,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a","short_id":"55e4850e","created_at":"2018-07-13T12:41:28.000+02:00","parent_ids":["95b6a6582830ac3abd534b6a6e1098c5fbe7d210"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-07-13T12:41:28.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a"},"pipeline":{"id":25705922,"iid":2145,"project_id":6138686,"sha":"55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a","ref":"pr-6857","status":"success","source":"push","created_at":"2018-07-13T10:42:18.206Z","updated_at":"2018-07-13T12:45:31.136Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/25705922"},"web_url":"https://gitlab.com/coq/coq/-/jobs/81549021","artifacts":[{"file_type":"trace","size":39523,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":81549020,"status":"success","stage":"test","name":"ci-bedrock2","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-07-13T10:42:18.642Z","started_at":"2018-07-13T11:04:39.032Z","finished_at":"2018-07-13T11:25:25.222Z","duration":1246.189572,"queued_duration":0.821095,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a","short_id":"55e4850e","created_at":"2018-07-13T12:41:28.000+02:00","parent_ids":["95b6a6582830ac3abd534b6a6e1098c5fbe7d210"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-07-13T12:41:28.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a"},"pipeline":{"id":25705922,"iid":2145,"project_id":6138686,"sha":"55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a","ref":"pr-6857","status":"success","source":"push","created_at":"2018-07-13T10:42:18.206Z","updated_at":"2018-07-13T12:45:31.136Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/25705922"},"web_url":"https://gitlab.com/coq/coq/-/jobs/81549020","artifacts":[{"file_type":"trace","size":222971,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":81549019,"status":"success","stage":"test","name":"validate:edge+flambda","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-07-13T10:42:18.619Z","started_at":"2018-07-13T11:04:38.914Z","finished_at":"2018-07-13T11:24:08.647Z","duration":1169.732669,"queued_duration":0.535788,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a","short_id":"55e4850e","created_at":"2018-07-13T12:41:28.000+02:00","parent_ids":["95b6a6582830ac3abd534b6a6e1098c5fbe7d210"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-07-13T12:41:28.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a"},"pipeline":{"id":25705922,"iid":2145,"project_id":6138686,"sha":"55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a","ref":"pr-6857","status":"success","source":"push","created_at":"2018-07-13T10:42:18.206Z","updated_at":"2018-07-13T12:45:31.136Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/25705922"},"web_url":"https://gitlab.com/coq/coq/-/jobs/81549019","artifacts":[{"file_type":"trace","size":25509,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":81549017,"status":"success","stage":"test","name":"validate:base+32bit","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-07-13T10:42:18.566Z","started_at":"2018-07-13T11:04:42.843Z","finished_at":"2018-07-13T11:12:42.930Z","duration":480.086972,"queued_duration":3.866371,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a","short_id":"55e4850e","created_at":"2018-07-13T12:41:28.000+02:00","parent_ids":["95b6a6582830ac3abd534b6a6e1098c5fbe7d210"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-07-13T12:41:28.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a"},"pipeline":{"id":25705922,"iid":2145,"project_id":6138686,"sha":"55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a","ref":"pr-6857","status":"success","source":"push","created_at":"2018-07-13T10:42:18.206Z","updated_at":"2018-07-13T12:45:31.136Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/25705922"},"web_url":"https://gitlab.com/coq/coq/-/jobs/81549017","artifacts":[{"file_type":"trace","size":24350,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":81549016,"status":"success","stage":"test","name":"validate:base","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-07-13T10:42:18.545Z","started_at":"2018-07-13T11:04:39.349Z","finished_at":"2018-07-13T11:13:12.692Z","duration":513.343289,"queued_duration":0.164687,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a","short_id":"55e4850e","created_at":"2018-07-13T12:41:28.000+02:00","parent_ids":["95b6a6582830ac3abd534b6a6e1098c5fbe7d210"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-07-13T12:41:28.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a"},"pipeline":{"id":25705922,"iid":2145,"project_id":6138686,"sha":"55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a","ref":"pr-6857","status":"success","source":"push","created_at":"2018-07-13T10:42:18.206Z","updated_at":"2018-07-13T12:45:31.136Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/25705922"},"web_url":"https://gitlab.com/coq/coq/-/jobs/81549016","artifacts":[{"file_type":"trace","size":25389,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":81549015,"status":"success","stage":"test","name":"test-suite:edge+flambda","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-07-13T10:42:18.524Z","started_at":"2018-07-13T11:04:42.374Z","finished_at":"2018-07-13T11:15:54.386Z","duration":672.012358,"queued_duration":3.10581,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a","short_id":"55e4850e","created_at":"2018-07-13T12:41:28.000+02:00","parent_ids":["95b6a6582830ac3abd534b6a6e1098c5fbe7d210"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-07-13T12:41:28.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a"},"pipeline":{"id":25705922,"iid":2145,"project_id":6138686,"sha":"55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a","ref":"pr-6857","status":"success","source":"push","created_at":"2018-07-13T10:42:18.206Z","updated_at":"2018-07-13T12:45:31.136Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/25705922"},"web_url":"https://gitlab.com/coq/coq/-/jobs/81549015","artifacts":[{"file_type":"trace","size":70867,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":81549014,"status":"success","stage":"test","name":"test-suite:edge","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-07-13T10:42:18.501Z","started_at":"2018-07-13T11:04:42.230Z","finished_at":"2018-07-13T11:16:31.114Z","duration":708.883459,"queued_duration":2.840538,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a","short_id":"55e4850e","created_at":"2018-07-13T12:41:28.000+02:00","parent_ids":["95b6a6582830ac3abd534b6a6e1098c5fbe7d210"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-07-13T12:41:28.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a"},"pipeline":{"id":25705922,"iid":2145,"project_id":6138686,"sha":"55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a","ref":"pr-6857","status":"success","source":"push","created_at":"2018-07-13T10:42:18.206Z","updated_at":"2018-07-13T12:45:31.136Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/25705922"},"web_url":"https://gitlab.com/coq/coq/-/jobs/81549014","artifacts":[{"file_type":"trace","size":67938,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":81549013,"status":"success","stage":"test","name":"test-suite:base+32bit","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-07-13T10:42:18.480Z","started_at":"2018-07-13T11:04:41.391Z","finished_at":"2018-07-13T11:15:31.687Z","duration":650.296803,"queued_duration":1.922823,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a","short_id":"55e4850e","created_at":"2018-07-13T12:41:28.000+02:00","parent_ids":["95b6a6582830ac3abd534b6a6e1098c5fbe7d210"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-07-13T12:41:28.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a"},"pipeline":{"id":25705922,"iid":2145,"project_id":6138686,"sha":"55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a","ref":"pr-6857","status":"success","source":"push","created_at":"2018-07-13T10:42:18.206Z","updated_at":"2018-07-13T12:45:31.136Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/25705922"},"web_url":"https://gitlab.com/coq/coq/-/jobs/81549013","artifacts":[{"file_type":"trace","size":67999,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":81549012,"status":"success","stage":"test","name":"test-suite:base","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-07-13T10:42:18.459Z","started_at":"2018-07-13T11:04:40.929Z","finished_at":"2018-07-13T11:15:45.395Z","duration":664.465929,"queued_duration":1.351372,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a","short_id":"55e4850e","created_at":"2018-07-13T12:41:28.000+02:00","parent_ids":["95b6a6582830ac3abd534b6a6e1098c5fbe7d210"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-07-13T12:41:28.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a"},"pipeline":{"id":25705922,"iid":2145,"project_id":6138686,"sha":"55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a","ref":"pr-6857","status":"success","source":"push","created_at":"2018-07-13T10:42:18.206Z","updated_at":"2018-07-13T12:45:31.136Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/25705922"},"web_url":"https://gitlab.com/coq/coq/-/jobs/81549012","artifacts":[{"file_type":"trace","size":68912,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":81549011,"status":"success","stage":"test","name":"documentation","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-07-13T10:42:18.434Z","started_at":"2018-07-13T11:04:40.772Z","finished_at":"2018-07-13T11:10:05.876Z","duration":325.103746,"queued_duration":1.101662,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a","short_id":"55e4850e","created_at":"2018-07-13T12:41:28.000+02:00","parent_ids":["95b6a6582830ac3abd534b6a6e1098c5fbe7d210"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-07-13T12:41:28.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a"},"pipeline":{"id":25705922,"iid":2145,"project_id":6138686,"sha":"55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a","ref":"pr-6857","status":"success","source":"push","created_at":"2018-07-13T10:42:18.206Z","updated_at":"2018-07-13T12:45:31.136Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/25705922"},"web_url":"https://gitlab.com/coq/coq/-/jobs/81549011","artifacts":[{"file_type":"trace","size":31751,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":81549010,"status":"success","stage":"test","name":"pkg:nix","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-07-13T10:42:18.411Z","started_at":"2018-07-13T11:04:40.285Z","finished_at":"2018-07-13T11:34:49.627Z","duration":1809.34265,"queued_duration":0.476997,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a","short_id":"55e4850e","created_at":"2018-07-13T12:41:28.000+02:00","parent_ids":["95b6a6582830ac3abd534b6a6e1098c5fbe7d210"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-07-13T12:41:28.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a"},"pipeline":{"id":25705922,"iid":2145,"project_id":6138686,"sha":"55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a","ref":"pr-6857","status":"success","source":"push","created_at":"2018-07-13T10:42:18.206Z","updated_at":"2018-07-13T12:45:31.136Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/25705922"},"web_url":"https://gitlab.com/coq/coq/-/jobs/81549010","artifacts":[{"file_type":"trace","size":466170,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":81549009,"status":"success","stage":"test","name":"windows32","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-07-13T10:42:18.381Z","started_at":"2018-07-13T11:17:08.241Z","finished_at":"2018-07-13T12:45:31.028Z","duration":5302.787087,"queued_duration":748.202871,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a","short_id":"55e4850e","created_at":"2018-07-13T12:41:28.000+02:00","parent_ids":["95b6a6582830ac3abd534b6a6e1098c5fbe7d210"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-07-13T12:41:28.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a"},"pipeline":{"id":25705922,"iid":2145,"project_id":6138686,"sha":"55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a","ref":"pr-6857","status":"success","source":"push","created_at":"2018-07-13T10:42:18.206Z","updated_at":"2018-07-13T12:45:31.136Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/25705922"},"web_url":"https://gitlab.com/coq/coq/-/jobs/81549009","artifacts":[{"file_type":"trace","size":3873259,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":"2018-07-20T12:45:02.020Z","tag_list":["windows"]}
{"id":81549008,"status":"success","stage":"test","name":"windows64","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-07-13T10:42:18.350Z","started_at":"2018-07-13T11:14:52.916Z","finished_at":"2018-07-13T12:39:13.152Z","duration":5060.236282,"queued_duration":612.693038,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a","short_id":"55e4850e","created_at":"2018-07-13T12:41:28.000+02:00","parent_ids":["95b6a6582830ac3abd534b6a6e1098c5fbe7d210"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-07-13T12:41:28.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a"},"pipeline":{"id":25705922,"iid":2145,"project_id":6138686,"sha":"55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a","ref":"pr-6857","status":"success","source":"push","created_at":"2018-07-13T10:42:18.206Z","updated_at":"2018-07-13T12:45:31.136Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/25705922"},"web_url":"https://gitlab.com/coq/coq/-/jobs/81549008","artifacts":[{"file_type":"trace","size":3891921,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":"2018-07-20T12:38:43.962Z","tag_list":["windows"]}
{"id":81549007,"status":"success","stage":"build","name":"build:egde:dune","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-07-13T10:42:18.317Z","started_at":"2018-07-13T10:42:20.708Z","finished_at":"2018-07-13T10:57:24.834Z","duration":904.126025,"queued_duration":1.372235,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a","short_id":"55e4850e","created_at":"2018-07-13T12:41:28.000+02:00","parent_ids":["95b6a6582830ac3abd534b6a6e1098c5fbe7d210"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-07-13T12:41:28.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a"},"pipeline":{"id":25705922,"iid":2145,"project_id":6138686,"sha":"55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a","ref":"pr-6857","status":"success","source":"push","created_at":"2018-07-13T10:42:18.206Z","updated_at":"2018-07-13T12:45:31.136Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/25705922"},"web_url":"https://gitlab.com/coq/coq/-/jobs/81549007","artifacts":[{"file_type":"trace","size":23301,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2018-07-20T10:57:23.595Z","tag_list":[]}
{"id":81549006,"status":"success","stage":"build","name":"build:edge+flambda","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-07-13T10:42:18.294Z","started_at":"2018-07-13T10:42:20.426Z","finished_at":"2018-07-13T11:04:36.446Z","duration":1336.019793,"queued_duration":1.052343,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a","short_id":"55e4850e","created_at":"2018-07-13T12:41:28.000+02:00","parent_ids":["95b6a6582830ac3abd534b6a6e1098c5fbe7d210"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-07-13T12:41:28.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a"},"pipeline":{"id":25705922,"iid":2145,"project_id":6138686,"sha":"55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a","ref":"pr-6857","status":"success","source":"push","created_at":"2018-07-13T10:42:18.206Z","updated_at":"2018-07-13T12:45:31.136Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/25705922"},"web_url":"https://gitlab.com/coq/coq/-/jobs/81549006","artifacts":[{"file_type":"trace","size":181812,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2018-07-20T11:04:29.532Z","tag_list":[]}
{"id":81549004,"status":"success","stage":"build","name":"build:edge","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-07-13T10:42:18.271Z","started_at":"2018-07-13T10:42:20.311Z","finished_at":"2018-07-13T11:00:14.090Z","duration":1073.779766,"queued_duration":0.908622,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a","short_id":"55e4850e","created_at":"2018-07-13T12:41:28.000+02:00","parent_ids":["95b6a6582830ac3abd534b6a6e1098c5fbe7d210"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-07-13T12:41:28.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a"},"pipeline":{"id":25705922,"iid":2145,"project_id":6138686,"sha":"55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a","ref":"pr-6857","status":"success","source":"push","created_at":"2018-07-13T10:42:18.206Z","updated_at":"2018-07-13T12:45:31.136Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/25705922"},"web_url":"https://gitlab.com/coq/coq/-/jobs/81549004","artifacts":[{"file_type":"trace","size":236836,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2018-07-20T11:00:13.104Z","tag_list":[]}
{"id":81549003,"status":"success","stage":"build","name":"build:base+32bit","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-07-13T10:42:18.247Z","started_at":"2018-07-13T10:42:20.208Z","finished_at":"2018-07-13T10:58:16.908Z","duration":956.699946,"queued_duration":0.774222,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a","short_id":"55e4850e","created_at":"2018-07-13T12:41:28.000+02:00","parent_ids":["95b6a6582830ac3abd534b6a6e1098c5fbe7d210"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-07-13T12:41:28.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a"},"pipeline":{"id":25705922,"iid":2145,"project_id":6138686,"sha":"55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a","ref":"pr-6857","status":"success","source":"push","created_at":"2018-07-13T10:42:18.206Z","updated_at":"2018-07-13T12:45:31.136Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/25705922"},"web_url":"https://gitlab.com/coq/coq/-/jobs/81549003","artifacts":[{"file_type":"trace","size":232686,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2018-07-20T10:58:13.931Z","tag_list":[]}
{"id":81549002,"status":"success","stage":"build","name":"build:base","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-07-13T10:42:18.218Z","started_at":"2018-07-13T10:42:19.714Z","finished_at":"2018-07-13T10:57:58.194Z","duration":938.479596,"queued_duration":0.251086,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a","short_id":"55e4850e","created_at":"2018-07-13T12:41:28.000+02:00","parent_ids":["95b6a6582830ac3abd534b6a6e1098c5fbe7d210"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\n$ make -f Makefile.dune world\n```\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`dune` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `dune` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\nIt avoids breaking modularization.\n\nIn the path to become the standard build system for the OCaml ecosystem.\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n- `make -f Makefile.dune JBOPTS=\"-j 500\" states`\n\n> real\t0m20,586s\n> user\t0m42,354s\n> sys\t0m10,697s\n\n- `./configure -local -native-compiler no && make -j states`:\n\n> real\t0m18,290s\n> user\t0m54,673s\n> sys\t0m10,282s\n\n- 4857\n\n- better search path / coqfind\n- Check that `Drop.` works.\n- Check coqide + workers both in byte and opt\n\nImplement jbuilder / silent mode.\nSplit Coq_config in Coq_base_config == needed subset for jbuilder.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-05-24T03:52:06.000+02:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-07-13T12:41:28.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a"},"pipeline":{"id":25705922,"iid":2145,"project_id":6138686,"sha":"55e4850edf6c5cbe19b2b6af1441ed9c7ae1270a","ref":"pr-6857","status":"success","source":"push","created_at":"2018-07-13T10:42:18.206Z","updated_at":"2018-07-13T12:45:31.136Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/25705922"},"web_url":"https://gitlab.com/coq/coq/-/jobs/81549002","artifacts":[{"file_type":"trace","size":284000,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2018-07-20T10:57:56.417Z","tag_list":[]}
