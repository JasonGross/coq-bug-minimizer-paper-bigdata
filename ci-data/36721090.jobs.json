{"id":120967845,"status":"success","stage":"test","name":"ci-vst","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-15T12:53:43.519Z","started_at":"2018-11-15T13:18:10.071Z","finished_at":"2018-11-15T14:16:31.561Z","duration":3501.490569,"queued_duration":10.213404,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"33c7f488027efc3c199554e2a3cfccb07e1e69af","short_id":"33c7f488","created_at":"2018-11-15T13:53:08.000+01:00","parent_ids":["b6f65c72cce697d7acc11f731983a8c18f497d10"],"title":"ssr: extended intro patterns","message":"ssr: extended intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-11-15T13:53:08.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/33c7f488027efc3c199554e2a3cfccb07e1e69af"},"pipeline":{"id":36721090,"iid":5276,"project_id":6138686,"sha":"33c7f488027efc3c199554e2a3cfccb07e1e69af","ref":"pr-6705","status":"success","source":"push","created_at":"2018-11-15T12:53:41.404Z","updated_at":"2018-11-15T14:22:16.929Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36721090"},"web_url":"https://gitlab.com/coq/coq/-/jobs/120967845","artifacts":[{"file_type":"trace","size":225039,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":120967843,"status":"success","stage":"test","name":"ci-unimath","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-15T12:53:43.480Z","started_at":"2018-11-15T13:18:09.714Z","finished_at":"2018-11-15T13:41:38.014Z","duration":1408.300346,"queued_duration":9.672205,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"33c7f488027efc3c199554e2a3cfccb07e1e69af","short_id":"33c7f488","created_at":"2018-11-15T13:53:08.000+01:00","parent_ids":["b6f65c72cce697d7acc11f731983a8c18f497d10"],"title":"ssr: extended intro patterns","message":"ssr: extended intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-11-15T13:53:08.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/33c7f488027efc3c199554e2a3cfccb07e1e69af"},"pipeline":{"id":36721090,"iid":5276,"project_id":6138686,"sha":"33c7f488027efc3c199554e2a3cfccb07e1e69af","ref":"pr-6705","status":"success","source":"push","created_at":"2018-11-15T12:53:41.404Z","updated_at":"2018-11-15T14:22:16.929Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36721090"},"web_url":"https://gitlab.com/coq/coq/-/jobs/120967843","artifacts":[{"file_type":"trace","size":164688,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":120967840,"status":"success","stage":"test","name":"ci-sf","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-15T12:53:43.431Z","started_at":"2018-11-15T13:18:08.916Z","finished_at":"2018-11-15T13:22:49.865Z","duration":280.948498,"queued_duration":8.731313,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"33c7f488027efc3c199554e2a3cfccb07e1e69af","short_id":"33c7f488","created_at":"2018-11-15T13:53:08.000+01:00","parent_ids":["b6f65c72cce697d7acc11f731983a8c18f497d10"],"title":"ssr: extended intro patterns","message":"ssr: extended intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-11-15T13:53:08.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/33c7f488027efc3c199554e2a3cfccb07e1e69af"},"pipeline":{"id":36721090,"iid":5276,"project_id":6138686,"sha":"33c7f488027efc3c199554e2a3cfccb07e1e69af","ref":"pr-6705","status":"success","source":"push","created_at":"2018-11-15T12:53:41.404Z","updated_at":"2018-11-15T14:22:16.929Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36721090"},"web_url":"https://gitlab.com/coq/coq/-/jobs/120967840","artifacts":[{"file_type":"trace","size":272333,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":120967836,"status":"success","stage":"test","name":"ci-quickchick","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-15T12:53:43.387Z","started_at":"2018-11-15T13:18:08.688Z","finished_at":"2018-11-15T13:23:23.644Z","duration":314.955926,"queued_duration":8.432595,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"33c7f488027efc3c199554e2a3cfccb07e1e69af","short_id":"33c7f488","created_at":"2018-11-15T13:53:08.000+01:00","parent_ids":["b6f65c72cce697d7acc11f731983a8c18f497d10"],"title":"ssr: extended intro patterns","message":"ssr: extended intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-11-15T13:53:08.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/33c7f488027efc3c199554e2a3cfccb07e1e69af"},"pipeline":{"id":36721090,"iid":5276,"project_id":6138686,"sha":"33c7f488027efc3c199554e2a3cfccb07e1e69af","ref":"pr-6705","status":"success","source":"push","created_at":"2018-11-15T12:53:41.404Z","updated_at":"2018-11-15T14:22:16.929Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36721090"},"web_url":"https://gitlab.com/coq/coq/-/jobs/120967836","artifacts":[{"file_type":"trace","size":272397,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":120967833,"status":"success","stage":"test","name":"ci-plugin-tutorial","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-15T12:53:43.330Z","started_at":"2018-11-15T13:18:08.505Z","finished_at":"2018-11-15T13:21:36.470Z","duration":207.965662,"queued_duration":8.19777,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"33c7f488027efc3c199554e2a3cfccb07e1e69af","short_id":"33c7f488","created_at":"2018-11-15T13:53:08.000+01:00","parent_ids":["b6f65c72cce697d7acc11f731983a8c18f497d10"],"title":"ssr: extended intro patterns","message":"ssr: extended intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-11-15T13:53:08.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/33c7f488027efc3c199554e2a3cfccb07e1e69af"},"pipeline":{"id":36721090,"iid":5276,"project_id":6138686,"sha":"33c7f488027efc3c199554e2a3cfccb07e1e69af","ref":"pr-6705","status":"success","source":"push","created_at":"2018-11-15T12:53:41.404Z","updated_at":"2018-11-15T14:22:16.929Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36721090"},"web_url":"https://gitlab.com/coq/coq/-/jobs/120967833","artifacts":[{"file_type":"trace","size":38060,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":120967832,"status":"success","stage":"test","name":"ci-pidetop","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-15T12:53:43.293Z","started_at":"2018-11-15T13:18:08.448Z","finished_at":"2018-11-15T13:21:04.384Z","duration":175.936431,"queued_duration":8.090349,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"33c7f488027efc3c199554e2a3cfccb07e1e69af","short_id":"33c7f488","created_at":"2018-11-15T13:53:08.000+01:00","parent_ids":["b6f65c72cce697d7acc11f731983a8c18f497d10"],"title":"ssr: extended intro patterns","message":"ssr: extended intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-11-15T13:53:08.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/33c7f488027efc3c199554e2a3cfccb07e1e69af"},"pipeline":{"id":36721090,"iid":5276,"project_id":6138686,"sha":"33c7f488027efc3c199554e2a3cfccb07e1e69af","ref":"pr-6705","status":"success","source":"push","created_at":"2018-11-15T12:53:41.404Z","updated_at":"2018-11-15T14:22:16.929Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36721090"},"web_url":"https://gitlab.com/coq/coq/-/jobs/120967832","artifacts":[{"file_type":"trace","size":31271,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":120967830,"status":"success","stage":"test","name":"ci-paramcoq","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-15T12:53:43.229Z","started_at":"2018-11-15T13:18:08.387Z","finished_at":"2018-11-15T13:21:05.024Z","duration":176.637207,"queued_duration":7.980798,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"33c7f488027efc3c199554e2a3cfccb07e1e69af","short_id":"33c7f488","created_at":"2018-11-15T13:53:08.000+01:00","parent_ids":["b6f65c72cce697d7acc11f731983a8c18f497d10"],"title":"ssr: extended intro patterns","message":"ssr: extended intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-11-15T13:53:08.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/33c7f488027efc3c199554e2a3cfccb07e1e69af"},"pipeline":{"id":36721090,"iid":5276,"project_id":6138686,"sha":"33c7f488027efc3c199554e2a3cfccb07e1e69af","ref":"pr-6705","status":"success","source":"push","created_at":"2018-11-15T12:53:41.404Z","updated_at":"2018-11-15T14:22:16.929Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36721090"},"web_url":"https://gitlab.com/coq/coq/-/jobs/120967830","artifacts":[{"file_type":"trace","size":32218,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":120967829,"status":"success","stage":"test","name":"ci-mtac2","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-15T12:53:43.181Z","started_at":"2018-11-15T13:18:08.157Z","finished_at":"2018-11-15T13:21:06.900Z","duration":178.743406,"queued_duration":7.681417,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"33c7f488027efc3c199554e2a3cfccb07e1e69af","short_id":"33c7f488","created_at":"2018-11-15T13:53:08.000+01:00","parent_ids":["b6f65c72cce697d7acc11f731983a8c18f497d10"],"title":"ssr: extended intro patterns","message":"ssr: extended intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-11-15T13:53:08.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/33c7f488027efc3c199554e2a3cfccb07e1e69af"},"pipeline":{"id":36721090,"iid":5276,"project_id":6138686,"sha":"33c7f488027efc3c199554e2a3cfccb07e1e69af","ref":"pr-6705","status":"success","source":"push","created_at":"2018-11-15T12:53:41.404Z","updated_at":"2018-11-15T14:22:16.929Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36721090"},"web_url":"https://gitlab.com/coq/coq/-/jobs/120967829","artifacts":[{"file_type":"trace","size":174832,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":120967828,"status":"success","stage":"test","name":"ci-math-comp","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-15T12:53:43.144Z","started_at":"2018-11-15T13:18:07.329Z","finished_at":"2018-11-15T13:58:27.619Z","duration":2420.289808,"queued_duration":6.80146,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"33c7f488027efc3c199554e2a3cfccb07e1e69af","short_id":"33c7f488","created_at":"2018-11-15T13:53:08.000+01:00","parent_ids":["b6f65c72cce697d7acc11f731983a8c18f497d10"],"title":"ssr: extended intro patterns","message":"ssr: extended intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-11-15T13:53:08.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/33c7f488027efc3c199554e2a3cfccb07e1e69af"},"pipeline":{"id":36721090,"iid":5276,"project_id":6138686,"sha":"33c7f488027efc3c199554e2a3cfccb07e1e69af","ref":"pr-6705","status":"success","source":"push","created_at":"2018-11-15T12:53:41.404Z","updated_at":"2018-11-15T14:22:16.929Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36721090"},"web_url":"https://gitlab.com/coq/coq/-/jobs/120967828","artifacts":[{"file_type":"trace","size":364678,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":120967827,"status":"success","stage":"test","name":"ci-ltac2","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-15T12:53:43.098Z","started_at":"2018-11-15T13:18:01.954Z","finished_at":"2018-11-15T13:20:45.941Z","duration":163.986977,"queued_duration":1.380572,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"33c7f488027efc3c199554e2a3cfccb07e1e69af","short_id":"33c7f488","created_at":"2018-11-15T13:53:08.000+01:00","parent_ids":["b6f65c72cce697d7acc11f731983a8c18f497d10"],"title":"ssr: extended intro patterns","message":"ssr: extended intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-11-15T13:53:08.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/33c7f488027efc3c199554e2a3cfccb07e1e69af"},"pipeline":{"id":36721090,"iid":5276,"project_id":6138686,"sha":"33c7f488027efc3c199554e2a3cfccb07e1e69af","ref":"pr-6705","status":"success","source":"push","created_at":"2018-11-15T12:53:41.404Z","updated_at":"2018-11-15T14:22:16.929Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36721090"},"web_url":"https://gitlab.com/coq/coq/-/jobs/120967827","artifacts":[{"file_type":"trace","size":42561,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":120967826,"status":"success","stage":"test","name":"ci-iris-lambda-rust","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-15T12:53:43.064Z","started_at":"2018-11-15T13:18:01.523Z","finished_at":"2018-11-15T14:12:54.347Z","duration":3292.823627,"queued_duration":0.896272,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"33c7f488027efc3c199554e2a3cfccb07e1e69af","short_id":"33c7f488","created_at":"2018-11-15T13:53:08.000+01:00","parent_ids":["b6f65c72cce697d7acc11f731983a8c18f497d10"],"title":"ssr: extended intro patterns","message":"ssr: extended intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-11-15T13:53:08.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/33c7f488027efc3c199554e2a3cfccb07e1e69af"},"pipeline":{"id":36721090,"iid":5276,"project_id":6138686,"sha":"33c7f488027efc3c199554e2a3cfccb07e1e69af","ref":"pr-6705","status":"success","source":"push","created_at":"2018-11-15T12:53:41.404Z","updated_at":"2018-11-15T14:22:16.929Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36721090"},"web_url":"https://gitlab.com/coq/coq/-/jobs/120967826","artifacts":[{"file_type":"trace","size":294550,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":120967824,"status":"success","stage":"test","name":"ci-hott","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-15T12:53:43.029Z","started_at":"2018-11-15T13:18:00.765Z","finished_at":"2018-11-15T13:29:36.226Z","duration":695.461497,"queued_duration":0.077984,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"33c7f488027efc3c199554e2a3cfccb07e1e69af","short_id":"33c7f488","created_at":"2018-11-15T13:53:08.000+01:00","parent_ids":["b6f65c72cce697d7acc11f731983a8c18f497d10"],"title":"ssr: extended intro patterns","message":"ssr: extended intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-11-15T13:53:08.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/33c7f488027efc3c199554e2a3cfccb07e1e69af"},"pipeline":{"id":36721090,"iid":5276,"project_id":6138686,"sha":"33c7f488027efc3c199554e2a3cfccb07e1e69af","ref":"pr-6705","status":"success","source":"push","created_at":"2018-11-15T12:53:41.404Z","updated_at":"2018-11-15T14:22:16.929Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36721090"},"web_url":"https://gitlab.com/coq/coq/-/jobs/120967824","artifacts":[{"file_type":"trace","size":128582,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":120967823,"status":"success","stage":"test","name":"ci-coqhammer","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-15T12:53:42.981Z","started_at":"2018-11-15T13:18:01.473Z","finished_at":"2018-11-15T13:21:21.629Z","duration":200.156153,"queued_duration":0.728461,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"33c7f488027efc3c199554e2a3cfccb07e1e69af","short_id":"33c7f488","created_at":"2018-11-15T13:53:08.000+01:00","parent_ids":["b6f65c72cce697d7acc11f731983a8c18f497d10"],"title":"ssr: extended intro patterns","message":"ssr: extended intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-11-15T13:53:08.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/33c7f488027efc3c199554e2a3cfccb07e1e69af"},"pipeline":{"id":36721090,"iid":5276,"project_id":6138686,"sha":"33c7f488027efc3c199554e2a3cfccb07e1e69af","ref":"pr-6705","status":"success","source":"push","created_at":"2018-11-15T12:53:41.404Z","updated_at":"2018-11-15T14:22:16.929Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36721090"},"web_url":"https://gitlab.com/coq/coq/-/jobs/120967823","artifacts":[{"file_type":"trace","size":36361,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":120967822,"status":"success","stage":"test","name":"ci-geocoq","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-15T12:53:42.943Z","started_at":"2018-11-15T13:18:01.153Z","finished_at":"2018-11-15T13:55:27.452Z","duration":2246.29916,"queued_duration":0.35281,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"33c7f488027efc3c199554e2a3cfccb07e1e69af","short_id":"33c7f488","created_at":"2018-11-15T13:53:08.000+01:00","parent_ids":["b6f65c72cce697d7acc11f731983a8c18f497d10"],"title":"ssr: extended intro patterns","message":"ssr: extended intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-11-15T13:53:08.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/33c7f488027efc3c199554e2a3cfccb07e1e69af"},"pipeline":{"id":36721090,"iid":5276,"project_id":6138686,"sha":"33c7f488027efc3c199554e2a3cfccb07e1e69af","ref":"pr-6705","status":"success","source":"push","created_at":"2018-11-15T12:53:41.404Z","updated_at":"2018-11-15T14:22:16.929Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36721090"},"web_url":"https://gitlab.com/coq/coq/-/jobs/120967822","artifacts":[{"file_type":"trace","size":371814,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":120967821,"status":"success","stage":"test","name":"ci-formal-topology","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-15T12:53:42.905Z","started_at":"2018-11-15T13:18:01.902Z","finished_at":"2018-11-15T13:57:44.097Z","duration":2382.194911,"queued_duration":0.770824,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"33c7f488027efc3c199554e2a3cfccb07e1e69af","short_id":"33c7f488","created_at":"2018-11-15T13:53:08.000+01:00","parent_ids":["b6f65c72cce697d7acc11f731983a8c18f497d10"],"title":"ssr: extended intro patterns","message":"ssr: extended intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-11-15T13:53:08.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/33c7f488027efc3c199554e2a3cfccb07e1e69af"},"pipeline":{"id":36721090,"iid":5276,"project_id":6138686,"sha":"33c7f488027efc3c199554e2a3cfccb07e1e69af","ref":"pr-6705","status":"success","source":"push","created_at":"2018-11-15T12:53:41.404Z","updated_at":"2018-11-15T14:22:16.929Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36721090"},"web_url":"https://gitlab.com/coq/coq/-/jobs/120967821","artifacts":[{"file_type":"trace","size":585838,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":120967820,"status":"success","stage":"test","name":"ci-flocq","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-15T12:53:42.867Z","started_at":"2018-11-15T13:18:01.855Z","finished_at":"2018-11-15T13:32:11.221Z","duration":849.366385,"queued_duration":0.355672,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"33c7f488027efc3c199554e2a3cfccb07e1e69af","short_id":"33c7f488","created_at":"2018-11-15T13:53:08.000+01:00","parent_ids":["b6f65c72cce697d7acc11f731983a8c18f497d10"],"title":"ssr: extended intro patterns","message":"ssr: extended intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-11-15T13:53:08.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/33c7f488027efc3c199554e2a3cfccb07e1e69af"},"pipeline":{"id":36721090,"iid":5276,"project_id":6138686,"sha":"33c7f488027efc3c199554e2a3cfccb07e1e69af","ref":"pr-6705","status":"success","source":"push","created_at":"2018-11-15T12:53:41.404Z","updated_at":"2018-11-15T14:22:16.929Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36721090"},"web_url":"https://gitlab.com/coq/coq/-/jobs/120967820","artifacts":[{"file_type":"trace","size":36212,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":120967819,"status":"success","stage":"test","name":"ci-fiat-parsers","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-15T12:53:42.830Z","started_at":"2018-11-15T13:18:07.272Z","finished_at":"2018-11-15T13:38:03.214Z","duration":1195.942442,"queued_duration":5.494932,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"33c7f488027efc3c199554e2a3cfccb07e1e69af","short_id":"33c7f488","created_at":"2018-11-15T13:53:08.000+01:00","parent_ids":["b6f65c72cce697d7acc11f731983a8c18f497d10"],"title":"ssr: extended intro patterns","message":"ssr: extended intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-11-15T13:53:08.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/33c7f488027efc3c199554e2a3cfccb07e1e69af"},"pipeline":{"id":36721090,"iid":5276,"project_id":6138686,"sha":"33c7f488027efc3c199554e2a3cfccb07e1e69af","ref":"pr-6705","status":"success","source":"push","created_at":"2018-11-15T12:53:41.404Z","updated_at":"2018-11-15T14:22:16.929Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36721090"},"web_url":"https://gitlab.com/coq/coq/-/jobs/120967819","artifacts":[{"file_type":"trace","size":240741,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":120967818,"status":"success","stage":"test","name":"ci-fiat-crypto-legacy","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-15T12:53:42.796Z","started_at":"2018-11-15T13:18:07.220Z","finished_at":"2018-11-15T14:22:16.792Z","duration":3849.571603,"queued_duration":5.3323,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"33c7f488027efc3c199554e2a3cfccb07e1e69af","short_id":"33c7f488","created_at":"2018-11-15T13:53:08.000+01:00","parent_ids":["b6f65c72cce697d7acc11f731983a8c18f497d10"],"title":"ssr: extended intro patterns","message":"ssr: extended intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-11-15T13:53:08.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/33c7f488027efc3c199554e2a3cfccb07e1e69af"},"pipeline":{"id":36721090,"iid":5276,"project_id":6138686,"sha":"33c7f488027efc3c199554e2a3cfccb07e1e69af","ref":"pr-6705","status":"success","source":"push","created_at":"2018-11-15T12:53:41.404Z","updated_at":"2018-11-15T14:22:16.929Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36721090"},"web_url":"https://gitlab.com/coq/coq/-/jobs/120967818","artifacts":[{"file_type":"trace","size":664262,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":120967817,"status":"success","stage":"test","name":"ci-fiat-crypto","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-15T12:53:42.761Z","started_at":"2018-11-15T13:18:02.227Z","finished_at":"2018-11-15T14:10:11.897Z","duration":3129.66991,"queued_duration":0.294683,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"33c7f488027efc3c199554e2a3cfccb07e1e69af","short_id":"33c7f488","created_at":"2018-11-15T13:53:08.000+01:00","parent_ids":["b6f65c72cce697d7acc11f731983a8c18f497d10"],"title":"ssr: extended intro patterns","message":"ssr: extended intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-11-15T13:53:08.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/33c7f488027efc3c199554e2a3cfccb07e1e69af"},"pipeline":{"id":36721090,"iid":5276,"project_id":6138686,"sha":"33c7f488027efc3c199554e2a3cfccb07e1e69af","ref":"pr-6705","status":"success","source":"push","created_at":"2018-11-15T12:53:41.404Z","updated_at":"2018-11-15T14:22:16.929Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36721090"},"web_url":"https://gitlab.com/coq/coq/-/jobs/120967817","artifacts":[{"file_type":"trace","size":906942,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":120967816,"status":"success","stage":"test","name":"ci-fcsl-pcm","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-15T12:53:42.726Z","started_at":"2018-11-15T13:18:04.731Z","finished_at":"2018-11-15T13:22:43.173Z","duration":278.442167,"queued_duration":2.640431,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"33c7f488027efc3c199554e2a3cfccb07e1e69af","short_id":"33c7f488","created_at":"2018-11-15T13:53:08.000+01:00","parent_ids":["b6f65c72cce697d7acc11f731983a8c18f497d10"],"title":"ssr: extended intro patterns","message":"ssr: extended intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-11-15T13:53:08.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/33c7f488027efc3c199554e2a3cfccb07e1e69af"},"pipeline":{"id":36721090,"iid":5276,"project_id":6138686,"sha":"33c7f488027efc3c199554e2a3cfccb07e1e69af","ref":"pr-6705","status":"success","source":"push","created_at":"2018-11-15T12:53:41.404Z","updated_at":"2018-11-15T14:22:16.929Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36721090"},"web_url":"https://gitlab.com/coq/coq/-/jobs/120967816","artifacts":[{"file_type":"trace","size":134128,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":120967815,"status":"success","stage":"test","name":"ci-equations","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-15T12:53:42.693Z","started_at":"2018-11-15T13:18:04.677Z","finished_at":"2018-11-15T13:24:57.574Z","duration":412.896837,"queued_duration":2.526434,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"33c7f488027efc3c199554e2a3cfccb07e1e69af","short_id":"33c7f488","created_at":"2018-11-15T13:53:08.000+01:00","parent_ids":["b6f65c72cce697d7acc11f731983a8c18f497d10"],"title":"ssr: extended intro patterns","message":"ssr: extended intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-11-15T13:53:08.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/33c7f488027efc3c199554e2a3cfccb07e1e69af"},"pipeline":{"id":36721090,"iid":5276,"project_id":6138686,"sha":"33c7f488027efc3c199554e2a3cfccb07e1e69af","ref":"pr-6705","status":"success","source":"push","created_at":"2018-11-15T12:53:41.404Z","updated_at":"2018-11-15T14:22:16.929Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36721090"},"web_url":"https://gitlab.com/coq/coq/-/jobs/120967815","artifacts":[{"file_type":"trace","size":68820,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":120967814,"status":"success","stage":"test","name":"ci-elpi","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-15T12:53:42.659Z","started_at":"2018-11-15T13:18:04.539Z","finished_at":"2018-11-15T13:22:07.243Z","duration":242.703677,"queued_duration":2.345793,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"33c7f488027efc3c199554e2a3cfccb07e1e69af","short_id":"33c7f488","created_at":"2018-11-15T13:53:08.000+01:00","parent_ids":["b6f65c72cce697d7acc11f731983a8c18f497d10"],"title":"ssr: extended intro patterns","message":"ssr: extended intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-11-15T13:53:08.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/33c7f488027efc3c199554e2a3cfccb07e1e69af"},"pipeline":{"id":36721090,"iid":5276,"project_id":6138686,"sha":"33c7f488027efc3c199554e2a3cfccb07e1e69af","ref":"pr-6705","status":"success","source":"push","created_at":"2018-11-15T12:53:41.404Z","updated_at":"2018-11-15T14:22:16.929Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36721090"},"web_url":"https://gitlab.com/coq/coq/-/jobs/120967814","artifacts":[{"file_type":"trace","size":417893,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":120967813,"status":"success","stage":"test","name":"ci-cross-crypto","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-15T12:53:42.621Z","started_at":"2018-11-15T13:18:04.487Z","finished_at":"2018-11-15T13:56:24.753Z","duration":2300.266225,"queued_duration":2.222729,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"33c7f488027efc3c199554e2a3cfccb07e1e69af","short_id":"33c7f488","created_at":"2018-11-15T13:53:08.000+01:00","parent_ids":["b6f65c72cce697d7acc11f731983a8c18f497d10"],"title":"ssr: extended intro patterns","message":"ssr: extended intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-11-15T13:53:08.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/33c7f488027efc3c199554e2a3cfccb07e1e69af"},"pipeline":{"id":36721090,"iid":5276,"project_id":6138686,"sha":"33c7f488027efc3c199554e2a3cfccb07e1e69af","ref":"pr-6705","status":"success","source":"push","created_at":"2018-11-15T12:53:41.404Z","updated_at":"2018-11-15T14:22:16.929Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36721090"},"web_url":"https://gitlab.com/coq/coq/-/jobs/120967813","artifacts":[{"file_type":"trace","size":45765,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":120967812,"status":"success","stage":"test","name":"ci-coquelicot","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-15T12:53:42.578Z","started_at":"2018-11-15T13:18:04.438Z","finished_at":"2018-11-15T13:23:45.244Z","duration":340.805427,"queued_duration":2.095385,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"33c7f488027efc3c199554e2a3cfccb07e1e69af","short_id":"33c7f488","created_at":"2018-11-15T13:53:08.000+01:00","parent_ids":["b6f65c72cce697d7acc11f731983a8c18f497d10"],"title":"ssr: extended intro patterns","message":"ssr: extended intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-11-15T13:53:08.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/33c7f488027efc3c199554e2a3cfccb07e1e69af"},"pipeline":{"id":36721090,"iid":5276,"project_id":6138686,"sha":"33c7f488027efc3c199554e2a3cfccb07e1e69af","ref":"pr-6705","status":"success","source":"push","created_at":"2018-11-15T12:53:41.404Z","updated_at":"2018-11-15T14:22:16.929Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36721090"},"web_url":"https://gitlab.com/coq/coq/-/jobs/120967812","artifacts":[{"file_type":"trace","size":136710,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":120967810,"status":"success","stage":"test","name":"ci-coq-dpdgraph","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-15T12:53:42.536Z","started_at":"2018-11-15T13:18:04.389Z","finished_at":"2018-11-15T13:21:17.905Z","duration":193.515491,"queued_duration":1.932553,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"33c7f488027efc3c199554e2a3cfccb07e1e69af","short_id":"33c7f488","created_at":"2018-11-15T13:53:08.000+01:00","parent_ids":["b6f65c72cce697d7acc11f731983a8c18f497d10"],"title":"ssr: extended intro patterns","message":"ssr: extended intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-11-15T13:53:08.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/33c7f488027efc3c199554e2a3cfccb07e1e69af"},"pipeline":{"id":36721090,"iid":5276,"project_id":6138686,"sha":"33c7f488027efc3c199554e2a3cfccb07e1e69af","ref":"pr-6705","status":"success","source":"push","created_at":"2018-11-15T12:53:41.404Z","updated_at":"2018-11-15T14:22:16.929Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36721090"},"web_url":"https://gitlab.com/coq/coq/-/jobs/120967810","artifacts":[{"file_type":"trace","size":42991,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":120967809,"status":"success","stage":"test","name":"ci-compcert","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-15T12:53:42.495Z","started_at":"2018-11-15T13:18:04.296Z","finished_at":"2018-11-15T13:41:46.933Z","duration":1422.636453,"queued_duration":1.777894,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"33c7f488027efc3c199554e2a3cfccb07e1e69af","short_id":"33c7f488","created_at":"2018-11-15T13:53:08.000+01:00","parent_ids":["b6f65c72cce697d7acc11f731983a8c18f497d10"],"title":"ssr: extended intro patterns","message":"ssr: extended intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-11-15T13:53:08.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/33c7f488027efc3c199554e2a3cfccb07e1e69af"},"pipeline":{"id":36721090,"iid":5276,"project_id":6138686,"sha":"33c7f488027efc3c199554e2a3cfccb07e1e69af","ref":"pr-6705","status":"success","source":"push","created_at":"2018-11-15T12:53:41.404Z","updated_at":"2018-11-15T14:22:16.929Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36721090"},"web_url":"https://gitlab.com/coq/coq/-/jobs/120967809","artifacts":[{"file_type":"trace","size":2103790,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":120967808,"status":"success","stage":"test","name":"ci-color","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-15T12:53:42.462Z","started_at":"2018-11-15T13:18:03.136Z","finished_at":"2018-11-15T13:38:20.794Z","duration":1217.658213,"queued_duration":0.538631,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"33c7f488027efc3c199554e2a3cfccb07e1e69af","short_id":"33c7f488","created_at":"2018-11-15T13:53:08.000+01:00","parent_ids":["b6f65c72cce697d7acc11f731983a8c18f497d10"],"title":"ssr: extended intro patterns","message":"ssr: extended intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-11-15T13:53:08.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/33c7f488027efc3c199554e2a3cfccb07e1e69af"},"pipeline":{"id":36721090,"iid":5276,"project_id":6138686,"sha":"33c7f488027efc3c199554e2a3cfccb07e1e69af","ref":"pr-6705","status":"success","source":"push","created_at":"2018-11-15T12:53:41.404Z","updated_at":"2018-11-15T14:22:16.929Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36721090"},"web_url":"https://gitlab.com/coq/coq/-/jobs/120967808","artifacts":[{"file_type":"trace","size":233400,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":120967807,"status":"success","stage":"test","name":"ci-bignums","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-15T12:53:42.424Z","started_at":"2018-11-15T13:18:03.074Z","finished_at":"2018-11-15T13:22:39.605Z","duration":276.531283,"queued_duration":0.357637,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"33c7f488027efc3c199554e2a3cfccb07e1e69af","short_id":"33c7f488","created_at":"2018-11-15T13:53:08.000+01:00","parent_ids":["b6f65c72cce697d7acc11f731983a8c18f497d10"],"title":"ssr: extended intro patterns","message":"ssr: extended intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-11-15T13:53:08.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/33c7f488027efc3c199554e2a3cfccb07e1e69af"},"pipeline":{"id":36721090,"iid":5276,"project_id":6138686,"sha":"33c7f488027efc3c199554e2a3cfccb07e1e69af","ref":"pr-6705","status":"success","source":"push","created_at":"2018-11-15T12:53:41.404Z","updated_at":"2018-11-15T14:22:16.929Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36721090"},"web_url":"https://gitlab.com/coq/coq/-/jobs/120967807","artifacts":[{"file_type":"trace","size":56346,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":120967806,"status":"failed","stage":"test","name":"ci-bedrock2","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":true,"created_at":"2018-11-15T12:53:42.373Z","started_at":"2018-11-15T13:18:04.246Z","finished_at":"2018-11-15T13:34:33.749Z","duration":989.503456,"queued_duration":1.345346,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"33c7f488027efc3c199554e2a3cfccb07e1e69af","short_id":"33c7f488","created_at":"2018-11-15T13:53:08.000+01:00","parent_ids":["b6f65c72cce697d7acc11f731983a8c18f497d10"],"title":"ssr: extended intro patterns","message":"ssr: extended intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-11-15T13:53:08.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/33c7f488027efc3c199554e2a3cfccb07e1e69af"},"pipeline":{"id":36721090,"iid":5276,"project_id":6138686,"sha":"33c7f488027efc3c199554e2a3cfccb07e1e69af","ref":"pr-6705","status":"success","source":"push","created_at":"2018-11-15T12:53:41.404Z","updated_at":"2018-11-15T14:22:16.929Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36721090"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/120967806","artifacts":[{"file_type":"trace","size":44836,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":120967805,"status":"success","stage":"test","name":"ci-aac-tactics","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-15T12:53:42.314Z","started_at":"2018-11-15T13:18:04.051Z","finished_at":"2018-11-15T13:21:38.589Z","duration":214.537802,"queued_duration":1.092508,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"33c7f488027efc3c199554e2a3cfccb07e1e69af","short_id":"33c7f488","created_at":"2018-11-15T13:53:08.000+01:00","parent_ids":["b6f65c72cce697d7acc11f731983a8c18f497d10"],"title":"ssr: extended intro patterns","message":"ssr: extended intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-11-15T13:53:08.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/33c7f488027efc3c199554e2a3cfccb07e1e69af"},"pipeline":{"id":36721090,"iid":5276,"project_id":6138686,"sha":"33c7f488027efc3c199554e2a3cfccb07e1e69af","ref":"pr-6705","status":"success","source":"push","created_at":"2018-11-15T12:53:41.404Z","updated_at":"2018-11-15T14:22:16.929Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36721090"},"web_url":"https://gitlab.com/coq/coq/-/jobs/120967805","artifacts":[{"file_type":"trace","size":53784,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":120967804,"status":"success","stage":"test","name":"validate:edge+flambda","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-15T12:53:42.263Z","started_at":"2018-11-15T13:18:03.864Z","finished_at":"2018-11-15T13:22:15.419Z","duration":251.555424,"queued_duration":0.84184,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"33c7f488027efc3c199554e2a3cfccb07e1e69af","short_id":"33c7f488","created_at":"2018-11-15T13:53:08.000+01:00","parent_ids":["b6f65c72cce697d7acc11f731983a8c18f497d10"],"title":"ssr: extended intro patterns","message":"ssr: extended intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-11-15T13:53:08.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/33c7f488027efc3c199554e2a3cfccb07e1e69af"},"pipeline":{"id":36721090,"iid":5276,"project_id":6138686,"sha":"33c7f488027efc3c199554e2a3cfccb07e1e69af","ref":"pr-6705","status":"success","source":"push","created_at":"2018-11-15T12:53:41.404Z","updated_at":"2018-11-15T14:22:16.929Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36721090"},"web_url":"https://gitlab.com/coq/coq/-/jobs/120967804","artifacts":[{"file_type":"trace","size":21899,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":120967803,"status":"success","stage":"test","name":"validate:edge","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-15T12:53:42.211Z","started_at":"2018-11-15T13:18:03.686Z","finished_at":"2018-11-15T13:22:35.525Z","duration":271.838355,"queued_duration":0.617676,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"33c7f488027efc3c199554e2a3cfccb07e1e69af","short_id":"33c7f488","created_at":"2018-11-15T13:53:08.000+01:00","parent_ids":["b6f65c72cce697d7acc11f731983a8c18f497d10"],"title":"ssr: extended intro patterns","message":"ssr: extended intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-11-15T13:53:08.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/33c7f488027efc3c199554e2a3cfccb07e1e69af"},"pipeline":{"id":36721090,"iid":5276,"project_id":6138686,"sha":"33c7f488027efc3c199554e2a3cfccb07e1e69af","ref":"pr-6705","status":"success","source":"push","created_at":"2018-11-15T12:53:41.404Z","updated_at":"2018-11-15T14:22:16.929Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36721090"},"web_url":"https://gitlab.com/coq/coq/-/jobs/120967803","artifacts":[{"file_type":"trace","size":20951,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":120967802,"status":"success","stage":"test","name":"validate:base+32bit","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-15T12:53:42.159Z","started_at":"2018-11-15T13:18:03.310Z","finished_at":"2018-11-15T13:21:51.776Z","duration":228.466742,"queued_duration":0.191296,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"33c7f488027efc3c199554e2a3cfccb07e1e69af","short_id":"33c7f488","created_at":"2018-11-15T13:53:08.000+01:00","parent_ids":["b6f65c72cce697d7acc11f731983a8c18f497d10"],"title":"ssr: extended intro patterns","message":"ssr: extended intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-11-15T13:53:08.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/33c7f488027efc3c199554e2a3cfccb07e1e69af"},"pipeline":{"id":36721090,"iid":5276,"project_id":6138686,"sha":"33c7f488027efc3c199554e2a3cfccb07e1e69af","ref":"pr-6705","status":"success","source":"push","created_at":"2018-11-15T12:53:41.404Z","updated_at":"2018-11-15T14:22:16.929Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36721090"},"web_url":"https://gitlab.com/coq/coq/-/jobs/120967802","artifacts":[{"file_type":"trace","size":20171,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":120967801,"status":"success","stage":"test","name":"validate:base","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-15T12:53:42.113Z","started_at":"2018-11-15T13:18:03.634Z","finished_at":"2018-11-15T13:22:04.846Z","duration":241.211814,"queued_duration":0.456761,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"33c7f488027efc3c199554e2a3cfccb07e1e69af","short_id":"33c7f488","created_at":"2018-11-15T13:53:08.000+01:00","parent_ids":["b6f65c72cce697d7acc11f731983a8c18f497d10"],"title":"ssr: extended intro patterns","message":"ssr: extended intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-11-15T13:53:08.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/33c7f488027efc3c199554e2a3cfccb07e1e69af"},"pipeline":{"id":36721090,"iid":5276,"project_id":6138686,"sha":"33c7f488027efc3c199554e2a3cfccb07e1e69af","ref":"pr-6705","status":"success","source":"push","created_at":"2018-11-15T12:53:41.404Z","updated_at":"2018-11-15T14:22:16.929Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36721090"},"web_url":"https://gitlab.com/coq/coq/-/jobs/120967801","artifacts":[{"file_type":"trace","size":21152,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":120967800,"status":"success","stage":"test","name":"test-suite:egde:dune:dev","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-15T12:53:42.047Z","started_at":"2018-11-15T13:18:03.585Z","finished_at":"2018-11-15T13:38:44.427Z","duration":1240.841573,"queued_duration":0.3433,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"33c7f488027efc3c199554e2a3cfccb07e1e69af","short_id":"33c7f488","created_at":"2018-11-15T13:53:08.000+01:00","parent_ids":["b6f65c72cce697d7acc11f731983a8c18f497d10"],"title":"ssr: extended intro patterns","message":"ssr: extended intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-11-15T13:53:08.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/33c7f488027efc3c199554e2a3cfccb07e1e69af"},"pipeline":{"id":36721090,"iid":5276,"project_id":6138686,"sha":"33c7f488027efc3c199554e2a3cfccb07e1e69af","ref":"pr-6705","status":"success","source":"push","created_at":"2018-11-15T12:53:41.404Z","updated_at":"2018-11-15T14:22:16.929Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36721090"},"web_url":"https://gitlab.com/coq/coq/-/jobs/120967800","artifacts":[{"file_type":"trace","size":70491,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":120967799,"status":"success","stage":"test","name":"test-suite:edge+flambda","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-15T12:53:42.001Z","started_at":"2018-11-15T13:18:03.519Z","finished_at":"2018-11-15T13:28:57.954Z","duration":654.4352,"queued_duration":0.209538,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"33c7f488027efc3c199554e2a3cfccb07e1e69af","short_id":"33c7f488","created_at":"2018-11-15T13:53:08.000+01:00","parent_ids":["b6f65c72cce697d7acc11f731983a8c18f497d10"],"title":"ssr: extended intro patterns","message":"ssr: extended intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-11-15T13:53:08.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/33c7f488027efc3c199554e2a3cfccb07e1e69af"},"pipeline":{"id":36721090,"iid":5276,"project_id":6138686,"sha":"33c7f488027efc3c199554e2a3cfccb07e1e69af","ref":"pr-6705","status":"success","source":"push","created_at":"2018-11-15T12:53:41.404Z","updated_at":"2018-11-15T14:22:16.929Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36721090"},"web_url":"https://gitlab.com/coq/coq/-/jobs/120967799","artifacts":[{"file_type":"trace","size":71550,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":120967798,"status":"success","stage":"test","name":"test-suite:edge","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-15T12:53:41.967Z","started_at":"2018-11-15T13:18:03.710Z","finished_at":"2018-11-15T13:27:21.592Z","duration":557.882171,"queued_duration":0.289955,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"33c7f488027efc3c199554e2a3cfccb07e1e69af","short_id":"33c7f488","created_at":"2018-11-15T13:53:08.000+01:00","parent_ids":["b6f65c72cce697d7acc11f731983a8c18f497d10"],"title":"ssr: extended intro patterns","message":"ssr: extended intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-11-15T13:53:08.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/33c7f488027efc3c199554e2a3cfccb07e1e69af"},"pipeline":{"id":36721090,"iid":5276,"project_id":6138686,"sha":"33c7f488027efc3c199554e2a3cfccb07e1e69af","ref":"pr-6705","status":"success","source":"push","created_at":"2018-11-15T12:53:41.404Z","updated_at":"2018-11-15T14:22:16.929Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36721090"},"web_url":"https://gitlab.com/coq/coq/-/jobs/120967798","artifacts":[{"file_type":"trace","size":70602,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":120967796,"status":"success","stage":"test","name":"test-suite:base+32bit","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-15T12:53:41.919Z","started_at":"2018-11-15T13:18:04.342Z","finished_at":"2018-11-15T13:26:14.168Z","duration":489.826626,"queued_duration":0.54295,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"33c7f488027efc3c199554e2a3cfccb07e1e69af","short_id":"33c7f488","created_at":"2018-11-15T13:53:08.000+01:00","parent_ids":["b6f65c72cce697d7acc11f731983a8c18f497d10"],"title":"ssr: extended intro patterns","message":"ssr: extended intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-11-15T13:53:08.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/33c7f488027efc3c199554e2a3cfccb07e1e69af"},"pipeline":{"id":36721090,"iid":5276,"project_id":6138686,"sha":"33c7f488027efc3c199554e2a3cfccb07e1e69af","ref":"pr-6705","status":"success","source":"push","created_at":"2018-11-15T12:53:41.404Z","updated_at":"2018-11-15T14:22:16.929Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36721090"},"web_url":"https://gitlab.com/coq/coq/-/jobs/120967796","artifacts":[{"file_type":"trace","size":99604,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":120967795,"status":"success","stage":"test","name":"test-suite:base","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-15T12:53:41.868Z","started_at":"2018-11-15T13:18:07.119Z","finished_at":"2018-11-15T13:28:20.227Z","duration":613.107232,"queued_duration":2.74993,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"33c7f488027efc3c199554e2a3cfccb07e1e69af","short_id":"33c7f488","created_at":"2018-11-15T13:53:08.000+01:00","parent_ids":["b6f65c72cce697d7acc11f731983a8c18f497d10"],"title":"ssr: extended intro patterns","message":"ssr: extended intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-11-15T13:53:08.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/33c7f488027efc3c199554e2a3cfccb07e1e69af"},"pipeline":{"id":36721090,"iid":5276,"project_id":6138686,"sha":"33c7f488027efc3c199554e2a3cfccb07e1e69af","ref":"pr-6705","status":"success","source":"push","created_at":"2018-11-15T12:53:41.404Z","updated_at":"2018-11-15T14:22:16.929Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36721090"},"web_url":"https://gitlab.com/coq/coq/-/jobs/120967795","artifacts":[{"file_type":"trace","size":70929,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":120967794,"status":"success","stage":"test","name":"doc:ml-api:odoc","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-15T12:53:41.819Z","started_at":"2018-11-15T13:18:04.839Z","finished_at":"2018-11-15T13:21:28.513Z","duration":203.673397,"queued_duration":0.278308,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"33c7f488027efc3c199554e2a3cfccb07e1e69af","short_id":"33c7f488","created_at":"2018-11-15T13:53:08.000+01:00","parent_ids":["b6f65c72cce697d7acc11f731983a8c18f497d10"],"title":"ssr: extended intro patterns","message":"ssr: extended intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-11-15T13:53:08.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/33c7f488027efc3c199554e2a3cfccb07e1e69af"},"pipeline":{"id":36721090,"iid":5276,"project_id":6138686,"sha":"33c7f488027efc3c199554e2a3cfccb07e1e69af","ref":"pr-6705","status":"success","source":"push","created_at":"2018-11-15T12:53:41.404Z","updated_at":"2018-11-15T14:22:16.929Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36721090"},"web_url":"https://gitlab.com/coq/coq/-/jobs/120967794","artifacts":[{"file_type":"trace","size":93427,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":120967793,"status":"success","stage":"test","name":"doc:refman","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-15T12:53:41.780Z","started_at":"2018-11-15T13:18:07.060Z","finished_at":"2018-11-15T13:24:38.510Z","duration":391.449582,"queued_duration":2.345235,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"33c7f488027efc3c199554e2a3cfccb07e1e69af","short_id":"33c7f488","created_at":"2018-11-15T13:53:08.000+01:00","parent_ids":["b6f65c72cce697d7acc11f731983a8c18f497d10"],"title":"ssr: extended intro patterns","message":"ssr: extended intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-11-15T13:53:08.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/33c7f488027efc3c199554e2a3cfccb07e1e69af"},"pipeline":{"id":36721090,"iid":5276,"project_id":6138686,"sha":"33c7f488027efc3c199554e2a3cfccb07e1e69af","ref":"pr-6705","status":"success","source":"push","created_at":"2018-11-15T12:53:41.404Z","updated_at":"2018-11-15T14:22:16.929Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36721090"},"web_url":"https://gitlab.com/coq/coq/-/jobs/120967793","artifacts":[{"file_type":"trace","size":956902,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":120967792,"status":"success","stage":"test","name":"pkg:nix","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-15T12:53:41.733Z","started_at":"2018-11-15T13:18:05.573Z","finished_at":"2018-11-15T13:47:36.934Z","duration":1771.360718,"queued_duration":0.688318,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"33c7f488027efc3c199554e2a3cfccb07e1e69af","short_id":"33c7f488","created_at":"2018-11-15T13:53:08.000+01:00","parent_ids":["b6f65c72cce697d7acc11f731983a8c18f497d10"],"title":"ssr: extended intro patterns","message":"ssr: extended intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-11-15T13:53:08.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/33c7f488027efc3c199554e2a3cfccb07e1e69af"},"pipeline":{"id":36721090,"iid":5276,"project_id":6138686,"sha":"33c7f488027efc3c199554e2a3cfccb07e1e69af","ref":"pr-6705","status":"success","source":"push","created_at":"2018-11-15T12:53:41.404Z","updated_at":"2018-11-15T14:22:16.929Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36721090"},"web_url":"https://gitlab.com/coq/coq/-/jobs/120967792","artifacts":[{"file_type":"trace","size":657070,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":120967791,"status":"success","stage":"test","name":"pkg:opam","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-15T12:53:41.693Z","started_at":"2018-11-15T13:18:05.491Z","finished_at":"2018-11-15T13:31:22.701Z","duration":797.210092,"queued_duration":0.501125,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"33c7f488027efc3c199554e2a3cfccb07e1e69af","short_id":"33c7f488","created_at":"2018-11-15T13:53:08.000+01:00","parent_ids":["b6f65c72cce697d7acc11f731983a8c18f497d10"],"title":"ssr: extended intro patterns","message":"ssr: extended intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-11-15T13:53:08.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/33c7f488027efc3c199554e2a3cfccb07e1e69af"},"pipeline":{"id":36721090,"iid":5276,"project_id":6138686,"sha":"33c7f488027efc3c199554e2a3cfccb07e1e69af","ref":"pr-6705","status":"success","source":"push","created_at":"2018-11-15T12:53:41.404Z","updated_at":"2018-11-15T14:22:16.929Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36721090"},"web_url":"https://gitlab.com/coq/coq/-/jobs/120967791","artifacts":[{"file_type":"trace","size":19499,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":120967790,"status":"success","stage":"test","name":"windows64","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-15T12:53:41.640Z","started_at":"2018-11-15T13:18:05.412Z","finished_at":"2018-11-15T14:10:17.807Z","duration":3132.394682,"queued_duration":0.326542,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"33c7f488027efc3c199554e2a3cfccb07e1e69af","short_id":"33c7f488","created_at":"2018-11-15T13:53:08.000+01:00","parent_ids":["b6f65c72cce697d7acc11f731983a8c18f497d10"],"title":"ssr: extended intro patterns","message":"ssr: extended intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-11-15T13:53:08.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/33c7f488027efc3c199554e2a3cfccb07e1e69af"},"pipeline":{"id":36721090,"iid":5276,"project_id":6138686,"sha":"33c7f488027efc3c199554e2a3cfccb07e1e69af","ref":"pr-6705","status":"success","source":"push","created_at":"2018-11-15T12:53:41.404Z","updated_at":"2018-11-15T14:22:16.929Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36721090"},"web_url":"https://gitlab.com/coq/coq/-/jobs/120967790","artifacts":[{"file_type":"trace","size":374960,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":"2018-11-22T14:10:10.100Z","tag_list":["windows"]}
{"id":120967789,"status":"success","stage":"build","name":"build:egde:dune:dev","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-15T12:53:41.579Z","started_at":"2018-11-15T12:53:45.394Z","finished_at":"2018-11-15T13:09:42.260Z","duration":956.865746,"queued_duration":1.470222,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"33c7f488027efc3c199554e2a3cfccb07e1e69af","short_id":"33c7f488","created_at":"2018-11-15T13:53:08.000+01:00","parent_ids":["b6f65c72cce697d7acc11f731983a8c18f497d10"],"title":"ssr: extended intro patterns","message":"ssr: extended intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-11-15T13:53:08.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/33c7f488027efc3c199554e2a3cfccb07e1e69af"},"pipeline":{"id":36721090,"iid":5276,"project_id":6138686,"sha":"33c7f488027efc3c199554e2a3cfccb07e1e69af","ref":"pr-6705","status":"success","source":"push","created_at":"2018-11-15T12:53:41.404Z","updated_at":"2018-11-15T14:22:16.929Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36721090"},"web_url":"https://gitlab.com/coq/coq/-/jobs/120967789","artifacts":[{"file_type":"trace","size":18231,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2018-11-22T13:09:35.773Z","tag_list":[]}
{"id":120967788,"status":"success","stage":"build","name":"build:edge+flambda","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-15T12:53:41.539Z","started_at":"2018-11-15T12:53:45.283Z","finished_at":"2018-11-15T13:17:59.518Z","duration":1454.23531,"queued_duration":1.315771,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"33c7f488027efc3c199554e2a3cfccb07e1e69af","short_id":"33c7f488","created_at":"2018-11-15T13:53:08.000+01:00","parent_ids":["b6f65c72cce697d7acc11f731983a8c18f497d10"],"title":"ssr: extended intro patterns","message":"ssr: extended intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-11-15T13:53:08.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/33c7f488027efc3c199554e2a3cfccb07e1e69af"},"pipeline":{"id":36721090,"iid":5276,"project_id":6138686,"sha":"33c7f488027efc3c199554e2a3cfccb07e1e69af","ref":"pr-6705","status":"success","source":"push","created_at":"2018-11-15T12:53:41.404Z","updated_at":"2018-11-15T14:22:16.929Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36721090"},"web_url":"https://gitlab.com/coq/coq/-/jobs/120967788","artifacts":[{"file_type":"trace","size":231474,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2018-11-22T13:17:46.633Z","tag_list":[]}
{"id":120967787,"status":"success","stage":"build","name":"build:edge","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-15T12:53:41.492Z","started_at":"2018-11-15T12:53:45.161Z","finished_at":"2018-11-15T13:10:06.247Z","duration":981.085978,"queued_duration":1.10746,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"33c7f488027efc3c199554e2a3cfccb07e1e69af","short_id":"33c7f488","created_at":"2018-11-15T13:53:08.000+01:00","parent_ids":["b6f65c72cce697d7acc11f731983a8c18f497d10"],"title":"ssr: extended intro patterns","message":"ssr: extended intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-11-15T13:53:08.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/33c7f488027efc3c199554e2a3cfccb07e1e69af"},"pipeline":{"id":36721090,"iid":5276,"project_id":6138686,"sha":"33c7f488027efc3c199554e2a3cfccb07e1e69af","ref":"pr-6705","status":"success","source":"push","created_at":"2018-11-15T12:53:41.404Z","updated_at":"2018-11-15T14:22:16.929Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36721090"},"web_url":"https://gitlab.com/coq/coq/-/jobs/120967787","artifacts":[{"file_type":"trace","size":230332,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2018-11-22T13:09:58.893Z","tag_list":[]}
{"id":120967786,"status":"success","stage":"build","name":"build:base+32bit","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-15T12:53:41.458Z","started_at":"2018-11-15T12:53:45.092Z","finished_at":"2018-11-15T13:08:51.104Z","duration":906.011956,"queued_duration":0.953675,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"33c7f488027efc3c199554e2a3cfccb07e1e69af","short_id":"33c7f488","created_at":"2018-11-15T13:53:08.000+01:00","parent_ids":["b6f65c72cce697d7acc11f731983a8c18f497d10"],"title":"ssr: extended intro patterns","message":"ssr: extended intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-11-15T13:53:08.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/33c7f488027efc3c199554e2a3cfccb07e1e69af"},"pipeline":{"id":36721090,"iid":5276,"project_id":6138686,"sha":"33c7f488027efc3c199554e2a3cfccb07e1e69af","ref":"pr-6705","status":"success","source":"push","created_at":"2018-11-15T12:53:41.404Z","updated_at":"2018-11-15T14:22:16.929Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36721090"},"web_url":"https://gitlab.com/coq/coq/-/jobs/120967786","artifacts":[{"file_type":"trace","size":225224,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2018-11-22T13:08:45.451Z","tag_list":[]}
{"id":120967785,"status":"success","stage":"build","name":"build:base","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-11-15T12:53:41.422Z","started_at":"2018-11-15T12:53:45.179Z","finished_at":"2018-11-15T13:04:57.514Z","duration":672.334343,"queued_duration":0.25344,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"33c7f488027efc3c199554e2a3cfccb07e1e69af","short_id":"33c7f488","created_at":"2018-11-15T13:53:08.000+01:00","parent_ids":["b6f65c72cce697d7acc11f731983a8c18f497d10"],"title":"ssr: extended intro patterns","message":"ssr: extended intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-11-15T13:53:08.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/33c7f488027efc3c199554e2a3cfccb07e1e69af"},"pipeline":{"id":36721090,"iid":5276,"project_id":6138686,"sha":"33c7f488027efc3c199554e2a3cfccb07e1e69af","ref":"pr-6705","status":"success","source":"push","created_at":"2018-11-15T12:53:41.404Z","updated_at":"2018-11-15T14:22:16.929Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/36721090"},"web_url":"https://gitlab.com/coq/coq/-/jobs/120967785","artifacts":[{"file_type":"trace","size":304995,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":"2018-11-22T13:04:52.472Z","tag_list":[]}
