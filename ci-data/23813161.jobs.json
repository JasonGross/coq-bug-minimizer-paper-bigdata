{"id":75119053,"status":"failed","stage":"test","name":"ci-vst","ref":"pr-7801","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-15T09:37:45.617Z","started_at":"2018-06-15T09:37:47.365Z","finished_at":"2018-06-15T09:38:20.999Z","duration":33.634314,"queued_duration":1.61951,"user":{"id":1362220,"username":"Zimmi48","name":"Th√©o Zimmermann","state":"active","avatar_url":"https://secure.gravatar.com/avatar/432865975a442512504a808f2ed09e56?s=80&d=identicon","web_url":"https://gitlab.com/Zimmi48","created_at":"2017-05-30T11:37:33.615Z","bio":"","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f","short_id":"e0a0159d","created_at":"2018-06-13T22:54:25.000+02:00","parent_ids":["c1d690443589a457b18b39b7003ccb762bcf401f"],"title":"[vernac] Add option to force building really mutual induction schemes","message":"[vernac] Add option to force building really mutual induction schemes\n\nCurrently, if one of the inductives is non recursive, it defaults to a\ncase analysis schems taking fewer predicates and methods just for that\ninductive. This irregularity prevents doing a combined scheme afterwards\nto gather all eliminators into one, as combined scheme expects all the\neliminators to have the same predicates and methods. I have a use case\nin building function graphs in Equations where some of the inductives\nmight not be recursive but I expect many other use cases could exist.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-13T22:54:25.000+02:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-13T22:54:25.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f"},"pipeline":{"id":23813161,"iid":1367,"project_id":6138686,"sha":"e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f","ref":"pr-7801","status":"failed","source":"push","created_at":"2018-06-13T21:07:09.392Z","updated_at":"2018-06-15T09:38:24.726Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/23813161"},"failure_reason":"runner_system_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/75119053","artifacts":[{"file_type":"trace","size":1246,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":74719174,"status":"success","stage":"test","name":"ci-unimath","ref":"pr-7801","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-13T21:07:10.723Z","started_at":"2018-06-13T21:38:58.069Z","finished_at":"2018-06-13T21:57:32.150Z","duration":1114.081106,"queued_duration":5.121646,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f","short_id":"e0a0159d","created_at":"2018-06-13T22:54:25.000+02:00","parent_ids":["c1d690443589a457b18b39b7003ccb762bcf401f"],"title":"[vernac] Add option to force building really mutual induction schemes","message":"[vernac] Add option to force building really mutual induction schemes\n\nCurrently, if one of the inductives is non recursive, it defaults to a\ncase analysis schems taking fewer predicates and methods just for that\ninductive. This irregularity prevents doing a combined scheme afterwards\nto gather all eliminators into one, as combined scheme expects all the\neliminators to have the same predicates and methods. I have a use case\nin building function graphs in Equations where some of the inductives\nmight not be recursive but I expect many other use cases could exist.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-13T22:54:25.000+02:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-13T22:54:25.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f"},"pipeline":{"id":23813161,"iid":1367,"project_id":6138686,"sha":"e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f","ref":"pr-7801","status":"failed","source":"push","created_at":"2018-06-13T21:07:09.392Z","updated_at":"2018-06-15T09:38:24.726Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/23813161"},"web_url":"https://gitlab.com/coq/coq/-/jobs/74719174","artifacts":[{"file_type":"trace","size":116901,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":74719173,"status":"success","stage":"test","name":"ci-sf","ref":"pr-7801","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-13T21:07:10.696Z","started_at":"2018-06-13T21:38:57.989Z","finished_at":"2018-06-13T21:44:45.146Z","duration":347.156596,"queued_duration":4.897526,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f","short_id":"e0a0159d","created_at":"2018-06-13T22:54:25.000+02:00","parent_ids":["c1d690443589a457b18b39b7003ccb762bcf401f"],"title":"[vernac] Add option to force building really mutual induction schemes","message":"[vernac] Add option to force building really mutual induction schemes\n\nCurrently, if one of the inductives is non recursive, it defaults to a\ncase analysis schems taking fewer predicates and methods just for that\ninductive. This irregularity prevents doing a combined scheme afterwards\nto gather all eliminators into one, as combined scheme expects all the\neliminators to have the same predicates and methods. I have a use case\nin building function graphs in Equations where some of the inductives\nmight not be recursive but I expect many other use cases could exist.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-13T22:54:25.000+02:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-13T22:54:25.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f"},"pipeline":{"id":23813161,"iid":1367,"project_id":6138686,"sha":"e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f","ref":"pr-7801","status":"failed","source":"push","created_at":"2018-06-13T21:07:09.392Z","updated_at":"2018-06-15T09:38:24.726Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/23813161"},"web_url":"https://gitlab.com/coq/coq/-/jobs/74719173","artifacts":[{"file_type":"trace","size":260226,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":74719172,"status":"success","stage":"test","name":"ci-quickchick","ref":"pr-7801","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-13T21:07:10.673Z","started_at":"2018-06-13T21:38:57.798Z","finished_at":"2018-06-13T21:40:49.263Z","duration":111.464155,"queued_duration":4.627226,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f","short_id":"e0a0159d","created_at":"2018-06-13T22:54:25.000+02:00","parent_ids":["c1d690443589a457b18b39b7003ccb762bcf401f"],"title":"[vernac] Add option to force building really mutual induction schemes","message":"[vernac] Add option to force building really mutual induction schemes\n\nCurrently, if one of the inductives is non recursive, it defaults to a\ncase analysis schems taking fewer predicates and methods just for that\ninductive. This irregularity prevents doing a combined scheme afterwards\nto gather all eliminators into one, as combined scheme expects all the\neliminators to have the same predicates and methods. I have a use case\nin building function graphs in Equations where some of the inductives\nmight not be recursive but I expect many other use cases could exist.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-13T22:54:25.000+02:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-13T22:54:25.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f"},"pipeline":{"id":23813161,"iid":1367,"project_id":6138686,"sha":"e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f","ref":"pr-7801","status":"failed","source":"push","created_at":"2018-06-13T21:07:09.392Z","updated_at":"2018-06-15T09:38:24.726Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/23813161"},"web_url":"https://gitlab.com/coq/coq/-/jobs/74719172","artifacts":[{"file_type":"trace","size":196854,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":74719171,"status":"success","stage":"test","name":"ci-pidetop","ref":"pr-7801","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-13T21:07:10.647Z","started_at":"2018-06-13T21:38:53.737Z","finished_at":"2018-06-13T21:43:04.076Z","duration":250.339073,"queued_duration":0.461681,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f","short_id":"e0a0159d","created_at":"2018-06-13T22:54:25.000+02:00","parent_ids":["c1d690443589a457b18b39b7003ccb762bcf401f"],"title":"[vernac] Add option to force building really mutual induction schemes","message":"[vernac] Add option to force building really mutual induction schemes\n\nCurrently, if one of the inductives is non recursive, it defaults to a\ncase analysis schems taking fewer predicates and methods just for that\ninductive. This irregularity prevents doing a combined scheme afterwards\nto gather all eliminators into one, as combined scheme expects all the\neliminators to have the same predicates and methods. I have a use case\nin building function graphs in Equations where some of the inductives\nmight not be recursive but I expect many other use cases could exist.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-13T22:54:25.000+02:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-13T22:54:25.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f"},"pipeline":{"id":23813161,"iid":1367,"project_id":6138686,"sha":"e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f","ref":"pr-7801","status":"failed","source":"push","created_at":"2018-06-13T21:07:09.392Z","updated_at":"2018-06-15T09:38:24.726Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/23813161"},"web_url":"https://gitlab.com/coq/coq/-/jobs/74719171","artifacts":[{"file_type":"trace","size":22807,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":74719170,"status":"success","stage":"test","name":"ci-mtac2","ref":"pr-7801","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-13T21:07:10.623Z","started_at":"2018-06-13T21:38:53.648Z","finished_at":"2018-06-13T21:43:44.557Z","duration":290.909452,"queued_duration":0.274957,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f","short_id":"e0a0159d","created_at":"2018-06-13T22:54:25.000+02:00","parent_ids":["c1d690443589a457b18b39b7003ccb762bcf401f"],"title":"[vernac] Add option to force building really mutual induction schemes","message":"[vernac] Add option to force building really mutual induction schemes\n\nCurrently, if one of the inductives is non recursive, it defaults to a\ncase analysis schems taking fewer predicates and methods just for that\ninductive. This irregularity prevents doing a combined scheme afterwards\nto gather all eliminators into one, as combined scheme expects all the\neliminators to have the same predicates and methods. I have a use case\nin building function graphs in Equations where some of the inductives\nmight not be recursive but I expect many other use cases could exist.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-13T22:54:25.000+02:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-13T22:54:25.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f"},"pipeline":{"id":23813161,"iid":1367,"project_id":6138686,"sha":"e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f","ref":"pr-7801","status":"failed","source":"push","created_at":"2018-06-13T21:07:09.392Z","updated_at":"2018-06-15T09:38:24.726Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/23813161"},"web_url":"https://gitlab.com/coq/coq/-/jobs/74719170","artifacts":[{"file_type":"trace","size":79549,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":74719169,"status":"success","stage":"test","name":"ci-math-comp","ref":"pr-7801","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-13T21:07:10.599Z","started_at":"2018-06-13T21:38:57.708Z","finished_at":"2018-06-13T22:34:41.307Z","duration":3343.599865,"queued_duration":4.137706,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f","short_id":"e0a0159d","created_at":"2018-06-13T22:54:25.000+02:00","parent_ids":["c1d690443589a457b18b39b7003ccb762bcf401f"],"title":"[vernac] Add option to force building really mutual induction schemes","message":"[vernac] Add option to force building really mutual induction schemes\n\nCurrently, if one of the inductives is non recursive, it defaults to a\ncase analysis schems taking fewer predicates and methods just for that\ninductive. This irregularity prevents doing a combined scheme afterwards\nto gather all eliminators into one, as combined scheme expects all the\neliminators to have the same predicates and methods. I have a use case\nin building function graphs in Equations where some of the inductives\nmight not be recursive but I expect many other use cases could exist.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-13T22:54:25.000+02:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-13T22:54:25.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f"},"pipeline":{"id":23813161,"iid":1367,"project_id":6138686,"sha":"e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f","ref":"pr-7801","status":"failed","source":"push","created_at":"2018-06-13T21:07:09.392Z","updated_at":"2018-06-15T09:38:24.726Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/23813161"},"web_url":"https://gitlab.com/coq/coq/-/jobs/74719169","artifacts":[{"file_type":"trace","size":303606,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":74719168,"status":"success","stage":"test","name":"ci-ltac2","ref":"pr-7801","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-13T21:07:10.572Z","started_at":"2018-06-13T21:38:57.625Z","finished_at":"2018-06-13T21:43:10.843Z","duration":253.217533,"queued_duration":3.934691,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f","short_id":"e0a0159d","created_at":"2018-06-13T22:54:25.000+02:00","parent_ids":["c1d690443589a457b18b39b7003ccb762bcf401f"],"title":"[vernac] Add option to force building really mutual induction schemes","message":"[vernac] Add option to force building really mutual induction schemes\n\nCurrently, if one of the inductives is non recursive, it defaults to a\ncase analysis schems taking fewer predicates and methods just for that\ninductive. This irregularity prevents doing a combined scheme afterwards\nto gather all eliminators into one, as combined scheme expects all the\neliminators to have the same predicates and methods. I have a use case\nin building function graphs in Equations where some of the inductives\nmight not be recursive but I expect many other use cases could exist.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-13T22:54:25.000+02:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-13T22:54:25.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f"},"pipeline":{"id":23813161,"iid":1367,"project_id":6138686,"sha":"e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f","ref":"pr-7801","status":"failed","source":"push","created_at":"2018-06-13T21:07:09.392Z","updated_at":"2018-06-15T09:38:24.726Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/23813161"},"web_url":"https://gitlab.com/coq/coq/-/jobs/74719168","artifacts":[{"file_type":"trace","size":42150,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":74719167,"status":"success","stage":"test","name":"ci-iris-lambda-rust","ref":"pr-7801","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-13T21:07:10.546Z","started_at":"2018-06-13T21:38:57.537Z","finished_at":"2018-06-13T22:37:01.913Z","duration":3484.376859,"queued_duration":3.788298,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f","short_id":"e0a0159d","created_at":"2018-06-13T22:54:25.000+02:00","parent_ids":["c1d690443589a457b18b39b7003ccb762bcf401f"],"title":"[vernac] Add option to force building really mutual induction schemes","message":"[vernac] Add option to force building really mutual induction schemes\n\nCurrently, if one of the inductives is non recursive, it defaults to a\ncase analysis schems taking fewer predicates and methods just for that\ninductive. This irregularity prevents doing a combined scheme afterwards\nto gather all eliminators into one, as combined scheme expects all the\neliminators to have the same predicates and methods. I have a use case\nin building function graphs in Equations where some of the inductives\nmight not be recursive but I expect many other use cases could exist.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-13T22:54:25.000+02:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-13T22:54:25.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f"},"pipeline":{"id":23813161,"iid":1367,"project_id":6138686,"sha":"e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f","ref":"pr-7801","status":"failed","source":"push","created_at":"2018-06-13T21:07:09.392Z","updated_at":"2018-06-15T09:38:24.726Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/23813161"},"web_url":"https://gitlab.com/coq/coq/-/jobs/74719167","artifacts":[{"file_type":"trace","size":199838,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":74719166,"status":"success","stage":"test","name":"ci-hott","ref":"pr-7801","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-13T21:07:10.521Z","started_at":"2018-06-13T21:38:57.454Z","finished_at":"2018-06-13T21:46:04.892Z","duration":427.438405,"queued_duration":3.62285,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f","short_id":"e0a0159d","created_at":"2018-06-13T22:54:25.000+02:00","parent_ids":["c1d690443589a457b18b39b7003ccb762bcf401f"],"title":"[vernac] Add option to force building really mutual induction schemes","message":"[vernac] Add option to force building really mutual induction schemes\n\nCurrently, if one of the inductives is non recursive, it defaults to a\ncase analysis schems taking fewer predicates and methods just for that\ninductive. This irregularity prevents doing a combined scheme afterwards\nto gather all eliminators into one, as combined scheme expects all the\neliminators to have the same predicates and methods. I have a use case\nin building function graphs in Equations where some of the inductives\nmight not be recursive but I expect many other use cases could exist.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-13T22:54:25.000+02:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-13T22:54:25.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f"},"pipeline":{"id":23813161,"iid":1367,"project_id":6138686,"sha":"e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f","ref":"pr-7801","status":"failed","source":"push","created_at":"2018-06-13T21:07:09.392Z","updated_at":"2018-06-15T09:38:24.726Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/23813161"},"web_url":"https://gitlab.com/coq/coq/-/jobs/74719166","artifacts":[{"file_type":"trace","size":57567,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":74719165,"status":"success","stage":"test","name":"ci-geocoq","ref":"pr-7801","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-13T21:07:10.491Z","started_at":"2018-06-13T21:38:57.360Z","finished_at":"2018-06-13T22:40:44.024Z","duration":3706.664356,"queued_duration":3.351941,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f","short_id":"e0a0159d","created_at":"2018-06-13T22:54:25.000+02:00","parent_ids":["c1d690443589a457b18b39b7003ccb762bcf401f"],"title":"[vernac] Add option to force building really mutual induction schemes","message":"[vernac] Add option to force building really mutual induction schemes\n\nCurrently, if one of the inductives is non recursive, it defaults to a\ncase analysis schems taking fewer predicates and methods just for that\ninductive. This irregularity prevents doing a combined scheme afterwards\nto gather all eliminators into one, as combined scheme expects all the\neliminators to have the same predicates and methods. I have a use case\nin building function graphs in Equations where some of the inductives\nmight not be recursive but I expect many other use cases could exist.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-13T22:54:25.000+02:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-13T22:54:25.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f"},"pipeline":{"id":23813161,"iid":1367,"project_id":6138686,"sha":"e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f","ref":"pr-7801","status":"failed","source":"push","created_at":"2018-06-13T21:07:09.392Z","updated_at":"2018-06-15T09:38:24.726Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/23813161"},"web_url":"https://gitlab.com/coq/coq/-/jobs/74719165","artifacts":[{"file_type":"trace","size":260797,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":74719164,"status":"success","stage":"test","name":"ci-formal-topology","ref":"pr-7801","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-13T21:07:10.464Z","started_at":"2018-06-13T21:38:54.487Z","finished_at":"2018-06-13T22:19:07.718Z","duration":2413.231537,"queued_duration":0.417292,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f","short_id":"e0a0159d","created_at":"2018-06-13T22:54:25.000+02:00","parent_ids":["c1d690443589a457b18b39b7003ccb762bcf401f"],"title":"[vernac] Add option to force building really mutual induction schemes","message":"[vernac] Add option to force building really mutual induction schemes\n\nCurrently, if one of the inductives is non recursive, it defaults to a\ncase analysis schems taking fewer predicates and methods just for that\ninductive. This irregularity prevents doing a combined scheme afterwards\nto gather all eliminators into one, as combined scheme expects all the\neliminators to have the same predicates and methods. I have a use case\nin building function graphs in Equations where some of the inductives\nmight not be recursive but I expect many other use cases could exist.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-13T22:54:25.000+02:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-13T22:54:25.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f"},"pipeline":{"id":23813161,"iid":1367,"project_id":6138686,"sha":"e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f","ref":"pr-7801","status":"failed","source":"push","created_at":"2018-06-13T21:07:09.392Z","updated_at":"2018-06-15T09:38:24.726Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/23813161"},"web_url":"https://gitlab.com/coq/coq/-/jobs/74719164","artifacts":[{"file_type":"trace","size":561442,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":74719163,"status":"success","stage":"test","name":"ci-flocq","ref":"pr-7801","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-13T21:07:10.433Z","started_at":"2018-06-13T21:38:54.320Z","finished_at":"2018-06-13T21:47:28.905Z","duration":514.585822,"queued_duration":0.146428,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f","short_id":"e0a0159d","created_at":"2018-06-13T22:54:25.000+02:00","parent_ids":["c1d690443589a457b18b39b7003ccb762bcf401f"],"title":"[vernac] Add option to force building really mutual induction schemes","message":"[vernac] Add option to force building really mutual induction schemes\n\nCurrently, if one of the inductives is non recursive, it defaults to a\ncase analysis schems taking fewer predicates and methods just for that\ninductive. This irregularity prevents doing a combined scheme afterwards\nto gather all eliminators into one, as combined scheme expects all the\neliminators to have the same predicates and methods. I have a use case\nin building function graphs in Equations where some of the inductives\nmight not be recursive but I expect many other use cases could exist.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-13T22:54:25.000+02:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-13T22:54:25.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f"},"pipeline":{"id":23813161,"iid":1367,"project_id":6138686,"sha":"e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f","ref":"pr-7801","status":"failed","source":"push","created_at":"2018-06-13T21:07:09.392Z","updated_at":"2018-06-15T09:38:24.726Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/23813161"},"web_url":"https://gitlab.com/coq/coq/-/jobs/74719163","artifacts":[{"file_type":"trace","size":647684,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":74719162,"status":"success","stage":"test","name":"ci-fiat-parsers","ref":"pr-7801","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-13T21:07:10.408Z","started_at":"2018-06-13T21:38:54.369Z","finished_at":"2018-06-13T21:53:08.169Z","duration":853.799283,"queued_duration":0.14701,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f","short_id":"e0a0159d","created_at":"2018-06-13T22:54:25.000+02:00","parent_ids":["c1d690443589a457b18b39b7003ccb762bcf401f"],"title":"[vernac] Add option to force building really mutual induction schemes","message":"[vernac] Add option to force building really mutual induction schemes\n\nCurrently, if one of the inductives is non recursive, it defaults to a\ncase analysis schems taking fewer predicates and methods just for that\ninductive. This irregularity prevents doing a combined scheme afterwards\nto gather all eliminators into one, as combined scheme expects all the\neliminators to have the same predicates and methods. I have a use case\nin building function graphs in Equations where some of the inductives\nmight not be recursive but I expect many other use cases could exist.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-13T22:54:25.000+02:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-13T22:54:25.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f"},"pipeline":{"id":23813161,"iid":1367,"project_id":6138686,"sha":"e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f","ref":"pr-7801","status":"failed","source":"push","created_at":"2018-06-13T21:07:09.392Z","updated_at":"2018-06-15T09:38:24.726Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/23813161"},"web_url":"https://gitlab.com/coq/coq/-/jobs/74719162","artifacts":[{"file_type":"trace","size":230168,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":74719161,"status":"success","stage":"test","name":"ci-fiat-crypto","ref":"pr-7801","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-13T21:07:10.380Z","started_at":"2018-06-13T21:38:57.243Z","finished_at":"2018-06-13T22:35:15.963Z","duration":3378.720625,"queued_duration":2.947389,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f","short_id":"e0a0159d","created_at":"2018-06-13T22:54:25.000+02:00","parent_ids":["c1d690443589a457b18b39b7003ccb762bcf401f"],"title":"[vernac] Add option to force building really mutual induction schemes","message":"[vernac] Add option to force building really mutual induction schemes\n\nCurrently, if one of the inductives is non recursive, it defaults to a\ncase analysis schems taking fewer predicates and methods just for that\ninductive. This irregularity prevents doing a combined scheme afterwards\nto gather all eliminators into one, as combined scheme expects all the\neliminators to have the same predicates and methods. I have a use case\nin building function graphs in Equations where some of the inductives\nmight not be recursive but I expect many other use cases could exist.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-13T22:54:25.000+02:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-13T22:54:25.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f"},"pipeline":{"id":23813161,"iid":1367,"project_id":6138686,"sha":"e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f","ref":"pr-7801","status":"failed","source":"push","created_at":"2018-06-13T21:07:09.392Z","updated_at":"2018-06-15T09:38:24.726Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/23813161"},"web_url":"https://gitlab.com/coq/coq/-/jobs/74719161","artifacts":[{"file_type":"trace","size":691302,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":74719159,"status":"success","stage":"test","name":"ci-fcsl-pcm","ref":"pr-7801","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-13T21:07:10.352Z","started_at":"2018-06-13T21:38:54.606Z","finished_at":"2018-06-13T21:44:32.979Z","duration":338.372319,"queued_duration":0.269262,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f","short_id":"e0a0159d","created_at":"2018-06-13T22:54:25.000+02:00","parent_ids":["c1d690443589a457b18b39b7003ccb762bcf401f"],"title":"[vernac] Add option to force building really mutual induction schemes","message":"[vernac] Add option to force building really mutual induction schemes\n\nCurrently, if one of the inductives is non recursive, it defaults to a\ncase analysis schems taking fewer predicates and methods just for that\ninductive. This irregularity prevents doing a combined scheme afterwards\nto gather all eliminators into one, as combined scheme expects all the\neliminators to have the same predicates and methods. I have a use case\nin building function graphs in Equations where some of the inductives\nmight not be recursive but I expect many other use cases could exist.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-13T22:54:25.000+02:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-13T22:54:25.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f"},"pipeline":{"id":23813161,"iid":1367,"project_id":6138686,"sha":"e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f","ref":"pr-7801","status":"failed","source":"push","created_at":"2018-06-13T21:07:09.392Z","updated_at":"2018-06-15T09:38:24.726Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/23813161"},"web_url":"https://gitlab.com/coq/coq/-/jobs/74719159","artifacts":[{"file_type":"trace","size":84023,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":74719158,"status":"success","stage":"test","name":"ci-equations","ref":"pr-7801","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-13T21:07:10.325Z","started_at":"2018-06-13T21:38:54.532Z","finished_at":"2018-06-13T21:46:15.100Z","duration":440.567957,"queued_duration":0.134938,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f","short_id":"e0a0159d","created_at":"2018-06-13T22:54:25.000+02:00","parent_ids":["c1d690443589a457b18b39b7003ccb762bcf401f"],"title":"[vernac] Add option to force building really mutual induction schemes","message":"[vernac] Add option to force building really mutual induction schemes\n\nCurrently, if one of the inductives is non recursive, it defaults to a\ncase analysis schems taking fewer predicates and methods just for that\ninductive. This irregularity prevents doing a combined scheme afterwards\nto gather all eliminators into one, as combined scheme expects all the\neliminators to have the same predicates and methods. I have a use case\nin building function graphs in Equations where some of the inductives\nmight not be recursive but I expect many other use cases could exist.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-13T22:54:25.000+02:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-13T22:54:25.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f"},"pipeline":{"id":23813161,"iid":1367,"project_id":6138686,"sha":"e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f","ref":"pr-7801","status":"failed","source":"push","created_at":"2018-06-13T21:07:09.392Z","updated_at":"2018-06-15T09:38:24.726Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/23813161"},"web_url":"https://gitlab.com/coq/coq/-/jobs/74719158","artifacts":[{"file_type":"trace","size":54312,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":74719156,"status":"success","stage":"test","name":"ci-elpi","ref":"pr-7801","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-13T21:07:10.297Z","started_at":"2018-06-13T21:38:57.092Z","finished_at":"2018-06-13T21:43:34.952Z","duration":277.860132,"queued_duration":2.628194,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f","short_id":"e0a0159d","created_at":"2018-06-13T22:54:25.000+02:00","parent_ids":["c1d690443589a457b18b39b7003ccb762bcf401f"],"title":"[vernac] Add option to force building really mutual induction schemes","message":"[vernac] Add option to force building really mutual induction schemes\n\nCurrently, if one of the inductives is non recursive, it defaults to a\ncase analysis schems taking fewer predicates and methods just for that\ninductive. This irregularity prevents doing a combined scheme afterwards\nto gather all eliminators into one, as combined scheme expects all the\neliminators to have the same predicates and methods. I have a use case\nin building function graphs in Equations where some of the inductives\nmight not be recursive but I expect many other use cases could exist.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-13T22:54:25.000+02:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-13T22:54:25.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f"},"pipeline":{"id":23813161,"iid":1367,"project_id":6138686,"sha":"e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f","ref":"pr-7801","status":"failed","source":"push","created_at":"2018-06-13T21:07:09.392Z","updated_at":"2018-06-15T09:38:24.726Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/23813161"},"web_url":"https://gitlab.com/coq/coq/-/jobs/74719156","artifacts":[{"file_type":"trace","size":406331,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":74719154,"status":"success","stage":"test","name":"ci-cross-crypto","ref":"pr-7801","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-13T21:07:10.271Z","started_at":"2018-06-13T21:38:54.731Z","finished_at":"2018-06-13T22:23:20.466Z","duration":2665.734296,"queued_duration":0.171889,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f","short_id":"e0a0159d","created_at":"2018-06-13T22:54:25.000+02:00","parent_ids":["c1d690443589a457b18b39b7003ccb762bcf401f"],"title":"[vernac] Add option to force building really mutual induction schemes","message":"[vernac] Add option to force building really mutual induction schemes\n\nCurrently, if one of the inductives is non recursive, it defaults to a\ncase analysis schems taking fewer predicates and methods just for that\ninductive. This irregularity prevents doing a combined scheme afterwards\nto gather all eliminators into one, as combined scheme expects all the\neliminators to have the same predicates and methods. I have a use case\nin building function graphs in Equations where some of the inductives\nmight not be recursive but I expect many other use cases could exist.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-13T22:54:25.000+02:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-13T22:54:25.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f"},"pipeline":{"id":23813161,"iid":1367,"project_id":6138686,"sha":"e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f","ref":"pr-7801","status":"failed","source":"push","created_at":"2018-06-13T21:07:09.392Z","updated_at":"2018-06-15T09:38:24.726Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/23813161"},"web_url":"https://gitlab.com/coq/coq/-/jobs/74719154","artifacts":[{"file_type":"trace","size":69335,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":74719152,"status":"success","stage":"test","name":"ci-coquelicot","ref":"pr-7801","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-13T21:07:10.242Z","started_at":"2018-06-13T21:38:54.959Z","finished_at":"2018-06-13T21:45:50.001Z","duration":415.041706,"queued_duration":0.307554,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f","short_id":"e0a0159d","created_at":"2018-06-13T22:54:25.000+02:00","parent_ids":["c1d690443589a457b18b39b7003ccb762bcf401f"],"title":"[vernac] Add option to force building really mutual induction schemes","message":"[vernac] Add option to force building really mutual induction schemes\n\nCurrently, if one of the inductives is non recursive, it defaults to a\ncase analysis schems taking fewer predicates and methods just for that\ninductive. This irregularity prevents doing a combined scheme afterwards\nto gather all eliminators into one, as combined scheme expects all the\neliminators to have the same predicates and methods. I have a use case\nin building function graphs in Equations where some of the inductives\nmight not be recursive but I expect many other use cases could exist.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-13T22:54:25.000+02:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-13T22:54:25.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f"},"pipeline":{"id":23813161,"iid":1367,"project_id":6138686,"sha":"e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f","ref":"pr-7801","status":"failed","source":"push","created_at":"2018-06-13T21:07:09.392Z","updated_at":"2018-06-15T09:38:24.726Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/23813161"},"web_url":"https://gitlab.com/coq/coq/-/jobs/74719152","artifacts":[{"file_type":"trace","size":87338,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":74719150,"status":"success","stage":"test","name":"ci-coq-dpdgraph","ref":"pr-7801","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-13T21:07:10.213Z","started_at":"2018-06-13T21:38:54.876Z","finished_at":"2018-06-13T21:42:45.492Z","duration":230.616506,"queued_duration":0.143994,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f","short_id":"e0a0159d","created_at":"2018-06-13T22:54:25.000+02:00","parent_ids":["c1d690443589a457b18b39b7003ccb762bcf401f"],"title":"[vernac] Add option to force building really mutual induction schemes","message":"[vernac] Add option to force building really mutual induction schemes\n\nCurrently, if one of the inductives is non recursive, it defaults to a\ncase analysis schems taking fewer predicates and methods just for that\ninductive. This irregularity prevents doing a combined scheme afterwards\nto gather all eliminators into one, as combined scheme expects all the\neliminators to have the same predicates and methods. I have a use case\nin building function graphs in Equations where some of the inductives\nmight not be recursive but I expect many other use cases could exist.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-13T22:54:25.000+02:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-13T22:54:25.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f"},"pipeline":{"id":23813161,"iid":1367,"project_id":6138686,"sha":"e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f","ref":"pr-7801","status":"failed","source":"push","created_at":"2018-06-13T21:07:09.392Z","updated_at":"2018-06-15T09:38:24.726Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/23813161"},"web_url":"https://gitlab.com/coq/coq/-/jobs/74719150","artifacts":[{"file_type":"trace","size":32724,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":74719148,"status":"success","stage":"test","name":"ci-compcert","ref":"pr-7801","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-13T21:07:10.188Z","started_at":"2018-06-13T21:38:57.022Z","finished_at":"2018-06-13T22:07:14.630Z","duration":1697.608679,"queued_duration":2.227897,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f","short_id":"e0a0159d","created_at":"2018-06-13T22:54:25.000+02:00","parent_ids":["c1d690443589a457b18b39b7003ccb762bcf401f"],"title":"[vernac] Add option to force building really mutual induction schemes","message":"[vernac] Add option to force building really mutual induction schemes\n\nCurrently, if one of the inductives is non recursive, it defaults to a\ncase analysis schems taking fewer predicates and methods just for that\ninductive. This irregularity prevents doing a combined scheme afterwards\nto gather all eliminators into one, as combined scheme expects all the\neliminators to have the same predicates and methods. I have a use case\nin building function graphs in Equations where some of the inductives\nmight not be recursive but I expect many other use cases could exist.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-13T22:54:25.000+02:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-13T22:54:25.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f"},"pipeline":{"id":23813161,"iid":1367,"project_id":6138686,"sha":"e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f","ref":"pr-7801","status":"failed","source":"push","created_at":"2018-06-13T21:07:09.392Z","updated_at":"2018-06-15T09:38:24.726Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/23813161"},"web_url":"https://gitlab.com/coq/coq/-/jobs/74719148","artifacts":[{"file_type":"trace","size":1991829,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":74719146,"status":"success","stage":"test","name":"ci-color","ref":"pr-7801","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-13T21:07:10.161Z","started_at":"2018-06-13T21:38:56.613Z","finished_at":"2018-06-13T22:00:13.606Z","duration":1276.99278,"queued_duration":1.771213,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f","short_id":"e0a0159d","created_at":"2018-06-13T22:54:25.000+02:00","parent_ids":["c1d690443589a457b18b39b7003ccb762bcf401f"],"title":"[vernac] Add option to force building really mutual induction schemes","message":"[vernac] Add option to force building really mutual induction schemes\n\nCurrently, if one of the inductives is non recursive, it defaults to a\ncase analysis schems taking fewer predicates and methods just for that\ninductive. This irregularity prevents doing a combined scheme afterwards\nto gather all eliminators into one, as combined scheme expects all the\neliminators to have the same predicates and methods. I have a use case\nin building function graphs in Equations where some of the inductives\nmight not be recursive but I expect many other use cases could exist.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-13T22:54:25.000+02:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-13T22:54:25.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f"},"pipeline":{"id":23813161,"iid":1367,"project_id":6138686,"sha":"e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f","ref":"pr-7801","status":"failed","source":"push","created_at":"2018-06-13T21:07:09.392Z","updated_at":"2018-06-15T09:38:24.726Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/23813161"},"web_url":"https://gitlab.com/coq/coq/-/jobs/74719146","artifacts":[{"file_type":"trace","size":252853,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":74719145,"status":"success","stage":"test","name":"ci-bignums","ref":"pr-7801","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-13T21:07:10.135Z","started_at":"2018-06-13T21:38:56.486Z","finished_at":"2018-06-13T21:44:19.322Z","duration":322.835504,"queued_duration":1.577579,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f","short_id":"e0a0159d","created_at":"2018-06-13T22:54:25.000+02:00","parent_ids":["c1d690443589a457b18b39b7003ccb762bcf401f"],"title":"[vernac] Add option to force building really mutual induction schemes","message":"[vernac] Add option to force building really mutual induction schemes\n\nCurrently, if one of the inductives is non recursive, it defaults to a\ncase analysis schems taking fewer predicates and methods just for that\ninductive. This irregularity prevents doing a combined scheme afterwards\nto gather all eliminators into one, as combined scheme expects all the\neliminators to have the same predicates and methods. I have a use case\nin building function graphs in Equations where some of the inductives\nmight not be recursive but I expect many other use cases could exist.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-13T22:54:25.000+02:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-13T22:54:25.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f"},"pipeline":{"id":23813161,"iid":1367,"project_id":6138686,"sha":"e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f","ref":"pr-7801","status":"failed","source":"push","created_at":"2018-06-13T21:07:09.392Z","updated_at":"2018-06-15T09:38:24.726Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/23813161"},"web_url":"https://gitlab.com/coq/coq/-/jobs/74719145","artifacts":[{"file_type":"trace","size":35013,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":74719144,"status":"success","stage":"test","name":"validate:edge+flambda","ref":"pr-7801","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-13T21:07:10.108Z","started_at":"2018-06-13T21:38:55.198Z","finished_at":"2018-06-13T21:47:43.874Z","duration":528.676545,"queued_duration":0.212724,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f","short_id":"e0a0159d","created_at":"2018-06-13T22:54:25.000+02:00","parent_ids":["c1d690443589a457b18b39b7003ccb762bcf401f"],"title":"[vernac] Add option to force building really mutual induction schemes","message":"[vernac] Add option to force building really mutual induction schemes\n\nCurrently, if one of the inductives is non recursive, it defaults to a\ncase analysis schems taking fewer predicates and methods just for that\ninductive. This irregularity prevents doing a combined scheme afterwards\nto gather all eliminators into one, as combined scheme expects all the\neliminators to have the same predicates and methods. I have a use case\nin building function graphs in Equations where some of the inductives\nmight not be recursive but I expect many other use cases could exist.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-13T22:54:25.000+02:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-13T22:54:25.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f"},"pipeline":{"id":23813161,"iid":1367,"project_id":6138686,"sha":"e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f","ref":"pr-7801","status":"failed","source":"push","created_at":"2018-06-13T21:07:09.392Z","updated_at":"2018-06-15T09:38:24.726Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/23813161"},"web_url":"https://gitlab.com/coq/coq/-/jobs/74719144","artifacts":[{"file_type":"trace","size":18729,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":74719143,"status":"success","stage":"test","name":"validate:edge","ref":"pr-7801","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-13T21:07:10.078Z","started_at":"2018-06-13T21:38:56.189Z","finished_at":"2018-06-13T21:48:03.082Z","duration":546.8927,"queued_duration":1.13273,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f","short_id":"e0a0159d","created_at":"2018-06-13T22:54:25.000+02:00","parent_ids":["c1d690443589a457b18b39b7003ccb762bcf401f"],"title":"[vernac] Add option to force building really mutual induction schemes","message":"[vernac] Add option to force building really mutual induction schemes\n\nCurrently, if one of the inductives is non recursive, it defaults to a\ncase analysis schems taking fewer predicates and methods just for that\ninductive. This irregularity prevents doing a combined scheme afterwards\nto gather all eliminators into one, as combined scheme expects all the\neliminators to have the same predicates and methods. I have a use case\nin building function graphs in Equations where some of the inductives\nmight not be recursive but I expect many other use cases could exist.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-13T22:54:25.000+02:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-13T22:54:25.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f"},"pipeline":{"id":23813161,"iid":1367,"project_id":6138686,"sha":"e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f","ref":"pr-7801","status":"failed","source":"push","created_at":"2018-06-13T21:07:09.392Z","updated_at":"2018-06-15T09:38:24.726Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/23813161"},"web_url":"https://gitlab.com/coq/coq/-/jobs/74719143","artifacts":[{"file_type":"trace","size":17672,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":74719142,"status":"success","stage":"test","name":"validate:base+32bit","ref":"pr-7801","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-13T21:07:10.048Z","started_at":"2018-06-13T21:38:55.669Z","finished_at":"2018-06-13T21:50:24.968Z","duration":689.2991,"queued_duration":0.555323,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f","short_id":"e0a0159d","created_at":"2018-06-13T22:54:25.000+02:00","parent_ids":["c1d690443589a457b18b39b7003ccb762bcf401f"],"title":"[vernac] Add option to force building really mutual induction schemes","message":"[vernac] Add option to force building really mutual induction schemes\n\nCurrently, if one of the inductives is non recursive, it defaults to a\ncase analysis schems taking fewer predicates and methods just for that\ninductive. This irregularity prevents doing a combined scheme afterwards\nto gather all eliminators into one, as combined scheme expects all the\neliminators to have the same predicates and methods. I have a use case\nin building function graphs in Equations where some of the inductives\nmight not be recursive but I expect many other use cases could exist.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-13T22:54:25.000+02:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-13T22:54:25.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f"},"pipeline":{"id":23813161,"iid":1367,"project_id":6138686,"sha":"e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f","ref":"pr-7801","status":"failed","source":"push","created_at":"2018-06-13T21:07:09.392Z","updated_at":"2018-06-15T09:38:24.726Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/23813161"},"web_url":"https://gitlab.com/coq/coq/-/jobs/74719142","artifacts":[{"file_type":"trace","size":16661,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":74719141,"status":"success","stage":"test","name":"validate:base","ref":"pr-7801","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-13T21:07:10.018Z","started_at":"2018-06-13T21:38:55.298Z","finished_at":"2018-06-13T21:48:33.232Z","duration":577.93361,"queued_duration":0.120794,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f","short_id":"e0a0159d","created_at":"2018-06-13T22:54:25.000+02:00","parent_ids":["c1d690443589a457b18b39b7003ccb762bcf401f"],"title":"[vernac] Add option to force building really mutual induction schemes","message":"[vernac] Add option to force building really mutual induction schemes\n\nCurrently, if one of the inductives is non recursive, it defaults to a\ncase analysis schems taking fewer predicates and methods just for that\ninductive. This irregularity prevents doing a combined scheme afterwards\nto gather all eliminators into one, as combined scheme expects all the\neliminators to have the same predicates and methods. I have a use case\nin building function graphs in Equations where some of the inductives\nmight not be recursive but I expect many other use cases could exist.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-13T22:54:25.000+02:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-13T22:54:25.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f"},"pipeline":{"id":23813161,"iid":1367,"project_id":6138686,"sha":"e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f","ref":"pr-7801","status":"failed","source":"push","created_at":"2018-06-13T21:07:09.392Z","updated_at":"2018-06-15T09:38:24.726Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/23813161"},"web_url":"https://gitlab.com/coq/coq/-/jobs/74719141","artifacts":[{"file_type":"trace","size":17674,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":74719140,"status":"success","stage":"test","name":"test-suite:edge+flambda","ref":"pr-7801","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-13T21:07:09.986Z","started_at":"2018-06-13T21:38:55.389Z","finished_at":"2018-06-13T21:50:49.204Z","duration":713.814677,"queued_duration":0.142373,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f","short_id":"e0a0159d","created_at":"2018-06-13T22:54:25.000+02:00","parent_ids":["c1d690443589a457b18b39b7003ccb762bcf401f"],"title":"[vernac] Add option to force building really mutual induction schemes","message":"[vernac] Add option to force building really mutual induction schemes\n\nCurrently, if one of the inductives is non recursive, it defaults to a\ncase analysis schems taking fewer predicates and methods just for that\ninductive. This irregularity prevents doing a combined scheme afterwards\nto gather all eliminators into one, as combined scheme expects all the\neliminators to have the same predicates and methods. I have a use case\nin building function graphs in Equations where some of the inductives\nmight not be recursive but I expect many other use cases could exist.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-13T22:54:25.000+02:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-13T22:54:25.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f"},"pipeline":{"id":23813161,"iid":1367,"project_id":6138686,"sha":"e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f","ref":"pr-7801","status":"failed","source":"push","created_at":"2018-06-13T21:07:09.392Z","updated_at":"2018-06-15T09:38:24.726Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/23813161"},"web_url":"https://gitlab.com/coq/coq/-/jobs/74719140","artifacts":[{"file_type":"trace","size":60333,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":74719138,"status":"success","stage":"test","name":"test-suite:edge","ref":"pr-7801","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-13T21:07:09.951Z","started_at":"2018-06-13T21:38:55.472Z","finished_at":"2018-06-13T21:49:54.898Z","duration":659.426331,"queued_duration":0.165032,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f","short_id":"e0a0159d","created_at":"2018-06-13T22:54:25.000+02:00","parent_ids":["c1d690443589a457b18b39b7003ccb762bcf401f"],"title":"[vernac] Add option to force building really mutual induction schemes","message":"[vernac] Add option to force building really mutual induction schemes\n\nCurrently, if one of the inductives is non recursive, it defaults to a\ncase analysis schems taking fewer predicates and methods just for that\ninductive. This irregularity prevents doing a combined scheme afterwards\nto gather all eliminators into one, as combined scheme expects all the\neliminators to have the same predicates and methods. I have a use case\nin building function graphs in Equations where some of the inductives\nmight not be recursive but I expect many other use cases could exist.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-13T22:54:25.000+02:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-13T22:54:25.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f"},"pipeline":{"id":23813161,"iid":1367,"project_id":6138686,"sha":"e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f","ref":"pr-7801","status":"failed","source":"push","created_at":"2018-06-13T21:07:09.392Z","updated_at":"2018-06-15T09:38:24.726Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/23813161"},"web_url":"https://gitlab.com/coq/coq/-/jobs/74719138","artifacts":[{"file_type":"trace","size":59276,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":74719137,"status":"success","stage":"test","name":"test-suite:base+32bit","ref":"pr-7801","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-13T21:07:09.895Z","started_at":"2018-06-13T21:38:55.546Z","finished_at":"2018-06-13T21:45:00.544Z","duration":364.998067,"queued_duration":0.156674,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f","short_id":"e0a0159d","created_at":"2018-06-13T22:54:25.000+02:00","parent_ids":["c1d690443589a457b18b39b7003ccb762bcf401f"],"title":"[vernac] Add option to force building really mutual induction schemes","message":"[vernac] Add option to force building really mutual induction schemes\n\nCurrently, if one of the inductives is non recursive, it defaults to a\ncase analysis schems taking fewer predicates and methods just for that\ninductive. This irregularity prevents doing a combined scheme afterwards\nto gather all eliminators into one, as combined scheme expects all the\neliminators to have the same predicates and methods. I have a use case\nin building function graphs in Equations where some of the inductives\nmight not be recursive but I expect many other use cases could exist.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-13T22:54:25.000+02:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-13T22:54:25.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f"},"pipeline":{"id":23813161,"iid":1367,"project_id":6138686,"sha":"e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f","ref":"pr-7801","status":"failed","source":"push","created_at":"2018-06-13T21:07:09.392Z","updated_at":"2018-06-15T09:38:24.726Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/23813161"},"web_url":"https://gitlab.com/coq/coq/-/jobs/74719137","artifacts":[{"file_type":"trace","size":60376,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":74719136,"status":"success","stage":"test","name":"test-suite:base","ref":"pr-7801","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-13T21:07:09.863Z","started_at":"2018-06-13T21:38:56.119Z","finished_at":"2018-06-13T21:50:20.542Z","duration":684.422694,"queued_duration":0.643561,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f","short_id":"e0a0159d","created_at":"2018-06-13T22:54:25.000+02:00","parent_ids":["c1d690443589a457b18b39b7003ccb762bcf401f"],"title":"[vernac] Add option to force building really mutual induction schemes","message":"[vernac] Add option to force building really mutual induction schemes\n\nCurrently, if one of the inductives is non recursive, it defaults to a\ncase analysis schems taking fewer predicates and methods just for that\ninductive. This irregularity prevents doing a combined scheme afterwards\nto gather all eliminators into one, as combined scheme expects all the\neliminators to have the same predicates and methods. I have a use case\nin building function graphs in Equations where some of the inductives\nmight not be recursive but I expect many other use cases could exist.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-13T22:54:25.000+02:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-13T22:54:25.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f"},"pipeline":{"id":23813161,"iid":1367,"project_id":6138686,"sha":"e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f","ref":"pr-7801","status":"failed","source":"push","created_at":"2018-06-13T21:07:09.392Z","updated_at":"2018-06-15T09:38:24.726Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/23813161"},"web_url":"https://gitlab.com/coq/coq/-/jobs/74719136","artifacts":[{"file_type":"trace","size":60302,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":74719135,"status":"success","stage":"test","name":"documentation","ref":"pr-7801","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-13T21:07:09.826Z","started_at":"2018-06-13T21:38:55.763Z","finished_at":"2018-06-13T21:44:54.812Z","duration":359.049426,"queued_duration":0.129064,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f","short_id":"e0a0159d","created_at":"2018-06-13T22:54:25.000+02:00","parent_ids":["c1d690443589a457b18b39b7003ccb762bcf401f"],"title":"[vernac] Add option to force building really mutual induction schemes","message":"[vernac] Add option to force building really mutual induction schemes\n\nCurrently, if one of the inductives is non recursive, it defaults to a\ncase analysis schems taking fewer predicates and methods just for that\ninductive. This irregularity prevents doing a combined scheme afterwards\nto gather all eliminators into one, as combined scheme expects all the\neliminators to have the same predicates and methods. I have a use case\nin building function graphs in Equations where some of the inductives\nmight not be recursive but I expect many other use cases could exist.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-13T22:54:25.000+02:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-13T22:54:25.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f"},"pipeline":{"id":23813161,"iid":1367,"project_id":6138686,"sha":"e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f","ref":"pr-7801","status":"failed","source":"push","created_at":"2018-06-13T21:07:09.392Z","updated_at":"2018-06-15T09:38:24.726Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/23813161"},"web_url":"https://gitlab.com/coq/coq/-/jobs/74719135","artifacts":[{"file_type":"trace","size":25123,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":74719134,"status":"success","stage":"test","name":"warnings:edge","ref":"pr-7801","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-13T21:07:09.749Z","started_at":"2018-06-13T21:38:55.900Z","finished_at":"2018-06-13T21:45:36.312Z","duration":400.412225,"queued_duration":0.192789,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f","short_id":"e0a0159d","created_at":"2018-06-13T22:54:25.000+02:00","parent_ids":["c1d690443589a457b18b39b7003ccb762bcf401f"],"title":"[vernac] Add option to force building really mutual induction schemes","message":"[vernac] Add option to force building really mutual induction schemes\n\nCurrently, if one of the inductives is non recursive, it defaults to a\ncase analysis schems taking fewer predicates and methods just for that\ninductive. This irregularity prevents doing a combined scheme afterwards\nto gather all eliminators into one, as combined scheme expects all the\neliminators to have the same predicates and methods. I have a use case\nin building function graphs in Equations where some of the inductives\nmight not be recursive but I expect many other use cases could exist.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-13T22:54:25.000+02:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-13T22:54:25.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f"},"pipeline":{"id":23813161,"iid":1367,"project_id":6138686,"sha":"e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f","ref":"pr-7801","status":"failed","source":"push","created_at":"2018-06-13T21:07:09.392Z","updated_at":"2018-06-15T09:38:24.726Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/23813161"},"web_url":"https://gitlab.com/coq/coq/-/jobs/74719134","artifacts":[{"file_type":"trace","size":65786,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":74719133,"status":"success","stage":"test","name":"warnings:base","ref":"pr-7801","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-13T21:07:09.686Z","started_at":"2018-06-13T21:38:55.938Z","finished_at":"2018-06-13T21:45:12.380Z","duration":376.442748,"queued_duration":0.153003,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f","short_id":"e0a0159d","created_at":"2018-06-13T22:54:25.000+02:00","parent_ids":["c1d690443589a457b18b39b7003ccb762bcf401f"],"title":"[vernac] Add option to force building really mutual induction schemes","message":"[vernac] Add option to force building really mutual induction schemes\n\nCurrently, if one of the inductives is non recursive, it defaults to a\ncase analysis schems taking fewer predicates and methods just for that\ninductive. This irregularity prevents doing a combined scheme afterwards\nto gather all eliminators into one, as combined scheme expects all the\neliminators to have the same predicates and methods. I have a use case\nin building function graphs in Equations where some of the inductives\nmight not be recursive but I expect many other use cases could exist.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-13T22:54:25.000+02:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-13T22:54:25.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f"},"pipeline":{"id":23813161,"iid":1367,"project_id":6138686,"sha":"e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f","ref":"pr-7801","status":"failed","source":"push","created_at":"2018-06-13T21:07:09.392Z","updated_at":"2018-06-15T09:38:24.726Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/23813161"},"web_url":"https://gitlab.com/coq/coq/-/jobs/74719133","artifacts":[{"file_type":"trace","size":66707,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":74719132,"status":"success","stage":"test","name":"windows32","ref":"pr-7801","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-13T21:07:09.649Z","started_at":"2018-06-13T21:38:56.737Z","finished_at":"2018-06-13T22:54:41.686Z","duration":4544.948874,"queued_duration":0.885185,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f","short_id":"e0a0159d","created_at":"2018-06-13T22:54:25.000+02:00","parent_ids":["c1d690443589a457b18b39b7003ccb762bcf401f"],"title":"[vernac] Add option to force building really mutual induction schemes","message":"[vernac] Add option to force building really mutual induction schemes\n\nCurrently, if one of the inductives is non recursive, it defaults to a\ncase analysis schems taking fewer predicates and methods just for that\ninductive. This irregularity prevents doing a combined scheme afterwards\nto gather all eliminators into one, as combined scheme expects all the\neliminators to have the same predicates and methods. I have a use case\nin building function graphs in Equations where some of the inductives\nmight not be recursive but I expect many other use cases could exist.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-13T22:54:25.000+02:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-13T22:54:25.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f"},"pipeline":{"id":23813161,"iid":1367,"project_id":6138686,"sha":"e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f","ref":"pr-7801","status":"failed","source":"push","created_at":"2018-06-13T21:07:09.392Z","updated_at":"2018-06-15T09:38:24.726Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/23813161"},"web_url":"https://gitlab.com/coq/coq/-/jobs/74719132","artifacts":[{"file_type":"trace","size":3520636,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":"2018-06-20T22:54:15.688Z","tag_list":["windows"]}
{"id":74719131,"status":"success","stage":"test","name":"windows64","ref":"pr-7801","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-13T21:07:09.587Z","started_at":"2018-06-13T21:38:56.623Z","finished_at":"2018-06-13T22:53:32.230Z","duration":4475.607269,"queued_duration":0.707272,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f","short_id":"e0a0159d","created_at":"2018-06-13T22:54:25.000+02:00","parent_ids":["c1d690443589a457b18b39b7003ccb762bcf401f"],"title":"[vernac] Add option to force building really mutual induction schemes","message":"[vernac] Add option to force building really mutual induction schemes\n\nCurrently, if one of the inductives is non recursive, it defaults to a\ncase analysis schems taking fewer predicates and methods just for that\ninductive. This irregularity prevents doing a combined scheme afterwards\nto gather all eliminators into one, as combined scheme expects all the\neliminators to have the same predicates and methods. I have a use case\nin building function graphs in Equations where some of the inductives\nmight not be recursive but I expect many other use cases could exist.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-13T22:54:25.000+02:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-13T22:54:25.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f"},"pipeline":{"id":23813161,"iid":1367,"project_id":6138686,"sha":"e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f","ref":"pr-7801","status":"failed","source":"push","created_at":"2018-06-13T21:07:09.392Z","updated_at":"2018-06-15T09:38:24.726Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/23813161"},"web_url":"https://gitlab.com/coq/coq/-/jobs/74719131","artifacts":[{"file_type":"trace","size":3538874,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":"2018-06-20T22:53:06.184Z","tag_list":["windows"]}
{"id":74719130,"status":"success","stage":"build","name":"build:edge+flambda","ref":"pr-7801","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-13T21:07:09.533Z","started_at":"2018-06-13T21:07:11.773Z","finished_at":"2018-06-13T21:38:52.433Z","duration":1900.659781,"queued_duration":0.787001,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f","short_id":"e0a0159d","created_at":"2018-06-13T22:54:25.000+02:00","parent_ids":["c1d690443589a457b18b39b7003ccb762bcf401f"],"title":"[vernac] Add option to force building really mutual induction schemes","message":"[vernac] Add option to force building really mutual induction schemes\n\nCurrently, if one of the inductives is non recursive, it defaults to a\ncase analysis schems taking fewer predicates and methods just for that\ninductive. This irregularity prevents doing a combined scheme afterwards\nto gather all eliminators into one, as combined scheme expects all the\neliminators to have the same predicates and methods. I have a use case\nin building function graphs in Equations where some of the inductives\nmight not be recursive but I expect many other use cases could exist.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-13T22:54:25.000+02:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-13T22:54:25.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f"},"pipeline":{"id":23813161,"iid":1367,"project_id":6138686,"sha":"e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f","ref":"pr-7801","status":"failed","source":"push","created_at":"2018-06-13T21:07:09.392Z","updated_at":"2018-06-15T09:38:24.726Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/23813161"},"web_url":"https://gitlab.com/coq/coq/-/jobs/74719130","artifacts":[{"file_type":"trace","size":175008,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2018-06-20T21:38:51.530Z","tag_list":[]}
{"id":74719129,"status":"success","stage":"build","name":"build:edge","ref":"pr-7801","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-13T21:07:09.496Z","started_at":"2018-06-13T21:07:11.630Z","finished_at":"2018-06-13T21:17:16.125Z","duration":604.49429,"queued_duration":0.601383,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f","short_id":"e0a0159d","created_at":"2018-06-13T22:54:25.000+02:00","parent_ids":["c1d690443589a457b18b39b7003ccb762bcf401f"],"title":"[vernac] Add option to force building really mutual induction schemes","message":"[vernac] Add option to force building really mutual induction schemes\n\nCurrently, if one of the inductives is non recursive, it defaults to a\ncase analysis schems taking fewer predicates and methods just for that\ninductive. This irregularity prevents doing a combined scheme afterwards\nto gather all eliminators into one, as combined scheme expects all the\neliminators to have the same predicates and methods. I have a use case\nin building function graphs in Equations where some of the inductives\nmight not be recursive but I expect many other use cases could exist.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-13T22:54:25.000+02:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-13T22:54:25.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f"},"pipeline":{"id":23813161,"iid":1367,"project_id":6138686,"sha":"e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f","ref":"pr-7801","status":"failed","source":"push","created_at":"2018-06-13T21:07:09.392Z","updated_at":"2018-06-15T09:38:24.726Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/23813161"},"web_url":"https://gitlab.com/coq/coq/-/jobs/74719129","artifacts":[{"file_type":"trace","size":228725,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":"2018-06-20T21:17:14.821Z","tag_list":[]}
{"id":74719128,"status":"success","stage":"build","name":"build:base+32bit","ref":"pr-7801","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-13T21:07:09.458Z","started_at":"2018-06-13T21:07:11.426Z","finished_at":"2018-06-13T21:17:44.983Z","duration":633.556667,"queued_duration":0.35832,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f","short_id":"e0a0159d","created_at":"2018-06-13T22:54:25.000+02:00","parent_ids":["c1d690443589a457b18b39b7003ccb762bcf401f"],"title":"[vernac] Add option to force building really mutual induction schemes","message":"[vernac] Add option to force building really mutual induction schemes\n\nCurrently, if one of the inductives is non recursive, it defaults to a\ncase analysis schems taking fewer predicates and methods just for that\ninductive. This irregularity prevents doing a combined scheme afterwards\nto gather all eliminators into one, as combined scheme expects all the\neliminators to have the same predicates and methods. I have a use case\nin building function graphs in Equations where some of the inductives\nmight not be recursive but I expect many other use cases could exist.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-13T22:54:25.000+02:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-13T22:54:25.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f"},"pipeline":{"id":23813161,"iid":1367,"project_id":6138686,"sha":"e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f","ref":"pr-7801","status":"failed","source":"push","created_at":"2018-06-13T21:07:09.392Z","updated_at":"2018-06-15T09:38:24.726Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/23813161"},"web_url":"https://gitlab.com/coq/coq/-/jobs/74719128","artifacts":[{"file_type":"trace","size":224511,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":"2018-06-20T21:17:43.846Z","tag_list":[]}
{"id":74719127,"status":"success","stage":"build","name":"build:base","ref":"pr-7801","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-13T21:07:09.414Z","started_at":"2018-06-13T21:07:11.344Z","finished_at":"2018-06-13T21:24:01.490Z","duration":1010.145777,"queued_duration":0.231517,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f","short_id":"e0a0159d","created_at":"2018-06-13T22:54:25.000+02:00","parent_ids":["c1d690443589a457b18b39b7003ccb762bcf401f"],"title":"[vernac] Add option to force building really mutual induction schemes","message":"[vernac] Add option to force building really mutual induction schemes\n\nCurrently, if one of the inductives is non recursive, it defaults to a\ncase analysis schems taking fewer predicates and methods just for that\ninductive. This irregularity prevents doing a combined scheme afterwards\nto gather all eliminators into one, as combined scheme expects all the\neliminators to have the same predicates and methods. I have a use case\nin building function graphs in Equations where some of the inductives\nmight not be recursive but I expect many other use cases could exist.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-13T22:54:25.000+02:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-13T22:54:25.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f"},"pipeline":{"id":23813161,"iid":1367,"project_id":6138686,"sha":"e0a0159d7219a3d7e81f46001dcb2fdf1b466f8f","ref":"pr-7801","status":"failed","source":"push","created_at":"2018-06-13T21:07:09.392Z","updated_at":"2018-06-15T09:38:24.726Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/23813161"},"web_url":"https://gitlab.com/coq/coq/-/jobs/74719127","artifacts":[{"file_type":"trace","size":278104,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2018-06-20T21:24:00.402Z","tag_list":[]}
