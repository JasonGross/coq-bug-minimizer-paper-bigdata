{"id":338663149,"status":"canceled","stage":"stage-1","name":"pkg:nix","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-10-31T15:28:34.153Z","started_at":null,"finished_at":"2019-10-31T15:29:51.613Z","duration":null,"queued_duration":86514704.62164561,"user":{"id":617846,"username":"vbgl","name":"Vincent Laporte","state":"active","avatar_url":"https://secure.gravatar.com/avatar/a9cc04eae73a9d2aed54473fa2cd8949?s=80&d=identicon","web_url":"https://gitlab.com/vbgl","created_at":"2016-07-14T11:57:17.912Z","bio":"","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"a5b6ef21637403d233786f876849c9a98499537b","short_id":"a5b6ef21","created_at":"2019-10-31T14:40:32.000+01:00","parent_ids":["ce837d592b14095770b5c4a2a8c8040b20893718"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-10-31T14:40:32.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/a5b6ef21637403d233786f876849c9a98499537b"},"pipeline":{"id":92837721,"iid":11682,"project_id":6138686,"sha":"a5b6ef21637403d233786f876849c9a98499537b","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-10-31T13:41:15.446Z","updated_at":"2019-10-31T16:49:42.501Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/92837721"},"web_url":"https://gitlab.com/coq/coq/-/jobs/338663149","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":338522232,"status":"success","stage":"stage-4","name":"library:ci-corn","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-10-31T13:41:16.899Z","started_at":"2019-10-31T15:38:48.389Z","finished_at":"2019-10-31T16:17:23.766Z","duration":2315.377213,"queued_duration":6.482279,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"a5b6ef21637403d233786f876849c9a98499537b","short_id":"a5b6ef21","created_at":"2019-10-31T14:40:32.000+01:00","parent_ids":["ce837d592b14095770b5c4a2a8c8040b20893718"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-10-31T14:40:32.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/a5b6ef21637403d233786f876849c9a98499537b"},"pipeline":{"id":92837721,"iid":11682,"project_id":6138686,"sha":"a5b6ef21637403d233786f876849c9a98499537b","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-10-31T13:41:15.446Z","updated_at":"2019-10-31T16:49:42.501Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/92837721"},"web_url":"https://gitlab.com/coq/coq/-/jobs/338522232","artifacts":[{"file_type":"trace","size":365047,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":338522231,"status":"success","stage":"stage-3","name":"library:ci-math-classes","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-10-31T13:41:16.875Z","started_at":"2019-10-31T15:29:25.329Z","finished_at":"2019-10-31T15:38:40.092Z","duration":554.76256,"queued_duration":157.53041,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"a5b6ef21637403d233786f876849c9a98499537b","short_id":"a5b6ef21","created_at":"2019-10-31T14:40:32.000+01:00","parent_ids":["ce837d592b14095770b5c4a2a8c8040b20893718"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-10-31T14:40:32.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/a5b6ef21637403d233786f876849c9a98499537b"},"pipeline":{"id":92837721,"iid":11682,"project_id":6138686,"sha":"a5b6ef21637403d233786f876849c9a98499537b","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-10-31T13:41:15.446Z","updated_at":"2019-10-31T16:49:42.501Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/92837721"},"web_url":"https://gitlab.com/coq/coq/-/jobs/338522231","artifacts":[{"file_type":"trace","size":170121,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":338522230,"status":"success","stage":"stage-3","name":"library:ci-color","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-10-31T13:41:16.849Z","started_at":"2019-10-31T15:29:24.092Z","finished_at":"2019-10-31T15:52:34.234Z","duration":1390.142159,"queued_duration":156.339,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"a5b6ef21637403d233786f876849c9a98499537b","short_id":"a5b6ef21","created_at":"2019-10-31T14:40:32.000+01:00","parent_ids":["ce837d592b14095770b5c4a2a8c8040b20893718"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-10-31T14:40:32.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/a5b6ef21637403d233786f876849c9a98499537b"},"pipeline":{"id":92837721,"iid":11682,"project_id":6138686,"sha":"a5b6ef21637403d233786f876849c9a98499537b","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-10-31T13:41:15.446Z","updated_at":"2019-10-31T16:49:42.501Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/92837721"},"web_url":"https://gitlab.com/coq/coq/-/jobs/338522230","artifacts":[{"file_type":"trace","size":216603,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":338522229,"status":"success","stage":"stage-2","name":"plugin:ci-relation_algebra","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-10-31T13:41:16.820Z","started_at":"2019-10-31T15:29:23.920Z","finished_at":"2019-10-31T15:35:29.851Z","duration":365.931391,"queued_duration":1710.802664,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"a5b6ef21637403d233786f876849c9a98499537b","short_id":"a5b6ef21","created_at":"2019-10-31T14:40:32.000+01:00","parent_ids":["ce837d592b14095770b5c4a2a8c8040b20893718"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-10-31T14:40:32.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/a5b6ef21637403d233786f876849c9a98499537b"},"pipeline":{"id":92837721,"iid":11682,"project_id":6138686,"sha":"a5b6ef21637403d233786f876849c9a98499537b","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-10-31T13:41:15.446Z","updated_at":"2019-10-31T16:49:42.501Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/92837721"},"web_url":"https://gitlab.com/coq/coq/-/jobs/338522229","artifacts":[{"file_type":"trace","size":56249,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":338522228,"status":"success","stage":"stage-2","name":"plugin:ci-quickchick","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-10-31T13:41:16.799Z","started_at":"2019-10-31T15:29:14.823Z","finished_at":"2019-10-31T15:34:21.161Z","duration":306.338169,"queued_duration":1120.107699,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"a5b6ef21637403d233786f876849c9a98499537b","short_id":"a5b6ef21","created_at":"2019-10-31T14:40:32.000+01:00","parent_ids":["ce837d592b14095770b5c4a2a8c8040b20893718"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-10-31T14:40:32.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/a5b6ef21637403d233786f876849c9a98499537b"},"pipeline":{"id":92837721,"iid":11682,"project_id":6138686,"sha":"a5b6ef21637403d233786f876849c9a98499537b","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-10-31T13:41:15.446Z","updated_at":"2019-10-31T16:49:42.501Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/92837721"},"web_url":"https://gitlab.com/coq/coq/-/jobs/338522228","artifacts":[{"file_type":"trace","size":263549,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":338522227,"status":"success","stage":"stage-2","name":"plugin:ci-perennial","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-10-31T13:41:16.773Z","started_at":"2019-10-31T15:28:52.513Z","finished_at":"2019-10-31T15:53:43.811Z","duration":1491.297672,"queued_duration":1097.848552,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"a5b6ef21637403d233786f876849c9a98499537b","short_id":"a5b6ef21","created_at":"2019-10-31T14:40:32.000+01:00","parent_ids":["ce837d592b14095770b5c4a2a8c8040b20893718"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-10-31T14:40:32.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/a5b6ef21637403d233786f876849c9a98499537b"},"pipeline":{"id":92837721,"iid":11682,"project_id":6138686,"sha":"a5b6ef21637403d233786f876849c9a98499537b","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-10-31T13:41:15.446Z","updated_at":"2019-10-31T16:49:42.501Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/92837721"},"web_url":"https://gitlab.com/coq/coq/-/jobs/338522227","artifacts":[{"file_type":"trace","size":61826,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":338522226,"status":"success","stage":"stage-2","name":"plugin:ci-paramcoq","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-10-31T13:41:16.744Z","started_at":"2019-10-31T15:28:38.300Z","finished_at":"2019-10-31T15:31:00.554Z","duration":142.254214,"queued_duration":1665.234783,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"a5b6ef21637403d233786f876849c9a98499537b","short_id":"a5b6ef21","created_at":"2019-10-31T14:40:32.000+01:00","parent_ids":["ce837d592b14095770b5c4a2a8c8040b20893718"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-10-31T14:40:32.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/a5b6ef21637403d233786f876849c9a98499537b"},"pipeline":{"id":92837721,"iid":11682,"project_id":6138686,"sha":"a5b6ef21637403d233786f876849c9a98499537b","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-10-31T13:41:15.446Z","updated_at":"2019-10-31T16:49:42.501Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/92837721"},"web_url":"https://gitlab.com/coq/coq/-/jobs/338522226","artifacts":[{"file_type":"trace","size":110871,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":338522224,"status":"success","stage":"stage-2","name":"plugin:ci-mtac2","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-10-31T13:41:16.721Z","started_at":"2019-10-31T15:27:38.495Z","finished_at":"2019-10-31T15:33:23.612Z","duration":345.116841,"queued_duration":1605.492058,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"a5b6ef21637403d233786f876849c9a98499537b","short_id":"a5b6ef21","created_at":"2019-10-31T14:40:32.000+01:00","parent_ids":["ce837d592b14095770b5c4a2a8c8040b20893718"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-10-31T14:40:32.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/a5b6ef21637403d233786f876849c9a98499537b"},"pipeline":{"id":92837721,"iid":11682,"project_id":6138686,"sha":"a5b6ef21637403d233786f876849c9a98499537b","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-10-31T13:41:15.446Z","updated_at":"2019-10-31T16:49:42.501Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/92837721"},"web_url":"https://gitlab.com/coq/coq/-/jobs/338522224","artifacts":[{"file_type":"trace","size":173990,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":338522222,"status":"success","stage":"stage-2","name":"plugin:ci-fiat_parsers","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-10-31T13:41:16.697Z","started_at":"2019-10-31T15:26:49.110Z","finished_at":"2019-10-31T15:42:37.048Z","duration":947.937557,"queued_duration":1556.162747,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"a5b6ef21637403d233786f876849c9a98499537b","short_id":"a5b6ef21","created_at":"2019-10-31T14:40:32.000+01:00","parent_ids":["ce837d592b14095770b5c4a2a8c8040b20893718"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-10-31T14:40:32.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/a5b6ef21637403d233786f876849c9a98499537b"},"pipeline":{"id":92837721,"iid":11682,"project_id":6138686,"sha":"a5b6ef21637403d233786f876849c9a98499537b","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-10-31T13:41:15.446Z","updated_at":"2019-10-31T16:49:42.501Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/92837721"},"web_url":"https://gitlab.com/coq/coq/-/jobs/338522222","artifacts":[{"file_type":"trace","size":638475,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":338522221,"status":"success","stage":"stage-2","name":"plugin:ci-equations","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-10-31T13:41:16.669Z","started_at":"2019-10-31T15:26:47.968Z","finished_at":"2019-10-31T15:30:22.791Z","duration":214.822928,"queued_duration":1555.069199,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"a5b6ef21637403d233786f876849c9a98499537b","short_id":"a5b6ef21","created_at":"2019-10-31T14:40:32.000+01:00","parent_ids":["ce837d592b14095770b5c4a2a8c8040b20893718"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-10-31T14:40:32.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/a5b6ef21637403d233786f876849c9a98499537b"},"pipeline":{"id":92837721,"iid":11682,"project_id":6138686,"sha":"a5b6ef21637403d233786f876849c9a98499537b","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-10-31T13:41:15.446Z","updated_at":"2019-10-31T16:49:42.501Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/92837721"},"web_url":"https://gitlab.com/coq/coq/-/jobs/338522221","artifacts":[{"file_type":"trace","size":102391,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":338522220,"status":"success","stage":"stage-2","name":"plugin:ci-elpi","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-10-31T13:41:16.637Z","started_at":"2019-10-31T15:26:24.786Z","finished_at":"2019-10-31T15:29:14.334Z","duration":169.548331,"queued_duration":1531.932684,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"a5b6ef21637403d233786f876849c9a98499537b","short_id":"a5b6ef21","created_at":"2019-10-31T14:40:32.000+01:00","parent_ids":["ce837d592b14095770b5c4a2a8c8040b20893718"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-10-31T14:40:32.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/a5b6ef21637403d233786f876849c9a98499537b"},"pipeline":{"id":92837721,"iid":11682,"project_id":6138686,"sha":"a5b6ef21637403d233786f876849c9a98499537b","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-10-31T13:41:15.446Z","updated_at":"2019-10-31T16:49:42.501Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/92837721"},"web_url":"https://gitlab.com/coq/coq/-/jobs/338522220","artifacts":[{"file_type":"trace","size":2343130,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":338522219,"status":"success","stage":"stage-2","name":"plugin:ci-coqhammer","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-10-31T13:41:16.620Z","started_at":"2019-10-31T15:26:21.645Z","finished_at":"2019-10-31T15:28:37.853Z","duration":136.20744,"queued_duration":1528.838388,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"a5b6ef21637403d233786f876849c9a98499537b","short_id":"a5b6ef21","created_at":"2019-10-31T14:40:32.000+01:00","parent_ids":["ce837d592b14095770b5c4a2a8c8040b20893718"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-10-31T14:40:32.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/a5b6ef21637403d233786f876849c9a98499537b"},"pipeline":{"id":92837721,"iid":11682,"project_id":6138686,"sha":"a5b6ef21637403d233786f876849c9a98499537b","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-10-31T13:41:15.446Z","updated_at":"2019-10-31T16:49:42.501Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/92837721"},"web_url":"https://gitlab.com/coq/coq/-/jobs/338522219","artifacts":[{"file_type":"trace","size":63738,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":338522218,"status":"success","stage":"stage-2","name":"plugin:ci-coq_dpdgraph","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-10-31T13:41:16.601Z","started_at":"2019-10-31T15:24:38.582Z","finished_at":"2019-10-31T15:26:24.031Z","duration":105.448557,"queued_duration":1425.83137,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"a5b6ef21637403d233786f876849c9a98499537b","short_id":"a5b6ef21","created_at":"2019-10-31T14:40:32.000+01:00","parent_ids":["ce837d592b14095770b5c4a2a8c8040b20893718"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-10-31T14:40:32.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/a5b6ef21637403d233786f876849c9a98499537b"},"pipeline":{"id":92837721,"iid":11682,"project_id":6138686,"sha":"a5b6ef21637403d233786f876849c9a98499537b","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-10-31T13:41:15.446Z","updated_at":"2019-10-31T16:49:42.501Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/92837721"},"web_url":"https://gitlab.com/coq/coq/-/jobs/338522218","artifacts":[{"file_type":"trace","size":69503,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":338522217,"status":"success","stage":"stage-2","name":"plugin:ci-bignums","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-10-31T13:41:16.584Z","started_at":"2019-10-31T15:24:32.129Z","finished_at":"2019-10-31T15:26:47.666Z","duration":135.536665,"queued_duration":837.513634,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"a5b6ef21637403d233786f876849c9a98499537b","short_id":"a5b6ef21","created_at":"2019-10-31T14:40:32.000+01:00","parent_ids":["ce837d592b14095770b5c4a2a8c8040b20893718"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-10-31T14:40:32.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/a5b6ef21637403d233786f876849c9a98499537b"},"pipeline":{"id":92837721,"iid":11682,"project_id":6138686,"sha":"a5b6ef21637403d233786f876849c9a98499537b","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-10-31T13:41:15.446Z","updated_at":"2019-10-31T16:49:42.501Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/92837721"},"web_url":"https://gitlab.com/coq/coq/-/jobs/338522217","artifacts":[{"file_type":"trace","size":46330,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":338522216,"status":"success","stage":"stage-2","name":"plugin:ci-aac_tactics","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-10-31T13:41:16.549Z","started_at":"2019-10-31T15:24:26.690Z","finished_at":"2019-10-31T15:26:20.971Z","duration":114.280884,"queued_duration":1414.002289,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"a5b6ef21637403d233786f876849c9a98499537b","short_id":"a5b6ef21","created_at":"2019-10-31T14:40:32.000+01:00","parent_ids":["ce837d592b14095770b5c4a2a8c8040b20893718"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-10-31T14:40:32.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/a5b6ef21637403d233786f876849c9a98499537b"},"pipeline":{"id":92837721,"iid":11682,"project_id":6138686,"sha":"a5b6ef21637403d233786f876849c9a98499537b","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-10-31T13:41:15.446Z","updated_at":"2019-10-31T16:49:42.501Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/92837721"},"web_url":"https://gitlab.com/coq/coq/-/jobs/338522216","artifacts":[{"file_type":"trace","size":77783,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":338522215,"status":"success","stage":"stage-2","name":"library:ci-vst","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-10-31T13:41:16.514Z","started_at":"2019-10-31T15:23:41.301Z","finished_at":"2019-10-31T16:38:07.884Z","duration":4466.582847,"queued_duration":786.741503,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"a5b6ef21637403d233786f876849c9a98499537b","short_id":"a5b6ef21","created_at":"2019-10-31T14:40:32.000+01:00","parent_ids":["ce837d592b14095770b5c4a2a8c8040b20893718"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-10-31T14:40:32.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/a5b6ef21637403d233786f876849c9a98499537b"},"pipeline":{"id":92837721,"iid":11682,"project_id":6138686,"sha":"a5b6ef21637403d233786f876849c9a98499537b","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-10-31T13:41:15.446Z","updated_at":"2019-10-31T16:49:42.501Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/92837721"},"web_url":"https://gitlab.com/coq/coq/-/jobs/338522215","artifacts":[{"file_type":"trace","size":202098,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":338522214,"status":"success","stage":"stage-2","name":"library:ci-verdi-raft","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-10-31T13:41:16.496Z","started_at":"2019-10-31T15:23:30.719Z","finished_at":"2019-10-31T15:44:51.000Z","duration":1280.281191,"queued_duration":776.206481,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"a5b6ef21637403d233786f876849c9a98499537b","short_id":"a5b6ef21","created_at":"2019-10-31T14:40:32.000+01:00","parent_ids":["ce837d592b14095770b5c4a2a8c8040b20893718"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-10-31T14:40:32.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/a5b6ef21637403d233786f876849c9a98499537b"},"pipeline":{"id":92837721,"iid":11682,"project_id":6138686,"sha":"a5b6ef21637403d233786f876849c9a98499537b","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-10-31T13:41:15.446Z","updated_at":"2019-10-31T16:49:42.501Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/92837721"},"web_url":"https://gitlab.com/coq/coq/-/jobs/338522214","artifacts":[{"file_type":"trace","size":199059,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":338522213,"status":"success","stage":"stage-2","name":"library:ci-unimath","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-10-31T13:41:16.479Z","started_at":"2019-10-31T15:22:21.678Z","finished_at":"2019-10-31T16:27:20.906Z","duration":3899.228143,"queued_duration":707.218461,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"a5b6ef21637403d233786f876849c9a98499537b","short_id":"a5b6ef21","created_at":"2019-10-31T14:40:32.000+01:00","parent_ids":["ce837d592b14095770b5c4a2a8c8040b20893718"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-10-31T14:40:32.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/a5b6ef21637403d233786f876849c9a98499537b"},"pipeline":{"id":92837721,"iid":11682,"project_id":6138686,"sha":"a5b6ef21637403d233786f876849c9a98499537b","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-10-31T13:41:15.446Z","updated_at":"2019-10-31T16:49:42.501Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/92837721"},"web_url":"https://gitlab.com/coq/coq/-/jobs/338522213","artifacts":[{"file_type":"trace","size":236040,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":338522212,"status":"success","stage":"stage-2","name":"library:ci-stdlib2","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-10-31T13:41:16.461Z","started_at":"2019-10-31T15:22:01.756Z","finished_at":"2019-10-31T15:27:38.246Z","duration":336.489991,"queued_duration":687.371023,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"a5b6ef21637403d233786f876849c9a98499537b","short_id":"a5b6ef21","created_at":"2019-10-31T14:40:32.000+01:00","parent_ids":["ce837d592b14095770b5c4a2a8c8040b20893718"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-10-31T14:40:32.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/a5b6ef21637403d233786f876849c9a98499537b"},"pipeline":{"id":92837721,"iid":11682,"project_id":6138686,"sha":"a5b6ef21637403d233786f876849c9a98499537b","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-10-31T13:41:15.446Z","updated_at":"2019-10-31T16:49:42.501Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/92837721"},"web_url":"https://gitlab.com/coq/coq/-/jobs/338522212","artifacts":[{"file_type":"trace","size":72018,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":338522211,"status":"failed","stage":"stage-2","name":"library:ci-sf","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":true,"created_at":"2019-10-31T13:41:16.435Z","started_at":"2019-10-31T15:21:48.813Z","finished_at":"2019-10-31T15:23:30.279Z","duration":101.465887,"queued_duration":1256.178964,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"a5b6ef21637403d233786f876849c9a98499537b","short_id":"a5b6ef21","created_at":"2019-10-31T14:40:32.000+01:00","parent_ids":["ce837d592b14095770b5c4a2a8c8040b20893718"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-10-31T14:40:32.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/a5b6ef21637403d233786f876849c9a98499537b"},"pipeline":{"id":92837721,"iid":11682,"project_id":6138686,"sha":"a5b6ef21637403d233786f876849c9a98499537b","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-10-31T13:41:15.446Z","updated_at":"2019-10-31T16:49:42.501Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/92837721"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/338522211","artifacts":[{"file_type":"trace","size":120879,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":338522210,"status":"success","stage":"stage-2","name":"library:ci-math-comp","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-10-31T13:41:16.415Z","started_at":"2019-10-31T15:21:40.482Z","finished_at":"2019-10-31T16:49:42.419Z","duration":5281.937668,"queued_duration":666.173735,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"a5b6ef21637403d233786f876849c9a98499537b","short_id":"a5b6ef21","created_at":"2019-10-31T14:40:32.000+01:00","parent_ids":["ce837d592b14095770b5c4a2a8c8040b20893718"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-10-31T14:40:32.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/a5b6ef21637403d233786f876849c9a98499537b"},"pipeline":{"id":92837721,"iid":11682,"project_id":6138686,"sha":"a5b6ef21637403d233786f876849c9a98499537b","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-10-31T13:41:15.446Z","updated_at":"2019-10-31T16:49:42.501Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/92837721"},"web_url":"https://gitlab.com/coq/coq/-/jobs/338522210","artifacts":[{"file_type":"trace","size":836517,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":338522209,"status":"success","stage":"stage-2","name":"library:ci-iris-lambda-rust","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-10-31T13:41:16.210Z","started_at":"2019-10-31T15:18:18.097Z","finished_at":"2019-10-31T15:45:52.914Z","duration":1654.816854,"queued_duration":463.874209,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"a5b6ef21637403d233786f876849c9a98499537b","short_id":"a5b6ef21","created_at":"2019-10-31T14:40:32.000+01:00","parent_ids":["ce837d592b14095770b5c4a2a8c8040b20893718"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-10-31T14:40:32.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/a5b6ef21637403d233786f876849c9a98499537b"},"pipeline":{"id":92837721,"iid":11682,"project_id":6138686,"sha":"a5b6ef21637403d233786f876849c9a98499537b","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-10-31T13:41:15.446Z","updated_at":"2019-10-31T16:49:42.501Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/92837721"},"web_url":"https://gitlab.com/coq/coq/-/jobs/338522209","artifacts":[{"file_type":"trace","size":348187,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":338522205,"status":"success","stage":"stage-2","name":"library:ci-hott","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-10-31T13:41:16.191Z","started_at":"2019-10-31T15:17:17.777Z","finished_at":"2019-10-31T15:28:52.000Z","duration":694.222385,"queued_duration":985.192417,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"a5b6ef21637403d233786f876849c9a98499537b","short_id":"a5b6ef21","created_at":"2019-10-31T14:40:32.000+01:00","parent_ids":["ce837d592b14095770b5c4a2a8c8040b20893718"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-10-31T14:40:32.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/a5b6ef21637403d233786f876849c9a98499537b"},"pipeline":{"id":92837721,"iid":11682,"project_id":6138686,"sha":"a5b6ef21637403d233786f876849c9a98499537b","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-10-31T13:41:15.446Z","updated_at":"2019-10-31T16:49:42.501Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/92837721"},"web_url":"https://gitlab.com/coq/coq/-/jobs/338522205","artifacts":[{"file_type":"trace","size":141208,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":338522203,"status":"success","stage":"stage-2","name":"library:ci-geocoq","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-10-31T13:41:16.174Z","started_at":"2019-10-31T15:16:55.325Z","finished_at":"2019-10-31T16:02:08.856Z","duration":2713.530128,"queued_duration":381.19886,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"a5b6ef21637403d233786f876849c9a98499537b","short_id":"a5b6ef21","created_at":"2019-10-31T14:40:32.000+01:00","parent_ids":["ce837d592b14095770b5c4a2a8c8040b20893718"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-10-31T14:40:32.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/a5b6ef21637403d233786f876849c9a98499537b"},"pipeline":{"id":92837721,"iid":11682,"project_id":6138686,"sha":"a5b6ef21637403d233786f876849c9a98499537b","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-10-31T13:41:15.446Z","updated_at":"2019-10-31T16:49:42.501Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/92837721"},"web_url":"https://gitlab.com/coq/coq/-/jobs/338522203","artifacts":[{"file_type":"trace","size":532929,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":338522201,"status":"success","stage":"stage-2","name":"library:ci-flocq","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-10-31T13:41:16.154Z","started_at":"2019-10-31T15:15:31.617Z","finished_at":"2019-10-31T15:23:41.056Z","duration":489.438907,"queued_duration":879.089412,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"a5b6ef21637403d233786f876849c9a98499537b","short_id":"a5b6ef21","created_at":"2019-10-31T14:40:32.000+01:00","parent_ids":["ce837d592b14095770b5c4a2a8c8040b20893718"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-10-31T14:40:32.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/a5b6ef21637403d233786f876849c9a98499537b"},"pipeline":{"id":92837721,"iid":11682,"project_id":6138686,"sha":"a5b6ef21637403d233786f876849c9a98499537b","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-10-31T13:41:15.446Z","updated_at":"2019-10-31T16:49:42.501Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/92837721"},"web_url":"https://gitlab.com/coq/coq/-/jobs/338522201","artifacts":[{"file_type":"trace","size":64082,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":338522200,"status":"success","stage":"stage-2","name":"library:ci-fiat-crypto-legacy","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-10-31T13:41:16.136Z","started_at":"2019-10-31T15:13:52.235Z","finished_at":"2019-10-31T16:42:52.369Z","duration":5340.133197,"queued_duration":198.202413,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"a5b6ef21637403d233786f876849c9a98499537b","short_id":"a5b6ef21","created_at":"2019-10-31T14:40:32.000+01:00","parent_ids":["ce837d592b14095770b5c4a2a8c8040b20893718"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-10-31T14:40:32.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/a5b6ef21637403d233786f876849c9a98499537b"},"pipeline":{"id":92837721,"iid":11682,"project_id":6138686,"sha":"a5b6ef21637403d233786f876849c9a98499537b","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-10-31T13:41:15.446Z","updated_at":"2019-10-31T16:49:42.501Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/92837721"},"web_url":"https://gitlab.com/coq/coq/-/jobs/338522200","artifacts":[{"file_type":"trace","size":701419,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":338522199,"status":"success","stage":"stage-2","name":"library:ci-fiat-crypto","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-10-31T13:41:16.115Z","started_at":"2019-10-31T15:13:49.114Z","finished_at":"2019-10-31T16:44:35.301Z","duration":5446.186571,"queued_duration":195.1431,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"a5b6ef21637403d233786f876849c9a98499537b","short_id":"a5b6ef21","created_at":"2019-10-31T14:40:32.000+01:00","parent_ids":["ce837d592b14095770b5c4a2a8c8040b20893718"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-10-31T14:40:32.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/a5b6ef21637403d233786f876849c9a98499537b"},"pipeline":{"id":92837721,"iid":11682,"project_id":6138686,"sha":"a5b6ef21637403d233786f876849c9a98499537b","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-10-31T13:41:15.446Z","updated_at":"2019-10-31T16:49:42.501Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/92837721"},"web_url":"https://gitlab.com/coq/coq/-/jobs/338522199","artifacts":[{"file_type":"trace","size":1443079,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":338522198,"status":"success","stage":"stage-2","name":"library:ci-fcsl-pcm","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-10-31T13:41:16.092Z","started_at":"2019-10-31T15:12:58.579Z","finished_at":"2019-10-31T15:14:49.485Z","duration":110.906158,"queued_duration":726.123274,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"a5b6ef21637403d233786f876849c9a98499537b","short_id":"a5b6ef21","created_at":"2019-10-31T14:40:32.000+01:00","parent_ids":["ce837d592b14095770b5c4a2a8c8040b20893718"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-10-31T14:40:32.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/a5b6ef21637403d233786f876849c9a98499537b"},"pipeline":{"id":92837721,"iid":11682,"project_id":6138686,"sha":"a5b6ef21637403d233786f876849c9a98499537b","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-10-31T13:41:15.446Z","updated_at":"2019-10-31T16:49:42.501Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/92837721"},"web_url":"https://gitlab.com/coq/coq/-/jobs/338522198","artifacts":[{"file_type":"trace","size":106095,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":338522197,"status":"success","stage":"stage-2","name":"library:ci-cross-crypto","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-10-31T13:41:16.068Z","started_at":"2019-10-31T15:11:37.060Z","finished_at":"2019-10-31T15:51:11.039Z","duration":2373.978543,"queued_duration":644.650135,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"a5b6ef21637403d233786f876849c9a98499537b","short_id":"a5b6ef21","created_at":"2019-10-31T14:40:32.000+01:00","parent_ids":["ce837d592b14095770b5c4a2a8c8040b20893718"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-10-31T14:40:32.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/a5b6ef21637403d233786f876849c9a98499537b"},"pipeline":{"id":92837721,"iid":11682,"project_id":6138686,"sha":"a5b6ef21637403d233786f876849c9a98499537b","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-10-31T13:41:15.446Z","updated_at":"2019-10-31T16:49:42.501Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/92837721"},"web_url":"https://gitlab.com/coq/coq/-/jobs/338522197","artifacts":[{"file_type":"trace","size":71712,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":338522196,"status":"success","stage":"stage-2","name":"library:ci-coquelicot","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-10-31T13:41:16.029Z","started_at":"2019-10-31T15:10:10.234Z","finished_at":"2019-10-31T15:12:58.317Z","duration":168.083208,"queued_duration":557.870841,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"a5b6ef21637403d233786f876849c9a98499537b","short_id":"a5b6ef21","created_at":"2019-10-31T14:40:32.000+01:00","parent_ids":["ce837d592b14095770b5c4a2a8c8040b20893718"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-10-31T14:40:32.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/a5b6ef21637403d233786f876849c9a98499537b"},"pipeline":{"id":92837721,"iid":11682,"project_id":6138686,"sha":"a5b6ef21637403d233786f876849c9a98499537b","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-10-31T13:41:15.446Z","updated_at":"2019-10-31T16:49:42.501Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/92837721"},"web_url":"https://gitlab.com/coq/coq/-/jobs/338522196","artifacts":[{"file_type":"trace","size":135754,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":338522195,"status":"success","stage":"stage-2","name":"library:ci-compcert","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-10-31T13:41:16.003Z","started_at":"2019-10-31T15:11:06.203Z","finished_at":"2019-10-31T15:24:31.829Z","duration":805.625734,"queued_duration":32.281349,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"a5b6ef21637403d233786f876849c9a98499537b","short_id":"a5b6ef21","created_at":"2019-10-31T14:40:32.000+01:00","parent_ids":["ce837d592b14095770b5c4a2a8c8040b20893718"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-10-31T14:40:32.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/a5b6ef21637403d233786f876849c9a98499537b"},"pipeline":{"id":92837721,"iid":11682,"project_id":6138686,"sha":"a5b6ef21637403d233786f876849c9a98499537b","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-10-31T13:41:15.446Z","updated_at":"2019-10-31T16:49:42.501Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/92837721"},"web_url":"https://gitlab.com/coq/coq/-/jobs/338522195","artifacts":[{"file_type":"trace","size":4194361,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":338522194,"status":"success","stage":"stage-2","name":"library:ci-bedrock2","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-10-31T13:41:15.985Z","started_at":"2019-10-31T15:10:02.101Z","finished_at":"2019-10-31T16:10:30.513Z","duration":3628.411464,"queued_duration":549.791685,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"a5b6ef21637403d233786f876849c9a98499537b","short_id":"a5b6ef21","created_at":"2019-10-31T14:40:32.000+01:00","parent_ids":["ce837d592b14095770b5c4a2a8c8040b20893718"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-10-31T14:40:32.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/a5b6ef21637403d233786f876849c9a98499537b"},"pipeline":{"id":92837721,"iid":11682,"project_id":6138686,"sha":"a5b6ef21637403d233786f876849c9a98499537b","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-10-31T13:41:15.446Z","updated_at":"2019-10-31T16:49:42.501Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/92837721"},"web_url":"https://gitlab.com/coq/coq/-/jobs/338522194","artifacts":[{"file_type":"trace","size":210750,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":338522193,"status":"success","stage":"stage-2","name":"library:ci-argosy","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-10-31T13:41:15.966Z","started_at":"2019-10-31T15:07:28.103Z","finished_at":"2019-10-31T15:10:01.712Z","duration":153.609623,"queued_duration":395.859679,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"a5b6ef21637403d233786f876849c9a98499537b","short_id":"a5b6ef21","created_at":"2019-10-31T14:40:32.000+01:00","parent_ids":["ce837d592b14095770b5c4a2a8c8040b20893718"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-10-31T14:40:32.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/a5b6ef21637403d233786f876849c9a98499537b"},"pipeline":{"id":92837721,"iid":11682,"project_id":6138686,"sha":"a5b6ef21637403d233786f876849c9a98499537b","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-10-31T13:41:15.446Z","updated_at":"2019-10-31T16:49:42.501Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/92837721"},"web_url":"https://gitlab.com/coq/coq/-/jobs/338522193","artifacts":[{"file_type":"trace","size":56676,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":338522192,"status":"success","stage":"stage-2","name":"validate:quick","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-10-31T13:41:15.941Z","started_at":"2019-10-31T15:14:49.775Z","finished_at":"2019-10-31T15:18:17.849Z","duration":208.074536,"queued_duration":38.257737,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"a5b6ef21637403d233786f876849c9a98499537b","short_id":"a5b6ef21","created_at":"2019-10-31T14:40:32.000+01:00","parent_ids":["ce837d592b14095770b5c4a2a8c8040b20893718"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-10-31T14:40:32.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/a5b6ef21637403d233786f876849c9a98499537b"},"pipeline":{"id":92837721,"iid":11682,"project_id":6138686,"sha":"a5b6ef21637403d233786f876849c9a98499537b","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-10-31T13:41:15.446Z","updated_at":"2019-10-31T16:49:42.501Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/92837721"},"web_url":"https://gitlab.com/coq/coq/-/jobs/338522192","artifacts":[{"file_type":"trace","size":63490,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":"2019-12-30T15:18:16.032Z","tag_list":[]}
{"id":338522191,"status":"success","stage":"stage-2","name":"validate:edge+flambda","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-10-31T13:41:15.914Z","started_at":"2019-10-31T15:10:39.979Z","finished_at":"2019-10-31T15:17:17.175Z","duration":397.196122,"queued_duration":6.108935,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"a5b6ef21637403d233786f876849c9a98499537b","short_id":"a5b6ef21","created_at":"2019-10-31T14:40:32.000+01:00","parent_ids":["ce837d592b14095770b5c4a2a8c8040b20893718"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-10-31T14:40:32.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/a5b6ef21637403d233786f876849c9a98499537b"},"pipeline":{"id":92837721,"iid":11682,"project_id":6138686,"sha":"a5b6ef21637403d233786f876849c9a98499537b","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-10-31T13:41:15.446Z","updated_at":"2019-10-31T16:49:42.501Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/92837721"},"web_url":"https://gitlab.com/coq/coq/-/jobs/338522191","artifacts":[{"file_type":"trace","size":252298,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":"2019-12-30T15:17:14.742Z","tag_list":[]}
{"id":338522190,"status":"success","stage":"stage-2","name":"validate:base+32bit","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-10-31T13:41:15.894Z","started_at":"2019-10-31T15:07:15.137Z","finished_at":"2019-10-31T15:11:05.893Z","duration":230.756151,"queued_duration":287.096955,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"a5b6ef21637403d233786f876849c9a98499537b","short_id":"a5b6ef21","created_at":"2019-10-31T14:40:32.000+01:00","parent_ids":["ce837d592b14095770b5c4a2a8c8040b20893718"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-10-31T14:40:32.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/a5b6ef21637403d233786f876849c9a98499537b"},"pipeline":{"id":92837721,"iid":11682,"project_id":6138686,"sha":"a5b6ef21637403d233786f876849c9a98499537b","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-10-31T13:41:15.446Z","updated_at":"2019-10-31T16:49:42.501Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/92837721"},"web_url":"https://gitlab.com/coq/coq/-/jobs/338522190","artifacts":[{"file_type":"trace","size":62307,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":"2019-12-30T15:11:00.533Z","tag_list":[]}
{"id":338522188,"status":"success","stage":"stage-2","name":"validate:base","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-10-31T13:41:15.872Z","started_at":"2019-10-31T15:05:43.170Z","finished_at":"2019-10-31T15:11:36.546Z","duration":353.376456,"queued_duration":290.97457,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"a5b6ef21637403d233786f876849c9a98499537b","short_id":"a5b6ef21","created_at":"2019-10-31T14:40:32.000+01:00","parent_ids":["ce837d592b14095770b5c4a2a8c8040b20893718"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-10-31T14:40:32.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/a5b6ef21637403d233786f876849c9a98499537b"},"pipeline":{"id":92837721,"iid":11682,"project_id":6138686,"sha":"a5b6ef21637403d233786f876849c9a98499537b","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-10-31T13:41:15.446Z","updated_at":"2019-10-31T16:49:42.501Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/92837721"},"web_url":"https://gitlab.com/coq/coq/-/jobs/338522188","artifacts":[{"file_type":"trace","size":108574,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":"2019-12-30T15:11:33.627Z","tag_list":[]}
{"id":338522187,"status":"failed","stage":"stage-2","name":"test-suite:base+async","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":true,"created_at":"2019-10-31T13:41:15.845Z","started_at":"2019-10-31T15:05:21.474Z","finished_at":"2019-10-31T15:37:31.903Z","duration":1930.42918,"queued_duration":269.338404,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"a5b6ef21637403d233786f876849c9a98499537b","short_id":"a5b6ef21","created_at":"2019-10-31T14:40:32.000+01:00","parent_ids":["ce837d592b14095770b5c4a2a8c8040b20893718"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-10-31T14:40:32.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/a5b6ef21637403d233786f876849c9a98499537b"},"pipeline":{"id":92837721,"iid":11682,"project_id":6138686,"sha":"a5b6ef21637403d233786f876849c9a98499537b","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-10-31T13:41:15.446Z","updated_at":"2019-10-31T16:49:42.501Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/92837721"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/338522187","artifacts":[{"file_type":"trace","size":119994,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":338522186,"status":"failed","stage":"stage-2","name":"test-suite:egde:dune:dev","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-10-31T13:41:15.824Z","started_at":"2019-10-31T15:04:51.299Z","finished_at":"2019-10-31T15:24:26.192Z","duration":1174.893128,"queued_duration":34.851514,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"a5b6ef21637403d233786f876849c9a98499537b","short_id":"a5b6ef21","created_at":"2019-10-31T14:40:32.000+01:00","parent_ids":["ce837d592b14095770b5c4a2a8c8040b20893718"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-10-31T14:40:32.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/a5b6ef21637403d233786f876849c9a98499537b"},"pipeline":{"id":92837721,"iid":11682,"project_id":6138686,"sha":"a5b6ef21637403d233786f876849c9a98499537b","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-10-31T13:41:15.446Z","updated_at":"2019-10-31T16:49:42.501Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/92837721"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/338522186","artifacts":[{"file_type":"trace","size":120720,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":338522185,"status":"failed","stage":"stage-2","name":"test-suite:edge+flambda","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-10-31T13:41:15.804Z","started_at":"2019-10-31T15:10:34.155Z","finished_at":"2019-10-31T15:26:48.587Z","duration":974.431682,"queued_duration":0.337531,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"a5b6ef21637403d233786f876849c9a98499537b","short_id":"a5b6ef21","created_at":"2019-10-31T14:40:32.000+01:00","parent_ids":["ce837d592b14095770b5c4a2a8c8040b20893718"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-10-31T14:40:32.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/a5b6ef21637403d233786f876849c9a98499537b"},"pipeline":{"id":92837721,"iid":11682,"project_id":6138686,"sha":"a5b6ef21637403d233786f876849c9a98499537b","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-10-31T13:41:15.446Z","updated_at":"2019-10-31T16:49:42.501Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/92837721"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/338522185","artifacts":[{"file_type":"trace","size":258154,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":338522184,"status":"failed","stage":"stage-2","name":"test-suite:base+32bit","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-10-31T13:41:15.784Z","started_at":"2019-10-31T15:04:36.147Z","finished_at":"2019-10-31T15:24:02.669Z","duration":1166.521858,"queued_duration":128.159841,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"a5b6ef21637403d233786f876849c9a98499537b","short_id":"a5b6ef21","created_at":"2019-10-31T14:40:32.000+01:00","parent_ids":["ce837d592b14095770b5c4a2a8c8040b20893718"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-10-31T14:40:32.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/a5b6ef21637403d233786f876849c9a98499537b"},"pipeline":{"id":92837721,"iid":11682,"project_id":6138686,"sha":"a5b6ef21637403d233786f876849c9a98499537b","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-10-31T13:41:15.446Z","updated_at":"2019-10-31T16:49:42.501Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/92837721"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/338522184","artifacts":[{"file_type":"trace","size":89222,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":338522183,"status":"failed","stage":"stage-2","name":"test-suite:base","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-10-31T13:41:15.765Z","started_at":"2019-10-31T15:02:28.170Z","finished_at":"2019-10-31T15:21:40.178Z","duration":1152.007668,"queued_duration":96.087116,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"a5b6ef21637403d233786f876849c9a98499537b","short_id":"a5b6ef21","created_at":"2019-10-31T14:40:32.000+01:00","parent_ids":["ce837d592b14095770b5c4a2a8c8040b20893718"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-10-31T14:40:32.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/a5b6ef21637403d233786f876849c9a98499537b"},"pipeline":{"id":92837721,"iid":11682,"project_id":6138686,"sha":"a5b6ef21637403d233786f876849c9a98499537b","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-10-31T13:41:15.446Z","updated_at":"2019-10-31T16:49:42.501Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/92837721"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/338522183","artifacts":[{"file_type":"trace","size":259815,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":338522182,"status":"success","stage":"stage-2","name":"doc:ml-api:odoc","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-10-31T13:41:15.739Z","started_at":"2019-10-31T15:04:36.088Z","finished_at":"2019-10-31T15:08:33.592Z","duration":237.503536,"queued_duration":19.695066,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"a5b6ef21637403d233786f876849c9a98499537b","short_id":"a5b6ef21","created_at":"2019-10-31T14:40:32.000+01:00","parent_ids":["ce837d592b14095770b5c4a2a8c8040b20893718"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-10-31T14:40:32.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/a5b6ef21637403d233786f876849c9a98499537b"},"pipeline":{"id":92837721,"iid":11682,"project_id":6138686,"sha":"a5b6ef21637403d233786f876849c9a98499537b","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-10-31T13:41:15.446Z","updated_at":"2019-10-31T16:49:42.501Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/92837721"},"web_url":"https://gitlab.com/coq/coq/-/jobs/338522182","artifacts":[{"file_type":"trace","size":75298,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2019-12-30T15:08:30.872Z","tag_list":[]}
{"id":338522181,"status":"success","stage":"stage-2","name":"doc:stdlib:dune","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-10-31T13:41:15.720Z","started_at":"2019-10-31T15:04:35.163Z","finished_at":"2019-10-31T15:21:17.095Z","duration":1001.932216,"queued_duration":18.826241,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"a5b6ef21637403d233786f876849c9a98499537b","short_id":"a5b6ef21","created_at":"2019-10-31T14:40:32.000+01:00","parent_ids":["ce837d592b14095770b5c4a2a8c8040b20893718"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-10-31T14:40:32.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/a5b6ef21637403d233786f876849c9a98499537b"},"pipeline":{"id":92837721,"iid":11682,"project_id":6138686,"sha":"a5b6ef21637403d233786f876849c9a98499537b","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-10-31T13:41:15.446Z","updated_at":"2019-10-31T16:49:42.501Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/92837721"},"web_url":"https://gitlab.com/coq/coq/-/jobs/338522181","artifacts":[{"file_type":"trace","size":26485,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2019-12-30T15:21:15.314Z","tag_list":[]}
{"id":338522180,"status":"success","stage":"stage-2","name":"doc:refman:dune","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-10-31T13:41:15.701Z","started_at":"2019-10-31T15:04:16.477Z","finished_at":"2019-10-31T15:16:55.064Z","duration":758.58715,"queued_duration":0.251946,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"a5b6ef21637403d233786f876849c9a98499537b","short_id":"a5b6ef21","created_at":"2019-10-31T14:40:32.000+01:00","parent_ids":["ce837d592b14095770b5c4a2a8c8040b20893718"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-10-31T14:40:32.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/a5b6ef21637403d233786f876849c9a98499537b"},"pipeline":{"id":92837721,"iid":11682,"project_id":6138686,"sha":"a5b6ef21637403d233786f876849c9a98499537b","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-10-31T13:41:15.446Z","updated_at":"2019-10-31T16:49:42.501Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/92837721"},"web_url":"https://gitlab.com/coq/coq/-/jobs/338522180","artifacts":[{"file_type":"trace","size":57036,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":"2019-12-30T15:16:48.982Z","tag_list":[]}
{"id":338522179,"status":"success","stage":"stage-2","name":"doc:refman","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-10-31T13:41:15.679Z","started_at":"2019-10-31T15:00:52.411Z","finished_at":"2019-10-31T15:07:27.608Z","duration":395.196794,"queued_duration":0.381202,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"a5b6ef21637403d233786f876849c9a98499537b","short_id":"a5b6ef21","created_at":"2019-10-31T14:40:32.000+01:00","parent_ids":["ce837d592b14095770b5c4a2a8c8040b20893718"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-10-31T14:40:32.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/a5b6ef21637403d233786f876849c9a98499537b"},"pipeline":{"id":92837721,"iid":11682,"project_id":6138686,"sha":"a5b6ef21637403d233786f876849c9a98499537b","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-10-31T13:41:15.446Z","updated_at":"2019-10-31T16:49:42.501Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/92837721"},"web_url":"https://gitlab.com/coq/coq/-/jobs/338522179","artifacts":[{"file_type":"trace","size":1383136,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":"2019-12-30T15:07:25.035Z","tag_list":[]}
{"id":338522178,"status":"success","stage":"stage-1","name":"plugin:plugin-tutorial","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-10-31T13:41:15.644Z","started_at":"2019-10-31T14:57:38.419Z","finished_at":"2019-10-31T14:59:13.160Z","duration":94.741903,"queued_duration":4581.022302,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"a5b6ef21637403d233786f876849c9a98499537b","short_id":"a5b6ef21","created_at":"2019-10-31T14:40:32.000+01:00","parent_ids":["ce837d592b14095770b5c4a2a8c8040b20893718"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-10-31T14:40:32.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/a5b6ef21637403d233786f876849c9a98499537b"},"pipeline":{"id":92837721,"iid":11682,"project_id":6138686,"sha":"a5b6ef21637403d233786f876849c9a98499537b","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-10-31T13:41:15.446Z","updated_at":"2019-10-31T16:49:42.501Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/92837721"},"web_url":"https://gitlab.com/coq/coq/-/jobs/338522178","artifacts":[{"file_type":"trace","size":81568,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":338522176,"status":"success","stage":"stage-1","name":"pkg:opam","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-10-31T13:41:15.601Z","started_at":"2019-10-31T14:56:04.982Z","finished_at":"2019-10-31T15:19:55.158Z","duration":1430.175445,"queued_duration":4487.622651,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"a5b6ef21637403d233786f876849c9a98499537b","short_id":"a5b6ef21","created_at":"2019-10-31T14:40:32.000+01:00","parent_ids":["ce837d592b14095770b5c4a2a8c8040b20893718"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-10-31T14:40:32.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/a5b6ef21637403d233786f876849c9a98499537b"},"pipeline":{"id":92837721,"iid":11682,"project_id":6138686,"sha":"a5b6ef21637403d233786f876849c9a98499537b","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-10-31T13:41:15.446Z","updated_at":"2019-10-31T16:49:42.501Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/92837721"},"web_url":"https://gitlab.com/coq/coq/-/jobs/338522176","artifacts":[{"file_type":"trace","size":18425,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":338522175,"status":"success","stage":"stage-1","name":"lint","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-10-31T13:41:15.585Z","started_at":"2019-10-31T14:56:04.921Z","finished_at":"2019-10-31T15:00:21.734Z","duration":256.812592,"queued_duration":4487.585367,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"a5b6ef21637403d233786f876849c9a98499537b","short_id":"a5b6ef21","created_at":"2019-10-31T14:40:32.000+01:00","parent_ids":["ce837d592b14095770b5c4a2a8c8040b20893718"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-10-31T14:40:32.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/a5b6ef21637403d233786f876849c9a98499537b"},"pipeline":{"id":92837721,"iid":11682,"project_id":6138686,"sha":"a5b6ef21637403d233786f876849c9a98499537b","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-10-31T13:41:15.446Z","updated_at":"2019-10-31T16:49:42.501Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/92837721"},"web_url":"https://gitlab.com/coq/coq/-/jobs/338522175","artifacts":[{"file_type":"trace","size":33903,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":338522174,"status":"success","stage":"stage-1","name":"windows64","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-10-31T13:41:15.562Z","started_at":"2019-10-31T13:41:17.635Z","finished_at":"2019-10-31T14:44:27.460Z","duration":3789.824405,"queued_duration":0.322041,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"a5b6ef21637403d233786f876849c9a98499537b","short_id":"a5b6ef21","created_at":"2019-10-31T14:40:32.000+01:00","parent_ids":["ce837d592b14095770b5c4a2a8c8040b20893718"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-10-31T14:40:32.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/a5b6ef21637403d233786f876849c9a98499537b"},"pipeline":{"id":92837721,"iid":11682,"project_id":6138686,"sha":"a5b6ef21637403d233786f876849c9a98499537b","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-10-31T13:41:15.446Z","updated_at":"2019-10-31T16:49:42.501Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/92837721"},"web_url":"https://gitlab.com/coq/coq/-/jobs/338522174","artifacts":[{"file_type":"trace","size":275190,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":"2019-11-07T14:44:26.127Z","tag_list":["windows"]}
{"id":338522173,"status":"success","stage":"stage-1","name":"build:quick","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":true,"created_at":"2019-10-31T13:41:15.545Z","started_at":"2019-10-31T14:56:04.614Z","finished_at":"2019-10-31T15:14:11.431Z","duration":1086.816973,"queued_duration":4487.340514,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"a5b6ef21637403d233786f876849c9a98499537b","short_id":"a5b6ef21","created_at":"2019-10-31T14:40:32.000+01:00","parent_ids":["ce837d592b14095770b5c4a2a8c8040b20893718"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-10-31T14:40:32.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/a5b6ef21637403d233786f876849c9a98499537b"},"pipeline":{"id":92837721,"iid":11682,"project_id":6138686,"sha":"a5b6ef21637403d233786f876849c9a98499537b","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-10-31T13:41:15.446Z","updated_at":"2019-10-31T16:49:42.501Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/92837721"},"web_url":"https://gitlab.com/coq/coq/-/jobs/338522173","artifacts":[{"file_type":"trace","size":174445,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2019-11-07T15:14:09.471Z","tag_list":[]}
{"id":338522171,"status":"success","stage":"stage-1","name":"build:base+async","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":true,"created_at":"2019-10-31T13:41:15.529Z","started_at":"2019-10-31T14:56:04.431Z","finished_at":"2019-10-31T15:58:16.760Z","duration":3732.328794,"queued_duration":4487.18112,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"a5b6ef21637403d233786f876849c9a98499537b","short_id":"a5b6ef21","created_at":"2019-10-31T14:40:32.000+01:00","parent_ids":["ce837d592b14095770b5c4a2a8c8040b20893718"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-10-31T14:40:32.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/a5b6ef21637403d233786f876849c9a98499537b"},"pipeline":{"id":92837721,"iid":11682,"project_id":6138686,"sha":"a5b6ef21637403d233786f876849c9a98499537b","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-10-31T13:41:15.446Z","updated_at":"2019-10-31T16:49:42.501Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/92837721"},"web_url":"https://gitlab.com/coq/coq/-/jobs/338522171","artifacts":[{"file_type":"trace","size":256713,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2019-11-07T15:58:13.992Z","tag_list":[]}
{"id":338522169,"status":"success","stage":"stage-1","name":"build:edge+flambda:dune:dev","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-10-31T13:41:15.514Z","started_at":"2019-10-31T14:55:09.013Z","finished_at":"2019-10-31T15:04:16.035Z","duration":547.021899,"queued_duration":4431.795425,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"a5b6ef21637403d233786f876849c9a98499537b","short_id":"a5b6ef21","created_at":"2019-10-31T14:40:32.000+01:00","parent_ids":["ce837d592b14095770b5c4a2a8c8040b20893718"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-10-31T14:40:32.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/a5b6ef21637403d233786f876849c9a98499537b"},"pipeline":{"id":92837721,"iid":11682,"project_id":6138686,"sha":"a5b6ef21637403d233786f876849c9a98499537b","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-10-31T13:41:15.446Z","updated_at":"2019-10-31T16:49:42.501Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/92837721"},"web_url":"https://gitlab.com/coq/coq/-/jobs/338522169","artifacts":[{"file_type":"trace","size":49696,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":"2019-11-07T15:04:12.968Z","tag_list":[]}
{"id":338522167,"status":"success","stage":"stage-1","name":"build:edge+flambda","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-10-31T13:41:15.499Z","started_at":"2019-10-31T14:51:43.916Z","finished_at":"2019-10-31T15:10:33.707Z","duration":1129.791913,"queued_duration":4226.732269,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"a5b6ef21637403d233786f876849c9a98499537b","short_id":"a5b6ef21","created_at":"2019-10-31T14:40:32.000+01:00","parent_ids":["ce837d592b14095770b5c4a2a8c8040b20893718"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-10-31T14:40:32.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/a5b6ef21637403d233786f876849c9a98499537b"},"pipeline":{"id":92837721,"iid":11682,"project_id":6138686,"sha":"a5b6ef21637403d233786f876849c9a98499537b","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-10-31T13:41:15.446Z","updated_at":"2019-10-31T16:49:42.501Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/92837721"},"web_url":"https://gitlab.com/coq/coq/-/jobs/338522167","artifacts":[{"file_type":"trace","size":282806,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":"2019-11-07T15:10:30.296Z","tag_list":[]}
{"id":338522166,"status":"success","stage":"stage-1","name":"build:base+32bit","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-10-31T13:41:15.482Z","started_at":"2019-10-31T14:48:38.352Z","finished_at":"2019-10-31T15:02:27.889Z","duration":829.537262,"queued_duration":4041.203597,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"a5b6ef21637403d233786f876849c9a98499537b","short_id":"a5b6ef21","created_at":"2019-10-31T14:40:32.000+01:00","parent_ids":["ce837d592b14095770b5c4a2a8c8040b20893718"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-10-31T14:40:32.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/a5b6ef21637403d233786f876849c9a98499537b"},"pipeline":{"id":92837721,"iid":11682,"project_id":6138686,"sha":"a5b6ef21637403d233786f876849c9a98499537b","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-10-31T13:41:15.446Z","updated_at":"2019-10-31T16:49:42.501Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/92837721"},"web_url":"https://gitlab.com/coq/coq/-/jobs/338522166","artifacts":[{"file_type":"trace","size":280497,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":"2019-11-07T15:02:24.673Z","tag_list":[]}
{"id":338522165,"status":"success","stage":"stage-1","name":"build:base","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-10-31T13:41:15.467Z","started_at":"2019-10-31T14:48:06.941Z","finished_at":"2019-10-31T15:00:51.909Z","duration":764.968452,"queued_duration":4009.841332,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"a5b6ef21637403d233786f876849c9a98499537b","short_id":"a5b6ef21","created_at":"2019-10-31T14:40:32.000+01:00","parent_ids":["ce837d592b14095770b5c4a2a8c8040b20893718"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-10-31T14:40:32.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/a5b6ef21637403d233786f876849c9a98499537b"},"pipeline":{"id":92837721,"iid":11682,"project_id":6138686,"sha":"a5b6ef21637403d233786f876849c9a98499537b","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-10-31T13:41:15.446Z","updated_at":"2019-10-31T16:49:42.501Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/92837721"},"web_url":"https://gitlab.com/coq/coq/-/jobs/338522165","artifacts":[{"file_type":"trace","size":314103,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":"2019-11-07T15:00:45.675Z","tag_list":[]}
