{"id":114894536,"status":"failed","stage":"test","name":"ci-vst","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-10-31T14:07:31.396Z","started_at":"2018-10-31T14:33:59.394Z","finished_at":"2018-10-31T14:36:58.436Z","duration":179.042012,"queued_duration":12.851933,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f","short_id":"ed0176d8","created_at":"2018-10-31T15:07:14.000+01:00","parent_ids":["199290ad752dde04256d235e495239cb830db6ee"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-10-31T15:07:14.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f"},"pipeline":{"id":34971694,"iid":4836,"project_id":6138686,"sha":"ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f","ref":"pr-6705","status":"failed","source":"push","created_at":"2018-10-31T14:07:30.202Z","updated_at":"2018-10-31T15:19:57.677Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/34971694"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/114894536","artifacts":[{"file_type":"trace","size":1058,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":114894535,"status":"failed","stage":"test","name":"ci-unimath","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-10-31T14:07:31.370Z","started_at":"2018-10-31T14:33:59.344Z","finished_at":"2018-10-31T14:36:53.237Z","duration":173.892593,"queued_duration":12.757118,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f","short_id":"ed0176d8","created_at":"2018-10-31T15:07:14.000+01:00","parent_ids":["199290ad752dde04256d235e495239cb830db6ee"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-10-31T15:07:14.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f"},"pipeline":{"id":34971694,"iid":4836,"project_id":6138686,"sha":"ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f","ref":"pr-6705","status":"failed","source":"push","created_at":"2018-10-31T14:07:30.202Z","updated_at":"2018-10-31T15:19:57.677Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/34971694"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/114894535","artifacts":[{"file_type":"trace","size":1058,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":114894534,"status":"failed","stage":"test","name":"ci-sf","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-10-31T14:07:31.344Z","started_at":"2018-10-31T14:33:59.295Z","finished_at":"2018-10-31T14:37:15.885Z","duration":196.589281,"queued_duration":12.147846,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f","short_id":"ed0176d8","created_at":"2018-10-31T15:07:14.000+01:00","parent_ids":["199290ad752dde04256d235e495239cb830db6ee"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-10-31T15:07:14.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f"},"pipeline":{"id":34971694,"iid":4836,"project_id":6138686,"sha":"ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f","ref":"pr-6705","status":"failed","source":"push","created_at":"2018-10-31T14:07:30.202Z","updated_at":"2018-10-31T15:19:57.677Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/34971694"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/114894534","artifacts":[{"file_type":"trace","size":1058,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":114894533,"status":"failed","stage":"test","name":"ci-quickchick","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-10-31T14:07:31.320Z","started_at":"2018-10-31T14:33:59.250Z","finished_at":"2018-10-31T14:36:42.524Z","duration":163.274598,"queued_duration":11.757733,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f","short_id":"ed0176d8","created_at":"2018-10-31T15:07:14.000+01:00","parent_ids":["199290ad752dde04256d235e495239cb830db6ee"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-10-31T15:07:14.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f"},"pipeline":{"id":34971694,"iid":4836,"project_id":6138686,"sha":"ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f","ref":"pr-6705","status":"failed","source":"push","created_at":"2018-10-31T14:07:30.202Z","updated_at":"2018-10-31T15:19:57.677Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/34971694"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/114894533","artifacts":[{"file_type":"trace","size":1058,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":114894532,"status":"failed","stage":"test","name":"ci-plugin-tutorial","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-10-31T14:07:31.294Z","started_at":"2018-10-31T14:33:59.208Z","finished_at":"2018-10-31T14:38:29.687Z","duration":270.479353,"queued_duration":11.409355,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f","short_id":"ed0176d8","created_at":"2018-10-31T15:07:14.000+01:00","parent_ids":["199290ad752dde04256d235e495239cb830db6ee"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-10-31T15:07:14.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f"},"pipeline":{"id":34971694,"iid":4836,"project_id":6138686,"sha":"ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f","ref":"pr-6705","status":"failed","source":"push","created_at":"2018-10-31T14:07:30.202Z","updated_at":"2018-10-31T15:19:57.677Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/34971694"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/114894532","artifacts":[{"file_type":"trace","size":1058,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":114894531,"status":"failed","stage":"test","name":"ci-pidetop","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-10-31T14:07:31.270Z","started_at":"2018-10-31T14:33:57.574Z","finished_at":"2018-10-31T14:36:36.969Z","duration":159.394467,"queued_duration":9.539023,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f","short_id":"ed0176d8","created_at":"2018-10-31T15:07:14.000+01:00","parent_ids":["199290ad752dde04256d235e495239cb830db6ee"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-10-31T15:07:14.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f"},"pipeline":{"id":34971694,"iid":4836,"project_id":6138686,"sha":"ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f","ref":"pr-6705","status":"failed","source":"push","created_at":"2018-10-31T14:07:30.202Z","updated_at":"2018-10-31T15:19:57.677Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/34971694"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/114894531","artifacts":[{"file_type":"trace","size":1058,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":114894529,"status":"failed","stage":"test","name":"ci-mtac2","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-10-31T14:07:31.245Z","started_at":"2018-10-31T14:33:57.526Z","finished_at":"2018-10-31T14:37:04.756Z","duration":187.230459,"queued_duration":9.367464,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f","short_id":"ed0176d8","created_at":"2018-10-31T15:07:14.000+01:00","parent_ids":["199290ad752dde04256d235e495239cb830db6ee"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-10-31T15:07:14.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f"},"pipeline":{"id":34971694,"iid":4836,"project_id":6138686,"sha":"ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f","ref":"pr-6705","status":"failed","source":"push","created_at":"2018-10-31T14:07:30.202Z","updated_at":"2018-10-31T15:19:57.677Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/34971694"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/114894529","artifacts":[{"file_type":"trace","size":1058,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":114894528,"status":"failed","stage":"test","name":"ci-math-comp","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-10-31T14:07:31.217Z","started_at":"2018-10-31T14:33:57.468Z","finished_at":"2018-10-31T14:34:05.204Z","duration":7.736162,"queued_duration":9.27534,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f","short_id":"ed0176d8","created_at":"2018-10-31T15:07:14.000+01:00","parent_ids":["199290ad752dde04256d235e495239cb830db6ee"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-10-31T15:07:14.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f"},"pipeline":{"id":34971694,"iid":4836,"project_id":6138686,"sha":"ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f","ref":"pr-6705","status":"failed","source":"push","created_at":"2018-10-31T14:07:30.202Z","updated_at":"2018-10-31T15:19:57.677Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/34971694"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/114894528","artifacts":[{"file_type":"trace","size":1152,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":114894527,"status":"failed","stage":"test","name":"ci-ltac2","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-10-31T14:07:31.192Z","started_at":"2018-10-31T14:33:57.344Z","finished_at":"2018-10-31T14:37:06.242Z","duration":188.898864,"queued_duration":9.11889,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f","short_id":"ed0176d8","created_at":"2018-10-31T15:07:14.000+01:00","parent_ids":["199290ad752dde04256d235e495239cb830db6ee"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-10-31T15:07:14.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f"},"pipeline":{"id":34971694,"iid":4836,"project_id":6138686,"sha":"ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f","ref":"pr-6705","status":"failed","source":"push","created_at":"2018-10-31T14:07:30.202Z","updated_at":"2018-10-31T15:19:57.677Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/34971694"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/114894527","artifacts":[{"file_type":"trace","size":1058,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":114894525,"status":"failed","stage":"test","name":"ci-iris-lambda-rust","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-10-31T14:07:31.165Z","started_at":"2018-10-31T14:33:57.291Z","finished_at":"2018-10-31T14:36:45.085Z","duration":167.793935,"queued_duration":9.034425,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f","short_id":"ed0176d8","created_at":"2018-10-31T15:07:14.000+01:00","parent_ids":["199290ad752dde04256d235e495239cb830db6ee"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-10-31T15:07:14.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f"},"pipeline":{"id":34971694,"iid":4836,"project_id":6138686,"sha":"ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f","ref":"pr-6705","status":"failed","source":"push","created_at":"2018-10-31T14:07:30.202Z","updated_at":"2018-10-31T15:19:57.677Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/34971694"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/114894525","artifacts":[{"file_type":"trace","size":1058,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":114894522,"status":"failed","stage":"test","name":"ci-hott","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-10-31T14:07:31.140Z","started_at":"2018-10-31T14:33:48.512Z","finished_at":"2018-10-31T14:37:06.836Z","duration":198.324351,"queued_duration":0.223462,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f","short_id":"ed0176d8","created_at":"2018-10-31T15:07:14.000+01:00","parent_ids":["199290ad752dde04256d235e495239cb830db6ee"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-10-31T15:07:14.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f"},"pipeline":{"id":34971694,"iid":4836,"project_id":6138686,"sha":"ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f","ref":"pr-6705","status":"failed","source":"push","created_at":"2018-10-31T14:07:30.202Z","updated_at":"2018-10-31T15:19:57.677Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/34971694"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/114894522","artifacts":[{"file_type":"trace","size":1058,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":114894520,"status":"failed","stage":"test","name":"ci-geocoq","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-10-31T14:07:31.116Z","started_at":"2018-10-31T14:33:48.365Z","finished_at":"2018-10-31T14:33:59.030Z","duration":10.664896,"queued_duration":0.044051,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f","short_id":"ed0176d8","created_at":"2018-10-31T15:07:14.000+01:00","parent_ids":["199290ad752dde04256d235e495239cb830db6ee"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-10-31T15:07:14.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f"},"pipeline":{"id":34971694,"iid":4836,"project_id":6138686,"sha":"ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f","ref":"pr-6705","status":"failed","source":"push","created_at":"2018-10-31T14:07:30.202Z","updated_at":"2018-10-31T15:19:57.677Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/34971694"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/114894520","artifacts":[{"file_type":"trace","size":136021,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":114894518,"status":"failed","stage":"test","name":"ci-formal-topology","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-10-31T14:07:31.089Z","started_at":"2018-10-31T14:33:48.526Z","finished_at":"2018-10-31T14:36:37.717Z","duration":169.190798,"queued_duration":0.17312,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f","short_id":"ed0176d8","created_at":"2018-10-31T15:07:14.000+01:00","parent_ids":["199290ad752dde04256d235e495239cb830db6ee"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-10-31T15:07:14.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f"},"pipeline":{"id":34971694,"iid":4836,"project_id":6138686,"sha":"ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f","ref":"pr-6705","status":"failed","source":"push","created_at":"2018-10-31T14:07:30.202Z","updated_at":"2018-10-31T15:19:57.677Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/34971694"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/114894518","artifacts":[{"file_type":"trace","size":1058,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":114894517,"status":"failed","stage":"test","name":"ci-flocq","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-10-31T14:07:31.063Z","started_at":"2018-10-31T14:33:57.222Z","finished_at":"2018-10-31T14:36:52.844Z","duration":175.622218,"queued_duration":8.836325,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f","short_id":"ed0176d8","created_at":"2018-10-31T15:07:14.000+01:00","parent_ids":["199290ad752dde04256d235e495239cb830db6ee"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-10-31T15:07:14.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f"},"pipeline":{"id":34971694,"iid":4836,"project_id":6138686,"sha":"ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f","ref":"pr-6705","status":"failed","source":"push","created_at":"2018-10-31T14:07:30.202Z","updated_at":"2018-10-31T15:19:57.677Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/34971694"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/114894517","artifacts":[{"file_type":"trace","size":1058,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":114894515,"status":"failed","stage":"test","name":"ci-fiat-parsers","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-10-31T14:07:31.039Z","started_at":"2018-10-31T14:33:57.099Z","finished_at":"2018-10-31T14:37:21.815Z","duration":204.716295,"queued_duration":8.679684,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f","short_id":"ed0176d8","created_at":"2018-10-31T15:07:14.000+01:00","parent_ids":["199290ad752dde04256d235e495239cb830db6ee"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-10-31T15:07:14.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f"},"pipeline":{"id":34971694,"iid":4836,"project_id":6138686,"sha":"ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f","ref":"pr-6705","status":"failed","source":"push","created_at":"2018-10-31T14:07:30.202Z","updated_at":"2018-10-31T15:19:57.677Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/34971694"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/114894515","artifacts":[{"file_type":"trace","size":1058,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":114894514,"status":"failed","stage":"test","name":"ci-fiat-crypto-legacy","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-10-31T14:07:31.014Z","started_at":"2018-10-31T14:33:57.032Z","finished_at":"2018-10-31T14:37:06.378Z","duration":189.345895,"queued_duration":8.576788,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f","short_id":"ed0176d8","created_at":"2018-10-31T15:07:14.000+01:00","parent_ids":["199290ad752dde04256d235e495239cb830db6ee"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-10-31T15:07:14.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f"},"pipeline":{"id":34971694,"iid":4836,"project_id":6138686,"sha":"ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f","ref":"pr-6705","status":"failed","source":"push","created_at":"2018-10-31T14:07:30.202Z","updated_at":"2018-10-31T15:19:57.677Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/34971694"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/114894514","artifacts":[{"file_type":"trace","size":1058,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":114894513,"status":"failed","stage":"test","name":"ci-fiat-crypto","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-10-31T14:07:30.989Z","started_at":"2018-10-31T14:33:56.278Z","finished_at":"2018-10-31T14:36:52.919Z","duration":176.641646,"queued_duration":7.788598,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f","short_id":"ed0176d8","created_at":"2018-10-31T15:07:14.000+01:00","parent_ids":["199290ad752dde04256d235e495239cb830db6ee"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-10-31T15:07:14.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f"},"pipeline":{"id":34971694,"iid":4836,"project_id":6138686,"sha":"ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f","ref":"pr-6705","status":"failed","source":"push","created_at":"2018-10-31T14:07:30.202Z","updated_at":"2018-10-31T15:19:57.677Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/34971694"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/114894513","artifacts":[{"file_type":"trace","size":1058,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":114894512,"status":"failed","stage":"test","name":"ci-fcsl-pcm","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-10-31T14:07:30.962Z","started_at":"2018-10-31T14:33:56.154Z","finished_at":"2018-10-31T14:36:42.824Z","duration":166.669625,"queued_duration":7.632858,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f","short_id":"ed0176d8","created_at":"2018-10-31T15:07:14.000+01:00","parent_ids":["199290ad752dde04256d235e495239cb830db6ee"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-10-31T15:07:14.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f"},"pipeline":{"id":34971694,"iid":4836,"project_id":6138686,"sha":"ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f","ref":"pr-6705","status":"failed","source":"push","created_at":"2018-10-31T14:07:30.202Z","updated_at":"2018-10-31T15:19:57.677Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/34971694"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/114894512","artifacts":[{"file_type":"trace","size":1058,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":114894509,"status":"failed","stage":"test","name":"ci-equations","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-10-31T14:07:30.937Z","started_at":"2018-10-31T14:33:55.707Z","finished_at":"2018-10-31T14:36:35.141Z","duration":159.434823,"queued_duration":7.157061,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f","short_id":"ed0176d8","created_at":"2018-10-31T15:07:14.000+01:00","parent_ids":["199290ad752dde04256d235e495239cb830db6ee"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-10-31T15:07:14.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f"},"pipeline":{"id":34971694,"iid":4836,"project_id":6138686,"sha":"ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f","ref":"pr-6705","status":"failed","source":"push","created_at":"2018-10-31T14:07:30.202Z","updated_at":"2018-10-31T15:19:57.677Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/34971694"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/114894509","artifacts":[{"file_type":"trace","size":1058,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":114894507,"status":"failed","stage":"test","name":"ci-elpi","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-10-31T14:07:30.911Z","started_at":"2018-10-31T14:33:48.802Z","finished_at":"2018-10-31T14:37:01.557Z","duration":192.75509,"queued_duration":0.218341,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f","short_id":"ed0176d8","created_at":"2018-10-31T15:07:14.000+01:00","parent_ids":["199290ad752dde04256d235e495239cb830db6ee"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-10-31T15:07:14.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f"},"pipeline":{"id":34971694,"iid":4836,"project_id":6138686,"sha":"ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f","ref":"pr-6705","status":"failed","source":"push","created_at":"2018-10-31T14:07:30.202Z","updated_at":"2018-10-31T15:19:57.677Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/34971694"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/114894507","artifacts":[{"file_type":"trace","size":1058,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":114894505,"status":"failed","stage":"test","name":"ci-cross-crypto","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-10-31T14:07:30.885Z","started_at":"2018-10-31T14:33:48.706Z","finished_at":"2018-10-31T14:33:57.089Z","duration":8.383043,"queued_duration":0.075995,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f","short_id":"ed0176d8","created_at":"2018-10-31T15:07:14.000+01:00","parent_ids":["199290ad752dde04256d235e495239cb830db6ee"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-10-31T15:07:14.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f"},"pipeline":{"id":34971694,"iid":4836,"project_id":6138686,"sha":"ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f","ref":"pr-6705","status":"failed","source":"push","created_at":"2018-10-31T14:07:30.202Z","updated_at":"2018-10-31T15:19:57.677Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/34971694"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/114894505","artifacts":[{"file_type":"trace","size":1445,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":114894502,"status":"failed","stage":"test","name":"ci-coquelicot","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-10-31T14:07:30.860Z","started_at":"2018-10-31T14:33:55.131Z","finished_at":"2018-10-31T14:36:35.293Z","duration":160.161139,"queued_duration":6.413497,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f","short_id":"ed0176d8","created_at":"2018-10-31T15:07:14.000+01:00","parent_ids":["199290ad752dde04256d235e495239cb830db6ee"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-10-31T15:07:14.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f"},"pipeline":{"id":34971694,"iid":4836,"project_id":6138686,"sha":"ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f","ref":"pr-6705","status":"failed","source":"push","created_at":"2018-10-31T14:07:30.202Z","updated_at":"2018-10-31T15:19:57.677Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/34971694"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/114894502","artifacts":[{"file_type":"trace","size":1058,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":114894501,"status":"failed","stage":"test","name":"ci-coq-dpdgraph","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-10-31T14:07:30.836Z","started_at":"2018-10-31T14:33:49.002Z","finished_at":"2018-10-31T14:36:42.813Z","duration":173.811321,"queued_duration":0.193069,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f","short_id":"ed0176d8","created_at":"2018-10-31T15:07:14.000+01:00","parent_ids":["199290ad752dde04256d235e495239cb830db6ee"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-10-31T15:07:14.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f"},"pipeline":{"id":34971694,"iid":4836,"project_id":6138686,"sha":"ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f","ref":"pr-6705","status":"failed","source":"push","created_at":"2018-10-31T14:07:30.202Z","updated_at":"2018-10-31T15:19:57.677Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/34971694"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/114894501","artifacts":[{"file_type":"trace","size":1058,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":114894498,"status":"failed","stage":"test","name":"ci-compcert","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-10-31T14:07:30.812Z","started_at":"2018-10-31T14:33:49.116Z","finished_at":"2018-10-31T14:36:54.022Z","duration":184.906137,"queued_duration":0.272082,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f","short_id":"ed0176d8","created_at":"2018-10-31T15:07:14.000+01:00","parent_ids":["199290ad752dde04256d235e495239cb830db6ee"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-10-31T15:07:14.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f"},"pipeline":{"id":34971694,"iid":4836,"project_id":6138686,"sha":"ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f","ref":"pr-6705","status":"failed","source":"push","created_at":"2018-10-31T14:07:30.202Z","updated_at":"2018-10-31T15:19:57.677Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/34971694"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/114894498","artifacts":[{"file_type":"trace","size":1058,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":114894495,"status":"failed","stage":"test","name":"ci-color","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-10-31T14:07:30.789Z","started_at":"2018-10-31T14:33:54.015Z","finished_at":"2018-10-31T14:36:35.047Z","duration":161.031409,"queued_duration":5.133823,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f","short_id":"ed0176d8","created_at":"2018-10-31T15:07:14.000+01:00","parent_ids":["199290ad752dde04256d235e495239cb830db6ee"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-10-31T15:07:14.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f"},"pipeline":{"id":34971694,"iid":4836,"project_id":6138686,"sha":"ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f","ref":"pr-6705","status":"failed","source":"push","created_at":"2018-10-31T14:07:30.202Z","updated_at":"2018-10-31T15:19:57.677Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/34971694"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/114894495","artifacts":[{"file_type":"trace","size":1058,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":114894492,"status":"failed","stage":"test","name":"ci-bignums","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-10-31T14:07:30.764Z","started_at":"2018-10-31T14:33:49.284Z","finished_at":"2018-10-31T14:36:33.406Z","duration":164.121729,"queued_duration":0.256122,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f","short_id":"ed0176d8","created_at":"2018-10-31T15:07:14.000+01:00","parent_ids":["199290ad752dde04256d235e495239cb830db6ee"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-10-31T15:07:14.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f"},"pipeline":{"id":34971694,"iid":4836,"project_id":6138686,"sha":"ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f","ref":"pr-6705","status":"failed","source":"push","created_at":"2018-10-31T14:07:30.202Z","updated_at":"2018-10-31T15:19:57.677Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/34971694"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/114894492","artifacts":[{"file_type":"trace","size":1058,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":114894491,"status":"success","stage":"test","name":"ci-bedrock2","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":true,"created_at":"2018-10-31T14:07:30.739Z","started_at":"2018-10-31T14:33:49.098Z","finished_at":"2018-10-31T14:50:34.605Z","duration":1005.507043,"queued_duration":0.037909,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f","short_id":"ed0176d8","created_at":"2018-10-31T15:07:14.000+01:00","parent_ids":["199290ad752dde04256d235e495239cb830db6ee"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-10-31T15:07:14.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f"},"pipeline":{"id":34971694,"iid":4836,"project_id":6138686,"sha":"ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f","ref":"pr-6705","status":"failed","source":"push","created_at":"2018-10-31T14:07:30.202Z","updated_at":"2018-10-31T15:19:57.677Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/34971694"},"web_url":"https://gitlab.com/coq/coq/-/jobs/114894491","artifacts":[{"file_type":"trace","size":312147,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":114894489,"status":"failed","stage":"test","name":"ci-aac-tactics","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-10-31T14:07:30.716Z","started_at":"2018-10-31T14:33:53.768Z","finished_at":"2018-10-31T14:36:25.090Z","duration":151.322496,"queued_duration":4.678071,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f","short_id":"ed0176d8","created_at":"2018-10-31T15:07:14.000+01:00","parent_ids":["199290ad752dde04256d235e495239cb830db6ee"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-10-31T15:07:14.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f"},"pipeline":{"id":34971694,"iid":4836,"project_id":6138686,"sha":"ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f","ref":"pr-6705","status":"failed","source":"push","created_at":"2018-10-31T14:07:30.202Z","updated_at":"2018-10-31T15:19:57.677Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/34971694"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/114894489","artifacts":[{"file_type":"trace","size":1058,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":114894488,"status":"failed","stage":"test","name":"validate:edge+flambda","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-10-31T14:07:30.692Z","started_at":"2018-10-31T14:33:53.470Z","finished_at":"2018-10-31T14:36:56.021Z","duration":182.550862,"queued_duration":4.340953,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f","short_id":"ed0176d8","created_at":"2018-10-31T15:07:14.000+01:00","parent_ids":["199290ad752dde04256d235e495239cb830db6ee"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-10-31T15:07:14.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f"},"pipeline":{"id":34971694,"iid":4836,"project_id":6138686,"sha":"ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f","ref":"pr-6705","status":"failed","source":"push","created_at":"2018-10-31T14:07:30.202Z","updated_at":"2018-10-31T15:19:57.677Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/34971694"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/114894488","artifacts":[{"file_type":"trace","size":1058,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":114894486,"status":"failed","stage":"test","name":"validate:edge","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-10-31T14:07:30.669Z","started_at":"2018-10-31T14:33:49.629Z","finished_at":"2018-10-31T14:36:24.699Z","duration":155.069622,"queued_duration":0.454818,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f","short_id":"ed0176d8","created_at":"2018-10-31T15:07:14.000+01:00","parent_ids":["199290ad752dde04256d235e495239cb830db6ee"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-10-31T15:07:14.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f"},"pipeline":{"id":34971694,"iid":4836,"project_id":6138686,"sha":"ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f","ref":"pr-6705","status":"failed","source":"push","created_at":"2018-10-31T14:07:30.202Z","updated_at":"2018-10-31T15:19:57.677Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/34971694"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/114894486","artifacts":[{"file_type":"trace","size":1058,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":114894485,"status":"failed","stage":"test","name":"validate:base+32bit","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-10-31T14:07:30.643Z","started_at":"2018-10-31T14:33:49.577Z","finished_at":"2018-10-31T14:36:23.699Z","duration":154.122304,"queued_duration":0.321781,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f","short_id":"ed0176d8","created_at":"2018-10-31T15:07:14.000+01:00","parent_ids":["199290ad752dde04256d235e495239cb830db6ee"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-10-31T15:07:14.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f"},"pipeline":{"id":34971694,"iid":4836,"project_id":6138686,"sha":"ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f","ref":"pr-6705","status":"failed","source":"push","created_at":"2018-10-31T14:07:30.202Z","updated_at":"2018-10-31T15:19:57.677Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/34971694"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/114894485","artifacts":[{"file_type":"trace","size":1058,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":114894484,"status":"success","stage":"test","name":"validate:base","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-10-31T14:07:30.618Z","started_at":"2018-10-31T14:33:49.465Z","finished_at":"2018-10-31T14:44:21.438Z","duration":631.972632,"queued_duration":0.132173,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f","short_id":"ed0176d8","created_at":"2018-10-31T15:07:14.000+01:00","parent_ids":["199290ad752dde04256d235e495239cb830db6ee"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-10-31T15:07:14.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f"},"pipeline":{"id":34971694,"iid":4836,"project_id":6138686,"sha":"ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f","ref":"pr-6705","status":"failed","source":"push","created_at":"2018-10-31T14:07:30.202Z","updated_at":"2018-10-31T15:19:57.677Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/34971694"},"web_url":"https://gitlab.com/coq/coq/-/jobs/114894484","artifacts":[{"file_type":"trace","size":50800,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":114894483,"status":"failed","stage":"test","name":"test-suite:egde:dune:dev","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-10-31T14:07:30.593Z","started_at":"2018-10-31T14:33:49.698Z","finished_at":"2018-10-31T14:37:15.642Z","duration":205.943695,"queued_duration":0.248946,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f","short_id":"ed0176d8","created_at":"2018-10-31T15:07:14.000+01:00","parent_ids":["199290ad752dde04256d235e495239cb830db6ee"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-10-31T15:07:14.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f"},"pipeline":{"id":34971694,"iid":4836,"project_id":6138686,"sha":"ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f","ref":"pr-6705","status":"failed","source":"push","created_at":"2018-10-31T14:07:30.202Z","updated_at":"2018-10-31T15:19:57.677Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/34971694"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/114894483","artifacts":[{"file_type":"trace","size":1229,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":114894480,"status":"failed","stage":"test","name":"test-suite:edge+flambda","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-10-31T14:07:30.569Z","started_at":"2018-10-31T14:33:50.671Z","finished_at":"2018-10-31T14:36:34.357Z","duration":163.686546,"queued_duration":1.113007,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f","short_id":"ed0176d8","created_at":"2018-10-31T15:07:14.000+01:00","parent_ids":["199290ad752dde04256d235e495239cb830db6ee"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-10-31T15:07:14.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f"},"pipeline":{"id":34971694,"iid":4836,"project_id":6138686,"sha":"ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f","ref":"pr-6705","status":"failed","source":"push","created_at":"2018-10-31T14:07:30.202Z","updated_at":"2018-10-31T15:19:57.677Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/34971694"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/114894480","artifacts":[{"file_type":"trace","size":1221,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":114894479,"status":"failed","stage":"test","name":"test-suite:edge","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-10-31T14:07:30.545Z","started_at":"2018-10-31T14:33:50.251Z","finished_at":"2018-10-31T14:36:23.068Z","duration":152.816463,"queued_duration":0.438514,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f","short_id":"ed0176d8","created_at":"2018-10-31T15:07:14.000+01:00","parent_ids":["199290ad752dde04256d235e495239cb830db6ee"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-10-31T15:07:14.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f"},"pipeline":{"id":34971694,"iid":4836,"project_id":6138686,"sha":"ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f","ref":"pr-6705","status":"failed","source":"push","created_at":"2018-10-31T14:07:30.202Z","updated_at":"2018-10-31T15:19:57.677Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/34971694"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/114894479","artifacts":[{"file_type":"trace","size":1221,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":114894477,"status":"failed","stage":"test","name":"test-suite:base+32bit","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-10-31T14:07:30.521Z","started_at":"2018-10-31T14:33:50.621Z","finished_at":"2018-10-31T14:36:25.701Z","duration":155.079617,"queued_duration":0.524487,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f","short_id":"ed0176d8","created_at":"2018-10-31T15:07:14.000+01:00","parent_ids":["199290ad752dde04256d235e495239cb830db6ee"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-10-31T15:07:14.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f"},"pipeline":{"id":34971694,"iid":4836,"project_id":6138686,"sha":"ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f","ref":"pr-6705","status":"failed","source":"push","created_at":"2018-10-31T14:07:30.202Z","updated_at":"2018-10-31T15:19:57.677Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/34971694"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/114894477","artifacts":[{"file_type":"trace","size":1221,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":114894475,"status":"failed","stage":"test","name":"test-suite:base","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-10-31T14:07:30.495Z","started_at":"2018-10-31T14:33:50.547Z","finished_at":"2018-10-31T14:36:22.204Z","duration":151.656623,"queued_duration":0.283254,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f","short_id":"ed0176d8","created_at":"2018-10-31T15:07:14.000+01:00","parent_ids":["199290ad752dde04256d235e495239cb830db6ee"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-10-31T15:07:14.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f"},"pipeline":{"id":34971694,"iid":4836,"project_id":6138686,"sha":"ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f","ref":"pr-6705","status":"failed","source":"push","created_at":"2018-10-31T14:07:30.202Z","updated_at":"2018-10-31T15:19:57.677Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/34971694"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/114894475","artifacts":[{"file_type":"trace","size":1221,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":114894474,"status":"failed","stage":"test","name":"doc:ml-api:odoc","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-10-31T14:07:30.471Z","started_at":"2018-10-31T14:33:52.879Z","finished_at":"2018-10-31T14:36:43.939Z","duration":171.060622,"queued_duration":2.496087,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f","short_id":"ed0176d8","created_at":"2018-10-31T15:07:14.000+01:00","parent_ids":["199290ad752dde04256d235e495239cb830db6ee"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-10-31T15:07:14.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f"},"pipeline":{"id":34971694,"iid":4836,"project_id":6138686,"sha":"ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f","ref":"pr-6705","status":"failed","source":"push","created_at":"2018-10-31T14:07:30.202Z","updated_at":"2018-10-31T15:19:57.677Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/34971694"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/114894474","artifacts":[{"file_type":"trace","size":1058,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":114894472,"status":"failed","stage":"test","name":"doc:refman","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-10-31T14:07:30.445Z","started_at":"2018-10-31T14:33:50.671Z","finished_at":"2018-10-31T14:36:32.668Z","duration":161.996594,"queued_duration":0.177571,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f","short_id":"ed0176d8","created_at":"2018-10-31T15:07:14.000+01:00","parent_ids":["199290ad752dde04256d235e495239cb830db6ee"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-10-31T15:07:14.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f"},"pipeline":{"id":34971694,"iid":4836,"project_id":6138686,"sha":"ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f","ref":"pr-6705","status":"failed","source":"push","created_at":"2018-10-31T14:07:30.202Z","updated_at":"2018-10-31T15:19:57.677Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/34971694"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/114894472","artifacts":[{"file_type":"trace","size":1058,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":114894471,"status":"success","stage":"test","name":"pkg:nix","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-10-31T14:07:30.420Z","started_at":"2018-10-31T14:33:52.443Z","finished_at":"2018-10-31T15:09:35.270Z","duration":2142.827496,"queued_duration":1.886781,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f","short_id":"ed0176d8","created_at":"2018-10-31T15:07:14.000+01:00","parent_ids":["199290ad752dde04256d235e495239cb830db6ee"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-10-31T15:07:14.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f"},"pipeline":{"id":34971694,"iid":4836,"project_id":6138686,"sha":"ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f","ref":"pr-6705","status":"failed","source":"push","created_at":"2018-10-31T14:07:30.202Z","updated_at":"2018-10-31T15:19:57.677Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/34971694"},"web_url":"https://gitlab.com/coq/coq/-/jobs/114894471","artifacts":[{"file_type":"trace","size":653964,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":114894469,"status":"failed","stage":"test","name":"pkg:opam","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-10-31T14:07:30.396Z","started_at":"2018-10-31T14:33:52.394Z","finished_at":"2018-10-31T14:36:43.290Z","duration":170.896201,"queued_duration":1.786961,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f","short_id":"ed0176d8","created_at":"2018-10-31T15:07:14.000+01:00","parent_ids":["199290ad752dde04256d235e495239cb830db6ee"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-10-31T15:07:14.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f"},"pipeline":{"id":34971694,"iid":4836,"project_id":6138686,"sha":"ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f","ref":"pr-6705","status":"failed","source":"push","created_at":"2018-10-31T14:07:30.202Z","updated_at":"2018-10-31T15:19:57.677Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/34971694"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/114894469","artifacts":[{"file_type":"trace","size":1058,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":114894467,"status":"failed","stage":"test","name":"windows64","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-10-31T14:07:30.366Z","started_at":"2018-10-31T15:19:48.804Z","finished_at":"2018-10-31T15:19:57.582Z","duration":8.778105,"queued_duration":2758.135057,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f","short_id":"ed0176d8","created_at":"2018-10-31T15:07:14.000+01:00","parent_ids":["199290ad752dde04256d235e495239cb830db6ee"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-10-31T15:07:14.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f"},"pipeline":{"id":34971694,"iid":4836,"project_id":6138686,"sha":"ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f","ref":"pr-6705","status":"failed","source":"push","created_at":"2018-10-31T14:07:30.202Z","updated_at":"2018-10-31T15:19:57.677Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/34971694"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/114894467","artifacts":[{"file_type":"trace","size":1496,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":"2018-11-07T15:19:56.962Z","tag_list":["windows"]}
{"id":114894464,"status":"success","stage":"build","name":"build:egde:dune:dev","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-10-31T14:07:30.330Z","started_at":"2018-10-31T14:07:32.931Z","finished_at":"2018-10-31T14:24:08.972Z","duration":996.040867,"queued_duration":1.330015,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f","short_id":"ed0176d8","created_at":"2018-10-31T15:07:14.000+01:00","parent_ids":["199290ad752dde04256d235e495239cb830db6ee"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-10-31T15:07:14.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f"},"pipeline":{"id":34971694,"iid":4836,"project_id":6138686,"sha":"ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f","ref":"pr-6705","status":"failed","source":"push","created_at":"2018-10-31T14:07:30.202Z","updated_at":"2018-10-31T15:19:57.677Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/34971694"},"web_url":"https://gitlab.com/coq/coq/-/jobs/114894464","artifacts":[{"file_type":"trace","size":17984,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2018-11-07T14:24:03.558Z","tag_list":[]}
{"id":114894463,"status":"success","stage":"build","name":"build:edge+flambda","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-10-31T14:07:30.302Z","started_at":"2018-10-31T14:07:32.478Z","finished_at":"2018-10-31T14:33:45.644Z","duration":1573.165951,"queued_duration":0.84264,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f","short_id":"ed0176d8","created_at":"2018-10-31T15:07:14.000+01:00","parent_ids":["199290ad752dde04256d235e495239cb830db6ee"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-10-31T15:07:14.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f"},"pipeline":{"id":34971694,"iid":4836,"project_id":6138686,"sha":"ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f","ref":"pr-6705","status":"failed","source":"push","created_at":"2018-10-31T14:07:30.202Z","updated_at":"2018-10-31T15:19:57.677Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/34971694"},"web_url":"https://gitlab.com/coq/coq/-/jobs/114894463","artifacts":[{"file_type":"trace","size":232668,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2018-11-07T14:33:38.270Z","tag_list":[]}
{"id":114894461,"status":"success","stage":"build","name":"build:edge","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-10-31T14:07:30.275Z","started_at":"2018-10-31T14:07:32.322Z","finished_at":"2018-10-31T14:24:53.967Z","duration":1041.644203,"queued_duration":0.651846,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f","short_id":"ed0176d8","created_at":"2018-10-31T15:07:14.000+01:00","parent_ids":["199290ad752dde04256d235e495239cb830db6ee"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-10-31T15:07:14.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f"},"pipeline":{"id":34971694,"iid":4836,"project_id":6138686,"sha":"ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f","ref":"pr-6705","status":"failed","source":"push","created_at":"2018-10-31T14:07:30.202Z","updated_at":"2018-10-31T15:19:57.677Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/34971694"},"web_url":"https://gitlab.com/coq/coq/-/jobs/114894461","artifacts":[{"file_type":"trace","size":231560,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2018-11-07T14:24:48.374Z","tag_list":[]}
{"id":114894458,"status":"success","stage":"build","name":"build:base+32bit","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-10-31T14:07:30.248Z","started_at":"2018-10-31T14:07:32.107Z","finished_at":"2018-10-31T14:22:27.739Z","duration":895.632495,"queued_duration":0.393815,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f","short_id":"ed0176d8","created_at":"2018-10-31T15:07:14.000+01:00","parent_ids":["199290ad752dde04256d235e495239cb830db6ee"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-10-31T15:07:14.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f"},"pipeline":{"id":34971694,"iid":4836,"project_id":6138686,"sha":"ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f","ref":"pr-6705","status":"failed","source":"push","created_at":"2018-10-31T14:07:30.202Z","updated_at":"2018-10-31T15:19:57.677Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/34971694"},"web_url":"https://gitlab.com/coq/coq/-/jobs/114894458","artifacts":[{"file_type":"trace","size":226562,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2018-11-07T14:22:20.159Z","tag_list":[]}
{"id":114894457,"status":"success","stage":"build","name":"build:base","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-10-31T14:07:30.220Z","started_at":"2018-10-31T14:07:31.966Z","finished_at":"2018-10-31T14:23:04.906Z","duration":932.939918,"queued_duration":0.214136,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f","short_id":"ed0176d8","created_at":"2018-10-31T15:07:14.000+01:00","parent_ids":["199290ad752dde04256d235e495239cb830db6ee"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-10-31T15:07:14.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f"},"pipeline":{"id":34971694,"iid":4836,"project_id":6138686,"sha":"ed0176d8b08a8c9572e36f0c4fe06276f10c0f0f","ref":"pr-6705","status":"failed","source":"push","created_at":"2018-10-31T14:07:30.202Z","updated_at":"2018-10-31T15:19:57.677Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/34971694"},"web_url":"https://gitlab.com/coq/coq/-/jobs/114894457","artifacts":[{"file_type":"trace","size":281342,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2018-11-07T14:23:00.505Z","tag_list":[]}
