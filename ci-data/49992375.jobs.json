{"id":170539341,"status":"success","stage":"test","name":"plugin:ci-relation-algebra","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T18:09:50.306Z","started_at":"2019-03-02T18:44:07.838Z","finished_at":"2019-03-02T18:50:07.445Z","duration":359.606286,"queued_duration":593.242406,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","short_id":"40f1ccef","created_at":"2019-03-02T19:07:35.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T19:07:35.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/40f1ccef9b212f5b13ff0a5b4038a7137311c1bc"},"pipeline":{"id":49992375,"iid":7606,"project_id":6138686,"sha":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-02T18:09:49.158Z","updated_at":"2019-03-02T20:09:57.795Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49992375"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170539341","artifacts":[{"file_type":"trace","size":51646,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170539340,"status":"success","stage":"test","name":"plugin:ci-quickchick","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T18:09:50.291Z","started_at":"2019-03-02T18:44:07.582Z","finished_at":"2019-03-02T18:49:43.373Z","duration":335.790785,"queued_duration":592.957811,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","short_id":"40f1ccef","created_at":"2019-03-02T19:07:35.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T19:07:35.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/40f1ccef9b212f5b13ff0a5b4038a7137311c1bc"},"pipeline":{"id":49992375,"iid":7606,"project_id":6138686,"sha":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-02T18:09:49.158Z","updated_at":"2019-03-02T20:09:57.795Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49992375"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170539340","artifacts":[{"file_type":"trace","size":262525,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170539339,"status":"success","stage":"test","name":"plugin:plugin-tutorial","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T18:09:50.276Z","started_at":"2019-03-02T18:44:07.422Z","finished_at":"2019-03-02T18:47:36.645Z","duration":209.223578,"queued_duration":592.757327,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","short_id":"40f1ccef","created_at":"2019-03-02T19:07:35.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T19:07:35.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/40f1ccef9b212f5b13ff0a5b4038a7137311c1bc"},"pipeline":{"id":49992375,"iid":7606,"project_id":6138686,"sha":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-02T18:09:49.158Z","updated_at":"2019-03-02T20:09:57.795Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49992375"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170539339","artifacts":[{"file_type":"trace","size":53774,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170539338,"status":"success","stage":"test","name":"plugin:ci-paramcoq","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T18:09:50.261Z","started_at":"2019-03-02T18:44:07.345Z","finished_at":"2019-03-02T18:46:49.460Z","duration":162.115368,"queued_duration":592.654328,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","short_id":"40f1ccef","created_at":"2019-03-02T19:07:35.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T19:07:35.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/40f1ccef9b212f5b13ff0a5b4038a7137311c1bc"},"pipeline":{"id":49992375,"iid":7606,"project_id":6138686,"sha":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-02T18:09:49.158Z","updated_at":"2019-03-02T20:09:57.795Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49992375"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170539338","artifacts":[{"file_type":"trace","size":27244,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170539337,"status":"success","stage":"test","name":"plugin:ci-mtac2","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T18:09:50.246Z","started_at":"2019-03-02T18:44:06.453Z","finished_at":"2019-03-02T18:48:34.442Z","duration":267.98811,"queued_duration":591.735098,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","short_id":"40f1ccef","created_at":"2019-03-02T19:07:35.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T19:07:35.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/40f1ccef9b212f5b13ff0a5b4038a7137311c1bc"},"pipeline":{"id":49992375,"iid":7606,"project_id":6138686,"sha":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-02T18:09:49.158Z","updated_at":"2019-03-02T20:09:57.795Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49992375"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170539337","artifacts":[{"file_type":"trace","size":205214,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170539336,"status":"success","stage":"test","name":"plugin:ci-ltac2","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T18:09:50.231Z","started_at":"2019-03-02T18:44:06.392Z","finished_at":"2019-03-02T18:46:51.561Z","duration":165.169014,"queued_duration":591.621894,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","short_id":"40f1ccef","created_at":"2019-03-02T19:07:35.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T19:07:35.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/40f1ccef9b212f5b13ff0a5b4038a7137311c1bc"},"pipeline":{"id":49992375,"iid":7606,"project_id":6138686,"sha":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-02T18:09:49.158Z","updated_at":"2019-03-02T20:09:57.795Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49992375"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170539336","artifacts":[{"file_type":"trace","size":39470,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170539335,"status":"success","stage":"test","name":"plugin:ci-fiat_parsers","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T18:09:50.216Z","started_at":"2019-03-02T18:44:05.844Z","finished_at":"2019-03-02T19:06:21.456Z","duration":1335.611551,"queued_duration":591.025408,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","short_id":"40f1ccef","created_at":"2019-03-02T19:07:35.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T19:07:35.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/40f1ccef9b212f5b13ff0a5b4038a7137311c1bc"},"pipeline":{"id":49992375,"iid":7606,"project_id":6138686,"sha":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-02T18:09:49.158Z","updated_at":"2019-03-02T20:09:57.795Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49992375"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170539335","artifacts":[{"file_type":"trace","size":239240,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170539334,"status":"success","stage":"test","name":"plugin:ci-equations","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T18:09:50.201Z","started_at":"2019-03-02T18:44:05.217Z","finished_at":"2019-03-02T18:52:36.749Z","duration":511.531897,"queued_duration":590.321665,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","short_id":"40f1ccef","created_at":"2019-03-02T19:07:35.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T19:07:35.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/40f1ccef9b212f5b13ff0a5b4038a7137311c1bc"},"pipeline":{"id":49992375,"iid":7606,"project_id":6138686,"sha":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-02T18:09:49.158Z","updated_at":"2019-03-02T20:09:57.795Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49992375"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170539334","artifacts":[{"file_type":"trace","size":82798,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170539333,"status":"success","stage":"test","name":"plugin:ci-elpi","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T18:09:50.185Z","started_at":"2019-03-02T18:44:04.417Z","finished_at":"2019-03-02T18:48:04.537Z","duration":240.120293,"queued_duration":589.487608,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","short_id":"40f1ccef","created_at":"2019-03-02T19:07:35.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T19:07:35.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/40f1ccef9b212f5b13ff0a5b4038a7137311c1bc"},"pipeline":{"id":49992375,"iid":7606,"project_id":6138686,"sha":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-02T18:09:49.158Z","updated_at":"2019-03-02T20:09:57.795Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49992375"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170539333","artifacts":[{"file_type":"trace","size":415863,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170539332,"status":"success","stage":"test","name":"plugin:ci-coqhammer","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T18:09:50.171Z","started_at":"2019-03-02T18:44:04.218Z","finished_at":"2019-03-02T18:46:41.861Z","duration":157.642326,"queued_duration":589.256355,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","short_id":"40f1ccef","created_at":"2019-03-02T19:07:35.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T19:07:35.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/40f1ccef9b212f5b13ff0a5b4038a7137311c1bc"},"pipeline":{"id":49992375,"iid":7606,"project_id":6138686,"sha":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-02T18:09:49.158Z","updated_at":"2019-03-02T20:09:57.795Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49992375"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170539332","artifacts":[{"file_type":"trace","size":31085,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170539331,"status":"success","stage":"test","name":"plugin:ci-coq_dpdgraph","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T18:09:50.154Z","started_at":"2019-03-02T18:44:04.077Z","finished_at":"2019-03-02T18:46:43.512Z","duration":159.43438,"queued_duration":589.074499,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","short_id":"40f1ccef","created_at":"2019-03-02T19:07:35.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T19:07:35.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/40f1ccef9b212f5b13ff0a5b4038a7137311c1bc"},"pipeline":{"id":49992375,"iid":7606,"project_id":6138686,"sha":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-02T18:09:49.158Z","updated_at":"2019-03-02T20:09:57.795Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49992375"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170539331","artifacts":[{"file_type":"trace","size":39817,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170539330,"status":"success","stage":"test","name":"plugin:ci-bignums","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T18:09:50.139Z","started_at":"2019-03-02T18:44:03.765Z","finished_at":"2019-03-02T18:48:20.804Z","duration":257.039122,"queued_duration":588.73328,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","short_id":"40f1ccef","created_at":"2019-03-02T19:07:35.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T19:07:35.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/40f1ccef9b212f5b13ff0a5b4038a7137311c1bc"},"pipeline":{"id":49992375,"iid":7606,"project_id":6138686,"sha":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-02T18:09:49.158Z","updated_at":"2019-03-02T20:09:57.795Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49992375"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170539330","artifacts":[{"file_type":"trace","size":38543,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170539329,"status":"success","stage":"test","name":"plugin:ci-aac_tactics","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T18:09:50.124Z","started_at":"2019-03-02T18:44:03.516Z","finished_at":"2019-03-02T18:46:53.385Z","duration":169.868754,"queued_duration":588.447983,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","short_id":"40f1ccef","created_at":"2019-03-02T19:07:35.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T19:07:35.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/40f1ccef9b212f5b13ff0a5b4038a7137311c1bc"},"pipeline":{"id":49992375,"iid":7606,"project_id":6138686,"sha":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-02T18:09:49.158Z","updated_at":"2019-03-02T20:09:57.795Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49992375"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170539329","artifacts":[{"file_type":"trace","size":45322,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170539328,"status":"success","stage":"test","name":"library:ci-vst","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T18:09:50.109Z","started_at":"2019-03-02T18:44:03.256Z","finished_at":"2019-03-02T19:58:09.212Z","duration":4445.956776,"queued_duration":588.140294,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","short_id":"40f1ccef","created_at":"2019-03-02T19:07:35.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T19:07:35.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/40f1ccef9b212f5b13ff0a5b4038a7137311c1bc"},"pipeline":{"id":49992375,"iid":7606,"project_id":6138686,"sha":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-02T18:09:49.158Z","updated_at":"2019-03-02T20:09:57.795Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49992375"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170539328","artifacts":[{"file_type":"trace","size":305019,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170539327,"status":"success","stage":"test","name":"library:ci-verdi-raft","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T18:09:50.093Z","started_at":"2019-03-02T18:43:41.614Z","finished_at":"2019-03-02T19:18:49.985Z","duration":2108.371002,"queued_duration":566.455773,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","short_id":"40f1ccef","created_at":"2019-03-02T19:07:35.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T19:07:35.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/40f1ccef9b212f5b13ff0a5b4038a7137311c1bc"},"pipeline":{"id":49992375,"iid":7606,"project_id":6138686,"sha":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-02T18:09:49.158Z","updated_at":"2019-03-02T20:09:57.795Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49992375"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170539327","artifacts":[{"file_type":"trace","size":181020,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170539326,"status":"success","stage":"test","name":"library:ci-unimath","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T18:09:50.077Z","started_at":"2019-03-02T18:43:41.482Z","finished_at":"2019-03-02T19:22:43.466Z","duration":2341.983989,"queued_duration":566.249018,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","short_id":"40f1ccef","created_at":"2019-03-02T19:07:35.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T19:07:35.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/40f1ccef9b212f5b13ff0a5b4038a7137311c1bc"},"pipeline":{"id":49992375,"iid":7606,"project_id":6138686,"sha":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-02T18:09:49.158Z","updated_at":"2019-03-02T20:09:57.795Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49992375"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170539326","artifacts":[{"file_type":"trace","size":187208,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170539325,"status":"success","stage":"test","name":"library:ci-sf","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T18:09:50.061Z","started_at":"2019-03-02T18:43:26.309Z","finished_at":"2019-03-02T18:47:59.253Z","duration":272.943578,"queued_duration":551.025873,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","short_id":"40f1ccef","created_at":"2019-03-02T19:07:35.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T19:07:35.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/40f1ccef9b212f5b13ff0a5b4038a7137311c1bc"},"pipeline":{"id":49992375,"iid":7606,"project_id":6138686,"sha":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-02T18:09:49.158Z","updated_at":"2019-03-02T20:09:57.795Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49992375"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170539325","artifacts":[{"file_type":"trace","size":347960,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170539324,"status":"success","stage":"test","name":"library:ci-math-comp","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T18:09:50.046Z","started_at":"2019-03-02T18:43:26.036Z","finished_at":"2019-03-02T20:09:57.729Z","duration":5191.69292,"queued_duration":550.688693,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","short_id":"40f1ccef","created_at":"2019-03-02T19:07:35.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T19:07:35.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/40f1ccef9b212f5b13ff0a5b4038a7137311c1bc"},"pipeline":{"id":49992375,"iid":7606,"project_id":6138686,"sha":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-02T18:09:49.158Z","updated_at":"2019-03-02T20:09:57.795Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49992375"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170539324","artifacts":[{"file_type":"trace","size":309123,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170539323,"status":"success","stage":"test","name":"library:ci-iris-lambda-rust","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T18:09:50.031Z","started_at":"2019-03-02T18:43:25.543Z","finished_at":"2019-03-02T19:45:24.216Z","duration":3718.672923,"queued_duration":550.128362,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","short_id":"40f1ccef","created_at":"2019-03-02T19:07:35.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T19:07:35.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/40f1ccef9b212f5b13ff0a5b4038a7137311c1bc"},"pipeline":{"id":49992375,"iid":7606,"project_id":6138686,"sha":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-02T18:09:49.158Z","updated_at":"2019-03-02T20:09:57.795Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49992375"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170539323","artifacts":[{"file_type":"trace","size":283929,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170539322,"status":"success","stage":"test","name":"library:ci-hott","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T18:09:50.016Z","started_at":"2019-03-02T18:43:23.870Z","finished_at":"2019-03-02T18:55:51.970Z","duration":748.099775,"queued_duration":548.357065,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","short_id":"40f1ccef","created_at":"2019-03-02T19:07:35.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T19:07:35.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/40f1ccef9b212f5b13ff0a5b4038a7137311c1bc"},"pipeline":{"id":49992375,"iid":7606,"project_id":6138686,"sha":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-02T18:09:49.158Z","updated_at":"2019-03-02T20:09:57.795Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49992375"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170539322","artifacts":[{"file_type":"trace","size":108216,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170539321,"status":"success","stage":"test","name":"library:ci-geocoq","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T18:09:50.000Z","started_at":"2019-03-02T18:43:23.732Z","finished_at":"2019-03-02T19:31:28.903Z","duration":2885.170667,"queued_duration":548.131832,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","short_id":"40f1ccef","created_at":"2019-03-02T19:07:35.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T19:07:35.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/40f1ccef9b212f5b13ff0a5b4038a7137311c1bc"},"pipeline":{"id":49992375,"iid":7606,"project_id":6138686,"sha":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-02T18:09:49.158Z","updated_at":"2019-03-02T20:09:57.795Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49992375"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170539321","artifacts":[{"file_type":"trace","size":284907,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170539320,"status":"success","stage":"test","name":"library:ci-corn","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T18:09:49.985Z","started_at":"2019-03-02T18:42:58.139Z","finished_at":"2019-03-02T19:26:31.148Z","duration":2613.009087,"queued_duration":522.441048,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","short_id":"40f1ccef","created_at":"2019-03-02T19:07:35.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T19:07:35.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/40f1ccef9b212f5b13ff0a5b4038a7137311c1bc"},"pipeline":{"id":49992375,"iid":7606,"project_id":6138686,"sha":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-02T18:09:49.158Z","updated_at":"2019-03-02T20:09:57.795Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49992375"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170539320","artifacts":[{"file_type":"trace","size":554552,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170539319,"status":"success","stage":"test","name":"library:ci-flocq","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T18:09:49.969Z","started_at":"2019-03-02T18:42:57.448Z","finished_at":"2019-03-02T18:58:57.656Z","duration":960.207924,"queued_duration":521.612471,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","short_id":"40f1ccef","created_at":"2019-03-02T19:07:35.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T19:07:35.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/40f1ccef9b212f5b13ff0a5b4038a7137311c1bc"},"pipeline":{"id":49992375,"iid":7606,"project_id":6138686,"sha":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-02T18:09:49.158Z","updated_at":"2019-03-02T20:09:57.795Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49992375"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170539319","artifacts":[{"file_type":"trace","size":29287,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170539318,"status":"success","stage":"test","name":"library:ci-fiat-crypto-legacy","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T18:09:49.952Z","started_at":"2019-03-02T18:42:47.453Z","finished_at":"2019-03-02T19:49:15.410Z","duration":3987.956948,"queued_duration":511.500754,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","short_id":"40f1ccef","created_at":"2019-03-02T19:07:35.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T19:07:35.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/40f1ccef9b212f5b13ff0a5b4038a7137311c1bc"},"pipeline":{"id":49992375,"iid":7606,"project_id":6138686,"sha":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-02T18:09:49.158Z","updated_at":"2019-03-02T20:09:57.795Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49992375"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170539318","artifacts":[{"file_type":"trace","size":680133,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170539317,"status":"success","stage":"test","name":"library:ci-fiat-crypto","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T18:09:49.935Z","started_at":"2019-03-02T18:42:46.816Z","finished_at":"2019-03-02T19:47:00.731Z","duration":3853.915324,"queued_duration":510.749882,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","short_id":"40f1ccef","created_at":"2019-03-02T19:07:35.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T19:07:35.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/40f1ccef9b212f5b13ff0a5b4038a7137311c1bc"},"pipeline":{"id":49992375,"iid":7606,"project_id":6138686,"sha":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-02T18:09:49.158Z","updated_at":"2019-03-02T20:09:57.795Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49992375"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170539317","artifacts":[{"file_type":"trace","size":299904,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170539316,"status":"success","stage":"test","name":"library:ci-fcsl-pcm","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T18:09:49.912Z","started_at":"2019-03-02T18:42:44.676Z","finished_at":"2019-03-02T18:48:26.740Z","duration":342.063916,"queued_duration":508.545522,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","short_id":"40f1ccef","created_at":"2019-03-02T19:07:35.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T19:07:35.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/40f1ccef9b212f5b13ff0a5b4038a7137311c1bc"},"pipeline":{"id":49992375,"iid":7606,"project_id":6138686,"sha":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-02T18:09:49.158Z","updated_at":"2019-03-02T20:09:57.795Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49992375"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170539316","artifacts":[{"file_type":"trace","size":287674,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":170539315,"status":"success","stage":"test","name":"library:ci-cross-crypto","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T18:09:49.716Z","started_at":"2019-03-02T18:42:44.425Z","finished_at":"2019-03-02T19:22:29.659Z","duration":2385.234607,"queued_duration":508.225759,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","short_id":"40f1ccef","created_at":"2019-03-02T19:07:35.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T19:07:35.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/40f1ccef9b212f5b13ff0a5b4038a7137311c1bc"},"pipeline":{"id":49992375,"iid":7606,"project_id":6138686,"sha":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-02T18:09:49.158Z","updated_at":"2019-03-02T20:09:57.795Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49992375"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170539315","artifacts":[{"file_type":"trace","size":39455,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170539314,"status":"success","stage":"test","name":"library:ci-coquelicot","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T18:09:49.698Z","started_at":"2019-03-02T18:42:43.259Z","finished_at":"2019-03-02T18:48:32.166Z","duration":348.907247,"queued_duration":506.964796,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","short_id":"40f1ccef","created_at":"2019-03-02T19:07:35.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T19:07:35.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/40f1ccef9b212f5b13ff0a5b4038a7137311c1bc"},"pipeline":{"id":49992375,"iid":7606,"project_id":6138686,"sha":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-02T18:09:49.158Z","updated_at":"2019-03-02T20:09:57.795Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49992375"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170539314","artifacts":[{"file_type":"trace","size":143246,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170539313,"status":"success","stage":"test","name":"library:ci-compcert","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T18:09:49.674Z","started_at":"2019-03-02T18:42:42.578Z","finished_at":"2019-03-02T19:09:21.431Z","duration":1598.853855,"queued_duration":506.236777,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","short_id":"40f1ccef","created_at":"2019-03-02T19:07:35.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T19:07:35.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/40f1ccef9b212f5b13ff0a5b4038a7137311c1bc"},"pipeline":{"id":49992375,"iid":7606,"project_id":6138686,"sha":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-02T18:09:49.158Z","updated_at":"2019-03-02T20:09:57.795Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49992375"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170539313","artifacts":[{"file_type":"trace","size":4194360,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170539312,"status":"success","stage":"test","name":"library:ci-color","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T18:09:49.651Z","started_at":"2019-03-02T18:42:41.843Z","finished_at":"2019-03-02T19:01:25.342Z","duration":1123.499579,"queued_duration":505.430923,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","short_id":"40f1ccef","created_at":"2019-03-02T19:07:35.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T19:07:35.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/40f1ccef9b212f5b13ff0a5b4038a7137311c1bc"},"pipeline":{"id":49992375,"iid":7606,"project_id":6138686,"sha":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-02T18:09:49.158Z","updated_at":"2019-03-02T20:09:57.795Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49992375"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170539312","artifacts":[{"file_type":"trace","size":212342,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170539311,"status":"success","stage":"test","name":"library:ci-bedrock2","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T18:09:49.634Z","started_at":"2019-03-02T18:42:41.804Z","finished_at":"2019-03-02T19:25:31.544Z","duration":2569.740103,"queued_duration":505.359412,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","short_id":"40f1ccef","created_at":"2019-03-02T19:07:35.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T19:07:35.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/40f1ccef9b212f5b13ff0a5b4038a7137311c1bc"},"pipeline":{"id":49992375,"iid":7606,"project_id":6138686,"sha":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-02T18:09:49.158Z","updated_at":"2019-03-02T20:09:57.795Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49992375"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170539311","artifacts":[{"file_type":"trace","size":250992,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170539310,"status":"success","stage":"test","name":"validate:quick","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T18:09:49.617Z","started_at":"2019-03-02T18:42:41.719Z","finished_at":"2019-03-02T18:46:41.519Z","duration":239.799838,"queued_duration":505.239801,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","short_id":"40f1ccef","created_at":"2019-03-02T19:07:35.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T19:07:35.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/40f1ccef9b212f5b13ff0a5b4038a7137311c1bc"},"pipeline":{"id":49992375,"iid":7606,"project_id":6138686,"sha":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-02T18:09:49.158Z","updated_at":"2019-03-02T20:09:57.795Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49992375"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170539310","artifacts":[{"file_type":"trace","size":23636,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170539309,"status":"success","stage":"test","name":"validate:edge+flambda","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T18:09:49.600Z","started_at":"2019-03-02T18:42:41.540Z","finished_at":"2019-03-02T18:46:29.200Z","duration":227.659788,"queued_duration":504.997549,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","short_id":"40f1ccef","created_at":"2019-03-02T19:07:35.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T19:07:35.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/40f1ccef9b212f5b13ff0a5b4038a7137311c1bc"},"pipeline":{"id":49992375,"iid":7606,"project_id":6138686,"sha":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-02T18:09:49.158Z","updated_at":"2019-03-02T20:09:57.795Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49992375"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170539309","artifacts":[{"file_type":"trace","size":23964,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170539308,"status":"success","stage":"test","name":"validate:base+32bit","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T18:09:49.582Z","started_at":"2019-03-02T18:42:34.619Z","finished_at":"2019-03-02T18:46:30.842Z","duration":236.223079,"queued_duration":497.969216,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","short_id":"40f1ccef","created_at":"2019-03-02T19:07:35.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T19:07:35.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/40f1ccef9b212f5b13ff0a5b4038a7137311c1bc"},"pipeline":{"id":49992375,"iid":7606,"project_id":6138686,"sha":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-02T18:09:49.158Z","updated_at":"2019-03-02T20:09:57.795Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49992375"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170539308","artifacts":[{"file_type":"trace","size":22258,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170539307,"status":"success","stage":"test","name":"validate:base","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T18:09:49.565Z","started_at":"2019-03-02T18:42:34.475Z","finished_at":"2019-03-02T18:46:34.554Z","duration":240.079147,"queued_duration":497.766778,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","short_id":"40f1ccef","created_at":"2019-03-02T19:07:35.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T19:07:35.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/40f1ccef9b212f5b13ff0a5b4038a7137311c1bc"},"pipeline":{"id":49992375,"iid":7606,"project_id":6138686,"sha":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-02T18:09:49.158Z","updated_at":"2019-03-02T20:09:57.795Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49992375"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170539307","artifacts":[{"file_type":"trace","size":23633,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170539306,"status":"success","stage":"test","name":"test-suite:base+async","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T18:09:49.542Z","started_at":"2019-03-02T18:42:33.105Z","finished_at":"2019-03-02T19:48:04.085Z","duration":3930.979413,"queued_duration":496.32294,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","short_id":"40f1ccef","created_at":"2019-03-02T19:07:35.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T19:07:35.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/40f1ccef9b212f5b13ff0a5b4038a7137311c1bc"},"pipeline":{"id":49992375,"iid":7606,"project_id":6138686,"sha":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-02T18:09:49.158Z","updated_at":"2019-03-02T20:09:57.795Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49992375"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170539306","artifacts":[{"file_type":"trace","size":86416,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170539305,"status":"success","stage":"test","name":"test-suite:edge+trunk+dune","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":true,"created_at":"2019-03-02T18:09:49.524Z","started_at":"2019-03-02T18:42:32.513Z","finished_at":"2019-03-02T19:41:24.689Z","duration":3532.175434,"queued_duration":495.368284,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","short_id":"40f1ccef","created_at":"2019-03-02T19:07:35.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T19:07:35.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/40f1ccef9b212f5b13ff0a5b4038a7137311c1bc"},"pipeline":{"id":49992375,"iid":7606,"project_id":6138686,"sha":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-02T18:09:49.158Z","updated_at":"2019-03-02T20:09:57.795Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49992375"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170539305","artifacts":[{"file_type":"trace","size":147119,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2019-03-09T19:41:23.745Z","tag_list":[]}
{"id":170539304,"status":"success","stage":"test","name":"test-suite:edge+trunk+make","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":true,"created_at":"2019-03-02T18:09:49.500Z","started_at":"2019-03-02T18:42:32.452Z","finished_at":"2019-03-02T19:39:48.124Z","duration":3435.67264,"queued_duration":494.966893,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","short_id":"40f1ccef","created_at":"2019-03-02T19:07:35.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T19:07:35.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/40f1ccef9b212f5b13ff0a5b4038a7137311c1bc"},"pipeline":{"id":49992375,"iid":7606,"project_id":6138686,"sha":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-02T18:09:49.158Z","updated_at":"2019-03-02T20:09:57.795Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49992375"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170539304","artifacts":[{"file_type":"trace","size":213036,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2019-03-09T19:39:46.676Z","tag_list":[]}
{"id":170539303,"status":"success","stage":"test","name":"test-suite:egde:dune:dev","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T18:09:49.475Z","started_at":"2019-03-02T18:42:30.970Z","finished_at":"2019-03-02T19:15:40.112Z","duration":1989.141337,"queued_duration":493.162831,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","short_id":"40f1ccef","created_at":"2019-03-02T19:07:35.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T19:07:35.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/40f1ccef9b212f5b13ff0a5b4038a7137311c1bc"},"pipeline":{"id":49992375,"iid":7606,"project_id":6138686,"sha":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-02T18:09:49.158Z","updated_at":"2019-03-02T20:09:57.795Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49992375"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170539303","artifacts":[{"file_type":"trace","size":119977,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":170539302,"status":"success","stage":"test","name":"test-suite:edge+flambda","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T18:09:49.460Z","started_at":"2019-03-02T18:42:30.745Z","finished_at":"2019-03-02T19:15:47.514Z","duration":1996.768852,"queued_duration":492.893655,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","short_id":"40f1ccef","created_at":"2019-03-02T19:07:35.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T19:07:35.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/40f1ccef9b212f5b13ff0a5b4038a7137311c1bc"},"pipeline":{"id":49992375,"iid":7606,"project_id":6138686,"sha":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-02T18:09:49.158Z","updated_at":"2019-03-02T20:09:57.795Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49992375"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170539302","artifacts":[{"file_type":"trace","size":86772,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170539301,"status":"success","stage":"test","name":"test-suite:base+32bit","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T18:09:49.443Z","started_at":"2019-03-02T18:42:28.778Z","finished_at":"2019-03-02T19:12:36.740Z","duration":1807.961955,"queued_duration":490.865361,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","short_id":"40f1ccef","created_at":"2019-03-02T19:07:35.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T19:07:35.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/40f1ccef9b212f5b13ff0a5b4038a7137311c1bc"},"pipeline":{"id":49992375,"iid":7606,"project_id":6138686,"sha":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-02T18:09:49.158Z","updated_at":"2019-03-02T20:09:57.795Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49992375"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170539301","artifacts":[{"file_type":"trace","size":85003,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170539300,"status":"success","stage":"test","name":"test-suite:base","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T18:09:49.427Z","started_at":"2019-03-02T18:42:28.619Z","finished_at":"2019-03-02T19:19:33.533Z","duration":2224.913818,"queued_duration":490.670122,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","short_id":"40f1ccef","created_at":"2019-03-02T19:07:35.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T19:07:35.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/40f1ccef9b212f5b13ff0a5b4038a7137311c1bc"},"pipeline":{"id":49992375,"iid":7606,"project_id":6138686,"sha":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-02T18:09:49.158Z","updated_at":"2019-03-02T20:09:57.795Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49992375"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170539300","artifacts":[{"file_type":"trace","size":86441,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170539299,"status":"success","stage":"test","name":"doc:ml-api:odoc","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T18:09:49.411Z","started_at":"2019-03-02T18:42:28.262Z","finished_at":"2019-03-02T18:45:57.739Z","duration":209.476946,"queued_duration":490.282539,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","short_id":"40f1ccef","created_at":"2019-03-02T19:07:35.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T19:07:35.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/40f1ccef9b212f5b13ff0a5b4038a7137311c1bc"},"pipeline":{"id":49992375,"iid":7606,"project_id":6138686,"sha":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-02T18:09:49.158Z","updated_at":"2019-03-02T20:09:57.795Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49992375"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170539299","artifacts":[{"file_type":"trace","size":80431,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2019-04-01T18:45:56.655Z","tag_list":[]}
{"id":170539298,"status":"success","stage":"test","name":"doc:stdlib:dune","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T18:09:49.394Z","started_at":"2019-03-02T18:42:28.090Z","finished_at":"2019-03-02T18:55:49.718Z","duration":801.628262,"queued_duration":490.037015,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","short_id":"40f1ccef","created_at":"2019-03-02T19:07:35.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T19:07:35.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/40f1ccef9b212f5b13ff0a5b4038a7137311c1bc"},"pipeline":{"id":49992375,"iid":7606,"project_id":6138686,"sha":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-02T18:09:49.158Z","updated_at":"2019-03-02T20:09:57.795Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49992375"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170539298","artifacts":[{"file_type":"trace","size":24710,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2019-04-01T18:55:48.629Z","tag_list":[]}
{"id":170539297,"status":"success","stage":"test","name":"doc:refman:dune","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T18:09:49.378Z","started_at":"2019-03-02T18:42:07.792Z","finished_at":"2019-03-02T18:56:43.345Z","duration":875.553364,"queued_duration":469.622895,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","short_id":"40f1ccef","created_at":"2019-03-02T19:07:35.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T19:07:35.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/40f1ccef9b212f5b13ff0a5b4038a7137311c1bc"},"pipeline":{"id":49992375,"iid":7606,"project_id":6138686,"sha":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-02T18:09:49.158Z","updated_at":"2019-03-02T20:09:57.795Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49992375"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170539297","artifacts":[{"file_type":"trace","size":23383,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2019-04-01T18:56:41.744Z","tag_list":[]}
{"id":170539296,"status":"success","stage":"test","name":"doc:refman","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T18:09:49.363Z","started_at":"2019-03-02T18:42:07.098Z","finished_at":"2019-03-02T18:48:21.924Z","duration":374.825781,"queued_duration":468.831082,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","short_id":"40f1ccef","created_at":"2019-03-02T19:07:35.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T19:07:35.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/40f1ccef9b212f5b13ff0a5b4038a7137311c1bc"},"pipeline":{"id":49992375,"iid":7606,"project_id":6138686,"sha":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-02T18:09:49.158Z","updated_at":"2019-03-02T20:09:57.795Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49992375"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170539296","artifacts":[{"file_type":"trace","size":1055940,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170539295,"status":"success","stage":"test","name":"pkg:nix","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T18:09:49.347Z","started_at":"2019-03-02T18:42:06.473Z","finished_at":"2019-03-02T19:32:57.957Z","duration":3051.483344,"queued_duration":468.030156,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","short_id":"40f1ccef","created_at":"2019-03-02T19:07:35.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T19:07:35.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/40f1ccef9b212f5b13ff0a5b4038a7137311c1bc"},"pipeline":{"id":49992375,"iid":7606,"project_id":6138686,"sha":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-02T18:09:49.158Z","updated_at":"2019-03-02T20:09:57.795Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49992375"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170539295","artifacts":[{"file_type":"trace","size":508785,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170539293,"status":"success","stage":"test","name":"pkg:opam","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T18:09:49.323Z","started_at":"2019-03-02T18:42:00.323Z","finished_at":"2019-03-02T19:04:45.618Z","duration":1365.295013,"queued_duration":461.785066,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","short_id":"40f1ccef","created_at":"2019-03-02T19:07:35.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T19:07:35.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/40f1ccef9b212f5b13ff0a5b4038a7137311c1bc"},"pipeline":{"id":49992375,"iid":7606,"project_id":6138686,"sha":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-02T18:09:49.158Z","updated_at":"2019-03-02T20:09:57.795Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49992375"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170539293","artifacts":[{"file_type":"trace","size":20043,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170539292,"status":"success","stage":"test","name":"lint","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T18:09:49.306Z","started_at":"2019-03-02T18:41:59.651Z","finished_at":"2019-03-02T18:43:16.081Z","duration":76.430407,"queued_duration":461.07955,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","short_id":"40f1ccef","created_at":"2019-03-02T19:07:35.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T19:07:35.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/40f1ccef9b212f5b13ff0a5b4038a7137311c1bc"},"pipeline":{"id":49992375,"iid":7606,"project_id":6138686,"sha":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-02T18:09:49.158Z","updated_at":"2019-03-02T20:09:57.795Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49992375"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170539292","artifacts":[{"file_type":"trace","size":1963,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":170539291,"status":"success","stage":"test","name":"windows64","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T18:09:49.283Z","started_at":"2019-03-02T18:34:19.065Z","finished_at":"2019-03-02T19:20:55.011Z","duration":2795.945759,"queued_duration":0.428093,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","short_id":"40f1ccef","created_at":"2019-03-02T19:07:35.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T19:07:35.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/40f1ccef9b212f5b13ff0a5b4038a7137311c1bc"},"pipeline":{"id":49992375,"iid":7606,"project_id":6138686,"sha":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-02T18:09:49.158Z","updated_at":"2019-03-02T20:09:57.795Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49992375"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170539291","artifacts":[{"file_type":"trace","size":230518,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":"2019-03-09T19:20:50.874Z","tag_list":["windows"]}
{"id":170539290,"status":"success","stage":"test","name":"build:base+async","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T18:09:49.266Z","started_at":"2019-03-02T18:41:59.167Z","finished_at":"2019-03-02T19:54:11.065Z","duration":4331.898249,"queued_duration":460.494629,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","short_id":"40f1ccef","created_at":"2019-03-02T19:07:35.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T19:07:35.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/40f1ccef9b212f5b13ff0a5b4038a7137311c1bc"},"pipeline":{"id":49992375,"iid":7606,"project_id":6138686,"sha":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-02T18:09:49.158Z","updated_at":"2019-03-02T20:09:57.795Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49992375"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170539290","artifacts":[{"file_type":"trace","size":238668,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2019-03-09T19:54:07.370Z","tag_list":[]}
{"id":170539289,"status":"success","stage":"build","name":"build:quick","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T18:09:49.239Z","started_at":"2019-03-02T18:12:33.280Z","finished_at":"2019-03-02T18:30:21.958Z","duration":1068.677379,"queued_duration":162.609846,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","short_id":"40f1ccef","created_at":"2019-03-02T19:07:35.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T19:07:35.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/40f1ccef9b212f5b13ff0a5b4038a7137311c1bc"},"pipeline":{"id":49992375,"iid":7606,"project_id":6138686,"sha":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-02T18:09:49.158Z","updated_at":"2019-03-02T20:09:57.795Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49992375"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170539289","artifacts":[{"file_type":"trace","size":164755,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2019-03-09T18:30:17.824Z","tag_list":[]}
{"id":170539288,"status":"success","stage":"build","name":"build:edge+flambda:dune:dev","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T18:09:49.223Z","started_at":"2019-03-02T18:12:03.336Z","finished_at":"2019-03-02T18:19:58.736Z","duration":475.399368,"queued_duration":132.634319,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","short_id":"40f1ccef","created_at":"2019-03-02T19:07:35.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T19:07:35.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/40f1ccef9b212f5b13ff0a5b4038a7137311c1bc"},"pipeline":{"id":49992375,"iid":7606,"project_id":6138686,"sha":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-02T18:09:49.158Z","updated_at":"2019-03-02T20:09:57.795Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49992375"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170539288","artifacts":[{"file_type":"trace","size":48963,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":"2019-03-09T18:19:53.104Z","tag_list":[]}
{"id":170539287,"status":"success","stage":"build","name":"build:edge+flambda","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T18:09:49.206Z","started_at":"2019-03-02T18:09:53.866Z","finished_at":"2019-03-02T18:34:14.490Z","duration":1460.624221,"queued_duration":3.135135,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","short_id":"40f1ccef","created_at":"2019-03-02T19:07:35.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T19:07:35.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/40f1ccef9b212f5b13ff0a5b4038a7137311c1bc"},"pipeline":{"id":49992375,"iid":7606,"project_id":6138686,"sha":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-02T18:09:49.158Z","updated_at":"2019-03-02T20:09:57.795Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49992375"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170539287","artifacts":[{"file_type":"trace","size":267978,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":"2019-03-09T18:34:04.831Z","tag_list":[]}
{"id":170539286,"status":"success","stage":"build","name":"build:base+32bit","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T18:09:49.188Z","started_at":"2019-03-02T18:09:53.571Z","finished_at":"2019-03-02T18:22:20.663Z","duration":747.092886,"queued_duration":2.812174,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","short_id":"40f1ccef","created_at":"2019-03-02T19:07:35.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T19:07:35.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/40f1ccef9b212f5b13ff0a5b4038a7137311c1bc"},"pipeline":{"id":49992375,"iid":7606,"project_id":6138686,"sha":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-02T18:09:49.158Z","updated_at":"2019-03-02T20:09:57.795Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49992375"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170539286","artifacts":[{"file_type":"trace","size":395797,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":"2019-03-09T18:22:13.085Z","tag_list":[]}
{"id":170539285,"status":"success","stage":"build","name":"build:base","ref":"pr-9047","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-03-02T18:09:49.170Z","started_at":"2019-03-02T18:09:53.294Z","finished_at":"2019-03-02T18:26:37.459Z","duration":1004.16456,"queued_duration":2.493469,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","short_id":"40f1ccef","created_at":"2019-03-02T19:07:35.000+01:00","parent_ids":["53240d3248ce1fb36ab99036186eda9051fbb068"],"title":"[dune] Shim for starting `coqtop/coqide` with minimal config.","message":"[dune] Shim for starting `coqtop/coqide` with minimal config.\n\nAs requested by Gaëtan Gilbert, we add shims\n\n- `dev/shim/coqtop-prelude`\n- `dev/shim/coqide-prelude`\n\nthat will build and start `coqtop` and `coqide` with just the prelude\nloaded properly.\n\n`dune exec dev/shim/coqtop-prelude` will build and execute this shim,\nequivalent to doing `make states && bin/coqtop` under the old model.\n\nThis PR is just a bit of \"a hack\" until proper support for Coq\nlibraries arrives to Dune, however there is nothing wrong with it.\n\nIn particular, we must bootstrap `coq.plugins.ltac` as Dune needs to\ncompute the full installation path to allow `%{bin:foo}` in deps,\n[this is a kind of shortcoming of the current implementation, and the\nerror message is just terrible]\n\nWe cannot depend on installed `.vo` files without doing a gross hack\n[including them inside an ml lib] so for now we just depend on their\nnon-installed forms. Using `%{bin}` is good enough for the shims who\nwould like to locate binaries using `PATH`.\n\nThe long term plan (for now) is to have a command similar to `dune\nutop $dir`, `dune coqtop $dir`, which would spawn a proper Coq shell\nwith the corresponding libraries on the path.\n\nThis will work for `dir=stdlib/Init/` for example, or for any other\ncombination.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-11-21T20:16:49.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2019-03-02T19:07:35.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/40f1ccef9b212f5b13ff0a5b4038a7137311c1bc"},"pipeline":{"id":49992375,"iid":7606,"project_id":6138686,"sha":"40f1ccef9b212f5b13ff0a5b4038a7137311c1bc","ref":"pr-9047","status":"success","source":"push","created_at":"2019-03-02T18:09:49.158Z","updated_at":"2019-03-02T20:09:57.795Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/49992375"},"web_url":"https://gitlab.com/coq/coq/-/jobs/170539285","artifacts":[{"file_type":"trace","size":315789,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":"2019-03-09T18:26:27.628Z","tag_list":[]}
