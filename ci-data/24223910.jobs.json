{"id":76278623,"status":"failed","stage":"build","name":"build:edge+flambda","ref":"pr-6218","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-20T17:08:39.873Z","started_at":"2018-06-20T17:08:40.563Z","finished_at":"2018-06-20T17:17:19.360Z","duration":518.797205,"queued_duration":0.639623,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"d84ec924ccfd2d3f184feaac1dee86d17431d623","short_id":"d84ec924","created_at":"2018-06-20T14:26:28.000+01:00","parent_ids":["6715e6801c1d285a12eeca55dd8b831d7efb8c0d"],"title":"Fix #5197, handling of algebraic universes","message":"Fix #5197, handling of algebraic universes\n\nThey were allowed to stay in terms in some cases. We now ensure that if\nan evar is defined as e.g. fun x => Type@{foo}, foo is properly\nrefreshed to be non-algebraic as it could otherwise appear in the term\nand break the invariant.\n\nAlso cleanup the implementation of refresh_universes to avoid using a\nmutable reference and simply rely on the Constr.map smartmap idiom\ninstead.\n\nThis might have compatibility issues, e.g. in HoTT where maybe more\nnon-algebraic proxy universes could be generated, we'll see.\n\nFor the bug report proper, there is a lack of bidirectional\ntype-checking that makes the initial definition fail (there's a\nnon-canonical choice of dependency if we don't consider the typing\nconstraint). With the Program bidir hint it passes.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-19T12:09:58.000+01:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-20T14:26:28.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/d84ec924ccfd2d3f184feaac1dee86d17431d623"},"pipeline":{"id":24223910,"iid":1536,"project_id":6138686,"sha":"d84ec924ccfd2d3f184feaac1dee86d17431d623","ref":"pr-6218","status":"failed","source":"push","created_at":"2018-06-20T13:27:56.460Z","updated_at":"2018-06-20T17:18:02.960Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24223910"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/76278623","artifacts":[{"file_type":"trace","size":65398,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":76209070,"status":"skipped","stage":"test","name":"ci-vst","ref":"pr-6218","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-20T13:27:57.964Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"d84ec924ccfd2d3f184feaac1dee86d17431d623","short_id":"d84ec924","created_at":"2018-06-20T14:26:28.000+01:00","parent_ids":["6715e6801c1d285a12eeca55dd8b831d7efb8c0d"],"title":"Fix #5197, handling of algebraic universes","message":"Fix #5197, handling of algebraic universes\n\nThey were allowed to stay in terms in some cases. We now ensure that if\nan evar is defined as e.g. fun x => Type@{foo}, foo is properly\nrefreshed to be non-algebraic as it could otherwise appear in the term\nand break the invariant.\n\nAlso cleanup the implementation of refresh_universes to avoid using a\nmutable reference and simply rely on the Constr.map smartmap idiom\ninstead.\n\nThis might have compatibility issues, e.g. in HoTT where maybe more\nnon-algebraic proxy universes could be generated, we'll see.\n\nFor the bug report proper, there is a lack of bidirectional\ntype-checking that makes the initial definition fail (there's a\nnon-canonical choice of dependency if we don't consider the typing\nconstraint). With the Program bidir hint it passes.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-19T12:09:58.000+01:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-20T14:26:28.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/d84ec924ccfd2d3f184feaac1dee86d17431d623"},"pipeline":{"id":24223910,"iid":1536,"project_id":6138686,"sha":"d84ec924ccfd2d3f184feaac1dee86d17431d623","ref":"pr-6218","status":"failed","source":"push","created_at":"2018-06-20T13:27:56.460Z","updated_at":"2018-06-20T17:18:02.960Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24223910"},"web_url":"https://gitlab.com/coq/coq/-/jobs/76209070","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":76209069,"status":"skipped","stage":"test","name":"ci-unimath","ref":"pr-6218","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-20T13:27:57.934Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"d84ec924ccfd2d3f184feaac1dee86d17431d623","short_id":"d84ec924","created_at":"2018-06-20T14:26:28.000+01:00","parent_ids":["6715e6801c1d285a12eeca55dd8b831d7efb8c0d"],"title":"Fix #5197, handling of algebraic universes","message":"Fix #5197, handling of algebraic universes\n\nThey were allowed to stay in terms in some cases. We now ensure that if\nan evar is defined as e.g. fun x => Type@{foo}, foo is properly\nrefreshed to be non-algebraic as it could otherwise appear in the term\nand break the invariant.\n\nAlso cleanup the implementation of refresh_universes to avoid using a\nmutable reference and simply rely on the Constr.map smartmap idiom\ninstead.\n\nThis might have compatibility issues, e.g. in HoTT where maybe more\nnon-algebraic proxy universes could be generated, we'll see.\n\nFor the bug report proper, there is a lack of bidirectional\ntype-checking that makes the initial definition fail (there's a\nnon-canonical choice of dependency if we don't consider the typing\nconstraint). With the Program bidir hint it passes.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-19T12:09:58.000+01:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-20T14:26:28.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/d84ec924ccfd2d3f184feaac1dee86d17431d623"},"pipeline":{"id":24223910,"iid":1536,"project_id":6138686,"sha":"d84ec924ccfd2d3f184feaac1dee86d17431d623","ref":"pr-6218","status":"failed","source":"push","created_at":"2018-06-20T13:27:56.460Z","updated_at":"2018-06-20T17:18:02.960Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24223910"},"web_url":"https://gitlab.com/coq/coq/-/jobs/76209069","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":76209068,"status":"skipped","stage":"test","name":"ci-sf","ref":"pr-6218","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-20T13:27:57.898Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"d84ec924ccfd2d3f184feaac1dee86d17431d623","short_id":"d84ec924","created_at":"2018-06-20T14:26:28.000+01:00","parent_ids":["6715e6801c1d285a12eeca55dd8b831d7efb8c0d"],"title":"Fix #5197, handling of algebraic universes","message":"Fix #5197, handling of algebraic universes\n\nThey were allowed to stay in terms in some cases. We now ensure that if\nan evar is defined as e.g. fun x => Type@{foo}, foo is properly\nrefreshed to be non-algebraic as it could otherwise appear in the term\nand break the invariant.\n\nAlso cleanup the implementation of refresh_universes to avoid using a\nmutable reference and simply rely on the Constr.map smartmap idiom\ninstead.\n\nThis might have compatibility issues, e.g. in HoTT where maybe more\nnon-algebraic proxy universes could be generated, we'll see.\n\nFor the bug report proper, there is a lack of bidirectional\ntype-checking that makes the initial definition fail (there's a\nnon-canonical choice of dependency if we don't consider the typing\nconstraint). With the Program bidir hint it passes.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-19T12:09:58.000+01:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-20T14:26:28.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/d84ec924ccfd2d3f184feaac1dee86d17431d623"},"pipeline":{"id":24223910,"iid":1536,"project_id":6138686,"sha":"d84ec924ccfd2d3f184feaac1dee86d17431d623","ref":"pr-6218","status":"failed","source":"push","created_at":"2018-06-20T13:27:56.460Z","updated_at":"2018-06-20T17:18:02.960Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24223910"},"web_url":"https://gitlab.com/coq/coq/-/jobs/76209068","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":76209067,"status":"skipped","stage":"test","name":"ci-quickchick","ref":"pr-6218","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-20T13:27:57.831Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"d84ec924ccfd2d3f184feaac1dee86d17431d623","short_id":"d84ec924","created_at":"2018-06-20T14:26:28.000+01:00","parent_ids":["6715e6801c1d285a12eeca55dd8b831d7efb8c0d"],"title":"Fix #5197, handling of algebraic universes","message":"Fix #5197, handling of algebraic universes\n\nThey were allowed to stay in terms in some cases. We now ensure that if\nan evar is defined as e.g. fun x => Type@{foo}, foo is properly\nrefreshed to be non-algebraic as it could otherwise appear in the term\nand break the invariant.\n\nAlso cleanup the implementation of refresh_universes to avoid using a\nmutable reference and simply rely on the Constr.map smartmap idiom\ninstead.\n\nThis might have compatibility issues, e.g. in HoTT where maybe more\nnon-algebraic proxy universes could be generated, we'll see.\n\nFor the bug report proper, there is a lack of bidirectional\ntype-checking that makes the initial definition fail (there's a\nnon-canonical choice of dependency if we don't consider the typing\nconstraint). With the Program bidir hint it passes.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-19T12:09:58.000+01:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-20T14:26:28.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/d84ec924ccfd2d3f184feaac1dee86d17431d623"},"pipeline":{"id":24223910,"iid":1536,"project_id":6138686,"sha":"d84ec924ccfd2d3f184feaac1dee86d17431d623","ref":"pr-6218","status":"failed","source":"push","created_at":"2018-06-20T13:27:56.460Z","updated_at":"2018-06-20T17:18:02.960Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24223910"},"web_url":"https://gitlab.com/coq/coq/-/jobs/76209067","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":76209066,"status":"skipped","stage":"test","name":"ci-pidetop","ref":"pr-6218","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-20T13:27:57.806Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"d84ec924ccfd2d3f184feaac1dee86d17431d623","short_id":"d84ec924","created_at":"2018-06-20T14:26:28.000+01:00","parent_ids":["6715e6801c1d285a12eeca55dd8b831d7efb8c0d"],"title":"Fix #5197, handling of algebraic universes","message":"Fix #5197, handling of algebraic universes\n\nThey were allowed to stay in terms in some cases. We now ensure that if\nan evar is defined as e.g. fun x => Type@{foo}, foo is properly\nrefreshed to be non-algebraic as it could otherwise appear in the term\nand break the invariant.\n\nAlso cleanup the implementation of refresh_universes to avoid using a\nmutable reference and simply rely on the Constr.map smartmap idiom\ninstead.\n\nThis might have compatibility issues, e.g. in HoTT where maybe more\nnon-algebraic proxy universes could be generated, we'll see.\n\nFor the bug report proper, there is a lack of bidirectional\ntype-checking that makes the initial definition fail (there's a\nnon-canonical choice of dependency if we don't consider the typing\nconstraint). With the Program bidir hint it passes.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-19T12:09:58.000+01:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-20T14:26:28.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/d84ec924ccfd2d3f184feaac1dee86d17431d623"},"pipeline":{"id":24223910,"iid":1536,"project_id":6138686,"sha":"d84ec924ccfd2d3f184feaac1dee86d17431d623","ref":"pr-6218","status":"failed","source":"push","created_at":"2018-06-20T13:27:56.460Z","updated_at":"2018-06-20T17:18:02.960Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24223910"},"web_url":"https://gitlab.com/coq/coq/-/jobs/76209066","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":76209065,"status":"skipped","stage":"test","name":"ci-mtac2","ref":"pr-6218","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-20T13:27:57.777Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"d84ec924ccfd2d3f184feaac1dee86d17431d623","short_id":"d84ec924","created_at":"2018-06-20T14:26:28.000+01:00","parent_ids":["6715e6801c1d285a12eeca55dd8b831d7efb8c0d"],"title":"Fix #5197, handling of algebraic universes","message":"Fix #5197, handling of algebraic universes\n\nThey were allowed to stay in terms in some cases. We now ensure that if\nan evar is defined as e.g. fun x => Type@{foo}, foo is properly\nrefreshed to be non-algebraic as it could otherwise appear in the term\nand break the invariant.\n\nAlso cleanup the implementation of refresh_universes to avoid using a\nmutable reference and simply rely on the Constr.map smartmap idiom\ninstead.\n\nThis might have compatibility issues, e.g. in HoTT where maybe more\nnon-algebraic proxy universes could be generated, we'll see.\n\nFor the bug report proper, there is a lack of bidirectional\ntype-checking that makes the initial definition fail (there's a\nnon-canonical choice of dependency if we don't consider the typing\nconstraint). With the Program bidir hint it passes.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-19T12:09:58.000+01:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-20T14:26:28.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/d84ec924ccfd2d3f184feaac1dee86d17431d623"},"pipeline":{"id":24223910,"iid":1536,"project_id":6138686,"sha":"d84ec924ccfd2d3f184feaac1dee86d17431d623","ref":"pr-6218","status":"failed","source":"push","created_at":"2018-06-20T13:27:56.460Z","updated_at":"2018-06-20T17:18:02.960Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24223910"},"web_url":"https://gitlab.com/coq/coq/-/jobs/76209065","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":76209064,"status":"skipped","stage":"test","name":"ci-math-comp","ref":"pr-6218","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-20T13:27:57.753Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"d84ec924ccfd2d3f184feaac1dee86d17431d623","short_id":"d84ec924","created_at":"2018-06-20T14:26:28.000+01:00","parent_ids":["6715e6801c1d285a12eeca55dd8b831d7efb8c0d"],"title":"Fix #5197, handling of algebraic universes","message":"Fix #5197, handling of algebraic universes\n\nThey were allowed to stay in terms in some cases. We now ensure that if\nan evar is defined as e.g. fun x => Type@{foo}, foo is properly\nrefreshed to be non-algebraic as it could otherwise appear in the term\nand break the invariant.\n\nAlso cleanup the implementation of refresh_universes to avoid using a\nmutable reference and simply rely on the Constr.map smartmap idiom\ninstead.\n\nThis might have compatibility issues, e.g. in HoTT where maybe more\nnon-algebraic proxy universes could be generated, we'll see.\n\nFor the bug report proper, there is a lack of bidirectional\ntype-checking that makes the initial definition fail (there's a\nnon-canonical choice of dependency if we don't consider the typing\nconstraint). With the Program bidir hint it passes.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-19T12:09:58.000+01:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-20T14:26:28.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/d84ec924ccfd2d3f184feaac1dee86d17431d623"},"pipeline":{"id":24223910,"iid":1536,"project_id":6138686,"sha":"d84ec924ccfd2d3f184feaac1dee86d17431d623","ref":"pr-6218","status":"failed","source":"push","created_at":"2018-06-20T13:27:56.460Z","updated_at":"2018-06-20T17:18:02.960Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24223910"},"web_url":"https://gitlab.com/coq/coq/-/jobs/76209064","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":76209063,"status":"skipped","stage":"test","name":"ci-ltac2","ref":"pr-6218","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-20T13:27:57.724Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"d84ec924ccfd2d3f184feaac1dee86d17431d623","short_id":"d84ec924","created_at":"2018-06-20T14:26:28.000+01:00","parent_ids":["6715e6801c1d285a12eeca55dd8b831d7efb8c0d"],"title":"Fix #5197, handling of algebraic universes","message":"Fix #5197, handling of algebraic universes\n\nThey were allowed to stay in terms in some cases. We now ensure that if\nan evar is defined as e.g. fun x => Type@{foo}, foo is properly\nrefreshed to be non-algebraic as it could otherwise appear in the term\nand break the invariant.\n\nAlso cleanup the implementation of refresh_universes to avoid using a\nmutable reference and simply rely on the Constr.map smartmap idiom\ninstead.\n\nThis might have compatibility issues, e.g. in HoTT where maybe more\nnon-algebraic proxy universes could be generated, we'll see.\n\nFor the bug report proper, there is a lack of bidirectional\ntype-checking that makes the initial definition fail (there's a\nnon-canonical choice of dependency if we don't consider the typing\nconstraint). With the Program bidir hint it passes.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-19T12:09:58.000+01:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-20T14:26:28.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/d84ec924ccfd2d3f184feaac1dee86d17431d623"},"pipeline":{"id":24223910,"iid":1536,"project_id":6138686,"sha":"d84ec924ccfd2d3f184feaac1dee86d17431d623","ref":"pr-6218","status":"failed","source":"push","created_at":"2018-06-20T13:27:56.460Z","updated_at":"2018-06-20T17:18:02.960Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24223910"},"web_url":"https://gitlab.com/coq/coq/-/jobs/76209063","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":76209062,"status":"skipped","stage":"test","name":"ci-iris-lambda-rust","ref":"pr-6218","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-20T13:27:57.690Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"d84ec924ccfd2d3f184feaac1dee86d17431d623","short_id":"d84ec924","created_at":"2018-06-20T14:26:28.000+01:00","parent_ids":["6715e6801c1d285a12eeca55dd8b831d7efb8c0d"],"title":"Fix #5197, handling of algebraic universes","message":"Fix #5197, handling of algebraic universes\n\nThey were allowed to stay in terms in some cases. We now ensure that if\nan evar is defined as e.g. fun x => Type@{foo}, foo is properly\nrefreshed to be non-algebraic as it could otherwise appear in the term\nand break the invariant.\n\nAlso cleanup the implementation of refresh_universes to avoid using a\nmutable reference and simply rely on the Constr.map smartmap idiom\ninstead.\n\nThis might have compatibility issues, e.g. in HoTT where maybe more\nnon-algebraic proxy universes could be generated, we'll see.\n\nFor the bug report proper, there is a lack of bidirectional\ntype-checking that makes the initial definition fail (there's a\nnon-canonical choice of dependency if we don't consider the typing\nconstraint). With the Program bidir hint it passes.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-19T12:09:58.000+01:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-20T14:26:28.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/d84ec924ccfd2d3f184feaac1dee86d17431d623"},"pipeline":{"id":24223910,"iid":1536,"project_id":6138686,"sha":"d84ec924ccfd2d3f184feaac1dee86d17431d623","ref":"pr-6218","status":"failed","source":"push","created_at":"2018-06-20T13:27:56.460Z","updated_at":"2018-06-20T17:18:02.960Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24223910"},"web_url":"https://gitlab.com/coq/coq/-/jobs/76209062","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":76209061,"status":"skipped","stage":"test","name":"ci-hott","ref":"pr-6218","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-20T13:27:57.656Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"d84ec924ccfd2d3f184feaac1dee86d17431d623","short_id":"d84ec924","created_at":"2018-06-20T14:26:28.000+01:00","parent_ids":["6715e6801c1d285a12eeca55dd8b831d7efb8c0d"],"title":"Fix #5197, handling of algebraic universes","message":"Fix #5197, handling of algebraic universes\n\nThey were allowed to stay in terms in some cases. We now ensure that if\nan evar is defined as e.g. fun x => Type@{foo}, foo is properly\nrefreshed to be non-algebraic as it could otherwise appear in the term\nand break the invariant.\n\nAlso cleanup the implementation of refresh_universes to avoid using a\nmutable reference and simply rely on the Constr.map smartmap idiom\ninstead.\n\nThis might have compatibility issues, e.g. in HoTT where maybe more\nnon-algebraic proxy universes could be generated, we'll see.\n\nFor the bug report proper, there is a lack of bidirectional\ntype-checking that makes the initial definition fail (there's a\nnon-canonical choice of dependency if we don't consider the typing\nconstraint). With the Program bidir hint it passes.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-19T12:09:58.000+01:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-20T14:26:28.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/d84ec924ccfd2d3f184feaac1dee86d17431d623"},"pipeline":{"id":24223910,"iid":1536,"project_id":6138686,"sha":"d84ec924ccfd2d3f184feaac1dee86d17431d623","ref":"pr-6218","status":"failed","source":"push","created_at":"2018-06-20T13:27:56.460Z","updated_at":"2018-06-20T17:18:02.960Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24223910"},"web_url":"https://gitlab.com/coq/coq/-/jobs/76209061","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":76209060,"status":"skipped","stage":"test","name":"ci-geocoq","ref":"pr-6218","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-20T13:27:57.627Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"d84ec924ccfd2d3f184feaac1dee86d17431d623","short_id":"d84ec924","created_at":"2018-06-20T14:26:28.000+01:00","parent_ids":["6715e6801c1d285a12eeca55dd8b831d7efb8c0d"],"title":"Fix #5197, handling of algebraic universes","message":"Fix #5197, handling of algebraic universes\n\nThey were allowed to stay in terms in some cases. We now ensure that if\nan evar is defined as e.g. fun x => Type@{foo}, foo is properly\nrefreshed to be non-algebraic as it could otherwise appear in the term\nand break the invariant.\n\nAlso cleanup the implementation of refresh_universes to avoid using a\nmutable reference and simply rely on the Constr.map smartmap idiom\ninstead.\n\nThis might have compatibility issues, e.g. in HoTT where maybe more\nnon-algebraic proxy universes could be generated, we'll see.\n\nFor the bug report proper, there is a lack of bidirectional\ntype-checking that makes the initial definition fail (there's a\nnon-canonical choice of dependency if we don't consider the typing\nconstraint). With the Program bidir hint it passes.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-19T12:09:58.000+01:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-20T14:26:28.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/d84ec924ccfd2d3f184feaac1dee86d17431d623"},"pipeline":{"id":24223910,"iid":1536,"project_id":6138686,"sha":"d84ec924ccfd2d3f184feaac1dee86d17431d623","ref":"pr-6218","status":"failed","source":"push","created_at":"2018-06-20T13:27:56.460Z","updated_at":"2018-06-20T17:18:02.960Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24223910"},"web_url":"https://gitlab.com/coq/coq/-/jobs/76209060","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":76209059,"status":"skipped","stage":"test","name":"ci-formal-topology","ref":"pr-6218","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-20T13:27:57.560Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"d84ec924ccfd2d3f184feaac1dee86d17431d623","short_id":"d84ec924","created_at":"2018-06-20T14:26:28.000+01:00","parent_ids":["6715e6801c1d285a12eeca55dd8b831d7efb8c0d"],"title":"Fix #5197, handling of algebraic universes","message":"Fix #5197, handling of algebraic universes\n\nThey were allowed to stay in terms in some cases. We now ensure that if\nan evar is defined as e.g. fun x => Type@{foo}, foo is properly\nrefreshed to be non-algebraic as it could otherwise appear in the term\nand break the invariant.\n\nAlso cleanup the implementation of refresh_universes to avoid using a\nmutable reference and simply rely on the Constr.map smartmap idiom\ninstead.\n\nThis might have compatibility issues, e.g. in HoTT where maybe more\nnon-algebraic proxy universes could be generated, we'll see.\n\nFor the bug report proper, there is a lack of bidirectional\ntype-checking that makes the initial definition fail (there's a\nnon-canonical choice of dependency if we don't consider the typing\nconstraint). With the Program bidir hint it passes.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-19T12:09:58.000+01:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-20T14:26:28.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/d84ec924ccfd2d3f184feaac1dee86d17431d623"},"pipeline":{"id":24223910,"iid":1536,"project_id":6138686,"sha":"d84ec924ccfd2d3f184feaac1dee86d17431d623","ref":"pr-6218","status":"failed","source":"push","created_at":"2018-06-20T13:27:56.460Z","updated_at":"2018-06-20T17:18:02.960Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24223910"},"web_url":"https://gitlab.com/coq/coq/-/jobs/76209059","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":76209058,"status":"skipped","stage":"test","name":"ci-flocq","ref":"pr-6218","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-20T13:27:57.533Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"d84ec924ccfd2d3f184feaac1dee86d17431d623","short_id":"d84ec924","created_at":"2018-06-20T14:26:28.000+01:00","parent_ids":["6715e6801c1d285a12eeca55dd8b831d7efb8c0d"],"title":"Fix #5197, handling of algebraic universes","message":"Fix #5197, handling of algebraic universes\n\nThey were allowed to stay in terms in some cases. We now ensure that if\nan evar is defined as e.g. fun x => Type@{foo}, foo is properly\nrefreshed to be non-algebraic as it could otherwise appear in the term\nand break the invariant.\n\nAlso cleanup the implementation of refresh_universes to avoid using a\nmutable reference and simply rely on the Constr.map smartmap idiom\ninstead.\n\nThis might have compatibility issues, e.g. in HoTT where maybe more\nnon-algebraic proxy universes could be generated, we'll see.\n\nFor the bug report proper, there is a lack of bidirectional\ntype-checking that makes the initial definition fail (there's a\nnon-canonical choice of dependency if we don't consider the typing\nconstraint). With the Program bidir hint it passes.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-19T12:09:58.000+01:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-20T14:26:28.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/d84ec924ccfd2d3f184feaac1dee86d17431d623"},"pipeline":{"id":24223910,"iid":1536,"project_id":6138686,"sha":"d84ec924ccfd2d3f184feaac1dee86d17431d623","ref":"pr-6218","status":"failed","source":"push","created_at":"2018-06-20T13:27:56.460Z","updated_at":"2018-06-20T17:18:02.960Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24223910"},"web_url":"https://gitlab.com/coq/coq/-/jobs/76209058","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":76209057,"status":"skipped","stage":"test","name":"ci-fiat-parsers","ref":"pr-6218","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-20T13:27:57.472Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"d84ec924ccfd2d3f184feaac1dee86d17431d623","short_id":"d84ec924","created_at":"2018-06-20T14:26:28.000+01:00","parent_ids":["6715e6801c1d285a12eeca55dd8b831d7efb8c0d"],"title":"Fix #5197, handling of algebraic universes","message":"Fix #5197, handling of algebraic universes\n\nThey were allowed to stay in terms in some cases. We now ensure that if\nan evar is defined as e.g. fun x => Type@{foo}, foo is properly\nrefreshed to be non-algebraic as it could otherwise appear in the term\nand break the invariant.\n\nAlso cleanup the implementation of refresh_universes to avoid using a\nmutable reference and simply rely on the Constr.map smartmap idiom\ninstead.\n\nThis might have compatibility issues, e.g. in HoTT where maybe more\nnon-algebraic proxy universes could be generated, we'll see.\n\nFor the bug report proper, there is a lack of bidirectional\ntype-checking that makes the initial definition fail (there's a\nnon-canonical choice of dependency if we don't consider the typing\nconstraint). With the Program bidir hint it passes.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-19T12:09:58.000+01:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-20T14:26:28.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/d84ec924ccfd2d3f184feaac1dee86d17431d623"},"pipeline":{"id":24223910,"iid":1536,"project_id":6138686,"sha":"d84ec924ccfd2d3f184feaac1dee86d17431d623","ref":"pr-6218","status":"failed","source":"push","created_at":"2018-06-20T13:27:56.460Z","updated_at":"2018-06-20T17:18:02.960Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24223910"},"web_url":"https://gitlab.com/coq/coq/-/jobs/76209057","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":76209056,"status":"skipped","stage":"test","name":"ci-fiat-crypto","ref":"pr-6218","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-20T13:27:57.406Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"d84ec924ccfd2d3f184feaac1dee86d17431d623","short_id":"d84ec924","created_at":"2018-06-20T14:26:28.000+01:00","parent_ids":["6715e6801c1d285a12eeca55dd8b831d7efb8c0d"],"title":"Fix #5197, handling of algebraic universes","message":"Fix #5197, handling of algebraic universes\n\nThey were allowed to stay in terms in some cases. We now ensure that if\nan evar is defined as e.g. fun x => Type@{foo}, foo is properly\nrefreshed to be non-algebraic as it could otherwise appear in the term\nand break the invariant.\n\nAlso cleanup the implementation of refresh_universes to avoid using a\nmutable reference and simply rely on the Constr.map smartmap idiom\ninstead.\n\nThis might have compatibility issues, e.g. in HoTT where maybe more\nnon-algebraic proxy universes could be generated, we'll see.\n\nFor the bug report proper, there is a lack of bidirectional\ntype-checking that makes the initial definition fail (there's a\nnon-canonical choice of dependency if we don't consider the typing\nconstraint). With the Program bidir hint it passes.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-19T12:09:58.000+01:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-20T14:26:28.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/d84ec924ccfd2d3f184feaac1dee86d17431d623"},"pipeline":{"id":24223910,"iid":1536,"project_id":6138686,"sha":"d84ec924ccfd2d3f184feaac1dee86d17431d623","ref":"pr-6218","status":"failed","source":"push","created_at":"2018-06-20T13:27:56.460Z","updated_at":"2018-06-20T17:18:02.960Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24223910"},"web_url":"https://gitlab.com/coq/coq/-/jobs/76209056","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":76209055,"status":"skipped","stage":"test","name":"ci-fcsl-pcm","ref":"pr-6218","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-20T13:27:57.375Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"d84ec924ccfd2d3f184feaac1dee86d17431d623","short_id":"d84ec924","created_at":"2018-06-20T14:26:28.000+01:00","parent_ids":["6715e6801c1d285a12eeca55dd8b831d7efb8c0d"],"title":"Fix #5197, handling of algebraic universes","message":"Fix #5197, handling of algebraic universes\n\nThey were allowed to stay in terms in some cases. We now ensure that if\nan evar is defined as e.g. fun x => Type@{foo}, foo is properly\nrefreshed to be non-algebraic as it could otherwise appear in the term\nand break the invariant.\n\nAlso cleanup the implementation of refresh_universes to avoid using a\nmutable reference and simply rely on the Constr.map smartmap idiom\ninstead.\n\nThis might have compatibility issues, e.g. in HoTT where maybe more\nnon-algebraic proxy universes could be generated, we'll see.\n\nFor the bug report proper, there is a lack of bidirectional\ntype-checking that makes the initial definition fail (there's a\nnon-canonical choice of dependency if we don't consider the typing\nconstraint). With the Program bidir hint it passes.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-19T12:09:58.000+01:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-20T14:26:28.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/d84ec924ccfd2d3f184feaac1dee86d17431d623"},"pipeline":{"id":24223910,"iid":1536,"project_id":6138686,"sha":"d84ec924ccfd2d3f184feaac1dee86d17431d623","ref":"pr-6218","status":"failed","source":"push","created_at":"2018-06-20T13:27:56.460Z","updated_at":"2018-06-20T17:18:02.960Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24223910"},"web_url":"https://gitlab.com/coq/coq/-/jobs/76209055","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":76209054,"status":"skipped","stage":"test","name":"ci-equations","ref":"pr-6218","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-20T13:27:57.321Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"d84ec924ccfd2d3f184feaac1dee86d17431d623","short_id":"d84ec924","created_at":"2018-06-20T14:26:28.000+01:00","parent_ids":["6715e6801c1d285a12eeca55dd8b831d7efb8c0d"],"title":"Fix #5197, handling of algebraic universes","message":"Fix #5197, handling of algebraic universes\n\nThey were allowed to stay in terms in some cases. We now ensure that if\nan evar is defined as e.g. fun x => Type@{foo}, foo is properly\nrefreshed to be non-algebraic as it could otherwise appear in the term\nand break the invariant.\n\nAlso cleanup the implementation of refresh_universes to avoid using a\nmutable reference and simply rely on the Constr.map smartmap idiom\ninstead.\n\nThis might have compatibility issues, e.g. in HoTT where maybe more\nnon-algebraic proxy universes could be generated, we'll see.\n\nFor the bug report proper, there is a lack of bidirectional\ntype-checking that makes the initial definition fail (there's a\nnon-canonical choice of dependency if we don't consider the typing\nconstraint). With the Program bidir hint it passes.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-19T12:09:58.000+01:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-20T14:26:28.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/d84ec924ccfd2d3f184feaac1dee86d17431d623"},"pipeline":{"id":24223910,"iid":1536,"project_id":6138686,"sha":"d84ec924ccfd2d3f184feaac1dee86d17431d623","ref":"pr-6218","status":"failed","source":"push","created_at":"2018-06-20T13:27:56.460Z","updated_at":"2018-06-20T17:18:02.960Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24223910"},"web_url":"https://gitlab.com/coq/coq/-/jobs/76209054","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":76209053,"status":"skipped","stage":"test","name":"ci-elpi","ref":"pr-6218","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-20T13:27:57.288Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"d84ec924ccfd2d3f184feaac1dee86d17431d623","short_id":"d84ec924","created_at":"2018-06-20T14:26:28.000+01:00","parent_ids":["6715e6801c1d285a12eeca55dd8b831d7efb8c0d"],"title":"Fix #5197, handling of algebraic universes","message":"Fix #5197, handling of algebraic universes\n\nThey were allowed to stay in terms in some cases. We now ensure that if\nan evar is defined as e.g. fun x => Type@{foo}, foo is properly\nrefreshed to be non-algebraic as it could otherwise appear in the term\nand break the invariant.\n\nAlso cleanup the implementation of refresh_universes to avoid using a\nmutable reference and simply rely on the Constr.map smartmap idiom\ninstead.\n\nThis might have compatibility issues, e.g. in HoTT where maybe more\nnon-algebraic proxy universes could be generated, we'll see.\n\nFor the bug report proper, there is a lack of bidirectional\ntype-checking that makes the initial definition fail (there's a\nnon-canonical choice of dependency if we don't consider the typing\nconstraint). With the Program bidir hint it passes.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-19T12:09:58.000+01:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-20T14:26:28.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/d84ec924ccfd2d3f184feaac1dee86d17431d623"},"pipeline":{"id":24223910,"iid":1536,"project_id":6138686,"sha":"d84ec924ccfd2d3f184feaac1dee86d17431d623","ref":"pr-6218","status":"failed","source":"push","created_at":"2018-06-20T13:27:56.460Z","updated_at":"2018-06-20T17:18:02.960Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24223910"},"web_url":"https://gitlab.com/coq/coq/-/jobs/76209053","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":76209052,"status":"skipped","stage":"test","name":"ci-cross-crypto","ref":"pr-6218","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-20T13:27:57.260Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"d84ec924ccfd2d3f184feaac1dee86d17431d623","short_id":"d84ec924","created_at":"2018-06-20T14:26:28.000+01:00","parent_ids":["6715e6801c1d285a12eeca55dd8b831d7efb8c0d"],"title":"Fix #5197, handling of algebraic universes","message":"Fix #5197, handling of algebraic universes\n\nThey were allowed to stay in terms in some cases. We now ensure that if\nan evar is defined as e.g. fun x => Type@{foo}, foo is properly\nrefreshed to be non-algebraic as it could otherwise appear in the term\nand break the invariant.\n\nAlso cleanup the implementation of refresh_universes to avoid using a\nmutable reference and simply rely on the Constr.map smartmap idiom\ninstead.\n\nThis might have compatibility issues, e.g. in HoTT where maybe more\nnon-algebraic proxy universes could be generated, we'll see.\n\nFor the bug report proper, there is a lack of bidirectional\ntype-checking that makes the initial definition fail (there's a\nnon-canonical choice of dependency if we don't consider the typing\nconstraint). With the Program bidir hint it passes.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-19T12:09:58.000+01:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-20T14:26:28.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/d84ec924ccfd2d3f184feaac1dee86d17431d623"},"pipeline":{"id":24223910,"iid":1536,"project_id":6138686,"sha":"d84ec924ccfd2d3f184feaac1dee86d17431d623","ref":"pr-6218","status":"failed","source":"push","created_at":"2018-06-20T13:27:56.460Z","updated_at":"2018-06-20T17:18:02.960Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24223910"},"web_url":"https://gitlab.com/coq/coq/-/jobs/76209052","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":76209051,"status":"skipped","stage":"test","name":"ci-coquelicot","ref":"pr-6218","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-20T13:27:57.233Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"d84ec924ccfd2d3f184feaac1dee86d17431d623","short_id":"d84ec924","created_at":"2018-06-20T14:26:28.000+01:00","parent_ids":["6715e6801c1d285a12eeca55dd8b831d7efb8c0d"],"title":"Fix #5197, handling of algebraic universes","message":"Fix #5197, handling of algebraic universes\n\nThey were allowed to stay in terms in some cases. We now ensure that if\nan evar is defined as e.g. fun x => Type@{foo}, foo is properly\nrefreshed to be non-algebraic as it could otherwise appear in the term\nand break the invariant.\n\nAlso cleanup the implementation of refresh_universes to avoid using a\nmutable reference and simply rely on the Constr.map smartmap idiom\ninstead.\n\nThis might have compatibility issues, e.g. in HoTT where maybe more\nnon-algebraic proxy universes could be generated, we'll see.\n\nFor the bug report proper, there is a lack of bidirectional\ntype-checking that makes the initial definition fail (there's a\nnon-canonical choice of dependency if we don't consider the typing\nconstraint). With the Program bidir hint it passes.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-19T12:09:58.000+01:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-20T14:26:28.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/d84ec924ccfd2d3f184feaac1dee86d17431d623"},"pipeline":{"id":24223910,"iid":1536,"project_id":6138686,"sha":"d84ec924ccfd2d3f184feaac1dee86d17431d623","ref":"pr-6218","status":"failed","source":"push","created_at":"2018-06-20T13:27:56.460Z","updated_at":"2018-06-20T17:18:02.960Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24223910"},"web_url":"https://gitlab.com/coq/coq/-/jobs/76209051","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":76209050,"status":"skipped","stage":"test","name":"ci-coq-dpdgraph","ref":"pr-6218","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-20T13:27:57.174Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"d84ec924ccfd2d3f184feaac1dee86d17431d623","short_id":"d84ec924","created_at":"2018-06-20T14:26:28.000+01:00","parent_ids":["6715e6801c1d285a12eeca55dd8b831d7efb8c0d"],"title":"Fix #5197, handling of algebraic universes","message":"Fix #5197, handling of algebraic universes\n\nThey were allowed to stay in terms in some cases. We now ensure that if\nan evar is defined as e.g. fun x => Type@{foo}, foo is properly\nrefreshed to be non-algebraic as it could otherwise appear in the term\nand break the invariant.\n\nAlso cleanup the implementation of refresh_universes to avoid using a\nmutable reference and simply rely on the Constr.map smartmap idiom\ninstead.\n\nThis might have compatibility issues, e.g. in HoTT where maybe more\nnon-algebraic proxy universes could be generated, we'll see.\n\nFor the bug report proper, there is a lack of bidirectional\ntype-checking that makes the initial definition fail (there's a\nnon-canonical choice of dependency if we don't consider the typing\nconstraint). With the Program bidir hint it passes.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-19T12:09:58.000+01:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-20T14:26:28.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/d84ec924ccfd2d3f184feaac1dee86d17431d623"},"pipeline":{"id":24223910,"iid":1536,"project_id":6138686,"sha":"d84ec924ccfd2d3f184feaac1dee86d17431d623","ref":"pr-6218","status":"failed","source":"push","created_at":"2018-06-20T13:27:56.460Z","updated_at":"2018-06-20T17:18:02.960Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24223910"},"web_url":"https://gitlab.com/coq/coq/-/jobs/76209050","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":76209049,"status":"skipped","stage":"test","name":"ci-compcert","ref":"pr-6218","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-20T13:27:57.148Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"d84ec924ccfd2d3f184feaac1dee86d17431d623","short_id":"d84ec924","created_at":"2018-06-20T14:26:28.000+01:00","parent_ids":["6715e6801c1d285a12eeca55dd8b831d7efb8c0d"],"title":"Fix #5197, handling of algebraic universes","message":"Fix #5197, handling of algebraic universes\n\nThey were allowed to stay in terms in some cases. We now ensure that if\nan evar is defined as e.g. fun x => Type@{foo}, foo is properly\nrefreshed to be non-algebraic as it could otherwise appear in the term\nand break the invariant.\n\nAlso cleanup the implementation of refresh_universes to avoid using a\nmutable reference and simply rely on the Constr.map smartmap idiom\ninstead.\n\nThis might have compatibility issues, e.g. in HoTT where maybe more\nnon-algebraic proxy universes could be generated, we'll see.\n\nFor the bug report proper, there is a lack of bidirectional\ntype-checking that makes the initial definition fail (there's a\nnon-canonical choice of dependency if we don't consider the typing\nconstraint). With the Program bidir hint it passes.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-19T12:09:58.000+01:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-20T14:26:28.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/d84ec924ccfd2d3f184feaac1dee86d17431d623"},"pipeline":{"id":24223910,"iid":1536,"project_id":6138686,"sha":"d84ec924ccfd2d3f184feaac1dee86d17431d623","ref":"pr-6218","status":"failed","source":"push","created_at":"2018-06-20T13:27:56.460Z","updated_at":"2018-06-20T17:18:02.960Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24223910"},"web_url":"https://gitlab.com/coq/coq/-/jobs/76209049","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":76209048,"status":"skipped","stage":"test","name":"ci-color","ref":"pr-6218","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-20T13:27:57.121Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"d84ec924ccfd2d3f184feaac1dee86d17431d623","short_id":"d84ec924","created_at":"2018-06-20T14:26:28.000+01:00","parent_ids":["6715e6801c1d285a12eeca55dd8b831d7efb8c0d"],"title":"Fix #5197, handling of algebraic universes","message":"Fix #5197, handling of algebraic universes\n\nThey were allowed to stay in terms in some cases. We now ensure that if\nan evar is defined as e.g. fun x => Type@{foo}, foo is properly\nrefreshed to be non-algebraic as it could otherwise appear in the term\nand break the invariant.\n\nAlso cleanup the implementation of refresh_universes to avoid using a\nmutable reference and simply rely on the Constr.map smartmap idiom\ninstead.\n\nThis might have compatibility issues, e.g. in HoTT where maybe more\nnon-algebraic proxy universes could be generated, we'll see.\n\nFor the bug report proper, there is a lack of bidirectional\ntype-checking that makes the initial definition fail (there's a\nnon-canonical choice of dependency if we don't consider the typing\nconstraint). With the Program bidir hint it passes.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-19T12:09:58.000+01:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-20T14:26:28.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/d84ec924ccfd2d3f184feaac1dee86d17431d623"},"pipeline":{"id":24223910,"iid":1536,"project_id":6138686,"sha":"d84ec924ccfd2d3f184feaac1dee86d17431d623","ref":"pr-6218","status":"failed","source":"push","created_at":"2018-06-20T13:27:56.460Z","updated_at":"2018-06-20T17:18:02.960Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24223910"},"web_url":"https://gitlab.com/coq/coq/-/jobs/76209048","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":76209047,"status":"skipped","stage":"test","name":"ci-bignums","ref":"pr-6218","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-20T13:27:57.096Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"d84ec924ccfd2d3f184feaac1dee86d17431d623","short_id":"d84ec924","created_at":"2018-06-20T14:26:28.000+01:00","parent_ids":["6715e6801c1d285a12eeca55dd8b831d7efb8c0d"],"title":"Fix #5197, handling of algebraic universes","message":"Fix #5197, handling of algebraic universes\n\nThey were allowed to stay in terms in some cases. We now ensure that if\nan evar is defined as e.g. fun x => Type@{foo}, foo is properly\nrefreshed to be non-algebraic as it could otherwise appear in the term\nand break the invariant.\n\nAlso cleanup the implementation of refresh_universes to avoid using a\nmutable reference and simply rely on the Constr.map smartmap idiom\ninstead.\n\nThis might have compatibility issues, e.g. in HoTT where maybe more\nnon-algebraic proxy universes could be generated, we'll see.\n\nFor the bug report proper, there is a lack of bidirectional\ntype-checking that makes the initial definition fail (there's a\nnon-canonical choice of dependency if we don't consider the typing\nconstraint). With the Program bidir hint it passes.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-19T12:09:58.000+01:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-20T14:26:28.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/d84ec924ccfd2d3f184feaac1dee86d17431d623"},"pipeline":{"id":24223910,"iid":1536,"project_id":6138686,"sha":"d84ec924ccfd2d3f184feaac1dee86d17431d623","ref":"pr-6218","status":"failed","source":"push","created_at":"2018-06-20T13:27:56.460Z","updated_at":"2018-06-20T17:18:02.960Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24223910"},"web_url":"https://gitlab.com/coq/coq/-/jobs/76209047","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":76209046,"status":"skipped","stage":"test","name":"validate:edge+flambda","ref":"pr-6218","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-20T13:27:57.071Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"d84ec924ccfd2d3f184feaac1dee86d17431d623","short_id":"d84ec924","created_at":"2018-06-20T14:26:28.000+01:00","parent_ids":["6715e6801c1d285a12eeca55dd8b831d7efb8c0d"],"title":"Fix #5197, handling of algebraic universes","message":"Fix #5197, handling of algebraic universes\n\nThey were allowed to stay in terms in some cases. We now ensure that if\nan evar is defined as e.g. fun x => Type@{foo}, foo is properly\nrefreshed to be non-algebraic as it could otherwise appear in the term\nand break the invariant.\n\nAlso cleanup the implementation of refresh_universes to avoid using a\nmutable reference and simply rely on the Constr.map smartmap idiom\ninstead.\n\nThis might have compatibility issues, e.g. in HoTT where maybe more\nnon-algebraic proxy universes could be generated, we'll see.\n\nFor the bug report proper, there is a lack of bidirectional\ntype-checking that makes the initial definition fail (there's a\nnon-canonical choice of dependency if we don't consider the typing\nconstraint). With the Program bidir hint it passes.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-19T12:09:58.000+01:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-20T14:26:28.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/d84ec924ccfd2d3f184feaac1dee86d17431d623"},"pipeline":{"id":24223910,"iid":1536,"project_id":6138686,"sha":"d84ec924ccfd2d3f184feaac1dee86d17431d623","ref":"pr-6218","status":"failed","source":"push","created_at":"2018-06-20T13:27:56.460Z","updated_at":"2018-06-20T17:18:02.960Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24223910"},"web_url":"https://gitlab.com/coq/coq/-/jobs/76209046","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":76209045,"status":"skipped","stage":"test","name":"validate:edge","ref":"pr-6218","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-20T13:27:57.041Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"d84ec924ccfd2d3f184feaac1dee86d17431d623","short_id":"d84ec924","created_at":"2018-06-20T14:26:28.000+01:00","parent_ids":["6715e6801c1d285a12eeca55dd8b831d7efb8c0d"],"title":"Fix #5197, handling of algebraic universes","message":"Fix #5197, handling of algebraic universes\n\nThey were allowed to stay in terms in some cases. We now ensure that if\nan evar is defined as e.g. fun x => Type@{foo}, foo is properly\nrefreshed to be non-algebraic as it could otherwise appear in the term\nand break the invariant.\n\nAlso cleanup the implementation of refresh_universes to avoid using a\nmutable reference and simply rely on the Constr.map smartmap idiom\ninstead.\n\nThis might have compatibility issues, e.g. in HoTT where maybe more\nnon-algebraic proxy universes could be generated, we'll see.\n\nFor the bug report proper, there is a lack of bidirectional\ntype-checking that makes the initial definition fail (there's a\nnon-canonical choice of dependency if we don't consider the typing\nconstraint). With the Program bidir hint it passes.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-19T12:09:58.000+01:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-20T14:26:28.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/d84ec924ccfd2d3f184feaac1dee86d17431d623"},"pipeline":{"id":24223910,"iid":1536,"project_id":6138686,"sha":"d84ec924ccfd2d3f184feaac1dee86d17431d623","ref":"pr-6218","status":"failed","source":"push","created_at":"2018-06-20T13:27:56.460Z","updated_at":"2018-06-20T17:18:02.960Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24223910"},"web_url":"https://gitlab.com/coq/coq/-/jobs/76209045","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":76209044,"status":"skipped","stage":"test","name":"validate:base+32bit","ref":"pr-6218","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-20T13:27:57.007Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"d84ec924ccfd2d3f184feaac1dee86d17431d623","short_id":"d84ec924","created_at":"2018-06-20T14:26:28.000+01:00","parent_ids":["6715e6801c1d285a12eeca55dd8b831d7efb8c0d"],"title":"Fix #5197, handling of algebraic universes","message":"Fix #5197, handling of algebraic universes\n\nThey were allowed to stay in terms in some cases. We now ensure that if\nan evar is defined as e.g. fun x => Type@{foo}, foo is properly\nrefreshed to be non-algebraic as it could otherwise appear in the term\nand break the invariant.\n\nAlso cleanup the implementation of refresh_universes to avoid using a\nmutable reference and simply rely on the Constr.map smartmap idiom\ninstead.\n\nThis might have compatibility issues, e.g. in HoTT where maybe more\nnon-algebraic proxy universes could be generated, we'll see.\n\nFor the bug report proper, there is a lack of bidirectional\ntype-checking that makes the initial definition fail (there's a\nnon-canonical choice of dependency if we don't consider the typing\nconstraint). With the Program bidir hint it passes.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-19T12:09:58.000+01:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-20T14:26:28.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/d84ec924ccfd2d3f184feaac1dee86d17431d623"},"pipeline":{"id":24223910,"iid":1536,"project_id":6138686,"sha":"d84ec924ccfd2d3f184feaac1dee86d17431d623","ref":"pr-6218","status":"failed","source":"push","created_at":"2018-06-20T13:27:56.460Z","updated_at":"2018-06-20T17:18:02.960Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24223910"},"web_url":"https://gitlab.com/coq/coq/-/jobs/76209044","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":76209043,"status":"skipped","stage":"test","name":"validate:base","ref":"pr-6218","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-20T13:27:56.979Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"d84ec924ccfd2d3f184feaac1dee86d17431d623","short_id":"d84ec924","created_at":"2018-06-20T14:26:28.000+01:00","parent_ids":["6715e6801c1d285a12eeca55dd8b831d7efb8c0d"],"title":"Fix #5197, handling of algebraic universes","message":"Fix #5197, handling of algebraic universes\n\nThey were allowed to stay in terms in some cases. We now ensure that if\nan evar is defined as e.g. fun x => Type@{foo}, foo is properly\nrefreshed to be non-algebraic as it could otherwise appear in the term\nand break the invariant.\n\nAlso cleanup the implementation of refresh_universes to avoid using a\nmutable reference and simply rely on the Constr.map smartmap idiom\ninstead.\n\nThis might have compatibility issues, e.g. in HoTT where maybe more\nnon-algebraic proxy universes could be generated, we'll see.\n\nFor the bug report proper, there is a lack of bidirectional\ntype-checking that makes the initial definition fail (there's a\nnon-canonical choice of dependency if we don't consider the typing\nconstraint). With the Program bidir hint it passes.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-19T12:09:58.000+01:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-20T14:26:28.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/d84ec924ccfd2d3f184feaac1dee86d17431d623"},"pipeline":{"id":24223910,"iid":1536,"project_id":6138686,"sha":"d84ec924ccfd2d3f184feaac1dee86d17431d623","ref":"pr-6218","status":"failed","source":"push","created_at":"2018-06-20T13:27:56.460Z","updated_at":"2018-06-20T17:18:02.960Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24223910"},"web_url":"https://gitlab.com/coq/coq/-/jobs/76209043","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":76209042,"status":"skipped","stage":"test","name":"test-suite:edge+flambda","ref":"pr-6218","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-20T13:27:56.920Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"d84ec924ccfd2d3f184feaac1dee86d17431d623","short_id":"d84ec924","created_at":"2018-06-20T14:26:28.000+01:00","parent_ids":["6715e6801c1d285a12eeca55dd8b831d7efb8c0d"],"title":"Fix #5197, handling of algebraic universes","message":"Fix #5197, handling of algebraic universes\n\nThey were allowed to stay in terms in some cases. We now ensure that if\nan evar is defined as e.g. fun x => Type@{foo}, foo is properly\nrefreshed to be non-algebraic as it could otherwise appear in the term\nand break the invariant.\n\nAlso cleanup the implementation of refresh_universes to avoid using a\nmutable reference and simply rely on the Constr.map smartmap idiom\ninstead.\n\nThis might have compatibility issues, e.g. in HoTT where maybe more\nnon-algebraic proxy universes could be generated, we'll see.\n\nFor the bug report proper, there is a lack of bidirectional\ntype-checking that makes the initial definition fail (there's a\nnon-canonical choice of dependency if we don't consider the typing\nconstraint). With the Program bidir hint it passes.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-19T12:09:58.000+01:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-20T14:26:28.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/d84ec924ccfd2d3f184feaac1dee86d17431d623"},"pipeline":{"id":24223910,"iid":1536,"project_id":6138686,"sha":"d84ec924ccfd2d3f184feaac1dee86d17431d623","ref":"pr-6218","status":"failed","source":"push","created_at":"2018-06-20T13:27:56.460Z","updated_at":"2018-06-20T17:18:02.960Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24223910"},"web_url":"https://gitlab.com/coq/coq/-/jobs/76209042","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":76209041,"status":"skipped","stage":"test","name":"test-suite:edge","ref":"pr-6218","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-20T13:27:56.889Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"d84ec924ccfd2d3f184feaac1dee86d17431d623","short_id":"d84ec924","created_at":"2018-06-20T14:26:28.000+01:00","parent_ids":["6715e6801c1d285a12eeca55dd8b831d7efb8c0d"],"title":"Fix #5197, handling of algebraic universes","message":"Fix #5197, handling of algebraic universes\n\nThey were allowed to stay in terms in some cases. We now ensure that if\nan evar is defined as e.g. fun x => Type@{foo}, foo is properly\nrefreshed to be non-algebraic as it could otherwise appear in the term\nand break the invariant.\n\nAlso cleanup the implementation of refresh_universes to avoid using a\nmutable reference and simply rely on the Constr.map smartmap idiom\ninstead.\n\nThis might have compatibility issues, e.g. in HoTT where maybe more\nnon-algebraic proxy universes could be generated, we'll see.\n\nFor the bug report proper, there is a lack of bidirectional\ntype-checking that makes the initial definition fail (there's a\nnon-canonical choice of dependency if we don't consider the typing\nconstraint). With the Program bidir hint it passes.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-19T12:09:58.000+01:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-20T14:26:28.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/d84ec924ccfd2d3f184feaac1dee86d17431d623"},"pipeline":{"id":24223910,"iid":1536,"project_id":6138686,"sha":"d84ec924ccfd2d3f184feaac1dee86d17431d623","ref":"pr-6218","status":"failed","source":"push","created_at":"2018-06-20T13:27:56.460Z","updated_at":"2018-06-20T17:18:02.960Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24223910"},"web_url":"https://gitlab.com/coq/coq/-/jobs/76209041","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":76209040,"status":"skipped","stage":"test","name":"test-suite:base+32bit","ref":"pr-6218","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-20T13:27:56.860Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"d84ec924ccfd2d3f184feaac1dee86d17431d623","short_id":"d84ec924","created_at":"2018-06-20T14:26:28.000+01:00","parent_ids":["6715e6801c1d285a12eeca55dd8b831d7efb8c0d"],"title":"Fix #5197, handling of algebraic universes","message":"Fix #5197, handling of algebraic universes\n\nThey were allowed to stay in terms in some cases. We now ensure that if\nan evar is defined as e.g. fun x => Type@{foo}, foo is properly\nrefreshed to be non-algebraic as it could otherwise appear in the term\nand break the invariant.\n\nAlso cleanup the implementation of refresh_universes to avoid using a\nmutable reference and simply rely on the Constr.map smartmap idiom\ninstead.\n\nThis might have compatibility issues, e.g. in HoTT where maybe more\nnon-algebraic proxy universes could be generated, we'll see.\n\nFor the bug report proper, there is a lack of bidirectional\ntype-checking that makes the initial definition fail (there's a\nnon-canonical choice of dependency if we don't consider the typing\nconstraint). With the Program bidir hint it passes.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-19T12:09:58.000+01:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-20T14:26:28.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/d84ec924ccfd2d3f184feaac1dee86d17431d623"},"pipeline":{"id":24223910,"iid":1536,"project_id":6138686,"sha":"d84ec924ccfd2d3f184feaac1dee86d17431d623","ref":"pr-6218","status":"failed","source":"push","created_at":"2018-06-20T13:27:56.460Z","updated_at":"2018-06-20T17:18:02.960Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24223910"},"web_url":"https://gitlab.com/coq/coq/-/jobs/76209040","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":76209039,"status":"skipped","stage":"test","name":"test-suite:base","ref":"pr-6218","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-20T13:27:56.824Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"d84ec924ccfd2d3f184feaac1dee86d17431d623","short_id":"d84ec924","created_at":"2018-06-20T14:26:28.000+01:00","parent_ids":["6715e6801c1d285a12eeca55dd8b831d7efb8c0d"],"title":"Fix #5197, handling of algebraic universes","message":"Fix #5197, handling of algebraic universes\n\nThey were allowed to stay in terms in some cases. We now ensure that if\nan evar is defined as e.g. fun x => Type@{foo}, foo is properly\nrefreshed to be non-algebraic as it could otherwise appear in the term\nand break the invariant.\n\nAlso cleanup the implementation of refresh_universes to avoid using a\nmutable reference and simply rely on the Constr.map smartmap idiom\ninstead.\n\nThis might have compatibility issues, e.g. in HoTT where maybe more\nnon-algebraic proxy universes could be generated, we'll see.\n\nFor the bug report proper, there is a lack of bidirectional\ntype-checking that makes the initial definition fail (there's a\nnon-canonical choice of dependency if we don't consider the typing\nconstraint). With the Program bidir hint it passes.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-19T12:09:58.000+01:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-20T14:26:28.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/d84ec924ccfd2d3f184feaac1dee86d17431d623"},"pipeline":{"id":24223910,"iid":1536,"project_id":6138686,"sha":"d84ec924ccfd2d3f184feaac1dee86d17431d623","ref":"pr-6218","status":"failed","source":"push","created_at":"2018-06-20T13:27:56.460Z","updated_at":"2018-06-20T17:18:02.960Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24223910"},"web_url":"https://gitlab.com/coq/coq/-/jobs/76209039","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":76209038,"status":"skipped","stage":"test","name":"documentation","ref":"pr-6218","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-20T13:27:56.796Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"d84ec924ccfd2d3f184feaac1dee86d17431d623","short_id":"d84ec924","created_at":"2018-06-20T14:26:28.000+01:00","parent_ids":["6715e6801c1d285a12eeca55dd8b831d7efb8c0d"],"title":"Fix #5197, handling of algebraic universes","message":"Fix #5197, handling of algebraic universes\n\nThey were allowed to stay in terms in some cases. We now ensure that if\nan evar is defined as e.g. fun x => Type@{foo}, foo is properly\nrefreshed to be non-algebraic as it could otherwise appear in the term\nand break the invariant.\n\nAlso cleanup the implementation of refresh_universes to avoid using a\nmutable reference and simply rely on the Constr.map smartmap idiom\ninstead.\n\nThis might have compatibility issues, e.g. in HoTT where maybe more\nnon-algebraic proxy universes could be generated, we'll see.\n\nFor the bug report proper, there is a lack of bidirectional\ntype-checking that makes the initial definition fail (there's a\nnon-canonical choice of dependency if we don't consider the typing\nconstraint). With the Program bidir hint it passes.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-19T12:09:58.000+01:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-20T14:26:28.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/d84ec924ccfd2d3f184feaac1dee86d17431d623"},"pipeline":{"id":24223910,"iid":1536,"project_id":6138686,"sha":"d84ec924ccfd2d3f184feaac1dee86d17431d623","ref":"pr-6218","status":"failed","source":"push","created_at":"2018-06-20T13:27:56.460Z","updated_at":"2018-06-20T17:18:02.960Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24223910"},"web_url":"https://gitlab.com/coq/coq/-/jobs/76209038","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":76209037,"status":"skipped","stage":"test","name":"warnings:edge","ref":"pr-6218","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-20T13:27:56.772Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"d84ec924ccfd2d3f184feaac1dee86d17431d623","short_id":"d84ec924","created_at":"2018-06-20T14:26:28.000+01:00","parent_ids":["6715e6801c1d285a12eeca55dd8b831d7efb8c0d"],"title":"Fix #5197, handling of algebraic universes","message":"Fix #5197, handling of algebraic universes\n\nThey were allowed to stay in terms in some cases. We now ensure that if\nan evar is defined as e.g. fun x => Type@{foo}, foo is properly\nrefreshed to be non-algebraic as it could otherwise appear in the term\nand break the invariant.\n\nAlso cleanup the implementation of refresh_universes to avoid using a\nmutable reference and simply rely on the Constr.map smartmap idiom\ninstead.\n\nThis might have compatibility issues, e.g. in HoTT where maybe more\nnon-algebraic proxy universes could be generated, we'll see.\n\nFor the bug report proper, there is a lack of bidirectional\ntype-checking that makes the initial definition fail (there's a\nnon-canonical choice of dependency if we don't consider the typing\nconstraint). With the Program bidir hint it passes.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-19T12:09:58.000+01:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-20T14:26:28.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/d84ec924ccfd2d3f184feaac1dee86d17431d623"},"pipeline":{"id":24223910,"iid":1536,"project_id":6138686,"sha":"d84ec924ccfd2d3f184feaac1dee86d17431d623","ref":"pr-6218","status":"failed","source":"push","created_at":"2018-06-20T13:27:56.460Z","updated_at":"2018-06-20T17:18:02.960Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24223910"},"web_url":"https://gitlab.com/coq/coq/-/jobs/76209037","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":76209036,"status":"skipped","stage":"test","name":"warnings:base","ref":"pr-6218","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-20T13:27:56.736Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"d84ec924ccfd2d3f184feaac1dee86d17431d623","short_id":"d84ec924","created_at":"2018-06-20T14:26:28.000+01:00","parent_ids":["6715e6801c1d285a12eeca55dd8b831d7efb8c0d"],"title":"Fix #5197, handling of algebraic universes","message":"Fix #5197, handling of algebraic universes\n\nThey were allowed to stay in terms in some cases. We now ensure that if\nan evar is defined as e.g. fun x => Type@{foo}, foo is properly\nrefreshed to be non-algebraic as it could otherwise appear in the term\nand break the invariant.\n\nAlso cleanup the implementation of refresh_universes to avoid using a\nmutable reference and simply rely on the Constr.map smartmap idiom\ninstead.\n\nThis might have compatibility issues, e.g. in HoTT where maybe more\nnon-algebraic proxy universes could be generated, we'll see.\n\nFor the bug report proper, there is a lack of bidirectional\ntype-checking that makes the initial definition fail (there's a\nnon-canonical choice of dependency if we don't consider the typing\nconstraint). With the Program bidir hint it passes.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-19T12:09:58.000+01:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-20T14:26:28.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/d84ec924ccfd2d3f184feaac1dee86d17431d623"},"pipeline":{"id":24223910,"iid":1536,"project_id":6138686,"sha":"d84ec924ccfd2d3f184feaac1dee86d17431d623","ref":"pr-6218","status":"failed","source":"push","created_at":"2018-06-20T13:27:56.460Z","updated_at":"2018-06-20T17:18:02.960Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24223910"},"web_url":"https://gitlab.com/coq/coq/-/jobs/76209036","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":76209035,"status":"skipped","stage":"test","name":"windows32","ref":"pr-6218","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-20T13:27:56.699Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"d84ec924ccfd2d3f184feaac1dee86d17431d623","short_id":"d84ec924","created_at":"2018-06-20T14:26:28.000+01:00","parent_ids":["6715e6801c1d285a12eeca55dd8b831d7efb8c0d"],"title":"Fix #5197, handling of algebraic universes","message":"Fix #5197, handling of algebraic universes\n\nThey were allowed to stay in terms in some cases. We now ensure that if\nan evar is defined as e.g. fun x => Type@{foo}, foo is properly\nrefreshed to be non-algebraic as it could otherwise appear in the term\nand break the invariant.\n\nAlso cleanup the implementation of refresh_universes to avoid using a\nmutable reference and simply rely on the Constr.map smartmap idiom\ninstead.\n\nThis might have compatibility issues, e.g. in HoTT where maybe more\nnon-algebraic proxy universes could be generated, we'll see.\n\nFor the bug report proper, there is a lack of bidirectional\ntype-checking that makes the initial definition fail (there's a\nnon-canonical choice of dependency if we don't consider the typing\nconstraint). With the Program bidir hint it passes.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-19T12:09:58.000+01:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-20T14:26:28.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/d84ec924ccfd2d3f184feaac1dee86d17431d623"},"pipeline":{"id":24223910,"iid":1536,"project_id":6138686,"sha":"d84ec924ccfd2d3f184feaac1dee86d17431d623","ref":"pr-6218","status":"failed","source":"push","created_at":"2018-06-20T13:27:56.460Z","updated_at":"2018-06-20T17:18:02.960Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24223910"},"web_url":"https://gitlab.com/coq/coq/-/jobs/76209035","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":["windows"]}
{"id":76209034,"status":"skipped","stage":"test","name":"windows64","ref":"pr-6218","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-20T13:27:56.659Z","started_at":null,"finished_at":null,"duration":null,"queued_duration":null,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"d84ec924ccfd2d3f184feaac1dee86d17431d623","short_id":"d84ec924","created_at":"2018-06-20T14:26:28.000+01:00","parent_ids":["6715e6801c1d285a12eeca55dd8b831d7efb8c0d"],"title":"Fix #5197, handling of algebraic universes","message":"Fix #5197, handling of algebraic universes\n\nThey were allowed to stay in terms in some cases. We now ensure that if\nan evar is defined as e.g. fun x => Type@{foo}, foo is properly\nrefreshed to be non-algebraic as it could otherwise appear in the term\nand break the invariant.\n\nAlso cleanup the implementation of refresh_universes to avoid using a\nmutable reference and simply rely on the Constr.map smartmap idiom\ninstead.\n\nThis might have compatibility issues, e.g. in HoTT where maybe more\nnon-algebraic proxy universes could be generated, we'll see.\n\nFor the bug report proper, there is a lack of bidirectional\ntype-checking that makes the initial definition fail (there's a\nnon-canonical choice of dependency if we don't consider the typing\nconstraint). With the Program bidir hint it passes.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-19T12:09:58.000+01:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-20T14:26:28.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/d84ec924ccfd2d3f184feaac1dee86d17431d623"},"pipeline":{"id":24223910,"iid":1536,"project_id":6138686,"sha":"d84ec924ccfd2d3f184feaac1dee86d17431d623","ref":"pr-6218","status":"failed","source":"push","created_at":"2018-06-20T13:27:56.460Z","updated_at":"2018-06-20T17:18:02.960Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24223910"},"web_url":"https://gitlab.com/coq/coq/-/jobs/76209034","artifacts":[],"runner":null,"artifacts_expire_at":null,"tag_list":["windows"]}
{"id":76209032,"status":"success","stage":"build","name":"build:edge","ref":"pr-6218","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-20T13:27:56.558Z","started_at":"2018-06-20T16:59:36.141Z","finished_at":"2018-06-20T17:18:00.300Z","duration":1104.158442,"queued_duration":12697.907988,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"d84ec924ccfd2d3f184feaac1dee86d17431d623","short_id":"d84ec924","created_at":"2018-06-20T14:26:28.000+01:00","parent_ids":["6715e6801c1d285a12eeca55dd8b831d7efb8c0d"],"title":"Fix #5197, handling of algebraic universes","message":"Fix #5197, handling of algebraic universes\n\nThey were allowed to stay in terms in some cases. We now ensure that if\nan evar is defined as e.g. fun x => Type@{foo}, foo is properly\nrefreshed to be non-algebraic as it could otherwise appear in the term\nand break the invariant.\n\nAlso cleanup the implementation of refresh_universes to avoid using a\nmutable reference and simply rely on the Constr.map smartmap idiom\ninstead.\n\nThis might have compatibility issues, e.g. in HoTT where maybe more\nnon-algebraic proxy universes could be generated, we'll see.\n\nFor the bug report proper, there is a lack of bidirectional\ntype-checking that makes the initial definition fail (there's a\nnon-canonical choice of dependency if we don't consider the typing\nconstraint). With the Program bidir hint it passes.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-19T12:09:58.000+01:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-20T14:26:28.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/d84ec924ccfd2d3f184feaac1dee86d17431d623"},"pipeline":{"id":24223910,"iid":1536,"project_id":6138686,"sha":"d84ec924ccfd2d3f184feaac1dee86d17431d623","ref":"pr-6218","status":"failed","source":"push","created_at":"2018-06-20T13:27:56.460Z","updated_at":"2018-06-20T17:18:02.960Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24223910"},"web_url":"https://gitlab.com/coq/coq/-/jobs/76209032","artifacts":[{"file_type":"trace","size":228913,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2018-06-27T17:17:59.154Z","tag_list":[]}
{"id":76209031,"status":"success","stage":"build","name":"build:base+32bit","ref":"pr-6218","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-20T13:27:56.515Z","started_at":"2018-06-20T16:59:35.468Z","finished_at":"2018-06-20T17:14:42.436Z","duration":906.968544,"queued_duration":12697.19958,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"d84ec924ccfd2d3f184feaac1dee86d17431d623","short_id":"d84ec924","created_at":"2018-06-20T14:26:28.000+01:00","parent_ids":["6715e6801c1d285a12eeca55dd8b831d7efb8c0d"],"title":"Fix #5197, handling of algebraic universes","message":"Fix #5197, handling of algebraic universes\n\nThey were allowed to stay in terms in some cases. We now ensure that if\nan evar is defined as e.g. fun x => Type@{foo}, foo is properly\nrefreshed to be non-algebraic as it could otherwise appear in the term\nand break the invariant.\n\nAlso cleanup the implementation of refresh_universes to avoid using a\nmutable reference and simply rely on the Constr.map smartmap idiom\ninstead.\n\nThis might have compatibility issues, e.g. in HoTT where maybe more\nnon-algebraic proxy universes could be generated, we'll see.\n\nFor the bug report proper, there is a lack of bidirectional\ntype-checking that makes the initial definition fail (there's a\nnon-canonical choice of dependency if we don't consider the typing\nconstraint). With the Program bidir hint it passes.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-19T12:09:58.000+01:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-20T14:26:28.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/d84ec924ccfd2d3f184feaac1dee86d17431d623"},"pipeline":{"id":24223910,"iid":1536,"project_id":6138686,"sha":"d84ec924ccfd2d3f184feaac1dee86d17431d623","ref":"pr-6218","status":"failed","source":"push","created_at":"2018-06-20T13:27:56.460Z","updated_at":"2018-06-20T17:18:02.960Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24223910"},"web_url":"https://gitlab.com/coq/coq/-/jobs/76209031","artifacts":[{"file_type":"trace","size":223774,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2018-06-27T17:14:41.167Z","tag_list":[]}
{"id":76209030,"status":"success","stage":"build","name":"build:base","ref":"pr-6218","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-06-20T13:27:56.475Z","started_at":"2018-06-20T16:59:34.851Z","finished_at":"2018-06-20T17:17:06.420Z","duration":1051.56891,"queued_duration":12696.54002,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"d84ec924ccfd2d3f184feaac1dee86d17431d623","short_id":"d84ec924","created_at":"2018-06-20T14:26:28.000+01:00","parent_ids":["6715e6801c1d285a12eeca55dd8b831d7efb8c0d"],"title":"Fix #5197, handling of algebraic universes","message":"Fix #5197, handling of algebraic universes\n\nThey were allowed to stay in terms in some cases. We now ensure that if\nan evar is defined as e.g. fun x => Type@{foo}, foo is properly\nrefreshed to be non-algebraic as it could otherwise appear in the term\nand break the invariant.\n\nAlso cleanup the implementation of refresh_universes to avoid using a\nmutable reference and simply rely on the Constr.map smartmap idiom\ninstead.\n\nThis might have compatibility issues, e.g. in HoTT where maybe more\nnon-algebraic proxy universes could be generated, we'll see.\n\nFor the bug report proper, there is a lack of bidirectional\ntype-checking that makes the initial definition fail (there's a\nnon-canonical choice of dependency if we don't consider the typing\nconstraint). With the Program bidir hint it passes.\n","author_name":"Matthieu Sozeau","author_email":"mattam@mattam.org","authored_date":"2018-06-19T12:09:58.000+01:00","committer_name":"Matthieu Sozeau","committer_email":"mattam@mattam.org","committed_date":"2018-06-20T14:26:28.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/d84ec924ccfd2d3f184feaac1dee86d17431d623"},"pipeline":{"id":24223910,"iid":1536,"project_id":6138686,"sha":"d84ec924ccfd2d3f184feaac1dee86d17431d623","ref":"pr-6218","status":"failed","source":"push","created_at":"2018-06-20T13:27:56.460Z","updated_at":"2018-06-20T17:18:02.960Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/24223910"},"web_url":"https://gitlab.com/coq/coq/-/jobs/76209030","artifacts":[{"file_type":"trace","size":278454,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2018-06-27T17:17:04.814Z","tag_list":[]}
