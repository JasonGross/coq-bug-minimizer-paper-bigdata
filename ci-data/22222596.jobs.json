{"id":68995170,"status":"failed","stage":"test","name":"ci-vst","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-17T22:00:01.795Z","started_at":"2018-05-17T22:37:46.644Z","finished_at":"2018-05-17T22:41:15.411Z","duration":208.767485,"queued_duration":65.874064,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"016f54905dcbac46ea56143c6da4fa04bdcbbe7f","short_id":"016f5490","created_at":"2018-05-17T23:59:29.000+02:00","parent_ids":["692a6e8168240ddcad191246d16f73d9870da979"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-17T23:59:29.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/016f54905dcbac46ea56143c6da4fa04bdcbbe7f"},"pipeline":{"id":22222596,"iid":null,"project_id":6138686,"sha":"016f54905dcbac46ea56143c6da4fa04bdcbbe7f","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-17T21:59:59.335Z","updated_at":"2018-05-17T22:48:36.249Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22222596"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/68995170","artifacts":[{"file_type":"trace","size":946,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":68995169,"status":"failed","stage":"test","name":"ci-unimath","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-17T22:00:01.725Z","started_at":"2018-05-17T22:37:46.119Z","finished_at":"2018-05-17T22:40:10.745Z","duration":144.626223,"queued_duration":65.263959,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"016f54905dcbac46ea56143c6da4fa04bdcbbe7f","short_id":"016f5490","created_at":"2018-05-17T23:59:29.000+02:00","parent_ids":["692a6e8168240ddcad191246d16f73d9870da979"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-17T23:59:29.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/016f54905dcbac46ea56143c6da4fa04bdcbbe7f"},"pipeline":{"id":22222596,"iid":null,"project_id":6138686,"sha":"016f54905dcbac46ea56143c6da4fa04bdcbbe7f","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-17T21:59:59.335Z","updated_at":"2018-05-17T22:48:36.249Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22222596"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/68995169","artifacts":[{"file_type":"trace","size":946,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":68995168,"status":"failed","stage":"test","name":"ci-sf","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-17T22:00:01.670Z","started_at":"2018-05-17T22:37:45.319Z","finished_at":"2018-05-17T22:41:16.055Z","duration":210.735759,"queued_duration":64.368293,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"016f54905dcbac46ea56143c6da4fa04bdcbbe7f","short_id":"016f5490","created_at":"2018-05-17T23:59:29.000+02:00","parent_ids":["692a6e8168240ddcad191246d16f73d9870da979"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-17T23:59:29.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/016f54905dcbac46ea56143c6da4fa04bdcbbe7f"},"pipeline":{"id":22222596,"iid":null,"project_id":6138686,"sha":"016f54905dcbac46ea56143c6da4fa04bdcbbe7f","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-17T21:59:59.335Z","updated_at":"2018-05-17T22:48:36.249Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22222596"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/68995168","artifacts":[{"file_type":"trace","size":946,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":68995167,"status":"failed","stage":"test","name":"ci-pidetop","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-17T22:00:01.609Z","started_at":"2018-05-17T22:36:41.350Z","finished_at":"2018-05-17T22:40:16.417Z","duration":215.066126,"queued_duration":0.346206,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"016f54905dcbac46ea56143c6da4fa04bdcbbe7f","short_id":"016f5490","created_at":"2018-05-17T23:59:29.000+02:00","parent_ids":["692a6e8168240ddcad191246d16f73d9870da979"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-17T23:59:29.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/016f54905dcbac46ea56143c6da4fa04bdcbbe7f"},"pipeline":{"id":22222596,"iid":null,"project_id":6138686,"sha":"016f54905dcbac46ea56143c6da4fa04bdcbbe7f","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-17T21:59:59.335Z","updated_at":"2018-05-17T22:48:36.249Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22222596"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/68995167","artifacts":[{"file_type":"trace","size":946,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":68995166,"status":"failed","stage":"test","name":"ci-mtac2","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-17T22:00:01.527Z","started_at":"2018-05-17T22:37:44.632Z","finished_at":"2018-05-17T22:41:00.143Z","duration":195.511251,"queued_duration":63.567622,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"016f54905dcbac46ea56143c6da4fa04bdcbbe7f","short_id":"016f5490","created_at":"2018-05-17T23:59:29.000+02:00","parent_ids":["692a6e8168240ddcad191246d16f73d9870da979"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-17T23:59:29.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/016f54905dcbac46ea56143c6da4fa04bdcbbe7f"},"pipeline":{"id":22222596,"iid":null,"project_id":6138686,"sha":"016f54905dcbac46ea56143c6da4fa04bdcbbe7f","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-17T21:59:59.335Z","updated_at":"2018-05-17T22:48:36.249Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22222596"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/68995166","artifacts":[{"file_type":"trace","size":946,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":68995165,"status":"failed","stage":"test","name":"ci-math-comp","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-17T22:00:01.484Z","started_at":"2018-05-17T22:37:43.234Z","finished_at":"2018-05-17T22:41:00.603Z","duration":197.369018,"queued_duration":62.050913,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"016f54905dcbac46ea56143c6da4fa04bdcbbe7f","short_id":"016f5490","created_at":"2018-05-17T23:59:29.000+02:00","parent_ids":["692a6e8168240ddcad191246d16f73d9870da979"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-17T23:59:29.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/016f54905dcbac46ea56143c6da4fa04bdcbbe7f"},"pipeline":{"id":22222596,"iid":null,"project_id":6138686,"sha":"016f54905dcbac46ea56143c6da4fa04bdcbbe7f","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-17T21:59:59.335Z","updated_at":"2018-05-17T22:48:36.249Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22222596"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/68995165","artifacts":[{"file_type":"trace","size":946,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":68995164,"status":"failed","stage":"test","name":"ci-ltac2","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-17T22:00:01.447Z","started_at":"2018-05-17T22:37:18.853Z","finished_at":"2018-05-17T22:40:31.099Z","duration":192.246159,"queued_duration":37.584803,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"016f54905dcbac46ea56143c6da4fa04bdcbbe7f","short_id":"016f5490","created_at":"2018-05-17T23:59:29.000+02:00","parent_ids":["692a6e8168240ddcad191246d16f73d9870da979"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-17T23:59:29.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/016f54905dcbac46ea56143c6da4fa04bdcbbe7f"},"pipeline":{"id":22222596,"iid":null,"project_id":6138686,"sha":"016f54905dcbac46ea56143c6da4fa04bdcbbe7f","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-17T21:59:59.335Z","updated_at":"2018-05-17T22:48:36.249Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22222596"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/68995164","artifacts":[{"file_type":"trace","size":946,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":68995163,"status":"failed","stage":"test","name":"ci-iris-lambda-rust","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-17T22:00:01.393Z","started_at":"2018-05-17T22:36:41.667Z","finished_at":"2018-05-17T22:40:06.703Z","duration":205.035722,"queued_duration":0.31508,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"016f54905dcbac46ea56143c6da4fa04bdcbbe7f","short_id":"016f5490","created_at":"2018-05-17T23:59:29.000+02:00","parent_ids":["692a6e8168240ddcad191246d16f73d9870da979"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-17T23:59:29.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/016f54905dcbac46ea56143c6da4fa04bdcbbe7f"},"pipeline":{"id":22222596,"iid":null,"project_id":6138686,"sha":"016f54905dcbac46ea56143c6da4fa04bdcbbe7f","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-17T21:59:59.335Z","updated_at":"2018-05-17T22:48:36.249Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22222596"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/68995163","artifacts":[{"file_type":"trace","size":946,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":68995160,"status":"failed","stage":"test","name":"ci-hott","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-17T22:00:01.308Z","started_at":"2018-05-17T22:36:41.804Z","finished_at":"2018-05-17T22:39:13.537Z","duration":151.733101,"queued_duration":0.35996,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"016f54905dcbac46ea56143c6da4fa04bdcbbe7f","short_id":"016f5490","created_at":"2018-05-17T23:59:29.000+02:00","parent_ids":["692a6e8168240ddcad191246d16f73d9870da979"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-17T23:59:29.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/016f54905dcbac46ea56143c6da4fa04bdcbbe7f"},"pipeline":{"id":22222596,"iid":null,"project_id":6138686,"sha":"016f54905dcbac46ea56143c6da4fa04bdcbbe7f","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-17T21:59:59.335Z","updated_at":"2018-05-17T22:48:36.249Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22222596"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/68995160","artifacts":[{"file_type":"trace","size":946,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":68995159,"status":"failed","stage":"test","name":"ci-geocoq","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-17T22:00:01.253Z","started_at":"2018-05-17T22:37:18.265Z","finished_at":"2018-05-17T22:40:39.862Z","duration":201.596931,"queued_duration":36.660016,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"016f54905dcbac46ea56143c6da4fa04bdcbbe7f","short_id":"016f5490","created_at":"2018-05-17T23:59:29.000+02:00","parent_ids":["692a6e8168240ddcad191246d16f73d9870da979"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-17T23:59:29.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/016f54905dcbac46ea56143c6da4fa04bdcbbe7f"},"pipeline":{"id":22222596,"iid":null,"project_id":6138686,"sha":"016f54905dcbac46ea56143c6da4fa04bdcbbe7f","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-17T21:59:59.335Z","updated_at":"2018-05-17T22:48:36.249Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22222596"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/68995159","artifacts":[{"file_type":"trace","size":946,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":68995158,"status":"failed","stage":"test","name":"ci-formal-topology","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-17T22:00:01.169Z","started_at":"2018-05-17T22:37:17.917Z","finished_at":"2018-05-17T22:40:32.414Z","duration":194.49694,"queued_duration":36.192716,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"016f54905dcbac46ea56143c6da4fa04bdcbbe7f","short_id":"016f5490","created_at":"2018-05-17T23:59:29.000+02:00","parent_ids":["692a6e8168240ddcad191246d16f73d9870da979"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-17T23:59:29.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/016f54905dcbac46ea56143c6da4fa04bdcbbe7f"},"pipeline":{"id":22222596,"iid":null,"project_id":6138686,"sha":"016f54905dcbac46ea56143c6da4fa04bdcbbe7f","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-17T21:59:59.335Z","updated_at":"2018-05-17T22:48:36.249Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22222596"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/68995158","artifacts":[{"file_type":"trace","size":946,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":68995157,"status":"failed","stage":"test","name":"ci-flocq","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-17T22:00:01.122Z","started_at":"2018-05-17T22:37:17.341Z","finished_at":"2018-05-17T22:40:41.642Z","duration":204.301506,"queued_duration":35.499193,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"016f54905dcbac46ea56143c6da4fa04bdcbbe7f","short_id":"016f5490","created_at":"2018-05-17T23:59:29.000+02:00","parent_ids":["692a6e8168240ddcad191246d16f73d9870da979"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-17T23:59:29.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/016f54905dcbac46ea56143c6da4fa04bdcbbe7f"},"pipeline":{"id":22222596,"iid":null,"project_id":6138686,"sha":"016f54905dcbac46ea56143c6da4fa04bdcbbe7f","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-17T21:59:59.335Z","updated_at":"2018-05-17T22:48:36.249Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22222596"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/68995157","artifacts":[{"file_type":"trace","size":946,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":68995156,"status":"failed","stage":"test","name":"ci-fiat-parsers","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-17T22:00:01.086Z","started_at":"2018-05-17T22:37:16.929Z","finished_at":"2018-05-17T22:43:57.935Z","duration":401.006377,"queued_duration":34.945253,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"016f54905dcbac46ea56143c6da4fa04bdcbbe7f","short_id":"016f5490","created_at":"2018-05-17T23:59:29.000+02:00","parent_ids":["692a6e8168240ddcad191246d16f73d9870da979"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-17T23:59:29.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/016f54905dcbac46ea56143c6da4fa04bdcbbe7f"},"pipeline":{"id":22222596,"iid":null,"project_id":6138686,"sha":"016f54905dcbac46ea56143c6da4fa04bdcbbe7f","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-17T21:59:59.335Z","updated_at":"2018-05-17T22:48:36.249Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22222596"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/68995156","artifacts":[{"file_type":"trace","size":946,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":68995155,"status":"failed","stage":"test","name":"ci-fiat-crypto","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-17T22:00:01.021Z","started_at":"2018-05-17T22:37:05.324Z","finished_at":"2018-05-17T22:41:00.664Z","duration":235.340386,"queued_duration":23.166069,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"016f54905dcbac46ea56143c6da4fa04bdcbbe7f","short_id":"016f5490","created_at":"2018-05-17T23:59:29.000+02:00","parent_ids":["692a6e8168240ddcad191246d16f73d9870da979"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-17T23:59:29.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/016f54905dcbac46ea56143c6da4fa04bdcbbe7f"},"pipeline":{"id":22222596,"iid":null,"project_id":6138686,"sha":"016f54905dcbac46ea56143c6da4fa04bdcbbe7f","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-17T21:59:59.335Z","updated_at":"2018-05-17T22:48:36.249Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22222596"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/68995155","artifacts":[{"file_type":"trace","size":946,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":68995154,"status":"failed","stage":"test","name":"ci-fcsl-pcm","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-17T22:00:00.969Z","started_at":"2018-05-17T22:37:04.996Z","finished_at":"2018-05-17T22:40:04.195Z","duration":179.198756,"queued_duration":22.724171,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"016f54905dcbac46ea56143c6da4fa04bdcbbe7f","short_id":"016f5490","created_at":"2018-05-17T23:59:29.000+02:00","parent_ids":["692a6e8168240ddcad191246d16f73d9870da979"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-17T23:59:29.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/016f54905dcbac46ea56143c6da4fa04bdcbbe7f"},"pipeline":{"id":22222596,"iid":null,"project_id":6138686,"sha":"016f54905dcbac46ea56143c6da4fa04bdcbbe7f","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-17T21:59:59.335Z","updated_at":"2018-05-17T22:48:36.249Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22222596"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/68995154","artifacts":[{"file_type":"trace","size":946,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":68995153,"status":"failed","stage":"test","name":"ci-equations","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-17T22:00:00.892Z","started_at":"2018-05-17T22:37:04.604Z","finished_at":"2018-05-17T22:40:35.026Z","duration":210.421662,"queued_duration":22.220978,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"016f54905dcbac46ea56143c6da4fa04bdcbbe7f","short_id":"016f5490","created_at":"2018-05-17T23:59:29.000+02:00","parent_ids":["692a6e8168240ddcad191246d16f73d9870da979"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-17T23:59:29.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/016f54905dcbac46ea56143c6da4fa04bdcbbe7f"},"pipeline":{"id":22222596,"iid":null,"project_id":6138686,"sha":"016f54905dcbac46ea56143c6da4fa04bdcbbe7f","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-17T21:59:59.335Z","updated_at":"2018-05-17T22:48:36.249Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22222596"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/68995153","artifacts":[{"file_type":"trace","size":946,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":68995152,"status":"failed","stage":"test","name":"ci-elpi","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-17T22:00:00.778Z","started_at":"2018-05-17T22:37:03.150Z","finished_at":"2018-05-17T22:39:29.899Z","duration":146.749445,"queued_duration":20.636149,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"016f54905dcbac46ea56143c6da4fa04bdcbbe7f","short_id":"016f5490","created_at":"2018-05-17T23:59:29.000+02:00","parent_ids":["692a6e8168240ddcad191246d16f73d9870da979"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-17T23:59:29.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/016f54905dcbac46ea56143c6da4fa04bdcbbe7f"},"pipeline":{"id":22222596,"iid":null,"project_id":6138686,"sha":"016f54905dcbac46ea56143c6da4fa04bdcbbe7f","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-17T21:59:59.335Z","updated_at":"2018-05-17T22:48:36.249Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22222596"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/68995152","artifacts":[{"file_type":"trace","size":946,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":68995151,"status":"failed","stage":"test","name":"ci-cross-crypto","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-17T22:00:00.731Z","started_at":"2018-05-17T22:37:02.799Z","finished_at":"2018-05-17T22:40:37.427Z","duration":214.62766,"queued_duration":20.097307,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"016f54905dcbac46ea56143c6da4fa04bdcbbe7f","short_id":"016f5490","created_at":"2018-05-17T23:59:29.000+02:00","parent_ids":["692a6e8168240ddcad191246d16f73d9870da979"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-17T23:59:29.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/016f54905dcbac46ea56143c6da4fa04bdcbbe7f"},"pipeline":{"id":22222596,"iid":null,"project_id":6138686,"sha":"016f54905dcbac46ea56143c6da4fa04bdcbbe7f","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-17T21:59:59.335Z","updated_at":"2018-05-17T22:48:36.249Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22222596"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/68995151","artifacts":[{"file_type":"trace","size":946,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":68995150,"status":"failed","stage":"test","name":"ci-coquelicot","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-17T22:00:00.634Z","started_at":"2018-05-17T22:37:01.590Z","finished_at":"2018-05-17T22:40:15.016Z","duration":193.426764,"queued_duration":18.694252,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"016f54905dcbac46ea56143c6da4fa04bdcbbe7f","short_id":"016f5490","created_at":"2018-05-17T23:59:29.000+02:00","parent_ids":["692a6e8168240ddcad191246d16f73d9870da979"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-17T23:59:29.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/016f54905dcbac46ea56143c6da4fa04bdcbbe7f"},"pipeline":{"id":22222596,"iid":null,"project_id":6138686,"sha":"016f54905dcbac46ea56143c6da4fa04bdcbbe7f","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-17T21:59:59.335Z","updated_at":"2018-05-17T22:48:36.249Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22222596"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/68995150","artifacts":[{"file_type":"trace","size":946,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":68995149,"status":"failed","stage":"test","name":"ci-coq-dpdgraph","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-17T22:00:00.602Z","started_at":"2018-05-17T22:37:01.043Z","finished_at":"2018-05-17T22:39:19.353Z","duration":138.310168,"queued_duration":18.022419,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"016f54905dcbac46ea56143c6da4fa04bdcbbe7f","short_id":"016f5490","created_at":"2018-05-17T23:59:29.000+02:00","parent_ids":["692a6e8168240ddcad191246d16f73d9870da979"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-17T23:59:29.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/016f54905dcbac46ea56143c6da4fa04bdcbbe7f"},"pipeline":{"id":22222596,"iid":null,"project_id":6138686,"sha":"016f54905dcbac46ea56143c6da4fa04bdcbbe7f","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-17T21:59:59.335Z","updated_at":"2018-05-17T22:48:36.249Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22222596"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/68995149","artifacts":[{"file_type":"trace","size":946,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":68995148,"status":"failed","stage":"test","name":"ci-compcert","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-17T22:00:00.506Z","started_at":"2018-05-17T22:36:59.348Z","finished_at":"2018-05-17T22:40:18.359Z","duration":199.010618,"queued_duration":16.043056,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"016f54905dcbac46ea56143c6da4fa04bdcbbe7f","short_id":"016f5490","created_at":"2018-05-17T23:59:29.000+02:00","parent_ids":["692a6e8168240ddcad191246d16f73d9870da979"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-17T23:59:29.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/016f54905dcbac46ea56143c6da4fa04bdcbbe7f"},"pipeline":{"id":22222596,"iid":null,"project_id":6138686,"sha":"016f54905dcbac46ea56143c6da4fa04bdcbbe7f","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-17T21:59:59.335Z","updated_at":"2018-05-17T22:48:36.249Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22222596"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/68995148","artifacts":[{"file_type":"trace","size":946,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":68995147,"status":"failed","stage":"test","name":"ci-color","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-17T22:00:00.409Z","started_at":"2018-05-17T22:36:58.145Z","finished_at":"2018-05-17T22:40:21.380Z","duration":203.235463,"queued_duration":14.709797,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"016f54905dcbac46ea56143c6da4fa04bdcbbe7f","short_id":"016f5490","created_at":"2018-05-17T23:59:29.000+02:00","parent_ids":["692a6e8168240ddcad191246d16f73d9870da979"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-17T23:59:29.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/016f54905dcbac46ea56143c6da4fa04bdcbbe7f"},"pipeline":{"id":22222596,"iid":null,"project_id":6138686,"sha":"016f54905dcbac46ea56143c6da4fa04bdcbbe7f","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-17T21:59:59.335Z","updated_at":"2018-05-17T22:48:36.249Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22222596"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/68995147","artifacts":[{"file_type":"trace","size":946,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":68995146,"status":"failed","stage":"test","name":"ci-bignums","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-17T22:00:00.347Z","started_at":"2018-05-17T22:36:57.175Z","finished_at":"2018-05-17T22:39:50.326Z","duration":173.150768,"queued_duration":13.625351,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"016f54905dcbac46ea56143c6da4fa04bdcbbe7f","short_id":"016f5490","created_at":"2018-05-17T23:59:29.000+02:00","parent_ids":["692a6e8168240ddcad191246d16f73d9870da979"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-17T23:59:29.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/016f54905dcbac46ea56143c6da4fa04bdcbbe7f"},"pipeline":{"id":22222596,"iid":null,"project_id":6138686,"sha":"016f54905dcbac46ea56143c6da4fa04bdcbbe7f","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-17T21:59:59.335Z","updated_at":"2018-05-17T22:48:36.249Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22222596"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/68995146","artifacts":[{"file_type":"trace","size":946,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":68995145,"status":"failed","stage":"test","name":"validate:edge+flambda","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-17T22:00:00.264Z","started_at":"2018-05-17T22:36:56.092Z","finished_at":"2018-05-17T22:40:23.593Z","duration":207.501825,"queued_duration":12.411693,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"016f54905dcbac46ea56143c6da4fa04bdcbbe7f","short_id":"016f5490","created_at":"2018-05-17T23:59:29.000+02:00","parent_ids":["692a6e8168240ddcad191246d16f73d9870da979"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-17T23:59:29.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/016f54905dcbac46ea56143c6da4fa04bdcbbe7f"},"pipeline":{"id":22222596,"iid":null,"project_id":6138686,"sha":"016f54905dcbac46ea56143c6da4fa04bdcbbe7f","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-17T21:59:59.335Z","updated_at":"2018-05-17T22:48:36.249Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22222596"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/68995145","artifacts":[{"file_type":"trace","size":946,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":68995144,"status":"failed","stage":"test","name":"validate:edge","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-17T22:00:00.204Z","started_at":"2018-05-17T22:36:49.815Z","finished_at":"2018-05-17T22:40:16.834Z","duration":207.018648,"queued_duration":5.993961,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"016f54905dcbac46ea56143c6da4fa04bdcbbe7f","short_id":"016f5490","created_at":"2018-05-17T23:59:29.000+02:00","parent_ids":["692a6e8168240ddcad191246d16f73d9870da979"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-17T23:59:29.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/016f54905dcbac46ea56143c6da4fa04bdcbbe7f"},"pipeline":{"id":22222596,"iid":null,"project_id":6138686,"sha":"016f54905dcbac46ea56143c6da4fa04bdcbbe7f","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-17T21:59:59.335Z","updated_at":"2018-05-17T22:48:36.249Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22222596"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/68995144","artifacts":[{"file_type":"trace","size":743,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":68995142,"status":"failed","stage":"test","name":"validate:base+32bit","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-17T22:00:00.142Z","started_at":"2018-05-17T22:36:49.181Z","finished_at":"2018-05-17T22:40:55.085Z","duration":245.904443,"queued_duration":5.258645,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"016f54905dcbac46ea56143c6da4fa04bdcbbe7f","short_id":"016f5490","created_at":"2018-05-17T23:59:29.000+02:00","parent_ids":["692a6e8168240ddcad191246d16f73d9870da979"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-17T23:59:29.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/016f54905dcbac46ea56143c6da4fa04bdcbbe7f"},"pipeline":{"id":22222596,"iid":null,"project_id":6138686,"sha":"016f54905dcbac46ea56143c6da4fa04bdcbbe7f","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-17T21:59:59.335Z","updated_at":"2018-05-17T22:48:36.249Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22222596"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/68995142","artifacts":[{"file_type":"trace","size":1808,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":68995141,"status":"failed","stage":"test","name":"validate:base","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-17T22:00:00.096Z","started_at":"2018-05-17T22:36:48.915Z","finished_at":"2018-05-17T22:40:22.808Z","duration":213.893177,"queued_duration":4.853902,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"016f54905dcbac46ea56143c6da4fa04bdcbbe7f","short_id":"016f5490","created_at":"2018-05-17T23:59:29.000+02:00","parent_ids":["692a6e8168240ddcad191246d16f73d9870da979"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-17T23:59:29.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/016f54905dcbac46ea56143c6da4fa04bdcbbe7f"},"pipeline":{"id":22222596,"iid":null,"project_id":6138686,"sha":"016f54905dcbac46ea56143c6da4fa04bdcbbe7f","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-17T21:59:59.335Z","updated_at":"2018-05-17T22:48:36.249Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22222596"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/68995141","artifacts":[{"file_type":"trace","size":946,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":68995140,"status":"failed","stage":"test","name":"test-suite:edge+flambda","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-17T22:00:00.046Z","started_at":"2018-05-17T22:36:44.512Z","finished_at":"2018-05-17T22:39:53.837Z","duration":189.325024,"queued_duration":0.355231,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"016f54905dcbac46ea56143c6da4fa04bdcbbe7f","short_id":"016f5490","created_at":"2018-05-17T23:59:29.000+02:00","parent_ids":["692a6e8168240ddcad191246d16f73d9870da979"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-17T23:59:29.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/016f54905dcbac46ea56143c6da4fa04bdcbbe7f"},"pipeline":{"id":22222596,"iid":null,"project_id":6138686,"sha":"016f54905dcbac46ea56143c6da4fa04bdcbbe7f","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-17T21:59:59.335Z","updated_at":"2018-05-17T22:48:36.249Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22222596"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/68995140","artifacts":[{"file_type":"trace","size":1261,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":68995139,"status":"failed","stage":"test","name":"test-suite:edge","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-17T21:59:59.998Z","started_at":"2018-05-17T22:36:48.505Z","finished_at":"2018-05-17T22:40:16.983Z","duration":208.477912,"queued_duration":4.266967,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"016f54905dcbac46ea56143c6da4fa04bdcbbe7f","short_id":"016f5490","created_at":"2018-05-17T23:59:29.000+02:00","parent_ids":["692a6e8168240ddcad191246d16f73d9870da979"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-17T23:59:29.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/016f54905dcbac46ea56143c6da4fa04bdcbbe7f"},"pipeline":{"id":22222596,"iid":null,"project_id":6138686,"sha":"016f54905dcbac46ea56143c6da4fa04bdcbbe7f","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-17T21:59:59.335Z","updated_at":"2018-05-17T22:48:36.249Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22222596"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/68995139","artifacts":[{"file_type":"trace","size":1261,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":68995138,"status":"failed","stage":"test","name":"test-suite:base+32bit","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-17T21:59:59.945Z","started_at":"2018-05-17T22:36:48.110Z","finished_at":"2018-05-17T22:40:08.966Z","duration":200.856675,"queued_duration":3.747245,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"016f54905dcbac46ea56143c6da4fa04bdcbbe7f","short_id":"016f5490","created_at":"2018-05-17T23:59:29.000+02:00","parent_ids":["692a6e8168240ddcad191246d16f73d9870da979"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-17T23:59:29.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/016f54905dcbac46ea56143c6da4fa04bdcbbe7f"},"pipeline":{"id":22222596,"iid":null,"project_id":6138686,"sha":"016f54905dcbac46ea56143c6da4fa04bdcbbe7f","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-17T21:59:59.335Z","updated_at":"2018-05-17T22:48:36.249Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22222596"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/68995138","artifacts":[{"file_type":"trace","size":1261,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":68995137,"status":"failed","stage":"test","name":"test-suite:base","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-17T21:59:59.860Z","started_at":"2018-05-17T22:36:46.527Z","finished_at":"2018-05-17T22:40:24.034Z","duration":217.507285,"queued_duration":2.052036,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"016f54905dcbac46ea56143c6da4fa04bdcbbe7f","short_id":"016f5490","created_at":"2018-05-17T23:59:29.000+02:00","parent_ids":["692a6e8168240ddcad191246d16f73d9870da979"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-17T23:59:29.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/016f54905dcbac46ea56143c6da4fa04bdcbbe7f"},"pipeline":{"id":22222596,"iid":null,"project_id":6138686,"sha":"016f54905dcbac46ea56143c6da4fa04bdcbbe7f","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-17T21:59:59.335Z","updated_at":"2018-05-17T22:48:36.249Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22222596"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/68995137","artifacts":[{"file_type":"trace","size":1261,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":68995136,"status":"failed","stage":"test","name":"warnings:edge","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-17T21:59:59.831Z","started_at":"2018-05-17T22:36:45.574Z","finished_at":"2018-05-17T22:40:13.915Z","duration":208.340892,"queued_duration":1.014987,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"016f54905dcbac46ea56143c6da4fa04bdcbbe7f","short_id":"016f5490","created_at":"2018-05-17T23:59:29.000+02:00","parent_ids":["692a6e8168240ddcad191246d16f73d9870da979"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-17T23:59:29.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/016f54905dcbac46ea56143c6da4fa04bdcbbe7f"},"pipeline":{"id":22222596,"iid":null,"project_id":6138686,"sha":"016f54905dcbac46ea56143c6da4fa04bdcbbe7f","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-17T21:59:59.335Z","updated_at":"2018-05-17T22:48:36.249Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22222596"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/68995136","artifacts":[{"file_type":"trace","size":946,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":68995135,"status":"failed","stage":"test","name":"warnings:base","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-17T21:59:59.787Z","started_at":"2018-05-17T22:36:45.162Z","finished_at":"2018-05-17T22:39:02.217Z","duration":137.054469,"queued_duration":0.472772,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"016f54905dcbac46ea56143c6da4fa04bdcbbe7f","short_id":"016f5490","created_at":"2018-05-17T23:59:29.000+02:00","parent_ids":["692a6e8168240ddcad191246d16f73d9870da979"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-17T23:59:29.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/016f54905dcbac46ea56143c6da4fa04bdcbbe7f"},"pipeline":{"id":22222596,"iid":null,"project_id":6138686,"sha":"016f54905dcbac46ea56143c6da4fa04bdcbbe7f","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-17T21:59:59.335Z","updated_at":"2018-05-17T22:48:36.249Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22222596"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/68995135","artifacts":[{"file_type":"trace","size":946,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":68995134,"status":"failed","stage":"test","name":"windows32","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-17T21:59:59.720Z","started_at":"2018-05-17T22:48:34.202Z","finished_at":"2018-05-17T22:48:36.090Z","duration":1.888458,"queued_duration":709.38972,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"016f54905dcbac46ea56143c6da4fa04bdcbbe7f","short_id":"016f5490","created_at":"2018-05-17T23:59:29.000+02:00","parent_ids":["692a6e8168240ddcad191246d16f73d9870da979"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-17T23:59:29.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/016f54905dcbac46ea56143c6da4fa04bdcbbe7f"},"pipeline":{"id":22222596,"iid":null,"project_id":6138686,"sha":"016f54905dcbac46ea56143c6da4fa04bdcbbe7f","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-17T21:59:59.335Z","updated_at":"2018-05-17T22:48:36.249Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22222596"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/68995134","artifacts":[{"file_type":"trace","size":637,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":["windows"]}
{"id":68995133,"status":"failed","stage":"test","name":"windows64","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-17T21:59:59.619Z","started_at":"2018-05-17T22:48:27.039Z","finished_at":"2018-05-17T22:48:33.689Z","duration":6.6506,"queued_duration":702.098984,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"016f54905dcbac46ea56143c6da4fa04bdcbbe7f","short_id":"016f5490","created_at":"2018-05-17T23:59:29.000+02:00","parent_ids":["692a6e8168240ddcad191246d16f73d9870da979"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-17T23:59:29.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/016f54905dcbac46ea56143c6da4fa04bdcbbe7f"},"pipeline":{"id":22222596,"iid":null,"project_id":6138686,"sha":"016f54905dcbac46ea56143c6da4fa04bdcbbe7f","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-17T21:59:59.335Z","updated_at":"2018-05-17T22:48:36.249Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22222596"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/68995133","artifacts":[{"file_type":"trace","size":1054,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":["windows"]}
{"id":68995132,"status":"success","stage":"build","name":"build:dune","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-17T21:59:59.559Z","started_at":"2018-05-17T22:03:42.427Z","finished_at":"2018-05-17T22:06:18.999Z","duration":156.572385,"queued_duration":220.336735,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"016f54905dcbac46ea56143c6da4fa04bdcbbe7f","short_id":"016f5490","created_at":"2018-05-17T23:59:29.000+02:00","parent_ids":["692a6e8168240ddcad191246d16f73d9870da979"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-17T23:59:29.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/016f54905dcbac46ea56143c6da4fa04bdcbbe7f"},"pipeline":{"id":22222596,"iid":null,"project_id":6138686,"sha":"016f54905dcbac46ea56143c6da4fa04bdcbbe7f","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-17T21:59:59.335Z","updated_at":"2018-05-17T22:48:36.249Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22222596"},"web_url":"https://gitlab.com/coq/coq/-/jobs/68995132","artifacts":[{"file_type":"trace","size":31863,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":68995131,"status":"success","stage":"build","name":"build:edge+flambda","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-17T21:59:59.495Z","started_at":"2018-05-17T22:03:42.150Z","finished_at":"2018-05-17T22:36:40.610Z","duration":1978.460005,"queued_duration":220.0182,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"016f54905dcbac46ea56143c6da4fa04bdcbbe7f","short_id":"016f5490","created_at":"2018-05-17T23:59:29.000+02:00","parent_ids":["692a6e8168240ddcad191246d16f73d9870da979"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-17T23:59:29.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/016f54905dcbac46ea56143c6da4fa04bdcbbe7f"},"pipeline":{"id":22222596,"iid":null,"project_id":6138686,"sha":"016f54905dcbac46ea56143c6da4fa04bdcbbe7f","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-17T21:59:59.335Z","updated_at":"2018-05-17T22:48:36.249Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22222596"},"web_url":"https://gitlab.com/coq/coq/-/jobs/68995131","artifacts":[{"file_type":"trace","size":339575,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2018-05-24T22:36:33.605Z","tag_list":[]}
{"id":68995130,"status":"success","stage":"build","name":"build:edge","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-17T21:59:59.455Z","started_at":"2018-05-17T22:03:41.913Z","finished_at":"2018-05-17T22:19:54.509Z","duration":972.595888,"queued_duration":219.735626,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"016f54905dcbac46ea56143c6da4fa04bdcbbe7f","short_id":"016f5490","created_at":"2018-05-17T23:59:29.000+02:00","parent_ids":["692a6e8168240ddcad191246d16f73d9870da979"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-17T23:59:29.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/016f54905dcbac46ea56143c6da4fa04bdcbbe7f"},"pipeline":{"id":22222596,"iid":null,"project_id":6138686,"sha":"016f54905dcbac46ea56143c6da4fa04bdcbbe7f","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-17T21:59:59.335Z","updated_at":"2018-05-17T22:48:36.249Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22222596"},"web_url":"https://gitlab.com/coq/coq/-/jobs/68995130","artifacts":[{"file_type":"trace","size":230706,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2018-05-24T22:19:51.894Z","tag_list":[]}
{"id":68995129,"status":"success","stage":"build","name":"build:base+32bit","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-17T21:59:59.420Z","started_at":"2018-05-17T22:03:41.736Z","finished_at":"2018-05-17T22:16:23.364Z","duration":761.628278,"queued_duration":219.449555,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"016f54905dcbac46ea56143c6da4fa04bdcbbe7f","short_id":"016f5490","created_at":"2018-05-17T23:59:29.000+02:00","parent_ids":["692a6e8168240ddcad191246d16f73d9870da979"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-17T23:59:29.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/016f54905dcbac46ea56143c6da4fa04bdcbbe7f"},"pipeline":{"id":22222596,"iid":null,"project_id":6138686,"sha":"016f54905dcbac46ea56143c6da4fa04bdcbbe7f","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-17T21:59:59.335Z","updated_at":"2018-05-17T22:48:36.249Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22222596"},"web_url":"https://gitlab.com/coq/coq/-/jobs/68995129","artifacts":[{"file_type":"trace","size":227516,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":"2018-05-24T22:16:18.855Z","tag_list":[]}
{"id":68995128,"status":"success","stage":"build","name":"build:base","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-17T21:59:59.385Z","started_at":"2018-05-17T22:03:41.411Z","finished_at":"2018-05-17T22:25:13.730Z","duration":1292.318872,"queued_duration":219.068223,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"016f54905dcbac46ea56143c6da4fa04bdcbbe7f","short_id":"016f5490","created_at":"2018-05-17T23:59:29.000+02:00","parent_ids":["692a6e8168240ddcad191246d16f73d9870da979"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-17T23:59:29.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/016f54905dcbac46ea56143c6da4fa04bdcbbe7f"},"pipeline":{"id":22222596,"iid":null,"project_id":6138686,"sha":"016f54905dcbac46ea56143c6da4fa04bdcbbe7f","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-17T21:59:59.335Z","updated_at":"2018-05-17T22:48:36.249Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22222596"},"web_url":"https://gitlab.com/coq/coq/-/jobs/68995128","artifacts":[{"file_type":"trace","size":282146,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2018-05-24T22:25:10.473Z","tag_list":[]}
