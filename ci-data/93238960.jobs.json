{"id":340125128,"status":"failed","stage":"stage-2","name":"library:ci-fiat-crypto","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-02T18:13:31.978Z","started_at":"2019-11-02T18:13:32.365Z","finished_at":"2019-11-02T19:13:12.149Z","duration":3579.784623,"queued_duration":0.367422,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"be1b63f15581733a9d3283d19c44e8089712f710","short_id":"be1b63f1","created_at":"2019-11-02T17:38:14.000+01:00","parent_ids":["ab8ed0a39e7e39573716a473618ed4f7c219d072"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-02T17:38:14.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/be1b63f15581733a9d3283d19c44e8089712f710"},"pipeline":{"id":93238960,"iid":11758,"project_id":6138686,"sha":"be1b63f15581733a9d3283d19c44e8089712f710","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-02T16:38:27.298Z","updated_at":"2019-11-02T19:13:12.229Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/93238960"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/340125128","artifacts":[{"file_type":"trace","size":165143,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":340103180,"status":"success","stage":"stage-4","name":"library:ci-corn","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-02T16:38:28.522Z","started_at":"2019-11-02T17:26:15.508Z","finished_at":"2019-11-02T17:58:52.467Z","duration":1956.95983,"queued_duration":0.184307,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"be1b63f15581733a9d3283d19c44e8089712f710","short_id":"be1b63f1","created_at":"2019-11-02T17:38:14.000+01:00","parent_ids":["ab8ed0a39e7e39573716a473618ed4f7c219d072"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-02T17:38:14.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/be1b63f15581733a9d3283d19c44e8089712f710"},"pipeline":{"id":93238960,"iid":11758,"project_id":6138686,"sha":"be1b63f15581733a9d3283d19c44e8089712f710","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-02T16:38:27.298Z","updated_at":"2019-11-02T19:13:12.229Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/93238960"},"web_url":"https://gitlab.com/coq/coq/-/jobs/340103180","artifacts":[{"file_type":"trace","size":442952,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":340103179,"status":"success","stage":"stage-3","name":"library:ci-math-classes","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-02T16:38:28.494Z","started_at":"2019-11-02T17:12:12.858Z","finished_at":"2019-11-02T17:26:15.227Z","duration":842.369538,"queued_duration":0.886019,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"be1b63f15581733a9d3283d19c44e8089712f710","short_id":"be1b63f1","created_at":"2019-11-02T17:38:14.000+01:00","parent_ids":["ab8ed0a39e7e39573716a473618ed4f7c219d072"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-02T17:38:14.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/be1b63f15581733a9d3283d19c44e8089712f710"},"pipeline":{"id":93238960,"iid":11758,"project_id":6138686,"sha":"be1b63f15581733a9d3283d19c44e8089712f710","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-02T16:38:27.298Z","updated_at":"2019-11-02T19:13:12.229Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/93238960"},"web_url":"https://gitlab.com/coq/coq/-/jobs/340103179","artifacts":[{"file_type":"trace","size":216388,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":340103178,"status":"success","stage":"stage-3","name":"library:ci-color","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-02T16:38:28.467Z","started_at":"2019-11-02T17:12:12.283Z","finished_at":"2019-11-02T18:05:26.298Z","duration":3194.014939,"queued_duration":0.362476,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"be1b63f15581733a9d3283d19c44e8089712f710","short_id":"be1b63f1","created_at":"2019-11-02T17:38:14.000+01:00","parent_ids":["ab8ed0a39e7e39573716a473618ed4f7c219d072"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-02T17:38:14.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/be1b63f15581733a9d3283d19c44e8089712f710"},"pipeline":{"id":93238960,"iid":11758,"project_id":6138686,"sha":"be1b63f15581733a9d3283d19c44e8089712f710","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-02T16:38:27.298Z","updated_at":"2019-11-02T19:13:12.229Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/93238960"},"web_url":"https://gitlab.com/coq/coq/-/jobs/340103178","artifacts":[{"file_type":"trace","size":243432,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":340103177,"status":"success","stage":"stage-2","name":"plugin:ci-relation_algebra","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-02T16:38:28.443Z","started_at":"2019-11-02T16:58:21.567Z","finished_at":"2019-11-02T17:06:28.028Z","duration":486.461049,"queued_duration":0.886127,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"be1b63f15581733a9d3283d19c44e8089712f710","short_id":"be1b63f1","created_at":"2019-11-02T17:38:14.000+01:00","parent_ids":["ab8ed0a39e7e39573716a473618ed4f7c219d072"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-02T17:38:14.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/be1b63f15581733a9d3283d19c44e8089712f710"},"pipeline":{"id":93238960,"iid":11758,"project_id":6138686,"sha":"be1b63f15581733a9d3283d19c44e8089712f710","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-02T16:38:27.298Z","updated_at":"2019-11-02T19:13:12.229Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/93238960"},"web_url":"https://gitlab.com/coq/coq/-/jobs/340103177","artifacts":[{"file_type":"trace","size":60783,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":340103176,"status":"success","stage":"stage-2","name":"plugin:ci-quickchick","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-02T16:38:28.422Z","started_at":"2019-11-02T17:07:37.786Z","finished_at":"2019-11-02T17:13:48.788Z","duration":371.001481,"queued_duration":2.066007,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"be1b63f15581733a9d3283d19c44e8089712f710","short_id":"be1b63f1","created_at":"2019-11-02T17:38:14.000+01:00","parent_ids":["ab8ed0a39e7e39573716a473618ed4f7c219d072"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-02T17:38:14.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/be1b63f15581733a9d3283d19c44e8089712f710"},"pipeline":{"id":93238960,"iid":11758,"project_id":6138686,"sha":"be1b63f15581733a9d3283d19c44e8089712f710","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-02T16:38:27.298Z","updated_at":"2019-11-02T19:13:12.229Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/93238960"},"web_url":"https://gitlab.com/coq/coq/-/jobs/340103176","artifacts":[{"file_type":"trace","size":255597,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":340103175,"status":"success","stage":"stage-2","name":"plugin:ci-perennial","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-02T16:38:28.400Z","started_at":"2019-11-02T17:07:37.718Z","finished_at":"2019-11-02T17:45:06.531Z","duration":2248.812646,"queued_duration":2.053874,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"be1b63f15581733a9d3283d19c44e8089712f710","short_id":"be1b63f1","created_at":"2019-11-02T17:38:14.000+01:00","parent_ids":["ab8ed0a39e7e39573716a473618ed4f7c219d072"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-02T17:38:14.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/be1b63f15581733a9d3283d19c44e8089712f710"},"pipeline":{"id":93238960,"iid":11758,"project_id":6138686,"sha":"be1b63f15581733a9d3283d19c44e8089712f710","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-02T16:38:27.298Z","updated_at":"2019-11-02T19:13:12.229Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/93238960"},"web_url":"https://gitlab.com/coq/coq/-/jobs/340103175","artifacts":[{"file_type":"trace","size":37988,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":340103174,"status":"success","stage":"stage-2","name":"plugin:ci-paramcoq","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-02T16:38:28.380Z","started_at":"2019-11-02T16:58:21.510Z","finished_at":"2019-11-02T17:02:49.746Z","duration":268.236489,"queued_duration":0.880356,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"be1b63f15581733a9d3283d19c44e8089712f710","short_id":"be1b63f1","created_at":"2019-11-02T17:38:14.000+01:00","parent_ids":["ab8ed0a39e7e39573716a473618ed4f7c219d072"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-02T17:38:14.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/be1b63f15581733a9d3283d19c44e8089712f710"},"pipeline":{"id":93238960,"iid":11758,"project_id":6138686,"sha":"be1b63f15581733a9d3283d19c44e8089712f710","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-02T16:38:27.298Z","updated_at":"2019-11-02T19:13:12.229Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/93238960"},"web_url":"https://gitlab.com/coq/coq/-/jobs/340103174","artifacts":[{"file_type":"trace","size":110938,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":340103173,"status":"failed","stage":"stage-2","name":"plugin:ci-mtac2","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-02T16:38:28.353Z","started_at":"2019-11-02T16:58:21.406Z","finished_at":"2019-11-02T17:00:57.753Z","duration":156.346902,"queued_duration":0.834589,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"be1b63f15581733a9d3283d19c44e8089712f710","short_id":"be1b63f1","created_at":"2019-11-02T17:38:14.000+01:00","parent_ids":["ab8ed0a39e7e39573716a473618ed4f7c219d072"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-02T17:38:14.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/be1b63f15581733a9d3283d19c44e8089712f710"},"pipeline":{"id":93238960,"iid":11758,"project_id":6138686,"sha":"be1b63f15581733a9d3283d19c44e8089712f710","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-02T16:38:27.298Z","updated_at":"2019-11-02T19:13:12.229Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/93238960"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/340103173","artifacts":[{"file_type":"trace","size":30211,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":340103172,"status":"success","stage":"stage-2","name":"plugin:ci-fiat_parsers","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-02T16:38:28.317Z","started_at":"2019-11-02T16:58:21.356Z","finished_at":"2019-11-02T17:20:15.789Z","duration":1314.432531,"queued_duration":0.844648,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"be1b63f15581733a9d3283d19c44e8089712f710","short_id":"be1b63f1","created_at":"2019-11-02T17:38:14.000+01:00","parent_ids":["ab8ed0a39e7e39573716a473618ed4f7c219d072"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-02T17:38:14.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/be1b63f15581733a9d3283d19c44e8089712f710"},"pipeline":{"id":93238960,"iid":11758,"project_id":6138686,"sha":"be1b63f15581733a9d3283d19c44e8089712f710","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-02T16:38:27.298Z","updated_at":"2019-11-02T19:13:12.229Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/93238960"},"web_url":"https://gitlab.com/coq/coq/-/jobs/340103172","artifacts":[{"file_type":"trace","size":264487,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":340103171,"status":"success","stage":"stage-2","name":"plugin:ci-equations","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-02T16:38:28.296Z","started_at":"2019-11-02T16:58:21.313Z","finished_at":"2019-11-02T17:06:19.691Z","duration":478.377419,"queued_duration":0.848612,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"be1b63f15581733a9d3283d19c44e8089712f710","short_id":"be1b63f1","created_at":"2019-11-02T17:38:14.000+01:00","parent_ids":["ab8ed0a39e7e39573716a473618ed4f7c219d072"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-02T17:38:14.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/be1b63f15581733a9d3283d19c44e8089712f710"},"pipeline":{"id":93238960,"iid":11758,"project_id":6138686,"sha":"be1b63f15581733a9d3283d19c44e8089712f710","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-02T16:38:27.298Z","updated_at":"2019-11-02T19:13:12.229Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/93238960"},"web_url":"https://gitlab.com/coq/coq/-/jobs/340103171","artifacts":[{"file_type":"trace","size":106063,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":340103170,"status":"success","stage":"stage-2","name":"plugin:ci-elpi","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-02T16:38:28.276Z","started_at":"2019-11-02T16:58:21.204Z","finished_at":"2019-11-02T17:02:05.096Z","duration":223.891881,"queued_duration":0.781979,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"be1b63f15581733a9d3283d19c44e8089712f710","short_id":"be1b63f1","created_at":"2019-11-02T17:38:14.000+01:00","parent_ids":["ab8ed0a39e7e39573716a473618ed4f7c219d072"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-02T17:38:14.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/be1b63f15581733a9d3283d19c44e8089712f710"},"pipeline":{"id":93238960,"iid":11758,"project_id":6138686,"sha":"be1b63f15581733a9d3283d19c44e8089712f710","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-02T16:38:27.298Z","updated_at":"2019-11-02T19:13:12.229Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/93238960"},"web_url":"https://gitlab.com/coq/coq/-/jobs/340103170","artifacts":[{"file_type":"trace","size":2325867,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":340103169,"status":"failed","stage":"stage-2","name":"plugin:ci-coqhammer","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-02T16:38:28.256Z","started_at":"2019-11-02T16:58:21.144Z","finished_at":"2019-11-02T17:00:34.350Z","duration":133.206697,"queued_duration":0.763925,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"be1b63f15581733a9d3283d19c44e8089712f710","short_id":"be1b63f1","created_at":"2019-11-02T17:38:14.000+01:00","parent_ids":["ab8ed0a39e7e39573716a473618ed4f7c219d072"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-02T17:38:14.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/be1b63f15581733a9d3283d19c44e8089712f710"},"pipeline":{"id":93238960,"iid":11758,"project_id":6138686,"sha":"be1b63f15581733a9d3283d19c44e8089712f710","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-02T16:38:27.298Z","updated_at":"2019-11-02T19:13:12.229Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/93238960"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/340103169","artifacts":[{"file_type":"trace","size":62870,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":340103168,"status":"success","stage":"stage-2","name":"plugin:ci-coq_dpdgraph","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-02T16:38:28.231Z","started_at":"2019-11-02T16:58:21.096Z","finished_at":"2019-11-02T17:01:06.018Z","duration":164.921588,"queued_duration":0.768154,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"be1b63f15581733a9d3283d19c44e8089712f710","short_id":"be1b63f1","created_at":"2019-11-02T17:38:14.000+01:00","parent_ids":["ab8ed0a39e7e39573716a473618ed4f7c219d072"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-02T17:38:14.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/be1b63f15581733a9d3283d19c44e8089712f710"},"pipeline":{"id":93238960,"iid":11758,"project_id":6138686,"sha":"be1b63f15581733a9d3283d19c44e8089712f710","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-02T16:38:27.298Z","updated_at":"2019-11-02T19:13:12.229Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/93238960"},"web_url":"https://gitlab.com/coq/coq/-/jobs/340103168","artifacts":[{"file_type":"trace","size":45555,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":340103167,"status":"success","stage":"stage-2","name":"plugin:ci-bignums","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-02T16:38:28.205Z","started_at":"2019-11-02T17:07:37.578Z","finished_at":"2019-11-02T17:12:11.829Z","duration":274.250992,"queued_duration":1.969359,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"be1b63f15581733a9d3283d19c44e8089712f710","short_id":"be1b63f1","created_at":"2019-11-02T17:38:14.000+01:00","parent_ids":["ab8ed0a39e7e39573716a473618ed4f7c219d072"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-02T17:38:14.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/be1b63f15581733a9d3283d19c44e8089712f710"},"pipeline":{"id":93238960,"iid":11758,"project_id":6138686,"sha":"be1b63f15581733a9d3283d19c44e8089712f710","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-02T16:38:27.298Z","updated_at":"2019-11-02T19:13:12.229Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/93238960"},"web_url":"https://gitlab.com/coq/coq/-/jobs/340103167","artifacts":[{"file_type":"trace","size":48526,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":340103166,"status":"success","stage":"stage-2","name":"plugin:ci-aac_tactics","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-02T16:38:28.186Z","started_at":"2019-11-02T16:58:21.037Z","finished_at":"2019-11-02T17:01:14.845Z","duration":173.807506,"queued_duration":0.752119,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"be1b63f15581733a9d3283d19c44e8089712f710","short_id":"be1b63f1","created_at":"2019-11-02T17:38:14.000+01:00","parent_ids":["ab8ed0a39e7e39573716a473618ed4f7c219d072"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-02T17:38:14.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/be1b63f15581733a9d3283d19c44e8089712f710"},"pipeline":{"id":93238960,"iid":11758,"project_id":6138686,"sha":"be1b63f15581733a9d3283d19c44e8089712f710","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-02T16:38:27.298Z","updated_at":"2019-11-02T19:13:12.229Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/93238960"},"web_url":"https://gitlab.com/coq/coq/-/jobs/340103166","artifacts":[{"file_type":"trace","size":51546,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":340103165,"status":"success","stage":"stage-2","name":"library:ci-vst","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-02T16:38:28.166Z","started_at":"2019-11-02T17:07:37.390Z","finished_at":"2019-11-02T18:18:46.274Z","duration":4268.883954,"queued_duration":1.837173,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"be1b63f15581733a9d3283d19c44e8089712f710","short_id":"be1b63f1","created_at":"2019-11-02T17:38:14.000+01:00","parent_ids":["ab8ed0a39e7e39573716a473618ed4f7c219d072"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-02T17:38:14.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/be1b63f15581733a9d3283d19c44e8089712f710"},"pipeline":{"id":93238960,"iid":11758,"project_id":6138686,"sha":"be1b63f15581733a9d3283d19c44e8089712f710","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-02T16:38:27.298Z","updated_at":"2019-11-02T19:13:12.229Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/93238960"},"web_url":"https://gitlab.com/coq/coq/-/jobs/340103165","artifacts":[{"file_type":"trace","size":172653,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":340103164,"status":"success","stage":"stage-2","name":"library:ci-verdi-raft","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-02T16:38:28.145Z","started_at":"2019-11-02T17:07:37.145Z","finished_at":"2019-11-02T17:40:47.914Z","duration":1990.768185,"queued_duration":1.642407,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"be1b63f15581733a9d3283d19c44e8089712f710","short_id":"be1b63f1","created_at":"2019-11-02T17:38:14.000+01:00","parent_ids":["ab8ed0a39e7e39573716a473618ed4f7c219d072"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-02T17:38:14.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/be1b63f15581733a9d3283d19c44e8089712f710"},"pipeline":{"id":93238960,"iid":11758,"project_id":6138686,"sha":"be1b63f15581733a9d3283d19c44e8089712f710","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-02T16:38:27.298Z","updated_at":"2019-11-02T19:13:12.229Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/93238960"},"web_url":"https://gitlab.com/coq/coq/-/jobs/340103164","artifacts":[{"file_type":"trace","size":182757,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":340103163,"status":"success","stage":"stage-2","name":"library:ci-unimath","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-02T16:38:28.126Z","started_at":"2019-11-02T17:07:37.094Z","finished_at":"2019-11-02T18:33:18.153Z","duration":5141.058512,"queued_duration":1.769306,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"be1b63f15581733a9d3283d19c44e8089712f710","short_id":"be1b63f1","created_at":"2019-11-02T17:38:14.000+01:00","parent_ids":["ab8ed0a39e7e39573716a473618ed4f7c219d072"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-02T17:38:14.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/be1b63f15581733a9d3283d19c44e8089712f710"},"pipeline":{"id":93238960,"iid":11758,"project_id":6138686,"sha":"be1b63f15581733a9d3283d19c44e8089712f710","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-02T16:38:27.298Z","updated_at":"2019-11-02T19:13:12.229Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/93238960"},"web_url":"https://gitlab.com/coq/coq/-/jobs/340103163","artifacts":[{"file_type":"trace","size":206688,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":340103162,"status":"success","stage":"stage-2","name":"library:ci-stdlib2","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-02T16:38:28.107Z","started_at":"2019-11-02T17:07:37.041Z","finished_at":"2019-11-02T17:10:36.946Z","duration":179.904213,"queued_duration":1.767084,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"be1b63f15581733a9d3283d19c44e8089712f710","short_id":"be1b63f1","created_at":"2019-11-02T17:38:14.000+01:00","parent_ids":["ab8ed0a39e7e39573716a473618ed4f7c219d072"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-02T17:38:14.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/be1b63f15581733a9d3283d19c44e8089712f710"},"pipeline":{"id":93238960,"iid":11758,"project_id":6138686,"sha":"be1b63f15581733a9d3283d19c44e8089712f710","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-02T16:38:27.298Z","updated_at":"2019-11-02T19:13:12.229Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/93238960"},"web_url":"https://gitlab.com/coq/coq/-/jobs/340103162","artifacts":[{"file_type":"trace","size":43290,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":340103161,"status":"failed","stage":"stage-2","name":"library:ci-sf","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":true,"created_at":"2019-11-02T16:38:28.090Z","started_at":"2019-11-02T16:58:20.988Z","finished_at":"2019-11-02T17:01:11.771Z","duration":170.782675,"queued_duration":0.761088,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"be1b63f15581733a9d3283d19c44e8089712f710","short_id":"be1b63f1","created_at":"2019-11-02T17:38:14.000+01:00","parent_ids":["ab8ed0a39e7e39573716a473618ed4f7c219d072"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-02T17:38:14.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/be1b63f15581733a9d3283d19c44e8089712f710"},"pipeline":{"id":93238960,"iid":11758,"project_id":6138686,"sha":"be1b63f15581733a9d3283d19c44e8089712f710","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-02T16:38:27.298Z","updated_at":"2019-11-02T19:13:12.229Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/93238960"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/340103161","artifacts":[{"file_type":"trace","size":96940,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":340103160,"status":"success","stage":"stage-2","name":"library:ci-math-comp","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-02T16:38:28.072Z","started_at":"2019-11-02T17:07:36.990Z","finished_at":"2019-11-02T18:24:43.564Z","duration":4626.573683,"queued_duration":1.768532,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"be1b63f15581733a9d3283d19c44e8089712f710","short_id":"be1b63f1","created_at":"2019-11-02T17:38:14.000+01:00","parent_ids":["ab8ed0a39e7e39573716a473618ed4f7c219d072"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-02T17:38:14.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/be1b63f15581733a9d3283d19c44e8089712f710"},"pipeline":{"id":93238960,"iid":11758,"project_id":6138686,"sha":"be1b63f15581733a9d3283d19c44e8089712f710","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-02T16:38:27.298Z","updated_at":"2019-11-02T19:13:12.229Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/93238960"},"web_url":"https://gitlab.com/coq/coq/-/jobs/340103160","artifacts":[{"file_type":"trace","size":537932,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":340103159,"status":"success","stage":"stage-2","name":"library:ci-iris-lambda-rust","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-02T16:38:28.054Z","started_at":"2019-11-02T17:07:36.943Z","finished_at":"2019-11-02T17:43:58.138Z","duration":2181.19491,"queued_duration":1.77535,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"be1b63f15581733a9d3283d19c44e8089712f710","short_id":"be1b63f1","created_at":"2019-11-02T17:38:14.000+01:00","parent_ids":["ab8ed0a39e7e39573716a473618ed4f7c219d072"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-02T17:38:14.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/be1b63f15581733a9d3283d19c44e8089712f710"},"pipeline":{"id":93238960,"iid":11758,"project_id":6138686,"sha":"be1b63f15581733a9d3283d19c44e8089712f710","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-02T16:38:27.298Z","updated_at":"2019-11-02T19:13:12.229Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/93238960"},"web_url":"https://gitlab.com/coq/coq/-/jobs/340103159","artifacts":[{"file_type":"trace","size":800103,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":340103158,"status":"success","stage":"stage-2","name":"library:ci-hott","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-02T16:38:28.036Z","started_at":"2019-11-02T16:58:20.927Z","finished_at":"2019-11-02T17:13:37.329Z","duration":916.401602,"queued_duration":0.747039,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"be1b63f15581733a9d3283d19c44e8089712f710","short_id":"be1b63f1","created_at":"2019-11-02T17:38:14.000+01:00","parent_ids":["ab8ed0a39e7e39573716a473618ed4f7c219d072"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-02T17:38:14.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/be1b63f15581733a9d3283d19c44e8089712f710"},"pipeline":{"id":93238960,"iid":11758,"project_id":6138686,"sha":"be1b63f15581733a9d3283d19c44e8089712f710","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-02T16:38:27.298Z","updated_at":"2019-11-02T19:13:12.229Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/93238960"},"web_url":"https://gitlab.com/coq/coq/-/jobs/340103158","artifacts":[{"file_type":"trace","size":117323,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":340103157,"status":"success","stage":"stage-2","name":"library:ci-geocoq","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-02T16:38:28.018Z","started_at":"2019-11-02T17:07:36.892Z","finished_at":"2019-11-02T17:46:21.765Z","duration":2324.872949,"queued_duration":1.775834,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"be1b63f15581733a9d3283d19c44e8089712f710","short_id":"be1b63f1","created_at":"2019-11-02T17:38:14.000+01:00","parent_ids":["ab8ed0a39e7e39573716a473618ed4f7c219d072"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-02T17:38:14.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/be1b63f15581733a9d3283d19c44e8089712f710"},"pipeline":{"id":93238960,"iid":11758,"project_id":6138686,"sha":"be1b63f15581733a9d3283d19c44e8089712f710","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-02T16:38:27.298Z","updated_at":"2019-11-02T19:13:12.229Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/93238960"},"web_url":"https://gitlab.com/coq/coq/-/jobs/340103157","artifacts":[{"file_type":"trace","size":505614,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":340103156,"status":"success","stage":"stage-2","name":"library:ci-flocq","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-02T16:38:28.000Z","started_at":"2019-11-02T16:58:20.862Z","finished_at":"2019-11-02T17:07:09.220Z","duration":528.358518,"queued_duration":0.728666,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"be1b63f15581733a9d3283d19c44e8089712f710","short_id":"be1b63f1","created_at":"2019-11-02T17:38:14.000+01:00","parent_ids":["ab8ed0a39e7e39573716a473618ed4f7c219d072"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-02T17:38:14.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/be1b63f15581733a9d3283d19c44e8089712f710"},"pipeline":{"id":93238960,"iid":11758,"project_id":6138686,"sha":"be1b63f15581733a9d3283d19c44e8089712f710","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-02T16:38:27.298Z","updated_at":"2019-11-02T19:13:12.229Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/93238960"},"web_url":"https://gitlab.com/coq/coq/-/jobs/340103156","artifacts":[{"file_type":"trace","size":34551,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":340103155,"status":"success","stage":"stage-2","name":"library:ci-fiat-crypto-legacy","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-02T16:38:27.980Z","started_at":"2019-11-02T17:07:36.845Z","finished_at":"2019-11-02T18:22:15.201Z","duration":4478.355716,"queued_duration":1.787739,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"be1b63f15581733a9d3283d19c44e8089712f710","short_id":"be1b63f1","created_at":"2019-11-02T17:38:14.000+01:00","parent_ids":["ab8ed0a39e7e39573716a473618ed4f7c219d072"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-02T17:38:14.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/be1b63f15581733a9d3283d19c44e8089712f710"},"pipeline":{"id":93238960,"iid":11758,"project_id":6138686,"sha":"be1b63f15581733a9d3283d19c44e8089712f710","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-02T16:38:27.298Z","updated_at":"2019-11-02T19:13:12.229Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/93238960"},"web_url":"https://gitlab.com/coq/coq/-/jobs/340103155","artifacts":[{"file_type":"trace","size":531990,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":340103153,"status":"success","stage":"stage-2","name":"library:ci-fcsl-pcm","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-02T16:38:27.937Z","started_at":"2019-11-02T16:58:20.806Z","finished_at":"2019-11-02T17:02:35.953Z","duration":255.147382,"queued_duration":0.724998,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"be1b63f15581733a9d3283d19c44e8089712f710","short_id":"be1b63f1","created_at":"2019-11-02T17:38:14.000+01:00","parent_ids":["ab8ed0a39e7e39573716a473618ed4f7c219d072"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-02T17:38:14.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/be1b63f15581733a9d3283d19c44e8089712f710"},"pipeline":{"id":93238960,"iid":11758,"project_id":6138686,"sha":"be1b63f15581733a9d3283d19c44e8089712f710","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-02T16:38:27.298Z","updated_at":"2019-11-02T19:13:12.229Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/93238960"},"web_url":"https://gitlab.com/coq/coq/-/jobs/340103153","artifacts":[{"file_type":"trace","size":108229,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":340103152,"status":"success","stage":"stage-2","name":"library:ci-cross-crypto","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-02T16:38:27.915Z","started_at":"2019-11-02T16:58:20.761Z","finished_at":"2019-11-02T17:36:33.337Z","duration":2292.575923,"queued_duration":0.736907,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"be1b63f15581733a9d3283d19c44e8089712f710","short_id":"be1b63f1","created_at":"2019-11-02T17:38:14.000+01:00","parent_ids":["ab8ed0a39e7e39573716a473618ed4f7c219d072"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-02T17:38:14.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/be1b63f15581733a9d3283d19c44e8089712f710"},"pipeline":{"id":93238960,"iid":11758,"project_id":6138686,"sha":"be1b63f15581733a9d3283d19c44e8089712f710","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-02T16:38:27.298Z","updated_at":"2019-11-02T19:13:12.229Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/93238960"},"web_url":"https://gitlab.com/coq/coq/-/jobs/340103152","artifacts":[{"file_type":"trace","size":34506,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":340103151,"status":"success","stage":"stage-2","name":"library:ci-coquelicot","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-02T16:38:27.893Z","started_at":"2019-11-02T16:58:20.713Z","finished_at":"2019-11-02T17:04:42.816Z","duration":382.102336,"queued_duration":0.747566,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"be1b63f15581733a9d3283d19c44e8089712f710","short_id":"be1b63f1","created_at":"2019-11-02T17:38:14.000+01:00","parent_ids":["ab8ed0a39e7e39573716a473618ed4f7c219d072"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-02T17:38:14.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/be1b63f15581733a9d3283d19c44e8089712f710"},"pipeline":{"id":93238960,"iid":11758,"project_id":6138686,"sha":"be1b63f15581733a9d3283d19c44e8089712f710","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-02T16:38:27.298Z","updated_at":"2019-11-02T19:13:12.229Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/93238960"},"web_url":"https://gitlab.com/coq/coq/-/jobs/340103151","artifacts":[{"file_type":"trace","size":161857,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":340103150,"status":"success","stage":"stage-2","name":"library:ci-compcert","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-02T16:38:27.870Z","started_at":"2019-11-02T17:07:36.736Z","finished_at":"2019-11-02T17:36:12.874Z","duration":1716.138094,"queued_duration":1.784383,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"be1b63f15581733a9d3283d19c44e8089712f710","short_id":"be1b63f1","created_at":"2019-11-02T17:38:14.000+01:00","parent_ids":["ab8ed0a39e7e39573716a473618ed4f7c219d072"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-02T17:38:14.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/be1b63f15581733a9d3283d19c44e8089712f710"},"pipeline":{"id":93238960,"iid":11758,"project_id":6138686,"sha":"be1b63f15581733a9d3283d19c44e8089712f710","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-02T16:38:27.298Z","updated_at":"2019-11-02T19:13:12.229Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/93238960"},"web_url":"https://gitlab.com/coq/coq/-/jobs/340103150","artifacts":[{"file_type":"trace","size":4194361,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":340103149,"status":"success","stage":"stage-2","name":"library:ci-bedrock2","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-02T16:38:27.849Z","started_at":"2019-11-02T16:58:20.655Z","finished_at":"2019-11-02T18:04:42.134Z","duration":3981.479044,"queued_duration":0.74796,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"be1b63f15581733a9d3283d19c44e8089712f710","short_id":"be1b63f1","created_at":"2019-11-02T17:38:14.000+01:00","parent_ids":["ab8ed0a39e7e39573716a473618ed4f7c219d072"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-02T17:38:14.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/be1b63f15581733a9d3283d19c44e8089712f710"},"pipeline":{"id":93238960,"iid":11758,"project_id":6138686,"sha":"be1b63f15581733a9d3283d19c44e8089712f710","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-02T16:38:27.298Z","updated_at":"2019-11-02T19:13:12.229Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/93238960"},"web_url":"https://gitlab.com/coq/coq/-/jobs/340103149","artifacts":[{"file_type":"trace","size":184334,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":340103148,"status":"success","stage":"stage-2","name":"library:ci-argosy","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-02T16:38:27.829Z","started_at":"2019-11-02T16:58:20.608Z","finished_at":"2019-11-02T17:02:05.221Z","duration":224.612907,"queued_duration":0.751406,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"be1b63f15581733a9d3283d19c44e8089712f710","short_id":"be1b63f1","created_at":"2019-11-02T17:38:14.000+01:00","parent_ids":["ab8ed0a39e7e39573716a473618ed4f7c219d072"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-02T17:38:14.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/be1b63f15581733a9d3283d19c44e8089712f710"},"pipeline":{"id":93238960,"iid":11758,"project_id":6138686,"sha":"be1b63f15581733a9d3283d19c44e8089712f710","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-02T16:38:27.298Z","updated_at":"2019-11-02T19:13:12.229Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/93238960"},"web_url":"https://gitlab.com/coq/coq/-/jobs/340103148","artifacts":[{"file_type":"trace","size":29075,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":340103147,"status":"success","stage":"stage-2","name":"validate:quick","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-02T16:38:27.808Z","started_at":"2019-11-02T16:56:56.868Z","finished_at":"2019-11-02T17:02:59.457Z","duration":362.588658,"queued_duration":0.194135,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"be1b63f15581733a9d3283d19c44e8089712f710","short_id":"be1b63f1","created_at":"2019-11-02T17:38:14.000+01:00","parent_ids":["ab8ed0a39e7e39573716a473618ed4f7c219d072"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-02T17:38:14.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/be1b63f15581733a9d3283d19c44e8089712f710"},"pipeline":{"id":93238960,"iid":11758,"project_id":6138686,"sha":"be1b63f15581733a9d3283d19c44e8089712f710","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-02T16:38:27.298Z","updated_at":"2019-11-02T19:13:12.229Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/93238960"},"web_url":"https://gitlab.com/coq/coq/-/jobs/340103147","artifacts":[{"file_type":"trace","size":64762,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2020-01-01T17:02:57.405Z","tag_list":[]}
{"id":340103146,"status":"success","stage":"stage-2","name":"validate:edge+flambda","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-02T16:38:27.787Z","started_at":"2019-11-02T17:07:36.550Z","finished_at":"2019-11-02T17:14:51.727Z","duration":435.176921,"queued_duration":1.653412,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"be1b63f15581733a9d3283d19c44e8089712f710","short_id":"be1b63f1","created_at":"2019-11-02T17:38:14.000+01:00","parent_ids":["ab8ed0a39e7e39573716a473618ed4f7c219d072"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-02T17:38:14.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/be1b63f15581733a9d3283d19c44e8089712f710"},"pipeline":{"id":93238960,"iid":11758,"project_id":6138686,"sha":"be1b63f15581733a9d3283d19c44e8089712f710","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-02T16:38:27.298Z","updated_at":"2019-11-02T19:13:12.229Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/93238960"},"web_url":"https://gitlab.com/coq/coq/-/jobs/340103146","artifacts":[{"file_type":"trace","size":106273,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":"2020-01-01T17:14:49.688Z","tag_list":[]}
{"id":340103145,"status":"success","stage":"stage-2","name":"validate:base+32bit","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-02T16:38:27.766Z","started_at":"2019-11-02T16:54:22.647Z","finished_at":"2019-11-02T17:00:17.021Z","duration":354.374043,"queued_duration":0.642897,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"be1b63f15581733a9d3283d19c44e8089712f710","short_id":"be1b63f1","created_at":"2019-11-02T17:38:14.000+01:00","parent_ids":["ab8ed0a39e7e39573716a473618ed4f7c219d072"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-02T17:38:14.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/be1b63f15581733a9d3283d19c44e8089712f710"},"pipeline":{"id":93238960,"iid":11758,"project_id":6138686,"sha":"be1b63f15581733a9d3283d19c44e8089712f710","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-02T16:38:27.298Z","updated_at":"2019-11-02T19:13:12.229Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/93238960"},"web_url":"https://gitlab.com/coq/coq/-/jobs/340103145","artifacts":[{"file_type":"trace","size":63251,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2020-01-01T17:00:14.777Z","tag_list":[]}
{"id":340103144,"status":"success","stage":"stage-2","name":"validate:base","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-02T16:38:27.746Z","started_at":"2019-11-02T16:58:20.546Z","finished_at":"2019-11-02T17:04:27.936Z","duration":367.390125,"queued_duration":0.747205,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"be1b63f15581733a9d3283d19c44e8089712f710","short_id":"be1b63f1","created_at":"2019-11-02T17:38:14.000+01:00","parent_ids":["ab8ed0a39e7e39573716a473618ed4f7c219d072"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-02T17:38:14.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/be1b63f15581733a9d3283d19c44e8089712f710"},"pipeline":{"id":93238960,"iid":11758,"project_id":6138686,"sha":"be1b63f15581733a9d3283d19c44e8089712f710","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-02T16:38:27.298Z","updated_at":"2019-11-02T19:13:12.229Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/93238960"},"web_url":"https://gitlab.com/coq/coq/-/jobs/340103144","artifacts":[{"file_type":"trace","size":64696,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2020-01-01T17:04:26.665Z","tag_list":[]}
{"id":340103143,"status":"success","stage":"stage-2","name":"test-suite:base+async","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":true,"created_at":"2019-11-02T16:38:27.725Z","started_at":"2019-11-02T16:58:20.493Z","finished_at":"2019-11-02T17:30:48.992Z","duration":1948.499229,"queued_duration":0.745444,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"be1b63f15581733a9d3283d19c44e8089712f710","short_id":"be1b63f1","created_at":"2019-11-02T17:38:14.000+01:00","parent_ids":["ab8ed0a39e7e39573716a473618ed4f7c219d072"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-02T17:38:14.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/be1b63f15581733a9d3283d19c44e8089712f710"},"pipeline":{"id":93238960,"iid":11758,"project_id":6138686,"sha":"be1b63f15581733a9d3283d19c44e8089712f710","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-02T16:38:27.298Z","updated_at":"2019-11-02T19:13:12.229Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/93238960"},"web_url":"https://gitlab.com/coq/coq/-/jobs/340103143","artifacts":[{"file_type":"trace","size":91730,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":340103142,"status":"success","stage":"stage-2","name":"test-suite:egde:dune:dev","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-02T16:38:27.706Z","started_at":"2019-11-02T16:54:36.549Z","finished_at":"2019-11-02T17:32:40.180Z","duration":2283.631424,"queued_duration":0.30982,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"be1b63f15581733a9d3283d19c44e8089712f710","short_id":"be1b63f1","created_at":"2019-11-02T17:38:14.000+01:00","parent_ids":["ab8ed0a39e7e39573716a473618ed4f7c219d072"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-02T17:38:14.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/be1b63f15581733a9d3283d19c44e8089712f710"},"pipeline":{"id":93238960,"iid":11758,"project_id":6138686,"sha":"be1b63f15581733a9d3283d19c44e8089712f710","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-02T16:38:27.298Z","updated_at":"2019-11-02T19:13:12.229Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/93238960"},"web_url":"https://gitlab.com/coq/coq/-/jobs/340103142","artifacts":[{"file_type":"trace","size":20184,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":340103141,"status":"success","stage":"stage-2","name":"test-suite:edge+flambda","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-02T16:38:27.687Z","started_at":"2019-11-02T17:07:36.223Z","finished_at":"2019-11-02T17:25:31.413Z","duration":1075.18978,"queued_duration":1.402323,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"be1b63f15581733a9d3283d19c44e8089712f710","short_id":"be1b63f1","created_at":"2019-11-02T17:38:14.000+01:00","parent_ids":["ab8ed0a39e7e39573716a473618ed4f7c219d072"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-02T17:38:14.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/be1b63f15581733a9d3283d19c44e8089712f710"},"pipeline":{"id":93238960,"iid":11758,"project_id":6138686,"sha":"be1b63f15581733a9d3283d19c44e8089712f710","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-02T16:38:27.298Z","updated_at":"2019-11-02T19:13:12.229Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/93238960"},"web_url":"https://gitlab.com/coq/coq/-/jobs/340103141","artifacts":[{"file_type":"trace","size":119545,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":340103140,"status":"success","stage":"stage-2","name":"test-suite:base+32bit","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-02T16:38:27.666Z","started_at":"2019-11-02T16:54:22.310Z","finished_at":"2019-11-02T17:14:26.355Z","duration":1204.044989,"queued_duration":0.35007,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"be1b63f15581733a9d3283d19c44e8089712f710","short_id":"be1b63f1","created_at":"2019-11-02T17:38:14.000+01:00","parent_ids":["ab8ed0a39e7e39573716a473618ed4f7c219d072"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-02T17:38:14.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/be1b63f15581733a9d3283d19c44e8089712f710"},"pipeline":{"id":93238960,"iid":11758,"project_id":6138686,"sha":"be1b63f15581733a9d3283d19c44e8089712f710","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-02T16:38:27.298Z","updated_at":"2019-11-02T19:13:12.229Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/93238960"},"web_url":"https://gitlab.com/coq/coq/-/jobs/340103140","artifacts":[{"file_type":"trace","size":90221,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":340103139,"status":"success","stage":"stage-2","name":"test-suite:base","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-02T16:38:27.644Z","started_at":"2019-11-02T16:58:20.370Z","finished_at":"2019-11-02T17:15:27.217Z","duration":1026.847225,"queued_duration":0.670639,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"be1b63f15581733a9d3283d19c44e8089712f710","short_id":"be1b63f1","created_at":"2019-11-02T17:38:14.000+01:00","parent_ids":["ab8ed0a39e7e39573716a473618ed4f7c219d072"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-02T17:38:14.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/be1b63f15581733a9d3283d19c44e8089712f710"},"pipeline":{"id":93238960,"iid":11758,"project_id":6138686,"sha":"be1b63f15581733a9d3283d19c44e8089712f710","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-02T16:38:27.298Z","updated_at":"2019-11-02T19:13:12.229Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/93238960"},"web_url":"https://gitlab.com/coq/coq/-/jobs/340103139","artifacts":[{"file_type":"trace","size":116027,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":340103138,"status":"success","stage":"stage-2","name":"doc:ml-api:odoc","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-02T16:38:27.622Z","started_at":"2019-11-02T16:54:36.498Z","finished_at":"2019-11-02T16:58:17.178Z","duration":220.679595,"queued_duration":0.32159,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"be1b63f15581733a9d3283d19c44e8089712f710","short_id":"be1b63f1","created_at":"2019-11-02T17:38:14.000+01:00","parent_ids":["ab8ed0a39e7e39573716a473618ed4f7c219d072"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-02T17:38:14.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/be1b63f15581733a9d3283d19c44e8089712f710"},"pipeline":{"id":93238960,"iid":11758,"project_id":6138686,"sha":"be1b63f15581733a9d3283d19c44e8089712f710","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-02T16:38:27.298Z","updated_at":"2019-11-02T19:13:12.229Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/93238960"},"web_url":"https://gitlab.com/coq/coq/-/jobs/340103138","artifacts":[{"file_type":"trace","size":75298,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2020-01-01T16:58:15.025Z","tag_list":[]}
{"id":340103137,"status":"success","stage":"stage-2","name":"doc:stdlib:dune","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-02T16:38:27.600Z","started_at":"2019-11-02T16:54:36.447Z","finished_at":"2019-11-02T17:12:32.941Z","duration":1076.494191,"queued_duration":0.312727,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"be1b63f15581733a9d3283d19c44e8089712f710","short_id":"be1b63f1","created_at":"2019-11-02T17:38:14.000+01:00","parent_ids":["ab8ed0a39e7e39573716a473618ed4f7c219d072"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-02T17:38:14.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/be1b63f15581733a9d3283d19c44e8089712f710"},"pipeline":{"id":93238960,"iid":11758,"project_id":6138686,"sha":"be1b63f15581733a9d3283d19c44e8089712f710","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-02T16:38:27.298Z","updated_at":"2019-11-02T19:13:12.229Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/93238960"},"web_url":"https://gitlab.com/coq/coq/-/jobs/340103137","artifacts":[{"file_type":"trace","size":26685,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2020-01-01T17:12:29.638Z","tag_list":[]}
{"id":340103136,"status":"success","stage":"stage-2","name":"doc:refman:dune","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-02T16:38:27.578Z","started_at":"2019-11-02T16:54:36.306Z","finished_at":"2019-11-02T17:12:45.491Z","duration":1089.184714,"queued_duration":0.212868,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"be1b63f15581733a9d3283d19c44e8089712f710","short_id":"be1b63f1","created_at":"2019-11-02T17:38:14.000+01:00","parent_ids":["ab8ed0a39e7e39573716a473618ed4f7c219d072"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-02T17:38:14.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/be1b63f15581733a9d3283d19c44e8089712f710"},"pipeline":{"id":93238960,"iid":11758,"project_id":6138686,"sha":"be1b63f15581733a9d3283d19c44e8089712f710","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-02T16:38:27.298Z","updated_at":"2019-11-02T19:13:12.229Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/93238960"},"web_url":"https://gitlab.com/coq/coq/-/jobs/340103136","artifacts":[{"file_type":"trace","size":20669,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2020-01-01T17:12:43.537Z","tag_list":[]}
{"id":340103135,"status":"success","stage":"stage-2","name":"doc:refman","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-02T16:38:27.556Z","started_at":"2019-11-02T16:58:20.034Z","finished_at":"2019-11-02T17:05:57.832Z","duration":457.798548,"queued_duration":0.378304,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"be1b63f15581733a9d3283d19c44e8089712f710","short_id":"be1b63f1","created_at":"2019-11-02T17:38:14.000+01:00","parent_ids":["ab8ed0a39e7e39573716a473618ed4f7c219d072"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-02T17:38:14.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/be1b63f15581733a9d3283d19c44e8089712f710"},"pipeline":{"id":93238960,"iid":11758,"project_id":6138686,"sha":"be1b63f15581733a9d3283d19c44e8089712f710","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-02T16:38:27.298Z","updated_at":"2019-11-02T19:13:12.229Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/93238960"},"web_url":"https://gitlab.com/coq/coq/-/jobs/340103135","artifacts":[{"file_type":"trace","size":1249652,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":"2020-01-01T17:05:55.406Z","tag_list":[]}
{"id":340103134,"status":"success","stage":"stage-1","name":"plugin:plugin-tutorial","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-02T16:38:27.519Z","started_at":"2019-11-02T16:38:30.294Z","finished_at":"2019-11-02T16:42:30.960Z","duration":240.666762,"queued_duration":1.168104,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"be1b63f15581733a9d3283d19c44e8089712f710","short_id":"be1b63f1","created_at":"2019-11-02T17:38:14.000+01:00","parent_ids":["ab8ed0a39e7e39573716a473618ed4f7c219d072"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-02T17:38:14.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/be1b63f15581733a9d3283d19c44e8089712f710"},"pipeline":{"id":93238960,"iid":11758,"project_id":6138686,"sha":"be1b63f15581733a9d3283d19c44e8089712f710","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-02T16:38:27.298Z","updated_at":"2019-11-02T19:13:12.229Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/93238960"},"web_url":"https://gitlab.com/coq/coq/-/jobs/340103134","artifacts":[{"file_type":"trace","size":57555,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":340103133,"status":"success","stage":"stage-1","name":"pkg:nix","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-02T16:38:27.500Z","started_at":"2019-11-02T16:38:30.189Z","finished_at":"2019-11-02T17:24:17.116Z","duration":2746.926852,"queued_duration":1.086177,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"be1b63f15581733a9d3283d19c44e8089712f710","short_id":"be1b63f1","created_at":"2019-11-02T17:38:14.000+01:00","parent_ids":["ab8ed0a39e7e39573716a473618ed4f7c219d072"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-02T17:38:14.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/be1b63f15581733a9d3283d19c44e8089712f710"},"pipeline":{"id":93238960,"iid":11758,"project_id":6138686,"sha":"be1b63f15581733a9d3283d19c44e8089712f710","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-02T16:38:27.298Z","updated_at":"2019-11-02T19:13:12.229Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/93238960"},"web_url":"https://gitlab.com/coq/coq/-/jobs/340103133","artifacts":[{"file_type":"trace","size":575099,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":340103132,"status":"success","stage":"stage-1","name":"pkg:opam","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-02T16:38:27.480Z","started_at":"2019-11-02T16:38:30.033Z","finished_at":"2019-11-02T17:04:48.228Z","duration":1578.195194,"queued_duration":0.966142,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"be1b63f15581733a9d3283d19c44e8089712f710","short_id":"be1b63f1","created_at":"2019-11-02T17:38:14.000+01:00","parent_ids":["ab8ed0a39e7e39573716a473618ed4f7c219d072"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-02T17:38:14.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/be1b63f15581733a9d3283d19c44e8089712f710"},"pipeline":{"id":93238960,"iid":11758,"project_id":6138686,"sha":"be1b63f15581733a9d3283d19c44e8089712f710","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-02T16:38:27.298Z","updated_at":"2019-11-02T19:13:12.229Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/93238960"},"web_url":"https://gitlab.com/coq/coq/-/jobs/340103132","artifacts":[{"file_type":"trace","size":18488,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":340103131,"status":"success","stage":"stage-1","name":"lint","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-02T16:38:27.459Z","started_at":"2019-11-02T16:38:29.836Z","finished_at":"2019-11-02T16:43:28.914Z","duration":299.078117,"queued_duration":0.800338,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"be1b63f15581733a9d3283d19c44e8089712f710","short_id":"be1b63f1","created_at":"2019-11-02T17:38:14.000+01:00","parent_ids":["ab8ed0a39e7e39573716a473618ed4f7c219d072"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-02T17:38:14.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/be1b63f15581733a9d3283d19c44e8089712f710"},"pipeline":{"id":93238960,"iid":11758,"project_id":6138686,"sha":"be1b63f15581733a9d3283d19c44e8089712f710","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-02T16:38:27.298Z","updated_at":"2019-11-02T19:13:12.229Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/93238960"},"web_url":"https://gitlab.com/coq/coq/-/jobs/340103131","artifacts":[{"file_type":"trace","size":33454,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":340103130,"status":"success","stage":"stage-1","name":"windows64","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-02T16:38:27.430Z","started_at":"2019-11-02T16:55:00.348Z","finished_at":"2019-11-02T17:55:16.279Z","duration":3615.930275,"queued_duration":991.346721,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"be1b63f15581733a9d3283d19c44e8089712f710","short_id":"be1b63f1","created_at":"2019-11-02T17:38:14.000+01:00","parent_ids":["ab8ed0a39e7e39573716a473618ed4f7c219d072"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-02T17:38:14.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/be1b63f15581733a9d3283d19c44e8089712f710"},"pipeline":{"id":93238960,"iid":11758,"project_id":6138686,"sha":"be1b63f15581733a9d3283d19c44e8089712f710","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-02T16:38:27.298Z","updated_at":"2019-11-02T19:13:12.229Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/93238960"},"web_url":"https://gitlab.com/coq/coq/-/jobs/340103130","artifacts":[{"file_type":"trace","size":275100,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":"2019-11-09T17:55:15.064Z","tag_list":["windows"]}
{"id":340103129,"status":"success","stage":"stage-1","name":"build:quick","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":true,"created_at":"2019-11-02T16:38:27.412Z","started_at":"2019-11-02T16:38:29.790Z","finished_at":"2019-11-02T16:56:56.585Z","duration":1106.795436,"queued_duration":0.825996,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"be1b63f15581733a9d3283d19c44e8089712f710","short_id":"be1b63f1","created_at":"2019-11-02T17:38:14.000+01:00","parent_ids":["ab8ed0a39e7e39573716a473618ed4f7c219d072"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-02T17:38:14.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/be1b63f15581733a9d3283d19c44e8089712f710"},"pipeline":{"id":93238960,"iid":11758,"project_id":6138686,"sha":"be1b63f15581733a9d3283d19c44e8089712f710","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-02T16:38:27.298Z","updated_at":"2019-11-02T19:13:12.229Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/93238960"},"web_url":"https://gitlab.com/coq/coq/-/jobs/340103129","artifacts":[{"file_type":"trace","size":238467,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2019-11-09T16:56:55.288Z","tag_list":[]}
{"id":340103128,"status":"success","stage":"stage-1","name":"build:base+async","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":true,"created_at":"2019-11-02T16:38:27.392Z","started_at":"2019-11-02T16:38:29.739Z","finished_at":"2019-11-02T17:51:41.105Z","duration":4391.366639,"queued_duration":0.810554,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"be1b63f15581733a9d3283d19c44e8089712f710","short_id":"be1b63f1","created_at":"2019-11-02T17:38:14.000+01:00","parent_ids":["ab8ed0a39e7e39573716a473618ed4f7c219d072"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-02T17:38:14.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/be1b63f15581733a9d3283d19c44e8089712f710"},"pipeline":{"id":93238960,"iid":11758,"project_id":6138686,"sha":"be1b63f15581733a9d3283d19c44e8089712f710","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-02T16:38:27.298Z","updated_at":"2019-11-02T19:13:12.229Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/93238960"},"web_url":"https://gitlab.com/coq/coq/-/jobs/340103128","artifacts":[{"file_type":"trace","size":277605,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2019-11-09T17:51:39.234Z","tag_list":[]}
{"id":340103127,"status":"success","stage":"stage-1","name":"build:edge+flambda:dune:dev","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-02T16:38:27.374Z","started_at":"2019-11-02T16:38:29.552Z","finished_at":"2019-11-02T16:54:35.993Z","duration":966.441243,"queued_duration":0.647424,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"be1b63f15581733a9d3283d19c44e8089712f710","short_id":"be1b63f1","created_at":"2019-11-02T17:38:14.000+01:00","parent_ids":["ab8ed0a39e7e39573716a473618ed4f7c219d072"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-02T17:38:14.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/be1b63f15581733a9d3283d19c44e8089712f710"},"pipeline":{"id":93238960,"iid":11758,"project_id":6138686,"sha":"be1b63f15581733a9d3283d19c44e8089712f710","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-02T16:38:27.298Z","updated_at":"2019-11-02T19:13:12.229Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/93238960"},"web_url":"https://gitlab.com/coq/coq/-/jobs/340103127","artifacts":[{"file_type":"trace","size":20447,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2019-11-09T16:54:34.598Z","tag_list":[]}
{"id":340103126,"status":"success","stage":"stage-1","name":"build:edge+flambda","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-02T16:38:27.354Z","started_at":"2019-11-02T16:38:29.426Z","finished_at":"2019-11-02T17:07:34.682Z","duration":1745.2563,"queued_duration":0.569734,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"be1b63f15581733a9d3283d19c44e8089712f710","short_id":"be1b63f1","created_at":"2019-11-02T17:38:14.000+01:00","parent_ids":["ab8ed0a39e7e39573716a473618ed4f7c219d072"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-02T17:38:14.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/be1b63f15581733a9d3283d19c44e8089712f710"},"pipeline":{"id":93238960,"iid":11758,"project_id":6138686,"sha":"be1b63f15581733a9d3283d19c44e8089712f710","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-02T16:38:27.298Z","updated_at":"2019-11-02T19:13:12.229Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/93238960"},"web_url":"https://gitlab.com/coq/coq/-/jobs/340103126","artifacts":[{"file_type":"trace","size":279501,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2019-11-09T17:07:31.476Z","tag_list":[]}
{"id":340103125,"status":"success","stage":"stage-1","name":"build:base+32bit","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-02T16:38:27.336Z","started_at":"2019-11-02T16:38:29.366Z","finished_at":"2019-11-02T16:54:21.879Z","duration":952.512558,"queued_duration":0.606135,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"be1b63f15581733a9d3283d19c44e8089712f710","short_id":"be1b63f1","created_at":"2019-11-02T17:38:14.000+01:00","parent_ids":["ab8ed0a39e7e39573716a473618ed4f7c219d072"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-02T17:38:14.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/be1b63f15581733a9d3283d19c44e8089712f710"},"pipeline":{"id":93238960,"iid":11758,"project_id":6138686,"sha":"be1b63f15581733a9d3283d19c44e8089712f710","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-02T16:38:27.298Z","updated_at":"2019-11-02T19:13:12.229Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/93238960"},"web_url":"https://gitlab.com/coq/coq/-/jobs/340103125","artifacts":[{"file_type":"trace","size":271615,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2019-11-09T16:54:19.889Z","tag_list":[]}
{"id":340103124,"status":"success","stage":"stage-1","name":"build:base","ref":"pr-11017","tag":false,"coverage":null,"allow_failure":false,"created_at":"2019-11-02T16:38:27.315Z","started_at":"2019-11-02T16:38:29.188Z","finished_at":"2019-11-02T16:58:19.554Z","duration":1190.366051,"queued_duration":0.467022,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"be1b63f15581733a9d3283d19c44e8089712f710","short_id":"be1b63f1","created_at":"2019-11-02T17:38:14.000+01:00","parent_ids":["ab8ed0a39e7e39573716a473618ed4f7c219d072"],"title":"Make [Proof_global.closed_proof_output] opaque","message":"Make [Proof_global.closed_proof_output] opaque\n\nThis means return_proof is the only place where it can be produced.\n\nWe need to change the stm a bit as it keeps a pointer to a\n[closed_proof_output] to join and to check if it failed, and it needs\na way to create a dummy in 1 case.\n\nI'm not sure if this works correctly though, how to test?\n\nWe also inline the used bits of [return_proof ~allow_partial:true] in\n[save_lemma_admitted] to get [Proof using] info. We could\nalternatively expose the [closed_proof_output -> constr list]\nprojection. I think the code is easier to understand this way though,\nas we don't have to read [return_proof] and figure out that the side\neffect manipulation is ignored etc.\n\nNote that the \"this will warn\" comment was outdated since\n73daf37ccc7a44cd29c9b67405111756c75cb26a\n","author_name":"Gaëtan Gilbert","author_email":"gaetan.gilbert@skyskimmer.net","authored_date":"2019-10-31T14:27:37.000+01:00","committer_name":"Gaëtan Gilbert","committer_email":"gaetan.gilbert@skyskimmer.net","committed_date":"2019-11-02T17:38:14.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/be1b63f15581733a9d3283d19c44e8089712f710"},"pipeline":{"id":93238960,"iid":11758,"project_id":6138686,"sha":"be1b63f15581733a9d3283d19c44e8089712f710","ref":"pr-11017","status":"failed","source":"push","created_at":"2019-11-02T16:38:27.298Z","updated_at":"2019-11-02T19:13:12.229Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/93238960"},"web_url":"https://gitlab.com/coq/coq/-/jobs/340103124","artifacts":[{"file_type":"trace","size":328632,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2019-11-09T16:58:18.151Z","tag_list":[]}
