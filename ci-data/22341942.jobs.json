{"id":69400009,"status":"failed","stage":"test","name":"ci-vst","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-20T22:47:31.171Z","started_at":"2018-05-20T23:20:07.030Z","finished_at":"2018-05-20T23:22:29.866Z","duration":142.836407,"queued_duration":1.885988,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6","short_id":"ec998bc8","created_at":"2018-05-21T00:45:56.000+02:00","parent_ids":["0df9653af438e47e9306a4c6a39bb933b3d582c3"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-21T00:45:56.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6"},"pipeline":{"id":22341942,"iid":null,"project_id":6138686,"sha":"ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-20T22:47:29.845Z","updated_at":"2018-05-20T23:25:24.418Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22341942"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/69400009","artifacts":[{"file_type":"trace","size":950,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":69400008,"status":"failed","stage":"test","name":"ci-unimath","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-20T22:47:31.143Z","started_at":"2018-05-20T23:20:05.519Z","finished_at":"2018-05-20T23:22:54.798Z","duration":169.279105,"queued_duration":0.273179,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6","short_id":"ec998bc8","created_at":"2018-05-21T00:45:56.000+02:00","parent_ids":["0df9653af438e47e9306a4c6a39bb933b3d582c3"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-21T00:45:56.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6"},"pipeline":{"id":22341942,"iid":null,"project_id":6138686,"sha":"ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-20T22:47:29.845Z","updated_at":"2018-05-20T23:25:24.418Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22341942"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/69400008","artifacts":[{"file_type":"trace","size":950,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":69400007,"status":"failed","stage":"test","name":"ci-sf","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-20T22:47:31.108Z","started_at":"2018-05-20T23:20:05.752Z","finished_at":"2018-05-20T23:22:44.388Z","duration":158.636424,"queued_duration":0.381536,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6","short_id":"ec998bc8","created_at":"2018-05-21T00:45:56.000+02:00","parent_ids":["0df9653af438e47e9306a4c6a39bb933b3d582c3"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-21T00:45:56.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6"},"pipeline":{"id":22341942,"iid":null,"project_id":6138686,"sha":"ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-20T22:47:29.845Z","updated_at":"2018-05-20T23:25:24.418Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22341942"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/69400007","artifacts":[{"file_type":"trace","size":950,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":69400006,"status":"failed","stage":"test","name":"ci-pidetop","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-20T22:47:31.087Z","started_at":"2018-05-20T23:20:07.595Z","finished_at":"2018-05-20T23:22:20.247Z","duration":132.651768,"queued_duration":2.052558,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6","short_id":"ec998bc8","created_at":"2018-05-21T00:45:56.000+02:00","parent_ids":["0df9653af438e47e9306a4c6a39bb933b3d582c3"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-21T00:45:56.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6"},"pipeline":{"id":22341942,"iid":null,"project_id":6138686,"sha":"ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-20T22:47:29.845Z","updated_at":"2018-05-20T23:25:24.418Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22341942"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/69400006","artifacts":[{"file_type":"trace","size":950,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":69400005,"status":"failed","stage":"test","name":"ci-mtac2","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-20T22:47:31.060Z","started_at":"2018-05-20T23:20:06.214Z","finished_at":"2018-05-20T23:23:15.580Z","duration":189.366561,"queued_duration":0.426796,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6","short_id":"ec998bc8","created_at":"2018-05-21T00:45:56.000+02:00","parent_ids":["0df9653af438e47e9306a4c6a39bb933b3d582c3"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-21T00:45:56.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6"},"pipeline":{"id":22341942,"iid":null,"project_id":6138686,"sha":"ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-20T22:47:29.845Z","updated_at":"2018-05-20T23:25:24.418Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22341942"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/69400005","artifacts":[{"file_type":"trace","size":950,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":69400004,"status":"failed","stage":"test","name":"ci-math-comp","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-20T22:47:31.035Z","started_at":"2018-05-20T23:20:06.265Z","finished_at":"2018-05-20T23:24:14.076Z","duration":247.810959,"queued_duration":0.225557,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6","short_id":"ec998bc8","created_at":"2018-05-21T00:45:56.000+02:00","parent_ids":["0df9653af438e47e9306a4c6a39bb933b3d582c3"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-21T00:45:56.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6"},"pipeline":{"id":22341942,"iid":null,"project_id":6138686,"sha":"ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-20T22:47:29.845Z","updated_at":"2018-05-20T23:25:24.418Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22341942"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/69400004","artifacts":[{"file_type":"trace","size":950,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":69400003,"status":"failed","stage":"test","name":"ci-ltac2","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-20T22:47:31.010Z","started_at":"2018-05-20T23:20:06.655Z","finished_at":"2018-05-20T23:22:54.693Z","duration":168.038193,"queued_duration":0.444584,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6","short_id":"ec998bc8","created_at":"2018-05-21T00:45:56.000+02:00","parent_ids":["0df9653af438e47e9306a4c6a39bb933b3d582c3"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-21T00:45:56.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6"},"pipeline":{"id":22341942,"iid":null,"project_id":6138686,"sha":"ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-20T22:47:29.845Z","updated_at":"2018-05-20T23:25:24.418Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22341942"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/69400003","artifacts":[{"file_type":"trace","size":950,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":69400002,"status":"failed","stage":"test","name":"ci-iris-lambda-rust","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-20T22:47:30.985Z","started_at":"2018-05-20T23:20:07.090Z","finished_at":"2018-05-20T23:23:01.673Z","duration":174.582556,"queued_duration":0.558284,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6","short_id":"ec998bc8","created_at":"2018-05-21T00:45:56.000+02:00","parent_ids":["0df9653af438e47e9306a4c6a39bb933b3d582c3"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-21T00:45:56.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6"},"pipeline":{"id":22341942,"iid":null,"project_id":6138686,"sha":"ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-20T22:47:29.845Z","updated_at":"2018-05-20T23:25:24.418Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22341942"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/69400002","artifacts":[{"file_type":"trace","size":950,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":69400001,"status":"failed","stage":"test","name":"ci-hott","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-20T22:47:30.955Z","started_at":"2018-05-20T23:20:07.123Z","finished_at":"2018-05-20T23:24:23.542Z","duration":256.419203,"queued_duration":0.281043,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6","short_id":"ec998bc8","created_at":"2018-05-21T00:45:56.000+02:00","parent_ids":["0df9653af438e47e9306a4c6a39bb933b3d582c3"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-21T00:45:56.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6"},"pipeline":{"id":22341942,"iid":null,"project_id":6138686,"sha":"ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-20T22:47:29.845Z","updated_at":"2018-05-20T23:25:24.418Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22341942"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/69400001","artifacts":[{"file_type":"trace","size":950,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":69400000,"status":"failed","stage":"test","name":"ci-geocoq","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-20T22:47:30.923Z","started_at":"2018-05-20T23:20:07.447Z","finished_at":"2018-05-20T23:22:51.358Z","duration":163.911593,"queued_duration":0.287756,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6","short_id":"ec998bc8","created_at":"2018-05-21T00:45:56.000+02:00","parent_ids":["0df9653af438e47e9306a4c6a39bb933b3d582c3"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-21T00:45:56.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6"},"pipeline":{"id":22341942,"iid":null,"project_id":6138686,"sha":"ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-20T22:47:29.845Z","updated_at":"2018-05-20T23:25:24.418Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22341942"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/69400000","artifacts":[{"file_type":"trace","size":950,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":69399999,"status":"failed","stage":"test","name":"ci-formal-topology","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-20T22:47:30.891Z","started_at":"2018-05-20T23:20:07.712Z","finished_at":"2018-05-20T23:22:47.468Z","duration":159.756178,"queued_duration":0.206471,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6","short_id":"ec998bc8","created_at":"2018-05-21T00:45:56.000+02:00","parent_ids":["0df9653af438e47e9306a4c6a39bb933b3d582c3"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-21T00:45:56.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6"},"pipeline":{"id":22341942,"iid":null,"project_id":6138686,"sha":"ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-20T22:47:29.845Z","updated_at":"2018-05-20T23:25:24.418Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22341942"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/69399999","artifacts":[{"file_type":"trace","size":950,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":69399998,"status":"failed","stage":"test","name":"ci-flocq","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-20T22:47:30.854Z","started_at":"2018-05-20T23:20:08.211Z","finished_at":"2018-05-20T23:24:57.724Z","duration":289.513479,"queued_duration":0.45064,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6","short_id":"ec998bc8","created_at":"2018-05-21T00:45:56.000+02:00","parent_ids":["0df9653af438e47e9306a4c6a39bb933b3d582c3"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-21T00:45:56.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6"},"pipeline":{"id":22341942,"iid":null,"project_id":6138686,"sha":"ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-20T22:47:29.845Z","updated_at":"2018-05-20T23:25:24.418Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22341942"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/69399998","artifacts":[{"file_type":"trace","size":950,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":69399997,"status":"failed","stage":"test","name":"ci-fiat-parsers","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-20T22:47:30.826Z","started_at":"2018-05-20T23:20:08.482Z","finished_at":"2018-05-20T23:23:05.927Z","duration":177.444335,"queued_duration":0.560634,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6","short_id":"ec998bc8","created_at":"2018-05-21T00:45:56.000+02:00","parent_ids":["0df9653af438e47e9306a4c6a39bb933b3d582c3"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-21T00:45:56.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6"},"pipeline":{"id":22341942,"iid":null,"project_id":6138686,"sha":"ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-20T22:47:29.845Z","updated_at":"2018-05-20T23:25:24.418Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22341942"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/69399997","artifacts":[{"file_type":"trace","size":950,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":69399996,"status":"failed","stage":"test","name":"ci-fiat-crypto","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-20T22:47:30.800Z","started_at":"2018-05-20T23:20:08.658Z","finished_at":"2018-05-20T23:23:20.457Z","duration":191.799317,"queued_duration":0.419247,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6","short_id":"ec998bc8","created_at":"2018-05-21T00:45:56.000+02:00","parent_ids":["0df9653af438e47e9306a4c6a39bb933b3d582c3"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-21T00:45:56.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6"},"pipeline":{"id":22341942,"iid":null,"project_id":6138686,"sha":"ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-20T22:47:29.845Z","updated_at":"2018-05-20T23:25:24.418Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22341942"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/69399996","artifacts":[{"file_type":"trace","size":950,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":69399995,"status":"failed","stage":"test","name":"ci-fcsl-pcm","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-20T22:47:30.776Z","started_at":"2018-05-20T23:20:09.101Z","finished_at":"2018-05-20T23:22:52.724Z","duration":163.622748,"queued_duration":0.578923,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6","short_id":"ec998bc8","created_at":"2018-05-21T00:45:56.000+02:00","parent_ids":["0df9653af438e47e9306a4c6a39bb933b3d582c3"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-21T00:45:56.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6"},"pipeline":{"id":22341942,"iid":null,"project_id":6138686,"sha":"ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-20T22:47:29.845Z","updated_at":"2018-05-20T23:25:24.418Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22341942"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/69399995","artifacts":[{"file_type":"trace","size":950,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":69399994,"status":"failed","stage":"test","name":"ci-equations","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-20T22:47:30.748Z","started_at":"2018-05-20T23:20:08.989Z","finished_at":"2018-05-20T23:25:24.282Z","duration":315.292406,"queued_duration":0.315861,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6","short_id":"ec998bc8","created_at":"2018-05-21T00:45:56.000+02:00","parent_ids":["0df9653af438e47e9306a4c6a39bb933b3d582c3"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-21T00:45:56.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6"},"pipeline":{"id":22341942,"iid":null,"project_id":6138686,"sha":"ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-20T22:47:29.845Z","updated_at":"2018-05-20T23:25:24.418Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22341942"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/69399994","artifacts":[{"file_type":"trace","size":950,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":69399993,"status":"failed","stage":"test","name":"ci-elpi","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-20T22:47:30.721Z","started_at":"2018-05-20T23:20:09.472Z","finished_at":"2018-05-20T23:22:57.086Z","duration":167.614589,"queued_duration":0.501539,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6","short_id":"ec998bc8","created_at":"2018-05-21T00:45:56.000+02:00","parent_ids":["0df9653af438e47e9306a4c6a39bb933b3d582c3"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-21T00:45:56.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6"},"pipeline":{"id":22341942,"iid":null,"project_id":6138686,"sha":"ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-20T22:47:29.845Z","updated_at":"2018-05-20T23:25:24.418Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22341942"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/69399993","artifacts":[{"file_type":"trace","size":950,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":69399992,"status":"failed","stage":"test","name":"ci-cross-crypto","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-20T22:47:30.688Z","started_at":"2018-05-20T23:20:14.602Z","finished_at":"2018-05-20T23:23:09.028Z","duration":174.426009,"queued_duration":5.335565,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6","short_id":"ec998bc8","created_at":"2018-05-21T00:45:56.000+02:00","parent_ids":["0df9653af438e47e9306a4c6a39bb933b3d582c3"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-21T00:45:56.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6"},"pipeline":{"id":22341942,"iid":null,"project_id":6138686,"sha":"ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-20T22:47:29.845Z","updated_at":"2018-05-20T23:25:24.418Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22341942"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/69399992","artifacts":[{"file_type":"trace","size":950,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":69399991,"status":"failed","stage":"test","name":"ci-coquelicot","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-20T22:47:30.657Z","started_at":"2018-05-20T23:20:13.810Z","finished_at":"2018-05-20T23:23:03.597Z","duration":169.787771,"queued_duration":4.291859,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6","short_id":"ec998bc8","created_at":"2018-05-21T00:45:56.000+02:00","parent_ids":["0df9653af438e47e9306a4c6a39bb933b3d582c3"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-21T00:45:56.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6"},"pipeline":{"id":22341942,"iid":null,"project_id":6138686,"sha":"ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-20T22:47:29.845Z","updated_at":"2018-05-20T23:25:24.418Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22341942"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/69399991","artifacts":[{"file_type":"trace","size":950,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":69399990,"status":"failed","stage":"test","name":"ci-coq-dpdgraph","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-20T22:47:30.624Z","started_at":"2018-05-20T23:20:10.194Z","finished_at":"2018-05-20T23:22:53.558Z","duration":163.364736,"queued_duration":0.490213,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6","short_id":"ec998bc8","created_at":"2018-05-21T00:45:56.000+02:00","parent_ids":["0df9653af438e47e9306a4c6a39bb933b3d582c3"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-21T00:45:56.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6"},"pipeline":{"id":22341942,"iid":null,"project_id":6138686,"sha":"ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-20T22:47:29.845Z","updated_at":"2018-05-20T23:25:24.418Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22341942"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/69399990","artifacts":[{"file_type":"trace","size":950,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":69399989,"status":"failed","stage":"test","name":"ci-compcert","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-20T22:47:30.596Z","started_at":"2018-05-20T23:20:13.566Z","finished_at":"2018-05-20T23:23:20.730Z","duration":187.164219,"queued_duration":3.421702,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6","short_id":"ec998bc8","created_at":"2018-05-21T00:45:56.000+02:00","parent_ids":["0df9653af438e47e9306a4c6a39bb933b3d582c3"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-21T00:45:56.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6"},"pipeline":{"id":22341942,"iid":null,"project_id":6138686,"sha":"ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-20T22:47:29.845Z","updated_at":"2018-05-20T23:25:24.418Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22341942"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/69399989","artifacts":[{"file_type":"trace","size":950,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":69399988,"status":"failed","stage":"test","name":"ci-color","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-20T22:47:30.569Z","started_at":"2018-05-20T23:20:10.916Z","finished_at":"2018-05-20T23:23:15.543Z","duration":184.626975,"queued_duration":0.551431,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6","short_id":"ec998bc8","created_at":"2018-05-21T00:45:56.000+02:00","parent_ids":["0df9653af438e47e9306a4c6a39bb933b3d582c3"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-21T00:45:56.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6"},"pipeline":{"id":22341942,"iid":null,"project_id":6138686,"sha":"ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-20T22:47:29.845Z","updated_at":"2018-05-20T23:25:24.418Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22341942"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/69399988","artifacts":[{"file_type":"trace","size":950,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":69399987,"status":"failed","stage":"test","name":"ci-bignums","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-20T22:47:30.539Z","started_at":"2018-05-20T23:20:10.757Z","finished_at":"2018-05-20T23:23:00.034Z","duration":169.277456,"queued_duration":0.262027,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6","short_id":"ec998bc8","created_at":"2018-05-21T00:45:56.000+02:00","parent_ids":["0df9653af438e47e9306a4c6a39bb933b3d582c3"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-21T00:45:56.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6"},"pipeline":{"id":22341942,"iid":null,"project_id":6138686,"sha":"ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-20T22:47:29.845Z","updated_at":"2018-05-20T23:25:24.418Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22341942"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/69399987","artifacts":[{"file_type":"trace","size":950,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":69399986,"status":"failed","stage":"test","name":"validate:edge+flambda","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-20T22:47:30.444Z","started_at":"2018-05-20T23:20:12.143Z","finished_at":"2018-05-20T23:23:06.083Z","duration":173.940492,"queued_duration":1.546685,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6","short_id":"ec998bc8","created_at":"2018-05-21T00:45:56.000+02:00","parent_ids":["0df9653af438e47e9306a4c6a39bb933b3d582c3"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-21T00:45:56.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6"},"pipeline":{"id":22341942,"iid":null,"project_id":6138686,"sha":"ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-20T22:47:29.845Z","updated_at":"2018-05-20T23:25:24.418Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22341942"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/69399986","artifacts":[{"file_type":"trace","size":950,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":69399985,"status":"failed","stage":"test","name":"validate:edge","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-20T22:47:30.415Z","started_at":"2018-05-20T23:20:11.886Z","finished_at":"2018-05-20T23:23:00.027Z","duration":168.141382,"queued_duration":1.086388,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6","short_id":"ec998bc8","created_at":"2018-05-21T00:45:56.000+02:00","parent_ids":["0df9653af438e47e9306a4c6a39bb933b3d582c3"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-21T00:45:56.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6"},"pipeline":{"id":22341942,"iid":null,"project_id":6138686,"sha":"ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-20T22:47:29.845Z","updated_at":"2018-05-20T23:25:24.418Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22341942"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/69399985","artifacts":[{"file_type":"trace","size":950,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":69399984,"status":"failed","stage":"test","name":"validate:base+32bit","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-20T22:47:30.394Z","started_at":"2018-05-20T23:20:11.671Z","finished_at":"2018-05-20T23:23:16.326Z","duration":184.654535,"queued_duration":0.737641,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6","short_id":"ec998bc8","created_at":"2018-05-21T00:45:56.000+02:00","parent_ids":["0df9653af438e47e9306a4c6a39bb933b3d582c3"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-21T00:45:56.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6"},"pipeline":{"id":22341942,"iid":null,"project_id":6138686,"sha":"ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-20T22:47:29.845Z","updated_at":"2018-05-20T23:25:24.418Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22341942"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/69399984","artifacts":[{"file_type":"trace","size":950,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":69399983,"status":"failed","stage":"test","name":"validate:base","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-20T22:47:30.370Z","started_at":"2018-05-20T23:20:11.479Z","finished_at":"2018-05-20T23:23:21.090Z","duration":189.611049,"queued_duration":0.414622,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6","short_id":"ec998bc8","created_at":"2018-05-21T00:45:56.000+02:00","parent_ids":["0df9653af438e47e9306a4c6a39bb933b3d582c3"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-21T00:45:56.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6"},"pipeline":{"id":22341942,"iid":null,"project_id":6138686,"sha":"ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-20T22:47:29.845Z","updated_at":"2018-05-20T23:25:24.418Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22341942"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/69399983","artifacts":[{"file_type":"trace","size":950,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":69399981,"status":"failed","stage":"test","name":"test-suite:edge+flambda","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-20T22:47:30.343Z","started_at":"2018-05-20T23:20:11.498Z","finished_at":"2018-05-20T23:23:19.848Z","duration":188.349535,"queued_duration":0.245485,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6","short_id":"ec998bc8","created_at":"2018-05-21T00:45:56.000+02:00","parent_ids":["0df9653af438e47e9306a4c6a39bb933b3d582c3"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-21T00:45:56.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6"},"pipeline":{"id":22341942,"iid":null,"project_id":6138686,"sha":"ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-20T22:47:29.845Z","updated_at":"2018-05-20T23:25:24.418Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22341942"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/69399981","artifacts":[{"file_type":"trace","size":1265,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":69399980,"status":"failed","stage":"test","name":"test-suite:edge","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-20T22:47:30.317Z","started_at":"2018-05-20T23:20:11.898Z","finished_at":"2018-05-20T23:23:04.762Z","duration":172.863862,"queued_duration":0.411141,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6","short_id":"ec998bc8","created_at":"2018-05-21T00:45:56.000+02:00","parent_ids":["0df9653af438e47e9306a4c6a39bb933b3d582c3"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-21T00:45:56.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6"},"pipeline":{"id":22341942,"iid":null,"project_id":6138686,"sha":"ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-20T22:47:29.845Z","updated_at":"2018-05-20T23:25:24.418Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22341942"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/69399980","artifacts":[{"file_type":"trace","size":1265,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":69399979,"status":"failed","stage":"test","name":"test-suite:base+32bit","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-20T22:47:30.286Z","started_at":"2018-05-20T23:20:12.651Z","finished_at":"2018-05-20T23:23:34.047Z","duration":201.395751,"queued_duration":0.953226,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6","short_id":"ec998bc8","created_at":"2018-05-21T00:45:56.000+02:00","parent_ids":["0df9653af438e47e9306a4c6a39bb933b3d582c3"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-21T00:45:56.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6"},"pipeline":{"id":22341942,"iid":null,"project_id":6138686,"sha":"ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-20T22:47:29.845Z","updated_at":"2018-05-20T23:25:24.418Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22341942"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/69399979","artifacts":[{"file_type":"trace","size":1265,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":69399978,"status":"failed","stage":"test","name":"test-suite:base","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-20T22:47:30.255Z","started_at":"2018-05-20T23:20:12.355Z","finished_at":"2018-05-20T23:23:29.246Z","duration":196.890949,"queued_duration":0.314784,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6","short_id":"ec998bc8","created_at":"2018-05-21T00:45:56.000+02:00","parent_ids":["0df9653af438e47e9306a4c6a39bb933b3d582c3"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-21T00:45:56.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6"},"pipeline":{"id":22341942,"iid":null,"project_id":6138686,"sha":"ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-20T22:47:29.845Z","updated_at":"2018-05-20T23:25:24.418Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22341942"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/69399978","artifacts":[{"file_type":"trace","size":1265,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":69399977,"status":"failed","stage":"test","name":"warnings:edge","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-20T22:47:30.229Z","started_at":"2018-05-20T23:20:12.987Z","finished_at":"2018-05-20T23:23:21.346Z","duration":188.359726,"queued_duration":0.581706,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6","short_id":"ec998bc8","created_at":"2018-05-21T00:45:56.000+02:00","parent_ids":["0df9653af438e47e9306a4c6a39bb933b3d582c3"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-21T00:45:56.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6"},"pipeline":{"id":22341942,"iid":null,"project_id":6138686,"sha":"ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-20T22:47:29.845Z","updated_at":"2018-05-20T23:25:24.418Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22341942"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/69399977","artifacts":[{"file_type":"trace","size":950,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":69399976,"status":"failed","stage":"test","name":"warnings:base","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-20T22:47:30.203Z","started_at":"2018-05-20T23:20:13.247Z","finished_at":"2018-05-20T23:23:16.234Z","duration":182.987706,"queued_duration":0.486101,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6","short_id":"ec998bc8","created_at":"2018-05-21T00:45:56.000+02:00","parent_ids":["0df9653af438e47e9306a4c6a39bb933b3d582c3"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-21T00:45:56.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6"},"pipeline":{"id":22341942,"iid":null,"project_id":6138686,"sha":"ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-20T22:47:29.845Z","updated_at":"2018-05-20T23:25:24.418Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22341942"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/69399976","artifacts":[{"file_type":"trace","size":950,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":69399975,"status":"failed","stage":"test","name":"windows32","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-20T22:47:30.164Z","started_at":"2018-05-20T23:20:14.414Z","finished_at":"2018-05-20T23:20:17.752Z","duration":3.338163,"queued_duration":1.355186,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6","short_id":"ec998bc8","created_at":"2018-05-21T00:45:56.000+02:00","parent_ids":["0df9653af438e47e9306a4c6a39bb933b3d582c3"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-21T00:45:56.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6"},"pipeline":{"id":22341942,"iid":null,"project_id":6138686,"sha":"ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-20T22:47:29.845Z","updated_at":"2018-05-20T23:25:24.418Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22341942"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/69399975","artifacts":[{"file_type":"trace","size":700,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":["windows"]}
{"id":69399974,"status":"failed","stage":"test","name":"windows64","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-20T22:47:30.104Z","started_at":"2018-05-20T23:20:14.180Z","finished_at":"2018-05-20T23:20:19.106Z","duration":4.925989,"queued_duration":0.754028,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6","short_id":"ec998bc8","created_at":"2018-05-21T00:45:56.000+02:00","parent_ids":["0df9653af438e47e9306a4c6a39bb933b3d582c3"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-21T00:45:56.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6"},"pipeline":{"id":22341942,"iid":null,"project_id":6138686,"sha":"ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-20T22:47:29.845Z","updated_at":"2018-05-20T23:25:24.418Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22341942"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/69399974","artifacts":[{"file_type":"trace","size":1008,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":["windows"]}
{"id":69399973,"status":"success","stage":"build","name":"build:dune","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-20T22:47:30.059Z","started_at":"2018-05-20T22:47:35.160Z","finished_at":"2018-05-20T23:01:08.268Z","duration":813.107557,"queued_duration":3.761748,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6","short_id":"ec998bc8","created_at":"2018-05-21T00:45:56.000+02:00","parent_ids":["0df9653af438e47e9306a4c6a39bb933b3d582c3"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-21T00:45:56.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6"},"pipeline":{"id":22341942,"iid":null,"project_id":6138686,"sha":"ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-20T22:47:29.845Z","updated_at":"2018-05-20T23:25:24.418Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22341942"},"web_url":"https://gitlab.com/coq/coq/-/jobs/69399973","artifacts":[{"file_type":"trace","size":24744,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":69399972,"status":"success","stage":"build","name":"build:edge+flambda","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-20T22:47:30.035Z","started_at":"2018-05-20T22:47:34.704Z","finished_at":"2018-05-20T23:20:04.820Z","duration":1950.115705,"queued_duration":3.261554,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6","short_id":"ec998bc8","created_at":"2018-05-21T00:45:56.000+02:00","parent_ids":["0df9653af438e47e9306a4c6a39bb933b3d582c3"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-21T00:45:56.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6"},"pipeline":{"id":22341942,"iid":null,"project_id":6138686,"sha":"ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-20T22:47:29.845Z","updated_at":"2018-05-20T23:25:24.418Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22341942"},"web_url":"https://gitlab.com/coq/coq/-/jobs/69399972","artifacts":[{"file_type":"trace","size":339676,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2018-05-27T23:20:01.160Z","tag_list":[]}
{"id":69399971,"status":"success","stage":"build","name":"build:edge","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-20T22:47:29.966Z","started_at":"2018-05-20T22:47:34.424Z","finished_at":"2018-05-20T23:03:22.597Z","duration":948.1729,"queued_duration":2.944893,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6","short_id":"ec998bc8","created_at":"2018-05-21T00:45:56.000+02:00","parent_ids":["0df9653af438e47e9306a4c6a39bb933b3d582c3"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-21T00:45:56.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6"},"pipeline":{"id":22341942,"iid":null,"project_id":6138686,"sha":"ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-20T22:47:29.845Z","updated_at":"2018-05-20T23:25:24.418Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22341942"},"web_url":"https://gitlab.com/coq/coq/-/jobs/69399971","artifacts":[{"file_type":"trace","size":230807,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2018-05-27T23:03:18.215Z","tag_list":[]}
{"id":69399968,"status":"success","stage":"build","name":"build:base+32bit","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-20T22:47:29.895Z","started_at":"2018-05-20T22:47:33.217Z","finished_at":"2018-05-20T23:02:44.109Z","duration":910.89151,"queued_duration":1.702895,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6","short_id":"ec998bc8","created_at":"2018-05-21T00:45:56.000+02:00","parent_ids":["0df9653af438e47e9306a4c6a39bb933b3d582c3"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-21T00:45:56.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6"},"pipeline":{"id":22341942,"iid":null,"project_id":6138686,"sha":"ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-20T22:47:29.845Z","updated_at":"2018-05-20T23:25:24.418Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22341942"},"web_url":"https://gitlab.com/coq/coq/-/jobs/69399968","artifacts":[{"file_type":"trace","size":226593,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2018-05-27T23:02:42.943Z","tag_list":[]}
{"id":69399967,"status":"success","stage":"build","name":"build:base","ref":"pr-6857","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-05-20T22:47:29.861Z","started_at":"2018-05-20T22:47:32.818Z","finished_at":"2018-05-20T23:05:47.719Z","duration":1094.901601,"queued_duration":1.273074,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6","short_id":"ec998bc8","created_at":"2018-05-21T00:45:56.000+02:00","parent_ids":["0df9653af438e47e9306a4c6a39bb933b3d582c3"],"title":"[rfc] [build] Preliminary support for building with `dune`.","message":"[rfc] [build] Preliminary support for building with `dune`.\n\n[Dune](https://github.com/ocaml/dune) is a compositional declarative\nbuild system for OCaml. It provides several advantages such as\nautomatic generation of `version.ml`, `.merlin`, `META`, `opam`, API\ndocumentation, install management, easy integration with external\nlibraries, test runners, and modular builds.\n\nIn particular, Dune uniformly handles components regardless if they\nlive in or out-of-tree. This greatly simplifies cases where a plugin\n[or CoqIde] is check out in the current working copy but then\ndistributed separately [and vice-versa]. Dune can be, thus, used as a\nmore flexible `coq_makefile` replacement.\n\nTo build Coq with Dune type:\n```\nbash jb.sh\n```\n\n=== Implementation summary:\n\nIn Dune, each directory corresponds to a _library_; thus, we provide a\n`jbuild` library specification for each Coq source component. Dune\ndoesn't support custom rules, thus we provide a small helper script\n`tools/gen_libbuild.ml` that will scan the codebase and generate the\ncorresponding rules for `.v -> .vo` and `.ml4 -> .ml` builds. The\nscript depends on `coqdep` as to correctly output the dependencies of\n`.v` files.\n\nDune doesn't support dynamic rules, thus the build process goes as: 1)\nbuild `coqdep` with Dune; 2) generate `jbuild` files for `theories`\nand `plugins`; 3) all targets in scope, regular build.\n\n=== Status / TODO\n\nThe current PR provides support for building the full Coq distribution\nwith Dune, while keeping the current, make-based build system as a\nseparate option.\n\nThe patch depends on some minor changes to the codebase, mainly to\nadapt Coq's source code to Dune-specific module-packing method\nstructure and to avoid spurious dependencies.\n\nThe main TODO is to perform some refinement and cleanup on some common\nparts such as configure or `coqdep`. An itemized TODO:\n\n- Improve `configure` to better support `dune`, avoid soft link hacks,\n  implement silent mode for auto-conf.\n- Update / wait for dune new features\n- Better toplevel search path technology.\n- Tweak `Coq_config`, avoid so many dependencies.\n- Install target.\n- Doc target.\n- OPAM / META generation.\n\n== FAQ:\n\n=== Why Dune?\n\nCoq has a moderately complex build system and it is not a secret that\nmany developer-hours have been spent fighting with `make`.\n\nIn particular, the current `make`-based system does offer poor support\nto verify that the current build rules and variables are coherent, and\nrequires significant manual, error-prone. Many variables must be\npassed by hand, duplicated, etc... Additionally, our make system\noffers poor integration with now standard OCaml ecosystem tools such\nas OPAM, `ocamlfind` or odoc. Another critical point is build\ncompositionality. Coq is rich in 3rd party contributions, and a big\nshortcoming of the current make system is that it cannot be used to\nbuild these projects; requiring us to maintain a custom tool,\n`coq_makefile`, with the corresponding cost.\n\nIn the past, there are been some efforts to migrate Coq to more\nspecialized build systems, however these stalled due to a variety of\nreasons. Dune, is a declarative OCaml-specific build tool that has the\npotential to become the standard build system of the OCaml ecosystem.\n\nDune seems to address the needs of Coq has: well-supported, fast, and\ndesigned for large projects.\n\n=== What's new with Dune?\n\n- utop\n- install\n- easy packing => for example errors => cerrors\n- uses a better method than timestamps to detect dependencies\n- it avoids breaking of modularization by spurious forward references\n  as we do [often] today.\n- coqp5, a native-code customized camlp5 executable which brings much\n  faster ml4->ml processing.\n\n=== Does Dune replace the `make`-based build system?\n\nFor the moment the plan is for both systems to coexists. Dune uses a\nseparate build directory `_build` and doesn't interfere with the old\nin-tree build.\n\n=== What dependencies does Dune require?\n\nDune doesn't depend on any 3rd party package other than the OCaml compiler.\n\n=== Does Dune replace `coq_makefile`?\n\nDune can indeed be used to replace `coq_makefile`. See an example [here]().\n\n=== Why all the `.mli-> .ml` changes?\n\n`.mli`-only modules, \"without implementation\", are not properly\nsupported by the OCaml compiler. In particular, they cannot be\naliased/placed into a pack, which is a problem for large projects such\nas Coq.\n\n=== Bugs fixed [not marking them yet to avoid Github spam]:\n\n- 4857\n\n=== Benchmarks [not yet oranges-to-oranges but almost]:\n\n- `jbuild`:\n  real\t0m30,518s\n  user\t0m49,209s\n  sys\t0m10,937s\n\n- `make -j 4 bin/coqtop`:\n  real\t0m32,282s\n  user\t0m59,981s\n  sys\t0m14,499s\n\n=== Test battery\n\n- Check that `Drop.` works.\n- Check coqide + workers\n- Check that compilation works.\n","author_name":"Emilio Jesus Gallego Arias","author_email":"e+git@x80.org","authored_date":"2018-03-13T10:11:30.000+01:00","committer_name":"Emilio Jesus Gallego Arias","committer_email":"e+git@x80.org","committed_date":"2018-05-21T00:45:56.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6"},"pipeline":{"id":22341942,"iid":null,"project_id":6138686,"sha":"ec998bc86a5bdc9dd4d1bb6432dc9e64e241d3f6","ref":"pr-6857","status":"failed","source":"push","created_at":"2018-05-20T22:47:29.845Z","updated_at":"2018-05-20T23:25:24.418Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/22341942"},"web_url":"https://gitlab.com/coq/coq/-/jobs/69399967","artifacts":[{"file_type":"trace","size":282247,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2018-05-27T23:05:46.472Z","tag_list":[]}
