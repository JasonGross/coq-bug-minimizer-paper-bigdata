{"id":94840810,"status":"success","stage":"test","name":"test-suite:base","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-05T10:28:19.866Z","started_at":"2018-09-05T10:28:26.501Z","finished_at":"2018-09-05T10:40:47.147Z","duration":740.645806,"queued_duration":6.588377,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"fb1fc3dea9f87b5c03b54bc8816659a50db530e2","short_id":"fb1fc3de","created_at":"2018-09-05T11:45:13.000+02:00","parent_ids":["6d14f27dc75c68d9964755540ae795332eac3844"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-09-05T11:45:13.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/fb1fc3dea9f87b5c03b54bc8816659a50db530e2"},"pipeline":{"id":29448206,"iid":2945,"project_id":6138686,"sha":"fb1fc3dea9f87b5c03b54bc8816659a50db530e2","ref":"pr-6705","status":"success","source":"push","created_at":"2018-09-05T09:45:58.832Z","updated_at":"2018-09-05T12:05:31.394Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/29448206"},"web_url":"https://gitlab.com/coq/coq/-/jobs/94840810","artifacts":[{"file_type":"trace","size":64487,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":94838248,"status":"success","stage":"test","name":"ci-equations","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-05T10:21:40.744Z","started_at":"2018-09-05T10:22:02.855Z","finished_at":"2018-09-05T10:28:51.370Z","duration":408.515077,"queued_duration":22.080872,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"fb1fc3dea9f87b5c03b54bc8816659a50db530e2","short_id":"fb1fc3de","created_at":"2018-09-05T11:45:13.000+02:00","parent_ids":["6d14f27dc75c68d9964755540ae795332eac3844"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-09-05T11:45:13.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/fb1fc3dea9f87b5c03b54bc8816659a50db530e2"},"pipeline":{"id":29448206,"iid":2945,"project_id":6138686,"sha":"fb1fc3dea9f87b5c03b54bc8816659a50db530e2","ref":"pr-6705","status":"success","source":"push","created_at":"2018-09-05T09:45:58.832Z","updated_at":"2018-09-05T12:05:31.394Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/29448206"},"web_url":"https://gitlab.com/coq/coq/-/jobs/94838248","artifacts":[{"file_type":"trace","size":66869,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":94836849,"status":"success","stage":"test","name":"test-suite:edge+flambda","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-05T10:19:13.328Z","started_at":"2018-09-05T10:20:25.327Z","finished_at":"2018-09-05T10:33:11.853Z","duration":766.525639,"queued_duration":71.965699,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"fb1fc3dea9f87b5c03b54bc8816659a50db530e2","short_id":"fb1fc3de","created_at":"2018-09-05T11:45:13.000+02:00","parent_ids":["6d14f27dc75c68d9964755540ae795332eac3844"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-09-05T11:45:13.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/fb1fc3dea9f87b5c03b54bc8816659a50db530e2"},"pipeline":{"id":29448206,"iid":2945,"project_id":6138686,"sha":"fb1fc3dea9f87b5c03b54bc8816659a50db530e2","ref":"pr-6705","status":"success","source":"push","created_at":"2018-09-05T09:45:58.832Z","updated_at":"2018-09-05T12:05:31.394Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/29448206"},"web_url":"https://gitlab.com/coq/coq/-/jobs/94836849","artifacts":[{"file_type":"trace","size":64670,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":94824950,"status":"success","stage":"build","name":"build:edge","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-05T09:53:14.173Z","started_at":"2018-09-05T09:53:14.621Z","finished_at":"2018-09-05T10:11:01.141Z","duration":1066.52003,"queued_duration":0.405868,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"fb1fc3dea9f87b5c03b54bc8816659a50db530e2","short_id":"fb1fc3de","created_at":"2018-09-05T11:45:13.000+02:00","parent_ids":["6d14f27dc75c68d9964755540ae795332eac3844"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-09-05T11:45:13.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/fb1fc3dea9f87b5c03b54bc8816659a50db530e2"},"pipeline":{"id":29448206,"iid":2945,"project_id":6138686,"sha":"fb1fc3dea9f87b5c03b54bc8816659a50db530e2","ref":"pr-6705","status":"success","source":"push","created_at":"2018-09-05T09:45:58.832Z","updated_at":"2018-09-05T12:05:31.394Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/29448206"},"web_url":"https://gitlab.com/coq/coq/-/jobs/94824950","artifacts":[{"file_type":"trace","size":232266,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2018-09-12T10:10:49.735Z","tag_list":[]}
{"id":94822488,"status":"success","stage":"test","name":"ci-vst","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-05T09:45:59.837Z","started_at":"2018-09-05T10:13:00.021Z","finished_at":"2018-09-05T11:23:52.933Z","duration":4252.911975,"queued_duration":99.969952,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"fb1fc3dea9f87b5c03b54bc8816659a50db530e2","short_id":"fb1fc3de","created_at":"2018-09-05T11:45:13.000+02:00","parent_ids":["6d14f27dc75c68d9964755540ae795332eac3844"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-09-05T11:45:13.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/fb1fc3dea9f87b5c03b54bc8816659a50db530e2"},"pipeline":{"id":29448206,"iid":2945,"project_id":6138686,"sha":"fb1fc3dea9f87b5c03b54bc8816659a50db530e2","ref":"pr-6705","status":"success","source":"push","created_at":"2018-09-05T09:45:58.832Z","updated_at":"2018-09-05T12:05:31.394Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/29448206"},"web_url":"https://gitlab.com/coq/coq/-/jobs/94822488","artifacts":[{"file_type":"trace","size":210794,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":94822487,"status":"success","stage":"test","name":"ci-unimath","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-05T09:45:59.810Z","started_at":"2018-09-05T10:12:59.562Z","finished_at":"2018-09-05T10:40:58.572Z","duration":1679.009736,"queued_duration":99.081602,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"fb1fc3dea9f87b5c03b54bc8816659a50db530e2","short_id":"fb1fc3de","created_at":"2018-09-05T11:45:13.000+02:00","parent_ids":["6d14f27dc75c68d9964755540ae795332eac3844"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-09-05T11:45:13.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/fb1fc3dea9f87b5c03b54bc8816659a50db530e2"},"pipeline":{"id":29448206,"iid":2945,"project_id":6138686,"sha":"fb1fc3dea9f87b5c03b54bc8816659a50db530e2","ref":"pr-6705","status":"success","source":"push","created_at":"2018-09-05T09:45:58.832Z","updated_at":"2018-09-05T12:05:31.394Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/29448206"},"web_url":"https://gitlab.com/coq/coq/-/jobs/94822487","artifacts":[{"file_type":"trace","size":144210,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":94822486,"status":"success","stage":"test","name":"ci-sf","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-05T09:45:59.786Z","started_at":"2018-09-05T10:12:59.516Z","finished_at":"2018-09-05T10:20:24.843Z","duration":445.327111,"queued_duration":98.57138,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"fb1fc3dea9f87b5c03b54bc8816659a50db530e2","short_id":"fb1fc3de","created_at":"2018-09-05T11:45:13.000+02:00","parent_ids":["6d14f27dc75c68d9964755540ae795332eac3844"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-09-05T11:45:13.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/fb1fc3dea9f87b5c03b54bc8816659a50db530e2"},"pipeline":{"id":29448206,"iid":2945,"project_id":6138686,"sha":"fb1fc3dea9f87b5c03b54bc8816659a50db530e2","ref":"pr-6705","status":"success","source":"push","created_at":"2018-09-05T09:45:58.832Z","updated_at":"2018-09-05T12:05:31.394Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/29448206"},"web_url":"https://gitlab.com/coq/coq/-/jobs/94822486","artifacts":[{"file_type":"trace","size":265242,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":94822485,"status":"success","stage":"test","name":"ci-quickchick","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-05T09:45:59.761Z","started_at":"2018-09-05T10:12:58.288Z","finished_at":"2018-09-05T10:20:24.516Z","duration":446.228127,"queued_duration":96.965988,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"fb1fc3dea9f87b5c03b54bc8816659a50db530e2","short_id":"fb1fc3de","created_at":"2018-09-05T11:45:13.000+02:00","parent_ids":["6d14f27dc75c68d9964755540ae795332eac3844"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-09-05T11:45:13.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/fb1fc3dea9f87b5c03b54bc8816659a50db530e2"},"pipeline":{"id":29448206,"iid":2945,"project_id":6138686,"sha":"fb1fc3dea9f87b5c03b54bc8816659a50db530e2","ref":"pr-6705","status":"success","source":"push","created_at":"2018-09-05T09:45:58.832Z","updated_at":"2018-09-05T12:05:31.394Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/29448206"},"web_url":"https://gitlab.com/coq/coq/-/jobs/94822485","artifacts":[{"file_type":"trace","size":256956,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":94822484,"status":"success","stage":"test","name":"ci-pidetop","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-05T09:45:59.742Z","started_at":"2018-09-05T10:12:58.073Z","finished_at":"2018-09-05T10:17:17.211Z","duration":259.138028,"queued_duration":96.371532,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"fb1fc3dea9f87b5c03b54bc8816659a50db530e2","short_id":"fb1fc3de","created_at":"2018-09-05T11:45:13.000+02:00","parent_ids":["6d14f27dc75c68d9964755540ae795332eac3844"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-09-05T11:45:13.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/fb1fc3dea9f87b5c03b54bc8816659a50db530e2"},"pipeline":{"id":29448206,"iid":2945,"project_id":6138686,"sha":"fb1fc3dea9f87b5c03b54bc8816659a50db530e2","ref":"pr-6705","status":"success","source":"push","created_at":"2018-09-05T09:45:58.832Z","updated_at":"2018-09-05T12:05:31.394Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/29448206"},"web_url":"https://gitlab.com/coq/coq/-/jobs/94822484","artifacts":[{"file_type":"trace","size":26540,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":94822483,"status":"success","stage":"test","name":"ci-mtac2","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-05T09:45:59.717Z","started_at":"2018-09-05T10:12:57.142Z","finished_at":"2018-09-05T10:17:11.425Z","duration":254.282923,"queued_duration":94.939958,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"fb1fc3dea9f87b5c03b54bc8816659a50db530e2","short_id":"fb1fc3de","created_at":"2018-09-05T11:45:13.000+02:00","parent_ids":["6d14f27dc75c68d9964755540ae795332eac3844"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-09-05T11:45:13.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/fb1fc3dea9f87b5c03b54bc8816659a50db530e2"},"pipeline":{"id":29448206,"iid":2945,"project_id":6138686,"sha":"fb1fc3dea9f87b5c03b54bc8816659a50db530e2","ref":"pr-6705","status":"success","source":"push","created_at":"2018-09-05T09:45:58.832Z","updated_at":"2018-09-05T12:05:31.394Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/29448206"},"web_url":"https://gitlab.com/coq/coq/-/jobs/94822483","artifacts":[{"file_type":"trace","size":154118,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":94822482,"status":"success","stage":"test","name":"ci-math-comp","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-05T09:45:59.698Z","started_at":"2018-09-05T10:12:56.943Z","finished_at":"2018-09-05T11:03:14.408Z","duration":3017.464894,"queued_duration":94.329782,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"fb1fc3dea9f87b5c03b54bc8816659a50db530e2","short_id":"fb1fc3de","created_at":"2018-09-05T11:45:13.000+02:00","parent_ids":["6d14f27dc75c68d9964755540ae795332eac3844"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-09-05T11:45:13.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/fb1fc3dea9f87b5c03b54bc8816659a50db530e2"},"pipeline":{"id":29448206,"iid":2945,"project_id":6138686,"sha":"fb1fc3dea9f87b5c03b54bc8816659a50db530e2","ref":"pr-6705","status":"success","source":"push","created_at":"2018-09-05T09:45:58.832Z","updated_at":"2018-09-05T12:05:31.394Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/29448206"},"web_url":"https://gitlab.com/coq/coq/-/jobs/94822482","artifacts":[{"file_type":"trace","size":351907,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":94822481,"status":"success","stage":"test","name":"ci-ltac2","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-05T09:45:59.671Z","started_at":"2018-09-05T10:12:12.572Z","finished_at":"2018-09-05T10:17:13.394Z","duration":300.822191,"queued_duration":49.524532,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"fb1fc3dea9f87b5c03b54bc8816659a50db530e2","short_id":"fb1fc3de","created_at":"2018-09-05T11:45:13.000+02:00","parent_ids":["6d14f27dc75c68d9964755540ae795332eac3844"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-09-05T11:45:13.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/fb1fc3dea9f87b5c03b54bc8816659a50db530e2"},"pipeline":{"id":29448206,"iid":2945,"project_id":6138686,"sha":"fb1fc3dea9f87b5c03b54bc8816659a50db530e2","ref":"pr-6705","status":"success","source":"push","created_at":"2018-09-05T09:45:58.832Z","updated_at":"2018-09-05T12:05:31.394Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/29448206"},"web_url":"https://gitlab.com/coq/coq/-/jobs/94822481","artifacts":[{"file_type":"trace","size":37904,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":94822480,"status":"success","stage":"test","name":"ci-iris-lambda-rust","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-05T09:45:59.648Z","started_at":"2018-09-05T10:12:07.105Z","finished_at":"2018-09-05T11:20:44.080Z","duration":4116.974798,"queued_duration":43.553417,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"fb1fc3dea9f87b5c03b54bc8816659a50db530e2","short_id":"fb1fc3de","created_at":"2018-09-05T11:45:13.000+02:00","parent_ids":["6d14f27dc75c68d9964755540ae795332eac3844"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-09-05T11:45:13.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/fb1fc3dea9f87b5c03b54bc8816659a50db530e2"},"pipeline":{"id":29448206,"iid":2945,"project_id":6138686,"sha":"fb1fc3dea9f87b5c03b54bc8816659a50db530e2","ref":"pr-6705","status":"success","source":"push","created_at":"2018-09-05T09:45:58.832Z","updated_at":"2018-09-05T12:05:31.394Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/29448206"},"web_url":"https://gitlab.com/coq/coq/-/jobs/94822480","artifacts":[{"file_type":"trace","size":283165,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":94822478,"status":"success","stage":"test","name":"ci-hott","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-05T09:45:59.626Z","started_at":"2018-09-05T10:12:05.682Z","finished_at":"2018-09-05T10:26:49.566Z","duration":883.883939,"queued_duration":41.707569,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"fb1fc3dea9f87b5c03b54bc8816659a50db530e2","short_id":"fb1fc3de","created_at":"2018-09-05T11:45:13.000+02:00","parent_ids":["6d14f27dc75c68d9964755540ae795332eac3844"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-09-05T11:45:13.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/fb1fc3dea9f87b5c03b54bc8816659a50db530e2"},"pipeline":{"id":29448206,"iid":2945,"project_id":6138686,"sha":"fb1fc3dea9f87b5c03b54bc8816659a50db530e2","ref":"pr-6705","status":"success","source":"push","created_at":"2018-09-05T09:45:58.832Z","updated_at":"2018-09-05T12:05:31.394Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/29448206"},"web_url":"https://gitlab.com/coq/coq/-/jobs/94822478","artifacts":[{"file_type":"trace","size":87284,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":94822476,"status":"success","stage":"test","name":"ci-geocoq","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-05T09:45:59.604Z","started_at":"2018-09-05T10:12:05.553Z","finished_at":"2018-09-05T11:16:39.960Z","duration":3874.406829,"queued_duration":41.211235,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"fb1fc3dea9f87b5c03b54bc8816659a50db530e2","short_id":"fb1fc3de","created_at":"2018-09-05T11:45:13.000+02:00","parent_ids":["6d14f27dc75c68d9964755540ae795332eac3844"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-09-05T11:45:13.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/fb1fc3dea9f87b5c03b54bc8816659a50db530e2"},"pipeline":{"id":29448206,"iid":2945,"project_id":6138686,"sha":"fb1fc3dea9f87b5c03b54bc8816659a50db530e2","ref":"pr-6705","status":"success","source":"push","created_at":"2018-09-05T09:45:58.832Z","updated_at":"2018-09-05T12:05:31.394Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/29448206"},"web_url":"https://gitlab.com/coq/coq/-/jobs/94822476","artifacts":[{"file_type":"trace","size":330501,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":94822475,"status":"success","stage":"test","name":"ci-formal-topology","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-05T09:45:59.577Z","started_at":"2018-09-05T10:12:05.506Z","finished_at":"2018-09-05T10:52:07.712Z","duration":2402.205796,"queued_duration":40.839294,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"fb1fc3dea9f87b5c03b54bc8816659a50db530e2","short_id":"fb1fc3de","created_at":"2018-09-05T11:45:13.000+02:00","parent_ids":["6d14f27dc75c68d9964755540ae795332eac3844"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-09-05T11:45:13.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/fb1fc3dea9f87b5c03b54bc8816659a50db530e2"},"pipeline":{"id":29448206,"iid":2945,"project_id":6138686,"sha":"fb1fc3dea9f87b5c03b54bc8816659a50db530e2","ref":"pr-6705","status":"success","source":"push","created_at":"2018-09-05T09:45:58.832Z","updated_at":"2018-09-05T12:05:31.394Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/29448206"},"web_url":"https://gitlab.com/coq/coq/-/jobs/94822475","artifacts":[{"file_type":"trace","size":590129,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":94822474,"status":"success","stage":"test","name":"ci-flocq","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-05T09:45:59.545Z","started_at":"2018-09-05T10:12:03.181Z","finished_at":"2018-09-05T10:29:21.558Z","duration":1038.377746,"queued_duration":38.163498,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"fb1fc3dea9f87b5c03b54bc8816659a50db530e2","short_id":"fb1fc3de","created_at":"2018-09-05T11:45:13.000+02:00","parent_ids":["6d14f27dc75c68d9964755540ae795332eac3844"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-09-05T11:45:13.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/fb1fc3dea9f87b5c03b54bc8816659a50db530e2"},"pipeline":{"id":29448206,"iid":2945,"project_id":6138686,"sha":"fb1fc3dea9f87b5c03b54bc8816659a50db530e2","ref":"pr-6705","status":"success","source":"push","created_at":"2018-09-05T09:45:58.832Z","updated_at":"2018-09-05T12:05:31.394Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/29448206"},"web_url":"https://gitlab.com/coq/coq/-/jobs/94822474","artifacts":[{"file_type":"trace","size":617706,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":94822473,"status":"success","stage":"test","name":"ci-fiat-parsers","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-05T09:45:59.525Z","started_at":"2018-09-05T10:12:02.877Z","finished_at":"2018-09-05T10:35:43.547Z","duration":1420.670305,"queued_duration":37.54346,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"fb1fc3dea9f87b5c03b54bc8816659a50db530e2","short_id":"fb1fc3de","created_at":"2018-09-05T11:45:13.000+02:00","parent_ids":["6d14f27dc75c68d9964755540ae795332eac3844"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-09-05T11:45:13.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/fb1fc3dea9f87b5c03b54bc8816659a50db530e2"},"pipeline":{"id":29448206,"iid":2945,"project_id":6138686,"sha":"fb1fc3dea9f87b5c03b54bc8816659a50db530e2","ref":"pr-6705","status":"success","source":"push","created_at":"2018-09-05T09:45:58.832Z","updated_at":"2018-09-05T12:05:31.394Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/29448206"},"web_url":"https://gitlab.com/coq/coq/-/jobs/94822473","artifacts":[{"file_type":"trace","size":227557,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":94822472,"status":"success","stage":"test","name":"ci-fiat-crypto-legacy","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-05T09:45:59.504Z","started_at":"2018-09-05T10:12:02.438Z","finished_at":"2018-09-05T12:05:30.634Z","duration":6808.19599,"queued_duration":36.808881,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"fb1fc3dea9f87b5c03b54bc8816659a50db530e2","short_id":"fb1fc3de","created_at":"2018-09-05T11:45:13.000+02:00","parent_ids":["6d14f27dc75c68d9964755540ae795332eac3844"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-09-05T11:45:13.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/fb1fc3dea9f87b5c03b54bc8816659a50db530e2"},"pipeline":{"id":29448206,"iid":2945,"project_id":6138686,"sha":"fb1fc3dea9f87b5c03b54bc8816659a50db530e2","ref":"pr-6705","status":"success","source":"push","created_at":"2018-09-05T09:45:58.832Z","updated_at":"2018-09-05T12:05:31.394Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/29448206"},"web_url":"https://gitlab.com/coq/coq/-/jobs/94822472","artifacts":[{"file_type":"trace","size":638750,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":94822471,"status":"success","stage":"test","name":"ci-fiat-crypto","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-05T09:45:59.484Z","started_at":"2018-09-05T10:12:02.114Z","finished_at":"2018-09-05T10:53:07.188Z","duration":2465.073906,"queued_duration":36.177701,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"fb1fc3dea9f87b5c03b54bc8816659a50db530e2","short_id":"fb1fc3de","created_at":"2018-09-05T11:45:13.000+02:00","parent_ids":["6d14f27dc75c68d9964755540ae795332eac3844"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-09-05T11:45:13.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/fb1fc3dea9f87b5c03b54bc8816659a50db530e2"},"pipeline":{"id":29448206,"iid":2945,"project_id":6138686,"sha":"fb1fc3dea9f87b5c03b54bc8816659a50db530e2","ref":"pr-6705","status":"success","source":"push","created_at":"2018-09-05T09:45:58.832Z","updated_at":"2018-09-05T12:05:31.394Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/29448206"},"web_url":"https://gitlab.com/coq/coq/-/jobs/94822471","artifacts":[{"file_type":"trace","size":762005,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":94822470,"status":"success","stage":"test","name":"ci-fcsl-pcm","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-05T09:45:59.464Z","started_at":"2018-09-05T10:12:01.640Z","finished_at":"2018-09-05T10:18:33.492Z","duration":391.852561,"queued_duration":35.381565,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"fb1fc3dea9f87b5c03b54bc8816659a50db530e2","short_id":"fb1fc3de","created_at":"2018-09-05T11:45:13.000+02:00","parent_ids":["6d14f27dc75c68d9964755540ae795332eac3844"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-09-05T11:45:13.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/fb1fc3dea9f87b5c03b54bc8816659a50db530e2"},"pipeline":{"id":29448206,"iid":2945,"project_id":6138686,"sha":"fb1fc3dea9f87b5c03b54bc8816659a50db530e2","ref":"pr-6705","status":"success","source":"push","created_at":"2018-09-05T09:45:58.832Z","updated_at":"2018-09-05T12:05:31.394Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/29448206"},"web_url":"https://gitlab.com/coq/coq/-/jobs/94822470","artifacts":[{"file_type":"trace","size":128786,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":94822468,"status":"success","stage":"test","name":"ci-elpi","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-05T09:45:59.422Z","started_at":"2018-09-05T10:11:59.947Z","finished_at":"2018-09-05T10:18:21.931Z","duration":381.983995,"queued_duration":33.055102,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"fb1fc3dea9f87b5c03b54bc8816659a50db530e2","short_id":"fb1fc3de","created_at":"2018-09-05T11:45:13.000+02:00","parent_ids":["6d14f27dc75c68d9964755540ae795332eac3844"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-09-05T11:45:13.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/fb1fc3dea9f87b5c03b54bc8816659a50db530e2"},"pipeline":{"id":29448206,"iid":2945,"project_id":6138686,"sha":"fb1fc3dea9f87b5c03b54bc8816659a50db530e2","ref":"pr-6705","status":"success","source":"push","created_at":"2018-09-05T09:45:58.832Z","updated_at":"2018-09-05T12:05:31.394Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/29448206"},"web_url":"https://gitlab.com/coq/coq/-/jobs/94822468","artifacts":[{"file_type":"trace","size":463984,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":94822467,"status":"success","stage":"test","name":"ci-cross-crypto","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-05T09:45:59.397Z","started_at":"2018-09-05T10:11:58.952Z","finished_at":"2018-09-05T10:51:26.488Z","duration":2367.535952,"queued_duration":31.687996,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"fb1fc3dea9f87b5c03b54bc8816659a50db530e2","short_id":"fb1fc3de","created_at":"2018-09-05T11:45:13.000+02:00","parent_ids":["6d14f27dc75c68d9964755540ae795332eac3844"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-09-05T11:45:13.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/fb1fc3dea9f87b5c03b54bc8816659a50db530e2"},"pipeline":{"id":29448206,"iid":2945,"project_id":6138686,"sha":"fb1fc3dea9f87b5c03b54bc8816659a50db530e2","ref":"pr-6705","status":"success","source":"push","created_at":"2018-09-05T09:45:58.832Z","updated_at":"2018-09-05T12:05:31.394Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/29448206"},"web_url":"https://gitlab.com/coq/coq/-/jobs/94822467","artifacts":[{"file_type":"trace","size":68565,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":94822466,"status":"success","stage":"test","name":"ci-coquelicot","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-05T09:45:59.377Z","started_at":"2018-09-05T10:11:58.119Z","finished_at":"2018-09-05T10:18:50.840Z","duration":412.720988,"queued_duration":30.566946,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"fb1fc3dea9f87b5c03b54bc8816659a50db530e2","short_id":"fb1fc3de","created_at":"2018-09-05T11:45:13.000+02:00","parent_ids":["6d14f27dc75c68d9964755540ae795332eac3844"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-09-05T11:45:13.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/fb1fc3dea9f87b5c03b54bc8816659a50db530e2"},"pipeline":{"id":29448206,"iid":2945,"project_id":6138686,"sha":"fb1fc3dea9f87b5c03b54bc8816659a50db530e2","ref":"pr-6705","status":"success","source":"push","created_at":"2018-09-05T09:45:58.832Z","updated_at":"2018-09-05T12:05:31.394Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/29448206"},"web_url":"https://gitlab.com/coq/coq/-/jobs/94822466","artifacts":[{"file_type":"trace","size":130112,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":94822465,"status":"success","stage":"test","name":"ci-coq-dpdgraph","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-05T09:45:59.357Z","started_at":"2018-09-05T10:11:57.936Z","finished_at":"2018-09-05T10:16:52.046Z","duration":294.109183,"queued_duration":30.102087,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"fb1fc3dea9f87b5c03b54bc8816659a50db530e2","short_id":"fb1fc3de","created_at":"2018-09-05T11:45:13.000+02:00","parent_ids":["6d14f27dc75c68d9964755540ae795332eac3844"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-09-05T11:45:13.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/fb1fc3dea9f87b5c03b54bc8816659a50db530e2"},"pipeline":{"id":29448206,"iid":2945,"project_id":6138686,"sha":"fb1fc3dea9f87b5c03b54bc8816659a50db530e2","ref":"pr-6705","status":"success","source":"push","created_at":"2018-09-05T09:45:58.832Z","updated_at":"2018-09-05T12:05:31.394Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/29448206"},"web_url":"https://gitlab.com/coq/coq/-/jobs/94822465","artifacts":[{"file_type":"trace","size":37392,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":94822464,"status":"success","stage":"test","name":"ci-compcert","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-05T09:45:59.327Z","started_at":"2018-09-05T10:11:56.193Z","finished_at":"2018-09-05T10:40:58.372Z","duration":1742.178784,"queued_duration":27.989628,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"fb1fc3dea9f87b5c03b54bc8816659a50db530e2","short_id":"fb1fc3de","created_at":"2018-09-05T11:45:13.000+02:00","parent_ids":["6d14f27dc75c68d9964755540ae795332eac3844"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-09-05T11:45:13.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/fb1fc3dea9f87b5c03b54bc8816659a50db530e2"},"pipeline":{"id":29448206,"iid":2945,"project_id":6138686,"sha":"fb1fc3dea9f87b5c03b54bc8816659a50db530e2","ref":"pr-6705","status":"success","source":"push","created_at":"2018-09-05T09:45:58.832Z","updated_at":"2018-09-05T12:05:31.394Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/29448206"},"web_url":"https://gitlab.com/coq/coq/-/jobs/94822464","artifacts":[{"file_type":"trace","size":2033643,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":94822463,"status":"success","stage":"test","name":"ci-color","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-05T09:45:59.301Z","started_at":"2018-09-05T10:11:55.286Z","finished_at":"2018-09-05T10:34:48.863Z","duration":1373.576391,"queued_duration":26.878043,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"fb1fc3dea9f87b5c03b54bc8816659a50db530e2","short_id":"fb1fc3de","created_at":"2018-09-05T11:45:13.000+02:00","parent_ids":["6d14f27dc75c68d9964755540ae795332eac3844"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-09-05T11:45:13.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/fb1fc3dea9f87b5c03b54bc8816659a50db530e2"},"pipeline":{"id":29448206,"iid":2945,"project_id":6138686,"sha":"fb1fc3dea9f87b5c03b54bc8816659a50db530e2","ref":"pr-6705","status":"success","source":"push","created_at":"2018-09-05T09:45:58.832Z","updated_at":"2018-09-05T12:05:31.394Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/29448206"},"web_url":"https://gitlab.com/coq/coq/-/jobs/94822463","artifacts":[{"file_type":"trace","size":195037,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":94822462,"status":"success","stage":"test","name":"ci-bignums","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-05T09:45:59.270Z","started_at":"2018-09-05T10:11:55.172Z","finished_at":"2018-09-05T10:18:06.055Z","duration":370.882345,"queued_duration":26.592316,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"fb1fc3dea9f87b5c03b54bc8816659a50db530e2","short_id":"fb1fc3de","created_at":"2018-09-05T11:45:13.000+02:00","parent_ids":["6d14f27dc75c68d9964755540ae795332eac3844"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-09-05T11:45:13.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/fb1fc3dea9f87b5c03b54bc8816659a50db530e2"},"pipeline":{"id":29448206,"iid":2945,"project_id":6138686,"sha":"fb1fc3dea9f87b5c03b54bc8816659a50db530e2","ref":"pr-6705","status":"success","source":"push","created_at":"2018-09-05T09:45:58.832Z","updated_at":"2018-09-05T12:05:31.394Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/29448206"},"web_url":"https://gitlab.com/coq/coq/-/jobs/94822462","artifacts":[{"file_type":"trace","size":38257,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":94822461,"status":"success","stage":"test","name":"ci-bedrock2","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-05T09:45:59.246Z","started_at":"2018-09-05T10:11:55.063Z","finished_at":"2018-09-05T10:35:00.560Z","duration":1385.496887,"queued_duration":26.322891,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"fb1fc3dea9f87b5c03b54bc8816659a50db530e2","short_id":"fb1fc3de","created_at":"2018-09-05T11:45:13.000+02:00","parent_ids":["6d14f27dc75c68d9964755540ae795332eac3844"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-09-05T11:45:13.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/fb1fc3dea9f87b5c03b54bc8816659a50db530e2"},"pipeline":{"id":29448206,"iid":2945,"project_id":6138686,"sha":"fb1fc3dea9f87b5c03b54bc8816659a50db530e2","ref":"pr-6705","status":"success","source":"push","created_at":"2018-09-05T09:45:58.832Z","updated_at":"2018-09-05T12:05:31.394Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/29448206"},"web_url":"https://gitlab.com/coq/coq/-/jobs/94822461","artifacts":[{"file_type":"trace","size":93634,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":94822460,"status":"success","stage":"test","name":"validate:edge+flambda","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-05T09:45:59.215Z","started_at":"2018-09-05T10:11:49.404Z","finished_at":"2018-09-05T10:21:53.316Z","duration":603.911527,"queued_duration":20.446473,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"fb1fc3dea9f87b5c03b54bc8816659a50db530e2","short_id":"fb1fc3de","created_at":"2018-09-05T11:45:13.000+02:00","parent_ids":["6d14f27dc75c68d9964755540ae795332eac3844"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-09-05T11:45:13.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/fb1fc3dea9f87b5c03b54bc8816659a50db530e2"},"pipeline":{"id":29448206,"iid":2945,"project_id":6138686,"sha":"fb1fc3dea9f87b5c03b54bc8816659a50db530e2","ref":"pr-6705","status":"success","source":"push","created_at":"2018-09-05T09:45:58.832Z","updated_at":"2018-09-05T12:05:31.394Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/29448206"},"web_url":"https://gitlab.com/coq/coq/-/jobs/94822460","artifacts":[{"file_type":"trace","size":20124,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":94822459,"status":"success","stage":"test","name":"validate:edge","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-05T09:45:59.194Z","started_at":"2018-09-05T10:11:48.541Z","finished_at":"2018-09-05T10:21:47.557Z","duration":599.015989,"queued_duration":19.370377,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"fb1fc3dea9f87b5c03b54bc8816659a50db530e2","short_id":"fb1fc3de","created_at":"2018-09-05T11:45:13.000+02:00","parent_ids":["6d14f27dc75c68d9964755540ae795332eac3844"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-09-05T11:45:13.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/fb1fc3dea9f87b5c03b54bc8816659a50db530e2"},"pipeline":{"id":29448206,"iid":2945,"project_id":6138686,"sha":"fb1fc3dea9f87b5c03b54bc8816659a50db530e2","ref":"pr-6705","status":"success","source":"push","created_at":"2018-09-05T09:45:58.832Z","updated_at":"2018-09-05T12:05:31.394Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/29448206"},"web_url":"https://gitlab.com/coq/coq/-/jobs/94822459","artifacts":[{"file_type":"trace","size":18967,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":94822457,"status":"success","stage":"test","name":"validate:base+32bit","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-05T09:45:59.173Z","started_at":"2018-09-05T10:11:46.874Z","finished_at":"2018-09-05T10:20:09.819Z","duration":502.944978,"queued_duration":17.447905,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"fb1fc3dea9f87b5c03b54bc8816659a50db530e2","short_id":"fb1fc3de","created_at":"2018-09-05T11:45:13.000+02:00","parent_ids":["6d14f27dc75c68d9964755540ae795332eac3844"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-09-05T11:45:13.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/fb1fc3dea9f87b5c03b54bc8816659a50db530e2"},"pipeline":{"id":29448206,"iid":2945,"project_id":6138686,"sha":"fb1fc3dea9f87b5c03b54bc8816659a50db530e2","ref":"pr-6705","status":"success","source":"push","created_at":"2018-09-05T09:45:58.832Z","updated_at":"2018-09-05T12:05:31.394Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/29448206"},"web_url":"https://gitlab.com/coq/coq/-/jobs/94822457","artifacts":[{"file_type":"trace","size":19028,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":94822456,"status":"success","stage":"test","name":"validate:base","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-05T09:45:59.150Z","started_at":"2018-09-05T10:11:46.743Z","finished_at":"2018-09-05T10:22:01.867Z","duration":615.124331,"queued_duration":17.058912,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"fb1fc3dea9f87b5c03b54bc8816659a50db530e2","short_id":"fb1fc3de","created_at":"2018-09-05T11:45:13.000+02:00","parent_ids":["6d14f27dc75c68d9964755540ae795332eac3844"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-09-05T11:45:13.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/fb1fc3dea9f87b5c03b54bc8816659a50db530e2"},"pipeline":{"id":29448206,"iid":2945,"project_id":6138686,"sha":"fb1fc3dea9f87b5c03b54bc8816659a50db530e2","ref":"pr-6705","status":"success","source":"push","created_at":"2018-09-05T09:45:58.832Z","updated_at":"2018-09-05T12:05:31.394Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/29448206"},"web_url":"https://gitlab.com/coq/coq/-/jobs/94822456","artifacts":[{"file_type":"trace","size":20883,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":94822454,"status":"success","stage":"test","name":"test-suite:edge","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-05T09:45:59.095Z","started_at":"2018-09-05T10:11:46.109Z","finished_at":"2018-09-05T10:23:27.093Z","duration":700.983855,"queued_duration":16.098665,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"fb1fc3dea9f87b5c03b54bc8816659a50db530e2","short_id":"fb1fc3de","created_at":"2018-09-05T11:45:13.000+02:00","parent_ids":["6d14f27dc75c68d9964755540ae795332eac3844"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-09-05T11:45:13.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/fb1fc3dea9f87b5c03b54bc8816659a50db530e2"},"pipeline":{"id":29448206,"iid":2945,"project_id":6138686,"sha":"fb1fc3dea9f87b5c03b54bc8816659a50db530e2","ref":"pr-6705","status":"success","source":"push","created_at":"2018-09-05T09:45:58.832Z","updated_at":"2018-09-05T12:05:31.394Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/29448206"},"web_url":"https://gitlab.com/coq/coq/-/jobs/94822454","artifacts":[{"file_type":"trace","size":63576,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":94822453,"status":"success","stage":"test","name":"test-suite:base+32bit","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-05T09:45:59.074Z","started_at":"2018-09-05T10:11:44.648Z","finished_at":"2018-09-05T10:24:08.574Z","duration":743.925512,"queued_duration":14.364704,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"fb1fc3dea9f87b5c03b54bc8816659a50db530e2","short_id":"fb1fc3de","created_at":"2018-09-05T11:45:13.000+02:00","parent_ids":["6d14f27dc75c68d9964755540ae795332eac3844"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-09-05T11:45:13.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/fb1fc3dea9f87b5c03b54bc8816659a50db530e2"},"pipeline":{"id":29448206,"iid":2945,"project_id":6138686,"sha":"fb1fc3dea9f87b5c03b54bc8816659a50db530e2","ref":"pr-6705","status":"success","source":"push","created_at":"2018-09-05T09:45:58.832Z","updated_at":"2018-09-05T12:05:31.394Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/29448206"},"web_url":"https://gitlab.com/coq/coq/-/jobs/94822453","artifacts":[{"file_type":"trace","size":63574,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":94822451,"status":"success","stage":"test","name":"doc:ml-api","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-05T09:45:59.031Z","started_at":"2018-09-05T10:11:42.008Z","finished_at":"2018-09-05T10:15:57.920Z","duration":255.912383,"queued_duration":11.611454,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"fb1fc3dea9f87b5c03b54bc8816659a50db530e2","short_id":"fb1fc3de","created_at":"2018-09-05T11:45:13.000+02:00","parent_ids":["6d14f27dc75c68d9964755540ae795332eac3844"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-09-05T11:45:13.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/fb1fc3dea9f87b5c03b54bc8816659a50db530e2"},"pipeline":{"id":29448206,"iid":2945,"project_id":6138686,"sha":"fb1fc3dea9f87b5c03b54bc8816659a50db530e2","ref":"pr-6705","status":"success","source":"push","created_at":"2018-09-05T09:45:58.832Z","updated_at":"2018-09-05T12:05:31.394Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/29448206"},"web_url":"https://gitlab.com/coq/coq/-/jobs/94822451","artifacts":[{"file_type":"trace","size":85450,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":94822450,"status":"success","stage":"test","name":"doc:refman","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-05T09:45:59.011Z","started_at":"2018-09-05T10:11:41.788Z","finished_at":"2018-09-05T10:18:33.953Z","duration":412.165058,"queued_duration":11.360079,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"fb1fc3dea9f87b5c03b54bc8816659a50db530e2","short_id":"fb1fc3de","created_at":"2018-09-05T11:45:13.000+02:00","parent_ids":["6d14f27dc75c68d9964755540ae795332eac3844"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-09-05T11:45:13.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/fb1fc3dea9f87b5c03b54bc8816659a50db530e2"},"pipeline":{"id":29448206,"iid":2945,"project_id":6138686,"sha":"fb1fc3dea9f87b5c03b54bc8816659a50db530e2","ref":"pr-6705","status":"success","source":"push","created_at":"2018-09-05T09:45:58.832Z","updated_at":"2018-09-05T12:05:31.394Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/29448206"},"web_url":"https://gitlab.com/coq/coq/-/jobs/94822450","artifacts":[{"file_type":"trace","size":26986,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":94822449,"status":"success","stage":"test","name":"pkg:nix","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-05T09:45:58.988Z","started_at":"2018-09-05T10:11:32.210Z","finished_at":"2018-09-05T10:45:21.596Z","duration":2029.385694,"queued_duration":1.738082,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"fb1fc3dea9f87b5c03b54bc8816659a50db530e2","short_id":"fb1fc3de","created_at":"2018-09-05T11:45:13.000+02:00","parent_ids":["6d14f27dc75c68d9964755540ae795332eac3844"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-09-05T11:45:13.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/fb1fc3dea9f87b5c03b54bc8816659a50db530e2"},"pipeline":{"id":29448206,"iid":2945,"project_id":6138686,"sha":"fb1fc3dea9f87b5c03b54bc8816659a50db530e2","ref":"pr-6705","status":"success","source":"push","created_at":"2018-09-05T09:45:58.832Z","updated_at":"2018-09-05T12:05:31.394Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/29448206"},"web_url":"https://gitlab.com/coq/coq/-/jobs/94822449","artifacts":[{"file_type":"trace","size":471283,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":94822448,"status":"success","stage":"test","name":"windows64","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-05T09:45:58.962Z","started_at":"2018-09-05T10:11:31.019Z","finished_at":"2018-09-05T11:29:38.304Z","duration":4687.28507,"queued_duration":0.477037,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"fb1fc3dea9f87b5c03b54bc8816659a50db530e2","short_id":"fb1fc3de","created_at":"2018-09-05T11:45:13.000+02:00","parent_ids":["6d14f27dc75c68d9964755540ae795332eac3844"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-09-05T11:45:13.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/fb1fc3dea9f87b5c03b54bc8816659a50db530e2"},"pipeline":{"id":29448206,"iid":2945,"project_id":6138686,"sha":"fb1fc3dea9f87b5c03b54bc8816659a50db530e2","ref":"pr-6705","status":"success","source":"push","created_at":"2018-09-05T09:45:58.832Z","updated_at":"2018-09-05T12:05:31.394Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/29448206"},"web_url":"https://gitlab.com/coq/coq/-/jobs/94822448","artifacts":[{"file_type":"trace","size":3878289,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":"2018-09-12T11:28:48.145Z","tag_list":["windows"]}
{"id":94822447,"status":"success","stage":"build","name":"build:edge+flambda","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-05T09:45:58.924Z","started_at":"2018-09-05T09:46:02.538Z","finished_at":"2018-09-05T10:11:19.180Z","duration":1516.642332,"queued_duration":2.527047,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"fb1fc3dea9f87b5c03b54bc8816659a50db530e2","short_id":"fb1fc3de","created_at":"2018-09-05T11:45:13.000+02:00","parent_ids":["6d14f27dc75c68d9964755540ae795332eac3844"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-09-05T11:45:13.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/fb1fc3dea9f87b5c03b54bc8816659a50db530e2"},"pipeline":{"id":29448206,"iid":2945,"project_id":6138686,"sha":"fb1fc3dea9f87b5c03b54bc8816659a50db530e2","ref":"pr-6705","status":"success","source":"push","created_at":"2018-09-05T09:45:58.832Z","updated_at":"2018-09-05T12:05:31.394Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/29448206"},"web_url":"https://gitlab.com/coq/coq/-/jobs/94822447","artifacts":[{"file_type":"trace","size":233554,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2018-09-12T10:11:06.065Z","tag_list":[]}
{"id":94822445,"status":"success","stage":"build","name":"build:base+32bit","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-05T09:45:58.874Z","started_at":"2018-09-05T09:46:02.326Z","finished_at":"2018-09-05T10:00:01.449Z","duration":839.123015,"queued_duration":2.264081,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"fb1fc3dea9f87b5c03b54bc8816659a50db530e2","short_id":"fb1fc3de","created_at":"2018-09-05T11:45:13.000+02:00","parent_ids":["6d14f27dc75c68d9964755540ae795332eac3844"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-09-05T11:45:13.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/fb1fc3dea9f87b5c03b54bc8816659a50db530e2"},"pipeline":{"id":29448206,"iid":2945,"project_id":6138686,"sha":"fb1fc3dea9f87b5c03b54bc8816659a50db530e2","ref":"pr-6705","status":"success","source":"push","created_at":"2018-09-05T09:45:58.832Z","updated_at":"2018-09-05T12:05:31.394Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/29448206"},"web_url":"https://gitlab.com/coq/coq/-/jobs/94822445","artifacts":[{"file_type":"trace","size":228116,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2018-09-12T09:59:45.499Z","tag_list":[]}
{"id":94822444,"status":"success","stage":"build","name":"build:base","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-09-05T09:45:58.846Z","started_at":"2018-09-05T09:46:00.834Z","finished_at":"2018-09-05T10:04:48.627Z","duration":1127.793091,"queued_duration":0.74517,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"fb1fc3dea9f87b5c03b54bc8816659a50db530e2","short_id":"fb1fc3de","created_at":"2018-09-05T11:45:13.000+02:00","parent_ids":["6d14f27dc75c68d9964755540ae795332eac3844"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-09-05T11:45:13.000+02:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/fb1fc3dea9f87b5c03b54bc8816659a50db530e2"},"pipeline":{"id":29448206,"iid":2945,"project_id":6138686,"sha":"fb1fc3dea9f87b5c03b54bc8816659a50db530e2","ref":"pr-6705","status":"success","source":"push","created_at":"2018-09-05T09:45:58.832Z","updated_at":"2018-09-05T12:05:31.394Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/29448206"},"web_url":"https://gitlab.com/coq/coq/-/jobs/94822444","artifacts":[{"file_type":"trace","size":279319,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2018-09-12T10:04:33.554Z","tag_list":[]}
