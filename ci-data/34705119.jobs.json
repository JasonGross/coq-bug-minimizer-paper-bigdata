{"id":113973240,"status":"failed","stage":"test","name":"validate:base","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-10-29T16:11:47.765Z","started_at":"2018-10-29T16:11:48.212Z","finished_at":"2018-10-29T16:14:42.209Z","duration":173.997047,"queued_duration":0.424755,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"05ce23b3ab073468e9a9ca0e7e42099858d185ba","short_id":"05ce23b3","created_at":"2018-10-29T16:41:18.000+01:00","parent_ids":["765c61d42e301c1f98c44b3986d73a052ca3a8c5"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-10-29T16:41:18.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/05ce23b3ab073468e9a9ca0e7e42099858d185ba"},"pipeline":{"id":34705119,"iid":4750,"project_id":6138686,"sha":"05ce23b3ab073468e9a9ca0e7e42099858d185ba","ref":"pr-6705","status":"failed","source":"push","created_at":"2018-10-29T15:41:39.042Z","updated_at":"2018-10-29T16:53:56.056Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/34705119"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/113973240","artifacts":[{"file_type":"trace","size":1058,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":113954961,"status":"failed","stage":"test","name":"ci-vst","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-10-29T15:41:40.344Z","started_at":"2018-10-29T16:08:31.274Z","finished_at":"2018-10-29T16:11:09.093Z","duration":157.819142,"queued_duration":9.469477,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"05ce23b3ab073468e9a9ca0e7e42099858d185ba","short_id":"05ce23b3","created_at":"2018-10-29T16:41:18.000+01:00","parent_ids":["765c61d42e301c1f98c44b3986d73a052ca3a8c5"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-10-29T16:41:18.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/05ce23b3ab073468e9a9ca0e7e42099858d185ba"},"pipeline":{"id":34705119,"iid":4750,"project_id":6138686,"sha":"05ce23b3ab073468e9a9ca0e7e42099858d185ba","ref":"pr-6705","status":"failed","source":"push","created_at":"2018-10-29T15:41:39.042Z","updated_at":"2018-10-29T16:53:56.056Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/34705119"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/113954961","artifacts":[{"file_type":"trace","size":1058,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":113954960,"status":"failed","stage":"test","name":"ci-unimath","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-10-29T15:41:40.314Z","started_at":"2018-10-29T16:08:30.527Z","finished_at":"2018-10-29T16:11:12.045Z","duration":161.517975,"queued_duration":8.510844,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"05ce23b3ab073468e9a9ca0e7e42099858d185ba","short_id":"05ce23b3","created_at":"2018-10-29T16:41:18.000+01:00","parent_ids":["765c61d42e301c1f98c44b3986d73a052ca3a8c5"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-10-29T16:41:18.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/05ce23b3ab073468e9a9ca0e7e42099858d185ba"},"pipeline":{"id":34705119,"iid":4750,"project_id":6138686,"sha":"05ce23b3ab073468e9a9ca0e7e42099858d185ba","ref":"pr-6705","status":"failed","source":"push","created_at":"2018-10-29T15:41:39.042Z","updated_at":"2018-10-29T16:53:56.056Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/34705119"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/113954960","artifacts":[{"file_type":"trace","size":1058,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":113954959,"status":"failed","stage":"test","name":"ci-sf","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-10-29T15:41:40.284Z","started_at":"2018-10-29T16:08:30.480Z","finished_at":"2018-10-29T16:11:10.783Z","duration":160.302936,"queued_duration":8.369249,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"05ce23b3ab073468e9a9ca0e7e42099858d185ba","short_id":"05ce23b3","created_at":"2018-10-29T16:41:18.000+01:00","parent_ids":["765c61d42e301c1f98c44b3986d73a052ca3a8c5"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-10-29T16:41:18.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/05ce23b3ab073468e9a9ca0e7e42099858d185ba"},"pipeline":{"id":34705119,"iid":4750,"project_id":6138686,"sha":"05ce23b3ab073468e9a9ca0e7e42099858d185ba","ref":"pr-6705","status":"failed","source":"push","created_at":"2018-10-29T15:41:39.042Z","updated_at":"2018-10-29T16:53:56.056Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/34705119"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/113954959","artifacts":[{"file_type":"trace","size":1058,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":113954958,"status":"failed","stage":"test","name":"ci-quickchick","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-10-29T15:41:40.257Z","started_at":"2018-10-29T16:08:30.436Z","finished_at":"2018-10-29T16:11:05.872Z","duration":155.435086,"queued_duration":8.235177,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"05ce23b3ab073468e9a9ca0e7e42099858d185ba","short_id":"05ce23b3","created_at":"2018-10-29T16:41:18.000+01:00","parent_ids":["765c61d42e301c1f98c44b3986d73a052ca3a8c5"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-10-29T16:41:18.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/05ce23b3ab073468e9a9ca0e7e42099858d185ba"},"pipeline":{"id":34705119,"iid":4750,"project_id":6138686,"sha":"05ce23b3ab073468e9a9ca0e7e42099858d185ba","ref":"pr-6705","status":"failed","source":"push","created_at":"2018-10-29T15:41:39.042Z","updated_at":"2018-10-29T16:53:56.056Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/34705119"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/113954958","artifacts":[{"file_type":"trace","size":1058,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":113954957,"status":"failed","stage":"test","name":"ci-plugin-tutorial","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-10-29T15:41:40.231Z","started_at":"2018-10-29T16:08:22.525Z","finished_at":"2018-10-29T16:11:09.671Z","duration":167.145704,"queued_duration":0.209688,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"05ce23b3ab073468e9a9ca0e7e42099858d185ba","short_id":"05ce23b3","created_at":"2018-10-29T16:41:18.000+01:00","parent_ids":["765c61d42e301c1f98c44b3986d73a052ca3a8c5"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-10-29T16:41:18.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/05ce23b3ab073468e9a9ca0e7e42099858d185ba"},"pipeline":{"id":34705119,"iid":4750,"project_id":6138686,"sha":"05ce23b3ab073468e9a9ca0e7e42099858d185ba","ref":"pr-6705","status":"failed","source":"push","created_at":"2018-10-29T15:41:39.042Z","updated_at":"2018-10-29T16:53:56.056Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/34705119"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/113954957","artifacts":[{"file_type":"trace","size":1058,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":113954956,"status":"failed","stage":"test","name":"ci-pidetop","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-10-29T15:41:40.206Z","started_at":"2018-10-29T16:08:30.394Z","finished_at":"2018-10-29T16:11:04.824Z","duration":154.429939,"queued_duration":8.020312,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"05ce23b3ab073468e9a9ca0e7e42099858d185ba","short_id":"05ce23b3","created_at":"2018-10-29T16:41:18.000+01:00","parent_ids":["765c61d42e301c1f98c44b3986d73a052ca3a8c5"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-10-29T16:41:18.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/05ce23b3ab073468e9a9ca0e7e42099858d185ba"},"pipeline":{"id":34705119,"iid":4750,"project_id":6138686,"sha":"05ce23b3ab073468e9a9ca0e7e42099858d185ba","ref":"pr-6705","status":"failed","source":"push","created_at":"2018-10-29T15:41:39.042Z","updated_at":"2018-10-29T16:53:56.056Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/34705119"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/113954956","artifacts":[{"file_type":"trace","size":1058,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":113954955,"status":"failed","stage":"test","name":"ci-mtac2","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-10-29T15:41:40.178Z","started_at":"2018-10-29T16:08:29.678Z","finished_at":"2018-10-29T16:11:04.226Z","duration":154.548168,"queued_duration":7.254888,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"05ce23b3ab073468e9a9ca0e7e42099858d185ba","short_id":"05ce23b3","created_at":"2018-10-29T16:41:18.000+01:00","parent_ids":["765c61d42e301c1f98c44b3986d73a052ca3a8c5"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-10-29T16:41:18.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/05ce23b3ab073468e9a9ca0e7e42099858d185ba"},"pipeline":{"id":34705119,"iid":4750,"project_id":6138686,"sha":"05ce23b3ab073468e9a9ca0e7e42099858d185ba","ref":"pr-6705","status":"failed","source":"push","created_at":"2018-10-29T15:41:39.042Z","updated_at":"2018-10-29T16:53:56.056Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/34705119"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/113954955","artifacts":[{"file_type":"trace","size":1058,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":113954954,"status":"failed","stage":"test","name":"ci-math-comp","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-10-29T15:41:40.150Z","started_at":"2018-10-29T16:08:29.635Z","finished_at":"2018-10-29T16:11:18.318Z","duration":168.682548,"queued_duration":7.169629,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"05ce23b3ab073468e9a9ca0e7e42099858d185ba","short_id":"05ce23b3","created_at":"2018-10-29T16:41:18.000+01:00","parent_ids":["765c61d42e301c1f98c44b3986d73a052ca3a8c5"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-10-29T16:41:18.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/05ce23b3ab073468e9a9ca0e7e42099858d185ba"},"pipeline":{"id":34705119,"iid":4750,"project_id":6138686,"sha":"05ce23b3ab073468e9a9ca0e7e42099858d185ba","ref":"pr-6705","status":"failed","source":"push","created_at":"2018-10-29T15:41:39.042Z","updated_at":"2018-10-29T16:53:56.056Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/34705119"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/113954954","artifacts":[{"file_type":"trace","size":1058,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":113954953,"status":"failed","stage":"test","name":"ci-ltac2","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-10-29T15:41:40.121Z","started_at":"2018-10-29T16:08:28.852Z","finished_at":"2018-10-29T16:11:37.996Z","duration":189.144466,"queued_duration":6.338871,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"05ce23b3ab073468e9a9ca0e7e42099858d185ba","short_id":"05ce23b3","created_at":"2018-10-29T16:41:18.000+01:00","parent_ids":["765c61d42e301c1f98c44b3986d73a052ca3a8c5"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-10-29T16:41:18.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/05ce23b3ab073468e9a9ca0e7e42099858d185ba"},"pipeline":{"id":34705119,"iid":4750,"project_id":6138686,"sha":"05ce23b3ab073468e9a9ca0e7e42099858d185ba","ref":"pr-6705","status":"failed","source":"push","created_at":"2018-10-29T15:41:39.042Z","updated_at":"2018-10-29T16:53:56.056Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/34705119"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/113954953","artifacts":[{"file_type":"trace","size":1058,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":113954952,"status":"failed","stage":"test","name":"ci-iris-lambda-rust","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-10-29T15:41:40.094Z","started_at":"2018-10-29T16:08:28.732Z","finished_at":"2018-10-29T16:11:07.989Z","duration":159.257691,"queued_duration":6.172217,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"05ce23b3ab073468e9a9ca0e7e42099858d185ba","short_id":"05ce23b3","created_at":"2018-10-29T16:41:18.000+01:00","parent_ids":["765c61d42e301c1f98c44b3986d73a052ca3a8c5"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-10-29T16:41:18.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/05ce23b3ab073468e9a9ca0e7e42099858d185ba"},"pipeline":{"id":34705119,"iid":4750,"project_id":6138686,"sha":"05ce23b3ab073468e9a9ca0e7e42099858d185ba","ref":"pr-6705","status":"failed","source":"push","created_at":"2018-10-29T15:41:39.042Z","updated_at":"2018-10-29T16:53:56.056Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/34705119"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/113954952","artifacts":[{"file_type":"trace","size":1058,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":113954951,"status":"failed","stage":"test","name":"ci-hott","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-10-29T15:41:40.065Z","started_at":"2018-10-29T16:08:22.986Z","finished_at":"2018-10-29T16:11:11.212Z","duration":168.22568,"queued_duration":0.349912,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"05ce23b3ab073468e9a9ca0e7e42099858d185ba","short_id":"05ce23b3","created_at":"2018-10-29T16:41:18.000+01:00","parent_ids":["765c61d42e301c1f98c44b3986d73a052ca3a8c5"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-10-29T16:41:18.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/05ce23b3ab073468e9a9ca0e7e42099858d185ba"},"pipeline":{"id":34705119,"iid":4750,"project_id":6138686,"sha":"05ce23b3ab073468e9a9ca0e7e42099858d185ba","ref":"pr-6705","status":"failed","source":"push","created_at":"2018-10-29T15:41:39.042Z","updated_at":"2018-10-29T16:53:56.056Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/34705119"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/113954951","artifacts":[{"file_type":"trace","size":1058,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":113954950,"status":"failed","stage":"test","name":"ci-geocoq","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-10-29T15:41:40.037Z","started_at":"2018-10-29T16:08:27.829Z","finished_at":"2018-10-29T16:11:32.545Z","duration":184.715826,"queued_duration":5.062337,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"05ce23b3ab073468e9a9ca0e7e42099858d185ba","short_id":"05ce23b3","created_at":"2018-10-29T16:41:18.000+01:00","parent_ids":["765c61d42e301c1f98c44b3986d73a052ca3a8c5"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-10-29T16:41:18.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/05ce23b3ab073468e9a9ca0e7e42099858d185ba"},"pipeline":{"id":34705119,"iid":4750,"project_id":6138686,"sha":"05ce23b3ab073468e9a9ca0e7e42099858d185ba","ref":"pr-6705","status":"failed","source":"push","created_at":"2018-10-29T15:41:39.042Z","updated_at":"2018-10-29T16:53:56.056Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/34705119"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/113954950","artifacts":[{"file_type":"trace","size":1058,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":113954948,"status":"failed","stage":"test","name":"ci-formal-topology","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-10-29T15:41:40.008Z","started_at":"2018-10-29T16:08:27.651Z","finished_at":"2018-10-29T16:11:39.016Z","duration":191.364565,"queued_duration":4.749393,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"05ce23b3ab073468e9a9ca0e7e42099858d185ba","short_id":"05ce23b3","created_at":"2018-10-29T16:41:18.000+01:00","parent_ids":["765c61d42e301c1f98c44b3986d73a052ca3a8c5"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-10-29T16:41:18.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/05ce23b3ab073468e9a9ca0e7e42099858d185ba"},"pipeline":{"id":34705119,"iid":4750,"project_id":6138686,"sha":"05ce23b3ab073468e9a9ca0e7e42099858d185ba","ref":"pr-6705","status":"failed","source":"push","created_at":"2018-10-29T15:41:39.042Z","updated_at":"2018-10-29T16:53:56.056Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/34705119"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/113954948","artifacts":[{"file_type":"trace","size":1058,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":113954947,"status":"failed","stage":"test","name":"ci-flocq","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-10-29T15:41:39.980Z","started_at":"2018-10-29T16:08:27.546Z","finished_at":"2018-10-29T16:11:04.347Z","duration":156.801059,"queued_duration":4.567588,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"05ce23b3ab073468e9a9ca0e7e42099858d185ba","short_id":"05ce23b3","created_at":"2018-10-29T16:41:18.000+01:00","parent_ids":["765c61d42e301c1f98c44b3986d73a052ca3a8c5"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-10-29T16:41:18.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/05ce23b3ab073468e9a9ca0e7e42099858d185ba"},"pipeline":{"id":34705119,"iid":4750,"project_id":6138686,"sha":"05ce23b3ab073468e9a9ca0e7e42099858d185ba","ref":"pr-6705","status":"failed","source":"push","created_at":"2018-10-29T15:41:39.042Z","updated_at":"2018-10-29T16:53:56.056Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/34705119"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/113954947","artifacts":[{"file_type":"trace","size":1058,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":113954946,"status":"failed","stage":"test","name":"ci-fiat-parsers","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-10-29T15:41:39.953Z","started_at":"2018-10-29T16:08:27.491Z","finished_at":"2018-10-29T16:11:06.710Z","duration":159.218987,"queued_duration":4.461448,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"05ce23b3ab073468e9a9ca0e7e42099858d185ba","short_id":"05ce23b3","created_at":"2018-10-29T16:41:18.000+01:00","parent_ids":["765c61d42e301c1f98c44b3986d73a052ca3a8c5"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-10-29T16:41:18.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/05ce23b3ab073468e9a9ca0e7e42099858d185ba"},"pipeline":{"id":34705119,"iid":4750,"project_id":6138686,"sha":"05ce23b3ab073468e9a9ca0e7e42099858d185ba","ref":"pr-6705","status":"failed","source":"push","created_at":"2018-10-29T15:41:39.042Z","updated_at":"2018-10-29T16:53:56.056Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/34705119"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/113954946","artifacts":[{"file_type":"trace","size":1058,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":113954945,"status":"failed","stage":"test","name":"ci-fiat-crypto-legacy","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-10-29T15:41:39.929Z","started_at":"2018-10-29T16:08:27.253Z","finished_at":"2018-10-29T16:11:27.536Z","duration":180.283083,"queued_duration":4.163209,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"05ce23b3ab073468e9a9ca0e7e42099858d185ba","short_id":"05ce23b3","created_at":"2018-10-29T16:41:18.000+01:00","parent_ids":["765c61d42e301c1f98c44b3986d73a052ca3a8c5"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-10-29T16:41:18.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/05ce23b3ab073468e9a9ca0e7e42099858d185ba"},"pipeline":{"id":34705119,"iid":4750,"project_id":6138686,"sha":"05ce23b3ab073468e9a9ca0e7e42099858d185ba","ref":"pr-6705","status":"failed","source":"push","created_at":"2018-10-29T15:41:39.042Z","updated_at":"2018-10-29T16:53:56.056Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/34705119"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/113954945","artifacts":[{"file_type":"trace","size":1058,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":113954944,"status":"failed","stage":"test","name":"ci-fiat-crypto","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-10-29T15:41:39.903Z","started_at":"2018-10-29T16:08:26.807Z","finished_at":"2018-10-29T16:11:19.879Z","duration":173.071565,"queued_duration":3.659866,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"05ce23b3ab073468e9a9ca0e7e42099858d185ba","short_id":"05ce23b3","created_at":"2018-10-29T16:41:18.000+01:00","parent_ids":["765c61d42e301c1f98c44b3986d73a052ca3a8c5"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-10-29T16:41:18.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/05ce23b3ab073468e9a9ca0e7e42099858d185ba"},"pipeline":{"id":34705119,"iid":4750,"project_id":6138686,"sha":"05ce23b3ab073468e9a9ca0e7e42099858d185ba","ref":"pr-6705","status":"failed","source":"push","created_at":"2018-10-29T15:41:39.042Z","updated_at":"2018-10-29T16:53:56.056Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/34705119"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/113954944","artifacts":[{"file_type":"trace","size":1058,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":113954943,"status":"failed","stage":"test","name":"ci-fcsl-pcm","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-10-29T15:41:39.877Z","started_at":"2018-10-29T16:08:26.697Z","finished_at":"2018-10-29T16:11:00.406Z","duration":153.709133,"queued_duration":3.510256,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"05ce23b3ab073468e9a9ca0e7e42099858d185ba","short_id":"05ce23b3","created_at":"2018-10-29T16:41:18.000+01:00","parent_ids":["765c61d42e301c1f98c44b3986d73a052ca3a8c5"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-10-29T16:41:18.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/05ce23b3ab073468e9a9ca0e7e42099858d185ba"},"pipeline":{"id":34705119,"iid":4750,"project_id":6138686,"sha":"05ce23b3ab073468e9a9ca0e7e42099858d185ba","ref":"pr-6705","status":"failed","source":"push","created_at":"2018-10-29T15:41:39.042Z","updated_at":"2018-10-29T16:53:56.056Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/34705119"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/113954943","artifacts":[{"file_type":"trace","size":1058,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":113954942,"status":"failed","stage":"test","name":"ci-equations","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-10-29T15:41:39.846Z","started_at":"2018-10-29T16:08:26.549Z","finished_at":"2018-10-29T16:11:24.000Z","duration":177.450704,"queued_duration":3.325838,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"05ce23b3ab073468e9a9ca0e7e42099858d185ba","short_id":"05ce23b3","created_at":"2018-10-29T16:41:18.000+01:00","parent_ids":["765c61d42e301c1f98c44b3986d73a052ca3a8c5"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-10-29T16:41:18.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/05ce23b3ab073468e9a9ca0e7e42099858d185ba"},"pipeline":{"id":34705119,"iid":4750,"project_id":6138686,"sha":"05ce23b3ab073468e9a9ca0e7e42099858d185ba","ref":"pr-6705","status":"failed","source":"push","created_at":"2018-10-29T15:41:39.042Z","updated_at":"2018-10-29T16:53:56.056Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/34705119"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/113954942","artifacts":[{"file_type":"trace","size":1058,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":113954941,"status":"failed","stage":"test","name":"ci-elpi","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-10-29T15:41:39.812Z","started_at":"2018-10-29T16:08:26.384Z","finished_at":"2018-10-29T16:08:38.234Z","duration":11.850244,"queued_duration":3.126917,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"05ce23b3ab073468e9a9ca0e7e42099858d185ba","short_id":"05ce23b3","created_at":"2018-10-29T16:41:18.000+01:00","parent_ids":["765c61d42e301c1f98c44b3986d73a052ca3a8c5"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-10-29T16:41:18.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/05ce23b3ab073468e9a9ca0e7e42099858d185ba"},"pipeline":{"id":34705119,"iid":4750,"project_id":6138686,"sha":"05ce23b3ab073468e9a9ca0e7e42099858d185ba","ref":"pr-6705","status":"failed","source":"push","created_at":"2018-10-29T15:41:39.042Z","updated_at":"2018-10-29T16:53:56.056Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/34705119"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/113954941","artifacts":[{"file_type":"trace","size":1222,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":113954940,"status":"failed","stage":"test","name":"ci-cross-crypto","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-10-29T15:41:39.782Z","started_at":"2018-10-29T16:08:23.817Z","finished_at":"2018-10-29T16:10:58.411Z","duration":154.59431,"queued_duration":0.505647,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"05ce23b3ab073468e9a9ca0e7e42099858d185ba","short_id":"05ce23b3","created_at":"2018-10-29T16:41:18.000+01:00","parent_ids":["765c61d42e301c1f98c44b3986d73a052ca3a8c5"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-10-29T16:41:18.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/05ce23b3ab073468e9a9ca0e7e42099858d185ba"},"pipeline":{"id":34705119,"iid":4750,"project_id":6138686,"sha":"05ce23b3ab073468e9a9ca0e7e42099858d185ba","ref":"pr-6705","status":"failed","source":"push","created_at":"2018-10-29T15:41:39.042Z","updated_at":"2018-10-29T16:53:56.056Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/34705119"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/113954940","artifacts":[{"file_type":"trace","size":1058,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":113954939,"status":"failed","stage":"test","name":"ci-coquelicot","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-10-29T15:41:39.750Z","started_at":"2018-10-29T16:08:23.670Z","finished_at":"2018-10-29T16:11:14.923Z","duration":171.253251,"queued_duration":0.32262,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"05ce23b3ab073468e9a9ca0e7e42099858d185ba","short_id":"05ce23b3","created_at":"2018-10-29T16:41:18.000+01:00","parent_ids":["765c61d42e301c1f98c44b3986d73a052ca3a8c5"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-10-29T16:41:18.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/05ce23b3ab073468e9a9ca0e7e42099858d185ba"},"pipeline":{"id":34705119,"iid":4750,"project_id":6138686,"sha":"05ce23b3ab073468e9a9ca0e7e42099858d185ba","ref":"pr-6705","status":"failed","source":"push","created_at":"2018-10-29T15:41:39.042Z","updated_at":"2018-10-29T16:53:56.056Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/34705119"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/113954939","artifacts":[{"file_type":"trace","size":1058,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":113954938,"status":"failed","stage":"test","name":"ci-coq-dpdgraph","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-10-29T15:41:39.722Z","started_at":"2018-10-29T16:08:23.624Z","finished_at":"2018-10-29T16:11:09.589Z","duration":165.965711,"queued_duration":0.240462,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"05ce23b3ab073468e9a9ca0e7e42099858d185ba","short_id":"05ce23b3","created_at":"2018-10-29T16:41:18.000+01:00","parent_ids":["765c61d42e301c1f98c44b3986d73a052ca3a8c5"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-10-29T16:41:18.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/05ce23b3ab073468e9a9ca0e7e42099858d185ba"},"pipeline":{"id":34705119,"iid":4750,"project_id":6138686,"sha":"05ce23b3ab073468e9a9ca0e7e42099858d185ba","ref":"pr-6705","status":"failed","source":"push","created_at":"2018-10-29T15:41:39.042Z","updated_at":"2018-10-29T16:53:56.056Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/34705119"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/113954938","artifacts":[{"file_type":"trace","size":1058,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":113954937,"status":"failed","stage":"test","name":"ci-compcert","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-10-29T15:41:39.694Z","started_at":"2018-10-29T16:08:26.112Z","finished_at":"2018-10-29T16:10:59.609Z","duration":153.497344,"queued_duration":2.595911,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"05ce23b3ab073468e9a9ca0e7e42099858d185ba","short_id":"05ce23b3","created_at":"2018-10-29T16:41:18.000+01:00","parent_ids":["765c61d42e301c1f98c44b3986d73a052ca3a8c5"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-10-29T16:41:18.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/05ce23b3ab073468e9a9ca0e7e42099858d185ba"},"pipeline":{"id":34705119,"iid":4750,"project_id":6138686,"sha":"05ce23b3ab073468e9a9ca0e7e42099858d185ba","ref":"pr-6705","status":"failed","source":"push","created_at":"2018-10-29T15:41:39.042Z","updated_at":"2018-10-29T16:53:56.056Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/34705119"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/113954937","artifacts":[{"file_type":"trace","size":1058,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":113954936,"status":"failed","stage":"test","name":"ci-color","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-10-29T15:41:39.664Z","started_at":"2018-10-29T16:08:26.073Z","finished_at":"2018-10-29T16:11:01.799Z","duration":155.725696,"queued_duration":2.524688,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"05ce23b3ab073468e9a9ca0e7e42099858d185ba","short_id":"05ce23b3","created_at":"2018-10-29T16:41:18.000+01:00","parent_ids":["765c61d42e301c1f98c44b3986d73a052ca3a8c5"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-10-29T16:41:18.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/05ce23b3ab073468e9a9ca0e7e42099858d185ba"},"pipeline":{"id":34705119,"iid":4750,"project_id":6138686,"sha":"05ce23b3ab073468e9a9ca0e7e42099858d185ba","ref":"pr-6705","status":"failed","source":"push","created_at":"2018-10-29T15:41:39.042Z","updated_at":"2018-10-29T16:53:56.056Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/34705119"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/113954936","artifacts":[{"file_type":"trace","size":1058,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":113954934,"status":"failed","stage":"test","name":"ci-bignums","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-10-29T15:41:39.639Z","started_at":"2018-10-29T16:08:26.025Z","finished_at":"2018-10-29T16:08:38.158Z","duration":12.132859,"queued_duration":2.429732,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"05ce23b3ab073468e9a9ca0e7e42099858d185ba","short_id":"05ce23b3","created_at":"2018-10-29T16:41:18.000+01:00","parent_ids":["765c61d42e301c1f98c44b3986d73a052ca3a8c5"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-10-29T16:41:18.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/05ce23b3ab073468e9a9ca0e7e42099858d185ba"},"pipeline":{"id":34705119,"iid":4750,"project_id":6138686,"sha":"05ce23b3ab073468e9a9ca0e7e42099858d185ba","ref":"pr-6705","status":"failed","source":"push","created_at":"2018-10-29T15:41:39.042Z","updated_at":"2018-10-29T16:53:56.056Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/34705119"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/113954934","artifacts":[{"file_type":"trace","size":1222,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":113954932,"status":"failed","stage":"test","name":"ci-bedrock2","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":true,"created_at":"2018-10-29T15:41:39.612Z","started_at":"2018-10-29T16:08:25.711Z","finished_at":"2018-10-29T16:11:13.077Z","duration":167.366542,"queued_duration":2.00038,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"05ce23b3ab073468e9a9ca0e7e42099858d185ba","short_id":"05ce23b3","created_at":"2018-10-29T16:41:18.000+01:00","parent_ids":["765c61d42e301c1f98c44b3986d73a052ca3a8c5"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-10-29T16:41:18.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/05ce23b3ab073468e9a9ca0e7e42099858d185ba"},"pipeline":{"id":34705119,"iid":4750,"project_id":6138686,"sha":"05ce23b3ab073468e9a9ca0e7e42099858d185ba","ref":"pr-6705","status":"failed","source":"push","created_at":"2018-10-29T15:41:39.042Z","updated_at":"2018-10-29T16:53:56.056Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/34705119"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/113954932","artifacts":[{"file_type":"trace","size":1058,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":113954931,"status":"failed","stage":"test","name":"ci-aac-tactics","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-10-29T15:41:39.586Z","started_at":"2018-10-29T16:08:24.262Z","finished_at":"2018-10-29T16:11:23.555Z","duration":179.292883,"queued_duration":0.359329,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"05ce23b3ab073468e9a9ca0e7e42099858d185ba","short_id":"05ce23b3","created_at":"2018-10-29T16:41:18.000+01:00","parent_ids":["765c61d42e301c1f98c44b3986d73a052ca3a8c5"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-10-29T16:41:18.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/05ce23b3ab073468e9a9ca0e7e42099858d185ba"},"pipeline":{"id":34705119,"iid":4750,"project_id":6138686,"sha":"05ce23b3ab073468e9a9ca0e7e42099858d185ba","ref":"pr-6705","status":"failed","source":"push","created_at":"2018-10-29T15:41:39.042Z","updated_at":"2018-10-29T16:53:56.056Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/34705119"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/113954931","artifacts":[{"file_type":"trace","size":1058,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":113954930,"status":"failed","stage":"test","name":"validate:edge+flambda","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-10-29T15:41:39.563Z","started_at":"2018-10-29T16:08:24.170Z","finished_at":"2018-10-29T16:11:17.821Z","duration":173.651331,"queued_duration":0.215211,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"05ce23b3ab073468e9a9ca0e7e42099858d185ba","short_id":"05ce23b3","created_at":"2018-10-29T16:41:18.000+01:00","parent_ids":["765c61d42e301c1f98c44b3986d73a052ca3a8c5"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-10-29T16:41:18.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/05ce23b3ab073468e9a9ca0e7e42099858d185ba"},"pipeline":{"id":34705119,"iid":4750,"project_id":6138686,"sha":"05ce23b3ab073468e9a9ca0e7e42099858d185ba","ref":"pr-6705","status":"failed","source":"push","created_at":"2018-10-29T15:41:39.042Z","updated_at":"2018-10-29T16:53:56.056Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/34705119"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/113954930","artifacts":[{"file_type":"trace","size":1058,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":113954929,"status":"failed","stage":"test","name":"validate:edge","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-10-29T15:41:39.538Z","started_at":"2018-10-29T16:08:24.195Z","finished_at":"2018-10-29T16:11:18.598Z","duration":174.403584,"queued_duration":0.201677,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"05ce23b3ab073468e9a9ca0e7e42099858d185ba","short_id":"05ce23b3","created_at":"2018-10-29T16:41:18.000+01:00","parent_ids":["765c61d42e301c1f98c44b3986d73a052ca3a8c5"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-10-29T16:41:18.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/05ce23b3ab073468e9a9ca0e7e42099858d185ba"},"pipeline":{"id":34705119,"iid":4750,"project_id":6138686,"sha":"05ce23b3ab073468e9a9ca0e7e42099858d185ba","ref":"pr-6705","status":"failed","source":"push","created_at":"2018-10-29T15:41:39.042Z","updated_at":"2018-10-29T16:53:56.056Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/34705119"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/113954929","artifacts":[{"file_type":"trace","size":1058,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":113954928,"status":"success","stage":"test","name":"validate:base+32bit","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-10-29T15:41:39.513Z","started_at":"2018-10-29T16:08:24.068Z","finished_at":"2018-10-29T16:17:10.740Z","duration":526.671726,"queued_duration":0.036335,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"05ce23b3ab073468e9a9ca0e7e42099858d185ba","short_id":"05ce23b3","created_at":"2018-10-29T16:41:18.000+01:00","parent_ids":["765c61d42e301c1f98c44b3986d73a052ca3a8c5"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-10-29T16:41:18.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/05ce23b3ab073468e9a9ca0e7e42099858d185ba"},"pipeline":{"id":34705119,"iid":4750,"project_id":6138686,"sha":"05ce23b3ab073468e9a9ca0e7e42099858d185ba","ref":"pr-6705","status":"failed","source":"push","created_at":"2018-10-29T15:41:39.042Z","updated_at":"2018-10-29T16:53:56.056Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/34705119"},"web_url":"https://gitlab.com/coq/coq/-/jobs/113954928","artifacts":[{"file_type":"trace","size":183998,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":113954926,"status":"failed","stage":"test","name":"test-suite:egde:dune:dev","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-10-29T15:41:39.466Z","started_at":"2018-10-29T16:08:24.635Z","finished_at":"2018-10-29T16:10:55.435Z","duration":150.800098,"queued_duration":0.492261,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"05ce23b3ab073468e9a9ca0e7e42099858d185ba","short_id":"05ce23b3","created_at":"2018-10-29T16:41:18.000+01:00","parent_ids":["765c61d42e301c1f98c44b3986d73a052ca3a8c5"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-10-29T16:41:18.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/05ce23b3ab073468e9a9ca0e7e42099858d185ba"},"pipeline":{"id":34705119,"iid":4750,"project_id":6138686,"sha":"05ce23b3ab073468e9a9ca0e7e42099858d185ba","ref":"pr-6705","status":"failed","source":"push","created_at":"2018-10-29T15:41:39.042Z","updated_at":"2018-10-29T16:53:56.056Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/34705119"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/113954926","artifacts":[{"file_type":"trace","size":1229,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":113954925,"status":"failed","stage":"test","name":"test-suite:edge+flambda","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-10-29T15:41:39.442Z","started_at":"2018-10-29T16:08:24.435Z","finished_at":"2018-10-29T16:08:36.257Z","duration":11.821565,"queued_duration":0.184981,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"05ce23b3ab073468e9a9ca0e7e42099858d185ba","short_id":"05ce23b3","created_at":"2018-10-29T16:41:18.000+01:00","parent_ids":["765c61d42e301c1f98c44b3986d73a052ca3a8c5"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-10-29T16:41:18.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/05ce23b3ab073468e9a9ca0e7e42099858d185ba"},"pipeline":{"id":34705119,"iid":4750,"project_id":6138686,"sha":"05ce23b3ab073468e9a9ca0e7e42099858d185ba","ref":"pr-6705","status":"failed","source":"push","created_at":"2018-10-29T15:41:39.042Z","updated_at":"2018-10-29T16:53:56.056Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/34705119"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/113954925","artifacts":[{"file_type":"trace","size":1700,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":113954924,"status":"failed","stage":"test","name":"test-suite:edge","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-10-29T15:41:39.416Z","started_at":"2018-10-29T16:08:25.668Z","finished_at":"2018-10-29T16:08:38.063Z","duration":12.395124,"queued_duration":1.271893,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"05ce23b3ab073468e9a9ca0e7e42099858d185ba","short_id":"05ce23b3","created_at":"2018-10-29T16:41:18.000+01:00","parent_ids":["765c61d42e301c1f98c44b3986d73a052ca3a8c5"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-10-29T16:41:18.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/05ce23b3ab073468e9a9ca0e7e42099858d185ba"},"pipeline":{"id":34705119,"iid":4750,"project_id":6138686,"sha":"05ce23b3ab073468e9a9ca0e7e42099858d185ba","ref":"pr-6705","status":"failed","source":"push","created_at":"2018-10-29T15:41:39.042Z","updated_at":"2018-10-29T16:53:56.056Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/34705119"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/113954924","artifacts":[{"file_type":"trace","size":4201,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":113954923,"status":"failed","stage":"test","name":"test-suite:base+32bit","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-10-29T15:41:39.391Z","started_at":"2018-10-29T16:08:25.529Z","finished_at":"2018-10-29T16:11:08.904Z","duration":163.374578,"queued_duration":1.025873,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"05ce23b3ab073468e9a9ca0e7e42099858d185ba","short_id":"05ce23b3","created_at":"2018-10-29T16:41:18.000+01:00","parent_ids":["765c61d42e301c1f98c44b3986d73a052ca3a8c5"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-10-29T16:41:18.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/05ce23b3ab073468e9a9ca0e7e42099858d185ba"},"pipeline":{"id":34705119,"iid":4750,"project_id":6138686,"sha":"05ce23b3ab073468e9a9ca0e7e42099858d185ba","ref":"pr-6705","status":"failed","source":"push","created_at":"2018-10-29T15:41:39.042Z","updated_at":"2018-10-29T16:53:56.056Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/34705119"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/113954923","artifacts":[{"file_type":"trace","size":1221,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":113954922,"status":"failed","stage":"test","name":"test-suite:base","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-10-29T15:41:39.364Z","started_at":"2018-10-29T16:08:25.352Z","finished_at":"2018-10-29T16:08:37.642Z","duration":12.289728,"queued_duration":0.773981,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"05ce23b3ab073468e9a9ca0e7e42099858d185ba","short_id":"05ce23b3","created_at":"2018-10-29T16:41:18.000+01:00","parent_ids":["765c61d42e301c1f98c44b3986d73a052ca3a8c5"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-10-29T16:41:18.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/05ce23b3ab073468e9a9ca0e7e42099858d185ba"},"pipeline":{"id":34705119,"iid":4750,"project_id":6138686,"sha":"05ce23b3ab073468e9a9ca0e7e42099858d185ba","ref":"pr-6705","status":"failed","source":"push","created_at":"2018-10-29T15:41:39.042Z","updated_at":"2018-10-29T16:53:56.056Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/34705119"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/113954922","artifacts":[{"file_type":"trace","size":257155,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":113954921,"status":"failed","stage":"test","name":"doc:ml-api:odoc","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-10-29T15:41:39.339Z","started_at":"2018-10-29T16:08:25.192Z","finished_at":"2018-10-29T16:11:06.889Z","duration":161.697002,"queued_duration":0.522395,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"05ce23b3ab073468e9a9ca0e7e42099858d185ba","short_id":"05ce23b3","created_at":"2018-10-29T16:41:18.000+01:00","parent_ids":["765c61d42e301c1f98c44b3986d73a052ca3a8c5"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-10-29T16:41:18.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/05ce23b3ab073468e9a9ca0e7e42099858d185ba"},"pipeline":{"id":34705119,"iid":4750,"project_id":6138686,"sha":"05ce23b3ab073468e9a9ca0e7e42099858d185ba","ref":"pr-6705","status":"failed","source":"push","created_at":"2018-10-29T15:41:39.042Z","updated_at":"2018-10-29T16:53:56.056Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/34705119"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/113954921","artifacts":[{"file_type":"trace","size":1058,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":113954920,"status":"failed","stage":"test","name":"doc:refman","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-10-29T15:41:39.312Z","started_at":"2018-10-29T16:08:25.147Z","finished_at":"2018-10-29T16:11:11.763Z","duration":166.61553,"queued_duration":0.415408,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"05ce23b3ab073468e9a9ca0e7e42099858d185ba","short_id":"05ce23b3","created_at":"2018-10-29T16:41:18.000+01:00","parent_ids":["765c61d42e301c1f98c44b3986d73a052ca3a8c5"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-10-29T16:41:18.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/05ce23b3ab073468e9a9ca0e7e42099858d185ba"},"pipeline":{"id":34705119,"iid":4750,"project_id":6138686,"sha":"05ce23b3ab073468e9a9ca0e7e42099858d185ba","ref":"pr-6705","status":"failed","source":"push","created_at":"2018-10-29T15:41:39.042Z","updated_at":"2018-10-29T16:53:56.056Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/34705119"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/113954920","artifacts":[{"file_type":"trace","size":1058,"filename":"job.log","file_format":null}],"runner":{"id":380987,"description":"shared-runners-manager-6.gitlab.com","ip_address":"34.74.239.13","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":null,"tag_list":[]}
{"id":113954919,"status":"success","stage":"test","name":"pkg:nix","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-10-29T15:41:39.284Z","started_at":"2018-10-29T16:08:24.840Z","finished_at":"2018-10-29T16:53:55.980Z","duration":2731.140062,"queued_duration":0.060437,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"05ce23b3ab073468e9a9ca0e7e42099858d185ba","short_id":"05ce23b3","created_at":"2018-10-29T16:41:18.000+01:00","parent_ids":["765c61d42e301c1f98c44b3986d73a052ca3a8c5"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-10-29T16:41:18.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/05ce23b3ab073468e9a9ca0e7e42099858d185ba"},"pipeline":{"id":34705119,"iid":4750,"project_id":6138686,"sha":"05ce23b3ab073468e9a9ca0e7e42099858d185ba","ref":"pr-6705","status":"failed","source":"push","created_at":"2018-10-29T15:41:39.042Z","updated_at":"2018-10-29T16:53:56.056Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/34705119"},"web_url":"https://gitlab.com/coq/coq/-/jobs/113954919","artifacts":[{"file_type":"trace","size":653825,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":113954918,"status":"failed","stage":"test","name":"pkg:opam","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-10-29T15:41:39.258Z","started_at":"2018-10-29T16:08:25.099Z","finished_at":"2018-10-29T16:08:39.458Z","duration":14.358209,"queued_duration":0.273285,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"05ce23b3ab073468e9a9ca0e7e42099858d185ba","short_id":"05ce23b3","created_at":"2018-10-29T16:41:18.000+01:00","parent_ids":["765c61d42e301c1f98c44b3986d73a052ca3a8c5"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-10-29T16:41:18.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/05ce23b3ab073468e9a9ca0e7e42099858d185ba"},"pipeline":{"id":34705119,"iid":4750,"project_id":6138686,"sha":"05ce23b3ab073468e9a9ca0e7e42099858d185ba","ref":"pr-6705","status":"failed","source":"push","created_at":"2018-10-29T15:41:39.042Z","updated_at":"2018-10-29T16:53:56.056Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/34705119"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/113954918","artifacts":[{"file_type":"trace","size":1462,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":null,"tag_list":[]}
{"id":113954917,"status":"failed","stage":"test","name":"windows64","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-10-29T15:41:39.224Z","started_at":"2018-10-29T16:08:25.219Z","finished_at":"2018-10-29T16:08:32.565Z","duration":7.345856,"queued_duration":0.353411,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"05ce23b3ab073468e9a9ca0e7e42099858d185ba","short_id":"05ce23b3","created_at":"2018-10-29T16:41:18.000+01:00","parent_ids":["765c61d42e301c1f98c44b3986d73a052ca3a8c5"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-10-29T16:41:18.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/05ce23b3ab073468e9a9ca0e7e42099858d185ba"},"pipeline":{"id":34705119,"iid":4750,"project_id":6138686,"sha":"05ce23b3ab073468e9a9ca0e7e42099858d185ba","ref":"pr-6705","status":"failed","source":"push","created_at":"2018-10-29T15:41:39.042Z","updated_at":"2018-10-29T16:53:56.056Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/34705119"},"failure_reason":"script_failure","web_url":"https://gitlab.com/coq/coq/-/jobs/113954917","artifacts":[{"file_type":"trace","size":1263,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":"2018-11-05T16:08:31.964Z","tag_list":["windows"]}
{"id":113954916,"status":"success","stage":"build","name":"build:egde:dune:dev","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-10-29T15:41:39.180Z","started_at":"2018-10-29T15:41:42.078Z","finished_at":"2018-10-29T15:57:11.945Z","duration":929.866617,"queued_duration":1.321598,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"05ce23b3ab073468e9a9ca0e7e42099858d185ba","short_id":"05ce23b3","created_at":"2018-10-29T16:41:18.000+01:00","parent_ids":["765c61d42e301c1f98c44b3986d73a052ca3a8c5"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-10-29T16:41:18.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/05ce23b3ab073468e9a9ca0e7e42099858d185ba"},"pipeline":{"id":34705119,"iid":4750,"project_id":6138686,"sha":"05ce23b3ab073468e9a9ca0e7e42099858d185ba","ref":"pr-6705","status":"failed","source":"push","created_at":"2018-10-29T15:41:39.042Z","updated_at":"2018-10-29T16:53:56.056Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/34705119"},"web_url":"https://gitlab.com/coq/coq/-/jobs/113954916","artifacts":[{"file_type":"trace","size":17984,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2018-11-05T15:57:05.512Z","tag_list":[]}
{"id":113954915,"status":"success","stage":"build","name":"build:edge+flambda","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-10-29T15:41:39.150Z","started_at":"2018-10-29T15:41:42.021Z","finished_at":"2018-10-29T16:08:21.606Z","duration":1599.585485,"queued_duration":1.17552,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"05ce23b3ab073468e9a9ca0e7e42099858d185ba","short_id":"05ce23b3","created_at":"2018-10-29T16:41:18.000+01:00","parent_ids":["765c61d42e301c1f98c44b3986d73a052ca3a8c5"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-10-29T16:41:18.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/05ce23b3ab073468e9a9ca0e7e42099858d185ba"},"pipeline":{"id":34705119,"iid":4750,"project_id":6138686,"sha":"05ce23b3ab073468e9a9ca0e7e42099858d185ba","ref":"pr-6705","status":"failed","source":"push","created_at":"2018-10-29T15:41:39.042Z","updated_at":"2018-10-29T16:53:56.056Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/34705119"},"web_url":"https://gitlab.com/coq/coq/-/jobs/113954915","artifacts":[{"file_type":"trace","size":232731,"filename":"job.log","file_format":null}],"runner":{"id":44949,"description":"shared-runners-manager-4.gitlab.com","ip_address":"13.37.237.197","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2018-11-05T16:08:12.444Z","tag_list":[]}
{"id":113954914,"status":"success","stage":"build","name":"build:edge","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-10-29T15:41:39.122Z","started_at":"2018-10-29T15:41:41.948Z","finished_at":"2018-10-29T15:51:19.144Z","duration":577.196275,"queued_duration":0.97971,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"05ce23b3ab073468e9a9ca0e7e42099858d185ba","short_id":"05ce23b3","created_at":"2018-10-29T16:41:18.000+01:00","parent_ids":["765c61d42e301c1f98c44b3986d73a052ca3a8c5"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-10-29T16:41:18.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/05ce23b3ab073468e9a9ca0e7e42099858d185ba"},"pipeline":{"id":34705119,"iid":4750,"project_id":6138686,"sha":"05ce23b3ab073468e9a9ca0e7e42099858d185ba","ref":"pr-6705","status":"failed","source":"push","created_at":"2018-10-29T15:41:39.042Z","updated_at":"2018-10-29T16:53:56.056Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/34705119"},"web_url":"https://gitlab.com/coq/coq/-/jobs/113954914","artifacts":[{"file_type":"trace","size":261258,"filename":"job.log","file_format":null}],"runner":null,"artifacts_expire_at":"2018-11-05T15:51:12.584Z","tag_list":[]}
{"id":113954913,"status":"success","stage":"build","name":"build:base+32bit","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-10-29T15:41:39.089Z","started_at":"2018-10-29T15:41:41.828Z","finished_at":"2018-10-29T15:57:05.900Z","duration":924.072195,"queued_duration":0.812373,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"05ce23b3ab073468e9a9ca0e7e42099858d185ba","short_id":"05ce23b3","created_at":"2018-10-29T16:41:18.000+01:00","parent_ids":["765c61d42e301c1f98c44b3986d73a052ca3a8c5"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-10-29T16:41:18.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/05ce23b3ab073468e9a9ca0e7e42099858d185ba"},"pipeline":{"id":34705119,"iid":4750,"project_id":6138686,"sha":"05ce23b3ab073468e9a9ca0e7e42099858d185ba","ref":"pr-6705","status":"failed","source":"push","created_at":"2018-10-29T15:41:39.042Z","updated_at":"2018-10-29T16:53:56.056Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/34705119"},"web_url":"https://gitlab.com/coq/coq/-/jobs/113954913","artifacts":[{"file_type":"trace","size":226625,"filename":"job.log","file_format":null}],"runner":{"id":44028,"description":"shared-runners-manager-3.gitlab.com","ip_address":"35.196.21.178","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2018-11-05T15:57:02.017Z","tag_list":[]}
{"id":113954912,"status":"success","stage":"build","name":"build:base","ref":"pr-6705","tag":false,"coverage":null,"allow_failure":false,"created_at":"2018-10-29T15:41:39.059Z","started_at":"2018-10-29T15:41:41.700Z","finished_at":"2018-10-29T16:00:07.069Z","duration":1105.368441,"queued_duration":0.627288,"user":{"id":2256237,"username":"coqbot","name":"coqbot","state":"active","avatar_url":"https://gitlab.com/uploads/-/system/user/avatar/2256237/avatar.png","web_url":"https://gitlab.com/coqbot","created_at":"2018-04-28T07:53:57.210Z","bio":"Hello, I'm a bot.","location":"","public_email":"","skype":"","linkedin":"","twitter":"","website_url":"","organization":"","job_title":"","pronouns":null,"bot":false,"work_information":null,"followers":0,"following":0,"local_time":null},"commit":{"id":"05ce23b3ab073468e9a9ca0e7e42099858d185ba","short_id":"05ce23b3","created_at":"2018-10-29T16:41:18.000+01:00","parent_ids":["765c61d42e301c1f98c44b3986d73a052ca3a8c5"],"title":"ssr: implement Quill's intro patterns","message":"ssr: implement Quill's intro patterns\n\nThis commit implements the extended intro patterns discussed in the\nQuill working group.\n\nDispatch \"=> ( | )\"\n this is like [|] but does not perform case (never: no ssr exceptions)\n\nTemporary \"=> +\"\n \"move=> + stuff\" ==== \"move=> tmp stuff; move: tmp\"\n It preserves the original name.\n \"=>\" can be chained to force generalization as in\n \"move=> + y + => x z\"\n\nTactics as views \"=> /ltac:(tactic)\"\n Supports notations, eg \"Notation foo := ltac:(bla bla bla). .. => /foo\".\n Limited to views on the right of \"=>\", views that decorate a tactic\n as move or case are not supported to be tactics.\n\nDependent \"=> >H\"\n move=> >H  ===== move=> ???? H, with enough ? to\n name H the first non-dependent assumption (LHS of the first arrow)\n\nBlock intro \"=> [^ H] [^~ H] ( ^H ) ( ^~H )\"\n after \"case\" or \"elim\" or \"elim/v\" it introduces in one go\n all new assumptions coming from the eliminations. The names are\n picked from the inductive type declaration or the elimination principle\n \"v\" in \"elim/v\" and are appended/prepended the seed \"H\"\n\nCustom simpl-switch \"=> /2/ /3= /4/5=\"\n  /$n/ maps to \"ssrdone$n\" while /n= maps to \"ssrsimpl$n\"\n  \"ssrdone0\" is taken by ssreflect (like done, but without split)\n\nThe implementation makes crucial use of the goal_with_state feature of\nthe tactic monad. For example + schedules a generalization to be performed\nat the end of the intro pattern and [^ .. ] reads the name seeds from\nthe state (that is filled in by case and elim).\n","author_name":"Enrico Tassi","author_email":"Enrico.Tassi@inria.fr","authored_date":"2018-08-29T13:11:24.000+02:00","committer_name":"Enrico Tassi","committer_email":"Enrico.Tassi@inria.fr","committed_date":"2018-10-29T16:41:18.000+01:00","trailers":{},"web_url":"https://gitlab.com/coq/coq/-/commit/05ce23b3ab073468e9a9ca0e7e42099858d185ba"},"pipeline":{"id":34705119,"iid":4750,"project_id":6138686,"sha":"05ce23b3ab073468e9a9ca0e7e42099858d185ba","ref":"pr-6705","status":"failed","source":"push","created_at":"2018-10-29T15:41:39.042Z","updated_at":"2018-10-29T16:53:56.056Z","web_url":"https://gitlab.com/coq/coq/-/pipelines/34705119"},"web_url":"https://gitlab.com/coq/coq/-/jobs/113954912","artifacts":[{"file_type":"trace","size":277850,"filename":"job.log","file_format":null}],"runner":{"id":380986,"description":"shared-runners-manager-5.gitlab.com","ip_address":"34.74.209.140","active":true,"paused":false,"is_shared":true,"runner_type":"instance_type","name":"gitlab-runner","online":false,"status":"stale"},"artifacts_expire_at":"2018-11-05T15:59:59.568Z","tag_list":[]}
